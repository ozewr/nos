
target/riscv64gc-unknown-none-elf/debug/os:	file format elf64-littleriscv

Disassembly of section .text:

0000000080200000 <stext>:
80200000: 2a 82        	mv	tp, a0

0000000080200002 <.Lpcrel_hi0>:
80200002: 17 61 04 00  	auipc	sp, 0x46
80200006: 13 01 e1 ff  	addi	sp, sp, -0x2
8020000a: 89 62        	lui	t0, 0x2
8020000c: 05 05        	addi	a0, a0, 0x1
8020000e: 33 05 55 02  	mul	a0, a0, t0
80200012: 2a 91        	add	sp, sp, a0
80200014: 97 50 00 00  	auipc	ra, 0x5
80200018: e7 80 60 fa  	jalr	-0x5a(ra) <rust_main>

000000008020001c <_ZN2os10filesystem5inode9open_file28_$u7b$$u7b$closure$u7d$$u7d$17h2dbd483bb8af0dfaE>:
;                     .map(|inode|{
8020001c: 59 71        	addi	sp, sp, -0x70
8020001e: 86 f4        	sd	ra, 0x68(sp)
80200020: a2 f0        	sd	s0, 0x60(sp)
80200022: 80 18        	addi	s0, sp, 0x70
80200024: 23 30 b4 fa  	sd	a1, -0x60(s0)
80200028: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020002c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                             judg_read(flags), 
80200030: 03 35 04 fb  	ld	a0, -0x50(s0)
80200034: 08 61        	ld	a0, 0x0(a0)
80200036: 97 20 00 00  	auipc	ra, 0x2
8020003a: e7 80 40 e1  	jalr	-0x1ec(ra) <_ZN2os10filesystem5inode9judg_read17he84fe7cd97b3c657E>
8020003e: 23 3c a4 f8  	sd	a0, -0x68(s0)
;                             judg_write(flags), 
80200042: 03 35 04 fb  	ld	a0, -0x50(s0)
80200046: 08 61        	ld	a0, 0x0(a0)
80200048: 97 20 00 00  	auipc	ra, 0x2
8020004c: e7 80 60 e3  	jalr	-0x1ca(ra) <_ZN2os10filesystem5inode10judg_write17hd175e6dbfb4d774cE>
80200050: 83 35 84 f9  	ld	a1, -0x68(s0)
80200054: 83 36 04 fa  	ld	a3, -0x60(s0)
80200058: 2a 86        	mv	a2, a0
8020005a: 13 05 84 fb  	addi	a0, s0, -0x48
8020005e: 23 34 a4 fa  	sd	a0, -0x58(s0)
;                         Arc::new(OSinode::new(
80200062: 97 20 00 00  	auipc	ra, 0x2
80200066: e7 80 00 e5  	jalr	-0x1b0(ra) <_ZN2os10filesystem5inode7OSinode3new17h05ff73943e240f0dE>
8020006a: 03 35 84 fa  	ld	a0, -0x58(s0)
8020006e: 97 10 00 00  	auipc	ra, 0x1
80200072: e7 80 00 7a  	jalr	0x7a0(ra) <_ZN5alloc4sync12Arc$LT$T$GT$3new17hbe1c6aea58d8f200E>
80200076: a6 70        	ld	ra, 0x68(sp)
80200078: 06 74        	ld	s0, 0x60(sp)
;                     })
8020007a: 65 61        	addi	sp, sp, 0x70
8020007c: 82 80        	ret

000000008020007e <_ZN2os10filesystem5inode9open_file28_$u7b$$u7b$closure$u7d$$u7d$17h06d669039c9fa6baE>:
;             .map(|inode|{
8020007e: 1d 71        	addi	sp, sp, -0x60
80200080: 86 ec        	sd	ra, 0x58(sp)
80200082: a2 e8        	sd	s0, 0x50(sp)
80200084: 80 10        	addi	s0, sp, 0x60
80200086: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020008a: 23 3c b4 fa  	sd	a1, -0x48(s0)
;                 if judg_trunc(flags){
8020008e: 03 35 04 fb  	ld	a0, -0x50(s0)
80200092: 08 61        	ld	a0, 0x0(a0)
80200094: 97 20 00 00  	auipc	ra, 0x2
80200098: e7 80 c0 dc  	jalr	-0x234(ra) <_ZN2os10filesystem5inode10judg_trunc17h9bd3fadb325c23caE>
8020009c: 29 e9        	bnez	a0, 0x802000ee <_ZN2os10filesystem5inode9open_file28_$u7b$$u7b$closure$u7d$$u7d$17h06d669039c9fa6baE+0x70>
8020009e: 09 a0        	j	0x802000a0 <_ZN2os10filesystem5inode9open_file28_$u7b$$u7b$closure$u7d$$u7d$17h06d669039c9fa6baE+0x22>
;                     judg_read(flags),
802000a0: 03 35 04 fb  	ld	a0, -0x50(s0)
802000a4: 08 61        	ld	a0, 0x0(a0)
802000a6: 97 20 00 00  	auipc	ra, 0x2
802000aa: e7 80 40 da  	jalr	-0x25c(ra) <_ZN2os10filesystem5inode9judg_read17he84fe7cd97b3c657E>
802000ae: 23 30 a4 fa  	sd	a0, -0x60(s0)
;                     judg_write(flags),
802000b2: 03 35 04 fb  	ld	a0, -0x50(s0)
802000b6: 08 61        	ld	a0, 0x0(a0)
802000b8: 97 20 00 00  	auipc	ra, 0x2
802000bc: e7 80 60 dc  	jalr	-0x23a(ra) <_ZN2os10filesystem5inode10judg_write17hd175e6dbfb4d774cE>
802000c0: 83 35 04 fa  	ld	a1, -0x60(s0)
802000c4: 2a 86        	mv	a2, a0
;                     inode
802000c6: 83 36 84 fb  	ld	a3, -0x48(s0)
802000ca: 13 05 04 fc  	addi	a0, s0, -0x40
802000ce: 23 34 a4 fa  	sd	a0, -0x58(s0)
;                 Arc::new(OSinode::new(
802000d2: 97 20 00 00  	auipc	ra, 0x2
802000d6: e7 80 00 de  	jalr	-0x220(ra) <_ZN2os10filesystem5inode7OSinode3new17h05ff73943e240f0dE>
802000da: 03 35 84 fa  	ld	a0, -0x58(s0)
802000de: 97 10 00 00  	auipc	ra, 0x1
802000e2: e7 80 00 73  	jalr	0x730(ra) <_ZN5alloc4sync12Arc$LT$T$GT$3new17hbe1c6aea58d8f200E>
802000e6: e6 60        	ld	ra, 0x58(sp)
802000e8: 46 64        	ld	s0, 0x50(sp)
;             })
802000ea: 25 61        	addi	sp, sp, 0x60
802000ec: 82 80        	ret
802000ee: 13 05 84 fb  	addi	a0, s0, -0x48
;                     inode.clear();
802000f2: 97 20 00 00  	auipc	ra, 0x2
802000f6: e7 80 40 d3  	jalr	-0x2cc(ra) <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hba73a899464bd59dE>
802000fa: 97 80 02 00  	auipc	ra, 0x28
802000fe: e7 80 60 06  	jalr	0x66(ra) <_ZN7easy_fs3vfs5Inode5clear17h0fbcbbfd63381375E>
80200102: 79 bf        	j	0x802000a0 <_ZN2os10filesystem5inode9open_file28_$u7b$$u7b$closure$u7d$$u7d$17h06d669039c9fa6baE+0x22>

0000000080200104 <_ZN4core3ptr13read_volatile17h2d5a10d9e18887f4E>:
; pub unsafe fn read_volatile<T>(src: *const T) -> T {
80200104: 79 71        	addi	sp, sp, -0x30
80200106: 06 f4        	sd	ra, 0x28(sp)
80200108: 22 f0        	sd	s0, 0x20(sp)
8020010a: 00 18        	addi	s0, sp, 0x30
8020010c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80200110: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80200114: 09 a0        	j	0x80200116 <_ZN4core3ptr13read_volatile17h2d5a10d9e18887f4E+0x12>
80200116: 03 35 84 fd  	ld	a0, -0x28(s0)
8020011a: 89 45        	li	a1, 0x2
;         assert_unsafe_precondition!(
8020011c: 97 40 01 00  	auipc	ra, 0x14
80200120: e7 80 c0 d7  	jalr	-0x284(ra) <_ZN4core3ptr13read_volatile18precondition_check17h0d89a123e64e7f92E>
80200124: 09 a0        	j	0x80200126 <_ZN4core3ptr13read_volatile17h2d5a10d9e18887f4E+0x22>
80200126: 03 35 84 fd  	ld	a0, -0x28(s0)
;         intrinsics::volatile_load(src)
8020012a: 03 15 05 00  	lh	a0, 0x0(a0)
8020012e: 23 17 a4 fe  	sh	a0, -0x12(s0)
; }
80200132: 03 15 e4 fe  	lh	a0, -0x12(s0)
80200136: a2 70        	ld	ra, 0x28(sp)
80200138: 02 74        	ld	s0, 0x20(sp)
8020013a: 45 61        	addi	sp, sp, 0x30
8020013c: 82 80        	ret

000000008020013e <_ZN4core3ptr13read_volatile17h5e34f110ebaae05bE>:
; pub unsafe fn read_volatile<T>(src: *const T) -> T {
8020013e: 79 71        	addi	sp, sp, -0x30
80200140: 06 f4        	sd	ra, 0x28(sp)
80200142: 22 f0        	sd	s0, 0x20(sp)
80200144: 00 18        	addi	s0, sp, 0x30
80200146: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020014a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
8020014e: 09 a0        	j	0x80200150 <_ZN4core3ptr13read_volatile17h5e34f110ebaae05bE+0x12>
80200150: 03 35 84 fd  	ld	a0, -0x28(s0)
80200154: a1 45        	li	a1, 0x8
;         assert_unsafe_precondition!(
80200156: 97 40 01 00  	auipc	ra, 0x14
8020015a: e7 80 20 d4  	jalr	-0x2be(ra) <_ZN4core3ptr13read_volatile18precondition_check17h0d89a123e64e7f92E>
8020015e: 09 a0        	j	0x80200160 <_ZN4core3ptr13read_volatile17h5e34f110ebaae05bE+0x22>
80200160: 03 35 84 fd  	ld	a0, -0x28(s0)
;         intrinsics::volatile_load(src)
80200164: 08 61        	ld	a0, 0x0(a0)
80200166: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020016a: 03 35 84 fe  	ld	a0, -0x18(s0)
8020016e: a2 70        	ld	ra, 0x28(sp)
80200170: 02 74        	ld	s0, 0x20(sp)
; }
80200172: 45 61        	addi	sp, sp, 0x30
80200174: 82 80        	ret

0000000080200176 <_ZN4core3ptr13read_volatile17h6347c905b0a95d88E>:
; pub unsafe fn read_volatile<T>(src: *const T) -> T {
80200176: 79 71        	addi	sp, sp, -0x30
80200178: 06 f4        	sd	ra, 0x28(sp)
8020017a: 22 f0        	sd	s0, 0x20(sp)
8020017c: 00 18        	addi	s0, sp, 0x30
8020017e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80200182: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80200186: 09 a0        	j	0x80200188 <_ZN4core3ptr13read_volatile17h6347c905b0a95d88E+0x12>
80200188: 03 35 84 fd  	ld	a0, -0x28(s0)
8020018c: 89 45        	li	a1, 0x2
;         assert_unsafe_precondition!(
8020018e: 97 40 01 00  	auipc	ra, 0x14
80200192: e7 80 a0 d0  	jalr	-0x2f6(ra) <_ZN4core3ptr13read_volatile18precondition_check17h0d89a123e64e7f92E>
80200196: 09 a0        	j	0x80200198 <_ZN4core3ptr13read_volatile17h6347c905b0a95d88E+0x22>
80200198: 03 35 84 fd  	ld	a0, -0x28(s0)
;         intrinsics::volatile_load(src)
8020019c: 03 15 05 00  	lh	a0, 0x0(a0)
802001a0: 23 17 a4 fe  	sh	a0, -0x12(s0)
; }
802001a4: 03 15 e4 fe  	lh	a0, -0x12(s0)
802001a8: a2 70        	ld	ra, 0x28(sp)
802001aa: 02 74        	ld	s0, 0x20(sp)
802001ac: 45 61        	addi	sp, sp, 0x30
802001ae: 82 80        	ret

00000000802001b0 <_ZN4core3ptr14write_volatile17h07c9ba244f97b576E>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
802001b0: 79 71        	addi	sp, sp, -0x30
802001b2: 06 f4        	sd	ra, 0x28(sp)
802001b4: 22 f0        	sd	s0, 0x20(sp)
802001b6: 00 18        	addi	s0, sp, 0x30
802001b8: 23 38 a4 fc  	sd	a0, -0x30(s0)
802001bc: 2e 86        	mv	a2, a1
802001be: 23 3c c4 fc  	sd	a2, -0x28(s0)
802001c2: 23 30 a4 fe  	sd	a0, -0x20(s0)
802001c6: 23 17 b4 fe  	sh	a1, -0x12(s0)
;         assert_unsafe_precondition!(
802001ca: 09 a0        	j	0x802001cc <_ZN4core3ptr14write_volatile17h07c9ba244f97b576E+0x1c>
802001cc: 03 35 04 fd  	ld	a0, -0x30(s0)
802001d0: 89 45        	li	a1, 0x2
;         assert_unsafe_precondition!(
802001d2: 97 40 01 00  	auipc	ra, 0x14
802001d6: e7 80 e0 cf  	jalr	-0x302(ra) <_ZN4core3ptr14write_volatile18precondition_check17h38850d7be0fa672bE>
802001da: 09 a0        	j	0x802001dc <_ZN4core3ptr14write_volatile17h07c9ba244f97b576E+0x2c>
802001dc: 03 35 84 fd  	ld	a0, -0x28(s0)
802001e0: 83 35 04 fd  	ld	a1, -0x30(s0)
;         intrinsics::volatile_store(dst, src);
802001e4: 23 90 a5 00  	sh	a0, 0x0(a1)
802001e8: a2 70        	ld	ra, 0x28(sp)
802001ea: 02 74        	ld	s0, 0x20(sp)
; }
802001ec: 45 61        	addi	sp, sp, 0x30
802001ee: 82 80        	ret

00000000802001f0 <_ZN4core3ptr14write_volatile17h5d2b6d6a04e36344E>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
802001f0: 79 71        	addi	sp, sp, -0x30
802001f2: 06 f4        	sd	ra, 0x28(sp)
802001f4: 22 f0        	sd	s0, 0x20(sp)
802001f6: 00 18        	addi	s0, sp, 0x30
802001f8: 23 38 b4 fc  	sd	a1, -0x30(s0)
802001fc: 23 3c a4 fc  	sd	a0, -0x28(s0)
80200200: 23 30 a4 fe  	sd	a0, -0x20(s0)
80200204: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         assert_unsafe_precondition!(
80200208: 09 a0        	j	0x8020020a <_ZN4core3ptr14write_volatile17h5d2b6d6a04e36344E+0x1a>
8020020a: 03 35 84 fd  	ld	a0, -0x28(s0)
8020020e: a1 45        	li	a1, 0x8
;         assert_unsafe_precondition!(
80200210: 97 40 01 00  	auipc	ra, 0x14
80200214: e7 80 00 cc  	jalr	-0x340(ra) <_ZN4core3ptr14write_volatile18precondition_check17h38850d7be0fa672bE>
80200218: 09 a0        	j	0x8020021a <_ZN4core3ptr14write_volatile17h5d2b6d6a04e36344E+0x2a>
8020021a: 03 35 04 fd  	ld	a0, -0x30(s0)
8020021e: 83 35 84 fd  	ld	a1, -0x28(s0)
;         intrinsics::volatile_store(dst, src);
80200222: 88 e1        	sd	a0, 0x0(a1)
80200224: a2 70        	ld	ra, 0x28(sp)
80200226: 02 74        	ld	s0, 0x20(sp)
; }
80200228: 45 61        	addi	sp, sp, 0x30
8020022a: 82 80        	ret

000000008020022c <_ZN4core3ptr14write_volatile17hcd0189b05f325d5dE>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
8020022c: 79 71        	addi	sp, sp, -0x30
8020022e: 06 f4        	sd	ra, 0x28(sp)
80200230: 22 f0        	sd	s0, 0x20(sp)
80200232: 00 18        	addi	s0, sp, 0x30
80200234: 23 38 a4 fc  	sd	a0, -0x30(s0)
80200238: 2e 86        	mv	a2, a1
8020023a: 23 3c c4 fc  	sd	a2, -0x28(s0)
8020023e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80200242: 23 17 b4 fe  	sh	a1, -0x12(s0)
;         assert_unsafe_precondition!(
80200246: 09 a0        	j	0x80200248 <_ZN4core3ptr14write_volatile17hcd0189b05f325d5dE+0x1c>
80200248: 03 35 04 fd  	ld	a0, -0x30(s0)
8020024c: 89 45        	li	a1, 0x2
;         assert_unsafe_precondition!(
8020024e: 97 40 01 00  	auipc	ra, 0x14
80200252: e7 80 20 c8  	jalr	-0x37e(ra) <_ZN4core3ptr14write_volatile18precondition_check17h38850d7be0fa672bE>
80200256: 09 a0        	j	0x80200258 <_ZN4core3ptr14write_volatile17hcd0189b05f325d5dE+0x2c>
80200258: 03 35 84 fd  	ld	a0, -0x28(s0)
8020025c: 83 35 04 fd  	ld	a1, -0x30(s0)
;         intrinsics::volatile_store(dst, src);
80200260: 23 90 a5 00  	sh	a0, 0x0(a1)
80200264: a2 70        	ld	ra, 0x28(sp)
80200266: 02 74        	ld	s0, 0x20(sp)
; }
80200268: 45 61        	addi	sp, sp, 0x30
8020026a: 82 80        	ret

000000008020026c <_ZN5alloc11collections9vec_deque17VecDeque$LT$T$GT$3new17h27afeefa3f0ffea4E>:
;     pub const fn new() -> VecDeque<T> {
8020026c: 41 11        	addi	sp, sp, -0x10
8020026e: 06 e4        	sd	ra, 0x8(sp)
80200270: 22 e0        	sd	s0, 0x0(sp)
80200272: 00 08        	addi	s0, sp, 0x10
80200274: aa 85        	mv	a1, a0
80200276: 01 45        	li	a0, 0x0
;         VecDeque { head: 0, len: 0, buf: RawVec::NEW }
80200278: 88 e9        	sd	a0, 0x10(a1)
8020027a: 88 ed        	sd	a0, 0x18(a1)
8020027c: 88 e1        	sd	a0, 0x0(a1)
8020027e: 21 45        	li	a0, 0x8
80200280: 88 e5        	sd	a0, 0x8(a1)
80200282: a2 60        	ld	ra, 0x8(sp)
80200284: 02 64        	ld	s0, 0x0(sp)
;     }
80200286: 41 01        	addi	sp, sp, 0x10
80200288: 82 80        	ret

000000008020028a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$12slice_ranges17h043ccb611de8ccc2E>:
;     fn slice_ranges<R>(&self, range: R, len: usize) -> (Range<usize>, Range<usize>)
8020028a: 51 71        	addi	sp, sp, -0xf0
8020028c: 86 f5        	sd	ra, 0xe8(sp)
8020028e: a2 f1        	sd	s0, 0xe0(sp)
80200290: 80 19        	addi	s0, sp, 0xf0
80200292: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80200296: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8020029a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020029e: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         let Range { start, end } = slice::range(range, ..len);
802002a2: 23 38 c4 f4  	sd	a2, -0xb0(s0)
802002a6: 03 35 04 f5  	ld	a0, -0xb0(s0)

00000000802002aa <.Lpcrel_hi0>:
802002aa: 97 35 03 00  	auipc	a1, 0x33
802002ae: 93 85 e5 dd  	addi	a1, a1, -0x222
802002b2: 97 a0 02 00  	auipc	ra, 0x2a
802002b6: e7 80 c0 78  	jalr	0x78c(ra) <_ZN4core5slice5index5range17h17dae68659a7e963E>
802002ba: 2a 86        	mv	a2, a0
802002bc: 23 30 c4 f4  	sd	a2, -0xc0(s0)
802002c0: 23 38 a4 fa  	sd	a0, -0x50(s0)
802002c4: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         let len = end - start;
802002c8: 33 85 a5 40  	sub	a0, a1, a0
802002cc: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802002d0: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if len == 0 {
802002d4: 11 e9        	bnez	a0, 0x802002e8 <.Lpcrel_hi0+0x3e>
802002d6: 09 a0        	j	0x802002d8 <.Lpcrel_hi0+0x2e>
802002d8: 83 35 84 f3  	ld	a1, -0xc8(s0)
802002dc: 01 45        	li	a0, 0x0
;             (0..0, 0..0)
802002de: 88 e1        	sd	a0, 0x0(a1)
802002e0: 88 e5        	sd	a0, 0x8(a1)
802002e2: 88 e9        	sd	a0, 0x10(a1)
802002e4: 88 ed        	sd	a0, 0x18(a1)
;         if len == 0 {
802002e6: 39 a8        	j	0x80200304 <.Lpcrel_hi0+0x5a>
802002e8: 83 35 04 f4  	ld	a1, -0xc0(s0)
802002ec: 03 35 04 f3  	ld	a0, -0xd0(s0)
;             let wrapped_start = self.to_physical_idx(start);
802002f0: 97 00 00 00  	auipc	ra, 0x0
802002f4: e7 80 40 1c  	jalr	0x1c4(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E>
802002f8: aa 85        	mv	a1, a0
802002fa: 23 34 b4 f2  	sd	a1, -0xd8(s0)
802002fe: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200302: 29 a0        	j	0x8020030c <.Lpcrel_hi0+0x62>
80200304: ae 70        	ld	ra, 0xe8(sp)
80200306: 0e 74        	ld	s0, 0xe0(sp)
;     }
80200308: 6d 61        	addi	sp, sp, 0xf0
8020030a: 82 80        	ret
8020030c: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200310: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80200314: 09 a0        	j	0x80200316 <.Lpcrel_hi0+0x6c>
80200316: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8020031a: 08 61        	ld	a0, 0x0(a0)
8020031c: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80200320: 09 a0        	j	0x80200322 <.Lpcrel_hi0+0x78>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200322: 09 a0        	j	0x80200324 <.Lpcrel_hi0+0x7a>
80200324: 83 35 84 f4  	ld	a1, -0xb8(s0)
80200328: 03 36 84 f2  	ld	a2, -0xd8(s0)
;             let head_len = self.capacity() - wrapped_start;
8020032c: 03 35 84 f5  	ld	a0, -0xa8(s0)
80200330: 11 8d        	sub	a0, a0, a2
80200332: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80200336: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             if head_len >= len {
8020033a: 63 7d b5 00  	bgeu	a0, a1, 0x80200354 <.Lpcrel_hi0+0xaa>
8020033e: 09 a0        	j	0x80200340 <.Lpcrel_hi0+0x96>
80200340: 03 35 84 f4  	ld	a0, -0xb8(s0)
80200344: 83 35 04 f2  	ld	a1, -0xe0(s0)
;                 let tail_len = len - head_len;
80200348: 0d 8d        	sub	a0, a0, a1
8020034a: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020034e: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200352: 35 a0        	j	0x8020037e <.Lpcrel_hi0+0xd4>
80200354: 83 35 84 f3  	ld	a1, -0xc8(s0)
80200358: 03 36 84 f2  	ld	a2, -0xd8(s0)
8020035c: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 (wrapped_start..wrapped_start + len, 0..0)
80200360: 32 95        	add	a0, a0, a2
80200362: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80200366: 23 34 a4 f6  	sd	a0, -0x98(s0)
8020036a: 03 36 04 f6  	ld	a2, -0xa0(s0)
8020036e: 03 35 84 f6  	ld	a0, -0x98(s0)
80200372: 90 e1        	sd	a2, 0x0(a1)
80200374: 88 e5        	sd	a0, 0x8(a1)
80200376: 01 45        	li	a0, 0x0
80200378: 88 e9        	sd	a0, 0x10(a1)
8020037a: 88 ed        	sd	a0, 0x18(a1)
;             if head_len >= len {
8020037c: 99 a8        	j	0x802003d2 <.Lpcrel_hi0+0x128>
8020037e: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200382: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80200386: 09 a0        	j	0x80200388 <.Lpcrel_hi0+0xde>
80200388: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8020038c: 08 61        	ld	a0, 0x0(a0)
8020038e: 23 30 a4 f8  	sd	a0, -0x80(s0)
80200392: 09 a0        	j	0x80200394 <.Lpcrel_hi0+0xea>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200394: 09 a0        	j	0x80200396 <.Lpcrel_hi0+0xec>
80200396: 83 35 84 f3  	ld	a1, -0xc8(s0)
8020039a: 03 35 84 f1  	ld	a0, -0xe8(s0)
8020039e: 03 36 84 f2  	ld	a2, -0xd8(s0)
;                 (wrapped_start..self.capacity(), 0..tail_len)
802003a2: 23 38 c4 f6  	sd	a2, -0x90(s0)
802003a6: 03 36 04 f8  	ld	a2, -0x80(s0)
802003aa: 23 3c c4 f6  	sd	a2, -0x88(s0)
802003ae: 01 46        	li	a2, 0x0
802003b0: 23 34 c4 f8  	sd	a2, -0x78(s0)
802003b4: 23 38 a4 f8  	sd	a0, -0x70(s0)
802003b8: 03 36 04 f7  	ld	a2, -0x90(s0)
802003bc: 03 35 84 f7  	ld	a0, -0x88(s0)
802003c0: 90 e1        	sd	a2, 0x0(a1)
802003c2: 88 e5        	sd	a0, 0x8(a1)
802003c4: 03 36 84 f8  	ld	a2, -0x78(s0)
802003c8: 03 35 04 f9  	ld	a0, -0x70(s0)
802003cc: 90 e9        	sd	a2, 0x10(a1)
802003ce: 88 ed        	sd	a0, 0x18(a1)
;             if head_len >= len {
802003d0: 09 a0        	j	0x802003d2 <.Lpcrel_hi0+0x128>
;         if len == 0 {
802003d2: 0d bf        	j	0x80200304 <.Lpcrel_hi0+0x5a>

00000000802003d4 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$13as_mut_slices17h8dacc5d5b019544dE>:
;     pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {
802003d4: 6d 71        	addi	sp, sp, -0x110
802003d6: 06 e6        	sd	ra, 0x108(sp)
802003d8: 22 e2        	sd	s0, 0x100(sp)
802003da: 00 0a        	addi	s0, sp, 0x110
802003dc: 23 3c b4 ee  	sd	a1, -0x108(s0)
802003e0: 23 30 a4 f0  	sd	a0, -0x100(s0)
802003e4: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         let (a_range, b_range) = self.slice_ranges(.., self.len);
802003e8: 90 6d        	ld	a2, 0x18(a1)
802003ea: 13 05 84 f0  	addi	a0, s0, -0xf8
802003ee: 97 00 00 00  	auipc	ra, 0x0
802003f2: e7 80 c0 e9  	jalr	-0x164(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$12slice_ranges17h043ccb611de8ccc2E>
802003f6: 03 36 84 ef  	ld	a2, -0x108(s0)
802003fa: 83 35 04 f0  	ld	a1, -0x100(s0)
802003fe: 03 38 84 f0  	ld	a6, -0xf8(s0)
80200402: 23 38 04 f7  	sd	a6, -0x90(s0)
80200406: 83 36 04 f1  	ld	a3, -0xf0(s0)
8020040a: 23 3c d4 f6  	sd	a3, -0x88(s0)
8020040e: 83 37 84 f1  	ld	a5, -0xe8(s0)
80200412: 23 30 f4 f8  	sd	a5, -0x80(s0)
80200416: 03 35 04 f2  	ld	a0, -0xe0(s0)
8020041a: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         self.buf.ptr()
8020041e: 23 38 c4 f8  	sd	a2, -0x70(s0)
;         self.ptr.as_ptr()
80200422: 18 66        	ld	a4, 0x8(a2)
80200424: 23 3c e4 f8  	sd	a4, -0x68(s0)
;         self.pointer as *mut T
80200428: 23 30 e4 fa  	sd	a4, -0x60(s0)
;         unsafe { intrinsics::offset(self, count) }
8020042c: 93 18 38 00  	slli	a7, a6, 0x3
80200430: 46 97        	add	a4, a4, a7
80200432: 23 34 e4 fa  	sd	a4, -0x58(s0)
;             ptr::slice_from_raw_parts_mut(self.ptr().add(range.start), range.end - range.start)
80200436: b3 86 06 41  	sub	a3, a3, a6
8020043a: 23 38 d4 fa  	sd	a3, -0x50(s0)
;         self as _
8020043e: 23 3c e4 fa  	sd	a4, -0x48(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80200442: 23 3c e4 f2  	sd	a4, -0xc8(s0)
80200446: 23 30 d4 f4  	sd	a3, -0xc0(s0)
8020044a: 03 37 84 f3  	ld	a4, -0xc8(s0)
8020044e: 83 36 04 f4  	ld	a3, -0xc0(s0)
80200452: 23 34 e4 f2  	sd	a4, -0xd8(s0)
80200456: 23 38 d4 f2  	sd	a3, -0xd0(s0)
8020045a: 03 37 84 f2  	ld	a4, -0xd8(s0)
8020045e: 83 36 04 f3  	ld	a3, -0xd0(s0)
;         self.buf.ptr()
80200462: 23 30 c4 fc  	sd	a2, -0x40(s0)
;         self.ptr.as_ptr()
80200466: 10 66        	ld	a2, 0x8(a2)
80200468: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         self.pointer as *mut T
8020046c: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         unsafe { intrinsics::offset(self, count) }
80200470: 13 98 37 00  	slli	a6, a5, 0x3
80200474: 42 96        	add	a2, a2, a6
80200476: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             ptr::slice_from_raw_parts_mut(self.ptr().add(range.start), range.end - range.start)
8020047a: 1d 8d        	sub	a0, a0, a5
8020047c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
80200480: 23 34 c4 fe  	sd	a2, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80200484: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80200488: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8020048c: 03 36 84 f5  	ld	a2, -0xa8(s0)
80200490: 03 35 04 f6  	ld	a0, -0xa0(s0)
80200494: 23 34 c4 f4  	sd	a2, -0xb8(s0)
80200498: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020049c: 03 36 84 f4  	ld	a2, -0xb8(s0)
802004a0: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         unsafe { (&mut *self.buffer_range(a_range), &mut *self.buffer_range(b_range)) }
802004a4: 98 e1        	sd	a4, 0x0(a1)
802004a6: 94 e5        	sd	a3, 0x8(a1)
802004a8: 90 e9        	sd	a2, 0x10(a1)
802004aa: 88 ed        	sd	a0, 0x18(a1)
802004ac: b2 60        	ld	ra, 0x108(sp)
802004ae: 12 64        	ld	s0, 0x100(sp)
;     }
802004b0: 51 61        	addi	sp, sp, 0x110
802004b2: 82 80        	ret

00000000802004b4 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E>:
;     fn to_physical_idx(&self, idx: usize) -> usize {
802004b4: 1d 71        	addi	sp, sp, -0x60
802004b6: 86 ec        	sd	ra, 0x58(sp)
802004b8: a2 e8        	sd	s0, 0x50(sp)
802004ba: 80 10        	addi	s0, sp, 0x60
802004bc: 23 34 a4 fa  	sd	a0, -0x58(s0)
802004c0: 23 34 a4 fc  	sd	a0, -0x38(s0)
802004c4: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.wrap_add(self.head, idx)
802004c8: 08 69        	ld	a0, 0x10(a0)
802004ca: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     uint_impl! {
802004ce: 2e 95        	add	a0, a0, a1
802004d0: 23 38 a4 fa  	sd	a0, -0x50(s0)
802004d4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802004d8: 09 a0        	j	0x802004da <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E+0x26>
802004da: 03 35 84 fa  	ld	a0, -0x58(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802004de: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802004e2: 09 a0        	j	0x802004e4 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E+0x30>
802004e4: 03 35 84 fa  	ld	a0, -0x58(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802004e8: 08 61        	ld	a0, 0x0(a0)
802004ea: 23 30 a4 fc  	sd	a0, -0x40(s0)
802004ee: 09 a0        	j	0x802004f0 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E+0x3c>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802004f0: 09 a0        	j	0x802004f2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E+0x3e>
802004f2: 03 35 04 fb  	ld	a0, -0x50(s0)
;     if logical_index >= capacity { logical_index - capacity } else { logical_index }
802004f6: 83 35 04 fc  	ld	a1, -0x40(s0)
802004fa: 63 78 b5 00  	bgeu	a0, a1, 0x8020050a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E+0x56>
802004fe: 09 a0        	j	0x80200500 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E+0x4c>
80200500: 03 35 04 fb  	ld	a0, -0x50(s0)
;     if logical_index >= capacity { logical_index - capacity } else { logical_index }
80200504: 23 3c a4 fa  	sd	a0, -0x48(s0)
80200508: 09 a8        	j	0x8020051a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E+0x66>
8020050a: 03 35 04 fb  	ld	a0, -0x50(s0)
;     if logical_index >= capacity { logical_index - capacity } else { logical_index }
8020050e: 83 35 04 fc  	ld	a1, -0x40(s0)
80200512: 0d 8d        	sub	a0, a0, a1
80200514: 23 3c a4 fa  	sd	a0, -0x48(s0)
80200518: 09 a0        	j	0x8020051a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E+0x66>
;     }
8020051a: 03 35 84 fb  	ld	a0, -0x48(s0)
8020051e: e6 60        	ld	ra, 0x58(sp)
80200520: 46 64        	ld	s0, 0x50(sp)
80200522: 25 61        	addi	sp, sp, 0x60
80200524: 82 80        	ret

0000000080200526 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$19copy_nonoverlapping17h46e801b71a66b8d8E>:
;     unsafe fn copy_nonoverlapping(&mut self, src: usize, dst: usize, len: usize) {
80200526: 75 71        	addi	sp, sp, -0x90
80200528: 06 e5        	sd	ra, 0x88(sp)
8020052a: 22 e1        	sd	s0, 0x80(sp)
8020052c: 00 09        	addi	s0, sp, 0x90
8020052e: 23 3c d4 f6  	sd	a3, -0x88(s0)
80200532: ae 86        	mv	a3, a1
80200534: 83 35 84 f7  	ld	a1, -0x88(s0)
80200538: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020053c: 23 3c d4 f8  	sd	a3, -0x68(s0)
80200540: 23 30 c4 fa  	sd	a2, -0x60(s0)
80200544: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.buf.ptr()
80200548: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.ptr.as_ptr()
8020054c: 0c 65        	ld	a1, 0x8(a0)
8020054e: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         self.pointer as *mut T
80200552: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { intrinsics::offset(self, count) }
80200556: 8e 06        	slli	a3, a3, 0x3
80200558: b6 95        	add	a1, a1, a3
8020055a: 23 30 b4 f8  	sd	a1, -0x80(s0)
;             ptr::copy_nonoverlapping(self.ptr().add(src), self.ptr().add(dst), len);
8020055e: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.buf.ptr()
80200562: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.ptr.as_ptr()
80200566: 08 65        	ld	a0, 0x8(a0)
80200568: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.pointer as *mut T
8020056c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80200570: 93 15 36 00  	slli	a1, a2, 0x3
80200574: 2e 95        	add	a0, a0, a1
80200576: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020057a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     assert_unsafe_precondition!(
8020057e: 09 a0        	j	0x80200580 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$19copy_nonoverlapping17h46e801b71a66b8d8E+0x5a>
80200580: 03 37 84 f7  	ld	a4, -0x88(s0)
80200584: 83 35 84 f8  	ld	a1, -0x78(s0)
80200588: 03 35 04 f8  	ld	a0, -0x80(s0)
8020058c: a1 46        	li	a3, 0x8
;     assert_unsafe_precondition!(
8020058e: 36 86        	mv	a2, a3
80200590: 97 90 01 00  	auipc	ra, 0x19
80200594: e7 80 c0 27  	jalr	0x27c(ra) <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h279b2b08ed81b702E>
80200598: 09 a0        	j	0x8020059a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$19copy_nonoverlapping17h46e801b71a66b8d8E+0x74>
8020059a: 83 35 04 f8  	ld	a1, -0x80(s0)
8020059e: 03 35 84 f8  	ld	a0, -0x78(s0)
802005a2: 03 36 84 f7  	ld	a2, -0x88(s0)
;     unsafe { copy_nonoverlapping(src, dst, count) }
802005a6: 0e 06        	slli	a2, a2, 0x3
802005a8: 97 10 03 00  	auipc	ra, 0x31
802005ac: e7 80 60 6c  	jalr	0x6c6(ra) <memcpy>
802005b0: aa 60        	ld	ra, 0x88(sp)
802005b2: 0a 64        	ld	s0, 0x80(sp)
;     }
802005b4: 49 61        	addi	sp, sp, 0x90
802005b6: 82 80        	ret

00000000802005b8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E>:
;     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {
802005b8: 59 71        	addi	sp, sp, -0x70
802005ba: 86 f4        	sd	ra, 0x68(sp)
802005bc: a2 f0        	sd	s0, 0x60(sp)
802005be: 80 18        	addi	s0, sp, 0x70
802005c0: 23 34 b4 fa  	sd	a1, -0x58(s0)
802005c4: 23 38 a4 fa  	sd	a0, -0x50(s0)
802005c8: 23 30 a4 fc  	sd	a0, -0x40(s0)
802005cc: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802005d0: 09 a0        	j	0x802005d2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0x1a>
802005d2: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802005d6: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802005da: 09 a0        	j	0x802005dc <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0x24>
802005dc: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802005e0: 08 61        	ld	a0, 0x0(a0)
802005e2: 23 3c a4 fa  	sd	a0, -0x48(s0)
802005e6: 09 a0        	j	0x802005e8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0x30>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802005e8: 09 a0        	j	0x802005ea <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0x32>
802005ea: 03 35 84 fa  	ld	a0, -0x58(s0)
802005ee: 03 36 04 fb  	ld	a2, -0x50(s0)
;         if self.head <= old_capacity - self.len {
802005f2: 0c 6a        	ld	a1, 0x10(a2)
802005f4: 10 6e        	ld	a2, 0x18(a2)
802005f6: 11 8d        	sub	a0, a0, a2
802005f8: 63 76 b5 02  	bgeu	a0, a1, 0x80200624 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0x6c>
802005fc: 09 a0        	j	0x802005fe <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0x46>
802005fe: 03 35 04 fb  	ld	a0, -0x50(s0)
80200602: 83 35 84 fa  	ld	a1, -0x58(s0)
;             let head_len = old_capacity - self.head;
80200606: 10 69        	ld	a2, 0x10(a0)
80200608: 91 8d        	sub	a1, a1, a2
8020060a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020060e: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             let tail_len = self.len - head_len;
80200612: 08 6d        	ld	a0, 0x18(a0)
80200614: 0d 8d        	sub	a0, a0, a1
80200616: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020061a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             if head_len > tail_len && new_capacity - old_capacity >= tail_len {
8020061e: 63 6b b5 02  	bltu	a0, a1, 0x80200654 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0x9c>
80200622: 11 a0        	j	0x80200626 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0x6e>
;         if self.head <= old_capacity - self.len {
80200624: 85 a0        	j	0x80200684 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0xcc>
80200626: 03 35 04 fb  	ld	a0, -0x50(s0)
8020062a: 83 36 84 f9  	ld	a3, -0x68(s0)
;                 let new_head = new_capacity - head_len;
8020062e: 83 35 84 fb  	ld	a1, -0x48(s0)
80200632: 33 86 d5 40  	sub	a2, a1, a3
80200636: 23 38 c4 f8  	sd	a2, -0x70(s0)
8020063a: 23 34 c4 fe  	sd	a2, -0x18(s0)
;                     self.copy(self.head, new_head, head_len);
8020063e: 0c 69        	ld	a1, 0x10(a0)
80200640: 97 00 00 00  	auipc	ra, 0x0
80200644: e7 80 c0 04  	jalr	0x4c(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17h6c9997d3d96f46a6E>
80200648: 83 35 04 fb  	ld	a1, -0x50(s0)
8020064c: 03 35 04 f9  	ld	a0, -0x70(s0)
;                 self.head = new_head;
80200650: 88 e9        	sd	a0, 0x10(a1)
;             if head_len > tail_len && new_capacity - old_capacity >= tail_len {
80200652: 05 a8        	j	0x80200682 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0xca>
80200654: 83 35 04 fa  	ld	a1, -0x60(s0)
80200658: 03 36 84 fa  	ld	a2, -0x58(s0)
;             if head_len > tail_len && new_capacity - old_capacity >= tail_len {
8020065c: 03 35 84 fb  	ld	a0, -0x48(s0)
80200660: 11 8d        	sub	a0, a0, a2
80200662: 63 74 b5 00  	bgeu	a0, a1, 0x8020066a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0xb2>
80200666: 09 a0        	j	0x80200668 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0xb0>
; #![no_std]
80200668: 7d bf        	j	0x80200626 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0x6e>
8020066a: 83 36 04 fa  	ld	a3, -0x60(s0)
8020066e: 03 36 84 fa  	ld	a2, -0x58(s0)
80200672: 03 35 04 fb  	ld	a0, -0x50(s0)
80200676: 81 45        	li	a1, 0x0
;                     self.copy_nonoverlapping(0, old_capacity, tail_len);
80200678: 97 00 00 00  	auipc	ra, 0x0
8020067c: e7 80 e0 ea  	jalr	-0x152(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$19copy_nonoverlapping17h46e801b71a66b8d8E>
80200680: 09 a0        	j	0x80200682 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0xca>
;         if self.head <= old_capacity - self.len {
80200682: 09 a0        	j	0x80200684 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E+0xcc>
80200684: a6 70        	ld	ra, 0x68(sp)
80200686: 06 74        	ld	s0, 0x60(sp)
;     }
80200688: 65 61        	addi	sp, sp, 0x70
8020068a: 82 80        	ret

000000008020068c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17h6c9997d3d96f46a6E>:
;     unsafe fn copy(&mut self, src: usize, dst: usize, len: usize) {
8020068c: 75 71        	addi	sp, sp, -0x90
8020068e: 06 e5        	sd	ra, 0x88(sp)
80200690: 22 e1        	sd	s0, 0x80(sp)
80200692: 00 09        	addi	s0, sp, 0x90
80200694: 23 3c d4 f6  	sd	a3, -0x88(s0)
80200698: ae 86        	mv	a3, a1
8020069a: 83 35 84 f7  	ld	a1, -0x88(s0)
8020069e: 23 38 a4 f8  	sd	a0, -0x70(s0)
802006a2: 23 3c d4 f8  	sd	a3, -0x68(s0)
802006a6: 23 30 c4 fa  	sd	a2, -0x60(s0)
802006aa: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.buf.ptr()
802006ae: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.ptr.as_ptr()
802006b2: 0c 65        	ld	a1, 0x8(a0)
802006b4: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         self.pointer as *mut T
802006b8: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { intrinsics::offset(self, count) }
802006bc: 8e 06        	slli	a3, a3, 0x3
802006be: b6 95        	add	a1, a1, a3
802006c0: 23 30 b4 f8  	sd	a1, -0x80(s0)
;             ptr::copy(self.ptr().add(src), self.ptr().add(dst), len);
802006c4: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.buf.ptr()
802006c8: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.ptr.as_ptr()
802006cc: 08 65        	ld	a0, 0x8(a0)
802006ce: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.pointer as *mut T
802006d2: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
802006d6: 93 15 36 00  	slli	a1, a2, 0x3
802006da: 2e 95        	add	a0, a0, a1
802006dc: 23 34 a4 f8  	sd	a0, -0x78(s0)
802006e0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert_unsafe_precondition!(
802006e4: 09 a0        	j	0x802006e6 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17h6c9997d3d96f46a6E+0x5a>
802006e6: 83 35 84 f8  	ld	a1, -0x78(s0)
802006ea: 03 35 04 f8  	ld	a0, -0x80(s0)
802006ee: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
802006f0: 97 90 01 00  	auipc	ra, 0x19
802006f4: e7 80 e0 2b  	jalr	0x2be(ra) <_ZN4core10intrinsics4copy18precondition_check17h37064f4ff43119e9E>
802006f8: 09 a0        	j	0x802006fa <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17h6c9997d3d96f46a6E+0x6e>
802006fa: 83 35 04 f8  	ld	a1, -0x80(s0)
802006fe: 03 35 84 f8  	ld	a0, -0x78(s0)
80200702: 03 36 84 f7  	ld	a2, -0x88(s0)
;         copy(src, dst, count)
80200706: 0e 06        	slli	a2, a2, 0x3
80200708: 97 10 03 00  	auipc	ra, 0x31
8020070c: e7 80 e0 77  	jalr	0x77e(ra) <memmove>
80200710: aa 60        	ld	ra, 0x88(sp)
80200712: 0a 64        	ld	s0, 0x80(sp)
;     }
80200714: 49 61        	addi	sp, sp, 0x90
80200716: 82 80        	ret

0000000080200718 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17hc57bf646c83db607E>:
;     fn grow(&mut self) {
80200718: 79 71        	addi	sp, sp, -0x30
8020071a: 06 f4        	sd	ra, 0x28(sp)
8020071c: 22 f0        	sd	s0, 0x20(sp)
8020071e: 00 18        	addi	s0, sp, 0x30
80200720: 23 38 a4 fc  	sd	a0, -0x30(s0)
80200724: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200728: 09 a0        	j	0x8020072a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17hc57bf646c83db607E+0x12>
8020072a: 03 35 04 fd  	ld	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
8020072e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80200732: 09 a0        	j	0x80200734 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17hc57bf646c83db607E+0x1c>
80200734: 03 35 04 fd  	ld	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80200738: 08 61        	ld	a0, 0x0(a0)
8020073a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020073e: 09 a0        	j	0x80200740 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17hc57bf646c83db607E+0x28>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200740: 09 a0        	j	0x80200742 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17hc57bf646c83db607E+0x2a>
80200742: 03 35 04 fd  	ld	a0, -0x30(s0)
;         self.buf.reserve_for_push(old_cap);
80200746: 83 35 84 fd  	ld	a1, -0x28(s0)
8020074a: 97 00 01 00  	auipc	ra, 0x10
8020074e: e7 80 80 2f  	jalr	0x2f8(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h3bc3850ca17cff96E>
80200752: 03 35 04 fd  	ld	a0, -0x30(s0)
;             self.handle_capacity_increase(old_cap);
80200756: 83 35 84 fd  	ld	a1, -0x28(s0)
8020075a: 97 00 00 00  	auipc	ra, 0x0
8020075e: e7 80 e0 e5  	jalr	-0x1a2(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17hc4aeb907f79fd097E>
80200762: a2 70        	ld	ra, 0x28(sp)
80200764: 02 74        	ld	s0, 0x20(sp)
;     }
80200766: 45 61        	addi	sp, sp, 0x30
80200768: 82 80        	ret

000000008020076a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9pop_front17h13e866b5ef5601e3E>:
;     pub fn pop_front(&mut self) -> Option<T> {
8020076a: 1d 71        	addi	sp, sp, -0x60
8020076c: 86 ec        	sd	ra, 0x58(sp)
8020076e: a2 e8        	sd	s0, 0x50(sp)
80200770: 80 10        	addi	s0, sp, 0x60
80200772: 23 38 a4 fa  	sd	a0, -0x50(s0)
80200776: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.len == 0
8020077a: 08 6d        	ld	a0, 0x18(a0)
;         if self.is_empty() {
8020077c: 11 e5        	bnez	a0, 0x80200788 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9pop_front17h13e866b5ef5601e3E+0x1e>
8020077e: 09 a0        	j	0x80200780 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9pop_front17h13e866b5ef5601e3E+0x16>
80200780: 01 45        	li	a0, 0x0
;             None
80200782: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         if self.is_empty() {
80200786: a9 a0        	j	0x802007d0 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9pop_front17h13e866b5ef5601e3E+0x66>
80200788: 03 35 04 fb  	ld	a0, -0x50(s0)
;             let old_head = self.head;
8020078c: 0c 69        	ld	a1, 0x10(a0)
8020078e: 23 34 b4 fa  	sd	a1, -0x58(s0)
80200792: 23 34 b4 fc  	sd	a1, -0x38(s0)
80200796: 85 45        	li	a1, 0x1
;             self.head = self.to_physical_idx(1);
80200798: 97 00 00 00  	auipc	ra, 0x0
8020079c: e7 80 c0 d1  	jalr	-0x2e4(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E>
802007a0: 83 35 84 fa  	ld	a1, -0x58(s0)
802007a4: 2a 86        	mv	a2, a0
802007a6: 03 35 04 fb  	ld	a0, -0x50(s0)
802007aa: 10 e9        	sd	a2, 0x10(a0)
;             self.len -= 1;
802007ac: 10 6d        	ld	a2, 0x18(a0)
802007ae: 7d 16        	addi	a2, a2, -0x1
802007b0: 10 ed        	sd	a2, 0x18(a0)
;         self.buf.ptr()
802007b2: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.ptr.as_ptr()
802007b6: 08 65        	ld	a0, 0x8(a0)
802007b8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.pointer as *mut T
802007bc: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
802007c0: 8e 05        	slli	a1, a1, 0x3
802007c2: 2e 95        	add	a0, a0, a1
;         unsafe { ptr::read(self.ptr().add(off)) }
802007c4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         crate::intrinsics::read_via_copy(src)
802007c8: 08 61        	ld	a0, 0x0(a0)
;             Some(unsafe { self.buffer_read(old_head) })
802007ca: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         if self.is_empty() {
802007ce: 09 a0        	j	0x802007d0 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9pop_front17h13e866b5ef5601e3E+0x66>
;     }
802007d0: 03 35 84 fb  	ld	a0, -0x48(s0)
802007d4: e6 60        	ld	ra, 0x58(sp)
802007d6: 46 64        	ld	s0, 0x50(sp)
802007d8: 25 61        	addi	sp, sp, 0x60
802007da: 82 80        	ret

00000000802007dc <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17h5a7efc8f09b39fc6E>:
;     pub fn push_back(&mut self, value: T) {
802007dc: 59 71        	addi	sp, sp, -0x70
802007de: 86 f4        	sd	ra, 0x68(sp)
802007e0: a2 f0        	sd	s0, 0x60(sp)
802007e2: 80 18        	addi	s0, sp, 0x70
802007e4: 23 38 b4 f8  	sd	a1, -0x70(s0)
802007e8: 23 3c a4 f8  	sd	a0, -0x68(s0)
802007ec: 23 38 a4 fa  	sd	a0, -0x50(s0)
802007f0: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         self.len == self.capacity()
802007f4: 08 6d        	ld	a0, 0x18(a0)
802007f6: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802007fa: 09 a0        	j	0x802007fc <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17h5a7efc8f09b39fc6E+0x20>
802007fc: 03 35 84 f9  	ld	a0, -0x68(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200800: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80200804: 09 a0        	j	0x80200806 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17h5a7efc8f09b39fc6E+0x2a>
80200806: 03 35 84 f9  	ld	a0, -0x68(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8020080a: 08 61        	ld	a0, 0x0(a0)
8020080c: 23 34 a4 fa  	sd	a0, -0x58(s0)
80200810: 09 a0        	j	0x80200812 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17h5a7efc8f09b39fc6E+0x36>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80200812: 09 a0        	j	0x80200814 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17h5a7efc8f09b39fc6E+0x38>
80200814: 03 35 04 fa  	ld	a0, -0x60(s0)
;         self.len == self.capacity()
80200818: 83 35 84 fa  	ld	a1, -0x58(s0)
;         if self.is_full() {
8020081c: 63 04 b5 04  	beq	a0, a1, 0x80200864 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17h5a7efc8f09b39fc6E+0x88>
80200820: 09 a0        	j	0x80200822 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17h5a7efc8f09b39fc6E+0x46>
80200822: 03 35 84 f9  	ld	a0, -0x68(s0)
;         unsafe { self.buffer_write(self.to_physical_idx(self.len), value) }
80200826: 0c 6d        	ld	a1, 0x18(a0)
80200828: 97 00 00 00  	auipc	ra, 0x0
8020082c: e7 80 c0 c8  	jalr	-0x374(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h880f5d34afd662e4E>
80200830: 83 35 84 f9  	ld	a1, -0x68(s0)
80200834: aa 86        	mv	a3, a0
80200836: 03 35 04 f9  	ld	a0, -0x70(s0)
8020083a: 23 34 d4 fc  	sd	a3, -0x38(s0)
;         self.buf.ptr()
8020083e: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.ptr.as_ptr()
80200842: 90 65        	ld	a2, 0x8(a1)
80200844: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         self.pointer as *mut T
80200848: 23 30 c4 fe  	sd	a2, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
8020084c: 8e 06        	slli	a3, a3, 0x3
8020084e: 36 96        	add	a2, a2, a3
80200850: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80200854: 08 e2        	sd	a0, 0x0(a2)
;         self.len += 1;
80200856: 88 6d        	ld	a0, 0x18(a1)
80200858: 05 05        	addi	a0, a0, 0x1
8020085a: 88 ed        	sd	a0, 0x18(a1)
8020085c: a6 70        	ld	ra, 0x68(sp)
8020085e: 06 74        	ld	s0, 0x60(sp)
;     }
80200860: 65 61        	addi	sp, sp, 0x70
80200862: 82 80        	ret
80200864: 03 35 84 f9  	ld	a0, -0x68(s0)
;             self.grow();
80200868: 97 00 00 00  	auipc	ra, 0x0
8020086c: e7 80 00 eb  	jalr	-0x150(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17hc57bf646c83db607E>
80200870: 4d bf        	j	0x80200822 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17h5a7efc8f09b39fc6E+0x46>

0000000080200872 <_ZN2os5utils9clear_bss17hf0e438f7a5a1f0ccE>:
; pub fn clear_bss(){
80200872: 01 11        	addi	sp, sp, -0x20
80200874: 06 ec        	sd	ra, 0x18(sp)
80200876: 22 e8        	sd	s0, 0x10(sp)
80200878: 00 10        	addi	s0, sp, 0x20

000000008020087a <.Lpcrel_hi0>:
;     (
8020087a: 17 b5 04 00  	auipc	a0, 0x4b
8020087e: 13 05 65 78  	addi	a0, a0, 0x786
80200882: 23 30 a4 fe  	sd	a0, -0x20(s0)

0000000080200886 <.Lpcrel_hi1>:
80200886: 17 c5 34 00  	auipc	a0, 0x34c
8020088a: 13 05 a5 77  	addi	a0, a0, 0x77a
8020088e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80200892: 03 35 04 fe  	ld	a0, -0x20(s0)
80200896: 83 35 84 fe  	ld	a1, -0x18(s0)
8020089a: 97 50 00 00  	auipc	ra, 0x5
8020089e: e7 80 c0 24  	jalr	0x24c(ra) <_ZN4core4iter6traits8iterator8Iterator8for_each17ha48b4121be45f630E>
802008a2: e2 60        	ld	ra, 0x18(sp)
802008a4: 42 64        	ld	s0, 0x10(sp)
; }
802008a6: 05 61        	addi	sp, sp, 0x20
802008a8: 82 80        	ret

00000000802008aa <_ZN2os5utils10print_info17h573f7cc207044787E>:
; pub fn print_info(){
802008aa: 41 11        	addi	sp, sp, -0x10
802008ac: 06 e4        	sd	ra, 0x8(sp)
802008ae: 22 e0        	sd	s0, 0x0(sp)
802008b0: 00 08        	addi	s0, sp, 0x10
802008b2: a2 60        	ld	ra, 0x8(sp)
802008b4: 02 64        	ld	s0, 0x0(sp)
; }
802008b6: 41 01        	addi	sp, sp, 0x10
802008b8: 82 80        	ret

00000000802008ba <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h67effa21f6a48667E>:
;     fn index(self, slice: &[T]) -> &T {
802008ba: 5d 71        	addi	sp, sp, -0x50
802008bc: 86 e4        	sd	ra, 0x48(sp)
802008be: a2 e0        	sd	s0, 0x40(sp)
802008c0: 80 08        	addi	s0, sp, 0x50
802008c2: 23 3c d4 fa  	sd	a3, -0x48(s0)
802008c6: 23 30 c4 fc  	sd	a2, -0x40(s0)
802008ca: 23 34 b4 fc  	sd	a1, -0x38(s0)
802008ce: 23 38 a4 fc  	sd	a0, -0x30(s0)
802008d2: 23 3c a4 fc  	sd	a0, -0x28(s0)
802008d6: 23 30 b4 fe  	sd	a1, -0x20(s0)
802008da: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         &(*slice)[self]
802008de: 63 7d c5 00  	bgeu	a0, a2, 0x802008f8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h67effa21f6a48667E+0x3e>
802008e2: 09 a0        	j	0x802008e4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h67effa21f6a48667E+0x2a>
802008e4: 03 35 84 fc  	ld	a0, -0x38(s0)
802008e8: 83 35 04 fd  	ld	a1, -0x30(s0)
;         &(*slice)[self]
802008ec: 92 05        	slli	a1, a1, 0x4
802008ee: 2e 95        	add	a0, a0, a1
802008f0: a6 60        	ld	ra, 0x48(sp)
802008f2: 06 64        	ld	s0, 0x40(sp)
;     }
802008f4: 61 61        	addi	sp, sp, 0x50
802008f6: 82 80        	ret
802008f8: 03 36 84 fb  	ld	a2, -0x48(s0)
802008fc: 83 35 04 fc  	ld	a1, -0x40(s0)
80200900: 03 35 04 fd  	ld	a0, -0x30(s0)
;         &(*slice)[self]
80200904: 97 00 03 00  	auipc	ra, 0x30
80200908: e7 80 c0 9a  	jalr	-0x654(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008020090c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h179dc4518e592c5aE>:
;     fn index_mut(self, slice: &mut [T]) -> &mut T {
8020090c: 5d 71        	addi	sp, sp, -0x50
8020090e: 86 e4        	sd	ra, 0x48(sp)
80200910: a2 e0        	sd	s0, 0x40(sp)
80200912: 80 08        	addi	s0, sp, 0x50
80200914: 23 3c d4 fa  	sd	a3, -0x48(s0)
80200918: 23 30 c4 fc  	sd	a2, -0x40(s0)
8020091c: 23 34 b4 fc  	sd	a1, -0x38(s0)
80200920: 23 38 a4 fc  	sd	a0, -0x30(s0)
80200924: 23 3c a4 fc  	sd	a0, -0x28(s0)
80200928: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020092c: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         &mut (*slice)[self]
80200930: 63 7d c5 00  	bgeu	a0, a2, 0x8020094a <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h179dc4518e592c5aE+0x3e>
80200934: 09 a0        	j	0x80200936 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h179dc4518e592c5aE+0x2a>
80200936: 03 35 84 fc  	ld	a0, -0x38(s0)
8020093a: 83 35 04 fd  	ld	a1, -0x30(s0)
;         &mut (*slice)[self]
8020093e: 92 05        	slli	a1, a1, 0x4
80200940: 2e 95        	add	a0, a0, a1
80200942: a6 60        	ld	ra, 0x48(sp)
80200944: 06 64        	ld	s0, 0x40(sp)
;     }
80200946: 61 61        	addi	sp, sp, 0x50
80200948: 82 80        	ret
8020094a: 03 36 84 fb  	ld	a2, -0x48(s0)
8020094e: 83 35 04 fc  	ld	a1, -0x40(s0)
80200952: 03 35 04 fd  	ld	a0, -0x30(s0)
;         &mut (*slice)[self]
80200956: 97 00 03 00  	auipc	ra, 0x30
8020095a: e7 80 a0 95  	jalr	-0x6a6(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008020095e <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb37c217668c0eefcE>:
;     fn index_mut(self, slice: &mut [T]) -> &mut T {
8020095e: 5d 71        	addi	sp, sp, -0x50
80200960: 86 e4        	sd	ra, 0x48(sp)
80200962: a2 e0        	sd	s0, 0x40(sp)
80200964: 80 08        	addi	s0, sp, 0x50
80200966: 23 3c d4 fa  	sd	a3, -0x48(s0)
8020096a: 23 30 c4 fc  	sd	a2, -0x40(s0)
8020096e: 23 34 b4 fc  	sd	a1, -0x38(s0)
80200972: 23 38 a4 fc  	sd	a0, -0x30(s0)
80200976: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020097a: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020097e: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         &mut (*slice)[self]
80200982: 63 7d c5 00  	bgeu	a0, a2, 0x8020099c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb37c217668c0eefcE+0x3e>
80200986: 09 a0        	j	0x80200988 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb37c217668c0eefcE+0x2a>
80200988: 03 35 84 fc  	ld	a0, -0x38(s0)
8020098c: 83 35 04 fd  	ld	a1, -0x30(s0)
;         &mut (*slice)[self]
80200990: 92 05        	slli	a1, a1, 0x4
80200992: 2e 95        	add	a0, a0, a1
80200994: a6 60        	ld	ra, 0x48(sp)
80200996: 06 64        	ld	s0, 0x40(sp)
;     }
80200998: 61 61        	addi	sp, sp, 0x50
8020099a: 82 80        	ret
8020099c: 03 36 84 fb  	ld	a2, -0x48(s0)
802009a0: 83 35 04 fc  	ld	a1, -0x40(s0)
802009a4: 03 35 04 fd  	ld	a0, -0x30(s0)
;         &mut (*slice)[self]
802009a8: 97 00 03 00  	auipc	ra, 0x30
802009ac: e7 80 80 90  	jalr	-0x6f8(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

00000000802009b0 <_ZN5riscv8register8sscratch4read17h8ab8b8c5a8646d53E>:
;         pub fn read() -> usize {
802009b0: 41 11        	addi	sp, sp, -0x10
802009b2: 06 e4        	sd	ra, 0x8(sp)
802009b4: 22 e0        	sd	s0, 0x0(sp)
802009b6: 00 08        	addi	s0, sp, 0x10
;             unsafe { _read() }
802009b8: 97 00 00 00  	auipc	ra, 0x0
802009bc: e7 80 00 01  	jalr	0x10(ra) <_ZN5riscv8register8sscratch5_read17hdb867827f532ce05E>
802009c0: a2 60        	ld	ra, 0x8(sp)
802009c2: 02 64        	ld	s0, 0x0(sp)
;         }
802009c4: 41 01        	addi	sp, sp, 0x10
802009c6: 82 80        	ret

00000000802009c8 <_ZN5riscv8register8sscratch5_read17hdb867827f532ce05E>:
;         unsafe fn _read() -> usize {
802009c8: 01 11        	addi	sp, sp, -0x20
802009ca: 06 ec        	sd	ra, 0x18(sp)
802009cc: 22 e8        	sd	s0, 0x10(sp)
802009ce: 00 10        	addi	s0, sp, 0x20
;                     core::arch::asm!("csrrs {0}, {1}, x0", out(reg) r, const $csr_number);
802009d0: 73 25 00 14  	csrr	a0, sscratch
802009d4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     r
802009d8: 03 35 84 fe  	ld	a0, -0x18(s0)
802009dc: e2 60        	ld	ra, 0x18(sp)
802009de: 42 64        	ld	s0, 0x10(sp)
;         }
802009e0: 05 61        	addi	sp, sp, 0x20
802009e2: 82 80        	ret

00000000802009e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h5e5cf6d40998509dE>:
;             const fn precondition_check($($name:$ty),*) {
802009e4: 01 11        	addi	sp, sp, -0x20
802009e6: 06 ec        	sd	ra, 0x18(sp)
802009e8: 22 e8        	sd	s0, 0x10(sp)
802009ea: 00 10        	addi	s0, sp, 0x20
802009ec: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             const_eval_select((self as *mut u8,), const_impl, runtime_impl)
802009f0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
802009f4: 01 ed        	bnez	a0, 0x80200a0c <.Lpcrel_hi0+0x14>
802009f6: 09 a0        	j	0x802009f8 <.Lpcrel_hi0>

00000000802009f8 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
802009f8: 17 25 03 00  	auipc	a0, 0x32
802009fc: 13 05 85 6a  	addi	a0, a0, 0x6a8
80200a00: 93 05 d0 05  	li	a1, 0x5d
80200a04: 97 00 03 00  	auipc	ra, 0x30
80200a08: e7 80 c0 83  	jalr	-0x7c4(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80200a0c: e2 60        	ld	ra, 0x18(sp)
80200a0e: 42 64        	ld	s0, 0x10(sp)
;             }
80200a10: 05 61        	addi	sp, sp, 0x20
80200a12: 82 80        	ret

0000000080200a14 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h5fe2cfb7cd99e3d4E>:
;     pub fn borrow_mut(&self) -> RefMut<'_, T> {
80200a14: 5d 71        	addi	sp, sp, -0x50
80200a16: 86 e4        	sd	ra, 0x48(sp)
80200a18: a2 e0        	sd	s0, 0x40(sp)
80200a1a: 80 08        	addi	s0, sp, 0x50
80200a1c: 23 3c b4 fa  	sd	a1, -0x48(s0)
;             Err(err) => panic_already_borrowed(err),
80200a20: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         match self.try_borrow_mut() {
80200a24: 97 00 00 00  	auipc	ra, 0x0
80200a28: e7 80 c0 03  	jalr	0x3c(ra) <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hf0e00fc9bfb9b10dE>
80200a2c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80200a30: 23 38 b4 fc  	sd	a1, -0x30(s0)
80200a34: 03 35 84 fc  	ld	a0, -0x38(s0)
80200a38: 11 cd        	beqz	a0, 0x80200a54 <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h5fe2cfb7cd99e3d4E+0x40>
80200a3a: 09 a0        	j	0x80200a3c <_ZN4core4cell16RefCell$LT$T$GT$10borrow_mut17h5fe2cfb7cd99e3d4E+0x28>
;             Ok(b) => b,
80200a3c: 03 35 84 fc  	ld	a0, -0x38(s0)
80200a40: 83 35 04 fd  	ld	a1, -0x30(s0)
80200a44: 23 30 a4 fe  	sd	a0, -0x20(s0)
80200a48: 23 34 b4 fe  	sd	a1, -0x18(s0)
80200a4c: a6 60        	ld	ra, 0x48(sp)
80200a4e: 06 64        	ld	s0, 0x40(sp)
;     }
80200a50: 61 61        	addi	sp, sp, 0x50
80200a52: 82 80        	ret
80200a54: 03 35 84 fb  	ld	a0, -0x48(s0)
;             Err(err) => panic_already_borrowed(err),
80200a58: 97 00 03 00  	auipc	ra, 0x30
80200a5c: e7 80 c0 23  	jalr	0x23c(ra) <_ZN4core4cell22panic_already_borrowed17h74ac598938e12d26E>

0000000080200a60 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hf0e00fc9bfb9b10dE>:
;     pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {
80200a60: 55 71        	addi	sp, sp, -0xd0
80200a62: 86 e5        	sd	ra, 0xc8(sp)
80200a64: a2 e1        	sd	s0, 0xc0(sp)
80200a66: 80 09        	addi	s0, sp, 0xd0
80200a68: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80200a6c: fd 55        	li	a1, -0x1
;     pub fn set(&self, val: T) {
80200a6e: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     pub fn replace(&self, val: T) -> T {
80200a72: 23 3c b4 f4  	sd	a1, -0xa8(s0)
; pub const fn replace<T>(dest: &mut T, src: T) -> T {
80200a76: 23 30 b4 f6  	sd	a1, -0xa0(s0)
; pub const unsafe fn write<T>(dst: *mut T, src: T) {
80200a7a: 23 34 b4 f6  	sd	a1, -0x98(s0)
80200a7e: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         match BorrowRefMut::new(&self.borrow) {
80200a82: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         unsafe { *self.value.get() }
80200a86: 23 3c a4 fa  	sd	a0, -0x48(s0)
80200a8a: 08 61        	ld	a0, 0x0(a0)
;         match borrow.get() {
80200a8c: 29 e1        	bnez	a0, 0x80200ace <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hf0e00fc9bfb9b10dE+0x6e>
80200a8e: 09 a0        	j	0x80200a90 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hf0e00fc9bfb9b10dE+0x30>
80200a90: 03 35 84 f4  	ld	a0, -0xb8(s0)
;         mem::replace(unsafe { &mut *self.value.get() }, val)
80200a94: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80200a98: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         crate::intrinsics::read_via_copy(src)
80200a9c: 0c 61        	ld	a1, 0x0(a0)
80200a9e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80200aa2: fd 55        	li	a1, -0x1
;         intrinsics::write_via_move(dst, src)
80200aa4: 0c e1        	sd	a1, 0x0(a0)
;                 Some(BorrowRefMut { borrow })
80200aa6: 23 30 a4 fa  	sd	a0, -0x60(s0)
80200aaa: 83 35 04 fa  	ld	a1, -0x60(s0)
80200aae: 23 30 b4 f8  	sd	a1, -0x80(s0)
;             Some(b) => {
80200ab2: 83 35 04 f8  	ld	a1, -0x80(s0)
80200ab6: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80200aba: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 let value = unsafe { NonNull::new_unchecked(self.value.get()) };
80200abe: 21 05        	addi	a0, a0, 0x8
80200ac0: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80200ac4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80200ac8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
80200acc: 29 a0        	j	0x80200ad6 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hf0e00fc9bfb9b10dE+0x76>
80200ace: 01 45        	li	a0, 0x0
;             None => Err(BorrowMutError {
80200ad0: 23 38 a4 f6  	sd	a0, -0x90(s0)
;             }),
80200ad4: 2d a8        	j	0x80200b0e <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hf0e00fc9bfb9b10dE+0xae>
80200ad6: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             assert_unsafe_precondition!(
80200ada: 97 00 00 00  	auipc	ra, 0x0
80200ade: e7 80 a0 f0  	jalr	-0xf6(ra) <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h5e5cf6d40998509dE>
80200ae2: 09 a0        	j	0x80200ae4 <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hf0e00fc9bfb9b10dE+0x84>
80200ae4: 03 35 84 f3  	ld	a0, -0xc8(s0)
80200ae8: 83 35 04 f4  	ld	a1, -0xc0(s0)
;             NonNull { pointer: ptr as _ }
80200aec: 23 34 b4 f8  	sd	a1, -0x78(s0)
;                 Ok(RefMut { value, borrow: b, marker: PhantomData })
80200af0: 83 35 84 f8  	ld	a1, -0x78(s0)
80200af4: 23 38 b4 f8  	sd	a1, -0x70(s0)
80200af8: 23 3c a4 f8  	sd	a0, -0x68(s0)
80200afc: 83 35 04 f9  	ld	a1, -0x70(s0)
80200b00: 03 35 84 f9  	ld	a0, -0x68(s0)
80200b04: 23 38 b4 f6  	sd	a1, -0x90(s0)
80200b08: 23 3c a4 f6  	sd	a0, -0x88(s0)
;     }
80200b0c: 09 a0        	j	0x80200b0e <_ZN4core4cell16RefCell$LT$T$GT$14try_borrow_mut17hf0e00fc9bfb9b10dE+0xae>
80200b0e: 03 35 04 f7  	ld	a0, -0x90(s0)
80200b12: 83 35 84 f7  	ld	a1, -0x88(s0)
80200b16: ae 60        	ld	ra, 0xc8(sp)
80200b18: 0e 64        	ld	s0, 0xc0(sp)
80200b1a: 69 61        	addi	sp, sp, 0xd0
80200b1c: 82 80        	ret

0000000080200b1e <_ZN4core4cell16RefCell$LT$T$GT$3new17h6da74f5976cbcf6bE>:
;     pub const fn new(value: T) -> RefCell<T> {
80200b1e: 2d 71        	addi	sp, sp, -0x120
80200b20: 06 ee        	sd	ra, 0x118(sp)
80200b22: 22 ea        	sd	s0, 0x110(sp)
80200b24: 00 12        	addi	s0, sp, 0x120
80200b26: 23 3c a4 ee  	sd	a0, -0x108(s0)
80200b2a: 01 45        	li	a0, 0x0
80200b2c: 23 30 a4 ee  	sd	a0, -0x120(s0)
;     pub const fn new(value: T) -> Cell<T> {
80200b30: 23 30 a4 f0  	sd	a0, -0x100(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
80200b34: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80200b38: 13 05 04 f1  	addi	a0, s0, -0xf0
80200b3c: 23 34 a4 ee  	sd	a0, -0x118(s0)
80200b40: 13 06 00 0e  	li	a2, 0xe0
80200b44: 23 38 c4 ee  	sd	a2, -0x110(s0)
;         UnsafeCell { value }
80200b48: 97 10 03 00  	auipc	ra, 0x31
80200b4c: e7 80 60 12  	jalr	0x126(ra) <memcpy>
80200b50: 83 36 04 ee  	ld	a3, -0x120(s0)
80200b54: 83 35 84 ee  	ld	a1, -0x118(s0)
80200b58: 03 36 04 ef  	ld	a2, -0x110(s0)
80200b5c: 03 35 84 ef  	ld	a0, -0x108(s0)
;         RefCell {
80200b60: 14 e1        	sd	a3, 0x0(a0)
80200b62: 21 05        	addi	a0, a0, 0x8
80200b64: 97 10 03 00  	auipc	ra, 0x31
80200b68: e7 80 a0 10  	jalr	0x10a(ra) <memcpy>
80200b6c: f2 60        	ld	ra, 0x118(sp)
80200b6e: 52 64        	ld	s0, 0x110(sp)
;     }
80200b70: 15 61        	addi	sp, sp, 0x120
80200b72: 82 80        	ret

0000000080200b74 <_ZN71_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h97873774481312d4E>:
;     fn deref(&self) -> &T {
80200b74: 79 71        	addi	sp, sp, -0x30
80200b76: 06 f4        	sd	ra, 0x28(sp)
80200b78: 22 f0        	sd	s0, 0x20(sp)
80200b7a: 00 18        	addi	s0, sp, 0x30
80200b7c: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { self.value.as_ref() }
80200b80: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80200b84: 08 61        	ld	a0, 0x0(a0)
80200b86: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
80200b8a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80200b8e: a2 70        	ld	ra, 0x28(sp)
80200b90: 02 74        	ld	s0, 0x20(sp)
;     }
80200b92: 45 61        	addi	sp, sp, 0x30
80200b94: 82 80        	ret

0000000080200b96 <_ZN74_$LT$core..cell..RefMut$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hd1d01d71e37c4ebdE>:
;     fn deref_mut(&mut self) -> &mut T {
80200b96: 79 71        	addi	sp, sp, -0x30
80200b98: 06 f4        	sd	ra, 0x28(sp)
80200b9a: 22 f0        	sd	s0, 0x20(sp)
80200b9c: 00 18        	addi	s0, sp, 0x30
80200b9e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { self.value.as_mut() }
80200ba2: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.as_ptr() }
80200ba6: 08 61        	ld	a0, 0x0(a0)
80200ba8: 23 34 a4 fe  	sd	a0, -0x18(s0)
80200bac: a2 70        	ld	ra, 0x28(sp)
80200bae: 02 74        	ld	s0, 0x20(sp)
;     }
80200bb0: 45 61        	addi	sp, sp, 0x30
80200bb2: 82 80        	ret

0000000080200bb4 <_ZN5riscv8register5stval4read17h373907445fc146caE>:
;         pub fn read() -> usize {
80200bb4: 41 11        	addi	sp, sp, -0x10
80200bb6: 06 e4        	sd	ra, 0x8(sp)
80200bb8: 22 e0        	sd	s0, 0x0(sp)
80200bba: 00 08        	addi	s0, sp, 0x10
;             unsafe { _read() }
80200bbc: 97 00 00 00  	auipc	ra, 0x0
80200bc0: e7 80 00 01  	jalr	0x10(ra) <_ZN5riscv8register5stval5_read17h292e847656adf98bE>
80200bc4: a2 60        	ld	ra, 0x8(sp)
80200bc6: 02 64        	ld	s0, 0x0(sp)
;         }
80200bc8: 41 01        	addi	sp, sp, 0x10
80200bca: 82 80        	ret

0000000080200bcc <_ZN5riscv8register5stval5_read17h292e847656adf98bE>:
;         unsafe fn _read() -> usize {
80200bcc: 01 11        	addi	sp, sp, -0x20
80200bce: 06 ec        	sd	ra, 0x18(sp)
80200bd0: 22 e8        	sd	s0, 0x10(sp)
80200bd2: 00 10        	addi	s0, sp, 0x20
;                     core::arch::asm!("csrrs {0}, {1}, x0", out(reg) r, const $csr_number);
80200bd4: 73 25 30 14  	csrr	a0, stval
80200bd8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     r
80200bdc: 03 35 84 fe  	ld	a0, -0x18(s0)
80200be0: e2 60        	ld	ra, 0x18(sp)
80200be2: 42 64        	ld	s0, 0x10(sp)
;         }
80200be4: 05 61        	addi	sp, sp, 0x20
80200be6: 82 80        	ret

0000000080200be8 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE>:
; pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
80200be8: 41 71        	addi	sp, sp, -0x1f0
80200bea: 86 f7        	sd	ra, 0x1e8(sp)
80200bec: a2 f3        	sd	s0, 0x1e0(sp)
80200bee: 80 1b        	addi	s0, sp, 0x1f0
80200bf0: 23 30 c4 e2  	sd	a2, -0x1e0(s0)
80200bf4: 23 34 b4 e2  	sd	a1, -0x1d8(s0)
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80200bf8: 23 2e a4 e2  	sw	a0, -0x1c4(s0)
80200bfc: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80200c00: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;     let len = len_utf8(code);
80200c04: 03 25 c4 e3  	lw	a0, -0x1c4(s0)
80200c08: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
80200c0c: 23 2a a4 f2  	sw	a0, -0xcc(s0)
80200c10: 93 05 00 08  	li	a1, 0x80
;     if code < MAX_ONE_B {
80200c14: 63 69 b5 00  	bltu	a0, a1, 0x80200c26 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x3e>
80200c18: 09 a0        	j	0x80200c1a <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x32>
80200c1a: 03 35 04 e3  	ld	a0, -0x1d0(s0)
;     } else if code < MAX_TWO_B {
80200c1e: 1b 55 b5 00  	srliw	a0, a0, 0xb
80200c22: 01 cd        	beqz	a0, 0x80200c3a <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x52>
80200c24: 29 a0        	j	0x80200c2e <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x46>
80200c26: 05 45        	li	a0, 0x1
;         1
80200c28: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;     if code < MAX_ONE_B {
80200c2c: 2d a0        	j	0x80200c56 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x6e>
80200c2e: 03 35 04 e3  	ld	a0, -0x1d0(s0)
;     } else if code < MAX_THREE_B {
80200c32: 1b 55 05 01  	srliw	a0, a0, 0x10
80200c36: 11 c9        	beqz	a0, 0x80200c4a <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x62>
80200c38: 29 a0        	j	0x80200c42 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x5a>
80200c3a: 09 45        	li	a0, 0x2
;         2
80200c3c: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;     } else if code < MAX_TWO_B {
80200c40: 11 a8        	j	0x80200c54 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x6c>
80200c42: 11 45        	li	a0, 0x4
;         4
80200c44: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;     } else if code < MAX_THREE_B {
80200c48: 29 a0        	j	0x80200c52 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x6a>
80200c4a: 0d 45        	li	a0, 0x3
;         3
80200c4c: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;     } else if code < MAX_THREE_B {
80200c50: 09 a0        	j	0x80200c52 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x6a>
;     } else if code < MAX_TWO_B {
80200c52: 09 a0        	j	0x80200c54 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x6c>
;     if code < MAX_ONE_B {
80200c54: 09 a0        	j	0x80200c56 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x6e>
;     match (len, &mut dst[..]) {
80200c56: 03 35 04 e4  	ld	a0, -0x1c0(s0)
80200c5a: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
80200c5e: 85 45        	li	a1, 0x1
80200c60: 63 07 b5 0c  	beq	a0, a1, 0x80200d2e <.Lpcrel_hi2+0x6a>
80200c64: 09 a0        	j	0x80200c66 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x7e>
80200c66: 03 35 84 e1  	ld	a0, -0x1e8(s0)
80200c6a: 89 45        	li	a1, 0x2
;     match (len, &mut dst[..]) {
80200c6c: 63 05 b5 0c  	beq	a0, a1, 0x80200d36 <.Lpcrel_hi2+0x72>
80200c70: 09 a0        	j	0x80200c72 <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x8a>
80200c72: 03 35 84 e1  	ld	a0, -0x1e8(s0)
80200c76: 8d 45        	li	a1, 0x3
;     match (len, &mut dst[..]) {
80200c78: 63 05 b5 0c  	beq	a0, a1, 0x80200d42 <.Lpcrel_hi2+0x7e>
80200c7c: 09 a0        	j	0x80200c7e <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0x96>
80200c7e: 03 35 84 e1  	ld	a0, -0x1e8(s0)
80200c82: 91 45        	li	a1, 0x4
;     match (len, &mut dst[..]) {
80200c84: 63 05 b5 0c  	beq	a0, a1, 0x80200d4e <.Lpcrel_hi2+0x8a>
80200c88: 09 a0        	j	0x80200c8a <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0xa2>
80200c8a: 03 36 04 e2  	ld	a2, -0x1e0(s0)

0000000080200c8e <.Lpcrel_hi0>:
;             "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
80200c8e: 17 25 03 00  	auipc	a0, 0x32
80200c92: 13 05 25 54  	addi	a0, a0, 0x542
80200c96: 23 38 a4 f8  	sd	a0, -0x70(s0)
80200c9a: 0d 45        	li	a0, 0x3
80200c9c: 23 3c a4 f8  	sd	a0, -0x68(s0)
80200ca0: 93 06 04 e4  	addi	a3, s0, -0x1c0
;         _ => panic!(
80200ca4: 23 30 d4 fa  	sd	a3, -0x60(s0)

0000000080200ca8 <.Lpcrel_hi1>:
;         Self::new(x, Display::fmt)
80200ca8: 97 05 03 00  	auipc	a1, 0x30
80200cac: 93 85 65 3e  	addi	a1, a1, 0x3e6
80200cb0: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80200cb4: 23 34 d4 ea  	sd	a3, -0x158(s0)
80200cb8: 23 38 b4 ea  	sd	a1, -0x150(s0)
80200cbc: 13 07 c4 e3  	addi	a4, s0, -0x1c4
;         _ => panic!(
80200cc0: 23 38 e4 fa  	sd	a4, -0x50(s0)

0000000080200cc4 <.Lpcrel_hi2>:
;         Self::new(x, UpperHex::fmt)
80200cc4: 97 e6 02 00  	auipc	a3, 0x2e
80200cc8: 93 86 06 28  	addi	a3, a3, 0x280
80200ccc: 23 3c d4 fa  	sd	a3, -0x48(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80200cd0: 23 3c e4 ea  	sd	a4, -0x148(s0)
80200cd4: 23 30 d4 ec  	sd	a3, -0x140(s0)
;             dst.len(),
80200cd8: 23 3c c4 ec  	sd	a2, -0x128(s0)
80200cdc: 13 06 84 ed  	addi	a2, s0, -0x128
;         _ => panic!(
80200ce0: 23 30 c4 fc  	sd	a2, -0x40(s0)
;         Self::new(x, Display::fmt)
80200ce4: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80200ce8: 23 34 c4 ec  	sd	a2, -0x138(s0)
80200cec: 23 38 b4 ec  	sd	a1, -0x130(s0)
;         _ => panic!(
80200cf0: 03 36 84 ea  	ld	a2, -0x158(s0)
80200cf4: 83 35 04 eb  	ld	a1, -0x150(s0)
80200cf8: 23 3c c4 e6  	sd	a2, -0x188(s0)
80200cfc: 23 30 b4 e8  	sd	a1, -0x180(s0)
80200d00: 03 36 84 eb  	ld	a2, -0x148(s0)
80200d04: 83 35 04 ec  	ld	a1, -0x140(s0)
80200d08: 23 34 c4 e8  	sd	a2, -0x178(s0)
80200d0c: 23 38 b4 e8  	sd	a1, -0x170(s0)
80200d10: 03 36 84 ec  	ld	a2, -0x138(s0)
80200d14: 83 35 04 ed  	ld	a1, -0x130(s0)
80200d18: 23 3c c4 e8  	sd	a2, -0x168(s0)
80200d1c: 23 30 b4 ea  	sd	a1, -0x160(s0)
80200d20: 93 05 84 e7  	addi	a1, s0, -0x188
80200d24: 23 38 b4 fc  	sd	a1, -0x30(s0)
80200d28: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80200d2c: a1 aa        	j	0x80200e84 <.Lpcrel_hi3+0xf6>
80200d2e: 03 35 04 e2  	ld	a0, -0x1e0(s0)
;         (1, [a, ..]) => {
80200d32: 05 e5        	bnez	a0, 0x80200d5a <.Lpcrel_hi2+0x96>
80200d34: 99 bf        	j	0x80200c8a <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0xa2>
80200d36: 83 35 04 e2  	ld	a1, -0x1e0(s0)
80200d3a: 05 45        	li	a0, 0x1
;         (2, [a, b, ..]) => {
80200d3c: 63 65 b5 06  	bltu	a0, a1, 0x80200da6 <.Lpcrel_hi3+0x18>
80200d40: a9 b7        	j	0x80200c8a <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0xa2>
80200d42: 83 35 04 e2  	ld	a1, -0x1e0(s0)
80200d46: 09 45        	li	a0, 0x2
;         (3, [a, b, c, ..]) => {
80200d48: 63 68 b5 08  	bltu	a0, a1, 0x80200dd8 <.Lpcrel_hi3+0x4a>
80200d4c: 3d bf        	j	0x80200c8a <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0xa2>
80200d4e: 83 35 04 e2  	ld	a1, -0x1e0(s0)
80200d52: 0d 45        	li	a0, 0x3
;         (4, [a, b, c, d, ..]) => {
80200d54: 63 67 b5 0c  	bltu	a0, a1, 0x80200e22 <.Lpcrel_hi3+0x94>
80200d58: 0d bf        	j	0x80200c8a <_ZN4core4char7methods15encode_utf8_raw17h464cc1e8fc7718bcE+0xa2>
80200d5a: 83 35 84 e2  	ld	a1, -0x1d8(s0)
;         (1, [a, ..]) => {
80200d5e: 23 3c b4 f2  	sd	a1, -0xc8(s0)
;             *a = code as u8;
80200d62: 03 45 c4 e3  	lbu	a0, -0x1c4(s0)
80200d66: 23 80 a5 00  	sb	a0, 0x0(a1)
;         }
80200d6a: 09 a0        	j	0x80200d6c <.Lpcrel_hi2+0xa8>
80200d6c: 83 36 04 e2  	ld	a3, -0x1e0(s0)
80200d70: 03 36 84 e2  	ld	a2, -0x1d8(s0)
;     &mut dst[..len]
80200d74: 03 35 04 e4  	ld	a0, -0x1c0(s0)
80200d78: 23 34 a4 f8  	sd	a0, -0x78(s0)
80200d7c: 81 45        	li	a1, 0x0
;         (0..self.end).index_mut(slice)
80200d7e: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80200d82: 23 3c a4 f0  	sd	a0, -0xe8(s0)
80200d86: 03 35 04 f1  	ld	a0, -0xf0(s0)
80200d8a: 83 35 84 f1  	ld	a1, -0xe8(s0)

0000000080200d8e <.Lpcrel_hi3>:
80200d8e: 17 27 03 00  	auipc	a4, 0x32
80200d92: 13 07 a7 3e  	addi	a4, a4, 0x3ea
80200d96: 97 e0 01 00  	auipc	ra, 0x1e
80200d9a: e7 80 00 68  	jalr	0x680(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h8a1a44c50b882f6fE>
80200d9e: be 70        	ld	ra, 0x1e8(sp)
80200da0: 1e 74        	ld	s0, 0x1e0(sp)
; }
80200da2: 7d 61        	addi	sp, sp, 0x1f0
80200da4: 82 80        	ret
80200da6: 83 35 84 e2  	ld	a1, -0x1d8(s0)
;         (2, [a, b, ..]) => {
80200daa: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80200dae: 13 85 15 00  	addi	a0, a1, 0x1
80200db2: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;             *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
80200db6: 03 25 c4 e3  	lw	a0, -0x1c4(s0)
80200dba: 56 15        	slli	a0, a0, 0x35
80200dbc: 6d 91        	srli	a0, a0, 0x3b
80200dbe: 13 05 05 0c  	addi	a0, a0, 0xc0
80200dc2: 23 80 a5 00  	sb	a0, 0x0(a1)
;             *b = (code & 0x3F) as u8 | TAG_CONT;
80200dc6: 03 45 c4 e3  	lbu	a0, -0x1c4(s0)
80200dca: 13 75 f5 03  	andi	a0, a0, 0x3f
80200dce: 13 05 05 08  	addi	a0, a0, 0x80
80200dd2: a3 80 a5 00  	sb	a0, 0x1(a1)
;         }
80200dd6: 59 bf        	j	0x80200d6c <.Lpcrel_hi2+0xa8>
80200dd8: 83 35 84 e2  	ld	a1, -0x1d8(s0)
;         (3, [a, b, c, ..]) => {
80200ddc: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80200de0: 13 85 15 00  	addi	a0, a1, 0x1
80200de4: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80200de8: 13 85 25 00  	addi	a0, a1, 0x2
80200dec: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;             *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
80200df0: 03 25 c4 e3  	lw	a0, -0x1c4(s0)
80200df4: 42 15        	slli	a0, a0, 0x30
80200df6: 71 91        	srli	a0, a0, 0x3c
80200df8: 13 05 05 0e  	addi	a0, a0, 0xe0
80200dfc: 23 80 a5 00  	sb	a0, 0x0(a1)
;             *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
80200e00: 03 25 c4 e3  	lw	a0, -0x1c4(s0)
80200e04: 52 15        	slli	a0, a0, 0x34
80200e06: 69 91        	srli	a0, a0, 0x3a
80200e08: 13 05 05 08  	addi	a0, a0, 0x80
80200e0c: a3 80 a5 00  	sb	a0, 0x1(a1)
;             *c = (code & 0x3F) as u8 | TAG_CONT;
80200e10: 03 45 c4 e3  	lbu	a0, -0x1c4(s0)
80200e14: 13 75 f5 03  	andi	a0, a0, 0x3f
80200e18: 13 05 05 08  	addi	a0, a0, 0x80
80200e1c: 23 81 a5 00  	sb	a0, 0x2(a1)
;         }
80200e20: b1 b7        	j	0x80200d6c <.Lpcrel_hi2+0xa8>
80200e22: 83 35 84 e2  	ld	a1, -0x1d8(s0)
;         (4, [a, b, c, d, ..]) => {
80200e26: 23 34 b4 f6  	sd	a1, -0x98(s0)
80200e2a: 13 85 15 00  	addi	a0, a1, 0x1
80200e2e: 23 38 a4 f6  	sd	a0, -0x90(s0)
80200e32: 13 85 25 00  	addi	a0, a1, 0x2
80200e36: 23 3c a4 f6  	sd	a0, -0x88(s0)
80200e3a: 13 85 35 00  	addi	a0, a1, 0x3
80200e3e: 23 30 a4 f8  	sd	a0, -0x80(s0)
;             *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
80200e42: 03 25 c4 e3  	lw	a0, -0x1c4(s0)
80200e46: 2e 15        	slli	a0, a0, 0x2b
80200e48: 75 91        	srli	a0, a0, 0x3d
80200e4a: 13 05 05 0f  	addi	a0, a0, 0xf0
80200e4e: 23 80 a5 00  	sb	a0, 0x0(a1)
;             *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
80200e52: 03 25 c4 e3  	lw	a0, -0x1c4(s0)
80200e56: 3a 15        	slli	a0, a0, 0x2e
80200e58: 69 91        	srli	a0, a0, 0x3a
80200e5a: 13 05 05 08  	addi	a0, a0, 0x80
80200e5e: a3 80 a5 00  	sb	a0, 0x1(a1)
;             *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
80200e62: 03 25 c4 e3  	lw	a0, -0x1c4(s0)
80200e66: 52 15        	slli	a0, a0, 0x34
80200e68: 69 91        	srli	a0, a0, 0x3a
80200e6a: 13 05 05 08  	addi	a0, a0, 0x80
80200e6e: 23 81 a5 00  	sb	a0, 0x2(a1)
;             *d = (code & 0x3F) as u8 | TAG_CONT;
80200e72: 03 45 c4 e3  	lbu	a0, -0x1c4(s0)
80200e76: 13 75 f5 03  	andi	a0, a0, 0x3f
80200e7a: 13 05 05 08  	addi	a0, a0, 0x80
80200e7e: a3 81 a5 00  	sb	a0, 0x3(a1)
;         }
80200e82: ed b5        	j	0x80200d6c <.Lpcrel_hi2+0xa8>
;         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80200e84: 09 a0        	j	0x80200e86 <.Lpcrel_hi4>

0000000080200e86 <.Lpcrel_hi4>:
;         Arguments { pieces, fmt: None, args }
80200e86: 17 25 03 00  	auipc	a0, 0x32
80200e8a: 13 05 a5 34  	addi	a0, a0, 0x34a
80200e8e: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
80200e92: 0d 45        	li	a0, 0x3
80200e94: 23 38 a4 e4  	sd	a0, -0x1b0(s0)

0000000080200e98 <.Lpcrel_hi5>:
80200e98: 97 25 03 00  	auipc	a1, 0x32
80200e9c: 93 85 85 3f  	addi	a1, a1, 0x3f8
80200ea0: 90 61        	ld	a2, 0x0(a1)
80200ea2: 8c 65        	ld	a1, 0x8(a1)
80200ea4: 23 34 c4 e6  	sd	a2, -0x198(s0)
80200ea8: 23 38 b4 e6  	sd	a1, -0x190(s0)
80200eac: 93 05 84 e7  	addi	a1, s0, -0x188
80200eb0: 23 3c b4 e4  	sd	a1, -0x1a8(s0)
80200eb4: 23 30 a4 e6  	sd	a0, -0x1a0(s0)

0000000080200eb8 <.Lpcrel_hi6>:
;         _ => panic!(
80200eb8: 17 25 03 00  	auipc	a0, 0x32
80200ebc: 93 05 85 40  	addi	a1, a0, 0x408
80200ec0: 13 05 84 e4  	addi	a0, s0, -0x1b8
80200ec4: 97 f0 02 00  	auipc	ra, 0x2f
80200ec8: e7 80 40 2e  	jalr	0x2e4(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080200ecc <_ZN5riscv8register4sepc4read17he90834d14114345dE>:
;         pub fn read() -> usize {
80200ecc: 41 11        	addi	sp, sp, -0x10
80200ece: 06 e4        	sd	ra, 0x8(sp)
80200ed0: 22 e0        	sd	s0, 0x0(sp)
80200ed2: 00 08        	addi	s0, sp, 0x10
;             unsafe { _read() }
80200ed4: 97 00 00 00  	auipc	ra, 0x0
80200ed8: e7 80 00 01  	jalr	0x10(ra) <_ZN5riscv8register4sepc5_read17h04344732a5ee332bE>
80200edc: a2 60        	ld	ra, 0x8(sp)
80200ede: 02 64        	ld	s0, 0x0(sp)
;         }
80200ee0: 41 01        	addi	sp, sp, 0x10
80200ee2: 82 80        	ret

0000000080200ee4 <_ZN5riscv8register4sepc5_read17h04344732a5ee332bE>:
;         unsafe fn _read() -> usize {
80200ee4: 01 11        	addi	sp, sp, -0x20
80200ee6: 06 ec        	sd	ra, 0x18(sp)
80200ee8: 22 e8        	sd	s0, 0x10(sp)
80200eea: 00 10        	addi	s0, sp, 0x20
;                     core::arch::asm!("csrrs {0}, {1}, x0", out(reg) r, const $csr_number);
80200eec: 73 25 10 14  	csrr	a0, sepc
80200ef0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     r
80200ef4: 03 35 84 fe  	ld	a0, -0x18(s0)
80200ef8: e2 60        	ld	ra, 0x18(sp)
80200efa: 42 64        	ld	s0, 0x10(sp)
;         }
80200efc: 05 61        	addi	sp, sp, 0x20
80200efe: 82 80        	ret

0000000080200f00 <_ZN5riscv8register4sepc5write17h4a37155c14177effE>:
;         pub fn write(bits: usize) {
80200f00: 01 11        	addi	sp, sp, -0x20
80200f02: 06 ec        	sd	ra, 0x18(sp)
80200f04: 22 e8        	sd	s0, 0x10(sp)
80200f06: 00 10        	addi	s0, sp, 0x20
80200f08: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             unsafe { _write(bits) }
80200f0c: 97 00 00 00  	auipc	ra, 0x0
80200f10: e7 80 00 01  	jalr	0x10(ra) <_ZN5riscv8register4sepc6_write17h40e11aa68cb20452E>
80200f14: e2 60        	ld	ra, 0x18(sp)
80200f16: 42 64        	ld	s0, 0x10(sp)
;         }
80200f18: 05 61        	addi	sp, sp, 0x20
80200f1a: 82 80        	ret

0000000080200f1c <_ZN5riscv8register4sepc6_write17h40e11aa68cb20452E>:
;         unsafe fn _write(bits: usize) {
80200f1c: 01 11        	addi	sp, sp, -0x20
80200f1e: 06 ec        	sd	ra, 0x18(sp)
80200f20: 22 e8        	sd	s0, 0x10(sp)
80200f22: 00 10        	addi	s0, sp, 0x20
80200f24: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 () => core::arch::asm!("csrrw x0, {1}, {0}", in(reg) bits, const $csr_number),
80200f28: 73 10 15 14  	csrw	sepc, a0
80200f2c: e2 60        	ld	ra, 0x18(sp)
80200f2e: 42 64        	ld	s0, 0x10(sp)
;         }
80200f30: 05 61        	addi	sp, sp, 0x20
80200f32: 82 80        	ret

0000000080200f34 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h579038c61332b959E>:
;     fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R
80200f34: 39 71        	addi	sp, sp, -0x40
80200f36: 06 fc        	sd	ra, 0x38(sp)
80200f38: 22 f8        	sd	s0, 0x30(sp)
80200f3a: 80 00        	addi	s0, sp, 0x40
80200f3c: 2e 86        	mv	a2, a1
80200f3e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80200f42: 23 30 c4 fe  	sd	a2, -0x20(s0)
;         self.iter.try_fold(init, enumerate(&mut self.count, fold))
80200f46: 93 05 05 01  	addi	a1, a0, 0x10
80200f4a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             move |acc, item| {
80200f4e: 23 30 c4 fc  	sd	a2, -0x40(s0)
80200f52: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.iter.try_fold(init, enumerate(&mut self.count, fold))
80200f56: 83 35 04 fc  	ld	a1, -0x40(s0)
80200f5a: 03 36 84 fc  	ld	a2, -0x38(s0)
80200f5e: 97 b0 00 00  	auipc	ra, 0xb
80200f62: e7 80 a0 85  	jalr	-0x7a6(ra) <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E>
80200f66: e2 70        	ld	ra, 0x38(sp)
80200f68: 42 74        	ld	s0, 0x30(sp)
;     }
80200f6a: 21 61        	addi	sp, sp, 0x40
80200f6c: 82 80        	ret

0000000080200f6e <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17h4b6d551eefa7d969E>:
;             move |acc, item| {
80200f6e: 19 71        	addi	sp, sp, -0x80
80200f70: 86 fc        	sd	ra, 0x78(sp)
80200f72: a2 f8        	sd	s0, 0x70(sp)
80200f74: 00 01        	addi	s0, sp, 0x80
80200f76: 23 34 a4 f8  	sd	a0, -0x78(s0)
80200f7a: 23 34 a4 fc  	sd	a0, -0x38(s0)
80200f7e: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 let acc = fold(acc, (*count, item));
80200f82: 10 65        	ld	a2, 0x8(a0)
80200f84: 10 62        	ld	a2, 0x0(a2)
80200f86: 23 3c c4 fa  	sd	a2, -0x48(s0)
80200f8a: 23 30 b4 fc  	sd	a1, -0x40(s0)
80200f8e: 03 36 84 fb  	ld	a2, -0x48(s0)
80200f92: 83 35 04 fc  	ld	a1, -0x40(s0)
80200f96: 23 34 c4 fa  	sd	a2, -0x58(s0)
80200f9a: 23 38 b4 fa  	sd	a1, -0x50(s0)
80200f9e: 83 35 84 fa  	ld	a1, -0x58(s0)
80200fa2: 03 36 04 fb  	ld	a2, -0x50(s0)
80200fa6: 97 80 01 00  	auipc	ra, 0x18
80200faa: e7 80 60 6e  	jalr	0x6e6(ra) <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h77370b2e73713ab0E>
80200fae: 2a 86        	mv	a2, a0
80200fb0: 03 35 84 f8  	ld	a0, -0x78(s0)
80200fb4: b2 86        	mv	a3, a2
80200fb6: 23 38 d4 f8  	sd	a3, -0x70(s0)
80200fba: ae 86        	mv	a3, a1
80200fbc: 23 3c d4 f8  	sd	a3, -0x68(s0)
80200fc0: 23 30 c4 fe  	sd	a2, -0x20(s0)
80200fc4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 *count += 1;
80200fc8: 08 65        	ld	a0, 0x8(a0)
80200fca: 08 61        	ld	a0, 0x0(a0)
80200fcc: 05 05        	addi	a0, a0, 0x1
80200fce: 23 30 a4 fa  	sd	a0, -0x60(s0)
80200fd2: 05 c1        	beqz	a0, 0x80200ff2 <.Lpcrel_hi0>
80200fd4: 09 a0        	j	0x80200fd6 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17h4b6d551eefa7d969E+0x68>
80200fd6: 83 35 84 f9  	ld	a1, -0x68(s0)
80200fda: 03 35 04 f9  	ld	a0, -0x70(s0)
80200fde: 03 36 04 fa  	ld	a2, -0x60(s0)
80200fe2: 83 36 84 f8  	ld	a3, -0x78(s0)
;                 *count += 1;
80200fe6: 94 66        	ld	a3, 0x8(a3)
80200fe8: 90 e2        	sd	a2, 0x0(a3)
80200fea: e6 70        	ld	ra, 0x78(sp)
80200fec: 46 74        	ld	s0, 0x70(sp)
;             }
80200fee: 09 61        	addi	sp, sp, 0x80
80200ff0: 82 80        	ret

0000000080200ff2 <.Lpcrel_hi0>:
;                 *count += 1;
80200ff2: 17 25 03 00  	auipc	a0, 0x32
80200ff6: 13 05 e5 37  	addi	a0, a0, 0x37e

0000000080200ffa <.Lpcrel_hi1>:
80200ffa: 97 25 03 00  	auipc	a1, 0x32
80200ffe: 13 86 e5 35  	addi	a2, a1, 0x35e
80201002: f1 45        	li	a1, 0x1c
80201004: 97 f0 02 00  	auipc	ra, 0x2f
80201008: e7 80 40 21  	jalr	0x214(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020100c <_ZN4core4iter6traits8iterator8Iterator4find17ha9ca87fc1d81cde5E>:
;     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
8020100c: 1d 71        	addi	sp, sp, -0x60
8020100e: 86 ec        	sd	ra, 0x58(sp)
80201010: a2 e8        	sd	s0, 0x50(sp)
80201012: 80 10        	addi	s0, sp, 0x60
80201014: 23 38 a4 fc  	sd	a0, -0x30(s0)
80201018: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             move |(), x| {
8020101c: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.try_fold((), check(predicate)).break_value()
80201020: 83 35 84 fc  	ld	a1, -0x38(s0)
80201024: 97 00 00 00  	auipc	ra, 0x0
80201028: e7 80 00 f1  	jalr	-0xf0(ra) <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h579038c61332b959E>
8020102c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80201030: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         match self {
80201034: 03 35 04 fc  	ld	a0, -0x40(s0)
80201038: 11 e5        	bnez	a0, 0x80201044 <_ZN4core4iter6traits8iterator8Iterator4find17ha9ca87fc1d81cde5E+0x38>
8020103a: 09 a0        	j	0x8020103c <_ZN4core4iter6traits8iterator8Iterator4find17ha9ca87fc1d81cde5E+0x30>
8020103c: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(..) => None,
8020103e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80201042: 31 a8        	j	0x8020105e <_ZN4core4iter6traits8iterator8Iterator4find17ha9ca87fc1d81cde5E+0x52>
;             ControlFlow::Break(x) => Some(x),
80201044: 83 35 84 fb  	ld	a1, -0x48(s0)
80201048: 03 35 04 fc  	ld	a0, -0x40(s0)
8020104c: 23 30 b4 fe  	sd	a1, -0x20(s0)
80201050: 23 34 a4 fe  	sd	a0, -0x18(s0)
80201054: 23 34 b4 fa  	sd	a1, -0x58(s0)
80201058: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020105c: 09 a0        	j	0x8020105e <_ZN4core4iter6traits8iterator8Iterator4find17ha9ca87fc1d81cde5E+0x52>
;     }
8020105e: 03 35 04 fc  	ld	a0, -0x40(s0)
80201062: 11 c9        	beqz	a0, 0x80201076 <_ZN4core4iter6traits8iterator8Iterator4find17ha9ca87fc1d81cde5E+0x6a>
80201064: 09 a0        	j	0x80201066 <_ZN4core4iter6traits8iterator8Iterator4find17ha9ca87fc1d81cde5E+0x5a>
;     }
80201066: 03 35 84 fa  	ld	a0, -0x58(s0)
8020106a: 83 35 04 fb  	ld	a1, -0x50(s0)
8020106e: e6 60        	ld	ra, 0x58(sp)
80201070: 46 64        	ld	s0, 0x50(sp)
80201072: 25 61        	addi	sp, sp, 0x60
80201074: 82 80        	ret
;     }
80201076: c5 bf        	j	0x80201066 <_ZN4core4iter6traits8iterator8Iterator4find17ha9ca87fc1d81cde5E+0x5a>

0000000080201078 <_ZN64_$LT$volatile..Volatile$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3e27141a69231dbaE>:
; #[derive(Debug, Default)]
80201078: 79 71        	addi	sp, sp, -0x30
8020107a: 06 f4        	sd	ra, 0x28(sp)
8020107c: 22 f0        	sd	s0, 0x20(sp)
8020107e: 00 18        	addi	s0, sp, 0x30
80201080: 23 38 b4 fc  	sd	a1, -0x30(s0)
80201084: aa 85        	mv	a1, a0
80201086: 03 35 04 fd  	ld	a0, -0x30(s0)
8020108a: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020108e: 23 34 a4 fe  	sd	a0, -0x18(s0)
; pub struct Volatile<T: Copy>(T);
80201092: 23 3c b4 fc  	sd	a1, -0x28(s0)

0000000080201096 <.Lpcrel_hi0>:
; #[derive(Debug, Default)]
80201096: 97 25 03 00  	auipc	a1, 0x32
8020109a: 93 85 25 31  	addi	a1, a1, 0x312

000000008020109e <.Lpcrel_hi1>:
8020109e: 17 26 03 00  	auipc	a2, 0x32
802010a2: 13 07 26 3d  	addi	a4, a2, 0x3d2
802010a6: 21 46        	li	a2, 0x8
802010a8: 93 06 84 fd  	addi	a3, s0, -0x28
802010ac: 97 f0 02 00  	auipc	ra, 0x2f
802010b0: e7 80 80 b1  	jalr	-0x4e8(ra) <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>
802010b4: a2 70        	ld	ra, 0x28(sp)
802010b6: 02 74        	ld	s0, 0x20(sp)
802010b8: 45 61        	addi	sp, sp, 0x30
802010ba: 82 80        	ret

00000000802010bc <_ZN64_$LT$volatile..Volatile$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h6b1acaae8f3b2268E>:
802010bc: 79 71        	addi	sp, sp, -0x30
802010be: 06 f4        	sd	ra, 0x28(sp)
802010c0: 22 f0        	sd	s0, 0x20(sp)
802010c2: 00 18        	addi	s0, sp, 0x30
802010c4: 23 38 b4 fc  	sd	a1, -0x30(s0)
802010c8: aa 85        	mv	a1, a0
802010ca: 03 35 04 fd  	ld	a0, -0x30(s0)
802010ce: 23 30 b4 fe  	sd	a1, -0x20(s0)
802010d2: 23 34 a4 fe  	sd	a0, -0x18(s0)
; pub struct Volatile<T: Copy>(T);
802010d6: 23 3c b4 fc  	sd	a1, -0x28(s0)

00000000802010da <.Lpcrel_hi2>:
; #[derive(Debug, Default)]
802010da: 97 25 03 00  	auipc	a1, 0x32
802010de: 93 85 e5 2c  	addi	a1, a1, 0x2ce

00000000802010e2 <.Lpcrel_hi3>:
802010e2: 17 26 03 00  	auipc	a2, 0x32
802010e6: 13 07 e6 3a  	addi	a4, a2, 0x3ae
802010ea: 21 46        	li	a2, 0x8
802010ec: 93 06 84 fd  	addi	a3, s0, -0x28
802010f0: 97 f0 02 00  	auipc	ra, 0x2f
802010f4: e7 80 40 ad  	jalr	-0x52c(ra) <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>
802010f8: a2 70        	ld	ra, 0x28(sp)
802010fa: 02 74        	ld	s0, 0x20(sp)
802010fc: 45 61        	addi	sp, sp, 0x30
802010fe: 82 80        	ret

0000000080201100 <_ZN8volatile17Volatile$LT$T$GT$4read17h7770f8da8eadbaecE>:
;     pub fn read(&self) -> T {
80201100: 01 11        	addi	sp, sp, -0x20
80201102: 06 ec        	sd	ra, 0x18(sp)
80201104: 22 e8        	sd	s0, 0x10(sp)
80201106: 00 10        	addi	s0, sp, 0x20
80201108: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { ptr::read_volatile(&self.0) }
8020110c: 97 f0 ff ff  	auipc	ra, 0xfffff
80201110: e7 80 80 ff  	jalr	-0x8(ra) <ekernel+0xffcb3104>
80201114: e2 60        	ld	ra, 0x18(sp)
80201116: 42 64        	ld	s0, 0x10(sp)
;     }
80201118: 05 61        	addi	sp, sp, 0x20
8020111a: 82 80        	ret

000000008020111c <_ZN8volatile17Volatile$LT$T$GT$4read17hd0748610284b742aE>:
;     pub fn read(&self) -> T {
8020111c: 01 11        	addi	sp, sp, -0x20
8020111e: 06 ec        	sd	ra, 0x18(sp)
80201120: 22 e8        	sd	s0, 0x10(sp)
80201122: 00 10        	addi	s0, sp, 0x20
80201124: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { ptr::read_volatile(&self.0) }
80201128: 97 f0 ff ff  	auipc	ra, 0xfffff
8020112c: e7 80 e0 04  	jalr	0x4e(ra) <ekernel+0xffcb3176>
80201130: e2 60        	ld	ra, 0x18(sp)
80201132: 42 64        	ld	s0, 0x10(sp)
;     }
80201134: 05 61        	addi	sp, sp, 0x20
80201136: 82 80        	ret

0000000080201138 <_ZN8volatile17Volatile$LT$T$GT$4read17hfb05fa3ab66d9c06E>:
;     pub fn read(&self) -> T {
80201138: 01 11        	addi	sp, sp, -0x20
8020113a: 06 ec        	sd	ra, 0x18(sp)
8020113c: 22 e8        	sd	s0, 0x10(sp)
8020113e: 00 10        	addi	s0, sp, 0x20
80201140: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { ptr::read_volatile(&self.0) }
80201144: 97 f0 ff ff  	auipc	ra, 0xfffff
80201148: e7 80 a0 ff  	jalr	-0x6(ra) <ekernel+0xffcb313e>
8020114c: e2 60        	ld	ra, 0x18(sp)
8020114e: 42 64        	ld	s0, 0x10(sp)
;     }
80201150: 05 61        	addi	sp, sp, 0x20
80201152: 82 80        	ret

0000000080201154 <_ZN8volatile17Volatile$LT$T$GT$5write17h9081d233a0dc55f8E>:
;     pub fn write(&mut self, value: T) {
80201154: 01 11        	addi	sp, sp, -0x20
80201156: 06 ec        	sd	ra, 0x18(sp)
80201158: 22 e8        	sd	s0, 0x10(sp)
8020115a: 00 10        	addi	s0, sp, 0x20
8020115c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80201160: 23 17 b4 fe  	sh	a1, -0x12(s0)
;         unsafe { ptr::write_volatile(&mut self.0, value) };
80201164: 97 f0 ff ff  	auipc	ra, 0xfffff
80201168: e7 80 c0 04  	jalr	0x4c(ra) <ekernel+0xffcb31b0>
8020116c: e2 60        	ld	ra, 0x18(sp)
8020116e: 42 64        	ld	s0, 0x10(sp)
;     }
80201170: 05 61        	addi	sp, sp, 0x20
80201172: 82 80        	ret

0000000080201174 <_ZN8volatile17Volatile$LT$T$GT$5write17h9fd5677828847b1fE>:
;     pub fn write(&mut self, value: T) {
80201174: 01 11        	addi	sp, sp, -0x20
80201176: 06 ec        	sd	ra, 0x18(sp)
80201178: 22 e8        	sd	s0, 0x10(sp)
8020117a: 00 10        	addi	s0, sp, 0x20
8020117c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80201180: 23 17 b4 fe  	sh	a1, -0x12(s0)
;         unsafe { ptr::write_volatile(&mut self.0, value) };
80201184: 97 f0 ff ff  	auipc	ra, 0xfffff
80201188: e7 80 80 0a  	jalr	0xa8(ra) <ekernel+0xffcb322c>
8020118c: e2 60        	ld	ra, 0x18(sp)
8020118e: 42 64        	ld	s0, 0x10(sp)
;     }
80201190: 05 61        	addi	sp, sp, 0x20
80201192: 82 80        	ret

0000000080201194 <_ZN8volatile17Volatile$LT$T$GT$5write17hfe8e4cb2830ffb8cE>:
;     pub fn write(&mut self, value: T) {
80201194: 01 11        	addi	sp, sp, -0x20
80201196: 06 ec        	sd	ra, 0x18(sp)
80201198: 22 e8        	sd	s0, 0x10(sp)
8020119a: 00 10        	addi	s0, sp, 0x20
8020119c: 23 30 a4 fe  	sd	a0, -0x20(s0)
802011a0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { ptr::write_volatile(&mut self.0, value) };
802011a4: 97 f0 ff ff  	auipc	ra, 0xfffff
802011a8: e7 80 c0 04  	jalr	0x4c(ra) <ekernel+0xffcb31f0>
802011ac: e2 60        	ld	ra, 0x18(sp)
802011ae: 42 64        	ld	s0, 0x10(sp)
;     }
802011b0: 05 61        	addi	sp, sp, 0x20
802011b2: 82 80        	ret

00000000802011b4 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h0458a92f4b5e4ec6E>:
;     fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
802011b4: 01 11        	addi	sp, sp, -0x20
802011b6: 06 ec        	sd	ra, 0x18(sp)
802011b8: 22 e8        	sd	s0, 0x10(sp)
802011ba: 00 10        	addi	s0, sp, 0x20
802011bc: 23 30 b4 fe  	sd	a1, -0x20(s0)
802011c0: aa 85        	mv	a1, a0
802011c2: 03 35 04 fe  	ld	a0, -0x20(s0)
802011c6: a3 06 a4 fe  	sb	a0, -0x13(s0)
;             Err(e) => Err(From::from(e)),
802011ca: 03 45 d4 fe  	lbu	a0, -0x13(s0)
802011ce: 23 07 a4 fe  	sb	a0, -0x12(s0)
802011d2: a3 07 a4 fe  	sb	a0, -0x11(s0)
802011d6: 23 84 a5 00  	sb	a0, 0x8(a1)
802011da: 01 45        	li	a0, 0x0
802011dc: 88 e1        	sd	a0, 0x0(a1)
802011de: e2 60        	ld	ra, 0x18(sp)
802011e0: 42 64        	ld	s0, 0x10(sp)
;     }
802011e2: 05 61        	addi	sp, sp, 0x20
802011e4: 82 80        	ret

00000000802011e6 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hafe6c7aff951330dE>:
;     fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
802011e6: 01 11        	addi	sp, sp, -0x20
802011e8: 06 ec        	sd	ra, 0x18(sp)
802011ea: 22 e8        	sd	s0, 0x10(sp)
802011ec: 00 10        	addi	s0, sp, 0x20
802011ee: 23 06 a4 fe  	sb	a0, -0x14(s0)
;             Err(e) => Err(From::from(e)),
802011f2: 03 45 c4 fe  	lbu	a0, -0x14(s0)
802011f6: 23 07 a4 fe  	sb	a0, -0x12(s0)
802011fa: a3 07 a4 fe  	sb	a0, -0x11(s0)
802011fe: a3 06 a4 fe  	sb	a0, -0x13(s0)
;     }
80201202: 03 45 d4 fe  	lbu	a0, -0x13(s0)
80201206: e2 60        	ld	ra, 0x18(sp)
80201208: 42 64        	ld	s0, 0x10(sp)
8020120a: 05 61        	addi	sp, sp, 0x20
8020120c: 82 80        	ret

000000008020120e <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17hd71256ad829d95a7E>:
;     fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
8020120e: 01 11        	addi	sp, sp, -0x20
80201210: 06 ec        	sd	ra, 0x18(sp)
80201212: 22 e8        	sd	s0, 0x10(sp)
80201214: 00 10        	addi	s0, sp, 0x20
80201216: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020121a: aa 85        	mv	a1, a0
8020121c: 03 35 04 fe  	ld	a0, -0x20(s0)
80201220: a3 06 a4 fe  	sb	a0, -0x13(s0)
;             Err(e) => Err(From::from(e)),
80201224: 03 45 d4 fe  	lbu	a0, -0x13(s0)
80201228: 23 07 a4 fe  	sb	a0, -0x12(s0)
8020122c: a3 07 a4 fe  	sb	a0, -0x11(s0)
80201230: 23 84 a5 00  	sb	a0, 0x8(a1)
80201234: 01 45        	li	a0, 0x0
80201236: 88 e1        	sd	a0, 0x0(a1)
80201238: e2 60        	ld	ra, 0x18(sp)
8020123a: 42 64        	ld	s0, 0x10(sp)
;     }
8020123c: 05 61        	addi	sp, sp, 0x20
8020123e: 82 80        	ret

0000000080201240 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h061b699b6fb15338E>:
;     pub fn expect(self, msg: &str) -> T
80201240: 39 71        	addi	sp, sp, -0x40
80201242: 06 fc        	sd	ra, 0x38(sp)
80201244: 22 f8        	sd	s0, 0x30(sp)
80201246: 80 00        	addi	s0, sp, 0x40
80201248: 23 30 d4 fc  	sd	a3, -0x40(s0)
8020124c: 23 34 c4 fc  	sd	a2, -0x38(s0)
80201250: 23 38 b4 fc  	sd	a1, -0x30(s0)
80201254: a3 0e a4 fc  	sb	a0, -0x23(s0)
80201258: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020125c: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         match self {
80201260: 03 45 d4 fd  	lbu	a0, -0x23(s0)
80201264: 05 89        	andi	a0, a0, 0x1
80201266: 11 e5        	bnez	a0, 0x80201272 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h061b699b6fb15338E+0x32>
80201268: 09 a0        	j	0x8020126a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h061b699b6fb15338E+0x2a>
8020126a: e2 70        	ld	ra, 0x38(sp)
8020126c: 42 74        	ld	s0, 0x30(sp)
;     }
8020126e: 21 61        	addi	sp, sp, 0x40
80201270: 82 80        	ret
80201272: 03 37 04 fc  	ld	a4, -0x40(s0)
80201276: 83 35 84 fc  	ld	a1, -0x38(s0)
8020127a: 03 35 04 fd  	ld	a0, -0x30(s0)

000000008020127e <.Lpcrel_hi0>:
;             Err(e) => unwrap_failed(msg, &e),
8020127e: 17 26 03 00  	auipc	a2, 0x32
80201282: 93 06 26 23  	addi	a3, a2, 0x232
80201286: 13 06 e4 fd  	addi	a2, s0, -0x22
8020128a: 97 00 03 00  	auipc	ra, 0x30
8020128e: e7 80 40 a9  	jalr	-0x56c(ra) <_ZN4core6result13unwrap_failed17hd7dd91774099986cE>

0000000080201292 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h51cd8a5954654e91E>:
;     pub fn expect(self, msg: &str) -> T
80201292: 39 71        	addi	sp, sp, -0x40
80201294: 06 fc        	sd	ra, 0x38(sp)
80201296: 22 f8        	sd	s0, 0x30(sp)
80201298: 80 00        	addi	s0, sp, 0x40
8020129a: 23 30 d4 fc  	sd	a3, -0x40(s0)
8020129e: 23 34 c4 fc  	sd	a2, -0x38(s0)
802012a2: 23 38 b4 fc  	sd	a1, -0x30(s0)
802012a6: a3 0e a4 fc  	sb	a0, -0x23(s0)
802012aa: 23 30 b4 fe  	sd	a1, -0x20(s0)
802012ae: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         match self {
802012b2: 03 45 d4 fd  	lbu	a0, -0x23(s0)
802012b6: 99 45        	li	a1, 0x6
802012b8: 63 17 b5 00  	bne	a0, a1, 0x802012c6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h51cd8a5954654e91E+0x34>
802012bc: 09 a0        	j	0x802012be <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h51cd8a5954654e91E+0x2c>
802012be: e2 70        	ld	ra, 0x38(sp)
802012c0: 42 74        	ld	s0, 0x30(sp)
;     }
802012c2: 21 61        	addi	sp, sp, 0x40
802012c4: 82 80        	ret
802012c6: 03 37 04 fc  	ld	a4, -0x40(s0)
802012ca: 83 35 84 fc  	ld	a1, -0x38(s0)
802012ce: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Err(e) => unwrap_failed(msg, &e),
802012d2: 03 46 d4 fd  	lbu	a2, -0x23(s0)
802012d6: 23 0f c4 fc  	sb	a2, -0x22(s0)

00000000802012da <.Lpcrel_hi1>:
802012da: 17 26 03 00  	auipc	a2, 0x32
802012de: 93 06 66 1f  	addi	a3, a2, 0x1f6
802012e2: 13 06 e4 fd  	addi	a2, s0, -0x22
802012e6: 97 00 03 00  	auipc	ra, 0x30
802012ea: e7 80 80 a3  	jalr	-0x5c8(ra) <_ZN4core6result13unwrap_failed17hd7dd91774099986cE>

00000000802012ee <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h280253ea5483162eE>:
;     pub const fn is_err(&self) -> bool {
802012ee: 01 11        	addi	sp, sp, -0x20
802012f0: 06 ec        	sd	ra, 0x18(sp)
802012f2: 22 e8        	sd	s0, 0x10(sp)
802012f4: 00 10        	addi	s0, sp, 0x20
802012f6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         matches!(*self, Ok(_))
802012fa: 08 61        	ld	a0, 0x0(a0)
802012fc: 11 e5        	bnez	a0, 0x80201308 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h280253ea5483162eE+0x1a>
802012fe: 09 a0        	j	0x80201300 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h280253ea5483162eE+0x12>
80201300: 05 45        	li	a0, 0x1
;         matches!(*self, Ok(_))
80201302: a3 03 a4 fe  	sb	a0, -0x19(s0)
80201306: 29 a0        	j	0x80201310 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h280253ea5483162eE+0x22>
80201308: 01 45        	li	a0, 0x0
;         matches!(*self, Ok(_))
8020130a: a3 03 a4 fe  	sb	a0, -0x19(s0)
8020130e: 09 a0        	j	0x80201310 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h280253ea5483162eE+0x22>
;         !self.is_ok()
80201310: 03 45 74 fe  	lbu	a0, -0x19(s0)
80201314: 13 45 f5 ff  	not	a0, a0
;     }
80201318: 05 89        	andi	a0, a0, 0x1
8020131a: e2 60        	ld	ra, 0x18(sp)
8020131c: 42 64        	ld	s0, 0x10(sp)
8020131e: 05 61        	addi	sp, sp, 0x20
80201320: 82 80        	ret

0000000080201322 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h91487e8350bd5bf0E>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80201322: 79 71        	addi	sp, sp, -0x30
80201324: 06 f4        	sd	ra, 0x28(sp)
80201326: 22 f0        	sd	s0, 0x20(sp)
80201328: 00 18        	addi	s0, sp, 0x30
8020132a: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020132e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         match self {
80201332: 03 c5 05 00  	lbu	a0, 0x0(a1)
80201336: 05 89        	andi	a0, a0, 0x1
80201338: 05 e5        	bnez	a0, 0x80201360 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h91487e8350bd5bf0E+0x3e>
8020133a: 09 a0        	j	0x8020133c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h91487e8350bd5bf0E+0x1a>
8020133c: 83 35 84 fd  	ld	a1, -0x28(s0)
80201340: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Ok(v) => ControlFlow::Continue(v),
80201344: 03 16 45 00  	lh	a2, 0x4(a0)
80201348: 08 45        	lw	a0, 0x8(a0)
8020134a: 23 12 c4 fe  	sh	a2, -0x1c(s0)
8020134e: 23 24 a4 fe  	sw	a0, -0x18(s0)
80201352: 23 92 c5 00  	sh	a2, 0x4(a1)
80201356: 88 c5        	sw	a0, 0x8(a1)
80201358: 01 45        	li	a0, 0x0
8020135a: 23 80 a5 00  	sb	a0, 0x0(a1)
8020135e: 1d a0        	j	0x80201384 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h91487e8350bd5bf0E+0x62>
80201360: 83 35 84 fd  	ld	a1, -0x28(s0)
80201364: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
80201368: 03 45 15 00  	lbu	a0, 0x1(a0)
8020136c: a3 07 a4 fe  	sb	a0, -0x11(s0)
80201370: a3 01 a4 fe  	sb	a0, -0x1d(s0)
80201374: 03 45 34 fe  	lbu	a0, -0x1d(s0)
80201378: a3 80 a5 00  	sb	a0, 0x1(a1)
8020137c: 05 45        	li	a0, 0x1
8020137e: 23 80 a5 00  	sb	a0, 0x0(a1)
80201382: 09 a0        	j	0x80201384 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h91487e8350bd5bf0E+0x62>
80201384: a2 70        	ld	ra, 0x28(sp)
80201386: 02 74        	ld	s0, 0x20(sp)
;     }
80201388: 45 61        	addi	sp, sp, 0x30
8020138a: 82 80        	ret

000000008020138c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17haa462dc2d0cb612eE>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8020138c: 59 71        	addi	sp, sp, -0x70
8020138e: 86 f4        	sd	ra, 0x68(sp)
80201390: a2 f0        	sd	s0, 0x60(sp)
80201392: 80 18        	addi	s0, sp, 0x70
80201394: 23 3c b4 f8  	sd	a1, -0x68(s0)
80201398: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         match self {
8020139c: 88 61        	ld	a0, 0x0(a1)
8020139e: 3d c5        	beqz	a0, 0x8020140c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17haa462dc2d0cb612eE+0x80>
802013a0: 09 a0        	j	0x802013a2 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17haa462dc2d0cb612eE+0x16>
802013a2: 83 35 04 fa  	ld	a1, -0x60(s0)
802013a6: 03 35 84 f9  	ld	a0, -0x68(s0)
;             Ok(v) => ControlFlow::Continue(v),
802013aa: 10 7d        	ld	a2, 0x38(a0)
802013ac: 23 30 c4 fe  	sd	a2, -0x20(s0)
802013b0: 10 79        	ld	a2, 0x30(a0)
802013b2: 23 3c c4 fc  	sd	a2, -0x28(s0)
802013b6: 10 75        	ld	a2, 0x28(a0)
802013b8: 23 38 c4 fc  	sd	a2, -0x30(s0)
802013bc: 10 71        	ld	a2, 0x20(a0)
802013be: 23 34 c4 fc  	sd	a2, -0x38(s0)
802013c2: 10 6d        	ld	a2, 0x18(a0)
802013c4: 23 30 c4 fc  	sd	a2, -0x40(s0)
802013c8: 10 69        	ld	a2, 0x10(a0)
802013ca: 23 3c c4 fa  	sd	a2, -0x48(s0)
802013ce: 10 65        	ld	a2, 0x8(a0)
802013d0: 23 38 c4 fa  	sd	a2, -0x50(s0)
802013d4: 08 61        	ld	a0, 0x0(a0)
802013d6: 23 34 a4 fa  	sd	a0, -0x58(s0)
802013da: 03 35 04 fe  	ld	a0, -0x20(s0)
802013de: 88 fd        	sd	a0, 0x38(a1)
802013e0: 03 35 84 fd  	ld	a0, -0x28(s0)
802013e4: 88 f9        	sd	a0, 0x30(a1)
802013e6: 03 35 04 fd  	ld	a0, -0x30(s0)
802013ea: 88 f5        	sd	a0, 0x28(a1)
802013ec: 03 35 84 fc  	ld	a0, -0x38(s0)
802013f0: 88 f1        	sd	a0, 0x20(a1)
802013f2: 03 35 04 fc  	ld	a0, -0x40(s0)
802013f6: 88 ed        	sd	a0, 0x18(a1)
802013f8: 03 35 84 fb  	ld	a0, -0x48(s0)
802013fc: 88 e9        	sd	a0, 0x10(a1)
802013fe: 03 35 04 fb  	ld	a0, -0x50(s0)
80201402: 88 e5        	sd	a0, 0x8(a1)
80201404: 03 35 84 fa  	ld	a0, -0x58(s0)
80201408: 88 e1        	sd	a0, 0x0(a1)
8020140a: 15 a0        	j	0x8020142e <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17haa462dc2d0cb612eE+0xa2>
8020140c: 83 35 04 fa  	ld	a1, -0x60(s0)
80201410: 03 35 84 f9  	ld	a0, -0x68(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
80201414: 03 45 85 00  	lbu	a0, 0x8(a0)
80201418: a3 07 a4 fe  	sb	a0, -0x11(s0)
8020141c: 23 07 a4 fe  	sb	a0, -0x12(s0)
80201420: 03 45 e4 fe  	lbu	a0, -0x12(s0)
80201424: 23 84 a5 00  	sb	a0, 0x8(a1)
80201428: 01 45        	li	a0, 0x0
8020142a: 88 e1        	sd	a0, 0x0(a1)
8020142c: 09 a0        	j	0x8020142e <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17haa462dc2d0cb612eE+0xa2>
8020142e: a6 70        	ld	ra, 0x68(sp)
80201430: 06 74        	ld	s0, 0x60(sp)
;     }
80201432: 65 61        	addi	sp, sp, 0x70
80201434: 82 80        	ret

0000000080201436 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcfad278256f39851E>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80201436: 79 71        	addi	sp, sp, -0x30
80201438: 06 f4        	sd	ra, 0x28(sp)
8020143a: 22 f0        	sd	s0, 0x20(sp)
8020143c: 00 18        	addi	s0, sp, 0x30
8020143e: 23 20 a4 fe  	sw	a0, -0x20(s0)
80201442: 03 25 04 fe  	lw	a0, -0x20(s0)
80201446: 23 2e a4 fc  	sw	a0, -0x24(s0)
;         match self {
8020144a: 03 45 c4 fd  	lbu	a0, -0x24(s0)
8020144e: 05 89        	andi	a0, a0, 0x1
80201450: 01 ed        	bnez	a0, 0x80201468 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcfad278256f39851E+0x32>
80201452: 09 a0        	j	0x80201454 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcfad278256f39851E+0x1e>
;             Ok(v) => ControlFlow::Continue(v),
80201454: 03 15 e4 fd  	lh	a0, -0x22(s0)
80201458: 23 16 a4 fe  	sh	a0, -0x14(s0)
8020145c: 23 14 a4 fe  	sh	a0, -0x18(s0)
80201460: 01 45        	li	a0, 0x0
80201462: 23 03 a4 fe  	sb	a0, -0x1a(s0)
80201466: 39 a8        	j	0x80201484 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcfad278256f39851E+0x4e>
;             Err(e) => ControlFlow::Break(Err(e)),
80201468: 03 45 d4 fd  	lbu	a0, -0x23(s0)
8020146c: a3 07 a4 fe  	sb	a0, -0x11(s0)
80201470: a3 05 a4 fe  	sb	a0, -0x15(s0)
80201474: 03 45 b4 fe  	lbu	a0, -0x15(s0)
80201478: a3 03 a4 fe  	sb	a0, -0x19(s0)
8020147c: 05 45        	li	a0, 0x1
8020147e: 23 03 a4 fe  	sb	a0, -0x1a(s0)
80201482: 09 a0        	j	0x80201484 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hcfad278256f39851E+0x4e>
;     }
80201484: 03 15 84 fe  	lh	a0, -0x18(s0)
80201488: 42 05        	slli	a0, a0, 0x10
8020148a: 83 55 64 fe  	lhu	a1, -0x1a(s0)
8020148e: 4d 8d        	or	a0, a0, a1
80201490: a2 70        	ld	ra, 0x28(sp)
80201492: 02 74        	ld	s0, 0x20(sp)
80201494: 45 61        	addi	sp, sp, 0x30
80201496: 82 80        	ret

0000000080201498 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17he9ec000de5199524E>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80201498: 39 71        	addi	sp, sp, -0x40
8020149a: 06 fc        	sd	ra, 0x38(sp)
8020149c: 22 f8        	sd	s0, 0x30(sp)
8020149e: 80 00        	addi	s0, sp, 0x40
802014a0: 23 30 b4 fc  	sd	a1, -0x40(s0)
802014a4: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         match self {
802014a8: 03 c5 05 00  	lbu	a0, 0x0(a1)
802014ac: 05 89        	andi	a0, a0, 0x1
802014ae: 15 e1        	bnez	a0, 0x802014d2 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17he9ec000de5199524E+0x3a>
802014b0: 09 a0        	j	0x802014b2 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17he9ec000de5199524E+0x1a>
802014b2: 83 35 84 fc  	ld	a1, -0x38(s0)
802014b6: 03 35 04 fc  	ld	a0, -0x40(s0)
;             Ok(v) => ControlFlow::Continue(v),
802014ba: 10 65        	ld	a2, 0x8(a0)
802014bc: 08 69        	ld	a0, 0x10(a0)
802014be: 23 3c c4 fc  	sd	a2, -0x28(s0)
802014c2: 23 30 a4 fe  	sd	a0, -0x20(s0)
802014c6: 90 e5        	sd	a2, 0x8(a1)
802014c8: 88 e9        	sd	a0, 0x10(a1)
802014ca: 01 45        	li	a0, 0x0
802014cc: 23 80 a5 00  	sb	a0, 0x0(a1)
802014d0: 1d a0        	j	0x802014f6 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17he9ec000de5199524E+0x5e>
802014d2: 83 35 84 fc  	ld	a1, -0x38(s0)
802014d6: 03 35 04 fc  	ld	a0, -0x40(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
802014da: 03 45 15 00  	lbu	a0, 0x1(a0)
802014de: a3 07 a4 fe  	sb	a0, -0x11(s0)
802014e2: a3 0b a4 fc  	sb	a0, -0x29(s0)
802014e6: 03 45 74 fd  	lbu	a0, -0x29(s0)
802014ea: a3 80 a5 00  	sb	a0, 0x1(a1)
802014ee: 05 45        	li	a0, 0x1
802014f0: 23 80 a5 00  	sb	a0, 0x0(a1)
802014f4: 09 a0        	j	0x802014f6 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17he9ec000de5199524E+0x5e>
802014f6: e2 70        	ld	ra, 0x38(sp)
802014f8: 42 74        	ld	s0, 0x30(sp)
;     }
802014fa: 21 61        	addi	sp, sp, 0x40
802014fc: 82 80        	ret

00000000802014fe <_ZN4core5slice3raw14from_raw_parts18precondition_check17hc4f6fb98c98abd3bE>:
;             const fn precondition_check($($name:$ty),*) {
802014fe: 1d 71        	addi	sp, sp, -0x60
80201500: 86 ec        	sd	ra, 0x58(sp)
80201502: a2 e8        	sd	s0, 0x50(sp)
80201504: 80 10        	addi	s0, sp, 0x60
80201506: 23 38 d4 fa  	sd	a3, -0x50(s0)
8020150a: 23 3c c4 fa  	sd	a2, -0x48(s0)
8020150e: 2e 86        	mv	a2, a1
80201510: 83 35 84 fb  	ld	a1, -0x48(s0)
80201514: 23 30 c4 fc  	sd	a2, -0x40(s0)
80201518: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020151c: 23 3c c4 fc  	sd	a2, -0x28(s0)
80201520: 23 30 b4 fe  	sd	a1, -0x20(s0)
80201524: 23 34 d4 fe  	sd	a3, -0x18(s0)
;                 is_aligned_and_not_null(data, align)
80201528: 97 80 01 00  	auipc	ra, 0x18
8020152c: e7 80 80 37  	jalr	0x378(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>
80201530: 19 e1        	bnez	a0, 0x80201536 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hc4f6fb98c98abd3bE+0x38>
80201532: 09 a0        	j	0x80201534 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hc4f6fb98c98abd3bE+0x36>
; #![no_std]
80201534: 09 a8        	j	0x80201546 <.Lpcrel_hi0>
80201536: 03 35 04 fc  	ld	a0, -0x40(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8020153a: 93 35 15 00  	seqz	a1, a0
8020153e: 23 34 b4 fa  	sd	a1, -0x58(s0)
80201542: 01 cd        	beqz	a0, 0x8020155a <.Lpcrel_hi0+0x14>
80201544: 39 a8        	j	0x80201562 <.Lpcrel_hi0+0x1c>

0000000080201546 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
80201546: 17 25 03 00  	auipc	a0, 0x32
8020154a: 13 05 35 05  	addi	a0, a0, 0x53
8020154e: 93 05 20 0a  	li	a1, 0xa2
80201552: 97 f0 02 00  	auipc	ra, 0x2f
80201556: e7 80 e0 ce  	jalr	-0x312(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8020155a: 7d 55        	li	a0, -0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8020155c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80201560: 31 a0        	j	0x8020156c <.Lpcrel_hi0+0x26>
80201562: 03 35 84 fa  	ld	a0, -0x58(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80201566: 05 89        	andi	a0, a0, 0x1
80201568: 15 e1        	bnez	a0, 0x8020158c <.Lpcrel_hi1>
8020156a: 01 a8        	j	0x8020157a <.Lpcrel_hi0+0x34>
8020156c: 83 35 04 fb  	ld	a1, -0x50(s0)
;     len <= max_len
80201570: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 && is_valid_allocation_size(size, len)
80201574: 63 7a b5 02  	bgeu	a0, a1, 0x802015a8 <.Lpcrel_hi2+0x14>
80201578: 3d a0        	j	0x802015a6 <.Lpcrel_hi2+0x12>
8020157a: 83 35 04 fc  	ld	a1, -0x40(s0)
8020157e: 7d 55        	li	a0, -0x1
80201580: 05 81        	srli	a0, a0, 0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80201582: 33 55 b5 02  	divu	a0, a0, a1
80201586: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020158a: cd b7        	j	0x8020156c <.Lpcrel_hi0+0x26>

000000008020158c <.Lpcrel_hi1>:
8020158c: 17 25 03 00  	auipc	a0, 0x32
80201590: 13 05 45 ff  	addi	a0, a0, -0xc

0000000080201594 <.Lpcrel_hi2>:
80201594: 97 25 03 00  	auipc	a1, 0x32
80201598: 13 86 45 fd  	addi	a2, a1, -0x2c
8020159c: e5 45        	li	a1, 0x19
8020159e: 97 f0 02 00  	auipc	ra, 0x2f
802015a2: e7 80 a0 c7  	jalr	-0x386(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
; #![no_std]
802015a6: 45 b7        	j	0x80201546 <.Lpcrel_hi0>
802015a8: e6 60        	ld	ra, 0x58(sp)
802015aa: 46 64        	ld	s0, 0x50(sp)
;             }
802015ac: 25 61        	addi	sp, sp, 0x60
802015ae: 82 80        	ret

00000000802015b0 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h14b59a2925674a1eE>:
;             const fn precondition_check($($name:$ty),*) {
802015b0: 1d 71        	addi	sp, sp, -0x60
802015b2: 86 ec        	sd	ra, 0x58(sp)
802015b4: a2 e8        	sd	s0, 0x50(sp)
802015b6: 80 10        	addi	s0, sp, 0x60
802015b8: 23 38 d4 fa  	sd	a3, -0x50(s0)
802015bc: 23 3c c4 fa  	sd	a2, -0x48(s0)
802015c0: 2e 86        	mv	a2, a1
802015c2: 83 35 84 fb  	ld	a1, -0x48(s0)
802015c6: 23 30 c4 fc  	sd	a2, -0x40(s0)
802015ca: 23 38 a4 fc  	sd	a0, -0x30(s0)
802015ce: 23 3c c4 fc  	sd	a2, -0x28(s0)
802015d2: 23 30 b4 fe  	sd	a1, -0x20(s0)
802015d6: 23 34 d4 fe  	sd	a3, -0x18(s0)
;                 is_aligned_and_not_null(data, align)
802015da: 97 80 01 00  	auipc	ra, 0x18
802015de: e7 80 60 2c  	jalr	0x2c6(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>
802015e2: 19 e1        	bnez	a0, 0x802015e8 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h14b59a2925674a1eE+0x38>
802015e4: 09 a0        	j	0x802015e6 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17h14b59a2925674a1eE+0x36>
; #![no_std]
802015e6: 09 a8        	j	0x802015f8 <.Lpcrel_hi3>
802015e8: 03 35 04 fc  	ld	a0, -0x40(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
802015ec: 93 35 15 00  	seqz	a1, a0
802015f0: 23 34 b4 fa  	sd	a1, -0x58(s0)
802015f4: 01 cd        	beqz	a0, 0x8020160c <.Lpcrel_hi3+0x14>
802015f6: 39 a8        	j	0x80201614 <.Lpcrel_hi3+0x1c>

00000000802015f8 <.Lpcrel_hi3>:
;                     ::core::panicking::panic_nounwind(
802015f8: 17 25 03 00  	auipc	a0, 0x32
802015fc: 13 05 35 04  	addi	a0, a0, 0x43
80201600: 93 05 60 0a  	li	a1, 0xa6
80201604: 97 f0 02 00  	auipc	ra, 0x2f
80201608: e7 80 c0 c3  	jalr	-0x3c4(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8020160c: 7d 55        	li	a0, -0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8020160e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80201612: 31 a0        	j	0x8020161e <.Lpcrel_hi3+0x26>
80201614: 03 35 84 fa  	ld	a0, -0x58(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80201618: 05 89        	andi	a0, a0, 0x1
8020161a: 15 e1        	bnez	a0, 0x8020163e <.Lpcrel_hi4>
8020161c: 01 a8        	j	0x8020162c <.Lpcrel_hi3+0x34>
8020161e: 83 35 04 fb  	ld	a1, -0x50(s0)
;     len <= max_len
80201622: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 && is_valid_allocation_size(size, len)
80201626: 63 7a b5 02  	bgeu	a0, a1, 0x8020165a <.Lpcrel_hi5+0x14>
8020162a: 3d a0        	j	0x80201658 <.Lpcrel_hi5+0x12>
8020162c: 83 35 04 fc  	ld	a1, -0x40(s0)
80201630: 7d 55        	li	a0, -0x1
80201632: 05 81        	srli	a0, a0, 0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80201634: 33 55 b5 02  	divu	a0, a0, a1
80201638: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020163c: cd b7        	j	0x8020161e <.Lpcrel_hi3+0x26>

000000008020163e <.Lpcrel_hi4>:
8020163e: 17 25 03 00  	auipc	a0, 0x32
80201642: 13 05 25 f4  	addi	a0, a0, -0xbe

0000000080201646 <.Lpcrel_hi5>:
80201646: 97 25 03 00  	auipc	a1, 0x32
8020164a: 13 86 25 f2  	addi	a2, a1, -0xde
8020164e: e5 45        	li	a1, 0x19
80201650: 97 f0 02 00  	auipc	ra, 0x2f
80201654: e7 80 80 bc  	jalr	-0x438(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
; #![no_std]
80201658: 45 b7        	j	0x802015f8 <.Lpcrel_hi3>
8020165a: e6 60        	ld	ra, 0x58(sp)
8020165c: 46 64        	ld	s0, 0x50(sp)
;             }
8020165e: 25 61        	addi	sp, sp, 0x60
80201660: 82 80        	ret

0000000080201662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17haf09ef04ff2788ebE>:
;     pub fn iter(&self) -> Iter<'_, T> {
80201662: 59 71        	addi	sp, sp, -0x70
80201664: 86 f4        	sd	ra, 0x68(sp)
80201666: a2 f0        	sd	s0, 0x60(sp)
80201668: 80 18        	addi	s0, sp, 0x70
8020166a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020166e: 23 3c a4 f8  	sd	a0, -0x68(s0)
80201672: 23 38 a4 fc  	sd	a0, -0x30(s0)
80201676: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
8020167a: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
8020167e: 23 3c a4 fa  	sd	a0, -0x48(s0)
80201682: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80201686: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
8020168a: 09 a0        	j	0x8020168c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17haf09ef04ff2788ebE+0x2a>
8020168c: 03 35 84 f9  	ld	a0, -0x68(s0)
80201690: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
80201694: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
80201698: 8e 05        	slli	a1, a1, 0x3
8020169a: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
8020169c: 23 34 a4 fc  	sd	a0, -0x38(s0)
802016a0: 09 a0        	j	0x802016a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17haf09ef04ff2788ebE+0x40>
;             Self { ptr, end_or_len, _marker: PhantomData }
802016a2: 03 35 84 fc  	ld	a0, -0x38(s0)
802016a6: 83 35 04 fb  	ld	a1, -0x50(s0)
802016aa: 23 30 b4 fa  	sd	a1, -0x60(s0)
802016ae: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
802016b2: 03 35 04 fa  	ld	a0, -0x60(s0)
802016b6: 83 35 84 fa  	ld	a1, -0x58(s0)
802016ba: a6 70        	ld	ra, 0x68(sp)
802016bc: 06 74        	ld	s0, 0x60(sp)
802016be: 65 61        	addi	sp, sp, 0x70
802016c0: 82 80        	ret

00000000802016c2 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h6a355e86b6bd4c37E>:
;     pub fn new(data: T) -> Arc<T> {
802016c2: 6d 71        	addi	sp, sp, -0x110
802016c4: 06 e6        	sd	ra, 0x108(sp)
802016c6: 22 e2        	sd	s0, 0x100(sp)
802016c8: 00 0a        	addi	s0, sp, 0x110
802016ca: aa 85        	mv	a1, a0
802016cc: 05 45        	li	a0, 0x1
; atomic_int_ptr_sized! {
802016ce: 23 34 a4 f0  	sd	a0, -0xf8(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
802016d2: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; atomic_int_ptr_sized! {
802016d6: 23 3c a4 f0  	sd	a0, -0xe8(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
802016da: 23 30 a4 f2  	sd	a0, -0xe0(s0)
; atomic_int_ptr_sized! {
802016de: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         let x: Box<_> = Box::new(ArcInner {
802016e2: 03 35 04 fb  	ld	a0, -0x50(s0)
802016e6: 23 3c a4 f2  	sd	a0, -0xc8(s0)
802016ea: 03 35 04 fb  	ld	a0, -0x50(s0)
802016ee: 23 30 a4 f4  	sd	a0, -0xc0(s0)
802016f2: 13 05 84 f4  	addi	a0, s0, -0xb8
802016f6: 13 06 80 06  	li	a2, 0x68
802016fa: 97 00 03 00  	auipc	ra, 0x30
802016fe: e7 80 40 57  	jalr	0x574(ra) <memcpy>
80201702: 13 05 80 07  	li	a0, 0x78
80201706: 23 3c a4 ee  	sd	a0, -0x108(s0)
8020170a: a1 45        	li	a1, 0x8
;         Box::new(x)
8020170c: 97 90 00 00  	auipc	ra, 0x9
80201710: e7 80 60 37  	jalr	0x376(ra) <_ZN5alloc5alloc15exchange_malloc17h76e02859c15d7752E>
80201714: 03 36 84 ef  	ld	a2, -0x108(s0)
80201718: 23 30 a4 f0  	sd	a0, -0x100(s0)
8020171c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80201720: 93 05 84 f3  	addi	a1, s0, -0xc8
80201724: 97 00 03 00  	auipc	ra, 0x30
80201728: e7 80 a0 54  	jalr	0x54a(ra) <memcpy>
8020172c: 03 35 04 f0  	ld	a0, -0x100(s0)
;         ManuallyDrop { value }
80201730: 23 30 a4 fc  	sd	a0, -0x40(s0)
80201734: 93 05 04 fc  	addi	a1, s0, -0x40
;         let ptr = addr_of_mut!(**b);
80201738: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020173c: 03 35 04 fc  	ld	a0, -0x40(s0)
80201740: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
80201744: 23 30 b4 fe  	sd	a1, -0x20(s0)
80201748: 93 05 84 fc  	addi	a1, s0, -0x38
8020174c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
80201750: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         Self { ptr, phantom: PhantomData, alloc }
80201754: 03 35 84 fb  	ld	a0, -0x48(s0)
80201758: 23 38 a4 f2  	sd	a0, -0xd0(s0)
;     }
8020175c: 03 35 04 f3  	ld	a0, -0xd0(s0)
80201760: b2 60        	ld	ra, 0x108(sp)
80201762: 12 64        	ld	s0, 0x100(sp)
80201764: 51 61        	addi	sp, sp, 0x110
80201766: 82 80        	ret

0000000080201768 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h7aecb6e58b1bcd27E>:
;     pub fn new(data: T) -> Arc<T> {
80201768: 45 71        	addi	sp, sp, -0x1d0
8020176a: 86 e7        	sd	ra, 0x1c8(sp)
8020176c: a2 e3        	sd	s0, 0x1c0(sp)
8020176e: 80 0b        	addi	s0, sp, 0x1d0
80201770: aa 85        	mv	a1, a0
80201772: 05 45        	li	a0, 0x1
; atomic_int_ptr_sized! {
80201774: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
80201778: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
; atomic_int_ptr_sized! {
8020177c: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
80201780: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
; atomic_int_ptr_sized! {
80201784: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         let x: Box<_> = Box::new(ArcInner {
80201788: 03 35 04 fb  	ld	a0, -0x50(s0)
8020178c: 23 3c a4 e6  	sd	a0, -0x188(s0)
80201790: 03 35 04 fb  	ld	a0, -0x50(s0)
80201794: 23 30 a4 e8  	sd	a0, -0x180(s0)
80201798: 13 05 84 e8  	addi	a0, s0, -0x178
8020179c: 13 06 80 12  	li	a2, 0x128
802017a0: 97 00 03 00  	auipc	ra, 0x30
802017a4: e7 80 e0 4c  	jalr	0x4ce(ra) <memcpy>
802017a8: 13 05 80 13  	li	a0, 0x138
802017ac: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
802017b0: a1 45        	li	a1, 0x8
;         Box::new(x)
802017b2: 97 90 00 00  	auipc	ra, 0x9
802017b6: e7 80 00 2d  	jalr	0x2d0(ra) <_ZN5alloc5alloc15exchange_malloc17h76e02859c15d7752E>
802017ba: 03 36 84 e3  	ld	a2, -0x1c8(s0)
802017be: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
802017c2: 23 34 a4 fc  	sd	a0, -0x38(s0)
802017c6: 93 05 84 e7  	addi	a1, s0, -0x188
802017ca: 97 00 03 00  	auipc	ra, 0x30
802017ce: e7 80 40 4a  	jalr	0x4a4(ra) <memcpy>
802017d2: 03 35 04 e4  	ld	a0, -0x1c0(s0)
;         ManuallyDrop { value }
802017d6: 23 30 a4 fc  	sd	a0, -0x40(s0)
802017da: 93 05 04 fc  	addi	a1, s0, -0x40
;         let ptr = addr_of_mut!(**b);
802017de: 23 38 b4 fc  	sd	a1, -0x30(s0)
802017e2: 03 35 04 fc  	ld	a0, -0x40(s0)
802017e6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
802017ea: 23 30 b4 fe  	sd	a1, -0x20(s0)
802017ee: 93 05 84 fc  	addi	a1, s0, -0x38
802017f2: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
802017f6: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         Self { ptr, phantom: PhantomData, alloc }
802017fa: 03 35 84 fb  	ld	a0, -0x48(s0)
802017fe: 23 38 a4 e6  	sd	a0, -0x190(s0)
;     }
80201802: 03 35 04 e7  	ld	a0, -0x190(s0)
80201806: be 60        	ld	ra, 0x1c8(sp)
80201808: 1e 64        	ld	s0, 0x1c0(sp)
8020180a: 79 61        	addi	sp, sp, 0x1d0
8020180c: 82 80        	ret

000000008020180e <_ZN5alloc4sync12Arc$LT$T$GT$3new17hbe1c6aea58d8f200E>:
;     pub fn new(data: T) -> Arc<T> {
8020180e: 31 71        	addi	sp, sp, -0xc0
80201810: 06 fd        	sd	ra, 0xb8(sp)
80201812: 22 f9        	sd	s0, 0xb0(sp)
80201814: 80 01        	addi	s0, sp, 0xc0
80201816: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80201818: 23 30 b4 f4  	sd	a1, -0xc0(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
8020181c: 23 34 b4 f4  	sd	a1, -0xb8(s0)
; atomic_int_ptr_sized! {
80201820: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
80201824: 23 3c b4 f4  	sd	a1, -0xa8(s0)
; atomic_int_ptr_sized! {
80201828: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         let x: Box<_> = Box::new(ArcInner {
8020182c: 83 35 04 fb  	ld	a1, -0x50(s0)
80201830: 23 38 b4 f6  	sd	a1, -0x90(s0)
80201834: 83 35 04 fb  	ld	a1, -0x50(s0)
80201838: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020183c: 0c 75        	ld	a1, 0x28(a0)
8020183e: 23 34 b4 fa  	sd	a1, -0x58(s0)
80201842: 0c 71        	ld	a1, 0x20(a0)
80201844: 23 30 b4 fa  	sd	a1, -0x60(s0)
80201848: 0c 6d        	ld	a1, 0x18(a0)
8020184a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020184e: 0c 69        	ld	a1, 0x10(a0)
80201850: 23 38 b4 f8  	sd	a1, -0x70(s0)
80201854: 0c 65        	ld	a1, 0x8(a0)
80201856: 23 34 b4 f8  	sd	a1, -0x78(s0)
8020185a: 08 61        	ld	a0, 0x0(a0)
8020185c: 23 30 a4 f8  	sd	a0, -0x80(s0)
80201860: 13 05 00 04  	li	a0, 0x40
80201864: a1 45        	li	a1, 0x8
;         Box::new(x)
80201866: 97 90 00 00  	auipc	ra, 0x9
8020186a: e7 80 c0 21  	jalr	0x21c(ra) <_ZN5alloc5alloc15exchange_malloc17h76e02859c15d7752E>
8020186e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80201872: 83 35 84 fa  	ld	a1, -0x58(s0)
80201876: 0c fd        	sd	a1, 0x38(a0)
80201878: 83 35 04 fa  	ld	a1, -0x60(s0)
8020187c: 0c f9        	sd	a1, 0x30(a0)
8020187e: 83 35 84 f9  	ld	a1, -0x68(s0)
80201882: 0c f5        	sd	a1, 0x28(a0)
80201884: 83 35 04 f9  	ld	a1, -0x70(s0)
80201888: 0c f1        	sd	a1, 0x20(a0)
8020188a: 83 35 84 f8  	ld	a1, -0x78(s0)
8020188e: 0c ed        	sd	a1, 0x18(a0)
80201890: 83 35 04 f8  	ld	a1, -0x80(s0)
80201894: 0c e9        	sd	a1, 0x10(a0)
80201896: 83 35 84 f7  	ld	a1, -0x88(s0)
8020189a: 0c e5        	sd	a1, 0x8(a0)
8020189c: 83 35 04 f7  	ld	a1, -0x90(s0)
802018a0: 0c e1        	sd	a1, 0x0(a0)
;         ManuallyDrop { value }
802018a2: 23 30 a4 fc  	sd	a0, -0x40(s0)
802018a6: 93 05 04 fc  	addi	a1, s0, -0x40
;         let ptr = addr_of_mut!(**b);
802018aa: 23 38 b4 fc  	sd	a1, -0x30(s0)
802018ae: 03 35 04 fc  	ld	a0, -0x40(s0)
802018b2: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
802018b6: 23 30 b4 fe  	sd	a1, -0x20(s0)
802018ba: 93 05 84 fc  	addi	a1, s0, -0x38
802018be: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
802018c2: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         Self { ptr, phantom: PhantomData, alloc }
802018c6: 03 35 84 fb  	ld	a0, -0x48(s0)
802018ca: 23 34 a4 f6  	sd	a0, -0x98(s0)
;     }
802018ce: 03 35 84 f6  	ld	a0, -0x98(s0)
802018d2: ea 70        	ld	ra, 0xb8(sp)
802018d4: 4a 74        	ld	s0, 0xb0(sp)
802018d6: 29 61        	addi	sp, sp, 0xc0
802018d8: 82 80        	ret

00000000802018da <_ZN5alloc4sync12Arc$LT$T$GT$3new17hcdd603da9a0c627dE>:
;     pub fn new(data: T) -> Arc<T> {
802018da: 35 71        	addi	sp, sp, -0xa0
802018dc: 06 ed        	sd	ra, 0x98(sp)
802018de: 22 e9        	sd	s0, 0x90(sp)
802018e0: 00 11        	addi	s0, sp, 0xa0
802018e2: 05 45        	li	a0, 0x1
; atomic_int_ptr_sized! {
802018e4: 23 34 a4 f6  	sd	a0, -0x98(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
802018e8: 23 38 a4 f6  	sd	a0, -0x90(s0)
; atomic_int_ptr_sized! {
802018ec: 23 3c a4 f6  	sd	a0, -0x88(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
802018f0: 23 30 a4 f8  	sd	a0, -0x80(s0)
; atomic_int_ptr_sized! {
802018f4: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         let x: Box<_> = Box::new(ArcInner {
802018f8: 03 35 84 fa  	ld	a0, -0x58(s0)
802018fc: 23 3c a4 f8  	sd	a0, -0x68(s0)
80201900: 03 35 84 fa  	ld	a0, -0x58(s0)
80201904: 23 30 a4 fa  	sd	a0, -0x60(s0)
80201908: 41 45        	li	a0, 0x10
8020190a: a1 45        	li	a1, 0x8
;         Box::new(x)
8020190c: 97 90 00 00  	auipc	ra, 0x9
80201910: e7 80 60 17  	jalr	0x176(ra) <_ZN5alloc5alloc15exchange_malloc17h76e02859c15d7752E>
80201914: 23 34 a4 fc  	sd	a0, -0x38(s0)
80201918: 83 35 04 fa  	ld	a1, -0x60(s0)
8020191c: 0c e5        	sd	a1, 0x8(a0)
8020191e: 83 35 84 f9  	ld	a1, -0x68(s0)
80201922: 0c e1        	sd	a1, 0x0(a0)
;         ManuallyDrop { value }
80201924: 23 3c a4 fa  	sd	a0, -0x48(s0)
80201928: 93 05 84 fb  	addi	a1, s0, -0x48
;         let ptr = addr_of_mut!(**b);
8020192c: 23 38 b4 fc  	sd	a1, -0x30(s0)
80201930: 03 35 84 fb  	ld	a0, -0x48(s0)
80201934: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
80201938: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020193c: 93 05 04 fc  	addi	a1, s0, -0x40
80201940: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
80201944: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         Self { ptr, phantom: PhantomData, alloc }
80201948: 03 35 04 fb  	ld	a0, -0x50(s0)
8020194c: 23 38 a4 f8  	sd	a0, -0x70(s0)
;     }
80201950: 03 35 04 f9  	ld	a0, -0x70(s0)
80201954: ea 60        	ld	ra, 0x98(sp)
80201956: 4a 64        	ld	s0, 0x90(sp)
80201958: 0d 61        	addi	sp, sp, 0xa0
8020195a: 82 80        	ret

000000008020195c <_ZN5alloc4sync12Arc$LT$T$GT$3new17hf78455762a164cd5E>:
;     pub fn new(data: T) -> Arc<T> {
8020195c: 35 71        	addi	sp, sp, -0xa0
8020195e: 06 ed        	sd	ra, 0x98(sp)
80201960: 22 e9        	sd	s0, 0x90(sp)
80201962: 00 11        	addi	s0, sp, 0xa0
80201964: 05 45        	li	a0, 0x1
; atomic_int_ptr_sized! {
80201966: 23 34 a4 f6  	sd	a0, -0x98(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
8020196a: 23 38 a4 f6  	sd	a0, -0x90(s0)
; atomic_int_ptr_sized! {
8020196e: 23 3c a4 f6  	sd	a0, -0x88(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
80201972: 23 30 a4 f8  	sd	a0, -0x80(s0)
; atomic_int_ptr_sized! {
80201976: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         let x: Box<_> = Box::new(ArcInner {
8020197a: 03 35 84 fa  	ld	a0, -0x58(s0)
8020197e: 23 3c a4 f8  	sd	a0, -0x68(s0)
80201982: 03 35 84 fa  	ld	a0, -0x58(s0)
80201986: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020198a: 41 45        	li	a0, 0x10
8020198c: a1 45        	li	a1, 0x8
;         Box::new(x)
8020198e: 97 90 00 00  	auipc	ra, 0x9
80201992: e7 80 40 0f  	jalr	0xf4(ra) <_ZN5alloc5alloc15exchange_malloc17h76e02859c15d7752E>
80201996: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020199a: 83 35 04 fa  	ld	a1, -0x60(s0)
8020199e: 0c e5        	sd	a1, 0x8(a0)
802019a0: 83 35 84 f9  	ld	a1, -0x68(s0)
802019a4: 0c e1        	sd	a1, 0x0(a0)
;         ManuallyDrop { value }
802019a6: 23 3c a4 fa  	sd	a0, -0x48(s0)
802019aa: 93 05 84 fb  	addi	a1, s0, -0x48
;         let ptr = addr_of_mut!(**b);
802019ae: 23 38 b4 fc  	sd	a1, -0x30(s0)
802019b2: 03 35 84 fb  	ld	a0, -0x48(s0)
802019b6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
802019ba: 23 30 b4 fe  	sd	a1, -0x20(s0)
802019be: 93 05 04 fc  	addi	a1, s0, -0x40
802019c2: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
802019c6: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         Self { ptr, phantom: PhantomData, alloc }
802019ca: 03 35 04 fb  	ld	a0, -0x50(s0)
802019ce: 23 38 a4 f8  	sd	a0, -0x70(s0)
;     }
802019d2: 03 35 04 f9  	ld	a0, -0x70(s0)
802019d6: ea 60        	ld	ra, 0x98(sp)
802019d8: 4a 64        	ld	s0, 0x90(sp)
802019da: 0d 61        	addi	sp, sp, 0xa0
802019dc: 82 80        	ret

00000000802019de <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9downgrade17h417011dc5b527d1aE>:
;     pub fn downgrade(this: &Self) -> Weak<T, A>
802019de: 15 71        	addi	sp, sp, -0xe0
802019e0: 86 ed        	sd	ra, 0xd8(sp)
802019e2: a2 e9        	sd	s0, 0xd0(sp)
802019e4: 80 11        	addi	s0, sp, 0xe0
802019e6: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802019ea: 81 45        	li	a1, 0x0
; atomic_int_ptr_sized! {
802019ec: 23 0a b4 f2  	sb	a1, -0xcc(s0)
802019f0: a3 0a b4 f2  	sb	a1, -0xcb(s0)
802019f4: 09 46        	li	a2, 0x2
802019f6: 23 0b c4 f2  	sb	a2, -0xca(s0)
802019fa: a3 0b b4 f2  	sb	a1, -0xc9(s0)
802019fe: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;         unsafe { self.ptr.as_ref() }
80201a02: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80201a06: 08 61        	ld	a0, 0x0(a0)
80201a08: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         self.pointer as *mut T
80201a0c: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         let mut cur = this.inner().weak.load(Relaxed);
80201a10: 21 05        	addi	a0, a0, 0x8
80201a12: 23 3c a4 f6  	sd	a0, -0x88(s0)
; atomic_int_ptr_sized! {
80201a16: 23 30 a4 f8  	sd	a0, -0x80(s0)
80201a1a: 97 a0 01 00  	auipc	ra, 0x1a
80201a1e: e7 80 00 3c  	jalr	0x3c0(ra) <_ZN4core4sync6atomic11atomic_load17hb7d1aad711655104E>
80201a22: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;         loop {
80201a26: 09 a0        	j	0x80201a28 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9downgrade17h417011dc5b527d1aE+0x4a>
;             if cur == usize::MAX {
80201a28: 03 35 04 f4  	ld	a0, -0xc0(s0)
80201a2c: fd 55        	li	a1, -0x1
80201a2e: 63 08 b5 00  	beq	a0, a1, 0x80201a3e <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9downgrade17h417011dc5b527d1aE+0x60>
80201a32: 09 a0        	j	0x80201a34 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9downgrade17h417011dc5b527d1aE+0x56>
;             assert!(cur <= MAX_REFCOUNT, "{}", INTERNAL_OVERFLOW_ERROR);
80201a34: 03 35 04 f4  	ld	a0, -0xc0(s0)
80201a38: 63 57 05 04  	bgez	a0, 0x80201a86 <.Lpcrel_hi1+0x10>
80201a3c: 0d a8        	j	0x80201a6e <.Lpcrel_hi0>
80201a3e: 03 35 84 f2  	ld	a0, -0xd8(s0)
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80201a42: 0f 00 00 01  	fence	w, 0
;         unsafe { self.ptr.as_ref() }
80201a46: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80201a4a: 08 61        	ld	a0, 0x0(a0)
80201a4c: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.pointer as *mut T
80201a50: 23 3c a4 fc  	sd	a0, -0x28(s0)
;                 cur = this.inner().weak.load(Relaxed);
80201a54: 21 05        	addi	a0, a0, 0x8
80201a56: 23 30 a4 fe  	sd	a0, -0x20(s0)
; atomic_int_ptr_sized! {
80201a5a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80201a5e: 81 45        	li	a1, 0x0
80201a60: 97 a0 01 00  	auipc	ra, 0x1a
80201a64: e7 80 a0 37  	jalr	0x37a(ra) <_ZN4core4sync6atomic11atomic_load17hb7d1aad711655104E>
;                 cur = this.inner().weak.load(Relaxed);
80201a68: 23 30 a4 f4  	sd	a0, -0xc0(s0)
; #![no_std]
80201a6c: 75 bf        	j	0x80201a28 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9downgrade17h417011dc5b527d1aE+0x4a>

0000000080201a6e <.Lpcrel_hi0>:
;             assert!(cur <= MAX_REFCOUNT, "{}", INTERNAL_OVERFLOW_ERROR);
80201a6e: 17 25 03 00  	auipc	a0, 0x32
80201a72: 13 05 a5 c8  	addi	a0, a0, -0x376

0000000080201a76 <.Lpcrel_hi1>:
80201a76: 97 25 03 00  	auipc	a1, 0x32
80201a7a: 93 85 25 d0  	addi	a1, a1, -0x2fe
80201a7e: 97 00 00 00  	auipc	ra, 0x0
80201a82: e7 80 80 08  	jalr	0x88(ra) <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9downgrade18panic_cold_display17h37c1c75b02934a40E>
80201a86: 03 35 84 f2  	ld	a0, -0xd8(s0)
;         unsafe { self.ptr.as_ref() }
80201a8a: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80201a8e: 08 61        	ld	a0, 0x0(a0)
80201a90: 23 38 a4 f8  	sd	a0, -0x70(s0)
;         self.pointer as *mut T
80201a94: 23 3c a4 f8  	sd	a0, -0x68(s0)
;             match this.inner().weak.compare_exchange_weak(cur, cur + 1, Acquire, Relaxed) {
80201a98: 21 05        	addi	a0, a0, 0x8
80201a9a: 23 30 a4 fa  	sd	a0, -0x60(s0)
80201a9e: 83 35 04 f4  	ld	a1, -0xc0(s0)
80201aa2: 23 34 b4 fa  	sd	a1, -0x58(s0)
80201aa6: 03 36 04 f4  	ld	a2, -0xc0(s0)
80201aaa: 05 06        	addi	a2, a2, 0x1
80201aac: 23 38 c4 fa  	sd	a2, -0x50(s0)
; atomic_int_ptr_sized! {
80201ab0: 23 3c a4 fa  	sd	a0, -0x48(s0)
80201ab4: 89 46        	li	a3, 0x2
80201ab6: 01 47        	li	a4, 0x0
80201ab8: 97 60 01 00  	auipc	ra, 0x16
80201abc: e7 80 60 ed  	jalr	-0x12a(ra) <_ZN4core4sync6atomic28atomic_compare_exchange_weak17head9b4f5068fd6a7E>
80201ac0: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80201ac4: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;             match this.inner().weak.compare_exchange_weak(cur, cur + 1, Acquire, Relaxed) {
80201ac8: 03 35 84 f4  	ld	a0, -0xb8(s0)
80201acc: 15 e5        	bnez	a0, 0x80201af8 <.Lpcrel_hi1+0x82>
80201ace: 09 a0        	j	0x80201ad0 <.Lpcrel_hi1+0x5a>
80201ad0: 03 35 84 f2  	ld	a0, -0xd8(s0)
;                     return Weak { ptr: this.ptr, alloc: this.alloc.clone() };
80201ad4: 0c 61        	ld	a1, 0x0(a0)
80201ad6: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80201ada: 21 05        	addi	a0, a0, 0x8
80201adc: 97 90 00 00  	auipc	ra, 0x9
80201ae0: e7 80 20 f9  	jalr	-0x6e(ra) <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17hffa4ba116d85ff40E>
80201ae4: 03 35 04 f2  	ld	a0, -0xe0(s0)
80201ae8: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;     }
80201aec: 03 35 84 f3  	ld	a0, -0xc8(s0)
80201af0: ee 60        	ld	ra, 0xd8(sp)
80201af2: 4e 64        	ld	s0, 0xd0(sp)
80201af4: 2d 61        	addi	sp, sp, 0xe0
80201af6: 82 80        	ret
;                 Err(old) => cur = old,
80201af8: 03 35 04 f5  	ld	a0, -0xb0(s0)
80201afc: 23 30 a4 fc  	sd	a0, -0x40(s0)
80201b00: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;         loop {
80201b04: 15 b7        	j	0x80201a28 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9downgrade17h417011dc5b527d1aE+0x4a>

0000000080201b06 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9downgrade18panic_cold_display17h37c1c75b02934a40E>:
;         const fn panic_cold_display<T: $crate::fmt::Display>(arg: &T) -> ! {
80201b06: 01 11        	addi	sp, sp, -0x20
80201b08: 06 ec        	sd	ra, 0x18(sp)
80201b0a: 22 e8        	sd	s0, 0x10(sp)
80201b0c: 00 10        	addi	s0, sp, 0x20
80201b0e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             $crate::panicking::panic_display(arg)
80201b12: 97 40 01 00  	auipc	ra, 0x14
80201b16: e7 80 60 a8  	jalr	-0x57a(ra) <_ZN4core9panicking13panic_display17h2fe3cf8b43f2b915E>

0000000080201b1a <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17h067da7ced3f3155cE>:
;     unsafe fn drop_slow(&mut self) {
80201b1a: 39 71        	addi	sp, sp, -0x40
80201b1c: 06 fc        	sd	ra, 0x38(sp)
80201b1e: 22 f8        	sd	s0, 0x30(sp)
80201b20: 80 00        	addi	s0, sp, 0x40
80201b22: 23 34 a4 fc  	sd	a0, -0x38(s0)
80201b26: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut (*this.ptr.as_ptr()).data }
80201b2a: 08 61        	ld	a0, 0x0(a0)
80201b2c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
80201b30: 41 05        	addi	a0, a0, 0x10
80201b32: 97 60 00 00  	auipc	ra, 0x6
80201b36: e7 80 40 7e  	jalr	0x7e4(ra) <_ZN4core3ptr75drop_in_place$LT$spin..mutex..Mutex$LT$easy_fs..efs..EasyFileSystem$GT$$GT$17h1581f0e730be0456E>
80201b3a: 03 35 84 fc  	ld	a0, -0x38(s0)
;         drop(Weak { ptr: self.ptr, alloc: &self.alloc });
80201b3e: 0c 61        	ld	a1, 0x0(a0)
80201b40: 21 05        	addi	a0, a0, 0x8
80201b42: 23 38 b4 fc  	sd	a1, -0x30(s0)
80201b46: 23 3c a4 fc  	sd	a0, -0x28(s0)
80201b4a: 13 05 04 fd  	addi	a0, s0, -0x30
; pub fn drop<T>(_x: T) {}
80201b4e: 97 60 00 00  	auipc	ra, 0x6
80201b52: e7 80 60 fc  	jalr	-0x3a(ra) <_ZN4core3ptr127drop_in_place$LT$alloc..sync..Weak$LT$spin..mutex..Mutex$LT$easy_fs..efs..EasyFileSystem$GT$$C$$RF$alloc..alloc..Global$GT$$GT$17h69484c8ca23378f4E>
80201b56: e2 70        	ld	ra, 0x38(sp)
80201b58: 42 74        	ld	s0, 0x30(sp)
;     }
80201b5a: 21 61        	addi	sp, sp, 0x40
80201b5c: 82 80        	ret

0000000080201b5e <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17h3b723827c30c2c35E>:
;     unsafe fn drop_slow(&mut self) {
80201b5e: 39 71        	addi	sp, sp, -0x40
80201b60: 06 fc        	sd	ra, 0x38(sp)
80201b62: 22 f8        	sd	s0, 0x30(sp)
80201b64: 80 00        	addi	s0, sp, 0x40
80201b66: 23 34 a4 fc  	sd	a0, -0x38(s0)
80201b6a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut (*this.ptr.as_ptr()).data }
80201b6e: 08 61        	ld	a0, 0x0(a0)
80201b70: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
80201b74: 41 05        	addi	a0, a0, 0x10
80201b76: 97 60 00 00  	auipc	ra, 0x6
80201b7a: e7 80 20 50  	jalr	0x502(ra) <_ZN4core3ptr53drop_in_place$LT$os..task..task..TaskControlBlock$GT$17h729112982d5b241eE>
80201b7e: 03 35 84 fc  	ld	a0, -0x38(s0)
;         drop(Weak { ptr: self.ptr, alloc: &self.alloc });
80201b82: 0c 61        	ld	a1, 0x0(a0)
80201b84: 21 05        	addi	a0, a0, 0x8
80201b86: 23 38 b4 fc  	sd	a1, -0x30(s0)
80201b8a: 23 3c a4 fc  	sd	a0, -0x28(s0)
80201b8e: 13 05 04 fd  	addi	a0, s0, -0x30
; pub fn drop<T>(_x: T) {}
80201b92: 97 60 00 00  	auipc	ra, 0x6
80201b96: e7 80 c0 db  	jalr	-0x244(ra) <_ZN4core3ptr105drop_in_place$LT$alloc..sync..Weak$LT$os..task..task..TaskControlBlock$C$$RF$alloc..alloc..Global$GT$$GT$17h4ba24f9bed30384eE>
80201b9a: e2 70        	ld	ra, 0x38(sp)
80201b9c: 42 74        	ld	s0, 0x30(sp)
;     }
80201b9e: 21 61        	addi	sp, sp, 0x40
80201ba0: 82 80        	ret

0000000080201ba2 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17h4e229a7818ac9b80E>:
;     unsafe fn drop_slow(&mut self) {
80201ba2: 5d 71        	addi	sp, sp, -0x50
80201ba4: 86 e4        	sd	ra, 0x48(sp)
80201ba6: a2 e0        	sd	s0, 0x40(sp)
80201ba8: 80 08        	addi	s0, sp, 0x50
80201baa: 23 3c a4 fa  	sd	a0, -0x48(s0)
80201bae: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &mut (*this.ptr.as_ptr()).data }
80201bb2: 10 61        	ld	a2, 0x0(a0)
80201bb4: 0c 65        	ld	a1, 0x8(a0)
80201bb6: 23 30 c4 fe  	sd	a2, -0x20(s0)
80201bba: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
80201bbe: 88 69        	ld	a0, 0x10(a1)
80201bc0: 7d 15        	addi	a0, a0, -0x1
80201bc2: 41 99        	andi	a0, a0, -0x10
80201bc4: 32 95        	add	a0, a0, a2
80201bc6: 41 05        	addi	a0, a0, 0x10
80201bc8: 97 70 00 00  	auipc	ra, 0x7
80201bcc: e7 80 a0 ad  	jalr	-0x526(ra) <_ZN4core3ptr95drop_in_place$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$17hea124166eb3fde95E>
80201bd0: 03 35 84 fb  	ld	a0, -0x48(s0)
;         drop(Weak { ptr: self.ptr, alloc: &self.alloc });
80201bd4: 10 61        	ld	a2, 0x0(a0)
80201bd6: 0c 65        	ld	a1, 0x8(a0)
80201bd8: 41 05        	addi	a0, a0, 0x10
80201bda: 23 30 c4 fc  	sd	a2, -0x40(s0)
80201bde: 23 34 b4 fc  	sd	a1, -0x38(s0)
80201be2: 23 38 a4 fc  	sd	a0, -0x30(s0)
80201be6: 13 05 04 fc  	addi	a0, s0, -0x40
; pub fn drop<T>(_x: T) {}
80201bea: 97 60 00 00  	auipc	ra, 0x6
80201bee: e7 80 20 f7  	jalr	-0x8e(ra) <_ZN4core3ptr147drop_in_place$LT$alloc..sync..Weak$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$C$$RF$alloc..alloc..Global$GT$$GT$17h5c6378ac321e71b8E>
80201bf2: a6 60        	ld	ra, 0x48(sp)
80201bf4: 06 64        	ld	s0, 0x40(sp)
;     }
80201bf6: 61 61        	addi	sp, sp, 0x50
80201bf8: 82 80        	ret

0000000080201bfa <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17hd5c3ea317059b8b9E>:
;     unsafe fn drop_slow(&mut self) {
80201bfa: 39 71        	addi	sp, sp, -0x40
80201bfc: 06 fc        	sd	ra, 0x38(sp)
80201bfe: 22 f8        	sd	s0, 0x30(sp)
80201c00: 80 00        	addi	s0, sp, 0x40
80201c02: 23 34 a4 fc  	sd	a0, -0x38(s0)
80201c06: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut (*this.ptr.as_ptr()).data }
80201c0a: 08 61        	ld	a0, 0x0(a0)
80201c0c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
80201c10: 41 05        	addi	a0, a0, 0x10
80201c12: 97 60 00 00  	auipc	ra, 0x6
80201c16: e7 80 80 12  	jalr	0x128(ra) <_ZN4core3ptr40drop_in_place$LT$easy_fs..vfs..Inode$GT$17he803c156303cc8b9E>
80201c1a: 03 35 84 fc  	ld	a0, -0x38(s0)
;         drop(Weak { ptr: self.ptr, alloc: &self.alloc });
80201c1e: 0c 61        	ld	a1, 0x0(a0)
80201c20: 21 05        	addi	a0, a0, 0x8
80201c22: 23 38 b4 fc  	sd	a1, -0x30(s0)
80201c26: 23 3c a4 fc  	sd	a0, -0x28(s0)
80201c2a: 13 05 04 fd  	addi	a0, s0, -0x30
; pub fn drop<T>(_x: T) {}
80201c2e: 97 70 00 00  	auipc	ra, 0x7
80201c32: e7 80 c0 a2  	jalr	-0x5d4(ra) <_ZN4core3ptr92drop_in_place$LT$alloc..sync..Weak$LT$easy_fs..vfs..Inode$C$$RF$alloc..alloc..Global$GT$$GT$17hb779da9d957944a4E>
80201c36: e2 70        	ld	ra, 0x38(sp)
80201c38: 42 74        	ld	s0, 0x30(sp)
;     }
80201c3a: 21 61        	addi	sp, sp, 0x40
80201c3c: 82 80        	ret

0000000080201c3e <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17he97f1b8a3e0203deE>:
;     unsafe fn drop_slow(&mut self) {
80201c3e: 39 71        	addi	sp, sp, -0x40
80201c40: 06 fc        	sd	ra, 0x38(sp)
80201c42: 22 f8        	sd	s0, 0x30(sp)
80201c44: 80 00        	addi	s0, sp, 0x40
80201c46: 23 34 a4 fc  	sd	a0, -0x38(s0)
80201c4a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut (*this.ptr.as_ptr()).data }
80201c4e: 08 61        	ld	a0, 0x0(a0)
80201c50: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
80201c54: 41 05        	addi	a0, a0, 0x10
80201c56: 97 60 00 00  	auipc	ra, 0x6
80201c5a: e7 80 c0 31  	jalr	0x31c(ra) <_ZN4core3ptr51drop_in_place$LT$os..filesystem..inode..OSinode$GT$17h6996aa2ce5a9f428E>
80201c5e: 03 35 84 fc  	ld	a0, -0x38(s0)
;         drop(Weak { ptr: self.ptr, alloc: &self.alloc });
80201c62: 0c 61        	ld	a1, 0x0(a0)
80201c64: 21 05        	addi	a0, a0, 0x8
80201c66: 23 38 b4 fc  	sd	a1, -0x30(s0)
80201c6a: 23 3c a4 fc  	sd	a0, -0x28(s0)
80201c6e: 13 05 04 fd  	addi	a0, s0, -0x30
; pub fn drop<T>(_x: T) {}
80201c72: 97 60 00 00  	auipc	ra, 0x6
80201c76: e7 80 00 cc  	jalr	-0x340(ra) <_ZN4core3ptr103drop_in_place$LT$alloc..sync..Weak$LT$os..filesystem..inode..OSinode$C$$RF$alloc..alloc..Global$GT$$GT$17h3977a806c02ba95cE>
80201c7a: e2 70        	ld	ra, 0x38(sp)
80201c7c: 42 74        	ld	s0, 0x30(sp)
;     }
80201c7e: 21 61        	addi	sp, sp, 0x40
80201c80: 82 80        	ret

0000000080201c82 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h67061bdd3b9c07ddE>:
;     fn clone(&self) -> Arc<T, A> {
80201c82: 55 71        	addi	sp, sp, -0xd0
80201c84: 86 e5        	sd	ra, 0xc8(sp)
80201c86: a2 e1        	sd	s0, 0xc0(sp)
80201c88: 80 09        	addi	s0, sp, 0xd0
80201c8a: 2a 86        	mv	a2, a0
80201c8c: 23 34 c4 f4  	sd	a2, -0xb8(s0)
80201c90: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80201c92: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80201c96: 01 45        	li	a0, 0x0
80201c98: a3 0f a4 f4  	sb	a0, -0xa1(s0)
; unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
80201c9c: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80201ca0: a3 07 a4 f6  	sb	a0, -0x91(s0)
80201ca4: 23 30 c4 f8  	sd	a2, -0x80(s0)
;         unsafe { self.ptr.as_ref() }
80201ca8: 23 38 c4 f8  	sd	a2, -0x70(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80201cac: 08 62        	ld	a0, 0x0(a2)
80201cae: 10 66        	ld	a2, 0x8(a2)
80201cb0: 23 3c a4 f8  	sd	a0, -0x68(s0)
80201cb4: 23 30 c4 fa  	sd	a2, -0x60(s0)
;         self.pointer as *mut T
80201cb8: 23 34 a4 fa  	sd	a0, -0x58(s0)
80201cbc: 23 38 c4 fa  	sd	a2, -0x50(s0)
;         let old_size = self.inner().strong.fetch_add(1, Relaxed);
80201cc0: 23 3c a4 fa  	sd	a0, -0x48(s0)
; atomic_int_ptr_sized! {
80201cc4: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80201cc8: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
80201ccc: 2f 35 b5 00  	amoadd.d	a0, a1, (a0)
80201cd0: 23 38 a4 fc  	sd	a0, -0x30(s0)
80201cd4: 03 35 04 fd  	ld	a0, -0x30(s0)
80201cd8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if old_size > MAX_REFCOUNT {
80201cdc: 63 44 05 04  	bltz	a0, 0x80201d24 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h67061bdd3b9c07ddE+0xa2>
80201ce0: 09 a0        	j	0x80201ce2 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h67061bdd3b9c07ddE+0x60>
80201ce2: 03 35 84 f4  	ld	a0, -0xb8(s0)
;         unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
80201ce6: 10 61        	ld	a2, 0x0(a0)
80201ce8: 23 3c c4 f2  	sd	a2, -0xc8(s0)
80201cec: 0c 65        	ld	a1, 0x8(a0)
80201cee: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80201cf2: 23 30 c4 fe  	sd	a2, -0x20(s0)
80201cf6: 23 34 b4 fe  	sd	a1, -0x18(s0)
80201cfa: 41 05        	addi	a0, a0, 0x10
80201cfc: 97 90 00 00  	auipc	ra, 0x9
80201d00: e7 80 20 d7  	jalr	-0x28e(ra) <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17hffa4ba116d85ff40E>
80201d04: 83 35 84 f3  	ld	a1, -0xc8(s0)
80201d08: 03 35 04 f4  	ld	a0, -0xc0(s0)
;         Self { ptr, phantom: PhantomData, alloc }
80201d0c: 23 38 b4 f6  	sd	a1, -0x90(s0)
80201d10: 23 3c a4 f6  	sd	a0, -0x88(s0)
;     }
80201d14: 03 35 04 f7  	ld	a0, -0x90(s0)
80201d18: 83 35 84 f7  	ld	a1, -0x88(s0)
80201d1c: ae 60        	ld	ra, 0xc8(sp)
80201d1e: 0e 64        	ld	s0, 0xc0(sp)
80201d20: 69 61        	addi	sp, sp, 0xd0
80201d22: 82 80        	ret
;             abort();
80201d24: 00 00        	unimp

0000000080201d26 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd395b9ff55cfe717E>:
;     fn clone(&self) -> Arc<T, A> {
80201d26: 35 71        	addi	sp, sp, -0xa0
80201d28: 06 ed        	sd	ra, 0x98(sp)
80201d2a: 22 e9        	sd	s0, 0x90(sp)
80201d2c: 00 11        	addi	s0, sp, 0xa0
80201d2e: 23 34 a4 f6  	sd	a0, -0x98(s0)
80201d32: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80201d34: 23 38 b4 f6  	sd	a1, -0x90(s0)
80201d38: 01 46        	li	a2, 0x0
80201d3a: a3 0f c4 f6  	sb	a2, -0x81(s0)
; unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
80201d3e: 23 30 b4 f8  	sd	a1, -0x80(s0)
80201d42: a3 07 c4 f8  	sb	a2, -0x71(s0)
80201d46: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         unsafe { self.ptr.as_ref() }
80201d4a: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80201d4e: 08 61        	ld	a0, 0x0(a0)
80201d50: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.pointer as *mut T
80201d54: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         let old_size = self.inner().strong.fetch_add(1, Relaxed);
80201d58: 23 30 a4 fc  	sd	a0, -0x40(s0)
; atomic_int_ptr_sized! {
80201d5c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80201d60: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
80201d64: 2f 35 b5 00  	amoadd.d	a0, a1, (a0)
80201d68: 23 3c a4 fc  	sd	a0, -0x28(s0)
80201d6c: 03 35 84 fd  	ld	a0, -0x28(s0)
80201d70: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if old_size > MAX_REFCOUNT {
80201d74: 63 49 05 02  	bltz	a0, 0x80201da6 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd395b9ff55cfe717E+0x80>
80201d78: 09 a0        	j	0x80201d7a <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd395b9ff55cfe717E+0x54>
80201d7a: 03 35 84 f6  	ld	a0, -0x98(s0)
;         unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
80201d7e: 0c 61        	ld	a1, 0x0(a0)
80201d80: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80201d84: 23 34 b4 fe  	sd	a1, -0x18(s0)
80201d88: 21 05        	addi	a0, a0, 0x8
80201d8a: 97 90 00 00  	auipc	ra, 0x9
80201d8e: e7 80 40 ce  	jalr	-0x31c(ra) <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17hffa4ba116d85ff40E>
80201d92: 03 35 04 f6  	ld	a0, -0xa0(s0)
;         Self { ptr, phantom: PhantomData, alloc }
80201d96: 23 38 a4 f8  	sd	a0, -0x70(s0)
;     }
80201d9a: 03 35 04 f9  	ld	a0, -0x70(s0)
80201d9e: ea 60        	ld	ra, 0x98(sp)
80201da0: 4a 64        	ld	s0, 0x90(sp)
80201da2: 0d 61        	addi	sp, sp, 0xa0
80201da4: 82 80        	ret
;             abort();
80201da6: 00 00        	unimp

0000000080201da8 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0a243baf827895cbE>:
;     fn deref(&self) -> &T {
80201da8: 79 71        	addi	sp, sp, -0x30
80201daa: 06 f4        	sd	ra, 0x28(sp)
80201dac: 22 f0        	sd	s0, 0x20(sp)
80201dae: 00 18        	addi	s0, sp, 0x30
80201db0: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { self.ptr.as_ref() }
80201db4: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80201db8: 08 61        	ld	a0, 0x0(a0)
80201dba: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
80201dbe: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &self.inner().data
80201dc2: 41 05        	addi	a0, a0, 0x10
80201dc4: a2 70        	ld	ra, 0x28(sp)
80201dc6: 02 74        	ld	s0, 0x20(sp)
;     }
80201dc8: 45 61        	addi	sp, sp, 0x30
80201dca: 82 80        	ret

0000000080201dcc <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1213f9340614bd15E>:
;     fn deref(&self) -> &T {
80201dcc: 79 71        	addi	sp, sp, -0x30
80201dce: 06 f4        	sd	ra, 0x28(sp)
80201dd0: 22 f0        	sd	s0, 0x20(sp)
80201dd2: 00 18        	addi	s0, sp, 0x30
80201dd4: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { self.ptr.as_ref() }
80201dd8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80201ddc: 08 61        	ld	a0, 0x0(a0)
80201dde: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
80201de2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &self.inner().data
80201de6: 41 05        	addi	a0, a0, 0x10
80201de8: a2 70        	ld	ra, 0x28(sp)
80201dea: 02 74        	ld	s0, 0x20(sp)
;     }
80201dec: 45 61        	addi	sp, sp, 0x30
80201dee: 82 80        	ret

0000000080201df0 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7fdf4914b7d04fb3E>:
;     fn deref(&self) -> &T {
80201df0: 39 71        	addi	sp, sp, -0x40
80201df2: 06 fc        	sd	ra, 0x38(sp)
80201df4: 22 f8        	sd	s0, 0x30(sp)
80201df6: 80 00        	addi	s0, sp, 0x40
80201df8: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         unsafe { self.ptr.as_ref() }
80201dfc: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80201e00: 10 61        	ld	a2, 0x0(a0)
80201e02: 0c 65        	ld	a1, 0x8(a0)
80201e04: 23 38 c4 fc  	sd	a2, -0x30(s0)
80201e08: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         self.pointer as *mut T
80201e0c: 23 30 c4 fe  	sd	a2, -0x20(s0)
80201e10: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         &self.inner().data
80201e14: 88 69        	ld	a0, 0x10(a1)
80201e16: 7d 15        	addi	a0, a0, -0x1
80201e18: 41 99        	andi	a0, a0, -0x10
80201e1a: 32 95        	add	a0, a0, a2
80201e1c: 41 05        	addi	a0, a0, 0x10
80201e1e: e2 70        	ld	ra, 0x38(sp)
80201e20: 42 74        	ld	s0, 0x30(sp)
;     }
80201e22: 21 61        	addi	sp, sp, 0x40
80201e24: 82 80        	ret

0000000080201e26 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hba73a899464bd59dE>:
;     fn deref(&self) -> &T {
80201e26: 79 71        	addi	sp, sp, -0x30
80201e28: 06 f4        	sd	ra, 0x28(sp)
80201e2a: 22 f0        	sd	s0, 0x20(sp)
80201e2c: 00 18        	addi	s0, sp, 0x30
80201e2e: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { self.ptr.as_ref() }
80201e32: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80201e36: 08 61        	ld	a0, 0x0(a0)
80201e38: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
80201e3c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &self.inner().data
80201e40: 41 05        	addi	a0, a0, 0x10
80201e42: a2 70        	ld	ra, 0x28(sp)
80201e44: 02 74        	ld	s0, 0x20(sp)
;     }
80201e46: 45 61        	addi	sp, sp, 0x30
80201e48: 82 80        	ret

0000000080201e4a <_ZN2os10filesystem5inode9judg_read17he84fe7cd97b3c657E>:
; fn judg_read (perm:usize) -> bool{
80201e4a: 01 11        	addi	sp, sp, -0x20
80201e4c: 06 ec        	sd	ra, 0x18(sp)
80201e4e: 22 e8        	sd	s0, 0x10(sp)
80201e50: 00 10        	addi	s0, sp, 0x20
80201e52: 23 34 a4 fe  	sd	a0, -0x18(s0)
80201e56: 01 45        	li	a0, 0x0
80201e58: e2 60        	ld	ra, 0x18(sp)
80201e5a: 42 64        	ld	s0, 0x10(sp)
; }
80201e5c: 05 61        	addi	sp, sp, 0x20
80201e5e: 82 80        	ret

0000000080201e60 <_ZN2os10filesystem5inode10judg_trunc17h9bd3fadb325c23caE>:
; fn judg_trunc (perm:usize) -> bool{
80201e60: 01 11        	addi	sp, sp, -0x20
80201e62: 06 ec        	sd	ra, 0x18(sp)
80201e64: 22 e8        	sd	s0, 0x10(sp)
80201e66: 00 10        	addi	s0, sp, 0x20
80201e68: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     perm & TRUNC == 1 
80201e6c: 13 75 05 40  	andi	a0, a0, 0x400
80201e70: 7d 15        	addi	a0, a0, -0x1
80201e72: 13 35 15 00  	seqz	a0, a0
80201e76: e2 60        	ld	ra, 0x18(sp)
80201e78: 42 64        	ld	s0, 0x10(sp)
; }
80201e7a: 05 61        	addi	sp, sp, 0x20
80201e7c: 82 80        	ret

0000000080201e7e <_ZN2os10filesystem5inode10judg_write17hd175e6dbfb4d774cE>:
; fn judg_write (perm:usize) -> bool{
80201e7e: 01 11        	addi	sp, sp, -0x20
80201e80: 06 ec        	sd	ra, 0x18(sp)
80201e82: 22 e8        	sd	s0, 0x10(sp)
80201e84: 00 10        	addi	s0, sp, 0x20
80201e86: 23 34 a4 fe  	sd	a0, -0x18(s0)
; }
80201e8a: 05 89        	andi	a0, a0, 0x1
80201e8c: e2 60        	ld	ra, 0x18(sp)
80201e8e: 42 64        	ld	s0, 0x10(sp)
80201e90: 05 61        	addi	sp, sp, 0x20
80201e92: 82 80        	ret

0000000080201e94 <_ZN2os10filesystem5inode11judg_create17hdb6562b74f4c3186E>:
; fn judg_create (perm:usize) -> bool{
80201e94: 01 11        	addi	sp, sp, -0x20
80201e96: 06 ec        	sd	ra, 0x18(sp)
80201e98: 22 e8        	sd	s0, 0x10(sp)
80201e9a: 00 10        	addi	s0, sp, 0x20
80201e9c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     perm & CREATE == 1 
80201ea0: 13 75 05 20  	andi	a0, a0, 0x200
80201ea4: 7d 15        	addi	a0, a0, -0x1
80201ea6: 13 35 15 00  	seqz	a0, a0
80201eaa: e2 60        	ld	ra, 0x18(sp)
80201eac: 42 64        	ld	s0, 0x10(sp)
; }
80201eae: 05 61        	addi	sp, sp, 0x20
80201eb0: 82 80        	ret

0000000080201eb2 <_ZN2os10filesystem5inode7OSinode3new17h05ff73943e240f0dE>:
;     pub fn new(readable:bool,writable:bool,inode:Arc<Inode>) -> Self{
80201eb2: 59 71        	addi	sp, sp, -0x70
80201eb4: 86 f4        	sd	ra, 0x68(sp)
80201eb6: a2 f0        	sd	s0, 0x60(sp)
80201eb8: 80 18        	addi	s0, sp, 0x70
80201eba: 23 3c c4 f8  	sd	a2, -0x68(s0)
80201ebe: 23 38 b4 f8  	sd	a1, -0x70(s0)
80201ec2: 23 30 a4 fa  	sd	a0, -0x60(s0)
80201ec6: 23 03 b4 fe  	sb	a1, -0x1a(s0)
80201eca: a3 03 c4 fe  	sb	a2, -0x19(s0)
80201ece: 23 34 d4 fe  	sd	a3, -0x18(s0)
80201ed2: 01 45        	li	a0, 0x0
;                 Spin::new(RLinode {offset:0, inode},"inode")
80201ed4: 23 3c a4 fc  	sd	a0, -0x28(s0)
80201ed8: 23 38 d4 fc  	sd	a3, -0x30(s0)
80201edc: 83 35 04 fd  	ld	a1, -0x30(s0)
80201ee0: 03 36 84 fd  	ld	a2, -0x28(s0)

0000000080201ee4 <.Lpcrel_hi0>:
80201ee4: 17 25 03 00  	auipc	a0, 0x32
80201ee8: 93 06 c5 8a  	addi	a3, a0, -0x754
80201eec: 13 05 84 fa  	addi	a0, s0, -0x58
80201ef0: 15 47        	li	a4, 0x5
80201ef2: 97 00 01 00  	auipc	ra, 0x10
80201ef6: e7 80 40 6a  	jalr	0x6a4(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$3new17hb5a716ea1a6ae597E>
80201efa: 03 35 04 f9  	ld	a0, -0x70(s0)
80201efe: 03 36 84 f9  	ld	a2, -0x68(s0)
80201f02: 83 35 04 fa  	ld	a1, -0x60(s0)
;         Self { 
80201f06: 23 84 a5 02  	sb	a0, 0x28(a1)
80201f0a: a3 84 c5 02  	sb	a2, 0x29(a1)
80201f0e: 03 35 84 fc  	ld	a0, -0x38(s0)
80201f12: 88 f1        	sd	a0, 0x20(a1)
80201f14: 03 35 04 fc  	ld	a0, -0x40(s0)
80201f18: 88 ed        	sd	a0, 0x18(a1)
80201f1a: 03 35 84 fb  	ld	a0, -0x48(s0)
80201f1e: 88 e9        	sd	a0, 0x10(a1)
80201f20: 03 35 04 fb  	ld	a0, -0x50(s0)
80201f24: 88 e5        	sd	a0, 0x8(a1)
80201f26: 03 35 84 fa  	ld	a0, -0x58(s0)
80201f2a: 88 e1        	sd	a0, 0x0(a1)
80201f2c: a6 70        	ld	ra, 0x68(sp)
80201f2e: 06 74        	ld	s0, 0x60(sp)
;     }
80201f30: 65 61        	addi	sp, sp, 0x70
80201f32: 82 80        	ret

0000000080201f34 <_ZN2os10filesystem5inode7OSinode8read_all17had961accf51e16d9E>:
;     pub fn read_all(&self) -> Vec<u8> {
80201f34: 13 01 01 d0  	addi	sp, sp, -0x300
80201f38: 23 3c 11 2e  	sd	ra, 0x2f8(sp)
80201f3c: 23 38 81 2e  	sd	s0, 0x2f0(sp)
80201f40: 00 06        	addi	s0, sp, 0x300
80201f42: 23 30 b4 d4  	sd	a1, -0x2c0(s0)
80201f46: aa 85        	mv	a1, a0
80201f48: 03 35 04 d4  	ld	a0, -0x2c0(s0)
80201f4c: 23 34 b4 d4  	sd	a1, -0x2b8(s0)
80201f50: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         let mut rl_inode = unsafe {self.rl_inode.lock()};
80201f54: 97 10 01 00  	auipc	ra, 0x11
80201f58: e7 80 c0 4b  	jalr	0x4bc(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hceadecca40d8a426E>
80201f5c: 23 38 a4 d4  	sd	a0, -0x2b0(s0)
80201f60: 23 3c b4 d4  	sd	a1, -0x2a8(s0)
80201f64: 13 05 04 d6  	addi	a0, s0, -0x2a0
80201f68: 81 45        	li	a1, 0x0
80201f6a: 13 06 00 20  	li	a2, 0x200
;         let mut buf = [0u8;512];
80201f6e: 97 00 03 00  	auipc	ra, 0x30
80201f72: e7 80 00 f2  	jalr	-0xe0(ra) <memset>
80201f76: 13 05 04 f6  	addi	a0, s0, -0xa0
;         let mut v :Vec<u8> = Vec::new();
80201f7a: 97 20 01 00  	auipc	ra, 0x12
80201f7e: e7 80 c0 76  	jalr	0x76c(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h9152f91d68d0aab1E>
80201f82: 09 a0        	j	0x80201f84 <_ZN2os10filesystem5inode7OSinode8read_all17had961accf51e16d9E+0x50>
80201f84: 13 05 04 d5  	addi	a0, s0, -0x2b0
80201f88: 23 34 a4 d2  	sd	a0, -0x2d8(s0)
;                 let len = rl_inode.inode.read_at(rl_inode.offset, &mut buf);
80201f8c: 97 20 01 00  	auipc	ra, 0x12
80201f90: e7 80 00 ba  	jalr	-0x460(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1d874e7b942e1a66E>
80201f94: 97 00 00 00  	auipc	ra, 0x0
80201f98: e7 80 20 e9  	jalr	-0x16e(ra) <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hba73a899464bd59dE>
80201f9c: aa 85        	mv	a1, a0
80201f9e: 03 35 84 d2  	ld	a0, -0x2d8(s0)
80201fa2: 23 38 b4 d2  	sd	a1, -0x2d0(s0)
80201fa6: 97 20 01 00  	auipc	ra, 0x12
80201faa: e7 80 60 b8  	jalr	-0x47a(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1d874e7b942e1a66E>
80201fae: aa 85        	mv	a1, a0
80201fb0: 03 35 04 d3  	ld	a0, -0x2d0(s0)
80201fb4: 8c 65        	ld	a1, 0x8(a1)
80201fb6: 13 06 04 d6  	addi	a2, s0, -0x2a0
80201fba: 93 06 00 20  	li	a3, 0x200
80201fbe: 97 60 02 00  	auipc	ra, 0x26
80201fc2: e7 80 a0 f9  	jalr	-0x66(ra) <_ZN7easy_fs3vfs5Inode7read_at17h72df549b91be3da9E>
80201fc6: aa 85        	mv	a1, a0
80201fc8: 23 3c b4 d2  	sd	a1, -0x2c8(s0)
80201fcc: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                 if len == 0{
80201fd0: 51 ed        	bnez	a0, 0x8020206c <.Lpcrel_hi2+0x5c>
80201fd2: 09 a0        	j	0x80201fd4 <_ZN2os10filesystem5inode7OSinode8read_all17had961accf51e16d9E+0xa0>
80201fd4: 13 05 04 d5  	addi	a0, s0, -0x2b0
80201fd8: 23 30 a4 d2  	sd	a0, -0x2e0(s0)
;                     println!("len:{}",rl_inode.offset);
80201fdc: 97 20 01 00  	auipc	ra, 0x12
80201fe0: e7 80 00 b5  	jalr	-0x4b0(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1d874e7b942e1a66E>
80201fe4: 93 05 85 00  	addi	a1, a0, 0x8
80201fe8: 23 30 b4 fe  	sd	a1, -0x20(s0)

0000000080201fec <.Lpcrel_hi1>:
;         Self::new(x, Display::fmt)
80201fec: 17 f5 02 00  	auipc	a0, 0x2f
80201ff0: 13 05 25 0a  	addi	a0, a0, 0xa2
80201ff4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80201ff8: 23 38 b4 fc  	sd	a1, -0x30(s0)
80201ffc: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80202000: 83 35 04 fd  	ld	a1, -0x30(s0)
80202004: 03 35 84 fd  	ld	a0, -0x28(s0)
;                     println!("len:{}",rl_inode.offset);
80202008: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020200c: 23 38 a4 fa  	sd	a0, -0x50(s0)

0000000080202010 <.Lpcrel_hi2>:
80202010: 17 15 03 00  	auipc	a0, 0x31
80202014: 93 05 05 7c  	addi	a1, a0, 0x7c0
80202018: 13 05 84 f7  	addi	a0, s0, -0x88
8020201c: 23 3c a4 d0  	sd	a0, -0x2e8(s0)
80202020: 09 46        	li	a2, 0x2
80202022: 93 06 84 fa  	addi	a3, s0, -0x58
80202026: 05 47        	li	a4, 0x1
80202028: 97 50 00 00  	auipc	ra, 0x5
8020202c: e7 80 00 2c  	jalr	0x2c0(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
80202030: 03 35 84 d1  	ld	a0, -0x2e8(s0)
80202034: 97 60 01 00  	auipc	ra, 0x16
80202038: e7 80 80 e5  	jalr	-0x1a8(ra) <_ZN2os7console5print17h042fcde166d682deE>
8020203c: 03 36 84 d4  	ld	a2, -0x2b8(s0)
80202040: 03 35 04 d2  	ld	a0, -0x2e0(s0)
;         v
80202044: 83 35 04 f7  	ld	a1, -0x90(s0)
80202048: 0c ea        	sd	a1, 0x10(a2)
8020204a: 83 35 84 f6  	ld	a1, -0x98(s0)
8020204e: 0c e6        	sd	a1, 0x8(a2)
80202050: 83 35 04 f6  	ld	a1, -0xa0(s0)
80202054: 0c e2        	sd	a1, 0x0(a2)
;     }
80202056: 97 60 00 00  	auipc	ra, 0x6
8020205a: e7 80 e0 49  	jalr	0x49e(ra) <_ZN4core3ptr84drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..filesystem..inode..RLinode$GT$$GT$17h7797634964e624d7E>
8020205e: 83 30 81 2f  	ld	ra, 0x2f8(sp)
80202062: 03 34 01 2f  	ld	s0, 0x2f0(sp)
80202066: 13 01 01 30  	addi	sp, sp, 0x300
8020206a: 82 80        	ret
8020206c: 13 05 04 d5  	addi	a0, s0, -0x2b0
;                 rl_inode.offset += len;
80202070: 97 20 01 00  	auipc	ra, 0x12
80202074: e7 80 40 b6  	jalr	-0x49c(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h308bf63ab4d702c3E>
80202078: aa 85        	mv	a1, a0
8020207a: 03 35 84 d3  	ld	a0, -0x2c8(s0)
8020207e: 2e 86        	mv	a2, a1
80202080: 23 34 c4 d0  	sd	a2, -0x2f8(s0)
80202084: 8c 65        	ld	a1, 0x8(a1)
80202086: 2e 95        	add	a0, a0, a1
80202088: 23 38 a4 d0  	sd	a0, -0x2f0(s0)
8020208c: 63 64 b5 04  	bltu	a0, a1, 0x802020d4 <.Lpcrel_hi4>
80202090: 09 a0        	j	0x80202092 <.Lpcrel_hi2+0x82>
80202092: 03 35 84 d3  	ld	a0, -0x2c8(s0)
80202096: 83 35 04 d1  	ld	a1, -0x2f0(s0)
8020209a: 03 36 84 d0  	ld	a2, -0x2f8(s0)
;                 rl_inode.offset += len;
8020209e: 0c e6        	sd	a1, 0x8(a2)
;                 v.extend_from_slice(&buf[..len]);
802020a0: 23 3c a4 fa  	sd	a0, -0x48(s0)
802020a4: 83 35 84 fb  	ld	a1, -0x48(s0)

00000000802020a8 <.Lpcrel_hi3>:
802020a8: 17 15 03 00  	auipc	a0, 0x31
802020ac: 13 06 85 79  	addi	a2, a0, 0x798
802020b0: 13 05 04 d6  	addi	a0, s0, -0x2a0
802020b4: 97 10 00 00  	auipc	ra, 0x1
802020b8: e7 80 80 51  	jalr	0x518(ra) <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb101aa809261f9aaE>
802020bc: 23 30 a4 d0  	sd	a0, -0x300(s0)
802020c0: 2e 86        	mv	a2, a1
802020c2: 83 35 04 d0  	ld	a1, -0x300(s0)
802020c6: 13 05 04 f6  	addi	a0, s0, -0xa0
802020ca: 97 20 01 00  	auipc	ra, 0x12
802020ce: e7 80 40 7f  	jalr	0x7f4(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17h65e22f70a79c314aE>
802020d2: 4d bd        	j	0x80201f84 <_ZN2os10filesystem5inode7OSinode8read_all17had961accf51e16d9E+0x50>

00000000802020d4 <.Lpcrel_hi4>:
;                 rl_inode.offset += len;
802020d4: 17 15 03 00  	auipc	a0, 0x31
802020d8: 13 05 c5 74  	addi	a0, a0, 0x74c

00000000802020dc <.Lpcrel_hi5>:
802020dc: 97 15 03 00  	auipc	a1, 0x31
802020e0: 13 86 c5 72  	addi	a2, a1, 0x72c
802020e4: f1 45        	li	a1, 0x1c
802020e6: 97 e0 02 00  	auipc	ra, 0x2e
802020ea: e7 80 20 13  	jalr	0x132(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802020ee <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$8readable17h6a61f0da52175ea5E>:
;     fn readable(&self) -> bool{
802020ee: 01 11        	addi	sp, sp, -0x20
802020f0: 06 ec        	sd	ra, 0x18(sp)
802020f2: 22 e8        	sd	s0, 0x10(sp)
802020f4: 00 10        	addi	s0, sp, 0x20
802020f6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.readable
802020fa: 03 45 85 02  	lbu	a0, 0x28(a0)
802020fe: e2 60        	ld	ra, 0x18(sp)
80202100: 42 64        	ld	s0, 0x10(sp)
;     }
80202102: 05 61        	addi	sp, sp, 0x20
80202104: 82 80        	ret

0000000080202106 <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$8writable17h8e51135b99164d97E>:
;     fn writable(&self) -> bool{
80202106: 01 11        	addi	sp, sp, -0x20
80202108: 06 ec        	sd	ra, 0x18(sp)
8020210a: 22 e8        	sd	s0, 0x10(sp)
8020210c: 00 10        	addi	s0, sp, 0x20
8020210e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.writable
80202112: 03 45 95 02  	lbu	a0, 0x29(a0)
80202116: e2 60        	ld	ra, 0x18(sp)
80202118: 42 64        	ld	s0, 0x10(sp)
;     }
8020211a: 05 61        	addi	sp, sp, 0x20
8020211c: 82 80        	ret

000000008020211e <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$4read17h73a6f8533853744bE>:
;     fn read(&self ,mut buf:UserBuffer) -> usize{
8020211e: 35 71        	addi	sp, sp, -0xa0
80202120: 06 ed        	sd	ra, 0x98(sp)
80202122: 22 e9        	sd	s0, 0x90(sp)
80202124: 00 11        	addi	s0, sp, 0xa0
80202126: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020212a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let mut rl_inode = unsafe {self.rl_inode.lock()};
8020212e: 97 10 01 00  	auipc	ra, 0x11
80202132: e7 80 20 2e  	jalr	0x2e2(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hceadecca40d8a426E>
80202136: 2a 86        	mv	a2, a0
80202138: 03 35 04 fa  	ld	a0, -0x60(s0)
8020213c: 23 34 c4 fa  	sd	a2, -0x58(s0)
80202140: 23 38 b4 fa  	sd	a1, -0x50(s0)
80202144: 81 45        	li	a1, 0x0
;         let mut total_size = 0usize;
80202146: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         for slice in buf.buffers.iter_mut() {
8020214a: 97 30 01 00  	auipc	ra, 0x13
8020214e: e7 80 60 fc  	jalr	-0x3a(ra) <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h453d27b3d869bbd3E>
80202152: 97 40 00 00  	auipc	ra, 0x4
80202156: e7 80 a0 d6  	jalr	-0x296(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h417a7ddc24293c7bE>
8020215a: 97 90 00 00  	auipc	ra, 0x9
8020215e: e7 80 20 7f  	jalr	0x7f2(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb9752d9e1c899570E>
80202162: 23 30 a4 fc  	sd	a0, -0x40(s0)
80202166: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020216a: 09 a0        	j	0x8020216c <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$4read17h73a6f8533853744bE+0x4e>
8020216c: 13 05 04 fc  	addi	a0, s0, -0x40
;         for slice in buf.buffers.iter_mut() {
80202170: 97 a0 00 00  	auipc	ra, 0xa
80202174: e7 80 00 b6  	jalr	-0x4a0(ra) <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E>
80202178: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020217c: 03 35 04 fd  	ld	a0, -0x30(s0)
80202180: 05 e9        	bnez	a0, 0x802021b0 <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$4read17h73a6f8533853744bE+0x92>
80202182: 09 a0        	j	0x80202184 <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$4read17h73a6f8533853744bE+0x66>
;         total_size
80202184: 03 35 84 fb  	ld	a0, -0x48(s0)
80202188: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020218c: 13 05 84 fa  	addi	a0, s0, -0x58
;     }
80202190: 97 60 00 00  	auipc	ra, 0x6
80202194: e7 80 40 36  	jalr	0x364(ra) <_ZN4core3ptr84drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..filesystem..inode..RLinode$GT$$GT$17h7797634964e624d7E>
80202198: 03 35 04 fa  	ld	a0, -0x60(s0)
8020219c: 97 60 00 00  	auipc	ra, 0x6
802021a0: e7 80 60 cb  	jalr	-0x34a(ra) <_ZN4core3ptr47drop_in_place$LT$os..page_alloc..UserBuffer$GT$17hf9d1417356447d81E>
802021a4: 03 35 84 f9  	ld	a0, -0x68(s0)
802021a8: ea 60        	ld	ra, 0x98(sp)
802021aa: 4a 64        	ld	s0, 0x90(sp)
802021ac: 0d 61        	addi	sp, sp, 0xa0
802021ae: 82 80        	ret
;         for slice in buf.buffers.iter_mut() {
802021b0: 03 35 04 fd  	ld	a0, -0x30(s0)
802021b4: 23 30 a4 f8  	sd	a0, -0x80(s0)
802021b8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802021bc: 13 05 84 fa  	addi	a0, s0, -0x58
802021c0: 23 3c a4 f6  	sd	a0, -0x88(s0)
;             let read_size = rl_inode.inode.read_at(rl_inode.offset, *slice);
802021c4: 97 20 01 00  	auipc	ra, 0x12
802021c8: e7 80 80 96  	jalr	-0x698(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1d874e7b942e1a66E>
802021cc: 97 00 00 00  	auipc	ra, 0x0
802021d0: e7 80 a0 c5  	jalr	-0x3a6(ra) <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hba73a899464bd59dE>
802021d4: aa 85        	mv	a1, a0
802021d6: 03 35 84 f7  	ld	a0, -0x88(s0)
802021da: 23 34 b4 f8  	sd	a1, -0x78(s0)
802021de: 97 20 01 00  	auipc	ra, 0x12
802021e2: e7 80 e0 94  	jalr	-0x6b2(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1d874e7b942e1a66E>
802021e6: 83 36 04 f8  	ld	a3, -0x80(s0)
802021ea: aa 85        	mv	a1, a0
802021ec: 03 35 84 f8  	ld	a0, -0x78(s0)
802021f0: 8c 65        	ld	a1, 0x8(a1)
802021f2: 90 62        	ld	a2, 0x0(a3)
802021f4: 94 66        	ld	a3, 0x8(a3)
802021f6: 97 60 02 00  	auipc	ra, 0x26
802021fa: e7 80 20 d6  	jalr	-0x29e(ra) <_ZN7easy_fs3vfs5Inode7read_at17h72df549b91be3da9E>
802021fe: aa 85        	mv	a1, a0
80202200: 23 38 b4 f8  	sd	a1, -0x70(s0)
80202204: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             if read_size == 0 {
80202208: 35 dd        	beqz	a0, 0x80202184 <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$4read17h73a6f8533853744bE+0x66>
8020220a: 09 a0        	j	0x8020220c <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$4read17h73a6f8533853744bE+0xee>
8020220c: 13 05 84 fa  	addi	a0, s0, -0x58
;             rl_inode.offset += read_size;
80202210: 97 20 01 00  	auipc	ra, 0x12
80202214: e7 80 40 9c  	jalr	-0x63c(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h308bf63ab4d702c3E>
80202218: aa 85        	mv	a1, a0
8020221a: 03 35 04 f9  	ld	a0, -0x70(s0)
8020221e: 2e 86        	mv	a2, a1
80202220: 23 34 c4 f6  	sd	a2, -0x98(s0)
80202224: 8c 65        	ld	a1, 0x8(a1)
80202226: 2e 95        	add	a0, a0, a1
80202228: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020222c: 63 62 b5 02  	bltu	a0, a1, 0x80202250 <.Lpcrel_hi6>
80202230: 09 a0        	j	0x80202232 <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$4read17h73a6f8533853744bE+0x114>
80202232: 03 35 04 f9  	ld	a0, -0x70(s0)
80202236: 83 35 04 f7  	ld	a1, -0x90(s0)
8020223a: 03 36 84 f6  	ld	a2, -0x98(s0)
;             rl_inode.offset += read_size;
8020223e: 0c e6        	sd	a1, 0x8(a2)
;             total_size += read_size;
80202240: 83 35 84 fb  	ld	a1, -0x48(s0)
80202244: 2e 95        	add	a0, a0, a1
80202246: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8020224a: 63 65 b5 02  	bltu	a0, a1, 0x80202274 <.Lpcrel_hi8>
8020224e: 31 a8        	j	0x8020226a <.Lpcrel_hi7+0x12>

0000000080202250 <.Lpcrel_hi6>:
;             rl_inode.offset += read_size;
80202250: 17 15 03 00  	auipc	a0, 0x31
80202254: 13 05 05 5d  	addi	a0, a0, 0x5d0

0000000080202258 <.Lpcrel_hi7>:
80202258: 97 15 03 00  	auipc	a1, 0x31
8020225c: 13 86 05 60  	addi	a2, a1, 0x600
80202260: f1 45        	li	a1, 0x1c
80202262: 97 e0 02 00  	auipc	ra, 0x2e
80202266: e7 80 60 fb  	jalr	-0x4a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020226a: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             total_size += read_size;
8020226e: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         for slice in buf.buffers.iter_mut() {
80202272: ed bd        	j	0x8020216c <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$4read17h73a6f8533853744bE+0x4e>

0000000080202274 <.Lpcrel_hi8>:
;             total_size += read_size;
80202274: 17 15 03 00  	auipc	a0, 0x31
80202278: 13 05 c5 5a  	addi	a0, a0, 0x5ac

000000008020227c <.Lpcrel_hi9>:
8020227c: 97 15 03 00  	auipc	a1, 0x31
80202280: 13 86 45 5f  	addi	a2, a1, 0x5f4
80202284: f1 45        	li	a1, 0x1c
80202286: 97 e0 02 00  	auipc	ra, 0x2e
8020228a: e7 80 20 f9  	jalr	-0x6e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020228e <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$5write17h6c24edc8c02b4d66E>:
;     fn write(&self ,buf:UserBuffer) -> usize {
8020228e: 6d 71        	addi	sp, sp, -0x110
80202290: 06 e6        	sd	ra, 0x108(sp)
80202292: 22 e2        	sd	s0, 0x100(sp)
80202294: 00 0a        	addi	s0, sp, 0x110
80202296: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8020229a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             self.rl_inode.lock()
8020229e: 97 10 01 00  	auipc	ra, 0x11
802022a2: e7 80 20 17  	jalr	0x172(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hceadecca40d8a426E>
802022a6: 2a 86        	mv	a2, a0
802022a8: 03 35 04 f4  	ld	a0, -0xc0(s0)
802022ac: 23 34 c4 f4  	sd	a2, -0xb8(s0)
802022b0: 23 38 b4 f4  	sd	a1, -0xb0(s0)
802022b4: 81 45        	li	a1, 0x0
;         let mut total_size = 0usize;
802022b6: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;         for slice in buf.buffers.iter() {
802022ba: 97 30 01 00  	auipc	ra, 0x13
802022be: e7 80 20 c1  	jalr	-0x3ee(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h74acfaeb179f7557E>
802022c2: 97 40 00 00  	auipc	ra, 0x4
802022c6: e7 80 20 b0  	jalr	-0x4fe(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h861122a063915004E>
802022ca: 97 90 00 00  	auipc	ra, 0x9
802022ce: e7 80 20 65  	jalr	0x652(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7acfd28025590632E>
802022d2: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802022d6: 23 34 b4 f6  	sd	a1, -0x98(s0)
802022da: 09 a0        	j	0x802022dc <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$5write17h6c24edc8c02b4d66E+0x4e>
802022dc: 13 05 04 f6  	addi	a0, s0, -0xa0
;         for slice in buf.buffers.iter() {
802022e0: 97 a0 00 00  	auipc	ra, 0xa
802022e4: e7 80 00 93  	jalr	-0x6d0(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E>
802022e8: 23 38 a4 f6  	sd	a0, -0x90(s0)
802022ec: 03 35 04 f7  	ld	a0, -0x90(s0)
802022f0: 05 e9        	bnez	a0, 0x80202320 <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$5write17h6c24edc8c02b4d66E+0x92>
802022f2: 09 a0        	j	0x802022f4 <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$5write17h6c24edc8c02b4d66E+0x66>
;         total_size
802022f4: 03 35 84 f5  	ld	a0, -0xa8(s0)
802022f8: 23 3c a4 f2  	sd	a0, -0xc8(s0)
802022fc: 13 05 84 f4  	addi	a0, s0, -0xb8
;     }
80202300: 97 60 00 00  	auipc	ra, 0x6
80202304: e7 80 40 1f  	jalr	0x1f4(ra) <_ZN4core3ptr84drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..filesystem..inode..RLinode$GT$$GT$17h7797634964e624d7E>
80202308: 03 35 04 f4  	ld	a0, -0xc0(s0)
8020230c: 97 60 00 00  	auipc	ra, 0x6
80202310: e7 80 60 b4  	jalr	-0x4ba(ra) <_ZN4core3ptr47drop_in_place$LT$os..page_alloc..UserBuffer$GT$17hf9d1417356447d81E>
80202314: 03 35 84 f3  	ld	a0, -0xc8(s0)
80202318: b2 60        	ld	ra, 0x108(sp)
8020231a: 12 64        	ld	s0, 0x100(sp)
8020231c: 51 61        	addi	sp, sp, 0x110
8020231e: 82 80        	ret
;         for slice in buf.buffers.iter() {
80202320: 03 35 04 f7  	ld	a0, -0x90(s0)
80202324: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80202328: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020232c: 13 05 84 f4  	addi	a0, s0, -0xb8
80202330: 23 38 a4 f0  	sd	a0, -0xf0(s0)
;             let write_size = rl_inode.inode.write_at(rl_inode.offset, *slice);
80202334: 97 10 01 00  	auipc	ra, 0x11
80202338: e7 80 80 7f  	jalr	0x7f8(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1d874e7b942e1a66E>
8020233c: 97 00 00 00  	auipc	ra, 0x0
80202340: e7 80 a0 ae  	jalr	-0x516(ra) <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hba73a899464bd59dE>
80202344: aa 85        	mv	a1, a0
80202346: 03 35 04 f1  	ld	a0, -0xf0(s0)
8020234a: 23 3c b4 f0  	sd	a1, -0xe8(s0)
8020234e: 97 10 01 00  	auipc	ra, 0x11
80202352: e7 80 e0 7d  	jalr	0x7de(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1d874e7b942e1a66E>
80202356: 83 36 04 f2  	ld	a3, -0xe0(s0)
8020235a: aa 85        	mv	a1, a0
8020235c: 03 35 84 f1  	ld	a0, -0xe8(s0)
80202360: 8c 65        	ld	a1, 0x8(a1)
80202362: 90 62        	ld	a2, 0x0(a3)
80202364: 94 66        	ld	a3, 0x8(a3)
80202366: 97 60 02 00  	auipc	ra, 0x26
8020236a: e7 80 a0 ce  	jalr	-0x316(ra) <_ZN7easy_fs3vfs5Inode8write_at17h0d2571072a425befE>
8020236e: aa 85        	mv	a1, a0
80202370: 03 35 04 f2  	ld	a0, -0xe0(s0)
80202374: 23 3c b4 f6  	sd	a1, -0x88(s0)
;             assert_eq!(write_size,slice.len());
80202378: 08 65        	ld	a0, 0x8(a0)
8020237a: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020237e: 13 05 84 f7  	addi	a0, s0, -0x88
80202382: 23 30 a4 f8  	sd	a0, -0x80(s0)
80202386: 13 05 04 f9  	addi	a0, s0, -0x70
8020238a: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020238e: 03 35 04 f8  	ld	a0, -0x80(s0)
80202392: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80202396: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020239a: 83 35 84 f8  	ld	a1, -0x78(s0)
8020239e: 23 38 b4 f2  	sd	a1, -0xd0(s0)
802023a2: 23 34 b4 fe  	sd	a1, -0x18(s0)
802023a6: 08 61        	ld	a0, 0x0(a0)
802023a8: 8c 61        	ld	a1, 0x0(a1)
802023aa: 63 08 b5 02  	beq	a0, a1, 0x802023da <.Lpcrel_hi10+0x14>
802023ae: 09 a0        	j	0x802023b0 <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$5write17h6c24edc8c02b4d66E+0x122>
802023b0: 03 36 04 f3  	ld	a2, -0xd0(s0)
802023b4: 83 35 84 f2  	ld	a1, -0xd8(s0)
802023b8: 01 45        	li	a0, 0x0
;             assert_eq!(write_size,slice.len());
802023ba: a3 0f a4 f8  	sb	a0, -0x61(s0)
802023be: 23 30 a4 fa  	sd	a0, -0x60(s0)
802023c2: 03 45 f4 f9  	lbu	a0, -0x61(s0)

00000000802023c6 <.Lpcrel_hi10>:
802023c6: 97 16 03 00  	auipc	a3, 0x31
802023ca: 13 87 26 4c  	addi	a4, a3, 0x4c2
802023ce: 93 06 04 fa  	addi	a3, s0, -0x60
802023d2: 97 c0 02 00  	auipc	ra, 0x2c
802023d6: e7 80 00 b4  	jalr	-0x4c0(ra) <_ZN4core9panicking13assert_failed17h770217dc7d738624E>
;             rl_inode.offset += write_size;
802023da: 03 35 84 f7  	ld	a0, -0x88(s0)
802023de: 23 3c a4 ee  	sd	a0, -0x108(s0)
802023e2: 13 05 84 f4  	addi	a0, s0, -0xb8
802023e6: 97 10 01 00  	auipc	ra, 0x11
802023ea: e7 80 e0 7e  	jalr	0x7ee(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h308bf63ab4d702c3E>
802023ee: aa 85        	mv	a1, a0
802023f0: 03 35 84 ef  	ld	a0, -0x108(s0)
802023f4: 2e 86        	mv	a2, a1
802023f6: 23 30 c4 f0  	sd	a2, -0x100(s0)
802023fa: 8c 65        	ld	a1, 0x8(a1)
802023fc: 2e 95        	add	a0, a0, a1
802023fe: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80202402: 63 62 b5 02  	bltu	a0, a1, 0x80202426 <.Lpcrel_hi11>
80202406: 09 a0        	j	0x80202408 <.Lpcrel_hi10+0x42>
80202408: 03 35 84 f0  	ld	a0, -0xf8(s0)
8020240c: 83 35 04 f0  	ld	a1, -0x100(s0)
;             rl_inode.offset += write_size;
80202410: 88 e5        	sd	a0, 0x8(a1)
;             total_size += write_size;
80202412: 03 35 84 f7  	ld	a0, -0x88(s0)
80202416: 83 35 84 f5  	ld	a1, -0xa8(s0)
8020241a: 2e 95        	add	a0, a0, a1
8020241c: 23 38 a4 ee  	sd	a0, -0x110(s0)
80202420: 63 65 b5 02  	bltu	a0, a1, 0x8020244a <.Lpcrel_hi13>
80202424: 31 a8        	j	0x80202440 <.Lpcrel_hi12+0x12>

0000000080202426 <.Lpcrel_hi11>:
;             rl_inode.offset += write_size;
80202426: 17 15 03 00  	auipc	a0, 0x31
8020242a: 13 05 a5 3f  	addi	a0, a0, 0x3fa

000000008020242e <.Lpcrel_hi12>:
8020242e: 97 15 03 00  	auipc	a1, 0x31
80202432: 13 86 25 47  	addi	a2, a1, 0x472
80202436: f1 45        	li	a1, 0x1c
80202438: 97 e0 02 00  	auipc	ra, 0x2e
8020243c: e7 80 00 de  	jalr	-0x220(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80202440: 03 35 04 ef  	ld	a0, -0x110(s0)
;             total_size += write_size;
80202444: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;         for slice in buf.buffers.iter() {
80202448: 51 bd        	j	0x802022dc <_ZN71_$LT$os..filesystem..inode..OSinode$u20$as$u20$os..filesystem..File$GT$5write17h6c24edc8c02b4d66E+0x4e>

000000008020244a <.Lpcrel_hi13>:
;             total_size += write_size;
8020244a: 17 15 03 00  	auipc	a0, 0x31
8020244e: 13 05 65 3d  	addi	a0, a0, 0x3d6

0000000080202452 <.Lpcrel_hi14>:
80202452: 97 15 03 00  	auipc	a1, 0x31
80202456: 13 86 65 46  	addi	a2, a1, 0x466
8020245a: f1 45        	li	a1, 0x1c
8020245c: 97 e0 02 00  	auipc	ra, 0x2e
80202460: e7 80 c0 db  	jalr	-0x244(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080202464 <_ZN2os10filesystem5inode9open_file17h773e852ab301485bE>:
; pub fn open_file(name:&str,flags:usize) -> Option<Arc<OSinode>>{
80202464: 71 71        	addi	sp, sp, -0xb0
80202466: 06 f5        	sd	ra, 0xa8(sp)
80202468: 22 f1        	sd	s0, 0xa0(sp)
8020246a: 00 19        	addi	s0, sp, 0xb0
8020246c: 23 34 b4 f6  	sd	a1, -0x98(s0)
80202470: 23 38 a4 f6  	sd	a0, -0x90(s0)
80202474: 23 3c c4 f6  	sd	a2, -0x88(s0)
80202478: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020247c: 23 34 b4 fe  	sd	a1, -0x18(s0)
80202480: 01 45        	li	a0, 0x0
;     if judg_create(flags) {
80202482: a3 0f a4 fc  	sb	a0, -0x21(s0)
80202486: 03 35 84 f7  	ld	a0, -0x88(s0)
8020248a: 97 00 00 00  	auipc	ra, 0x0
8020248e: e7 80 a0 a0  	jalr	-0x5f6(ra) <_ZN2os10filesystem5inode11judg_create17hdb6562b74f4c3186E>
80202492: 39 e1        	bnez	a0, 0x802024d8 <.Lpcrel_hi16>
80202494: 09 a0        	j	0x80202496 <.Lpcrel_hi15>

0000000080202496 <.Lpcrel_hi15>:
;         ROOT_INODE.find(name)
80202496: 17 15 03 00  	auipc	a0, 0x31
8020249a: 13 05 a5 43  	addi	a0, a0, 0x43a
8020249e: 97 00 00 00  	auipc	ra, 0x0
802024a2: e7 80 40 15  	jalr	0x154(ra) <_ZN77_$LT$os..filesystem..inode..ROOT_INODE$u20$as$u20$core..ops..deref..Deref$GT$5deref17he69d6f1a1292cf37E>
802024a6: 97 00 00 00  	auipc	ra, 0x0
802024aa: e7 80 00 98  	jalr	-0x680(ra) <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hba73a899464bd59dE>
802024ae: 83 35 04 f7  	ld	a1, -0x90(s0)
802024b2: 03 36 84 f6  	ld	a2, -0x98(s0)
802024b6: 97 50 02 00  	auipc	ra, 0x25
802024ba: e7 80 40 4b  	jalr	0x4b4(ra) <_ZN7easy_fs3vfs5Inode4find17hbca6b0c4d7d1a93bE>
802024be: 93 05 84 f7  	addi	a1, s0, -0x88
;             .map(|inode|{
802024c2: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         ROOT_INODE.find(name)
802024c6: 83 35 04 fd  	ld	a1, -0x30(s0)
802024ca: 97 30 00 00  	auipc	ra, 0x3
802024ce: e7 80 c0 83  	jalr	-0x7c4(ra) <_ZN4core6option15Option$LT$T$GT$3map17h89c43c720aa28707E>
802024d2: 23 30 a4 f8  	sd	a0, -0x80(s0)
802024d6: 35 a8        	j	0x80202512 <.Lpcrel_hi16+0x3a>

00000000802024d8 <.Lpcrel_hi16>:
;         if let Some(inode) = ROOT_INODE.find(name){
802024d8: 17 15 03 00  	auipc	a0, 0x31
802024dc: 13 05 85 3f  	addi	a0, a0, 0x3f8
802024e0: 97 00 00 00  	auipc	ra, 0x0
802024e4: e7 80 20 11  	jalr	0x112(ra) <_ZN77_$LT$os..filesystem..inode..ROOT_INODE$u20$as$u20$core..ops..deref..Deref$GT$5deref17he69d6f1a1292cf37E>
802024e8: 97 00 00 00  	auipc	ra, 0x0
802024ec: e7 80 e0 93  	jalr	-0x6c2(ra) <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hba73a899464bd59dE>
802024f0: 83 35 04 f7  	ld	a1, -0x90(s0)
802024f4: 03 36 84 f6  	ld	a2, -0x98(s0)
802024f8: 97 50 02 00  	auipc	ra, 0x25
802024fc: e7 80 20 47  	jalr	0x472(ra) <_ZN7easy_fs3vfs5Inode4find17hbca6b0c4d7d1a93bE>
80202500: 23 34 a4 f8  	sd	a0, -0x78(s0)
80202504: 05 45        	li	a0, 0x1
80202506: a3 0f a4 fc  	sb	a0, -0x21(s0)
8020250a: 03 35 84 f8  	ld	a0, -0x78(s0)
8020250e: 01 e9        	bnez	a0, 0x8020251e <.Lpcrel_hi16+0x46>
80202510: a5 a8        	j	0x80202588 <.Lpcrel_hi17>
; }
80202512: 03 35 04 f8  	ld	a0, -0x80(s0)
80202516: aa 70        	ld	ra, 0xa8(sp)
80202518: 0a 74        	ld	s0, 0xa0(sp)
8020251a: 4d 61        	addi	sp, sp, 0xb0
8020251c: 82 80        	ret
8020251e: 01 45        	li	a0, 0x0
;         if let Some(inode) = ROOT_INODE.find(name){
80202520: a3 0f a4 fc  	sb	a0, -0x21(s0)
80202524: 03 35 84 f8  	ld	a0, -0x78(s0)
80202528: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020252c: 13 05 04 f9  	addi	a0, s0, -0x70
;             inode.clear();
80202530: 97 00 00 00  	auipc	ra, 0x0
80202534: e7 80 60 8f  	jalr	-0x70a(ra) <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hba73a899464bd59dE>
80202538: 97 60 02 00  	auipc	ra, 0x26
8020253c: e7 80 80 c2  	jalr	-0x3d8(ra) <_ZN7easy_fs3vfs5Inode5clear17h0fbcbbfd63381375E>
;                         judg_read(flags),
80202540: 03 35 84 f7  	ld	a0, -0x88(s0)
80202544: 97 00 00 00  	auipc	ra, 0x0
80202548: e7 80 60 90  	jalr	-0x6fa(ra) <_ZN2os10filesystem5inode9judg_read17he84fe7cd97b3c657E>
8020254c: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;                         judg_write(flags),
80202550: 03 35 84 f7  	ld	a0, -0x88(s0)
80202554: 97 00 00 00  	auipc	ra, 0x0
80202558: e7 80 a0 92  	jalr	-0x6d6(ra) <_ZN2os10filesystem5inode10judg_write17hd175e6dbfb4d774cE>
8020255c: 83 35 84 f5  	ld	a1, -0xa8(s0)
80202560: 2a 86        	mv	a2, a0
;                         inode,
80202562: 83 36 04 f9  	ld	a3, -0x70(s0)
80202566: 13 05 84 f9  	addi	a0, s0, -0x68
8020256a: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;                     Arc::new(OSinode::new(
8020256e: 97 00 00 00  	auipc	ra, 0x0
80202572: e7 80 40 94  	jalr	-0x6bc(ra) <_ZN2os10filesystem5inode7OSinode3new17h05ff73943e240f0dE>
80202576: 03 35 04 f6  	ld	a0, -0xa0(s0)
8020257a: 97 f0 ff ff  	auipc	ra, 0xfffff
8020257e: e7 80 40 29  	jalr	0x294(ra) <ekernel+0xffcb480e>
;                 Some(
80202582: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         if let Some(inode) = ROOT_INODE.find(name){
80202586: 91 a0        	j	0x802025ca <.Lpcrel_hi17+0x42>

0000000080202588 <.Lpcrel_hi17>:
;             ROOT_INODE.create(name)
80202588: 17 15 03 00  	auipc	a0, 0x31
8020258c: 13 05 85 34  	addi	a0, a0, 0x348
80202590: 97 00 00 00  	auipc	ra, 0x0
80202594: e7 80 20 06  	jalr	0x62(ra) <_ZN77_$LT$os..filesystem..inode..ROOT_INODE$u20$as$u20$core..ops..deref..Deref$GT$5deref17he69d6f1a1292cf37E>
80202598: 97 00 00 00  	auipc	ra, 0x0
8020259c: e7 80 e0 88  	jalr	-0x772(ra) <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hba73a899464bd59dE>
802025a0: 83 35 04 f7  	ld	a1, -0x90(s0)
802025a4: 03 36 84 f6  	ld	a2, -0x98(s0)
802025a8: 97 50 02 00  	auipc	ra, 0x25
802025ac: e7 80 e0 5b  	jalr	0x5be(ra) <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E>
802025b0: 93 05 84 f7  	addi	a1, s0, -0x88
;                     .map(|inode|{
802025b4: 23 34 b4 fc  	sd	a1, -0x38(s0)
;             ROOT_INODE.create(name)
802025b8: 83 35 84 fc  	ld	a1, -0x38(s0)
802025bc: 97 20 00 00  	auipc	ra, 0x2
802025c0: e7 80 80 6f  	jalr	0x6f8(ra) <_ZN4core6option15Option$LT$T$GT$3map17h092c5eca03acff62E>
802025c4: 23 30 a4 f8  	sd	a0, -0x80(s0)
802025c8: 09 a0        	j	0x802025ca <.Lpcrel_hi17+0x42>
;     }else {
802025ca: 03 35 84 f8  	ld	a0, -0x78(s0)
802025ce: 19 c5        	beqz	a0, 0x802025dc <.Lpcrel_hi17+0x54>
802025d0: 09 a0        	j	0x802025d2 <.Lpcrel_hi17+0x4a>
802025d2: 03 45 f4 fd  	lbu	a0, -0x21(s0)
802025d6: 05 89        	andi	a0, a0, 0x1
802025d8: 11 e5        	bnez	a0, 0x802025e4 <.Lpcrel_hi17+0x5c>
802025da: 09 a0        	j	0x802025dc <.Lpcrel_hi17+0x54>
802025dc: 01 45        	li	a0, 0x0
;     }else {
802025de: a3 0f a4 fc  	sb	a0, -0x21(s0)
;     if judg_create(flags) {
802025e2: 05 bf        	j	0x80202512 <.Lpcrel_hi16+0x3a>
802025e4: 13 05 84 f8  	addi	a0, s0, -0x78
;     }else {
802025e8: 97 60 00 00  	auipc	ra, 0x6
802025ec: e7 80 00 be  	jalr	-0x420(ra) <_ZN4core3ptr64drop_in_place$LT$alloc..sync..Arc$LT$easy_fs..vfs..Inode$GT$$GT$17hac687c9eac6e2cfdE>
802025f0: f5 b7        	j	0x802025dc <.Lpcrel_hi17+0x54>

00000000802025f2 <_ZN77_$LT$os..filesystem..inode..ROOT_INODE$u20$as$u20$core..ops..deref..Deref$GT$5deref17he69d6f1a1292cf37E>:
;             fn deref(&self) -> &$T {
802025f2: 01 11        	addi	sp, sp, -0x20
802025f4: 06 ec        	sd	ra, 0x18(sp)
802025f6: 22 e8        	sd	s0, 0x10(sp)
802025f8: 00 10        	addi	s0, sp, 0x20
802025fa: 23 30 a4 fe  	sd	a0, -0x20(s0)

00000000802025fe <.Lpcrel_hi18>:
802025fe: 17 a5 04 00  	auipc	a0, 0x4a
80202602: 13 05 25 a0  	addi	a0, a0, -0x5fe
80202606: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0.call_once(builder)
8020260a: 97 60 01 00  	auipc	ra, 0x16
8020260e: e7 80 80 4d  	jalr	0x4d8(ra) <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E>
80202612: e2 60        	ld	ra, 0x18(sp)
80202614: 42 64        	ld	s0, 0x10(sp)
;             }
80202616: 05 61        	addi	sp, sp, 0x20
80202618: 82 80        	ret
8020261a: 00 00        	unimp
8020261c: 00 00        	unimp
8020261e: 00 00        	unimp

0000000080202620 <kernelvec>:
80202620: 11 71        	addi	sp, sp, -0x100
80202622: 06 e0        	sd	ra, 0x0(sp)
80202624: 0a e4        	sd	sp, 0x8(sp)
80202626: 0e e8        	sd	gp, 0x10(sp)
80202628: 12 ec        	sd	tp, 0x18(sp)
8020262a: 16 f0        	sd	t0, 0x20(sp)
8020262c: 1a f4        	sd	t1, 0x28(sp)
8020262e: 1e f8        	sd	t2, 0x30(sp)
80202630: 22 fc        	sd	s0, 0x38(sp)
80202632: a6 e0        	sd	s1, 0x40(sp)
80202634: aa e4        	sd	a0, 0x48(sp)
80202636: ae e8        	sd	a1, 0x50(sp)
80202638: b2 ec        	sd	a2, 0x58(sp)
8020263a: b6 f0        	sd	a3, 0x60(sp)
8020263c: ba f4        	sd	a4, 0x68(sp)
8020263e: be f8        	sd	a5, 0x70(sp)
80202640: c2 fc        	sd	a6, 0x78(sp)
80202642: 46 e1        	sd	a7, 0x80(sp)
80202644: 4a e5        	sd	s2, 0x88(sp)
80202646: 4e e9        	sd	s3, 0x90(sp)
80202648: 52 ed        	sd	s4, 0x98(sp)
8020264a: 56 f1        	sd	s5, 0xa0(sp)
8020264c: 5a f5        	sd	s6, 0xa8(sp)
8020264e: 5e f9        	sd	s7, 0xb0(sp)
80202650: 62 fd        	sd	s8, 0xb8(sp)
80202652: e6 e1        	sd	s9, 0xc0(sp)
80202654: ea e5        	sd	s10, 0xc8(sp)
80202656: ee e9        	sd	s11, 0xd0(sp)
80202658: f2 ed        	sd	t3, 0xd8(sp)
8020265a: f6 f1        	sd	t4, 0xe0(sp)
8020265c: fa f5        	sd	t5, 0xe8(sp)
8020265e: fe f9        	sd	t6, 0xf0(sp)
80202660: 97 10 00 00  	auipc	ra, 0x1
80202664: e7 80 60 84  	jalr	-0x7ba(ra) <kernel_trap>
80202668: 82 60        	ld	ra, 0x0(sp)
8020266a: 22 61        	ld	sp, 0x8(sp)
8020266c: c2 61        	ld	gp, 0x10(sp)
8020266e: 82 72        	ld	t0, 0x20(sp)
80202670: 22 73        	ld	t1, 0x28(sp)
80202672: c2 73        	ld	t2, 0x30(sp)
80202674: 62 74        	ld	s0, 0x38(sp)
80202676: 86 64        	ld	s1, 0x40(sp)
80202678: 26 65        	ld	a0, 0x48(sp)
8020267a: c6 65        	ld	a1, 0x50(sp)
8020267c: 66 66        	ld	a2, 0x58(sp)
8020267e: 86 76        	ld	a3, 0x60(sp)
80202680: 26 77        	ld	a4, 0x68(sp)
80202682: c6 77        	ld	a5, 0x70(sp)
80202684: 66 78        	ld	a6, 0x78(sp)
80202686: 8a 68        	ld	a7, 0x80(sp)
80202688: 2a 69        	ld	s2, 0x88(sp)
8020268a: ca 69        	ld	s3, 0x90(sp)
8020268c: 6a 6a        	ld	s4, 0x98(sp)
8020268e: 8a 7a        	ld	s5, 0xa0(sp)
80202690: 2a 7b        	ld	s6, 0xa8(sp)
80202692: ca 7b        	ld	s7, 0xb0(sp)
80202694: 6a 7c        	ld	s8, 0xb8(sp)
80202696: 8e 6c        	ld	s9, 0xc0(sp)
80202698: 2e 6d        	ld	s10, 0xc8(sp)
8020269a: ce 6d        	ld	s11, 0xd0(sp)
8020269c: 6e 6e        	ld	t3, 0xd8(sp)
8020269e: 8e 7e        	ld	t4, 0xe0(sp)
802026a0: 2e 7f        	ld	t5, 0xe8(sp)
802026a2: ce 7f        	ld	t6, 0xf0(sp)
802026a4: 11 61        	addi	sp, sp, 0x100
802026a6: 73 00 20 10  	sret

00000000802026aa <_ZN2os4trap10ktrap_init17h12f9fa4559123719E>:
; pub fn ktrap_init() {
802026aa: 5d 71        	addi	sp, sp, -0x50
802026ac: 86 e4        	sd	ra, 0x48(sp)
802026ae: a2 e0        	sd	s0, 0x40(sp)
802026b0: 80 08        	addi	s0, sp, 0x50
;     intr_on();
802026b2: 97 90 00 00  	auipc	ra, 0x9
802026b6: e7 80 a0 71  	jalr	0x71a(ra) <_ZN2os5riscv7intr_on17hda6afb9f396c98abE>
802026ba: 01 45        	li	a0, 0x0
;         stvec::write(kernelvec as usize, TrapMode::Direct);
802026bc: a3 0f a4 fa  	sb	a0, -0x41(s0)
802026c0: 83 45 f4 fb  	lbu	a1, -0x41(s0)

00000000802026c4 <.Lpcrel_hi0>:
802026c4: 17 05 00 00  	auipc	a0, 0x0
802026c8: 13 05 c5 f5  	addi	a0, a0, -0xa4
802026cc: 97 90 00 00  	auipc	ra, 0x9
802026d0: e7 80 40 de  	jalr	-0x21c(ra) <_ZN5riscv8register5stvec5write17hf43881e0ca0273f5E>

00000000802026d4 <.Lpcrel_hi1>:
;     println!("Set kernel trap ok");
802026d4: 17 15 03 00  	auipc	a0, 0x31
802026d8: 93 05 45 21  	addi	a1, a0, 0x214
802026dc: 13 05 04 fc  	addi	a0, s0, -0x40
802026e0: 23 38 a4 fa  	sd	a0, -0x50(s0)
802026e4: 05 46        	li	a2, 0x1
802026e6: 97 50 00 00  	auipc	ra, 0x5
802026ea: e7 80 e0 cc  	jalr	-0x332(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
802026ee: 03 35 04 fb  	ld	a0, -0x50(s0)
802026f2: 97 50 01 00  	auipc	ra, 0x15
802026f6: e7 80 a0 79  	jalr	0x79a(ra) <_ZN2os7console5print17h042fcde166d682deE>
802026fa: a6 60        	ld	ra, 0x48(sp)
802026fc: 06 64        	ld	s0, 0x40(sp)
; }
802026fe: 61 61        	addi	sp, sp, 0x50
80202700: 82 80        	ret

0000000080202702 <usertarpret>:
; pub extern "C" fn usertarpret() {
80202702: 15 71        	addi	sp, sp, -0xe0
80202704: 86 ed        	sd	ra, 0xd8(sp)
80202706: a2 e9        	sd	s0, 0xd0(sp)
80202708: 80 11        	addi	s0, sp, 0xe0
;     intr_off();
8020270a: 97 90 00 00  	auipc	ra, 0x9
8020270e: e7 80 a0 6a  	jalr	0x6aa(ra) <_ZN2os5riscv8intr_off17h8d0625cb3ee9c045E>

0000000080202712 <.Lpcrel_hi2>:
;             TRAMPOLINE + (uservec as usize - trampoline as usize),
80202712: 17 05 03 00  	auipc	a0, 0x30
80202716: 93 05 e5 8e  	addi	a1, a0, -0x712

000000008020271a <.Lpcrel_hi3>:
8020271a: 17 05 03 00  	auipc	a0, 0x30
8020271e: 13 05 65 8e  	addi	a0, a0, -0x71a
80202722: 63 67 b5 02  	bltu	a0, a1, 0x80202750 <.Lpcrel_hi6>
80202726: 09 a0        	j	0x80202728 <.Lpcrel_hi4>

0000000080202728 <.Lpcrel_hi4>:
80202728: 17 05 03 00  	auipc	a0, 0x30
8020272c: 93 05 85 8d  	addi	a1, a0, -0x728

0000000080202730 <.Lpcrel_hi5>:
80202730: 17 05 03 00  	auipc	a0, 0x30
80202734: 13 05 05 8d  	addi	a0, a0, -0x730
80202738: b3 05 b5 40  	sub	a1, a0, a1
8020273c: 37 05 00 04  	lui	a0, 0x4000
80202740: 7d 35        	addiw	a0, a0, -0x1
80202742: 32 05        	slli	a0, a0, 0xc
80202744: 2e 95        	add	a0, a0, a1
80202746: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020274a: 63 6f b5 0c  	bltu	a0, a1, 0x80202828 <.Lpcrel_hi10>
8020274e: 39 a8        	j	0x8020276c <.Lpcrel_hi7+0x14>

0000000080202750 <.Lpcrel_hi6>:
80202750: 17 15 03 00  	auipc	a0, 0x31
80202754: 13 05 05 1d  	addi	a0, a0, 0x1d0

0000000080202758 <.Lpcrel_hi7>:
80202758: 97 15 03 00  	auipc	a1, 0x31
8020275c: 13 86 05 1b  	addi	a2, a1, 0x1b0
80202760: 93 05 10 02  	li	a1, 0x21
80202764: 97 e0 02 00  	auipc	ra, 0x2e
80202768: e7 80 40 ab  	jalr	-0x54c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020276c: 03 35 84 f8  	ld	a0, -0x78(s0)
80202770: 81 45        	li	a1, 0x0
;             stvec::TrapMode::Direct,
80202772: a3 0b b4 f8  	sb	a1, -0x69(s0)
;         stvec::write(
80202776: 83 45 74 f9  	lbu	a1, -0x69(s0)
8020277a: 97 90 00 00  	auipc	ra, 0x9
8020277e: e7 80 60 d3  	jalr	-0x2ca(ra) <_ZN5riscv8register5stvec5write17hf43881e0ca0273f5E>

0000000080202782 <.Lpcrel_hi8>:
;     let task = CPUS.my_proc().unwrap();
80202782: 17 a5 34 00  	auipc	a0, 0x34a
80202786: 13 05 e5 a7  	addi	a0, a0, -0x582
8020278a: 97 70 01 00  	auipc	ra, 0x17
8020278e: e7 80 20 d1  	jalr	-0x2ee(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80202792: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80202796: 03 35 04 fe  	ld	a0, -0x20(s0)
8020279a: 11 e9        	bnez	a0, 0x802027ae <.Lpcrel_hi9+0x10>
8020279c: 09 a0        	j	0x8020279e <.Lpcrel_hi9>

000000008020279e <.Lpcrel_hi9>:
;             None => unwrap_failed(),
8020279e: 17 15 03 00  	auipc	a0, 0x31
802027a2: 13 05 25 1e  	addi	a0, a0, 0x1e2
802027a6: 97 e0 02 00  	auipc	ra, 0x2e
802027aa: e7 80 20 52  	jalr	0x522(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
802027ae: 03 35 04 fe  	ld	a0, -0x20(s0)
802027b2: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802027b6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let task = CPUS.my_proc().unwrap();
802027ba: 23 38 a4 fa  	sd	a0, -0x50(s0)
;     let pid = task.pid();
802027be: 97 f0 ff ff  	auipc	ra, 0xfffff
802027c2: e7 80 e0 60  	jalr	0x60e(ra) <ekernel+0xffcb4dcc>
802027c6: 97 c0 00 00  	auipc	ra, 0xc
802027ca: e7 80 c0 8a  	jalr	-0x754(ra) <_ZN2os4task4task16TaskControlBlock3pid17h1ef377ec86e4a976E>
802027ce: aa 85        	mv	a1, a0
802027d0: 03 35 04 f6  	ld	a0, -0xa0(s0)
802027d4: 23 3c b4 f6  	sd	a1, -0x88(s0)
802027d8: 23 3c b4 fa  	sd	a1, -0x48(s0)
;     let trap_frame = task.get_trapframe();
802027dc: 97 f0 ff ff  	auipc	ra, 0xfffff
802027e0: e7 80 00 5f  	jalr	0x5f0(ra) <ekernel+0xffcb4dcc>
802027e4: 97 c0 00 00  	auipc	ra, 0xc
802027e8: e7 80 20 a6  	jalr	-0x59e(ra) <_ZN2os4task4task16TaskControlBlock13get_trapframe17h5eacf2fb51701e7bE>
802027ec: 23 38 a4 f6  	sd	a0, -0x90(s0)
802027f0: aa 85        	mv	a1, a0
802027f2: 23 34 b4 f6  	sd	a1, -0x98(s0)
802027f6: 23 30 a4 fc  	sd	a0, -0x40(s0)
;     trap_frame.kernel_satp = riscv::register::satp::read().bits();
802027fa: 97 70 01 00  	auipc	ra, 0x17
802027fe: e7 80 20 dc  	jalr	-0x23e(ra) <_ZN5riscv8register4satp4read17h8053bd2422377ff1E>
80202802: 23 3c a4 f8  	sd	a0, -0x68(s0)
80202806: 13 05 84 f9  	addi	a0, s0, -0x68
8020280a: 97 70 01 00  	auipc	ra, 0x17
8020280e: e7 80 c0 d9  	jalr	-0x264(ra) <_ZN5riscv8register4satp4Satp4bits17hf8d50d8b052307a9E>
80202812: 03 36 04 f7  	ld	a2, -0x90(s0)
80202816: aa 85        	mv	a1, a0
80202818: 03 35 84 f7  	ld	a0, -0x88(s0)
8020281c: 0c e2        	sd	a1, 0x0(a2)
;     trap_frame.kernel_sp = kstack!(pid) + KERNEL_STACK_SIZE;
8020281e: 05 05        	addi	a0, a0, 0x1
80202820: 23 30 a4 f8  	sd	a0, -0x80(s0)
80202824: 0d c5        	beqz	a0, 0x8020284e <.Lpcrel_hi12>
80202826: 31 a8        	j	0x80202842 <.Lpcrel_hi11+0x12>

0000000080202828 <.Lpcrel_hi10>:
;             TRAMPOLINE + (uservec as usize - trampoline as usize),
80202828: 17 15 03 00  	auipc	a0, 0x31
8020282c: 13 05 85 13  	addi	a0, a0, 0x138

0000000080202830 <.Lpcrel_hi11>:
80202830: 97 15 03 00  	auipc	a1, 0x31
80202834: 13 86 85 11  	addi	a2, a1, 0x118
80202838: f1 45        	li	a1, 0x1c
8020283a: 97 e0 02 00  	auipc	ra, 0x2e
8020283e: e7 80 e0 9d  	jalr	-0x622(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80202842: 11 45        	li	a0, 0x4
80202844: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80202848: 01 45        	li	a0, 0x0
;     trap_frame.kernel_sp = kstack!(pid) + KERNEL_STACK_SIZE;
8020284a: 1d e9        	bnez	a0, 0x80202880 <.Lpcrel_hi14>
8020284c: 31 a8        	j	0x80202868 <.Lpcrel_hi13+0x12>

000000008020284e <.Lpcrel_hi12>:
8020284e: 17 15 03 00  	auipc	a0, 0x31
80202852: 13 05 25 11  	addi	a0, a0, 0x112

0000000080202856 <.Lpcrel_hi13>:
80202856: 97 15 03 00  	auipc	a1, 0x31
8020285a: 13 86 25 14  	addi	a2, a1, 0x142
8020285e: f1 45        	li	a1, 0x1c
80202860: 97 e0 02 00  	auipc	ra, 0x2e
80202864: e7 80 80 9b  	jalr	-0x648(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80202868: 03 35 04 f8  	ld	a0, -0x80(s0)
8020286c: 83 35 84 f5  	ld	a1, -0xa8(s0)
;     trap_frame.kernel_sp = kstack!(pid) + KERNEL_STACK_SIZE;
80202870: 33 06 b5 02  	mul	a2, a0, a1
80202874: 23 38 c4 f4  	sd	a2, -0xb0(s0)
80202878: 33 35 b5 02  	mulhu	a0, a0, a1
8020287c: 1d e9        	bnez	a0, 0x802028b2 <.Lpcrel_hi16>
8020287e: 31 a8        	j	0x8020289a <.Lpcrel_hi15+0x12>

0000000080202880 <.Lpcrel_hi14>:
80202880: 17 15 03 00  	auipc	a0, 0x31
80202884: 13 05 05 0e  	addi	a0, a0, 0xe0

0000000080202888 <.Lpcrel_hi15>:
80202888: 97 15 03 00  	auipc	a1, 0x31
8020288c: 13 86 05 11  	addi	a2, a1, 0x110
80202890: f1 45        	li	a1, 0x1c
80202892: 97 e0 02 00  	auipc	ra, 0x2e
80202896: e7 80 60 98  	jalr	-0x67a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020289a: 83 35 04 f5  	ld	a1, -0xb0(s0)
;     trap_frame.kernel_sp = kstack!(pid) + KERNEL_STACK_SIZE;
8020289e: 13 95 c5 00  	slli	a0, a1, 0xc
802028a2: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802028a6: 13 95 c5 00  	slli	a0, a1, 0xc
802028aa: 31 81        	srli	a0, a0, 0xc
802028ac: 63 1e b5 02  	bne	a0, a1, 0x802028e8 <.Lpcrel_hi18>
802028b0: 39 a8        	j	0x802028ce <.Lpcrel_hi17+0x14>

00000000802028b2 <.Lpcrel_hi16>:
802028b2: 17 15 03 00  	auipc	a0, 0x31
802028b6: 13 05 e5 0f  	addi	a0, a0, 0xfe

00000000802028ba <.Lpcrel_hi17>:
802028ba: 97 15 03 00  	auipc	a1, 0x31
802028be: 13 86 e5 0d  	addi	a2, a1, 0xde
802028c2: 93 05 10 02  	li	a1, 0x21
802028c6: 97 e0 02 00  	auipc	ra, 0x2e
802028ca: e7 80 20 95  	jalr	-0x6ae(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802028ce: 83 35 84 f4  	ld	a1, -0xb8(s0)
802028d2: 37 05 00 02  	lui	a0, 0x2000
802028d6: 7d 35        	addiw	a0, a0, -0x1
802028d8: 36 05        	slli	a0, a0, 0xd
;     trap_frame.kernel_sp = kstack!(pid) + KERNEL_STACK_SIZE;
802028da: 33 06 b5 40  	sub	a2, a0, a1
802028de: 23 30 c4 f4  	sd	a2, -0xc0(s0)
802028e2: 63 6a b5 02  	bltu	a0, a1, 0x80202916 <.Lpcrel_hi20>
802028e6: 39 a8        	j	0x80202904 <.Lpcrel_hi19+0x14>

00000000802028e8 <.Lpcrel_hi18>:
802028e8: 17 15 03 00  	auipc	a0, 0x31
802028ec: 13 05 85 0c  	addi	a0, a0, 0xc8

00000000802028f0 <.Lpcrel_hi19>:
802028f0: 97 15 03 00  	auipc	a1, 0x31
802028f4: 13 86 85 0a  	addi	a2, a1, 0xa8
802028f8: 93 05 10 02  	li	a1, 0x21
802028fc: 97 e0 02 00  	auipc	ra, 0x2e
80202900: e7 80 c0 91  	jalr	-0x6e4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80202904: 83 35 04 f4  	ld	a1, -0xc0(s0)
80202908: 0d 65        	lui	a0, 0x3
;     trap_frame.kernel_sp = kstack!(pid) + KERNEL_STACK_SIZE;
8020290a: 2e 95        	add	a0, a0, a1
8020290c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80202910: 63 68 b5 0a  	bltu	a0, a1, 0x802029c0 <.Lpcrel_hi25>
80202914: 39 a8        	j	0x80202932 <.Lpcrel_hi21+0x14>

0000000080202916 <.Lpcrel_hi20>:
80202916: 17 15 03 00  	auipc	a0, 0x31
8020291a: 13 05 a5 00  	addi	a0, a0, 0xa

000000008020291e <.Lpcrel_hi21>:
8020291e: 97 15 03 00  	auipc	a1, 0x31
80202922: 13 86 a5 07  	addi	a2, a1, 0x7a
80202926: 93 05 10 02  	li	a1, 0x21
8020292a: 97 e0 02 00  	auipc	ra, 0x2e
8020292e: e7 80 e0 8e  	jalr	-0x712(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80202932: 83 35 84 f6  	ld	a1, -0x98(s0)
80202936: 03 35 84 f3  	ld	a0, -0xc8(s0)
;     trap_frame.kernel_sp = kstack!(pid) + KERNEL_STACK_SIZE;
8020293a: 88 e5        	sd	a0, 0x8(a1)

000000008020293c <.Lpcrel_hi22>:
;     trap_frame.kernel_trap = usertrap as usize;
8020293c: 17 05 00 00  	auipc	a0, 0x0
80202940: 13 05 e5 10  	addi	a0, a0, 0x10e
80202944: 88 e9        	sd	a0, 0x10(a1)
;     trap_frame.kernel_hartid = r_tp();
80202946: 97 90 00 00  	auipc	ra, 0x9
8020294a: e7 80 e0 49  	jalr	0x49e(ra) <_ZN2os5riscv4r_tp17h83d00e10394f4f69E>
8020294e: 83 35 84 f6  	ld	a1, -0x98(s0)
80202952: 88 f1        	sd	a0, 0x20(a1)
80202954: 01 45        	li	a0, 0x0
;         sstatus::set_spp(sstatus::SPP::User);
80202956: a3 03 a4 fa  	sb	a0, -0x59(s0)
8020295a: 03 45 74 fa  	lbu	a0, -0x59(s0)
8020295e: 97 30 00 00  	auipc	ra, 0x3
80202962: e7 80 c0 ec  	jalr	-0x134(ra) <_ZN5riscv8register7sstatus7set_spp17h05f6a530d19fceb1E>
;         sstatus::set_spie();
80202966: 97 30 00 00  	auipc	ra, 0x3
8020296a: e7 80 e0 ef  	jalr	-0x102(ra) <_ZN5riscv8register7sstatus8set_spie17h8a890525add31b71E>
8020296e: 03 35 84 f6  	ld	a0, -0x98(s0)
;     sepc::write(trap_frame.epc);
80202972: 08 6d        	ld	a0, 0x18(a0)
80202974: 97 e0 ff ff  	auipc	ra, 0xffffe
80202978: e7 80 c0 58  	jalr	0x58c(ra) <ekernel+0xffcb3f00>
8020297c: 03 35 04 f6  	ld	a0, -0xa0(s0)
;     let satp = task.pagetable_root().as_satp();
80202980: 97 f0 ff ff  	auipc	ra, 0xfffff
80202984: e7 80 c0 44  	jalr	0x44c(ra) <ekernel+0xffcb4dcc>
80202988: 97 c0 00 00  	auipc	ra, 0xc
8020298c: e7 80 40 9e  	jalr	-0x61c(ra) <_ZN2os4task4task16TaskControlBlock14pagetable_root17h7d6796303b5a7f29E>
80202990: 23 34 a4 fa  	sd	a0, -0x58(s0)
80202994: 13 05 84 fa  	addi	a0, s0, -0x58
80202998: 97 a0 00 00  	auipc	ra, 0xa
8020299c: e7 80 a0 9a  	jalr	-0x656(ra) <_ZN2os2vm10PhyPageNum7as_satp17he170600e9364cd52E>
802029a0: aa 85        	mv	a1, a0
802029a2: 23 38 b4 f2  	sd	a1, -0xd0(s0)
802029a6: 23 34 a4 fc  	sd	a0, -0x38(s0)

00000000802029aa <.Lpcrel_hi23>:
;     let fn_0: usize = TRAMPOLINE + (userret as usize - trampoline as usize);
802029aa: 17 f5 02 00  	auipc	a0, 0x2f
802029ae: 93 05 65 65  	addi	a1, a0, 0x656

00000000802029b2 <.Lpcrel_hi24>:
802029b2: 17 f5 02 00  	auipc	a0, 0x2f
802029b6: 13 05 a5 6e  	addi	a0, a0, 0x6ea
802029ba: 63 64 b5 04  	bltu	a0, a1, 0x80202a02 <.Lpcrel_hi29>
802029be: 31 a8        	j	0x802029da <.Lpcrel_hi27>

00000000802029c0 <.Lpcrel_hi25>:
;     trap_frame.kernel_sp = kstack!(pid) + KERNEL_STACK_SIZE;
802029c0: 17 15 03 00  	auipc	a0, 0x31
802029c4: 13 05 05 fa  	addi	a0, a0, -0x60

00000000802029c8 <.Lpcrel_hi26>:
802029c8: 97 15 03 00  	auipc	a1, 0x31
802029cc: 13 86 05 fd  	addi	a2, a1, -0x30
802029d0: f1 45        	li	a1, 0x1c
802029d2: 97 e0 02 00  	auipc	ra, 0x2e
802029d6: e7 80 60 84  	jalr	-0x7ba(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802029da <.Lpcrel_hi27>:
;     let fn_0: usize = TRAMPOLINE + (userret as usize - trampoline as usize);
802029da: 17 f5 02 00  	auipc	a0, 0x2f
802029de: 93 05 65 62  	addi	a1, a0, 0x626

00000000802029e2 <.Lpcrel_hi28>:
802029e2: 17 f5 02 00  	auipc	a0, 0x2f
802029e6: 13 05 a5 6b  	addi	a0, a0, 0x6ba
802029ea: b3 05 b5 40  	sub	a1, a0, a1
802029ee: 37 05 00 04  	lui	a0, 0x4000
802029f2: 7d 35        	addiw	a0, a0, -0x1
802029f4: 32 05        	slli	a0, a0, 0xc
802029f6: 2e 95        	add	a0, a0, a1
802029f8: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802029fc: 63 6a b5 02  	bltu	a0, a1, 0x80202a30 <.Lpcrel_hi31>
80202a00: 39 a8        	j	0x80202a1e <.Lpcrel_hi30+0x14>

0000000080202a02 <.Lpcrel_hi29>:
80202a02: 17 15 03 00  	auipc	a0, 0x31
80202a06: 13 05 e5 f1  	addi	a0, a0, -0xe2

0000000080202a0a <.Lpcrel_hi30>:
80202a0a: 97 15 03 00  	auipc	a1, 0x31
80202a0e: 13 86 e5 fc  	addi	a2, a1, -0x32
80202a12: 93 05 10 02  	li	a1, 0x21
80202a16: 97 e0 02 00  	auipc	ra, 0x2e
80202a1a: e7 80 20 80  	jalr	-0x7fe(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80202a1e: 83 35 84 f2  	ld	a1, -0xd8(s0)
80202a22: 03 35 04 f3  	ld	a0, -0xd0(s0)
;     let fn_0: usize = TRAMPOLINE + (userret as usize - trampoline as usize);
80202a26: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         let fn_0: extern "C" fn(usize) -> ! = core::mem::transmute(fn_0);
80202a2a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         fn_0(satp)
80202a2e: 82 95        	jalr	a1

0000000080202a30 <.Lpcrel_hi31>:
;     let fn_0: usize = TRAMPOLINE + (userret as usize - trampoline as usize);
80202a30: 17 15 03 00  	auipc	a0, 0x31
80202a34: 13 05 05 f3  	addi	a0, a0, -0xd0

0000000080202a38 <.Lpcrel_hi32>:
80202a38: 97 15 03 00  	auipc	a1, 0x31
80202a3c: 13 86 85 fb  	addi	a2, a1, -0x48
80202a40: f1 45        	li	a1, 0x1c
80202a42: 97 d0 02 00  	auipc	ra, 0x2d
80202a46: e7 80 60 7d  	jalr	0x7d6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080202a4a <usertrap>:
; pub fn usertrap() {
80202a4a: 13 01 01 c5  	addi	sp, sp, -0x3b0
80202a4e: 23 34 11 3a  	sd	ra, 0x3a8(sp)
80202a52: 23 30 81 3a  	sd	s0, 0x3a0(sp)
80202a56: 00 1f        	addi	s0, sp, 0x3b0
;     if (sstatus::read().bits() & SSTATUS_SPP) != 0 {
80202a58: 97 30 00 00  	auipc	ra, 0x3
80202a5c: e7 80 a0 ce  	jalr	-0x316(ra) <_ZN5riscv8register7sstatus4read17hd59de933bfb9d8d0E>
80202a60: 23 3c a4 ca  	sd	a0, -0x348(s0)
80202a64: 13 05 84 cb  	addi	a0, s0, -0x348
80202a68: 97 30 00 00  	auipc	ra, 0x3
80202a6c: e7 80 20 d9  	jalr	-0x26e(ra) <_ZN5riscv8register7sstatus7Sstatus4bits17h76b45ecf1725a589E>
80202a70: 13 75 05 10  	andi	a0, a0, 0x100
80202a74: 4d e9        	bnez	a0, 0x80202b26 <.Lpcrel_hi36>
80202a76: 09 a0        	j	0x80202a78 <usertrap+0x2e>
80202a78: 01 45        	li	a0, 0x0
;         stvec::write(kernelvec as usize, TrapMode::Direct);
80202a7a: a3 0a a4 ce  	sb	a0, -0x30b(s0)
80202a7e: 83 45 54 cf  	lbu	a1, -0x30b(s0)

0000000080202a82 <.Lpcrel_hi33>:
80202a82: 17 05 00 00  	auipc	a0, 0x0
80202a86: 13 05 e5 b9  	addi	a0, a0, -0x462
80202a8a: 97 90 00 00  	auipc	ra, 0x9
80202a8e: e7 80 60 a2  	jalr	-0x5da(ra) <_ZN5riscv8register5stvec5write17hf43881e0ca0273f5E>

0000000080202a92 <.Lpcrel_hi34>:
;     let task = CPUS.my_proc().unwrap();
80202a92: 17 95 34 00  	auipc	a0, 0x349
80202a96: 13 05 e5 76  	addi	a0, a0, 0x76e
80202a9a: 97 70 01 00  	auipc	ra, 0x17
80202a9e: e7 80 20 a0  	jalr	-0x5fe(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80202aa2: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80202aa6: 03 35 04 fe  	ld	a0, -0x20(s0)
80202aaa: 11 e9        	bnez	a0, 0x80202abe <.Lpcrel_hi35+0x10>
80202aac: 09 a0        	j	0x80202aae <.Lpcrel_hi35>

0000000080202aae <.Lpcrel_hi35>:
;             None => unwrap_failed(),
80202aae: 17 15 03 00  	auipc	a0, 0x31
80202ab2: 13 05 a5 f5  	addi	a0, a0, -0xa6
80202ab6: 97 e0 02 00  	auipc	ra, 0x2e
80202aba: e7 80 20 21  	jalr	0x212(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80202abe: 03 35 04 fe  	ld	a0, -0x20(s0)
80202ac2: 23 30 a4 ca  	sd	a0, -0x360(s0)
80202ac6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let task = CPUS.my_proc().unwrap();
80202aca: 23 38 a4 f0  	sd	a0, -0xf0(s0)
;     let trapframe = task.get_trapframe();
80202ace: 97 f0 ff ff  	auipc	ra, 0xfffff
80202ad2: e7 80 e0 2f  	jalr	0x2fe(ra) <ekernel+0xffcb4dcc>
80202ad6: 97 b0 00 00  	auipc	ra, 0xb
80202ada: e7 80 00 77  	jalr	0x770(ra) <_ZN2os4task4task16TaskControlBlock13get_trapframe17h5eacf2fb51701e7bE>
80202ade: 23 38 a4 ca  	sd	a0, -0x350(s0)
80202ae2: aa 85        	mv	a1, a0
80202ae4: 23 34 b4 ca  	sd	a1, -0x358(s0)
80202ae8: 23 3c a4 f0  	sd	a0, -0xe8(s0)
;     trapframe.epc = sepc::read();
80202aec: 97 e0 ff ff  	auipc	ra, 0xffffe
80202af0: e7 80 00 3e  	jalr	0x3e0(ra) <ekernel+0xffcb3ecc>
80202af4: 83 35 04 cb  	ld	a1, -0x350(s0)
80202af8: 88 ed        	sd	a0, 0x18(a1)
;     match scause::read().cause() {
80202afa: 97 40 01 00  	auipc	ra, 0x14
80202afe: e7 80 20 8f  	jalr	-0x70e(ra) <_ZN5riscv8register6scause4read17h6105b19ed50bbd02E>
80202b02: 23 3c a4 ce  	sd	a0, -0x308(s0)
80202b06: 13 05 84 cf  	addi	a0, s0, -0x308
80202b0a: 97 40 01 00  	auipc	ra, 0x14
80202b0e: e7 80 40 9a  	jalr	-0x65c(ra) <_ZN5riscv8register6scause6Scause5cause17h08038014cf4d93b4E>
80202b12: 05 89        	andi	a0, a0, 0x1
80202b14: 23 0b a4 ce  	sb	a0, -0x30a(s0)
80202b18: a3 0b b4 ce  	sb	a1, -0x309(s0)
80202b1c: 03 45 64 cf  	lbu	a0, -0x30a(s0)
80202b20: 05 89        	andi	a0, a0, 0x1
80202b22: 0d c9        	beqz	a0, 0x80202b54 <.Lpcrel_hi37+0x10>
80202b24: 35 a8        	j	0x80202b60 <.Lpcrel_hi37+0x1c>

0000000080202b26 <.Lpcrel_hi36>:
;         panic!("not from user");
80202b26: 17 15 03 00  	auipc	a0, 0x31
80202b2a: 93 05 25 fd  	addi	a1, a0, -0x2e
80202b2e: 13 05 04 cc  	addi	a0, s0, -0x340
80202b32: 23 3c a4 c8  	sd	a0, -0x368(s0)
80202b36: 05 46        	li	a2, 0x1
80202b38: 97 50 00 00  	auipc	ra, 0x5
80202b3c: e7 80 c0 87  	jalr	-0x784(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
80202b40: 03 35 84 c9  	ld	a0, -0x368(s0)

0000000080202b44 <.Lpcrel_hi37>:
80202b44: 97 15 03 00  	auipc	a1, 0x31
80202b48: 93 85 45 fc  	addi	a1, a1, -0x3c
80202b4c: 97 d0 02 00  	auipc	ra, 0x2d
80202b50: e7 80 c0 65  	jalr	0x65c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
;     match scause::read().cause() {
80202b54: 03 45 74 cf  	lbu	a0, -0x309(s0)
80202b58: 95 45        	li	a1, 0x5
80202b5a: 63 07 b5 02  	beq	a0, a1, 0x80202b88 <.Lpcrel_hi37+0x44>
80202b5e: 35 a8        	j	0x80202b9a <.Lpcrel_hi37+0x56>
80202b60: 03 45 74 cf  	lbu	a0, -0x309(s0)
80202b64: 23 38 a4 c8  	sd	a0, -0x370(s0)
80202b68: 9d 45        	li	a1, 0x7
80202b6a: 63 0e b5 26  	beq	a0, a1, 0x80202de6 <.Lpcrel_hi42+0x26>
80202b6e: 09 a0        	j	0x80202b70 <.Lpcrel_hi37+0x2c>
80202b70: 03 35 04 c9  	ld	a0, -0x370(s0)
80202b74: a9 45        	li	a1, 0xa
;     match scause::read().cause() {
80202b76: 63 08 b5 28  	beq	a0, a1, 0x80202e06 <.Lpcrel_hi42+0x46>
80202b7a: 09 a0        	j	0x80202b7c <.Lpcrel_hi37+0x38>
80202b7c: 03 35 04 c9  	ld	a0, -0x370(s0)
80202b80: ad 45        	li	a1, 0xb
;     match scause::read().cause() {
80202b82: 63 03 b5 2a  	beq	a0, a1, 0x80202e28 <.Lpcrel_hi43>
80202b86: 11 a8        	j	0x80202b9a <.Lpcrel_hi37+0x56>
;             ktrap::time_intr();
80202b88: 97 30 01 00  	auipc	ra, 0x13
80202b8c: e7 80 20 da  	jalr	-0x25e(ra) <_ZN2os4trap5ktrap9time_intr17hf773b282dcd6ff41E>
;             usertarpret();
80202b90: 97 00 00 00  	auipc	ra, 0x0
80202b94: e7 80 20 b7  	jalr	-0x48e(ra) <usertarpret>
80202b98: 25 ac        	j	0x80202dd0 <.Lpcrel_hi42+0x10>
;                 scause::read().cause(),
80202b9a: 97 40 01 00  	auipc	ra, 0x14
80202b9e: e7 80 20 85  	jalr	-0x7ae(ra) <_ZN5riscv8register6scause4read17h6105b19ed50bbd02E>
80202ba2: 23 30 a4 da  	sd	a0, -0x260(s0)
80202ba6: 13 05 04 da  	addi	a0, s0, -0x260
80202baa: 97 40 01 00  	auipc	ra, 0x14
80202bae: e7 80 40 90  	jalr	-0x6fc(ra) <_ZN5riscv8register6scause6Scause5cause17h08038014cf4d93b4E>
80202bb2: 05 89        	andi	a0, a0, 0x1
80202bb4: 23 0f a4 d8  	sb	a0, -0x262(s0)
80202bb8: a3 0f b4 d8  	sb	a1, -0x261(s0)
80202bbc: 93 05 e4 d9  	addi	a1, s0, -0x262
80202bc0: 23 38 b4 fc  	sd	a1, -0x30(s0)

0000000080202bc4 <.Lpcrel_hi38>:
;         Self::new(x, Debug::fmt)
80202bc4: 17 45 01 00  	auipc	a0, 0x14
80202bc8: 13 05 65 95  	addi	a0, a0, -0x6aa
80202bcc: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80202bd0: 23 30 b4 fc  	sd	a1, -0x40(s0)
80202bd4: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     }
80202bd8: 03 35 04 fc  	ld	a0, -0x40(s0)
80202bdc: 23 34 a4 c6  	sd	a0, -0x398(s0)
80202be0: 03 35 84 fc  	ld	a0, -0x38(s0)
80202be4: 23 38 a4 c6  	sd	a0, -0x390(s0)
;                 stval::read()
80202be8: 97 e0 ff ff  	auipc	ra, 0xffffe
80202bec: e7 80 c0 fc  	jalr	-0x34(ra) <ekernel+0xffcb3bb4>
80202bf0: 83 36 84 c6  	ld	a3, -0x398(s0)
80202bf4: 03 36 04 c7  	ld	a2, -0x390(s0)
80202bf8: 23 34 a4 da  	sd	a0, -0x258(s0)
80202bfc: 93 05 84 da  	addi	a1, s0, -0x258
80202c00: 23 38 b4 fa  	sd	a1, -0x50(s0)

0000000080202c04 <.Lpcrel_hi39>:
;         Self::new(x, LowerHex::fmt)
80202c04: 17 c5 02 00  	auipc	a0, 0x2c
80202c08: 13 05 05 3b  	addi	a0, a0, 0x3b0
80202c0c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80202c10: 23 30 b4 fa  	sd	a1, -0x60(s0)
80202c14: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
80202c18: 83 35 04 fa  	ld	a1, -0x60(s0)
80202c1c: 03 35 84 fa  	ld	a0, -0x58(s0)
;             println!(
80202c20: 23 3c d4 d6  	sd	a3, -0x288(s0)
80202c24: 23 30 c4 d8  	sd	a2, -0x280(s0)
80202c28: 23 34 b4 d8  	sd	a1, -0x278(s0)
80202c2c: 23 38 a4 d8  	sd	a0, -0x270(s0)
80202c30: 0d 46        	li	a2, 0x3
80202c32: a3 0f c4 e4  	sb	a2, -0x1a1(s0)
80202c36: 09 48        	li	a6, 0x2
80202c38: 23 30 04 e7  	sd	a6, -0x1a0(s0)
80202c3c: 23 38 04 e7  	sd	a6, -0x190(s0)
80202c40: 83 48 f4 e5  	lbu	a7, -0x1a1(s0)
80202c44: 03 37 04 e6  	ld	a4, -0x1a0(s0)
80202c48: 83 36 84 e6  	ld	a3, -0x198(s0)
80202c4c: 83 35 04 e7  	ld	a1, -0x190(s0)
80202c50: 03 35 84 e7  	ld	a0, -0x188(s0)
80202c54: 81 47        	li	a5, 0x0
80202c56: 23 34 f4 f6  	sd	a5, -0x98(s0)
80202c5a: 93 02 00 02  	li	t0, 0x20
80202c5e: 23 2a 54 f6  	sw	t0, -0x8c(s0)
80202c62: a3 0d 14 f7  	sb	a7, -0x85(s0)
80202c66: 23 2e f4 f6  	sw	a5, -0x84(s0)
80202c6a: 23 30 e4 f8  	sd	a4, -0x80(s0)
80202c6e: 23 34 d4 f8  	sd	a3, -0x78(s0)
80202c72: 23 38 b4 f8  	sd	a1, -0x70(s0)
80202c76: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         Self { position, fill, align, flags, precision, width }
80202c7a: 23 30 f4 e4  	sd	a5, -0x1c0(s0)
80202c7e: 23 24 54 e4  	sw	t0, -0x1b8(s0)
80202c82: 23 08 14 e5  	sb	a7, -0x1b0(s0)
80202c86: 23 26 f4 e4  	sw	a5, -0x1b4(s0)
80202c8a: 23 30 e4 e2  	sd	a4, -0x1e0(s0)
80202c8e: 23 34 d4 e2  	sd	a3, -0x1d8(s0)
80202c92: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
80202c96: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
;             println!(
80202c9a: a3 0f c4 ea  	sb	a2, -0x141(s0)
80202c9e: 23 30 04 ed  	sd	a6, -0x140(s0)
80202ca2: 23 38 04 ed  	sd	a6, -0x130(s0)
80202ca6: 83 48 f4 eb  	lbu	a7, -0x141(s0)
80202caa: 03 37 04 ec  	ld	a4, -0x140(s0)
80202cae: 83 36 84 ec  	ld	a3, -0x138(s0)
80202cb2: 83 35 04 ed  	ld	a1, -0x130(s0)
80202cb6: 03 35 84 ed  	ld	a0, -0x128(s0)
80202cba: 05 43        	li	t1, 0x1
80202cbc: 23 30 64 c8  	sd	t1, -0x380(s0)
80202cc0: 23 38 64 f2  	sd	t1, -0xd0(s0)
80202cc4: 23 2e 54 f2  	sw	t0, -0xc4(s0)
80202cc8: a3 01 14 f5  	sb	a7, -0xbd(s0)
80202ccc: 91 47        	li	a5, 0x4
80202cce: 23 22 f4 f4  	sw	a5, -0xbc(s0)
80202cd2: 23 34 e4 f4  	sd	a4, -0xb8(s0)
80202cd6: 23 38 d4 f4  	sd	a3, -0xb0(s0)
80202cda: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80202cde: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         Self { position, fill, align, flags, precision, width }
80202ce2: 23 30 64 ea  	sd	t1, -0x160(s0)
80202ce6: 23 24 54 ea  	sw	t0, -0x158(s0)
80202cea: 23 08 14 eb  	sb	a7, -0x150(s0)
80202cee: 23 26 f4 ea  	sw	a5, -0x154(s0)
80202cf2: 23 30 e4 e8  	sd	a4, -0x180(s0)
80202cf6: 23 34 d4 e8  	sd	a3, -0x178(s0)
80202cfa: 23 38 b4 e8  	sd	a1, -0x170(s0)
80202cfe: 23 3c a4 e8  	sd	a0, -0x168(s0)
;             println!(
80202d02: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80202d06: 23 30 a4 de  	sd	a0, -0x220(s0)
80202d0a: 03 35 84 e4  	ld	a0, -0x1b8(s0)
80202d0e: 23 3c a4 dc  	sd	a0, -0x228(s0)
80202d12: 03 35 04 e4  	ld	a0, -0x1c0(s0)
80202d16: 23 38 a4 dc  	sd	a0, -0x230(s0)
80202d1a: 03 35 84 e3  	ld	a0, -0x1c8(s0)
80202d1e: 23 34 a4 dc  	sd	a0, -0x238(s0)
80202d22: 03 35 04 e3  	ld	a0, -0x1d0(s0)
80202d26: 23 30 a4 dc  	sd	a0, -0x240(s0)
80202d2a: 03 35 84 e2  	ld	a0, -0x1d8(s0)
80202d2e: 23 3c a4 da  	sd	a0, -0x248(s0)
80202d32: 03 35 04 e2  	ld	a0, -0x1e0(s0)
80202d36: 23 38 a4 da  	sd	a0, -0x250(s0)
80202d3a: 03 35 04 eb  	ld	a0, -0x150(s0)
80202d3e: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
80202d42: 03 35 84 ea  	ld	a0, -0x158(s0)
80202d46: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
80202d4a: 03 35 04 ea  	ld	a0, -0x160(s0)
80202d4e: 23 34 a4 e0  	sd	a0, -0x1f8(s0)
80202d52: 03 35 84 e9  	ld	a0, -0x168(s0)
80202d56: 23 30 a4 e0  	sd	a0, -0x200(s0)
80202d5a: 03 35 04 e9  	ld	a0, -0x170(s0)
80202d5e: 23 3c a4 de  	sd	a0, -0x208(s0)
80202d62: 03 35 84 e8  	ld	a0, -0x178(s0)
80202d66: 23 38 a4 de  	sd	a0, -0x210(s0)
80202d6a: 03 35 04 e8  	ld	a0, -0x180(s0)
80202d6e: 23 34 a4 de  	sd	a0, -0x218(s0)

0000000080202d72 <.Lpcrel_hi40>:
80202d72: 17 15 03 00  	auipc	a0, 0x31
80202d76: 93 05 e5 d0  	addi	a1, a0, -0x2f2
80202d7a: 13 05 84 d4  	addi	a0, s0, -0x2b8
80202d7e: 23 3c a4 c6  	sd	a0, -0x388(s0)
80202d82: 93 06 84 d7  	addi	a3, s0, -0x288
80202d86: 93 07 04 db  	addi	a5, s0, -0x250
80202d8a: 42 87        	mv	a4, a6
80202d8c: 97 40 00 00  	auipc	ra, 0x4
80202d90: e7 80 80 51  	jalr	0x518(ra) <_ZN4core3fmt9Arguments16new_v1_formatted17h3e99fd036cfd62bdE>
80202d94: 03 35 84 c7  	ld	a0, -0x388(s0)
80202d98: 97 50 01 00  	auipc	ra, 0x15
80202d9c: e7 80 40 0f  	jalr	0xf4(ra) <_ZN2os7console5print17h042fcde166d682deE>
80202da0: 03 36 04 c8  	ld	a2, -0x380(s0)

0000000080202da4 <.Lpcrel_hi41>:
;             panic!("not write");
80202da4: 17 15 03 00  	auipc	a0, 0x31
80202da8: 93 05 c5 d1  	addi	a1, a0, -0x2e4
80202dac: 13 05 04 ee  	addi	a0, s0, -0x120
80202db0: 23 34 a4 c8  	sd	a0, -0x378(s0)
80202db4: 97 40 00 00  	auipc	ra, 0x4
80202db8: e7 80 00 60  	jalr	0x600(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
80202dbc: 03 35 84 c8  	ld	a0, -0x378(s0)

0000000080202dc0 <.Lpcrel_hi42>:
80202dc0: 97 15 03 00  	auipc	a1, 0x31
80202dc4: 93 85 05 d1  	addi	a1, a1, -0x2f0
80202dc8: 97 d0 02 00  	auipc	ra, 0x2d
80202dcc: e7 80 00 3e  	jalr	0x3e0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
;     usertarpret()
80202dd0: 97 00 00 00  	auipc	ra, 0x0
80202dd4: e7 80 20 93  	jalr	-0x6ce(ra) <usertarpret>
80202dd8: 83 30 81 3a  	ld	ra, 0x3a8(sp)
80202ddc: 03 34 01 3a  	ld	s0, 0x3a0(sp)
; }
80202de0: 13 01 01 3b  	addi	sp, sp, 0x3b0
80202de4: 82 80        	ret
;             trapframe.epc = sepc::read();
80202de6: 97 e0 ff ff  	auipc	ra, 0xffffe
80202dea: e7 80 60 0e  	jalr	0xe6(ra) <ekernel+0xffcb3ecc>
80202dee: aa 85        	mv	a1, a0
80202df0: 03 35 84 ca  	ld	a0, -0x358(s0)
80202df4: 0c ed        	sd	a1, 0x18(a0)
;             trapframe.epc += 4;
80202df6: 0c 6d        	ld	a1, 0x18(a0)
80202df8: 13 85 45 00  	addi	a0, a1, 0x4
80202dfc: 23 30 a4 c6  	sd	a0, -0x3a0(s0)
80202e00: 63 66 b5 08  	bltu	a0, a1, 0x80202e8c <.Lpcrel_hi45>
80202e04: 89 a8        	j	0x80202e56 <.Lpcrel_hi44+0x10>
;             let va = stval::read();
80202e06: 97 e0 ff ff  	auipc	ra, 0xffffe
80202e0a: e7 80 e0 da  	jalr	-0x252(ra) <ekernel+0xffcb3bb4>
80202e0e: 83 35 04 ca  	ld	a1, -0x360(s0)
80202e12: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;             copy_on_write(va, task);
80202e16: 97 30 00 00  	auipc	ra, 0x3
80202e1a: e7 80 e0 53  	jalr	0x53e(ra) <_ZN2os3cow13copy_on_write17h69b3be66c6288532E>
;             usertarpret();
80202e1e: 97 00 00 00  	auipc	ra, 0x0
80202e22: e7 80 40 8e  	jalr	-0x71c(ra) <usertarpret>
80202e26: 6d b7        	j	0x80202dd0 <.Lpcrel_hi42+0x10>

0000000080202e28 <.Lpcrel_hi43>:
;             panic!("store pagefault");
80202e28: 17 15 03 00  	auipc	a0, 0x31
80202e2c: 93 05 05 c2  	addi	a1, a0, -0x3e0
80202e30: 13 05 84 d1  	addi	a0, s0, -0x2e8
80202e34: 23 3c a4 c4  	sd	a0, -0x3a8(s0)
80202e38: 05 46        	li	a2, 0x1
80202e3a: 97 40 00 00  	auipc	ra, 0x4
80202e3e: e7 80 a0 57  	jalr	0x57a(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
80202e42: 03 35 84 c5  	ld	a0, -0x3a8(s0)

0000000080202e46 <.Lpcrel_hi44>:
80202e46: 97 15 03 00  	auipc	a1, 0x31
80202e4a: 93 85 25 c1  	addi	a1, a1, -0x3ee
80202e4e: 97 d0 02 00  	auipc	ra, 0x2d
80202e52: e7 80 a0 35  	jalr	0x35a(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80202e56: 83 35 84 ca  	ld	a1, -0x358(s0)
80202e5a: 03 35 04 c6  	ld	a0, -0x3a0(s0)
;             trapframe.epc += 4;
80202e5e: 88 ed        	sd	a0, 0x18(a1)
;             let ret = syscall(trapframe.a7, [trapframe.a0, trapframe.a1, trapframe.a2]);
80202e60: c8 75        	ld	a0, 0xa8(a1)
80202e62: b4 79        	ld	a3, 0x70(a1)
80202e64: b0 7d        	ld	a2, 0x78(a1)
80202e66: cc 61        	ld	a1, 0x80(a1)
80202e68: 23 30 d4 d0  	sd	a3, -0x300(s0)
80202e6c: 23 34 c4 d0  	sd	a2, -0x2f8(s0)
80202e70: 23 38 b4 d0  	sd	a1, -0x2f0(s0)
80202e74: 93 05 04 d0  	addi	a1, s0, -0x300
80202e78: 97 40 00 00  	auipc	ra, 0x4
80202e7c: e7 80 80 65  	jalr	0x658(ra) <syscall>
80202e80: 83 35 84 ca  	ld	a1, -0x358(s0)
80202e84: 23 30 a4 f2  	sd	a0, -0xe0(s0)
;             trapframe.a0 = ret as usize;
80202e88: a8 f9        	sd	a0, 0x70(a1)
;         }
80202e8a: 99 b7        	j	0x80202dd0 <.Lpcrel_hi42+0x10>

0000000080202e8c <.Lpcrel_hi45>:
;             trapframe.epc += 4;
80202e8c: 17 15 03 00  	auipc	a0, 0x31
80202e90: 13 05 45 ad  	addi	a0, a0, -0x52c

0000000080202e94 <.Lpcrel_hi46>:
80202e94: 97 15 03 00  	auipc	a1, 0x31
80202e98: 13 86 c5 b8  	addi	a2, a1, -0x474
80202e9c: f1 45        	li	a1, 0x1c
80202e9e: 97 d0 02 00  	auipc	ra, 0x2d
80202ea2: e7 80 a0 37  	jalr	0x37a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080202ea6 <kernel_trap>:
; pub fn kernel_trap() -> () {
80202ea6: 13 01 01 bb  	addi	sp, sp, -0x450
80202eaa: 23 34 11 44  	sd	ra, 0x448(sp)
80202eae: 23 30 81 44  	sd	s0, 0x440(sp)
80202eb2: 13 04 01 45  	addi	s0, sp, 0x450
;     intr_off();
80202eb6: 97 90 00 00  	auipc	ra, 0x9
80202eba: e7 80 e0 ef  	jalr	-0x102(ra) <_ZN2os5riscv8intr_off17h8d0625cb3ee9c045E>
;     let sepc = sepc::read();
80202ebe: 97 e0 ff ff  	auipc	ra, 0xffffe
80202ec2: e7 80 e0 00  	jalr	0xe(ra) <ekernel+0xffcb3ecc>
80202ec6: 23 30 a4 ea  	sd	a0, -0x160(s0)
;     let sstatus = sstatus::read();
80202eca: 97 30 00 00  	auipc	ra, 0x3
80202ece: e7 80 80 87  	jalr	-0x788(ra) <_ZN5riscv8register7sstatus4read17hd59de933bfb9d8d0E>
80202ed2: 23 38 a4 bc  	sd	a0, -0x430(s0)
;     let scause = scause::read();
80202ed6: 97 30 01 00  	auipc	ra, 0x13
80202eda: e7 80 60 51  	jalr	0x516(ra) <_ZN5riscv8register6scause4read17h6105b19ed50bbd02E>
80202ede: 23 3c a4 bc  	sd	a0, -0x428(s0)
;     let sscratch = sscratch::read();
80202ee2: 97 e0 ff ff  	auipc	ra, 0xffffe
80202ee6: e7 80 e0 ac  	jalr	-0x532(ra) <ekernel+0xffcb39b0>
80202eea: 23 34 a4 ea  	sd	a0, -0x158(s0)
;     let stcval = stval::read();
80202eee: 97 e0 ff ff  	auipc	ra, 0xffffe
80202ef2: e7 80 60 cc  	jalr	-0x33a(ra) <ekernel+0xffcb3bb4>
80202ef6: 23 30 a4 be  	sd	a0, -0x420(s0)
80202efa: 13 05 04 bd  	addi	a0, s0, -0x430
;     let s = sstatus.spp();
80202efe: 97 30 00 00  	auipc	ra, 0x3
80202f02: e7 80 e0 8b  	jalr	-0x742(ra) <_ZN5riscv8register7sstatus7Sstatus3spp17h48137d438440953bE>
80202f06: a3 07 a4 be  	sb	a0, -0x411(s0)
80202f0a: 93 05 f4 be  	addi	a1, s0, -0x411
80202f0e: 23 34 b4 fc  	sd	a1, -0x38(s0)

0000000080202f12 <.Lpcrel_hi47>:
;         Self::new(x, Debug::fmt)
80202f12: 17 35 00 00  	auipc	a0, 0x3
80202f16: 13 05 85 98  	addi	a0, a0, -0x678
80202f1a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80202f1e: 23 3c b4 fa  	sd	a1, -0x48(s0)
80202f22: 23 30 a4 fc  	sd	a0, -0x40(s0)
;     }
80202f26: 83 35 84 fb  	ld	a1, -0x48(s0)
80202f2a: 03 35 04 fc  	ld	a0, -0x40(s0)
;     println!("{:?}",s);
80202f2e: 23 30 b4 c2  	sd	a1, -0x3e0(s0)
80202f32: 23 34 a4 c2  	sd	a0, -0x3d8(s0)

0000000080202f36 <.Lpcrel_hi48>:
80202f36: 17 15 03 00  	auipc	a0, 0x31
80202f3a: 93 05 a5 be  	addi	a1, a0, -0x416
80202f3e: 13 05 04 bf  	addi	a0, s0, -0x410
80202f42: 23 34 a4 bc  	sd	a0, -0x438(s0)
80202f46: 09 46        	li	a2, 0x2
80202f48: 93 06 04 c2  	addi	a3, s0, -0x3e0
80202f4c: 05 47        	li	a4, 0x1
80202f4e: 97 40 00 00  	auipc	ra, 0x4
80202f52: e7 80 a0 39  	jalr	0x39a(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
80202f56: 03 35 84 bc  	ld	a0, -0x438(s0)
80202f5a: 97 50 01 00  	auipc	ra, 0x15
80202f5e: e7 80 20 f3  	jalr	-0xce(ra) <_ZN2os7console5print17h042fcde166d682deE>
80202f62: 13 05 84 bd  	addi	a0, s0, -0x428
;     match scause.cause() {
80202f66: 97 30 01 00  	auipc	ra, 0x13
80202f6a: e7 80 80 54  	jalr	0x548(ra) <_ZN5riscv8register6scause6Scause5cause17h08038014cf4d93b4E>
80202f6e: 05 89        	andi	a0, a0, 0x1
80202f70: 23 0b a4 c2  	sb	a0, -0x3ca(s0)
80202f74: a3 0b b4 c2  	sb	a1, -0x3c9(s0)
80202f78: 03 45 64 c3  	lbu	a0, -0x3ca(s0)
80202f7c: 05 89        	andi	a0, a0, 0x1
80202f7e: 01 e9        	bnez	a0, 0x80202f8e <.Lpcrel_hi48+0x58>
80202f80: 09 a0        	j	0x80202f82 <.Lpcrel_hi48+0x4c>
80202f82: 03 45 74 c3  	lbu	a0, -0x3c9(s0)
80202f86: 95 45        	li	a1, 0x5
80202f88: 63 09 b5 00  	beq	a0, a1, 0x80202f9a <.Lpcrel_hi48+0x64>
80202f8c: 21 a8        	j	0x80202fa4 <.Lpcrel_hi49>
80202f8e: 03 45 74 c3  	lbu	a0, -0x3c9(s0)
80202f92: 8d 45        	li	a1, 0x3
80202f94: 63 0c b5 32  	beq	a0, a1, 0x802032cc <.Lpcrel_hi56+0x1e>
80202f98: 31 a0        	j	0x80202fa4 <.Lpcrel_hi49>
;             ktrap::time_intr();
80202f9a: 97 30 01 00  	auipc	ra, 0x13
80202f9e: e7 80 00 99  	jalr	-0x670(ra) <_ZN2os4trap5ktrap9time_intr17hf773b282dcd6ff41E>
80202fa2: 31 ae        	j	0x802032be <.Lpcrel_hi56+0x10>

0000000080202fa4 <.Lpcrel_hi49>:
;             let pid = CPUS.my_proc().unwrap().pid();
80202fa4: 17 95 34 00  	auipc	a0, 0x349
80202fa8: 13 05 c5 25  	addi	a0, a0, 0x25c
80202fac: 97 60 01 00  	auipc	ra, 0x16
80202fb0: e7 80 00 4f  	jalr	0x4f0(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80202fb4: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         match self {
80202fb8: 03 35 84 fd  	ld	a0, -0x28(s0)
80202fbc: 11 e9        	bnez	a0, 0x80202fd0 <.Lpcrel_hi50+0x10>
80202fbe: 09 a0        	j	0x80202fc0 <.Lpcrel_hi50>

0000000080202fc0 <.Lpcrel_hi50>:
;             None => unwrap_failed(),
80202fc0: 17 15 03 00  	auipc	a0, 0x31
80202fc4: 13 05 05 b8  	addi	a0, a0, -0x480
80202fc8: 97 e0 02 00  	auipc	ra, 0x2e
80202fcc: e7 80 00 d0  	jalr	-0x300(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80202fd0: 03 35 84 fd  	ld	a0, -0x28(s0)
80202fd4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             let pid = CPUS.my_proc().unwrap().pid();
80202fd8: 97 f0 ff ff  	auipc	ra, 0xfffff
80202fdc: e7 80 40 df  	jalr	-0x20c(ra) <ekernel+0xffcb4dcc>
80202fe0: 97 b0 00 00  	auipc	ra, 0xb
80202fe4: e7 80 20 09  	jalr	0x92(ra) <_ZN2os4task4task16TaskControlBlock3pid17h1ef377ec86e4a976E>
80202fe8: 23 3c a4 c2  	sd	a0, -0x3c8(s0)
80202fec: 13 05 84 bd  	addi	a0, s0, -0x428
;                 scause.cause(),
80202ff0: 97 30 01 00  	auipc	ra, 0x13
80202ff4: e7 80 e0 4b  	jalr	0x4be(ra) <_ZN5riscv8register6scause6Scause5cause17h08038014cf4d93b4E>
80202ff8: 05 89        	andi	a0, a0, 0x1
80202ffa: 23 03 a4 ca  	sb	a0, -0x35a(s0)
80202ffe: a3 03 b4 ca  	sb	a1, -0x359(s0)
80203002: 93 05 64 ca  	addi	a1, s0, -0x35a
80203006: 23 34 b4 fa  	sd	a1, -0x58(s0)

000000008020300a <.Lpcrel_hi51>:
;         Self::new(x, Debug::fmt)
8020300a: 17 35 01 00  	auipc	a0, 0x13
8020300e: 13 05 05 51  	addi	a0, a0, 0x510
80203012: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80203016: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020301a: 23 30 a4 fa  	sd	a0, -0x60(s0)
;     }
8020301e: 83 37 84 f9  	ld	a5, -0x68(s0)
80203022: 03 37 04 fa  	ld	a4, -0x60(s0)
80203026: 93 05 04 be  	addi	a1, s0, -0x420
8020302a: 23 34 b4 f8  	sd	a1, -0x78(s0)

000000008020302e <.Lpcrel_hi52>:
;         Self::new(x, LowerHex::fmt)
8020302e: 17 c5 02 00  	auipc	a0, 0x2c
80203032: 13 05 65 f8  	addi	a0, a0, -0x7a
80203036: 23 38 a4 f8  	sd	a0, -0x70(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020303a: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020303e: 23 30 a4 f8  	sd	a0, -0x80(s0)
;     }
80203042: 83 36 84 f7  	ld	a3, -0x88(s0)
80203046: 03 36 04 f8  	ld	a2, -0x80(s0)
8020304a: 93 05 84 c3  	addi	a1, s0, -0x3c8
8020304e: 23 34 b4 f6  	sd	a1, -0x98(s0)

0000000080203052 <.Lpcrel_hi53>:
;         Self::new(x, Display::fmt)
80203052: 17 e5 02 00  	auipc	a0, 0x2e
80203056: 13 05 c5 03  	addi	a0, a0, 0x3c
8020305a: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020305e: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80203062: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;     }
80203066: 83 35 84 f5  	ld	a1, -0xa8(s0)
8020306a: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             println!(
8020306e: 23 38 f4 c6  	sd	a5, -0x390(s0)
80203072: 23 3c e4 c6  	sd	a4, -0x388(s0)
80203076: 23 30 d4 c8  	sd	a3, -0x380(s0)
8020307a: 23 34 c4 c8  	sd	a2, -0x378(s0)
8020307e: 23 38 b4 c8  	sd	a1, -0x370(s0)
80203082: 23 3c a4 c8  	sd	a0, -0x368(s0)
80203086: 0d 48        	li	a6, 0x3
80203088: a3 07 04 d9  	sb	a6, -0x271(s0)
8020308c: 09 43        	li	t1, 0x2
8020308e: 23 38 64 d8  	sd	t1, -0x270(s0)
80203092: 23 30 64 da  	sd	t1, -0x260(s0)
80203096: 03 47 f4 d8  	lbu	a4, -0x271(s0)
8020309a: 83 36 04 d9  	ld	a3, -0x270(s0)
8020309e: 03 36 84 d9  	ld	a2, -0x268(s0)
802030a2: 83 35 04 da  	ld	a1, -0x260(s0)
802030a6: 03 35 84 da  	ld	a0, -0x258(s0)
802030aa: 81 47        	li	a5, 0x0
802030ac: 23 30 f4 f2  	sd	a5, -0xe0(s0)
802030b0: 93 02 00 02  	li	t0, 0x20
802030b4: 23 26 54 f2  	sw	t0, -0xd4(s0)
802030b8: a3 09 e4 f2  	sb	a4, -0xcd(s0)
802030bc: 23 2a f4 f2  	sw	a5, -0xcc(s0)
802030c0: 23 3c d4 f2  	sd	a3, -0xc8(s0)
802030c4: 23 30 c4 f4  	sd	a2, -0xc0(s0)
802030c8: 23 34 b4 f4  	sd	a1, -0xb8(s0)
802030cc: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;         Self { position, fill, align, flags, precision, width }
802030d0: 23 38 f4 d6  	sd	a5, -0x290(s0)
802030d4: 23 2c 54 d6  	sw	t0, -0x288(s0)
802030d8: 23 00 e4 d8  	sb	a4, -0x280(s0)
802030dc: 23 2e f4 d6  	sw	a5, -0x284(s0)
802030e0: 23 38 d4 d4  	sd	a3, -0x2b0(s0)
802030e4: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
802030e8: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
802030ec: 23 34 a4 d6  	sd	a0, -0x298(s0)
;             println!(
802030f0: a3 07 04 df  	sb	a6, -0x211(s0)
802030f4: 23 38 64 de  	sd	t1, -0x210(s0)
802030f8: 23 30 64 e0  	sd	t1, -0x200(s0)
802030fc: 83 48 f4 de  	lbu	a7, -0x211(s0)
80203100: 03 37 04 df  	ld	a4, -0x210(s0)
80203104: 83 36 84 df  	ld	a3, -0x208(s0)
80203108: 83 35 04 e0  	ld	a1, -0x200(s0)
8020310c: 03 35 84 e0  	ld	a0, -0x1f8(s0)
80203110: 85 43        	li	t2, 0x1
80203112: 23 3c 74 ba  	sd	t2, -0x448(s0)
80203116: 23 34 74 ee  	sd	t2, -0x118(s0)
8020311a: 23 2a 54 ee  	sw	t0, -0x10c(s0)
8020311e: a3 0d 14 ef  	sb	a7, -0x105(s0)
80203122: 11 46        	li	a2, 0x4
80203124: 23 2e c4 ee  	sw	a2, -0x104(s0)
80203128: 23 30 e4 f0  	sd	a4, -0x100(s0)
8020312c: 23 34 d4 f0  	sd	a3, -0xf8(s0)
80203130: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80203134: 23 3c a4 f0  	sd	a0, -0xe8(s0)
;         Self { position, fill, align, flags, precision, width }
80203138: 23 38 74 dc  	sd	t2, -0x230(s0)
8020313c: 23 2c 54 dc  	sw	t0, -0x228(s0)
80203140: 23 00 14 df  	sb	a7, -0x220(s0)
80203144: 23 2e c4 dc  	sw	a2, -0x224(s0)
80203148: 23 38 e4 da  	sd	a4, -0x250(s0)
8020314c: 23 3c d4 da  	sd	a3, -0x248(s0)
80203150: 23 30 b4 dc  	sd	a1, -0x240(s0)
80203154: 23 34 a4 dc  	sd	a0, -0x238(s0)
;             println!(
80203158: a3 07 04 e5  	sb	a6, -0x1b1(s0)
8020315c: 23 38 64 e4  	sd	t1, -0x1b0(s0)
80203160: 23 30 64 e6  	sd	t1, -0x1a0(s0)
80203164: 83 48 f4 e4  	lbu	a7, -0x1b1(s0)
80203168: 03 37 04 e5  	ld	a4, -0x1b0(s0)
8020316c: 83 36 84 e5  	ld	a3, -0x1a8(s0)
80203170: 83 35 04 e6  	ld	a1, -0x1a0(s0)
80203174: 03 35 84 e6  	ld	a0, -0x198(s0)
80203178: 23 38 64 ea  	sd	t1, -0x150(s0)
8020317c: 23 2e 54 ea  	sw	t0, -0x144(s0)
80203180: a3 01 14 ed  	sb	a7, -0x13d(s0)
80203184: 23 22 f4 ec  	sw	a5, -0x13c(s0)
80203188: 23 34 e4 ec  	sd	a4, -0x138(s0)
8020318c: 23 38 d4 ec  	sd	a3, -0x130(s0)
80203190: 23 3c b4 ec  	sd	a1, -0x128(s0)
80203194: 23 30 a4 ee  	sd	a0, -0x120(s0)
;         Self { position, fill, align, flags, precision, width }
80203198: 23 38 64 e2  	sd	t1, -0x1d0(s0)
8020319c: 23 2c 54 e2  	sw	t0, -0x1c8(s0)
802031a0: 23 00 14 e5  	sb	a7, -0x1c0(s0)
802031a4: 23 2e f4 e2  	sw	a5, -0x1c4(s0)
802031a8: 23 38 e4 e0  	sd	a4, -0x1f0(s0)
802031ac: 23 3c d4 e0  	sd	a3, -0x1e8(s0)
802031b0: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
802031b4: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
;             println!(
802031b8: 03 35 04 d8  	ld	a0, -0x280(s0)
802031bc: 23 3c a4 cc  	sd	a0, -0x328(s0)
802031c0: 03 35 84 d7  	ld	a0, -0x288(s0)
802031c4: 23 38 a4 cc  	sd	a0, -0x330(s0)
802031c8: 03 35 04 d7  	ld	a0, -0x290(s0)
802031cc: 23 34 a4 cc  	sd	a0, -0x338(s0)
802031d0: 03 35 84 d6  	ld	a0, -0x298(s0)
802031d4: 23 30 a4 cc  	sd	a0, -0x340(s0)
802031d8: 03 35 04 d6  	ld	a0, -0x2a0(s0)
802031dc: 23 3c a4 ca  	sd	a0, -0x348(s0)
802031e0: 03 35 84 d5  	ld	a0, -0x2a8(s0)
802031e4: 23 38 a4 ca  	sd	a0, -0x350(s0)
802031e8: 03 35 04 d5  	ld	a0, -0x2b0(s0)
802031ec: 23 34 a4 ca  	sd	a0, -0x358(s0)
802031f0: 03 35 04 de  	ld	a0, -0x220(s0)
802031f4: 23 38 a4 d0  	sd	a0, -0x2f0(s0)
802031f8: 03 35 84 dd  	ld	a0, -0x228(s0)
802031fc: 23 34 a4 d0  	sd	a0, -0x2f8(s0)
80203200: 03 35 04 dd  	ld	a0, -0x230(s0)
80203204: 23 30 a4 d0  	sd	a0, -0x300(s0)
80203208: 03 35 84 dc  	ld	a0, -0x238(s0)
8020320c: 23 3c a4 ce  	sd	a0, -0x308(s0)
80203210: 03 35 04 dc  	ld	a0, -0x240(s0)
80203214: 23 38 a4 ce  	sd	a0, -0x310(s0)
80203218: 03 35 84 db  	ld	a0, -0x248(s0)
8020321c: 23 34 a4 ce  	sd	a0, -0x318(s0)
80203220: 03 35 04 db  	ld	a0, -0x250(s0)
80203224: 23 30 a4 ce  	sd	a0, -0x320(s0)
80203228: 03 35 04 e4  	ld	a0, -0x1c0(s0)
8020322c: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
80203230: 03 35 84 e3  	ld	a0, -0x1c8(s0)
80203234: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
80203238: 03 35 04 e3  	ld	a0, -0x1d0(s0)
8020323c: 23 3c a4 d2  	sd	a0, -0x2c8(s0)
80203240: 03 35 84 e2  	ld	a0, -0x1d8(s0)
80203244: 23 38 a4 d2  	sd	a0, -0x2d0(s0)
80203248: 03 35 04 e2  	ld	a0, -0x1e0(s0)
8020324c: 23 34 a4 d2  	sd	a0, -0x2d8(s0)
80203250: 03 35 84 e1  	ld	a0, -0x1e8(s0)
80203254: 23 30 a4 d2  	sd	a0, -0x2e0(s0)
80203258: 03 35 04 e1  	ld	a0, -0x1f0(s0)
8020325c: 23 3c a4 d0  	sd	a0, -0x2e8(s0)

0000000080203260 <.Lpcrel_hi54>:
80203260: 17 15 03 00  	auipc	a0, 0x31
80203264: 93 05 85 8f  	addi	a1, a0, -0x708
80203268: 13 05 04 c4  	addi	a0, s0, -0x3c0
8020326c: 23 38 a4 ba  	sd	a0, -0x450(s0)
80203270: 93 06 04 c7  	addi	a3, s0, -0x390
80203274: 93 07 84 ca  	addi	a5, s0, -0x358
80203278: 42 87        	mv	a4, a6
8020327a: 97 40 00 00  	auipc	ra, 0x4
8020327e: e7 80 a0 02  	jalr	0x2a(ra) <_ZN4core3fmt9Arguments16new_v1_formatted17h3e99fd036cfd62bdE>
80203282: 03 35 04 bb  	ld	a0, -0x450(s0)
80203286: 97 50 01 00  	auipc	ra, 0x15
8020328a: e7 80 60 c0  	jalr	-0x3fa(ra) <_ZN2os7console5print17h042fcde166d682deE>
8020328e: 03 36 84 bb  	ld	a2, -0x448(s0)

0000000080203292 <.Lpcrel_hi55>:
;             panic!("error here")
80203292: 17 15 03 00  	auipc	a0, 0x31
80203296: 93 05 65 91  	addi	a1, a0, -0x6ea
8020329a: 13 05 04 e7  	addi	a0, s0, -0x190
8020329e: 23 30 a4 bc  	sd	a0, -0x440(s0)
802032a2: 97 40 00 00  	auipc	ra, 0x4
802032a6: e7 80 20 11  	jalr	0x112(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
802032aa: 03 35 04 bc  	ld	a0, -0x440(s0)

00000000802032ae <.Lpcrel_hi56>:
802032ae: 97 15 03 00  	auipc	a1, 0x31
802032b2: 93 85 a5 90  	addi	a1, a1, -0x6f6
802032b6: 97 d0 02 00  	auipc	ra, 0x2d
802032ba: e7 80 20 ef  	jalr	-0x10e(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
802032be: 83 30 81 44  	ld	ra, 0x448(sp)
802032c2: 03 34 01 44  	ld	s0, 0x440(sp)
; }
802032c6: 13 01 01 45  	addi	sp, sp, 0x450
802032ca: 82 80        	ret
;             ktrap::break_intr();
802032cc: 97 20 01 00  	auipc	ra, 0x12
802032d0: e7 80 60 40  	jalr	0x406(ra) <_ZN2os4trap5ktrap10break_intr17he936a29cab20d7f2E>
802032d4: ed b7        	j	0x802032be <.Lpcrel_hi56+0x10>

00000000802032d6 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h4d86c783e9dc8c14E>:
;     fn type_id(&self) -> TypeId {
802032d6: 59 71        	addi	sp, sp, -0x70
802032d8: 86 f4        	sd	ra, 0x68(sp)
802032da: a2 f0        	sd	s0, 0x60(sp)
802032dc: 80 18        	addi	s0, sp, 0x70
802032de: 23 3c a4 fa  	sd	a0, -0x48(s0)

00000000802032e2 <.Lpcrel_hi0>:
802032e2: 17 35 04 00  	auipc	a0, 0x43
802032e6: 13 05 e5 c0  	addi	a0, a0, -0x3f2
802032ea: 08 61        	ld	a0, 0x0(a0)
;         let t: u128 = intrinsics::type_id::<T>();
802032ec: 23 34 a4 fc  	sd	a0, -0x38(s0)

00000000802032f0 <.Lpcrel_hi1>:
802032f0: 17 35 04 00  	auipc	a0, 0x43
802032f4: 13 05 85 c0  	addi	a0, a0, -0x3f8
802032f8: 08 61        	ld	a0, 0x0(a0)
802032fa: 23 30 a4 fc  	sd	a0, -0x40(s0)
802032fe: 03 35 04 fc  	ld	a0, -0x40(s0)
80203302: 83 35 84 fc  	ld	a1, -0x38(s0)
80203306: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020330a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         let t1 = (t >> 64) as u64;
8020330e: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         let t2 = t as u64;
80203312: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TypeId { t: (t1, t2) }
80203316: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020331a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020331e: 83 35 84 fa  	ld	a1, -0x58(s0)
80203322: 03 35 04 fb  	ld	a0, -0x50(s0)
80203326: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020332a: 23 30 a4 fa  	sd	a0, -0x60(s0)
;     }
8020332e: 03 35 84 f9  	ld	a0, -0x68(s0)
80203332: 83 35 04 fa  	ld	a1, -0x60(s0)
80203336: a6 70        	ld	ra, 0x68(sp)
80203338: 06 74        	ld	s0, 0x60(sp)
8020333a: 65 61        	addi	sp, sp, 0x70
8020333c: 82 80        	ret

000000008020333e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h4df513974330a0d8E>:
;     pub const unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
8020333e: 79 71        	addi	sp, sp, -0x30
80203340: 06 f4        	sd	ra, 0x28(sp)
80203342: 22 f0        	sd	s0, 0x20(sp)
80203344: 00 18        	addi	s0, sp, 0x30
80203346: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020334a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             const_eval_select((self as *mut u8,), const_impl, runtime_impl)
8020334e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.is_null() { None } else { unsafe { Some(&mut *self) } }
80203352: 11 e5        	bnez	a0, 0x8020335e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h4df513974330a0d8E+0x20>
80203354: 09 a0        	j	0x80203356 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h4df513974330a0d8E+0x18>
80203356: 01 45        	li	a0, 0x0
;         if self.is_null() { None } else { unsafe { Some(&mut *self) } }
80203358: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020335c: 31 a0        	j	0x80203368 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h4df513974330a0d8E+0x2a>
8020335e: 03 35 04 fd  	ld	a0, -0x30(s0)
;         if self.is_null() { None } else { unsafe { Some(&mut *self) } }
80203362: 23 3c a4 fc  	sd	a0, -0x28(s0)
80203366: 09 a0        	j	0x80203368 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h4df513974330a0d8E+0x2a>
;     }
80203368: 03 35 84 fd  	ld	a0, -0x28(s0)
8020336c: a2 70        	ld	ra, 0x28(sp)
8020336e: 02 74        	ld	s0, 0x20(sp)
80203370: 45 61        	addi	sp, sp, 0x30
80203372: 82 80        	ret

0000000080203374 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha22549c33eec1253E>:
;     pub const unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
80203374: 79 71        	addi	sp, sp, -0x30
80203376: 06 f4        	sd	ra, 0x28(sp)
80203378: 22 f0        	sd	s0, 0x20(sp)
8020337a: 00 18        	addi	s0, sp, 0x30
8020337c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80203380: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             const_eval_select((self as *mut u8,), const_impl, runtime_impl)
80203384: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.is_null() { None } else { unsafe { Some(&mut *self) } }
80203388: 11 e5        	bnez	a0, 0x80203394 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha22549c33eec1253E+0x20>
8020338a: 09 a0        	j	0x8020338c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha22549c33eec1253E+0x18>
8020338c: 01 45        	li	a0, 0x0
;         if self.is_null() { None } else { unsafe { Some(&mut *self) } }
8020338e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80203392: 31 a0        	j	0x8020339e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha22549c33eec1253E+0x2a>
80203394: 03 35 04 fd  	ld	a0, -0x30(s0)
;         if self.is_null() { None } else { unsafe { Some(&mut *self) } }
80203398: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020339c: 09 a0        	j	0x8020339e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha22549c33eec1253E+0x2a>
;     }
8020339e: 03 35 84 fd  	ld	a0, -0x28(s0)
802033a2: a2 70        	ld	ra, 0x28(sp)
802033a4: 02 74        	ld	s0, 0x20(sp)
802033a6: 45 61        	addi	sp, sp, 0x30
802033a8: 82 80        	ret

00000000802033aa <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h275e0380c0b93ebbE>:
;     fn next(&mut self) -> Option<T> {
802033aa: 15 71        	addi	sp, sp, -0xe0
802033ac: 86 ed        	sd	ra, 0xd8(sp)
802033ae: a2 e9        	sd	s0, 0xd0(sp)
802033b0: 80 11        	addi	s0, sp, 0xe0
802033b2: 23 30 b4 f2  	sd	a1, -0xe0(s0)
802033b6: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802033ba: 05 45        	li	a0, 0x1
;     pub const fn wrapping_byte_sub(self, count: usize) -> Self {
802033bc: 23 38 a4 f2  	sd	a0, -0xd0(s0)
;     pub const fn wrapping_sub(self, count: usize) -> Self
802033c0: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;     int_impl! {
802033c4: 23 30 a4 f4  	sd	a0, -0xc0(s0)
802033c8: 01 46        	li	a2, 0x0
802033ca: 23 34 c4 f4  	sd	a2, -0xb8(s0)
802033ce: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802033d2: 7d 56        	li	a2, -0x1
;     pub const fn wrapping_offset(self, count: isize) -> *const T
802033d4: 23 3c c4 f4  	sd	a2, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
802033d8: 23 34 a4 f6  	sd	a0, -0x98(s0)
802033dc: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         let ptr = if T::IS_ZST {
802033e0: 09 a0        	j	0x802033e2 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h275e0380c0b93ebbE+0x38>
802033e2: 03 35 04 f2  	ld	a0, -0xe0(s0)
;             if self.ptr == non_null!(self.end, T) {
802033e6: 93 05 85 00  	addi	a1, a0, 0x8
802033ea: 23 3c b4 fa  	sd	a1, -0x48(s0)
802033ee: 0c 6d        	ld	a1, 0x18(a0)
802033f0: 23 3c b4 f6  	sd	a1, -0x88(s0)
802033f4: 93 05 84 f7  	addi	a1, s0, -0x88
802033f8: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self.as_ptr() == other.as_ptr()
802033fc: 08 65        	ld	a0, 0x8(a0)
802033fe: 23 34 a4 fc  	sd	a0, -0x38(s0)
80203402: 83 35 84 f7  	ld	a1, -0x88(s0)
80203406: 23 38 b4 fc  	sd	a1, -0x30(s0)
;             if self.ptr == non_null!(self.end, T) {
8020340a: 63 02 b5 02  	beq	a0, a1, 0x8020342e <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h275e0380c0b93ebbE+0x84>
8020340e: 09 a0        	j	0x80203410 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h275e0380c0b93ebbE+0x66>
80203410: 03 36 04 f2  	ld	a2, -0xe0(s0)
;             let old = self.ptr;
80203414: 08 66        	ld	a0, 0x8(a2)
80203416: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8020341a: 93 05 85 01  	addi	a1, a0, 0x18
8020341e: 23 30 b4 f8  	sd	a1, -0x80(s0)
;             self.ptr = unsafe { old.add(1) };
80203422: 83 35 04 f8  	ld	a1, -0x80(s0)
80203426: 0c e6        	sd	a1, 0x8(a2)
;             old
80203428: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         let ptr = if T::IS_ZST {
8020342c: 39 a0        	j	0x8020343a <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h275e0380c0b93ebbE+0x90>
8020342e: 83 35 84 f2  	ld	a1, -0xd8(s0)
80203432: 7d 55        	li	a0, -0x1
80203434: 7e 15        	slli	a0, a0, 0x3f
;                 return None;
80203436: 88 e1        	sd	a0, 0x0(a1)
; #![no_std]
80203438: 25 a8        	j	0x80203470 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h275e0380c0b93ebbE+0xc6>
8020343a: 83 35 84 f2  	ld	a1, -0xd8(s0)
;         Some(unsafe { ptr.read() })
8020343e: 03 35 04 f7  	ld	a0, -0x90(s0)
80203442: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { ptr::read(self.pointer) }
80203446: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         crate::intrinsics::read_via_copy(src)
8020344a: 10 69        	ld	a2, 0x10(a0)
8020344c: 23 3c c4 f8  	sd	a2, -0x68(s0)
80203450: 10 65        	ld	a2, 0x8(a0)
80203452: 23 38 c4 f8  	sd	a2, -0x70(s0)
80203456: 08 61        	ld	a0, 0x0(a0)
80203458: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         Some(unsafe { ptr.read() })
8020345c: 03 35 84 f9  	ld	a0, -0x68(s0)
80203460: 88 e9        	sd	a0, 0x10(a1)
80203462: 03 35 04 f9  	ld	a0, -0x70(s0)
80203466: 88 e5        	sd	a0, 0x8(a1)
80203468: 03 35 84 f8  	ld	a0, -0x78(s0)
8020346c: 88 e1        	sd	a0, 0x0(a1)
;     }
8020346e: 11 a0        	j	0x80203472 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h275e0380c0b93ebbE+0xc8>
80203470: 09 a0        	j	0x80203472 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h275e0380c0b93ebbE+0xc8>
80203472: ee 60        	ld	ra, 0xd8(sp)
80203474: 4e 64        	ld	s0, 0xd0(sp)
;     }
80203476: 2d 61        	addi	sp, sp, 0xe0
80203478: 82 80        	ret

000000008020347a <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9size_hint17he2f453ee0226783aE>:
;     fn size_hint(&self) -> (usize, Option<usize>) {
8020347a: 5d 71        	addi	sp, sp, -0x50
8020347c: 86 e4        	sd	ra, 0x48(sp)
8020347e: a2 e0        	sd	s0, 0x40(sp)
80203480: 80 08        	addi	s0, sp, 0x50
80203482: 23 38 b4 fa  	sd	a1, -0x50(s0)
80203486: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020348a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let exact = if T::IS_ZST {
8020348e: 09 a0        	j	0x80203490 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9size_hint17he2f453ee0226783aE+0x16>
80203490: 83 35 04 fb  	ld	a1, -0x50(s0)
;             unsafe { non_null!(self.end, T).sub_ptr(self.ptr) }
80203494: 88 6d        	ld	a0, 0x18(a1)
80203496: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020349a: 8c 65        	ld	a1, 0x8(a1)
8020349c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { self.pointer.sub_ptr(subtracted.pointer) }
802034a0: 97 80 00 00  	auipc	ra, 0x8
802034a4: e7 80 80 f7  	jalr	-0x88(ra) <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h1669939f1b13bebdE>
802034a8: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         let exact = if T::IS_ZST {
802034ac: 09 a0        	j	0x802034ae <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9size_hint17he2f453ee0226783aE+0x34>
802034ae: 83 35 84 fb  	ld	a1, -0x48(s0)
;         (exact, Some(exact))
802034b2: 03 35 04 fc  	ld	a0, -0x40(s0)
802034b6: 23 38 a4 fc  	sd	a0, -0x30(s0)
802034ba: 05 46        	li	a2, 0x1
802034bc: 23 34 c4 fc  	sd	a2, -0x38(s0)
802034c0: 88 e1        	sd	a0, 0x0(a1)
802034c2: 03 36 84 fc  	ld	a2, -0x38(s0)
802034c6: 03 35 04 fd  	ld	a0, -0x30(s0)
802034ca: 90 e5        	sd	a2, 0x8(a1)
802034cc: 88 e9        	sd	a0, 0x10(a1)
802034ce: a6 60        	ld	ra, 0x48(sp)
802034d0: 06 64        	ld	s0, 0x40(sp)
;     }
802034d2: 61 61        	addi	sp, sp, 0x50
802034d4: 82 80        	ret

00000000802034d6 <_ZN4core4iter6traits10exact_size17ExactSizeIterator3len17h75741546bef0fb71E>:
;     fn len(&self) -> usize {
802034d6: 71 71        	addi	sp, sp, -0xb0
802034d8: 06 f5        	sd	ra, 0xa8(sp)
802034da: 22 f1        	sd	s0, 0xa0(sp)
802034dc: 00 19        	addi	s0, sp, 0xb0
802034de: aa 85        	mv	a1, a0
802034e0: 01 45        	li	a0, 0x0
;         assert_eq!(upper, Some(lower));
802034e2: a3 03 a4 f6  	sb	a0, -0x99(s0)
802034e6: 23 38 b4 fc  	sd	a1, -0x30(s0)
802034ea: 13 05 84 f7  	addi	a0, s0, -0x88
;         let (lower, upper) = self.size_hint();
802034ee: 97 00 00 00  	auipc	ra, 0x0
802034f2: e7 80 c0 f8  	jalr	-0x74(ra) <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9size_hint17he2f453ee0226783aE>
802034f6: 83 35 84 f7  	ld	a1, -0x88(s0)
802034fa: 23 3c b4 f4  	sd	a1, -0xa8(s0)
802034fe: 23 3c b4 fc  	sd	a1, -0x28(s0)
80203502: 03 36 04 f8  	ld	a2, -0x80(s0)
80203506: 03 35 84 f8  	ld	a0, -0x78(s0)
8020350a: 23 34 c4 f6  	sd	a2, -0x98(s0)
8020350e: 23 38 a4 f6  	sd	a0, -0x90(s0)
80203512: 13 05 84 f6  	addi	a0, s0, -0x98
;         assert_eq!(upper, Some(lower));
80203516: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020351a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020351e: 85 45        	li	a1, 0x1
80203520: 23 38 b4 f8  	sd	a1, -0x70(s0)
80203524: 93 05 04 f9  	addi	a1, s0, -0x70
80203528: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         SpecOptionPartialEq::eq(self, other)
8020352c: 97 30 02 00  	auipc	ra, 0x23
80203530: e7 80 40 fd  	jalr	-0x2c(ra) <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE>
;         assert_eq!(upper, Some(lower));
80203534: 1d e1        	bnez	a0, 0x8020355a <.Lpcrel_hi0+0x1c>
80203536: 09 a0        	j	0x80203538 <_ZN4core4iter6traits10exact_size17ExactSizeIterator3len17h75741546bef0fb71E+0x62>
80203538: 01 45        	li	a0, 0x0
;         assert_eq!(upper, Some(lower));
8020353a: 23 30 a4 fa  	sd	a0, -0x60(s0)

000000008020353e <.Lpcrel_hi0>:
8020353e: 97 05 03 00  	auipc	a1, 0x30
80203542: 13 87 25 71  	addi	a4, a1, 0x712
80203546: 93 05 84 f6  	addi	a1, s0, -0x98
8020354a: 13 06 04 f9  	addi	a2, s0, -0x70
8020354e: 93 06 04 fa  	addi	a3, s0, -0x60
80203552: 97 f0 01 00  	auipc	ra, 0x1f
80203556: e7 80 a0 39  	jalr	0x39a(ra) <_ZN4core9panicking13assert_failed17h8a485c99d81289c4E>
8020355a: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020355e: aa 70        	ld	ra, 0xa8(sp)
80203560: 0a 74        	ld	s0, 0xa0(sp)
;     }
80203562: 4d 61        	addi	sp, sp, 0xb0
80203564: 82 80        	ret

0000000080203566 <_ZN5alloc3vec9into_iter21IntoIter$LT$T$C$A$GT$16as_raw_mut_slice17h7e389955872d8901E>:
;     fn as_raw_mut_slice(&mut self) -> *mut [T] {
80203566: 59 71        	addi	sp, sp, -0x70
80203568: 86 f4        	sd	ra, 0x68(sp)
8020356a: a2 f0        	sd	s0, 0x60(sp)
8020356c: 80 18        	addi	s0, sp, 0x70
8020356e: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         ptr::slice_from_raw_parts_mut(self.ptr.as_ptr(), self.len())
80203572: 03 35 04 fa  	ld	a0, -0x60(s0)
80203576: 08 65        	ld	a0, 0x8(a0)
80203578: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020357c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.pointer as *mut T
80203580: 23 38 a4 fc  	sd	a0, -0x30(s0)
80203584: 13 05 04 fa  	addi	a0, s0, -0x60
;         ptr::slice_from_raw_parts_mut(self.ptr.as_ptr(), self.len())
80203588: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         (**self).len()
8020358c: 03 35 04 fa  	ld	a0, -0x60(s0)
80203590: 97 00 00 00  	auipc	ra, 0x0
80203594: e7 80 60 f4  	jalr	-0xba(ra) <_ZN4core4iter6traits10exact_size17ExactSizeIterator3len17h75741546bef0fb71E>
80203598: 83 35 84 f9  	ld	a1, -0x68(s0)
8020359c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
802035a0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802035a4: 23 3c b4 fa  	sd	a1, -0x48(s0)
802035a8: 23 30 a4 fc  	sd	a0, -0x40(s0)
802035ac: 83 35 84 fb  	ld	a1, -0x48(s0)
802035b0: 03 35 04 fc  	ld	a0, -0x40(s0)
802035b4: 23 34 b4 fa  	sd	a1, -0x58(s0)
802035b8: 23 38 a4 fa  	sd	a0, -0x50(s0)
802035bc: 03 35 84 fa  	ld	a0, -0x58(s0)
802035c0: 83 35 04 fb  	ld	a1, -0x50(s0)
802035c4: a6 70        	ld	ra, 0x68(sp)
802035c6: 06 74        	ld	s0, 0x60(sp)
;     }
802035c8: 65 61        	addi	sp, sp, 0x70
802035ca: 82 80        	ret

00000000802035cc <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb101aa809261f9aaE>:
;     fn index(&self, index: I) -> &Self::Output {
802035cc: 35 71        	addi	sp, sp, -0xa0
802035ce: 06 ed        	sd	ra, 0x98(sp)
802035d0: 22 e9        	sd	s0, 0x90(sp)
802035d2: 00 11        	addi	s0, sp, 0xa0
802035d4: 23 30 c4 f6  	sd	a2, -0xa0(s0)
802035d8: aa 86        	mv	a3, a0
802035da: 23 34 d4 f6  	sd	a3, -0x98(s0)
802035de: 23 30 d4 f8  	sd	a3, -0x80(s0)
802035e2: 23 34 b4 f8  	sd	a1, -0x78(s0)
802035e6: 23 38 d4 f8  	sd	a3, -0x70(s0)
802035ea: 13 06 00 20  	li	a2, 0x200
802035ee: 23 3c c4 f8  	sd	a2, -0x68(s0)
802035f2: 23 30 b4 fa  	sd	a1, -0x60(s0)
802035f6: 23 3c b4 fa  	sd	a1, -0x48(s0)
802035fa: 23 30 d4 fc  	sd	a3, -0x40(s0)
802035fe: 23 34 c4 fc  	sd	a2, -0x38(s0)
80203602: 01 45        	li	a0, 0x0
;         (0..self.end).index(slice)
80203604: 23 34 a4 fa  	sd	a0, -0x58(s0)
80203608: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020360c: 83 35 84 fa  	ld	a1, -0x58(s0)
80203610: 23 38 b4 f6  	sd	a1, -0x90(s0)
80203614: 03 35 04 fb  	ld	a0, -0x50(s0)
80203618: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020361c: 23 38 b4 fc  	sd	a1, -0x30(s0)
80203620: 23 3c a4 fc  	sd	a0, -0x28(s0)
80203624: 23 30 d4 fe  	sd	a3, -0x20(s0)
80203628: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         if self.start > self.end {
8020362c: 63 6a b5 00  	bltu	a0, a1, 0x80203640 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb101aa809261f9aaE+0x74>
80203630: 09 a0        	j	0x80203632 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb101aa809261f9aaE+0x66>
80203632: 83 35 84 f7  	ld	a1, -0x88(s0)
80203636: 13 05 00 20  	li	a0, 0x200
;         } else if self.end > slice.len() {
8020363a: 63 6d b5 00  	bltu	a0, a1, 0x80203654 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb101aa809261f9aaE+0x88>
8020363e: 2d a0        	j	0x80203668 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb101aa809261f9aaE+0x9c>
80203640: 03 36 04 f6  	ld	a2, -0xa0(s0)
80203644: 83 35 84 f7  	ld	a1, -0x88(s0)
80203648: 03 35 04 f7  	ld	a0, -0x90(s0)
;             slice_index_order_fail(self.start, self.end);
8020364c: 97 e0 02 00  	auipc	ra, 0x2e
80203650: e7 80 80 09  	jalr	0x98(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
80203654: 03 36 04 f6  	ld	a2, -0xa0(s0)
80203658: 03 35 84 f7  	ld	a0, -0x88(s0)
8020365c: 93 05 00 20  	li	a1, 0x200
;             slice_end_index_len_fail(self.end, slice.len());
80203660: 97 e0 02 00  	auipc	ra, 0x2e
80203664: e7 80 00 04  	jalr	0x40(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
80203668: 03 36 84 f6  	ld	a2, -0x98(s0)
8020366c: 83 35 84 f7  	ld	a1, -0x88(s0)
80203670: 03 35 04 f7  	ld	a0, -0x90(s0)
80203674: 93 06 00 20  	li	a3, 0x200
;         unsafe { &*self.get_unchecked(slice) }
80203678: 97 b0 02 00  	auipc	ra, 0x2b
8020367c: e7 80 80 2a  	jalr	0x2a8(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E>
80203680: ea 60        	ld	ra, 0x98(sp)
80203682: 4a 64        	ld	s0, 0x90(sp)
;     }
80203684: 0d 61        	addi	sp, sp, 0xa0
80203686: 82 80        	ret

0000000080203688 <_ZN2os10page_alloc10PageCounts8addcount17h3c708f643f70319aE>:
;     pub fn addcount(&self, page: usize) {
80203688: 35 71        	addi	sp, sp, -0xa0
8020368a: 06 ed        	sd	ra, 0x98(sp)
8020368c: 22 e9        	sd	s0, 0x90(sp)
8020368e: 00 11        	addi	s0, sp, 0xa0
80203690: 23 34 b4 f8  	sd	a1, -0x78(s0)
80203694: 23 38 a4 f8  	sd	a0, -0x70(s0)
80203698: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020369c: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         if(page<KERNBASE||page>PHYSTOP){
802036a0: 13 d5 55 01  	srli	a0, a1, 0x15
802036a4: 93 05 10 40  	li	a1, 0x401
802036a8: 63 6b b5 00  	bltu	a0, a1, 0x802036be <.Lpcrel_hi0>
802036ac: 09 a0        	j	0x802036ae <_ZN2os10page_alloc10PageCounts8addcount17h3c708f643f70319aE+0x26>
802036ae: 03 35 84 f8  	ld	a0, -0x78(s0)
802036b2: c5 45        	li	a1, 0x11
802036b4: ee 05        	slli	a1, a1, 0x1b
802036b6: 85 05        	addi	a1, a1, 0x1
;         if(page<KERNBASE||page>PHYSTOP){
802036b8: 63 6a b5 02  	bltu	a0, a1, 0x802036ec <.Lpcrel_hi1+0x10>
802036bc: 09 a0        	j	0x802036be <.Lpcrel_hi0>

00000000802036be <.Lpcrel_hi0>:
;             panic!("add page wrong");
802036be: 17 05 03 00  	auipc	a0, 0x30
802036c2: 93 05 25 66  	addi	a1, a0, 0x662
802036c6: 13 05 84 f9  	addi	a0, s0, -0x68
802036ca: 23 30 a4 f8  	sd	a0, -0x80(s0)
802036ce: 05 46        	li	a2, 0x1
802036d0: 97 40 00 00  	auipc	ra, 0x4
802036d4: e7 80 40 ce  	jalr	-0x31c(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
802036d8: 03 35 04 f8  	ld	a0, -0x80(s0)

00000000802036dc <.Lpcrel_hi1>:
802036dc: 97 05 03 00  	auipc	a1, 0x30
802036e0: 93 85 45 65  	addi	a1, a1, 0x654
802036e4: 97 d0 02 00  	auipc	ra, 0x2d
802036e8: e7 80 40 ac  	jalr	-0x53c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
802036ec: 03 35 84 f8  	ld	a0, -0x78(s0)
802036f0: 93 05 f0 bf  	li	a1, -0x401
802036f4: d6 05        	slli	a1, a1, 0x15
;             let idx = (page - KERNBASE) / PGSZ;
802036f6: aa 95        	add	a1, a1, a0
802036f8: 23 3c b4 f6  	sd	a1, -0x88(s0)
802036fc: 55 81        	srli	a0, a0, 0x15
802036fe: 93 05 10 40  	li	a1, 0x401
80203702: 63 65 b5 04  	bltu	a0, a1, 0x8020374c <.Lpcrel_hi2>
80203706: 09 a0        	j	0x80203708 <.Lpcrel_hi1+0x2c>
80203708: 83 35 84 f7  	ld	a1, -0x88(s0)
8020370c: 03 35 04 f9  	ld	a0, -0x70(s0)
;             let idx = (page - KERNBASE) / PGSZ;
80203710: b1 81        	srli	a1, a1, 0xc
80203712: 23 34 b4 f6  	sd	a1, -0x98(s0)
80203716: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             self.counts.lock()[idx] += 1;
8020371a: 97 f0 00 00  	auipc	ra, 0xf
8020371e: e7 80 20 55  	jalr	0x552(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h45ef2d4cb8ea66e1E>
80203722: 23 34 a4 fc  	sd	a0, -0x38(s0)
80203726: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020372a: 13 05 84 fc  	addi	a0, s0, -0x38
8020372e: 97 00 01 00  	auipc	ra, 0x10
80203732: e7 80 e0 4d  	jalr	0x4de(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7468fcc28aa012ddE>
80203736: aa 85        	mv	a1, a0
80203738: 03 35 84 f7  	ld	a0, -0x88(s0)
8020373c: 23 38 b4 f6  	sd	a1, -0x90(s0)
80203740: 55 81        	srli	a0, a0, 0x15
80203742: 93 05 f0 03  	li	a1, 0x3f
80203746: 63 61 b5 02  	bltu	a0, a1, 0x80203768 <.Lpcrel_hi3+0x14>
8020374a: 3d a8        	j	0x80203788 <.Lpcrel_hi3+0x34>

000000008020374c <.Lpcrel_hi2>:
;             let idx = (page - KERNBASE) / PGSZ;
8020374c: 17 05 03 00  	auipc	a0, 0x30
80203750: 13 05 45 56  	addi	a0, a0, 0x564

0000000080203754 <.Lpcrel_hi3>:
80203754: 97 05 03 00  	auipc	a1, 0x30
80203758: 13 86 c5 53  	addi	a2, a1, 0x53c
8020375c: 93 05 10 02  	li	a1, 0x21
80203760: 97 d0 02 00  	auipc	ra, 0x2d
80203764: e7 80 80 ab  	jalr	-0x548(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80203768: 03 35 04 f7  	ld	a0, -0x90(s0)
8020376c: 83 35 84 f6  	ld	a1, -0x98(s0)
;             self.counts.lock()[idx] += 1;
80203770: 2e 95        	add	a0, a0, a1
80203772: 03 45 05 00  	lbu	a0, 0x0(a0)
80203776: 93 05 15 00  	addi	a1, a0, 0x1
8020377a: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8020377e: 13 f5 f5 0f  	andi	a0, a1, 0xff
80203782: 63 13 b5 04  	bne	a0, a1, 0x802037c8 <.Lpcrel_hi5>
80203786: 31 a8        	j	0x802037a2 <.Lpcrel_hi4+0x16>
80203788: 03 35 84 f6  	ld	a0, -0x98(s0)

000000008020378c <.Lpcrel_hi4>:
;             self.counts.lock()[idx] += 1;
8020378c: 97 05 03 00  	auipc	a1, 0x30
80203790: 13 86 c5 54  	addi	a2, a1, 0x54c
80203794: a1 65        	lui	a1, 0x8
80203796: 9b 85 05 e0  	addiw	a1, a1, -0x200
8020379a: 97 d0 02 00  	auipc	ra, 0x2d
8020379e: e7 80 60 b1  	jalr	-0x4ea(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
802037a2: 03 35 04 f6  	ld	a0, -0xa0(s0)
802037a6: 83 35 04 f7  	ld	a1, -0x90(s0)
802037aa: 03 36 84 f6  	ld	a2, -0x98(s0)
;             self.counts.lock()[idx] += 1;
802037ae: b2 95        	add	a1, a1, a2
802037b0: 23 80 a5 00  	sb	a0, 0x0(a1)
802037b4: 13 05 84 fc  	addi	a0, s0, -0x38
802037b8: 97 50 00 00  	auipc	ra, 0x5
802037bc: e7 80 20 cf  	jalr	-0x30e(ra) <_ZN4core3ptr81drop_in_place$LT$os..sync..spin..SpinGuard$LT$$u5b$u8$u3b$$u20$32256$u5d$$GT$$GT$17h45be4ee30f739548E>
802037c0: ea 60        	ld	ra, 0x98(sp)
802037c2: 4a 64        	ld	s0, 0x90(sp)
;     }
802037c4: 0d 61        	addi	sp, sp, 0xa0
802037c6: 82 80        	ret

00000000802037c8 <.Lpcrel_hi5>:
;             self.counts.lock()[idx] += 1;
802037c8: 17 05 03 00  	auipc	a0, 0x30
802037cc: 13 05 85 52  	addi	a0, a0, 0x528

00000000802037d0 <.Lpcrel_hi6>:
802037d0: 97 05 03 00  	auipc	a1, 0x30
802037d4: 13 86 85 50  	addi	a2, a1, 0x508
802037d8: f1 45        	li	a1, 0x1c
802037da: 97 d0 02 00  	auipc	ra, 0x2d
802037de: e7 80 e0 a3  	jalr	-0x5c2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802037e2 <_ZN2os10page_alloc10PageCounts8subcount17h53c28784e2bd7ec6E>:
;     pub fn subcount(&self, page: usize) {
802037e2: 35 71        	addi	sp, sp, -0xa0
802037e4: 06 ed        	sd	ra, 0x98(sp)
802037e6: 22 e9        	sd	s0, 0x90(sp)
802037e8: 00 11        	addi	s0, sp, 0xa0
802037ea: 23 34 b4 f8  	sd	a1, -0x78(s0)
802037ee: 23 38 a4 f8  	sd	a0, -0x70(s0)
802037f2: 23 3c a4 fc  	sd	a0, -0x28(s0)
802037f6: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         if(page<KERNBASE||page>PHYSTOP){
802037fa: 13 d5 55 01  	srli	a0, a1, 0x15
802037fe: 93 05 10 40  	li	a1, 0x401
80203802: 63 6b b5 00  	bltu	a0, a1, 0x80203818 <.Lpcrel_hi7>
80203806: 09 a0        	j	0x80203808 <_ZN2os10page_alloc10PageCounts8subcount17h53c28784e2bd7ec6E+0x26>
80203808: 03 35 84 f8  	ld	a0, -0x78(s0)
8020380c: c5 45        	li	a1, 0x11
8020380e: ee 05        	slli	a1, a1, 0x1b
80203810: 85 05        	addi	a1, a1, 0x1
;         if(page<KERNBASE||page>PHYSTOP){
80203812: 63 6a b5 02  	bltu	a0, a1, 0x80203846 <.Lpcrel_hi8+0x10>
80203816: 09 a0        	j	0x80203818 <.Lpcrel_hi7>

0000000080203818 <.Lpcrel_hi7>:
;             panic!("sub page wrong");
80203818: 17 05 03 00  	auipc	a0, 0x30
8020381c: 93 05 05 57  	addi	a1, a0, 0x570
80203820: 13 05 84 f9  	addi	a0, s0, -0x68
80203824: 23 30 a4 f8  	sd	a0, -0x80(s0)
80203828: 05 46        	li	a2, 0x1
8020382a: 97 40 00 00  	auipc	ra, 0x4
8020382e: e7 80 a0 b8  	jalr	-0x476(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
80203832: 03 35 04 f8  	ld	a0, -0x80(s0)

0000000080203836 <.Lpcrel_hi8>:
80203836: 97 05 03 00  	auipc	a1, 0x30
8020383a: 93 85 25 56  	addi	a1, a1, 0x562
8020383e: 97 d0 02 00  	auipc	ra, 0x2d
80203842: e7 80 a0 96  	jalr	-0x696(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80203846: 03 35 84 f8  	ld	a0, -0x78(s0)
8020384a: 93 05 f0 bf  	li	a1, -0x401
8020384e: d6 05        	slli	a1, a1, 0x15
;             let idx = (page - KERNBASE) / PGSZ;
80203850: aa 95        	add	a1, a1, a0
80203852: 23 3c b4 f6  	sd	a1, -0x88(s0)
80203856: 55 81        	srli	a0, a0, 0x15
80203858: 93 05 10 40  	li	a1, 0x401
8020385c: 63 65 b5 04  	bltu	a0, a1, 0x802038a6 <.Lpcrel_hi9>
80203860: 09 a0        	j	0x80203862 <.Lpcrel_hi8+0x2c>
80203862: 83 35 84 f7  	ld	a1, -0x88(s0)
80203866: 03 35 04 f9  	ld	a0, -0x70(s0)
;             let idx = (page - KERNBASE) / PGSZ;
8020386a: b1 81        	srli	a1, a1, 0xc
8020386c: 23 34 b4 f6  	sd	a1, -0x98(s0)
80203870: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             self.counts.lock()[idx] -= 1;
80203874: 97 f0 00 00  	auipc	ra, 0xf
80203878: e7 80 80 3f  	jalr	0x3f8(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h45ef2d4cb8ea66e1E>
8020387c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80203880: 23 38 b4 fc  	sd	a1, -0x30(s0)
80203884: 13 05 84 fc  	addi	a0, s0, -0x38
80203888: 97 00 01 00  	auipc	ra, 0x10
8020388c: e7 80 40 38  	jalr	0x384(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7468fcc28aa012ddE>
80203890: aa 85        	mv	a1, a0
80203892: 03 35 84 f7  	ld	a0, -0x88(s0)
80203896: 23 38 b4 f6  	sd	a1, -0x90(s0)
8020389a: 55 81        	srli	a0, a0, 0x15
8020389c: 93 05 f0 03  	li	a1, 0x3f
802038a0: 63 61 b5 02  	bltu	a0, a1, 0x802038c2 <.Lpcrel_hi10+0x14>
802038a4: 25 a8        	j	0x802038dc <.Lpcrel_hi10+0x2e>

00000000802038a6 <.Lpcrel_hi9>:
;             let idx = (page - KERNBASE) / PGSZ;
802038a6: 17 05 03 00  	auipc	a0, 0x30
802038aa: 13 05 a5 40  	addi	a0, a0, 0x40a

00000000802038ae <.Lpcrel_hi10>:
802038ae: 97 05 03 00  	auipc	a1, 0x30
802038b2: 13 86 a5 49  	addi	a2, a1, 0x49a
802038b6: 93 05 10 02  	li	a1, 0x21
802038ba: 97 d0 02 00  	auipc	ra, 0x2d
802038be: e7 80 e0 95  	jalr	-0x6a2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802038c2: 03 35 04 f7  	ld	a0, -0x90(s0)
802038c6: 83 35 84 f6  	ld	a1, -0x98(s0)
;             self.counts.lock()[idx] -= 1;
802038ca: 2e 95        	add	a0, a0, a1
802038cc: 03 45 05 00  	lbu	a0, 0x0(a0)
802038d0: 93 05 f5 ff  	addi	a1, a0, -0x1
802038d4: 23 30 b4 f6  	sd	a1, -0xa0(s0)
802038d8: 31 c1        	beqz	a0, 0x8020391c <.Lpcrel_hi12>
802038da: 31 a8        	j	0x802038f6 <.Lpcrel_hi11+0x16>
802038dc: 03 35 84 f6  	ld	a0, -0x98(s0)

00000000802038e0 <.Lpcrel_hi11>:
;             self.counts.lock()[idx] -= 1;
802038e0: 97 05 03 00  	auipc	a1, 0x30
802038e4: 13 86 05 48  	addi	a2, a1, 0x480
802038e8: a1 65        	lui	a1, 0x8
802038ea: 9b 85 05 e0  	addiw	a1, a1, -0x200
802038ee: 97 d0 02 00  	auipc	ra, 0x2d
802038f2: e7 80 20 9c  	jalr	-0x63e(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
802038f6: 03 35 04 f6  	ld	a0, -0xa0(s0)
802038fa: 83 35 04 f7  	ld	a1, -0x90(s0)
802038fe: 03 36 84 f6  	ld	a2, -0x98(s0)
;             self.counts.lock()[idx] -= 1;
80203902: b2 95        	add	a1, a1, a2
80203904: 23 80 a5 00  	sb	a0, 0x0(a1)
80203908: 13 05 84 fc  	addi	a0, s0, -0x38
8020390c: 97 50 00 00  	auipc	ra, 0x5
80203910: e7 80 e0 b9  	jalr	-0x462(ra) <_ZN4core3ptr81drop_in_place$LT$os..sync..spin..SpinGuard$LT$$u5b$u8$u3b$$u20$32256$u5d$$GT$$GT$17h45be4ee30f739548E>
80203914: ea 60        	ld	ra, 0x98(sp)
80203916: 4a 64        	ld	s0, 0x90(sp)
;     }
80203918: 0d 61        	addi	sp, sp, 0xa0
8020391a: 82 80        	ret

000000008020391c <.Lpcrel_hi12>:
;             self.counts.lock()[idx] -= 1;
8020391c: 17 05 03 00  	auipc	a0, 0x30
80203920: 13 05 45 39  	addi	a0, a0, 0x394

0000000080203924 <.Lpcrel_hi13>:
80203924: 97 05 03 00  	auipc	a1, 0x30
80203928: 13 86 c5 43  	addi	a2, a1, 0x43c
8020392c: 93 05 10 02  	li	a1, 0x21
80203930: 97 d0 02 00  	auipc	ra, 0x2d
80203934: e7 80 80 8e  	jalr	-0x718(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080203938 <_ZN2os10page_alloc10PageCounts8getcount17h0b8422019046b499E>:
;     pub fn getcount(&self, page: usize) -> u8 {
80203938: 71 71        	addi	sp, sp, -0xb0
8020393a: 06 f5        	sd	ra, 0xa8(sp)
8020393c: 22 f1        	sd	s0, 0xa0(sp)
8020393e: 00 19        	addi	s0, sp, 0xb0
80203940: 23 30 b4 f8  	sd	a1, -0x80(s0)
80203944: 23 34 a4 f8  	sd	a0, -0x78(s0)
80203948: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020394c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         if(page<KERNBASE||page>PHYSTOP){
80203950: 13 d5 55 01  	srli	a0, a1, 0x15
80203954: 93 05 10 40  	li	a1, 0x401
80203958: 63 6b b5 00  	bltu	a0, a1, 0x8020396e <.Lpcrel_hi14>
8020395c: 09 a0        	j	0x8020395e <_ZN2os10page_alloc10PageCounts8getcount17h0b8422019046b499E+0x26>
8020395e: 03 35 04 f8  	ld	a0, -0x80(s0)
80203962: c5 45        	li	a1, 0x11
80203964: ee 05        	slli	a1, a1, 0x1b
80203966: 85 05        	addi	a1, a1, 0x1
;         if(page<KERNBASE||page>PHYSTOP){
80203968: 63 6a b5 02  	bltu	a0, a1, 0x8020399c <.Lpcrel_hi15+0x10>
8020396c: 09 a0        	j	0x8020396e <.Lpcrel_hi14>

000000008020396e <.Lpcrel_hi14>:
;             panic!("get page wrong");
8020396e: 17 05 03 00  	auipc	a0, 0x30
80203972: 93 05 25 48  	addi	a1, a0, 0x482
80203976: 13 05 04 f9  	addi	a0, s0, -0x70
8020397a: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020397e: 05 46        	li	a2, 0x1
80203980: 97 40 00 00  	auipc	ra, 0x4
80203984: e7 80 40 a3  	jalr	-0x5cc(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
80203988: 03 35 84 f7  	ld	a0, -0x88(s0)

000000008020398c <.Lpcrel_hi15>:
8020398c: 97 05 03 00  	auipc	a1, 0x30
80203990: 93 85 45 47  	addi	a1, a1, 0x474
80203994: 97 d0 02 00  	auipc	ra, 0x2d
80203998: e7 80 40 81  	jalr	-0x7ec(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
8020399c: 03 35 04 f8  	ld	a0, -0x80(s0)
802039a0: 93 05 f0 bf  	li	a1, -0x401
802039a4: d6 05        	slli	a1, a1, 0x15
;             let idx = (page - KERNBASE) / PGSZ;
802039a6: aa 95        	add	a1, a1, a0
802039a8: 23 38 b4 f6  	sd	a1, -0x90(s0)
802039ac: 55 81        	srli	a0, a0, 0x15
802039ae: 93 05 10 40  	li	a1, 0x401
802039b2: 63 65 b5 04  	bltu	a0, a1, 0x802039fc <.Lpcrel_hi16>
802039b6: 09 a0        	j	0x802039b8 <.Lpcrel_hi15+0x2c>
802039b8: 83 35 04 f7  	ld	a1, -0x90(s0)
802039bc: 03 35 84 f8  	ld	a0, -0x78(s0)
;             let idx = (page - KERNBASE) / PGSZ;
802039c0: b1 81        	srli	a1, a1, 0xc
802039c2: 23 30 b4 f6  	sd	a1, -0xa0(s0)
802039c6: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             let count = self.counts.lock()[idx];
802039ca: 97 f0 00 00  	auipc	ra, 0xf
802039ce: e7 80 20 2a  	jalr	0x2a2(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h45ef2d4cb8ea66e1E>
802039d2: 23 30 a4 fc  	sd	a0, -0x40(s0)
802039d6: 23 34 b4 fc  	sd	a1, -0x38(s0)
802039da: 13 05 04 fc  	addi	a0, s0, -0x40
802039de: 97 00 01 00  	auipc	ra, 0x10
802039e2: e7 80 20 13  	jalr	0x132(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1a38979bb7aaaaf9E>
802039e6: aa 85        	mv	a1, a0
802039e8: 03 35 04 f7  	ld	a0, -0x90(s0)
802039ec: 23 34 b4 f6  	sd	a1, -0x98(s0)
802039f0: 55 81        	srli	a0, a0, 0x15
802039f2: 93 05 f0 03  	li	a1, 0x3f
802039f6: 63 61 b5 02  	bltu	a0, a1, 0x80203a18 <.Lpcrel_hi17+0x14>
802039fa: b1 a0        	j	0x80203a46 <.Lpcrel_hi17+0x42>

00000000802039fc <.Lpcrel_hi16>:
;             let idx = (page - KERNBASE) / PGSZ;
802039fc: 17 05 03 00  	auipc	a0, 0x30
80203a00: 13 05 45 2b  	addi	a0, a0, 0x2b4

0000000080203a04 <.Lpcrel_hi17>:
80203a04: 97 05 03 00  	auipc	a1, 0x30
80203a08: 13 86 c5 3a  	addi	a2, a1, 0x3ac
80203a0c: 93 05 10 02  	li	a1, 0x21
80203a10: 97 d0 02 00  	auipc	ra, 0x2d
80203a14: e7 80 80 80  	jalr	-0x7f8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80203a18: 03 35 84 f6  	ld	a0, -0x98(s0)
80203a1c: 83 35 04 f6  	ld	a1, -0xa0(s0)
;             let count = self.counts.lock()[idx];
80203a20: 2e 95        	add	a0, a0, a1
80203a22: 03 45 05 00  	lbu	a0, 0x0(a0)
80203a26: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80203a2a: a3 07 a4 fe  	sb	a0, -0x11(s0)
80203a2e: 13 05 04 fc  	addi	a0, s0, -0x40
80203a32: 97 50 00 00  	auipc	ra, 0x5
80203a36: e7 80 80 a7  	jalr	-0x588(ra) <_ZN4core3ptr81drop_in_place$LT$os..sync..spin..SpinGuard$LT$$u5b$u8$u3b$$u20$32256$u5d$$GT$$GT$17h45be4ee30f739548E>
80203a3a: 03 35 84 f5  	ld	a0, -0xa8(s0)
80203a3e: aa 70        	ld	ra, 0xa8(sp)
80203a40: 0a 74        	ld	s0, 0xa0(sp)
;     }
80203a42: 4d 61        	addi	sp, sp, 0xb0
80203a44: 82 80        	ret
80203a46: 03 35 04 f6  	ld	a0, -0xa0(s0)

0000000080203a4a <.Lpcrel_hi18>:
;             let count = self.counts.lock()[idx];
80203a4a: 97 05 03 00  	auipc	a1, 0x30
80203a4e: 13 86 e5 37  	addi	a2, a1, 0x37e
80203a52: a1 65        	lui	a1, 0x8
80203a54: 9b 85 05 e0  	addiw	a1, a1, -0x200
80203a58: 97 d0 02 00  	auipc	ra, 0x2d
80203a5c: e7 80 80 85  	jalr	-0x7a8(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

0000000080203a60 <_ZN2os10page_alloc10StackFrame4init17hb07f5bbcef3cd819E>:
;     pub fn init(&mut self, s: PhyPageNum, e: PhyPageNum) {
80203a60: 1d 71        	addi	sp, sp, -0x60
80203a62: 86 ec        	sd	ra, 0x58(sp)
80203a64: a2 e8        	sd	s0, 0x50(sp)
80203a66: 80 10        	addi	s0, sp, 0x60
80203a68: 23 3c c4 fa  	sd	a2, -0x48(s0)
80203a6c: 23 30 b4 fc  	sd	a1, -0x40(s0)
80203a70: aa 85        	mv	a1, a0
80203a72: 03 35 04 fc  	ld	a0, -0x40(s0)
80203a76: 23 34 b4 fc  	sd	a1, -0x38(s0)
80203a7a: 23 3c b4 fc  	sd	a1, -0x28(s0)
80203a7e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80203a82: 23 34 c4 fe  	sd	a2, -0x18(s0)

0000000080203a86 <.Lpcrel_hi19>:
;         self.current = s.into();
80203a86: 97 05 03 00  	auipc	a1, 0x30
80203a8a: 93 85 25 39  	addi	a1, a1, 0x392
80203a8e: 97 30 00 00  	auipc	ra, 0x3
80203a92: e7 80 c0 ff  	jalr	-0x4(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hafd30f1eda44114fE>
80203a96: aa 85        	mv	a1, a0
80203a98: 03 35 84 fc  	ld	a0, -0x38(s0)
80203a9c: 0c ed        	sd	a1, 0x18(a0)
;         self.current = (self.current + PGSZ - 1) / PGSZ * PGSZ;
80203a9e: 0c 6d        	ld	a1, 0x18(a0)
80203aa0: 05 65        	lui	a0, 0x1
80203aa2: 2e 95        	add	a0, a0, a1
80203aa4: 23 38 a4 fc  	sd	a0, -0x30(s0)
80203aa8: 63 6b b5 00  	bltu	a0, a1, 0x80203abe <.Lpcrel_hi20>
80203aac: 09 a0        	j	0x80203aae <.Lpcrel_hi19+0x28>
80203aae: 03 35 04 fd  	ld	a0, -0x30(s0)
;         self.current = (self.current + PGSZ - 1) / PGSZ * PGSZ;
80203ab2: 93 05 f5 ff  	addi	a1, a0, -0x1
80203ab6: 23 38 b4 fa  	sd	a1, -0x50(s0)
80203aba: 05 c9        	beqz	a0, 0x80203aea <.Lpcrel_hi22>
80203abc: 31 a8        	j	0x80203ad8 <.Lpcrel_hi21+0x12>

0000000080203abe <.Lpcrel_hi20>:
80203abe: 17 05 03 00  	auipc	a0, 0x30
80203ac2: 13 05 25 23  	addi	a0, a0, 0x232

0000000080203ac6 <.Lpcrel_hi21>:
80203ac6: 97 05 03 00  	auipc	a1, 0x30
80203aca: 13 86 a5 36  	addi	a2, a1, 0x36a
80203ace: f1 45        	li	a1, 0x1c
80203ad0: 97 c0 02 00  	auipc	ra, 0x2c
80203ad4: e7 80 80 74  	jalr	0x748(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80203ad8: 03 35 04 fb  	ld	a0, -0x50(s0)
80203adc: fd 75        	lui	a1, 0xfffff
;         self.current = (self.current + PGSZ - 1) / PGSZ * PGSZ;
80203ade: 6d 8d        	and	a0, a0, a1
80203ae0: 23 34 a4 fa  	sd	a0, -0x58(s0)
80203ae4: 01 45        	li	a0, 0x0
80203ae6: 31 e5        	bnez	a0, 0x80203b32 <.Lpcrel_hi25>
80203ae8: 39 a8        	j	0x80203b06 <.Lpcrel_hi23+0x14>

0000000080203aea <.Lpcrel_hi22>:
80203aea: 17 05 03 00  	auipc	a0, 0x30
80203aee: 13 05 65 1c  	addi	a0, a0, 0x1c6

0000000080203af2 <.Lpcrel_hi23>:
80203af2: 97 05 03 00  	auipc	a1, 0x30
80203af6: 13 86 65 35  	addi	a2, a1, 0x356
80203afa: 93 05 10 02  	li	a1, 0x21
80203afe: 97 c0 02 00  	auipc	ra, 0x2c
80203b02: e7 80 a0 71  	jalr	0x71a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80203b06: 03 36 84 fc  	ld	a2, -0x38(s0)
80203b0a: 03 35 84 fb  	ld	a0, -0x48(s0)
80203b0e: 83 35 84 fa  	ld	a1, -0x58(s0)
;         self.current = (self.current + PGSZ - 1) / PGSZ * PGSZ;
80203b12: 0c ee        	sd	a1, 0x18(a2)

0000000080203b14 <.Lpcrel_hi24>:
;         self.end = e.into();
80203b14: 97 05 03 00  	auipc	a1, 0x30
80203b18: 93 85 45 37  	addi	a1, a1, 0x374
80203b1c: 97 30 00 00  	auipc	ra, 0x3
80203b20: e7 80 e0 f6  	jalr	-0x92(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hafd30f1eda44114fE>
80203b24: 83 35 84 fc  	ld	a1, -0x38(s0)
80203b28: 88 f1        	sd	a0, 0x20(a1)
80203b2a: e6 60        	ld	ra, 0x58(sp)
80203b2c: 46 64        	ld	s0, 0x50(sp)
;     }
80203b2e: 25 61        	addi	sp, sp, 0x60
80203b30: 82 80        	ret

0000000080203b32 <.Lpcrel_hi25>:
;         self.current = (self.current + PGSZ - 1) / PGSZ * PGSZ;
80203b32: 17 05 03 00  	auipc	a0, 0x30
80203b36: 13 05 e5 32  	addi	a0, a0, 0x32e

0000000080203b3a <.Lpcrel_hi26>:
80203b3a: 97 05 03 00  	auipc	a1, 0x30
80203b3e: 13 86 e5 30  	addi	a2, a1, 0x30e
80203b42: 93 05 10 02  	li	a1, 0x21
80203b46: 97 c0 02 00  	auipc	ra, 0x2c
80203b4a: e7 80 20 6d  	jalr	0x6d2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080203b4e <_ZN2os10page_alloc10StackFrame5alloc17h211ae9e591d5e2d4E>:
;     pub fn alloc(&mut self) -> PhyPageNum {
80203b4e: 31 71        	addi	sp, sp, -0xc0
80203b50: 06 fd        	sd	ra, 0xb8(sp)
80203b52: 22 f9        	sd	s0, 0xb0(sp)
80203b54: 80 01        	addi	s0, sp, 0xc0
80203b56: aa 85        	mv	a1, a0
80203b58: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80203b5c: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         if self.current >= self.end {
80203b60: 88 6d        	ld	a0, 0x18(a1)
80203b62: 8c 71        	ld	a1, 0x20(a1)
80203b64: 63 71 b5 02  	bgeu	a0, a1, 0x80203b86 <.Lpcrel_hi27>
80203b68: 09 a0        	j	0x80203b6a <_ZN2os10page_alloc10StackFrame5alloc17h211ae9e591d5e2d4E+0x1c>
80203b6a: 03 35 04 f6  	ld	a0, -0xa0(s0)
;         let pages: Option<usize> = self.free.pop();
80203b6e: 97 10 01 00  	auipc	ra, 0x11
80203b72: e7 80 e0 de  	jalr	-0x212(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE>
80203b76: 23 30 a4 fa  	sd	a0, -0x60(s0)
80203b7a: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         match pages {
80203b7e: 03 35 04 fa  	ld	a0, -0x60(s0)
80203b82: 0d c9        	beqz	a0, 0x80203bb4 <.Lpcrel_hi28+0x10>
80203b84: b9 a0        	j	0x80203bd2 <.Lpcrel_hi28+0x2e>

0000000080203b86 <.Lpcrel_hi27>:
;             panic!("no pages")
80203b86: 17 05 03 00  	auipc	a0, 0x30
80203b8a: 93 05 25 39  	addi	a1, a0, 0x392
80203b8e: 13 05 04 f7  	addi	a0, s0, -0x90
80203b92: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80203b96: 05 46        	li	a2, 0x1
80203b98: 97 40 00 00  	auipc	ra, 0x4
80203b9c: e7 80 c0 81  	jalr	-0x7e4(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
80203ba0: 03 35 84 f5  	ld	a0, -0xa8(s0)

0000000080203ba4 <.Lpcrel_hi28>:
80203ba4: 97 05 03 00  	auipc	a1, 0x30
80203ba8: 93 85 45 38  	addi	a1, a1, 0x384
80203bac: 97 c0 02 00  	auipc	ra, 0x2c
80203bb0: e7 80 c0 5f  	jalr	0x5fc(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80203bb4: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                 let ret = self.current;
80203bb8: 0c 6d        	ld	a1, 0x18(a0)
80203bba: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80203bbe: 23 3c b4 fa  	sd	a1, -0x48(s0)
;                 self.current += PGSZ;
80203bc2: 0c 6d        	ld	a1, 0x18(a0)
80203bc4: 05 65        	lui	a0, 0x1
80203bc6: 2e 95        	add	a0, a0, a1
80203bc8: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80203bcc: 63 62 b5 0c  	bltu	a0, a1, 0x80203c90 <.Lpcrel_hi35>
80203bd0: 61 a0        	j	0x80203c58 <.Lpcrel_hi32+0x16>
;                 PAGE_COUNTS.addcount(pages.unwrap());
80203bd2: 83 35 04 fa  	ld	a1, -0x60(s0)
80203bd6: 03 35 84 fa  	ld	a0, -0x58(s0)
80203bda: 23 3c b4 fc  	sd	a1, -0x28(s0)
80203bde: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80203be2: 03 35 84 fd  	ld	a0, -0x28(s0)
80203be6: 11 e9        	bnez	a0, 0x80203bfa <.Lpcrel_hi29+0x10>
80203be8: 09 a0        	j	0x80203bea <.Lpcrel_hi29>

0000000080203bea <.Lpcrel_hi29>:
;             None => unwrap_failed(),
80203bea: 17 05 03 00  	auipc	a0, 0x30
80203bee: 13 05 65 2e  	addi	a0, a0, 0x2e6
80203bf2: 97 d0 02 00  	auipc	ra, 0x2d
80203bf6: e7 80 60 0d  	jalr	0xd6(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80203bfa: 83 35 04 fe  	ld	a1, -0x20(s0)
80203bfe: 23 34 b4 fe  	sd	a1, -0x18(s0)

0000000080203c02 <.Lpcrel_hi30>:
;                 PAGE_COUNTS.addcount(pages.unwrap());
80203c02: 17 a5 03 00  	auipc	a0, 0x3a
80203c06: 13 05 e5 43  	addi	a0, a0, 0x43e
80203c0a: 97 00 00 00  	auipc	ra, 0x0
80203c0e: e7 80 e0 a7  	jalr	-0x582(ra) <_ZN2os10page_alloc10PageCounts8addcount17h3c708f643f70319aE>
;                 pages.unwrap().into()
80203c12: 83 35 04 fa  	ld	a1, -0x60(s0)
80203c16: 03 35 84 fa  	ld	a0, -0x58(s0)
80203c1a: 23 30 b4 fc  	sd	a1, -0x40(s0)
80203c1e: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         match self {
80203c22: 03 35 04 fc  	ld	a0, -0x40(s0)
80203c26: 11 e9        	bnez	a0, 0x80203c3a <.Lpcrel_hi31+0x10>
80203c28: 09 a0        	j	0x80203c2a <.Lpcrel_hi31>

0000000080203c2a <.Lpcrel_hi31>:
;             None => unwrap_failed(),
80203c2a: 17 05 03 00  	auipc	a0, 0x30
80203c2e: 13 05 e5 2b  	addi	a0, a0, 0x2be
80203c32: 97 d0 02 00  	auipc	ra, 0x2d
80203c36: e7 80 60 09  	jalr	0x96(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80203c3a: 03 35 84 fc  	ld	a0, -0x38(s0)
80203c3e: 23 38 a4 fc  	sd	a0, -0x30(s0)

0000000080203c42 <.Lpcrel_hi32>:
;                 pages.unwrap().into()
80203c42: 97 05 03 00  	auipc	a1, 0x30
80203c46: 93 85 e5 2b  	addi	a1, a1, 0x2be
80203c4a: 97 80 00 00  	auipc	ra, 0x8
80203c4e: e7 80 80 2c  	jalr	0x2c8(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha9cb1c0b7f0c453aE>
80203c52: 23 34 a4 f6  	sd	a0, -0x98(s0)
80203c56: 91 a8        	j	0x80203caa <.Lpcrel_hi36+0x12>
80203c58: 83 35 84 f4  	ld	a1, -0xb8(s0)
80203c5c: 03 35 04 f5  	ld	a0, -0xb0(s0)
80203c60: 03 36 04 f6  	ld	a2, -0xa0(s0)
;                 self.current += PGSZ;
80203c64: 08 ee        	sd	a0, 0x18(a2)

0000000080203c66 <.Lpcrel_hi33>:
;                 PAGE_COUNTS.addcount(ret);
80203c66: 17 a5 03 00  	auipc	a0, 0x3a
80203c6a: 13 05 a5 3d  	addi	a0, a0, 0x3da
80203c6e: 97 00 00 00  	auipc	ra, 0x0
80203c72: e7 80 a0 a1  	jalr	-0x5e6(ra) <_ZN2os10page_alloc10PageCounts8addcount17h3c708f643f70319aE>
80203c76: 03 35 84 f4  	ld	a0, -0xb8(s0)

0000000080203c7a <.Lpcrel_hi34>:
;                 ret.into()
80203c7a: 97 05 03 00  	auipc	a1, 0x30
80203c7e: 93 85 e5 23  	addi	a1, a1, 0x23e
80203c82: 97 80 00 00  	auipc	ra, 0x8
80203c86: e7 80 00 29  	jalr	0x290(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha9cb1c0b7f0c453aE>
80203c8a: 23 34 a4 f6  	sd	a0, -0x98(s0)
80203c8e: 31 a8        	j	0x80203caa <.Lpcrel_hi36+0x12>

0000000080203c90 <.Lpcrel_hi35>:
;                 self.current += PGSZ;
80203c90: 17 05 03 00  	auipc	a0, 0x30
80203c94: 13 05 05 06  	addi	a0, a0, 0x60

0000000080203c98 <.Lpcrel_hi36>:
80203c98: 97 05 03 00  	auipc	a1, 0x30
80203c9c: 13 86 85 20  	addi	a2, a1, 0x208
80203ca0: f1 45        	li	a1, 0x1c
80203ca2: 97 c0 02 00  	auipc	ra, 0x2c
80203ca6: e7 80 60 57  	jalr	0x576(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;     }
80203caa: 03 35 84 f6  	ld	a0, -0x98(s0)
80203cae: ea 70        	ld	ra, 0xb8(sp)
80203cb0: 4a 74        	ld	s0, 0xb0(sp)
80203cb2: 29 61        	addi	sp, sp, 0xc0
80203cb4: 82 80        	ret

0000000080203cb6 <_ZN2os10page_alloc10StackFrame7dealloc17hd481a147eb39645bE>:
;     pub fn dealloc(&mut self, page: PhyPageNum) {
80203cb6: 65 71        	addi	sp, sp, -0x190
80203cb8: 06 e7        	sd	ra, 0x188(sp)
80203cba: 22 e3        	sd	s0, 0x180(sp)
80203cbc: 00 0b        	addi	s0, sp, 0x190
80203cbe: 23 3c b4 e6  	sd	a1, -0x188(s0)
80203cc2: aa 85        	mv	a1, a0
80203cc4: 03 35 84 e7  	ld	a0, -0x188(s0)
80203cc8: 23 30 b4 e8  	sd	a1, -0x180(s0)
80203ccc: 23 30 b4 f8  	sd	a1, -0x80(s0)
80203cd0: 23 34 a4 f8  	sd	a0, -0x78(s0)

0000000080203cd4 <.Lpcrel_hi37>:
;         let page: usize = page.into();
80203cd4: 97 05 03 00  	auipc	a1, 0x30
80203cd8: 93 85 c5 26  	addi	a1, a1, 0x26c
80203cdc: 97 30 00 00  	auipc	ra, 0x3
80203ce0: e7 80 e0 da  	jalr	-0x252(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hafd30f1eda44114fE>
80203ce4: 83 35 04 e8  	ld	a1, -0x180(s0)
80203ce8: 23 34 a4 e8  	sd	a0, -0x178(s0)
;         if page >= self.current {
80203cec: 03 35 84 e8  	ld	a0, -0x178(s0)
80203cf0: 8c 6d        	ld	a1, 0x18(a1)
80203cf2: 63 73 b5 02  	bgeu	a0, a1, 0x80203d18 <.Lpcrel_hi38+0x1c>
80203cf6: 09 a0        	j	0x80203cf8 <.Lpcrel_hi37+0x24>
;         if (PAGE_COUNTS.getcount(page) == 1) {
80203cf8: 83 35 84 e8  	ld	a1, -0x178(s0)

0000000080203cfc <.Lpcrel_hi38>:
80203cfc: 17 a5 03 00  	auipc	a0, 0x3a
80203d00: 13 05 45 34  	addi	a0, a0, 0x344
80203d04: 97 00 00 00  	auipc	ra, 0x0
80203d08: e7 80 40 c3  	jalr	-0x3cc(ra) <_ZN2os10page_alloc10PageCounts8getcount17h0b8422019046b499E>
80203d0c: 13 75 f5 0f  	andi	a0, a0, 0xff
80203d10: 85 45        	li	a1, 0x1
80203d12: 63 0c b5 04  	beq	a0, a1, 0x80203d6a <.Lpcrel_hi38+0x6e>
80203d16: ad a8        	j	0x80203d90 <.Lpcrel_hi39+0x22>
80203d18: 03 35 04 e8  	ld	a0, -0x180(s0)
;             for i in self.free.iter() {
80203d1c: 97 10 01 00  	auipc	ra, 0x11
80203d20: e7 80 c0 30  	jalr	0x30c(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf4f75d0324e5c103E>
80203d24: 97 20 00 00  	auipc	ra, 0x2
80203d28: e7 80 00 10  	jalr	0x100(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9031ef9caebde82E>
80203d2c: 97 80 00 00  	auipc	ra, 0x8
80203d30: e7 80 80 c0  	jalr	-0x3f8(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h8cdf9b2c1f91f96bE>
80203d34: 23 38 a4 e8  	sd	a0, -0x170(s0)
80203d38: 23 3c b4 e8  	sd	a1, -0x168(s0)
80203d3c: 09 a0        	j	0x80203d3e <.Lpcrel_hi38+0x42>
80203d3e: 13 05 04 e9  	addi	a0, s0, -0x170
;             for i in self.free.iter() {
80203d42: 97 80 02 00  	auipc	ra, 0x28
80203d46: e7 80 80 ce  	jalr	-0x318(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E>
80203d4a: 23 30 a4 ea  	sd	a0, -0x160(s0)
80203d4e: 03 35 04 ea  	ld	a0, -0x160(s0)
80203d52: 5d d1        	beqz	a0, 0x80203cf8 <.Lpcrel_hi37+0x24>
80203d54: 09 a0        	j	0x80203d56 <.Lpcrel_hi38+0x5a>
80203d56: 03 35 04 ea  	ld	a0, -0x160(s0)
80203d5a: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                 if *i == page {
80203d5e: 08 61        	ld	a0, 0x0(a0)
80203d60: 83 35 84 e8  	ld	a1, -0x178(s0)
80203d64: 63 05 b5 04  	beq	a0, a1, 0x80203dae <.Lpcrel_hi40+0x1a>
80203d68: d9 bf        	j	0x80203d3e <.Lpcrel_hi38+0x42>
;             PAGE_COUNTS.subcount(page);
80203d6a: 83 35 84 e8  	ld	a1, -0x178(s0)

0000000080203d6e <.Lpcrel_hi39>:
80203d6e: 17 a5 03 00  	auipc	a0, 0x3a
80203d72: 13 05 25 2d  	addi	a0, a0, 0x2d2
80203d76: 97 00 00 00  	auipc	ra, 0x0
80203d7a: e7 80 c0 a6  	jalr	-0x594(ra) <_ZN2os10page_alloc10PageCounts8subcount17h53c28784e2bd7ec6E>
80203d7e: 03 35 04 e8  	ld	a0, -0x180(s0)
;             self.free.push(page);
80203d82: 83 35 84 e8  	ld	a1, -0x178(s0)
80203d86: 97 10 01 00  	auipc	ra, 0x11
80203d8a: e7 80 c0 f2  	jalr	-0xd4(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE>
80203d8e: 21 a8        	j	0x80203da6 <.Lpcrel_hi40+0x12>
;             PAGE_COUNTS.subcount(page);
80203d90: 83 35 84 e8  	ld	a1, -0x178(s0)

0000000080203d94 <.Lpcrel_hi40>:
80203d94: 17 a5 03 00  	auipc	a0, 0x3a
80203d98: 13 05 c5 2a  	addi	a0, a0, 0x2ac
80203d9c: 97 00 00 00  	auipc	ra, 0x0
80203da0: e7 80 60 a4  	jalr	-0x5ba(ra) <_ZN2os10page_alloc10PageCounts8subcount17h53c28784e2bd7ec6E>
80203da4: 09 a0        	j	0x80203da6 <.Lpcrel_hi40+0x12>
80203da6: ba 60        	ld	ra, 0x188(sp)
80203da8: 1a 64        	ld	s0, 0x180(sp)
;     }
80203daa: 59 61        	addi	sp, sp, 0x190
80203dac: 82 80        	ret
80203dae: 93 05 84 e8  	addi	a1, s0, -0x178
80203db2: 23 30 b4 fe  	sd	a1, -0x20(s0)

0000000080203db6 <.Lpcrel_hi41>:
;         Self::new(x, LowerHex::fmt)
80203db6: 17 b5 02 00  	auipc	a0, 0x2b
80203dba: 13 05 e5 1f  	addi	a0, a0, 0x1fe
80203dbe: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80203dc2: 23 38 b4 fc  	sd	a1, -0x30(s0)
80203dc6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80203dca: 83 35 04 fd  	ld	a1, -0x30(s0)
80203dce: 03 35 84 fd  	ld	a0, -0x28(s0)
;                     panic!("pages:{:#x} has not alloced", page);
80203dd2: 23 3c b4 ec  	sd	a1, -0x128(s0)
80203dd6: 23 30 a4 ee  	sd	a0, -0x120(s0)
80203dda: 0d 45        	li	a0, 0x3
80203ddc: a3 0f a4 f4  	sb	a0, -0xa1(s0)
80203de0: 09 46        	li	a2, 0x2
80203de2: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80203de6: 23 38 c4 f6  	sd	a2, -0x90(s0)
80203dea: 03 48 f4 f5  	lbu	a6, -0xa1(s0)
80203dee: 03 37 04 f6  	ld	a4, -0xa0(s0)
80203df2: 83 36 84 f6  	ld	a3, -0x98(s0)
80203df6: 83 35 04 f7  	ld	a1, -0x90(s0)
80203dfa: 03 35 84 f7  	ld	a0, -0x88(s0)
80203dfe: 81 42        	li	t0, 0x0
80203e00: 23 3c 54 f8  	sd	t0, -0x68(s0)
80203e04: 93 08 00 02  	li	a7, 0x20
80203e08: 23 22 14 fb  	sw	a7, -0x5c(s0)
80203e0c: a3 05 04 fb  	sb	a6, -0x55(s0)
80203e10: 91 47        	li	a5, 0x4
80203e12: 23 26 f4 fa  	sw	a5, -0x54(s0)
80203e16: 23 38 e4 fa  	sd	a4, -0x50(s0)
80203e1a: 23 3c d4 fa  	sd	a3, -0x48(s0)
80203e1e: 23 30 b4 fc  	sd	a1, -0x40(s0)
80203e22: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         Self { position, fill, align, flags, precision, width }
80203e26: 23 30 54 f4  	sd	t0, -0xc0(s0)
80203e2a: 23 24 14 f5  	sw	a7, -0xb8(s0)
80203e2e: 23 08 04 f5  	sb	a6, -0xb0(s0)
80203e32: 23 26 f4 f4  	sw	a5, -0xb4(s0)
80203e36: 23 30 e4 f2  	sd	a4, -0xe0(s0)
80203e3a: 23 34 d4 f2  	sd	a3, -0xd8(s0)
80203e3e: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80203e42: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;                     panic!("pages:{:#x} has not alloced", page);
80203e46: 03 35 04 f5  	ld	a0, -0xb0(s0)
80203e4a: 23 3c a4 f0  	sd	a0, -0xe8(s0)
80203e4e: 03 35 84 f4  	ld	a0, -0xb8(s0)
80203e52: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80203e56: 03 35 04 f4  	ld	a0, -0xc0(s0)
80203e5a: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80203e5e: 03 35 84 f3  	ld	a0, -0xc8(s0)
80203e62: 23 30 a4 f0  	sd	a0, -0x100(s0)
80203e66: 03 35 04 f3  	ld	a0, -0xd0(s0)
80203e6a: 23 3c a4 ee  	sd	a0, -0x108(s0)
80203e6e: 03 35 84 f2  	ld	a0, -0xd8(s0)
80203e72: 23 38 a4 ee  	sd	a0, -0x110(s0)
80203e76: 03 35 04 f2  	ld	a0, -0xe0(s0)
80203e7a: 23 34 a4 ee  	sd	a0, -0x118(s0)

0000000080203e7e <.Lpcrel_hi42>:
80203e7e: 17 05 03 00  	auipc	a0, 0x30
80203e82: 93 05 25 0e  	addi	a1, a0, 0xe2
80203e86: 13 05 84 ea  	addi	a0, s0, -0x158
80203e8a: 23 38 a4 e6  	sd	a0, -0x190(s0)
80203e8e: 93 06 84 ed  	addi	a3, s0, -0x128
80203e92: 93 07 84 ee  	addi	a5, s0, -0x118
80203e96: 05 48        	li	a6, 0x1
80203e98: 42 87        	mv	a4, a6
80203e9a: 97 30 00 00  	auipc	ra, 0x3
80203e9e: e7 80 a0 40  	jalr	0x40a(ra) <_ZN4core3fmt9Arguments16new_v1_formatted17h3e99fd036cfd62bdE>
80203ea2: 03 35 04 e7  	ld	a0, -0x190(s0)

0000000080203ea6 <.Lpcrel_hi43>:
80203ea6: 97 05 03 00  	auipc	a1, 0x30
80203eaa: 93 85 a5 0d  	addi	a1, a1, 0xda
80203eae: 97 c0 02 00  	auipc	ra, 0x2c
80203eb2: e7 80 a0 2f  	jalr	0x2fa(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080203eb6 <_ZN2os10page_alloc12FarmeAllocer10page_alloc17he36ef73b90890552E>:
;     pub fn page_alloc(&self) -> AllocerGuard {
80203eb6: 59 71        	addi	sp, sp, -0x70
80203eb8: 86 f4        	sd	ra, 0x68(sp)
80203eba: a2 f0        	sd	s0, 0x60(sp)
80203ebc: 80 18        	addi	s0, sp, 0x70
80203ebe: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             let page = self.allocer.lock().alloc();
80203ec2: 97 f0 00 00  	auipc	ra, 0xf
80203ec6: e7 80 80 40  	jalr	0x408(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hbbb08997d044d342E>
80203eca: 23 34 a4 fa  	sd	a0, -0x58(s0)
80203ece: 23 38 b4 fa  	sd	a1, -0x50(s0)
80203ed2: 13 05 84 fa  	addi	a0, s0, -0x58
80203ed6: 23 38 a4 f8  	sd	a0, -0x70(s0)
80203eda: 97 00 01 00  	auipc	ra, 0x10
80203ede: e7 80 60 d8  	jalr	-0x27a(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hff3525feedbc61beE>
80203ee2: 97 00 00 00  	auipc	ra, 0x0
80203ee6: e7 80 c0 c6  	jalr	-0x394(ra) <_ZN2os10page_alloc10StackFrame5alloc17h211ae9e591d5e2d4E>
80203eea: aa 85        	mv	a1, a0
80203eec: 03 35 04 f9  	ld	a0, -0x70(s0)
80203ef0: 23 30 b4 fa  	sd	a1, -0x60(s0)
80203ef4: 97 40 00 00  	auipc	ra, 0x4
80203ef8: e7 80 40 53  	jalr	0x534(ra) <_ZN4core3ptr80drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..page_alloc..StackFrame$GT$$GT$17ha2f4a81332d784cbE>
80203efc: 13 05 04 fa  	addi	a0, s0, -0x60
;             let byte_arry = page.get_bytes_array();
80203f00: 97 80 00 00  	auipc	ra, 0x8
80203f04: e7 80 c0 3d  	jalr	0x3dc(ra) <_ZN2os2vm10PhyPageNum15get_bytes_array17ha54148423947db22E>
80203f08: 23 3c a4 fc  	sd	a0, -0x28(s0)
80203f0c: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             for i in byte_arry {
80203f10: 97 80 00 00  	auipc	ra, 0x8
80203f14: e7 80 e0 97  	jalr	-0x682(ra) <_ZN4core5slice4iter95_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$mut$u20$$u5b$T$u5d$$GT$9into_iter17h5644b02908c8be85E>
80203f18: 23 3c a4 fa  	sd	a0, -0x48(s0)
80203f1c: 23 30 b4 fc  	sd	a1, -0x40(s0)
80203f20: 09 a0        	j	0x80203f22 <_ZN2os10page_alloc12FarmeAllocer10page_alloc17he36ef73b90890552E+0x6c>
80203f22: 13 05 84 fb  	addi	a0, s0, -0x48
;             for i in byte_arry {
80203f26: 97 50 02 00  	auipc	ra, 0x25
80203f2a: e7 80 40 b7  	jalr	-0x48c(ra) <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE>
80203f2e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80203f32: 03 35 84 fc  	ld	a0, -0x38(s0)
80203f36: 01 ed        	bnez	a0, 0x80203f4e <_ZN2os10page_alloc12FarmeAllocer10page_alloc17he36ef73b90890552E+0x98>
80203f38: 09 a0        	j	0x80203f3a <_ZN2os10page_alloc12FarmeAllocer10page_alloc17he36ef73b90890552E+0x84>
;             AllocerGuard { pages: page }
80203f3a: 03 35 04 fa  	ld	a0, -0x60(s0)
80203f3e: 23 3c a4 f8  	sd	a0, -0x68(s0)
;     }
80203f42: 03 35 84 f9  	ld	a0, -0x68(s0)
80203f46: a6 70        	ld	ra, 0x68(sp)
80203f48: 06 74        	ld	s0, 0x60(sp)
80203f4a: 65 61        	addi	sp, sp, 0x70
80203f4c: 82 80        	ret
;             for i in byte_arry {
80203f4e: 83 35 84 fc  	ld	a1, -0x38(s0)
80203f52: 23 34 b4 fe  	sd	a1, -0x18(s0)
80203f56: 01 45        	li	a0, 0x0
;                 *i = 0;
80203f58: 23 80 a5 00  	sb	a0, 0x0(a1)
;             for i in byte_arry {
80203f5c: d9 b7        	j	0x80203f22 <_ZN2os10page_alloc12FarmeAllocer10page_alloc17he36ef73b90890552E+0x6c>

0000000080203f5e <_ZN2os10page_alloc12FarmeAllocer12page_dealloc17h08c3c9b80faae5b4E>:
;     pub fn page_dealloc(&self, page: PhyPageNum) {
80203f5e: 39 71        	addi	sp, sp, -0x40
80203f60: 06 fc        	sd	ra, 0x38(sp)
80203f62: 22 f8        	sd	s0, 0x30(sp)
80203f64: 80 00        	addi	s0, sp, 0x40
80203f66: 23 30 b4 fc  	sd	a1, -0x40(s0)
80203f6a: 23 30 a4 fe  	sd	a0, -0x20(s0)
80203f6e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             self.allocer.lock().dealloc(page);
80203f72: 97 f0 00 00  	auipc	ra, 0xf
80203f76: e7 80 80 35  	jalr	0x358(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hbbb08997d044d342E>
80203f7a: 23 38 a4 fc  	sd	a0, -0x30(s0)
80203f7e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80203f82: 13 05 04 fd  	addi	a0, s0, -0x30
80203f86: 23 34 a4 fc  	sd	a0, -0x38(s0)
80203f8a: 97 00 01 00  	auipc	ra, 0x10
80203f8e: e7 80 60 cd  	jalr	-0x32a(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hff3525feedbc61beE>
80203f92: 83 35 04 fc  	ld	a1, -0x40(s0)
80203f96: 97 00 00 00  	auipc	ra, 0x0
80203f9a: e7 80 00 d2  	jalr	-0x2e0(ra) <_ZN2os10page_alloc10StackFrame7dealloc17hd481a147eb39645bE>
80203f9e: 03 35 84 fc  	ld	a0, -0x38(s0)
80203fa2: 97 40 00 00  	auipc	ra, 0x4
80203fa6: e7 80 60 48  	jalr	0x486(ra) <_ZN4core3ptr80drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..page_alloc..StackFrame$GT$$GT$17ha2f4a81332d784cbE>
80203faa: e2 70        	ld	ra, 0x38(sp)
80203fac: 42 74        	ld	s0, 0x30(sp)
;     }
80203fae: 21 61        	addi	sp, sp, 0x40
80203fb0: 82 80        	ret

0000000080203fb2 <_ZN2os10page_alloc12FarmeAllocer12allocer_init17h8a0c141e36913b0dE>:
;     pub fn allocer_init(&self) {
80203fb2: 5d 71        	addi	sp, sp, -0x50
80203fb4: 86 e4        	sd	ra, 0x48(sp)
80203fb6: a2 e0        	sd	s0, 0x40(sp)
80203fb8: 80 08        	addi	s0, sp, 0x50
80203fba: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             self.allocer
80203fbe: 97 f0 00 00  	auipc	ra, 0xf
80203fc2: e7 80 c0 30  	jalr	0x30c(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hbbb08997d044d342E>
80203fc6: 23 3c a4 fc  	sd	a0, -0x28(s0)
80203fca: 23 30 b4 fe  	sd	a1, -0x20(s0)
80203fce: 13 05 84 fd  	addi	a0, s0, -0x28
80203fd2: 97 00 01 00  	auipc	ra, 0x10
80203fd6: e7 80 e0 c8  	jalr	-0x372(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hff3525feedbc61beE>
80203fda: 23 30 a4 fc  	sd	a0, -0x40(s0)

0000000080203fde <.Lpcrel_hi44>:
;                 .init((ekernel as usize).into(), (PHYSTOP - 50 * PGSZ).into())
80203fde: 17 95 34 00  	auipc	a0, 0x349
80203fe2: 13 05 25 02  	addi	a0, a0, 0x22

0000000080203fe6 <.Lpcrel_hi45>:
80203fe6: 97 05 03 00  	auipc	a1, 0x30
80203fea: 93 85 25 fb  	addi	a1, a1, -0x4e
80203fee: 97 80 00 00  	auipc	ra, 0x8
80203ff2: e7 80 40 f2  	jalr	-0xdc(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha9cb1c0b7f0c453aE>
80203ff6: 23 34 a4 fc  	sd	a0, -0x38(s0)
80203ffa: 37 25 03 00  	lui	a0, 0x32
80203ffe: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204002: 01 45        	li	a0, 0x0
80204004: 09 ed        	bnez	a0, 0x8020401e <.Lpcrel_hi46>
80204006: 09 a0        	j	0x80204008 <.Lpcrel_hi45+0x22>
80204008: 83 35 04 fd  	ld	a1, -0x30(s0)
8020400c: 45 45        	li	a0, 0x11
8020400e: 6e 05        	slli	a0, a0, 0x1b
;                 .init((ekernel as usize).into(), (PHYSTOP - 50 * PGSZ).into())
80204010: 33 06 b5 40  	sub	a2, a0, a1
80204014: 23 3c c4 fa  	sd	a2, -0x48(s0)
80204018: 63 6e b5 04  	bltu	a0, a1, 0x80204074 <.Lpcrel_hi49>
8020401c: 39 a8        	j	0x8020403a <.Lpcrel_hi47+0x14>

000000008020401e <.Lpcrel_hi46>:
8020401e: 17 05 03 00  	auipc	a0, 0x30
80204022: 13 05 25 e4  	addi	a0, a0, -0x1be

0000000080204026 <.Lpcrel_hi47>:
80204026: 97 05 03 00  	auipc	a1, 0x30
8020402a: 13 86 a5 f8  	addi	a2, a1, -0x76
8020402e: 93 05 10 02  	li	a1, 0x21
80204032: 97 c0 02 00  	auipc	ra, 0x2c
80204036: e7 80 60 1e  	jalr	0x1e6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020403a: 03 35 84 fb  	ld	a0, -0x48(s0)

000000008020403e <.Lpcrel_hi48>:
;                 .init((ekernel as usize).into(), (PHYSTOP - 50 * PGSZ).into())
8020403e: 97 05 03 00  	auipc	a1, 0x30
80204042: 93 85 25 fa  	addi	a1, a1, -0x5e
80204046: 97 80 00 00  	auipc	ra, 0x8
8020404a: e7 80 c0 ec  	jalr	-0x134(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha9cb1c0b7f0c453aE>
8020404e: 83 35 84 fc  	ld	a1, -0x38(s0)
80204052: 2a 86        	mv	a2, a0
80204054: 03 35 04 fc  	ld	a0, -0x40(s0)
;             self.allocer
80204058: 97 00 00 00  	auipc	ra, 0x0
8020405c: e7 80 80 a0  	jalr	-0x5f8(ra) <_ZN2os10page_alloc10StackFrame4init17hb07f5bbcef3cd819E>
80204060: 13 05 84 fd  	addi	a0, s0, -0x28
;     }
80204064: 97 40 00 00  	auipc	ra, 0x4
80204068: e7 80 40 3c  	jalr	0x3c4(ra) <_ZN4core3ptr80drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..page_alloc..StackFrame$GT$$GT$17ha2f4a81332d784cbE>
8020406c: a6 60        	ld	ra, 0x48(sp)
8020406e: 06 64        	ld	s0, 0x40(sp)
80204070: 61 61        	addi	sp, sp, 0x50
80204072: 82 80        	ret

0000000080204074 <.Lpcrel_hi49>:
;                 .init((ekernel as usize).into(), (PHYSTOP - 50 * PGSZ).into())
80204074: 17 05 03 00  	auipc	a0, 0x30
80204078: 13 05 c5 c3  	addi	a0, a0, -0x3c4

000000008020407c <.Lpcrel_hi50>:
8020407c: 97 05 03 00  	auipc	a1, 0x30
80204080: 13 86 c5 f4  	addi	a2, a1, -0xb4
80204084: 93 05 10 02  	li	a1, 0x21
80204088: 97 c0 02 00  	auipc	ra, 0x2c
8020408c: e7 80 00 19  	jalr	0x190(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080204090 <_ZN2os10page_alloc10UserBuffer3new17h5429c14b5d34e052E>:
;     pub fn new(buffers: Vec<&'static mut [u8]>) -> Self {
80204090: 01 11        	addi	sp, sp, -0x20
80204092: 06 ec        	sd	ra, 0x18(sp)
80204094: 22 e8        	sd	s0, 0x10(sp)
80204096: 00 10        	addi	s0, sp, 0x20
80204098: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020409c: aa 85        	mv	a1, a0
8020409e: 03 35 84 fe  	ld	a0, -0x18(s0)
;         Self { buffers }
802040a2: 10 69        	ld	a2, 0x10(a0)
802040a4: 90 e9        	sd	a2, 0x10(a1)
802040a6: 10 65        	ld	a2, 0x8(a0)
802040a8: 90 e5        	sd	a2, 0x8(a1)
802040aa: 08 61        	ld	a0, 0x0(a0)
802040ac: 88 e1        	sd	a0, 0x0(a1)
802040ae: e2 60        	ld	ra, 0x18(sp)
802040b0: 42 64        	ld	s0, 0x10(sp)
;     }
802040b2: 05 61        	addi	sp, sp, 0x20
802040b4: 82 80        	ret

00000000802040b6 <_ZN2os10page_alloc10UserBuffer3len17hd677f78be39f6271E>:
;     pub fn len(&self) -> usize {
802040b6: 5d 71        	addi	sp, sp, -0x50
802040b8: 86 e4        	sd	ra, 0x48(sp)
802040ba: a2 e0        	sd	s0, 0x40(sp)
802040bc: 80 08        	addi	s0, sp, 0x50
802040be: 23 30 a4 fe  	sd	a0, -0x20(s0)
802040c2: 81 45        	li	a1, 0x0
;         let mut total: usize = 0;
802040c4: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         for b in self.buffers.iter() {
802040c8: 97 10 01 00  	auipc	ra, 0x11
802040cc: e7 80 40 e0  	jalr	-0x1fc(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h74acfaeb179f7557E>
802040d0: 97 20 00 00  	auipc	ra, 0x2
802040d4: e7 80 40 cf  	jalr	-0x30c(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h861122a063915004E>
802040d8: 97 80 00 00  	auipc	ra, 0x8
802040dc: e7 80 40 84  	jalr	-0x7bc(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7acfd28025590632E>
802040e0: 23 34 a4 fc  	sd	a0, -0x38(s0)
802040e4: 23 38 b4 fc  	sd	a1, -0x30(s0)
802040e8: 09 a0        	j	0x802040ea <_ZN2os10page_alloc10UserBuffer3len17hd677f78be39f6271E+0x34>
802040ea: 13 05 84 fc  	addi	a0, s0, -0x38
;         for b in self.buffers.iter() {
802040ee: 97 80 00 00  	auipc	ra, 0x8
802040f2: e7 80 20 b2  	jalr	-0x4de(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E>
802040f6: 23 3c a4 fc  	sd	a0, -0x28(s0)
802040fa: 03 35 84 fd  	ld	a0, -0x28(s0)
802040fe: 01 e9        	bnez	a0, 0x8020410e <_ZN2os10page_alloc10UserBuffer3len17hd677f78be39f6271E+0x58>
80204100: 09 a0        	j	0x80204102 <_ZN2os10page_alloc10UserBuffer3len17hd677f78be39f6271E+0x4c>
;         total
80204102: 03 35 04 fc  	ld	a0, -0x40(s0)
80204106: a6 60        	ld	ra, 0x48(sp)
80204108: 06 64        	ld	s0, 0x40(sp)
;     }
8020410a: 61 61        	addi	sp, sp, 0x50
8020410c: 82 80        	ret
;         for b in self.buffers.iter() {
8020410e: 03 35 84 fd  	ld	a0, -0x28(s0)
80204112: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             total += b.len();
80204116: 08 65        	ld	a0, 0x8(a0)
80204118: 83 35 04 fc  	ld	a1, -0x40(s0)
8020411c: 2e 95        	add	a0, a0, a1
8020411e: 23 3c a4 fa  	sd	a0, -0x48(s0)
80204122: 63 68 b5 00  	bltu	a0, a1, 0x80204132 <.Lpcrel_hi51>
80204126: 09 a0        	j	0x80204128 <_ZN2os10page_alloc10UserBuffer3len17hd677f78be39f6271E+0x72>
80204128: 03 35 84 fb  	ld	a0, -0x48(s0)
;             total += b.len();
8020412c: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         for b in self.buffers.iter() {
80204130: 6d bf        	j	0x802040ea <_ZN2os10page_alloc10UserBuffer3len17hd677f78be39f6271E+0x34>

0000000080204132 <.Lpcrel_hi51>:
;             total += b.len();
80204132: 17 05 03 00  	auipc	a0, 0x30
80204136: 13 05 e5 bb  	addi	a0, a0, -0x442

000000008020413a <.Lpcrel_hi52>:
8020413a: 97 05 03 00  	auipc	a1, 0x30
8020413e: 13 86 e5 eb  	addi	a2, a1, -0x142
80204142: f1 45        	li	a1, 0x1c
80204144: 97 c0 02 00  	auipc	ra, 0x2c
80204148: e7 80 40 0d  	jalr	0xd4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020414c <_ZN2os7syscall2fs9sys_write17he5448de59177e6eeE>:
; pub fn sys_write(fd:usize,buf: *const u8,len:usize) -> isize {
8020414c: 45 71        	addi	sp, sp, -0x1d0
8020414e: 86 e7        	sd	ra, 0x1c8(sp)
80204150: a2 e3        	sd	s0, 0x1c0(sp)
80204152: 80 0b        	addi	s0, sp, 0x1d0
80204154: 23 34 c4 ea  	sd	a2, -0x158(s0)
80204158: 23 38 b4 ea  	sd	a1, -0x150(s0)
8020415c: 23 3c a4 ea  	sd	a0, -0x148(s0)
80204160: 23 3c a4 f6  	sd	a0, -0x88(s0)
80204164: 23 30 b4 f8  	sd	a1, -0x80(s0)
80204168: 23 34 c4 f8  	sd	a2, -0x78(s0)
8020416c: 01 45        	li	a0, 0x0
;     let proc = CPUS.my_proc().unwrap();
8020416e: a3 0b a4 f6  	sb	a0, -0x89(s0)

0000000080204172 <.Lpcrel_hi0>:
80204172: 17 85 34 00  	auipc	a0, 0x348
80204176: 13 05 e5 08  	addi	a0, a0, 0x8e
8020417a: 97 50 01 00  	auipc	ra, 0x15
8020417e: e7 80 20 32  	jalr	0x322(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80204182: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80204186: 03 35 04 fe  	ld	a0, -0x20(s0)
8020418a: 11 e9        	bnez	a0, 0x8020419e <.Lpcrel_hi1+0x10>
8020418c: 09 a0        	j	0x8020418e <.Lpcrel_hi1>

000000008020418e <.Lpcrel_hi1>:
;             None => unwrap_failed(),
8020418e: 17 05 03 00  	auipc	a0, 0x30
80204192: 13 05 a5 e9  	addi	a0, a0, -0x166
80204196: 97 d0 02 00  	auipc	ra, 0x2d
8020419a: e7 80 20 b3  	jalr	-0x4ce(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
8020419e: 83 35 04 eb  	ld	a1, -0x150(s0)
;             Some(val) => val,
802041a2: 03 35 04 fe  	ld	a0, -0x20(s0)
802041a6: 23 3c a4 e8  	sd	a0, -0x168(s0)
802041aa: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let proc = CPUS.my_proc().unwrap();
802041ae: 23 38 a4 f8  	sd	a0, -0x70(s0)
;     let va = buf as usize;
802041b2: 23 3c b4 f8  	sd	a1, -0x68(s0)
;     let offset = va % PGSZ;
802041b6: d2 15        	slli	a1, a1, 0x34
802041b8: d1 91        	srli	a1, a1, 0x34
802041ba: 23 30 b4 ea  	sd	a1, -0x160(s0)
802041be: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     let pa_base  = proc.inner_mut().pagetable().walk_addr(va).unwrap();
802041c2: 97 e0 ff ff  	auipc	ra, 0xffffe
802041c6: e7 80 a0 c0  	jalr	-0x3f6(ra) <ekernel+0xffcb4dcc>
802041ca: 97 a0 00 00  	auipc	ra, 0xa
802041ce: e7 80 c0 05  	jalr	0x5c(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
802041d2: 23 34 a4 ec  	sd	a0, -0x138(s0)
802041d6: 23 38 b4 ec  	sd	a1, -0x130(s0)
802041da: 13 05 84 ec  	addi	a0, s0, -0x138
802041de: 97 d0 ff ff  	auipc	ra, 0xffffd
802041e2: e7 80 80 9b  	jalr	-0x648(ra) <ekernel+0xffcb3b96>
802041e6: 97 a0 00 00  	auipc	ra, 0xa
802041ea: e7 80 60 90  	jalr	-0x6fa(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
802041ee: 83 35 04 eb  	ld	a1, -0x150(s0)
802041f2: 08 61        	ld	a0, 0x0(a0)
802041f4: 97 90 00 00  	auipc	ra, 0x9
802041f8: e7 80 e0 aa  	jalr	-0x552(ra) <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>
802041fc: 23 34 a4 fc  	sd	a0, -0x38(s0)
80204200: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         match self {
80204204: 03 35 84 fc  	ld	a0, -0x38(s0)
80204208: 11 e9        	bnez	a0, 0x8020421c <.Lpcrel_hi2+0x10>
8020420a: 09 a0        	j	0x8020420c <.Lpcrel_hi2>

000000008020420c <.Lpcrel_hi2>:
;             None => unwrap_failed(),
8020420c: 17 05 03 00  	auipc	a0, 0x30
80204210: 13 05 45 e3  	addi	a0, a0, -0x1cc
80204214: 97 d0 02 00  	auipc	ra, 0x2d
80204218: e7 80 40 ab  	jalr	-0x54c(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020421c: 03 35 04 fd  	ld	a0, -0x30(s0)
80204220: 23 34 a4 e8  	sd	a0, -0x178(s0)
80204224: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     let pa_base  = proc.inner_mut().pagetable().walk_addr(va).unwrap();
80204228: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020422c: 13 05 84 ec  	addi	a0, s0, -0x138
80204230: 97 40 00 00  	auipc	ra, 0x4
80204234: e7 80 00 fe  	jalr	-0x20(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204238: 03 35 04 ea  	ld	a0, -0x160(s0)
8020423c: 83 35 84 e8  	ld	a1, -0x178(s0)
;     let pa = pa_base+offset;
80204240: 2e 95        	add	a0, a0, a1
80204242: 23 38 a4 e8  	sd	a0, -0x170(s0)
80204246: 63 65 b5 04  	bltu	a0, a1, 0x80204290 <.Lpcrel_hi3>
8020424a: 09 a0        	j	0x8020424c <.Lpcrel_hi2+0x40>
8020424c: 03 35 84 e9  	ld	a0, -0x168(s0)
80204250: 83 35 04 e9  	ld	a1, -0x170(s0)
;     let pa = pa_base+offset;
80204254: 23 38 b4 fa  	sd	a1, -0x50(s0)
;     if fd > proc.inner_mut().files.len(){
80204258: 97 e0 ff ff  	auipc	ra, 0xffffe
8020425c: e7 80 40 b7  	jalr	-0x48c(ra) <ekernel+0xffcb4dcc>
80204260: 97 a0 00 00  	auipc	ra, 0xa
80204264: e7 80 60 fc  	jalr	-0x3a(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80204268: 23 3c a4 ec  	sd	a0, -0x128(s0)
8020426c: 23 30 b4 ee  	sd	a1, -0x120(s0)
80204270: 13 05 84 ed  	addi	a0, s0, -0x128
80204274: 97 d0 ff ff  	auipc	ra, 0xffffd
80204278: e7 80 00 90  	jalr	-0x700(ra) <ekernel+0xffcb3b74>
8020427c: 61 05        	addi	a0, a0, 0x18
8020427e: 97 00 01 00  	auipc	ra, 0x10
80204282: e7 80 80 6c  	jalr	0x6c8(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hd9824eba35b2ddb8E>
80204286: 83 35 84 eb  	ld	a1, -0x148(s0)
8020428a: 63 6a b5 06  	bltu	a0, a1, 0x802042fe <.Lpcrel_hi4+0x66>
8020428e: 31 a8        	j	0x802042aa <.Lpcrel_hi4+0x12>

0000000080204290 <.Lpcrel_hi3>:
;     let pa = pa_base+offset;
80204290: 17 05 03 00  	auipc	a0, 0x30
80204294: 13 05 05 de  	addi	a0, a0, -0x220

0000000080204298 <.Lpcrel_hi4>:
80204298: 97 05 03 00  	auipc	a1, 0x30
8020429c: 13 86 05 dc  	addi	a2, a1, -0x240
802042a0: f1 45        	li	a1, 0x1c
802042a2: 97 c0 02 00  	auipc	ra, 0x2c
802042a6: e7 80 60 f7  	jalr	-0x8a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802042aa: 13 05 84 ed  	addi	a0, s0, -0x128
;     if fd > proc.inner_mut().files.len(){
802042ae: 97 40 00 00  	auipc	ra, 0x4
802042b2: e7 80 20 f6  	jalr	-0x9e(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
802042b6: 03 35 84 e9  	ld	a0, -0x168(s0)
;     let mut inner = proc.inner_mut();
802042ba: 97 e0 ff ff  	auipc	ra, 0xffffe
802042be: e7 80 20 b1  	jalr	-0x4ee(ra) <ekernel+0xffcb4dcc>
802042c2: 97 a0 00 00  	auipc	ra, 0xa
802042c6: e7 80 40 f6  	jalr	-0x9c(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
802042ca: 23 34 a4 ee  	sd	a0, -0x118(s0)
802042ce: 23 38 b4 ee  	sd	a1, -0x110(s0)
802042d2: 05 45        	li	a0, 0x1
802042d4: a3 0b a4 f6  	sb	a0, -0x89(s0)
802042d8: 13 05 84 ee  	addi	a0, s0, -0x118
;     let root = inner.pagetable().root.0;
802042dc: 97 d0 ff ff  	auipc	ra, 0xffffd
802042e0: e7 80 a0 8b  	jalr	-0x746(ra) <ekernel+0xffcb3b96>
802042e4: 97 a0 00 00  	auipc	ra, 0xa
802042e8: e7 80 80 80  	jalr	-0x7f8(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
802042ec: 08 61        	ld	a0, 0x0(a0)
802042ee: 23 3c a4 e6  	sd	a0, -0x188(s0)
802042f2: aa 85        	mv	a1, a0
802042f4: 23 30 b4 e8  	sd	a1, -0x180(s0)
802042f8: 1d 89        	andi	a0, a0, 0x7
802042fa: 01 cd        	beqz	a0, 0x80204312 <.Lpcrel_hi4+0x7a>
802042fc: 89 a8        	j	0x8020434e <.Lpcrel_hi5+0x1c>
802042fe: 13 05 84 ed  	addi	a0, s0, -0x128
;     if fd > proc.inner_mut().files.len(){
80204302: 97 40 00 00  	auipc	ra, 0x4
80204306: e7 80 e0 f0  	jalr	-0xf2(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
8020430a: 7d 55        	li	a0, -0x1
;         return -1;
8020430c: 23 30 a4 ec  	sd	a0, -0x140(s0)
; #![no_std]
80204310: 99 a2        	j	0x80204456 <.Lpcrel_hi6+0x104>
80204312: 03 35 04 e8  	ld	a0, -0x180(s0)
;     let root = inner.pagetable().root.0;
80204316: 08 79        	ld	a0, 0x30(a0)
80204318: 23 34 a4 e6  	sd	a0, -0x198(s0)
8020431c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80204320: 13 05 84 ee  	addi	a0, s0, -0x118
;     if let Some(file) = &inner.files[fd]{
80204324: 97 d0 ff ff  	auipc	ra, 0xffffd
80204328: e7 80 00 85  	jalr	-0x7b0(ra) <ekernel+0xffcb3b74>
8020432c: 83 35 84 eb  	ld	a1, -0x148(s0)
80204330: 61 05        	addi	a0, a0, 0x18

0000000080204332 <.Lpcrel_hi5>:
80204332: 17 06 03 00  	auipc	a2, 0x30
80204336: 13 06 66 d7  	addi	a2, a2, -0x28a
8020433a: 97 10 01 00  	auipc	ra, 0x11
8020433e: e7 80 20 f3  	jalr	-0xce(ra) <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb1c532d49f4f97deE>
80204342: aa 85        	mv	a1, a0
80204344: 23 38 b4 e6  	sd	a1, -0x190(s0)
80204348: 08 61        	ld	a0, 0x0(a0)
8020434a: 09 ed        	bnez	a0, 0x80204364 <.Lpcrel_hi6+0x12>
8020434c: 05 a8        	j	0x8020437c <.Lpcrel_hi6+0x2a>
8020434e: 83 35 84 e7  	ld	a1, -0x188(s0)

0000000080204352 <.Lpcrel_hi6>:
;     let root = inner.pagetable().root.0;
80204352: 17 05 03 00  	auipc	a0, 0x30
80204356: 13 06 e5 d3  	addi	a2, a0, -0x2c2
8020435a: 21 45        	li	a0, 0x8
8020435c: 97 c0 02 00  	auipc	ra, 0x2c
80204360: e7 80 00 f9  	jalr	-0x70(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>
80204364: 03 35 04 e7  	ld	a0, -0x190(s0)
;     if let Some(file) = &inner.files[fd]{
80204368: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if !file.writable(){
8020436c: 97 e0 ff ff  	auipc	ra, 0xffffe
80204370: e7 80 40 a8  	jalr	-0x57c(ra) <ekernel+0xffcb4df0>
80204374: 8c 71        	ld	a1, 0x20(a1)
80204376: 82 95        	jalr	a1
80204378: 1d e1        	bnez	a0, 0x8020439e <.Lpcrel_hi6+0x4c>
8020437a: 29 a0        	j	0x80204384 <.Lpcrel_hi6+0x32>
8020437c: 7d 55        	li	a0, -0x1
;         -1
8020437e: 23 30 a4 ec  	sd	a0, -0x140(s0)
;     if let Some(file) = &inner.files[fd]{
80204382: c5 a0        	j	0x80204462 <.Lpcrel_hi6+0x110>
80204384: 7d 55        	li	a0, -0x1
;             return -1;
80204386: 23 30 a4 ec  	sd	a0, -0x140(s0)
8020438a: 13 05 84 ee  	addi	a0, s0, -0x118
; }
8020438e: 97 40 00 00  	auipc	ra, 0x4
80204392: e7 80 20 e8  	jalr	-0x17e(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204396: 01 45        	li	a0, 0x0
80204398: a3 0b a4 f6  	sb	a0, -0x89(s0)
; #![no_std]
8020439c: 6d a8        	j	0x80204456 <.Lpcrel_hi6+0x104>
8020439e: 83 35 84 e6  	ld	a1, -0x198(s0)
802043a2: 13 05 84 ef  	addi	a0, s0, -0x108
802043a6: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
;         let mut pgtbl = PageTable::create(root);
802043aa: 97 80 00 00  	auipc	ra, 0x8
802043ae: e7 80 00 07  	jalr	0x70(ra) <_ZN2os2vm9PageTable6create17h8a678b1f2d671733E>
802043b2: 03 35 04 e7  	ld	a0, -0x190(s0)
;         let file = file.clone();
802043b6: 97 e0 ff ff  	auipc	ra, 0xffffe
802043ba: e7 80 c0 8c  	jalr	-0x734(ra) <ekernel+0xffcb4c82>
802043be: 23 38 a4 f2  	sd	a0, -0xd0(s0)
802043c2: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802043c6: 01 45        	li	a0, 0x0
;         drop(inner);
802043c8: a3 0b a4 f6  	sb	a0, -0x89(s0)
802043cc: 03 35 84 ee  	ld	a0, -0x118(s0)
802043d0: 83 35 04 ef  	ld	a1, -0x110(s0)
802043d4: 97 50 01 00  	auipc	ra, 0x15
802043d8: e7 80 00 69  	jalr	0x690(ra) <_ZN4core3mem4drop17h48a990f70936f01fE>
802043dc: 13 05 04 f3  	addi	a0, s0, -0xd0
802043e0: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
;         file.write(UserBuffer::new(pgtbl.translated_byte_buffer(buf, len))) as isize
802043e4: 97 e0 ff ff  	auipc	ra, 0xffffe
802043e8: e7 80 c0 a0  	jalr	-0x5f4(ra) <ekernel+0xffcb4df0>
802043ec: 03 36 04 eb  	ld	a2, -0x150(s0)
802043f0: 83 36 84 ea  	ld	a3, -0x158(s0)
802043f4: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
802043f8: 2e 85        	mv	a0, a1
802043fa: 83 35 04 e6  	ld	a1, -0x1a0(s0)
802043fe: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
80204402: 13 05 84 f5  	addi	a0, s0, -0xa8
80204406: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8020440a: 97 90 00 00  	auipc	ra, 0x9
8020440e: e7 80 40 f8  	jalr	-0x7c(ra) <_ZN2os2vm9PageTable22translated_byte_buffer17hbd89c5cdccd7203eE>
80204412: 83 35 84 e3  	ld	a1, -0x1c8(s0)
80204416: 13 05 04 f4  	addi	a0, s0, -0xc0
8020441a: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8020441e: 97 00 00 00  	auipc	ra, 0x0
80204422: e7 80 20 c7  	jalr	-0x38e(ra) <_ZN2os10page_alloc10UserBuffer3new17h5429c14b5d34e052E>
80204426: 03 36 04 e4  	ld	a2, -0x1c0(s0)
8020442a: 03 35 84 e4  	ld	a0, -0x1b8(s0)
8020442e: 83 35 04 e5  	ld	a1, -0x1b0(s0)
80204432: 10 7a        	ld	a2, 0x30(a2)
80204434: 02 96        	jalr	a2
80204436: aa 85        	mv	a1, a0
80204438: 03 35 84 e5  	ld	a0, -0x1a8(s0)
8020443c: 23 30 b4 ec  	sd	a1, -0x140(s0)
;     }else {
80204440: 97 30 00 00  	auipc	ra, 0x3
80204444: e7 80 e0 65  	jalr	0x65e(ra) <_ZN4core3ptr119drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$17h1d9cd17a19f7525cE>
80204448: 03 35 04 e6  	ld	a0, -0x1a0(s0)
8020444c: 97 40 00 00  	auipc	ra, 0x4
80204450: e7 80 00 8c  	jalr	-0x740(ra) <_ZN4core3ptr38drop_in_place$LT$os..vm..PageTable$GT$17h37485d31fc718f76E>
80204454: 39 a0        	j	0x80204462 <.Lpcrel_hi6+0x110>
; }
80204456: 03 35 04 ec  	ld	a0, -0x140(s0)
8020445a: be 60        	ld	ra, 0x1c8(sp)
8020445c: 1e 64        	ld	s0, 0x1c0(sp)
8020445e: 79 61        	addi	sp, sp, 0x1d0
80204460: 82 80        	ret
80204462: 03 45 74 f7  	lbu	a0, -0x89(s0)
80204466: 05 89        	andi	a0, a0, 0x1
80204468: 11 e5        	bnez	a0, 0x80204474 <.Lpcrel_hi6+0x122>
8020446a: 09 a0        	j	0x8020446c <.Lpcrel_hi6+0x11a>
8020446c: 01 45        	li	a0, 0x0
; }
8020446e: a3 0b a4 f6  	sb	a0, -0x89(s0)
80204472: d5 b7        	j	0x80204456 <.Lpcrel_hi6+0x104>
80204474: 13 05 84 ee  	addi	a0, s0, -0x118
; }
80204478: 97 40 00 00  	auipc	ra, 0x4
8020447c: e7 80 80 d9  	jalr	-0x268(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204480: f5 b7        	j	0x8020446c <.Lpcrel_hi6+0x11a>

0000000080204482 <_ZN2os7syscall2fs8sys_read17hc64bfb2a102386b4E>:
; pub fn sys_read(fd:usize,buf: *const u8,len :usize) -> isize {
80204482: 45 71        	addi	sp, sp, -0x1d0
80204484: 86 e7        	sd	ra, 0x1c8(sp)
80204486: a2 e3        	sd	s0, 0x1c0(sp)
80204488: 80 0b        	addi	s0, sp, 0x1d0
8020448a: 23 34 c4 ea  	sd	a2, -0x158(s0)
8020448e: 23 38 b4 ea  	sd	a1, -0x150(s0)
80204492: 23 3c a4 ea  	sd	a0, -0x148(s0)
80204496: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020449a: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020449e: 23 34 c4 f8  	sd	a2, -0x78(s0)
802044a2: 01 45        	li	a0, 0x0
;     let proc = CPUS.my_proc().unwrap();
802044a4: a3 0b a4 f6  	sb	a0, -0x89(s0)

00000000802044a8 <.Lpcrel_hi7>:
802044a8: 17 85 34 00  	auipc	a0, 0x348
802044ac: 13 05 85 d5  	addi	a0, a0, -0x2a8
802044b0: 97 50 01 00  	auipc	ra, 0x15
802044b4: e7 80 c0 fe  	jalr	-0x14(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
802044b8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
802044bc: 03 35 04 fe  	ld	a0, -0x20(s0)
802044c0: 11 e9        	bnez	a0, 0x802044d4 <.Lpcrel_hi8+0x10>
802044c2: 09 a0        	j	0x802044c4 <.Lpcrel_hi8>

00000000802044c4 <.Lpcrel_hi8>:
;             None => unwrap_failed(),
802044c4: 17 05 03 00  	auipc	a0, 0x30
802044c8: 13 05 c5 bf  	addi	a0, a0, -0x404
802044cc: 97 c0 02 00  	auipc	ra, 0x2c
802044d0: e7 80 c0 7f  	jalr	0x7fc(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
802044d4: 83 35 04 eb  	ld	a1, -0x150(s0)
;             Some(val) => val,
802044d8: 03 35 04 fe  	ld	a0, -0x20(s0)
802044dc: 23 3c a4 e8  	sd	a0, -0x168(s0)
802044e0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let proc = CPUS.my_proc().unwrap();
802044e4: 23 38 a4 f8  	sd	a0, -0x70(s0)
;     let va = buf as usize;
802044e8: 23 3c b4 f8  	sd	a1, -0x68(s0)
;     let offset = va % PGSZ;
802044ec: d2 15        	slli	a1, a1, 0x34
802044ee: d1 91        	srli	a1, a1, 0x34
802044f0: 23 30 b4 ea  	sd	a1, -0x160(s0)
802044f4: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     let pa_base  = proc.inner_mut().pagetable().walk_addr(va).unwrap();
802044f8: 97 e0 ff ff  	auipc	ra, 0xffffe
802044fc: e7 80 40 8d  	jalr	-0x72c(ra) <ekernel+0xffcb4dcc>
80204500: 97 a0 00 00  	auipc	ra, 0xa
80204504: e7 80 60 d2  	jalr	-0x2da(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80204508: 23 34 a4 ec  	sd	a0, -0x138(s0)
8020450c: 23 38 b4 ec  	sd	a1, -0x130(s0)
80204510: 13 05 84 ec  	addi	a0, s0, -0x138
80204514: 97 c0 ff ff  	auipc	ra, 0xffffc
80204518: e7 80 20 68  	jalr	0x682(ra) <ekernel+0xffcb3b96>
8020451c: 97 90 00 00  	auipc	ra, 0x9
80204520: e7 80 00 5d  	jalr	0x5d0(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
80204524: 83 35 04 eb  	ld	a1, -0x150(s0)
80204528: 08 61        	ld	a0, 0x0(a0)
8020452a: 97 80 00 00  	auipc	ra, 0x8
8020452e: e7 80 80 77  	jalr	0x778(ra) <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>
80204532: 23 34 a4 fc  	sd	a0, -0x38(s0)
80204536: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         match self {
8020453a: 03 35 84 fc  	ld	a0, -0x38(s0)
8020453e: 11 e9        	bnez	a0, 0x80204552 <.Lpcrel_hi9+0x10>
80204540: 09 a0        	j	0x80204542 <.Lpcrel_hi9>

0000000080204542 <.Lpcrel_hi9>:
;             None => unwrap_failed(),
80204542: 17 05 03 00  	auipc	a0, 0x30
80204546: 13 05 65 b9  	addi	a0, a0, -0x46a
8020454a: 97 c0 02 00  	auipc	ra, 0x2c
8020454e: e7 80 e0 77  	jalr	0x77e(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80204552: 03 35 04 fd  	ld	a0, -0x30(s0)
80204556: 23 34 a4 e8  	sd	a0, -0x178(s0)
8020455a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     let pa_base  = proc.inner_mut().pagetable().walk_addr(va).unwrap();
8020455e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80204562: 13 05 84 ec  	addi	a0, s0, -0x138
80204566: 97 40 00 00  	auipc	ra, 0x4
8020456a: e7 80 a0 ca  	jalr	-0x356(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
8020456e: 03 35 04 ea  	ld	a0, -0x160(s0)
80204572: 83 35 84 e8  	ld	a1, -0x178(s0)
;     let pa = pa_base+offset;
80204576: 2e 95        	add	a0, a0, a1
80204578: 23 38 a4 e8  	sd	a0, -0x170(s0)
8020457c: 63 65 b5 04  	bltu	a0, a1, 0x802045c6 <.Lpcrel_hi10>
80204580: 09 a0        	j	0x80204582 <.Lpcrel_hi9+0x40>
80204582: 03 35 84 e9  	ld	a0, -0x168(s0)
80204586: 83 35 04 e9  	ld	a1, -0x170(s0)
;     let pa = pa_base+offset;
8020458a: 23 38 b4 fa  	sd	a1, -0x50(s0)
;     if fd > proc.inner_mut().files.len(){
8020458e: 97 e0 ff ff  	auipc	ra, 0xffffe
80204592: e7 80 e0 83  	jalr	-0x7c2(ra) <ekernel+0xffcb4dcc>
80204596: 97 a0 00 00  	auipc	ra, 0xa
8020459a: e7 80 00 c9  	jalr	-0x370(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020459e: 23 3c a4 ec  	sd	a0, -0x128(s0)
802045a2: 23 30 b4 ee  	sd	a1, -0x120(s0)
802045a6: 13 05 84 ed  	addi	a0, s0, -0x128
802045aa: 97 c0 ff ff  	auipc	ra, 0xffffc
802045ae: e7 80 a0 5c  	jalr	0x5ca(ra) <ekernel+0xffcb3b74>
802045b2: 61 05        	addi	a0, a0, 0x18
802045b4: 97 00 01 00  	auipc	ra, 0x10
802045b8: e7 80 20 39  	jalr	0x392(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hd9824eba35b2ddb8E>
802045bc: 83 35 84 eb  	ld	a1, -0x148(s0)
802045c0: 63 6a b5 06  	bltu	a0, a1, 0x80204634 <.Lpcrel_hi11+0x66>
802045c4: 31 a8        	j	0x802045e0 <.Lpcrel_hi11+0x12>

00000000802045c6 <.Lpcrel_hi10>:
;     let pa = pa_base+offset;
802045c6: 17 05 03 00  	auipc	a0, 0x30
802045ca: 13 05 a5 aa  	addi	a0, a0, -0x556

00000000802045ce <.Lpcrel_hi11>:
802045ce: 97 05 03 00  	auipc	a1, 0x30
802045d2: 13 86 25 b2  	addi	a2, a1, -0x4de
802045d6: f1 45        	li	a1, 0x1c
802045d8: 97 c0 02 00  	auipc	ra, 0x2c
802045dc: e7 80 00 c4  	jalr	-0x3c0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802045e0: 13 05 84 ed  	addi	a0, s0, -0x128
;     if fd > proc.inner_mut().files.len(){
802045e4: 97 40 00 00  	auipc	ra, 0x4
802045e8: e7 80 c0 c2  	jalr	-0x3d4(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
802045ec: 03 35 84 e9  	ld	a0, -0x168(s0)
;     let mut inner = proc.inner_mut();
802045f0: 97 d0 ff ff  	auipc	ra, 0xffffd
802045f4: e7 80 c0 7d  	jalr	0x7dc(ra) <ekernel+0xffcb4dcc>
802045f8: 97 a0 00 00  	auipc	ra, 0xa
802045fc: e7 80 e0 c2  	jalr	-0x3d2(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80204600: 23 34 a4 ee  	sd	a0, -0x118(s0)
80204604: 23 38 b4 ee  	sd	a1, -0x110(s0)
80204608: 05 45        	li	a0, 0x1
8020460a: a3 0b a4 f6  	sb	a0, -0x89(s0)
8020460e: 13 05 84 ee  	addi	a0, s0, -0x118
;     let root = inner.pagetable().root.0;
80204612: 97 c0 ff ff  	auipc	ra, 0xffffc
80204616: e7 80 40 58  	jalr	0x584(ra) <ekernel+0xffcb3b96>
8020461a: 97 90 00 00  	auipc	ra, 0x9
8020461e: e7 80 20 4d  	jalr	0x4d2(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
80204622: 08 61        	ld	a0, 0x0(a0)
80204624: 23 3c a4 e6  	sd	a0, -0x188(s0)
80204628: aa 85        	mv	a1, a0
8020462a: 23 30 b4 e8  	sd	a1, -0x180(s0)
8020462e: 1d 89        	andi	a0, a0, 0x7
80204630: 01 cd        	beqz	a0, 0x80204648 <.Lpcrel_hi11+0x7a>
80204632: 89 a8        	j	0x80204684 <.Lpcrel_hi12+0x1c>
80204634: 13 05 84 ed  	addi	a0, s0, -0x128
;     if fd > proc.inner_mut().files.len(){
80204638: 97 40 00 00  	auipc	ra, 0x4
8020463c: e7 80 80 bd  	jalr	-0x428(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204640: 7d 55        	li	a0, -0x1
;         return -1;
80204642: 23 30 a4 ec  	sd	a0, -0x140(s0)
; #![no_std]
80204646: 99 a2        	j	0x8020478c <.Lpcrel_hi13+0x104>
80204648: 03 35 04 e8  	ld	a0, -0x180(s0)
;     let root = inner.pagetable().root.0;
8020464c: 08 79        	ld	a0, 0x30(a0)
8020464e: 23 34 a4 e6  	sd	a0, -0x198(s0)
80204652: 23 3c a4 fa  	sd	a0, -0x48(s0)
80204656: 13 05 84 ee  	addi	a0, s0, -0x118
;     if let Some(file) = &inner.files[fd]{
8020465a: 97 c0 ff ff  	auipc	ra, 0xffffc
8020465e: e7 80 a0 51  	jalr	0x51a(ra) <ekernel+0xffcb3b74>
80204662: 83 35 84 eb  	ld	a1, -0x148(s0)
80204666: 61 05        	addi	a0, a0, 0x18

0000000080204668 <.Lpcrel_hi12>:
80204668: 17 06 03 00  	auipc	a2, 0x30
8020466c: 13 06 86 ab  	addi	a2, a2, -0x548
80204670: 97 10 01 00  	auipc	ra, 0x11
80204674: e7 80 c0 bf  	jalr	-0x404(ra) <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb1c532d49f4f97deE>
80204678: aa 85        	mv	a1, a0
8020467a: 23 38 b4 e6  	sd	a1, -0x190(s0)
8020467e: 08 61        	ld	a0, 0x0(a0)
80204680: 09 ed        	bnez	a0, 0x8020469a <.Lpcrel_hi13+0x12>
80204682: 05 a8        	j	0x802046b2 <.Lpcrel_hi13+0x2a>
80204684: 83 35 84 e7  	ld	a1, -0x188(s0)

0000000080204688 <.Lpcrel_hi13>:
;     let root = inner.pagetable().root.0;
80204688: 17 05 03 00  	auipc	a0, 0x30
8020468c: 13 06 05 a8  	addi	a2, a0, -0x580
80204690: 21 45        	li	a0, 0x8
80204692: 97 c0 02 00  	auipc	ra, 0x2c
80204696: e7 80 a0 c5  	jalr	-0x3a6(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>
8020469a: 03 35 04 e7  	ld	a0, -0x190(s0)
;     if let Some(file) = &inner.files[fd]{
8020469e: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if !file.readable(){
802046a2: 97 d0 ff ff  	auipc	ra, 0xffffd
802046a6: e7 80 e0 74  	jalr	0x74e(ra) <ekernel+0xffcb4df0>
802046aa: 8c 6d        	ld	a1, 0x18(a1)
802046ac: 82 95        	jalr	a1
802046ae: 1d e1        	bnez	a0, 0x802046d4 <.Lpcrel_hi13+0x4c>
802046b0: 29 a0        	j	0x802046ba <.Lpcrel_hi13+0x32>
802046b2: 7d 55        	li	a0, -0x1
;         -1
802046b4: 23 30 a4 ec  	sd	a0, -0x140(s0)
;     if let Some(file) = &inner.files[fd]{
802046b8: c5 a0        	j	0x80204798 <.Lpcrel_hi13+0x110>
802046ba: 7d 55        	li	a0, -0x1
;             return -1;
802046bc: 23 30 a4 ec  	sd	a0, -0x140(s0)
802046c0: 13 05 84 ee  	addi	a0, s0, -0x118
; }
802046c4: 97 40 00 00  	auipc	ra, 0x4
802046c8: e7 80 c0 b4  	jalr	-0x4b4(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
802046cc: 01 45        	li	a0, 0x0
802046ce: a3 0b a4 f6  	sb	a0, -0x89(s0)
; #![no_std]
802046d2: 6d a8        	j	0x8020478c <.Lpcrel_hi13+0x104>
802046d4: 83 35 84 e6  	ld	a1, -0x198(s0)
802046d8: 13 05 84 ef  	addi	a0, s0, -0x108
802046dc: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
;         let mut pgtbl = PageTable::create(root);
802046e0: 97 80 00 00  	auipc	ra, 0x8
802046e4: e7 80 a0 d3  	jalr	-0x2c6(ra) <_ZN2os2vm9PageTable6create17h8a678b1f2d671733E>
802046e8: 03 35 04 e7  	ld	a0, -0x190(s0)
;         let file = file.clone();
802046ec: 97 d0 ff ff  	auipc	ra, 0xffffd
802046f0: e7 80 60 59  	jalr	0x596(ra) <ekernel+0xffcb4c82>
802046f4: 23 38 a4 f2  	sd	a0, -0xd0(s0)
802046f8: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802046fc: 01 45        	li	a0, 0x0
;         drop(inner);
802046fe: a3 0b a4 f6  	sb	a0, -0x89(s0)
80204702: 03 35 84 ee  	ld	a0, -0x118(s0)
80204706: 83 35 04 ef  	ld	a1, -0x110(s0)
8020470a: 97 50 01 00  	auipc	ra, 0x15
8020470e: e7 80 a0 35  	jalr	0x35a(ra) <_ZN4core3mem4drop17h48a990f70936f01fE>
80204712: 13 05 04 f3  	addi	a0, s0, -0xd0
80204716: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
;         file.read(UserBuffer::new(pgtbl.translated_byte_buffer(buf, len))) as isize
8020471a: 97 d0 ff ff  	auipc	ra, 0xffffd
8020471e: e7 80 60 6d  	jalr	0x6d6(ra) <ekernel+0xffcb4df0>
80204722: 03 36 04 eb  	ld	a2, -0x150(s0)
80204726: 83 36 84 ea  	ld	a3, -0x158(s0)
8020472a: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
8020472e: 2e 85        	mv	a0, a1
80204730: 83 35 04 e6  	ld	a1, -0x1a0(s0)
80204734: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
80204738: 13 05 84 f5  	addi	a0, s0, -0xa8
8020473c: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
80204740: 97 90 00 00  	auipc	ra, 0x9
80204744: e7 80 e0 c4  	jalr	-0x3b2(ra) <_ZN2os2vm9PageTable22translated_byte_buffer17hbd89c5cdccd7203eE>
80204748: 83 35 84 e3  	ld	a1, -0x1c8(s0)
8020474c: 13 05 04 f4  	addi	a0, s0, -0xc0
80204750: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80204754: 97 00 00 00  	auipc	ra, 0x0
80204758: e7 80 c0 93  	jalr	-0x6c4(ra) <_ZN2os10page_alloc10UserBuffer3new17h5429c14b5d34e052E>
8020475c: 03 36 04 e4  	ld	a2, -0x1c0(s0)
80204760: 03 35 84 e4  	ld	a0, -0x1b8(s0)
80204764: 83 35 04 e5  	ld	a1, -0x1b0(s0)
80204768: 10 76        	ld	a2, 0x28(a2)
8020476a: 02 96        	jalr	a2
8020476c: aa 85        	mv	a1, a0
8020476e: 03 35 84 e5  	ld	a0, -0x1a8(s0)
80204772: 23 30 b4 ec  	sd	a1, -0x140(s0)
;     }else {
80204776: 97 30 00 00  	auipc	ra, 0x3
8020477a: e7 80 80 32  	jalr	0x328(ra) <_ZN4core3ptr119drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$17h1d9cd17a19f7525cE>
8020477e: 03 35 04 e6  	ld	a0, -0x1a0(s0)
80204782: 97 30 00 00  	auipc	ra, 0x3
80204786: e7 80 a0 58  	jalr	0x58a(ra) <_ZN4core3ptr38drop_in_place$LT$os..vm..PageTable$GT$17h37485d31fc718f76E>
8020478a: 39 a0        	j	0x80204798 <.Lpcrel_hi13+0x110>
; }
8020478c: 03 35 04 ec  	ld	a0, -0x140(s0)
80204790: be 60        	ld	ra, 0x1c8(sp)
80204792: 1e 64        	ld	s0, 0x1c0(sp)
80204794: 79 61        	addi	sp, sp, 0x1d0
80204796: 82 80        	ret
80204798: 03 45 74 f7  	lbu	a0, -0x89(s0)
8020479c: 05 89        	andi	a0, a0, 0x1
8020479e: 11 e5        	bnez	a0, 0x802047aa <.Lpcrel_hi13+0x122>
802047a0: 09 a0        	j	0x802047a2 <.Lpcrel_hi13+0x11a>
802047a2: 01 45        	li	a0, 0x0
; }
802047a4: a3 0b a4 f6  	sb	a0, -0x89(s0)
802047a8: d5 b7        	j	0x8020478c <.Lpcrel_hi13+0x104>
802047aa: 13 05 84 ee  	addi	a0, s0, -0x118
; }
802047ae: 97 40 00 00  	auipc	ra, 0x4
802047b2: e7 80 20 a6  	jalr	-0x59e(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
802047b6: f5 b7        	j	0x802047a2 <.Lpcrel_hi13+0x11a>

00000000802047b8 <_ZN2os7syscall2fs8sys_open17hd28c07925edf6cc0E>:
; pub fn sys_open(path :*const u8,flags:usize) -> isize {
802047b8: 51 71        	addi	sp, sp, -0xf0
802047ba: 86 f5        	sd	ra, 0xe8(sp)
802047bc: a2 f1        	sd	s0, 0xe0(sp)
802047be: 80 19        	addi	s0, sp, 0xf0
802047c0: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802047c4: 23 3c a4 fa  	sd	a0, -0x48(s0)
802047c8: 23 30 b4 fc  	sd	a1, -0x40(s0)
802047cc: 01 45        	li	a0, 0x0
;     let task = unsafe {CPUS.my_cpu().task.as_mut().unwrap()};
802047ce: a3 0b a4 fa  	sb	a0, -0x49(s0)

00000000802047d2 <.Lpcrel_hi14>:
802047d2: 17 85 34 00  	auipc	a0, 0x348
802047d6: 13 05 e5 a2  	addi	a0, a0, -0x5d2
802047da: 97 50 01 00  	auipc	ra, 0x15
802047de: e7 80 20 c6  	jalr	-0x39e(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
802047e2: 21 05        	addi	a0, a0, 0x8
802047e4: 97 00 00 00  	auipc	ra, 0x0
802047e8: e7 80 00 5d  	jalr	0x5d0(ra) <_ZN4core6option15Option$LT$T$GT$6as_mut17h668afcac8caeb7a4E>
802047ec: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
802047f0: 03 35 04 fe  	ld	a0, -0x20(s0)
802047f4: 11 e9        	bnez	a0, 0x80204808 <.Lpcrel_hi15+0x10>
802047f6: 09 a0        	j	0x802047f8 <.Lpcrel_hi15>

00000000802047f8 <.Lpcrel_hi15>:
;             None => unwrap_failed(),
802047f8: 17 05 03 00  	auipc	a0, 0x30
802047fc: 13 05 05 94  	addi	a0, a0, -0x6c0
80204800: 97 c0 02 00  	auipc	ra, 0x2c
80204804: e7 80 80 4c  	jalr	0x4c8(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80204808: 03 35 04 fe  	ld	a0, -0x20(s0)
8020480c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80204810: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let task = unsafe {CPUS.my_cpu().task.as_mut().unwrap()};
80204814: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     let path = task.inner_mut().pagetable().translated_str(path);
80204818: 97 d0 ff ff  	auipc	ra, 0xffffd
8020481c: e7 80 40 5b  	jalr	0x5b4(ra) <ekernel+0xffcb4dcc>
80204820: 97 a0 00 00  	auipc	ra, 0xa
80204824: e7 80 60 a0  	jalr	-0x5fa(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80204828: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020482c: 23 30 b4 f8  	sd	a1, -0x80(s0)
80204830: 13 05 84 f7  	addi	a0, s0, -0x88
80204834: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80204838: 97 c0 ff ff  	auipc	ra, 0xffffc
8020483c: e7 80 e0 35  	jalr	0x35e(ra) <ekernel+0xffcb3b96>
80204840: 97 90 00 00  	auipc	ra, 0x9
80204844: e7 80 c0 2a  	jalr	0x2ac(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
80204848: 03 36 04 f5  	ld	a2, -0xb0(s0)
8020484c: 0c 61        	ld	a1, 0x0(a0)
8020484e: 13 05 04 f6  	addi	a0, s0, -0xa0
80204852: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80204856: 97 90 00 00  	auipc	ra, 0x9
8020485a: e7 80 a0 9c  	jalr	-0x636(ra) <_ZN2os2vm9PageTable14translated_str17hd3ebdd22cc59e034E>
8020485e: 03 35 04 f4  	ld	a0, -0xc0(s0)
80204862: 97 40 00 00  	auipc	ra, 0x4
80204866: e7 80 e0 9a  	jalr	-0x652(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
8020486a: 03 35 84 f4  	ld	a0, -0xb8(s0)
;     if let Some(app_inode) = open_file(path.as_str(),READONLY){
8020486e: 97 70 00 00  	auipc	ra, 0x7
80204872: e7 80 40 7e  	jalr	0x7e4(ra) <_ZN5alloc6string6String6as_str17hf11a06c050b113a3E>
80204876: 01 46        	li	a2, 0x0
80204878: 97 e0 ff ff  	auipc	ra, 0xffffe
8020487c: e7 80 c0 be  	jalr	-0x414(ra) <ekernel+0xffcb5464>
80204880: 23 34 a4 f8  	sd	a0, -0x78(s0)
80204884: 05 45        	li	a0, 0x1
80204886: a3 0b a4 fa  	sb	a0, -0x49(s0)
8020488a: 03 35 84 f8  	ld	a0, -0x78(s0)
8020488e: 55 cd        	beqz	a0, 0x8020494a <.Lpcrel_hi17+0x42>
80204890: 09 a0        	j	0x80204892 <.Lpcrel_hi15+0x9a>
80204892: 03 35 84 f3  	ld	a0, -0xc8(s0)
80204896: 81 45        	li	a1, 0x0
;     if let Some(app_inode) = open_file(path.as_str(),READONLY){
80204898: a3 0b b4 fa  	sb	a1, -0x49(s0)
8020489c: 83 35 84 f8  	ld	a1, -0x78(s0)
802048a0: 23 3c b4 f0  	sd	a1, -0xe8(s0)
802048a4: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         let fd = task.alloc_fd();
802048a8: 97 d0 ff ff  	auipc	ra, 0xffffd
802048ac: e7 80 40 52  	jalr	0x524(ra) <ekernel+0xffcb4dcc>
802048b0: 97 a0 00 00  	auipc	ra, 0xa
802048b4: e7 80 a0 60  	jalr	0x60a(ra) <_ZN2os4task4task16TaskControlBlock8alloc_fd17h8062426de727208eE>
802048b8: 83 35 84 f1  	ld	a1, -0xe8(s0)
802048bc: 2a 86        	mv	a2, a0
802048be: 03 35 84 f3  	ld	a0, -0xc8(s0)
802048c2: 23 38 c4 f2  	sd	a2, -0xd0(s0)
802048c6: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         task.inner_mut().files[fd] = Some(app_inode);
802048ca: 23 38 b4 f8  	sd	a1, -0x70(s0)

00000000802048ce <.Lpcrel_hi16>:
802048ce: 97 05 03 00  	auipc	a1, 0x30
802048d2: 93 85 25 88  	addi	a1, a1, -0x77e
802048d6: 23 3c b4 f8  	sd	a1, -0x68(s0)
802048da: 97 d0 ff ff  	auipc	ra, 0xffffd
802048de: e7 80 20 4f  	jalr	0x4f2(ra) <ekernel+0xffcb4dcc>
802048e2: 97 a0 00 00  	auipc	ra, 0xa
802048e6: e7 80 40 94  	jalr	-0x6bc(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
802048ea: 23 30 a4 fa  	sd	a0, -0x60(s0)
802048ee: 23 34 b4 fa  	sd	a1, -0x58(s0)
802048f2: 13 05 04 fa  	addi	a0, s0, -0x60
802048f6: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802048fa: 97 c0 ff ff  	auipc	ra, 0xffffc
802048fe: e7 80 c0 29  	jalr	0x29c(ra) <ekernel+0xffcb3b96>
80204902: 83 35 04 f3  	ld	a1, -0xd0(s0)
80204906: 61 05        	addi	a0, a0, 0x18

0000000080204908 <.Lpcrel_hi17>:
80204908: 17 06 03 00  	auipc	a2, 0x30
8020490c: 13 06 06 88  	addi	a2, a2, -0x780
80204910: 97 10 01 00  	auipc	ra, 0x11
80204914: e7 80 40 9f  	jalr	-0x60c(ra) <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd5797b3c60ca8ec1E>
80204918: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8020491c: 97 30 00 00  	auipc	ra, 0x3
80204920: e7 80 c0 25  	jalr	0x25c(ra) <_ZN4core3ptr147drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$17h51e0465a82d21f6fE>
80204924: 03 36 04 f2  	ld	a2, -0xe0(s0)
80204928: 03 35 84 f2  	ld	a0, -0xd8(s0)
8020492c: 83 36 04 f9  	ld	a3, -0x70(s0)
80204930: 83 35 84 f9  	ld	a1, -0x68(s0)
80204934: 14 e2        	sd	a3, 0x0(a2)
80204936: 0c e6        	sd	a1, 0x8(a2)
80204938: 97 40 00 00  	auipc	ra, 0x4
8020493c: e7 80 80 8d  	jalr	-0x728(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204940: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         fd as isize
80204944: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;     if let Some(app_inode) = open_file(path.as_str(),READONLY){
80204948: 29 a0        	j	0x80204952 <.Lpcrel_hi17+0x4a>
8020494a: 7d 55        	li	a0, -0x1
;         -1
8020494c: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;     if let Some(app_inode) = open_file(path.as_str(),READONLY){
80204950: 09 a0        	j	0x80204952 <.Lpcrel_hi17+0x4a>
80204952: 13 05 04 f6  	addi	a0, s0, -0xa0
; }
80204956: 97 30 00 00  	auipc	ra, 0x3
8020495a: e7 80 60 42  	jalr	0x426(ra) <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17hf68a660302d4d33fE>
8020495e: 03 35 84 f8  	ld	a0, -0x78(s0)
80204962: 19 c5        	beqz	a0, 0x80204970 <.Lpcrel_hi17+0x68>
80204964: 09 a0        	j	0x80204966 <.Lpcrel_hi17+0x5e>
80204966: 03 45 74 fb  	lbu	a0, -0x49(s0)
8020496a: 05 89        	andi	a0, a0, 0x1
8020496c: 19 e9        	bnez	a0, 0x80204982 <.Lpcrel_hi17+0x7a>
8020496e: 09 a0        	j	0x80204970 <.Lpcrel_hi17+0x68>
80204970: 01 45        	li	a0, 0x0
; }
80204972: a3 0b a4 fa  	sb	a0, -0x49(s0)
80204976: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020497a: ae 70        	ld	ra, 0xe8(sp)
8020497c: 0e 74        	ld	s0, 0xe0(sp)
8020497e: 6d 61        	addi	sp, sp, 0xf0
80204980: 82 80        	ret
80204982: 13 05 84 f8  	addi	a0, s0, -0x78
; }
80204986: 97 40 00 00  	auipc	ra, 0x4
8020498a: e7 80 80 95  	jalr	-0x6a8(ra) <_ZN4core3ptr75drop_in_place$LT$alloc..sync..Arc$LT$os..filesystem..inode..OSinode$GT$$GT$17h10c0ef47ef01150bE>
8020498e: cd b7        	j	0x80204970 <.Lpcrel_hi17+0x68>

0000000080204990 <_ZN2os7syscall2fs9sys_close17hb3d42dc39cba22eaE>:
; pub fn sys_close(fd:usize) -> isize {
80204990: 75 71        	addi	sp, sp, -0x90
80204992: 06 e5        	sd	ra, 0x88(sp)
80204994: 22 e1        	sd	s0, 0x80(sp)
80204996: 00 09        	addi	s0, sp, 0x90
80204998: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020499c: 23 38 a4 fc  	sd	a0, -0x30(s0)

00000000802049a0 <.Lpcrel_hi18>:
;         CPUS.my_cpu().task.as_mut().unwrap()
802049a0: 17 85 34 00  	auipc	a0, 0x348
802049a4: 13 05 05 86  	addi	a0, a0, -0x7a0
802049a8: 97 50 01 00  	auipc	ra, 0x15
802049ac: e7 80 40 a9  	jalr	-0x56c(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
802049b0: 21 05        	addi	a0, a0, 0x8
802049b2: 97 00 00 00  	auipc	ra, 0x0
802049b6: e7 80 20 40  	jalr	0x402(ra) <_ZN4core6option15Option$LT$T$GT$6as_mut17h668afcac8caeb7a4E>
802049ba: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
802049be: 03 35 04 fe  	ld	a0, -0x20(s0)
802049c2: 11 e9        	bnez	a0, 0x802049d6 <.Lpcrel_hi19+0x10>
802049c4: 09 a0        	j	0x802049c6 <.Lpcrel_hi19>

00000000802049c6 <.Lpcrel_hi19>:
;             None => unwrap_failed(),
802049c6: 17 f5 02 00  	auipc	a0, 0x2f
802049ca: 13 05 a5 7d  	addi	a0, a0, 0x7da
802049ce: 97 c0 02 00  	auipc	ra, 0x2c
802049d2: e7 80 a0 2f  	jalr	0x2fa(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
802049d6: 03 35 04 fe  	ld	a0, -0x20(s0)
802049da: 23 3c a4 f6  	sd	a0, -0x88(s0)
802049de: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         CPUS.my_cpu().task.as_mut().unwrap()
802049e2: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     if fd >= task.inner_mut().files.len() {
802049e6: 97 d0 ff ff  	auipc	ra, 0xffffd
802049ea: e7 80 60 3e  	jalr	0x3e6(ra) <ekernel+0xffcb4dcc>
802049ee: 97 a0 00 00  	auipc	ra, 0xa
802049f2: e7 80 80 83  	jalr	-0x7c8(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
802049f6: 23 38 a4 f8  	sd	a0, -0x70(s0)
802049fa: 23 3c b4 f8  	sd	a1, -0x68(s0)
802049fe: 13 05 04 f9  	addi	a0, s0, -0x70
80204a02: 97 c0 ff ff  	auipc	ra, 0xffffc
80204a06: e7 80 20 17  	jalr	0x172(ra) <ekernel+0xffcb3b74>
80204a0a: 61 05        	addi	a0, a0, 0x18
80204a0c: 97 00 01 00  	auipc	ra, 0x10
80204a10: e7 80 a0 f3  	jalr	-0xc6(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hd9824eba35b2ddb8E>
80204a14: aa 85        	mv	a1, a0
80204a16: 03 35 04 f8  	ld	a0, -0x80(s0)
80204a1a: 63 7e b5 04  	bgeu	a0, a1, 0x80204a76 <.Lpcrel_hi20+0x1c>
80204a1e: 09 a0        	j	0x80204a20 <.Lpcrel_hi19+0x5a>
80204a20: 13 05 04 f9  	addi	a0, s0, -0x70
;     if fd >= task.inner_mut().files.len() {
80204a24: 97 30 00 00  	auipc	ra, 0x3
80204a28: e7 80 c0 7e  	jalr	0x7ec(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204a2c: 03 35 84 f7  	ld	a0, -0x88(s0)
;     if task.inner_mut().files[fd].is_none(){
80204a30: 97 d0 ff ff  	auipc	ra, 0xffffd
80204a34: e7 80 c0 39  	jalr	0x39c(ra) <ekernel+0xffcb4dcc>
80204a38: 97 90 00 00  	auipc	ra, 0x9
80204a3c: e7 80 e0 7e  	jalr	0x7ee(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80204a40: 23 30 a4 fa  	sd	a0, -0x60(s0)
80204a44: 23 34 b4 fa  	sd	a1, -0x58(s0)
80204a48: 13 05 04 fa  	addi	a0, s0, -0x60
80204a4c: 97 c0 ff ff  	auipc	ra, 0xffffc
80204a50: e7 80 80 12  	jalr	0x128(ra) <ekernel+0xffcb3b74>
80204a54: 83 35 04 f8  	ld	a1, -0x80(s0)
80204a58: 61 05        	addi	a0, a0, 0x18

0000000080204a5a <.Lpcrel_hi20>:
80204a5a: 17 f6 02 00  	auipc	a2, 0x2f
80204a5e: 13 06 e6 75  	addi	a2, a2, 0x75e
80204a62: 97 10 01 00  	auipc	ra, 0x11
80204a66: e7 80 a0 80  	jalr	-0x7f6(ra) <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb1c532d49f4f97deE>
80204a6a: 97 00 00 00  	auipc	ra, 0x0
80204a6e: e7 80 20 4d  	jalr	0x4d2(ra) <_ZN4core6option15Option$LT$T$GT$7is_none17hc9cc09fb50745ea0E>
80204a72: 59 e9        	bnez	a0, 0x80204b08 <.Lpcrel_hi21+0x40>
80204a74: 19 a8        	j	0x80204a8a <.Lpcrel_hi20+0x30>
80204a76: 13 05 04 f9  	addi	a0, s0, -0x70
;     if fd >= task.inner_mut().files.len() {
80204a7a: 97 30 00 00  	auipc	ra, 0x3
80204a7e: e7 80 60 79  	jalr	0x796(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204a82: 7d 55        	li	a0, -0x1
;         return -1;
80204a84: 23 34 a4 f8  	sd	a0, -0x78(s0)
; #![no_std]
80204a88: 51 a8        	j	0x80204b1c <.Lpcrel_hi21+0x54>
80204a8a: 13 05 04 fa  	addi	a0, s0, -0x60
;     if task.inner_mut().files[fd].is_none(){
80204a8e: 97 30 00 00  	auipc	ra, 0x3
80204a92: e7 80 20 78  	jalr	0x782(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204a96: 03 35 84 f7  	ld	a0, -0x88(s0)
;     task.inner_mut().files[fd].take();
80204a9a: 97 d0 ff ff  	auipc	ra, 0xffffd
80204a9e: e7 80 20 33  	jalr	0x332(ra) <ekernel+0xffcb4dcc>
80204aa2: 97 90 00 00  	auipc	ra, 0x9
80204aa6: e7 80 40 78  	jalr	0x784(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80204aaa: 23 30 a4 fc  	sd	a0, -0x40(s0)
80204aae: 23 34 b4 fc  	sd	a1, -0x38(s0)
80204ab2: 13 05 04 fc  	addi	a0, s0, -0x40
80204ab6: 23 38 a4 f6  	sd	a0, -0x90(s0)
80204aba: 97 c0 ff ff  	auipc	ra, 0xffffc
80204abe: e7 80 c0 0d  	jalr	0xdc(ra) <ekernel+0xffcb3b96>
80204ac2: 83 35 04 f8  	ld	a1, -0x80(s0)
80204ac6: 61 05        	addi	a0, a0, 0x18

0000000080204ac8 <.Lpcrel_hi21>:
80204ac8: 17 f6 02 00  	auipc	a2, 0x2f
80204acc: 13 06 86 70  	addi	a2, a2, 0x708
80204ad0: 97 10 01 00  	auipc	ra, 0x11
80204ad4: e7 80 40 83  	jalr	-0x7cc(ra) <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd5797b3c60ca8ec1E>
80204ad8: 97 00 00 00  	auipc	ra, 0x0
80204adc: e7 80 00 28  	jalr	0x280(ra) <_ZN4core6option15Option$LT$T$GT$4take17h002df12a67468ebaE>
80204ae0: 23 38 a4 fa  	sd	a0, -0x50(s0)
80204ae4: 23 3c b4 fa  	sd	a1, -0x48(s0)
80204ae8: 13 05 04 fb  	addi	a0, s0, -0x50
80204aec: 97 30 00 00  	auipc	ra, 0x3
80204af0: e7 80 c0 08  	jalr	0x8c(ra) <_ZN4core3ptr147drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$17h51e0465a82d21f6fE>
80204af4: 03 35 04 f7  	ld	a0, -0x90(s0)
80204af8: 97 30 00 00  	auipc	ra, 0x3
80204afc: e7 80 80 71  	jalr	0x718(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204b00: 01 45        	li	a0, 0x0
;     0
80204b02: 23 34 a4 f8  	sd	a0, -0x78(s0)
; }
80204b06: 19 a8        	j	0x80204b1c <.Lpcrel_hi21+0x54>
80204b08: 13 05 04 fa  	addi	a0, s0, -0x60
;     if task.inner_mut().files[fd].is_none(){
80204b0c: 97 30 00 00  	auipc	ra, 0x3
80204b10: e7 80 40 70  	jalr	0x704(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80204b14: 7d 55        	li	a0, -0x1
;     return -1;
80204b16: 23 34 a4 f8  	sd	a0, -0x78(s0)
; #![no_std]
80204b1a: 09 a0        	j	0x80204b1c <.Lpcrel_hi21+0x54>
; }
80204b1c: 03 35 84 f8  	ld	a0, -0x78(s0)
80204b20: aa 60        	ld	ra, 0x88(sp)
80204b22: 0a 64        	ld	s0, 0x80(sp)
80204b24: 49 61        	addi	sp, sp, 0x90
80204b26: 82 80        	ret

0000000080204b28 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h999c125207c18a3eE>:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80204b28: 39 71        	addi	sp, sp, -0x40
80204b2a: 06 fc        	sd	ra, 0x38(sp)
80204b2c: 22 f8        	sd	s0, 0x30(sp)
80204b2e: 80 00        	addi	s0, sp, 0x40
80204b30: 23 34 b4 fc  	sd	a1, -0x38(s0)
80204b34: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204b38: 23 30 a4 fe  	sd	a0, -0x20(s0)
80204b3c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if f.debug_lower_hex() {
80204b40: 03 c5 45 03  	lbu	a0, 0x34(a1)
80204b44: 41 89        	andi	a0, a0, 0x10
80204b46: 11 e9        	bnez	a0, 0x80204b5a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h999c125207c18a3eE+0x32>
80204b48: 09 a0        	j	0x80204b4a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h999c125207c18a3eE+0x22>
80204b4a: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 } else if f.debug_upper_hex() {
80204b4e: 03 45 45 03  	lbu	a0, 0x34(a0)
80204b52: 13 75 05 02  	andi	a0, a0, 0x20
80204b56: 09 cd        	beqz	a0, 0x80204b70 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h999c125207c18a3eE+0x48>
80204b58: 3d a0        	j	0x80204b86 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h999c125207c18a3eE+0x5e>
80204b5a: 83 35 84 fc  	ld	a1, -0x38(s0)
80204b5e: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::LowerHex::fmt(self, f)
80204b62: 97 a0 02 00  	auipc	ra, 0x2a
80204b66: e7 80 20 37  	jalr	0x372(ra) <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h933c609d9d935718E>
80204b6a: a3 0f a4 fc  	sb	a0, -0x21(s0)
80204b6e: 05 a8        	j	0x80204b9e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h999c125207c18a3eE+0x76>
80204b70: 83 35 84 fc  	ld	a1, -0x38(s0)
80204b74: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::Display::fmt(self, f)
80204b78: 97 c0 02 00  	auipc	ra, 0x2c
80204b7c: e7 80 40 4e  	jalr	0x4e4(ra) <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h058f198655760c96E>
80204b80: a3 0f a4 fc  	sb	a0, -0x21(s0)
80204b84: 21 a8        	j	0x80204b9c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h999c125207c18a3eE+0x74>
80204b86: 83 35 84 fc  	ld	a1, -0x38(s0)
80204b8a: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::UpperHex::fmt(self, f)
80204b8e: 97 a0 02 00  	auipc	ra, 0x2a
80204b92: e7 80 60 3b  	jalr	0x3b6(ra) <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hed31c89a7b8664afE>
80204b96: a3 0f a4 fc  	sb	a0, -0x21(s0)
80204b9a: 09 a0        	j	0x80204b9c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h999c125207c18a3eE+0x74>
;                 if f.debug_lower_hex() {
80204b9c: 09 a0        	j	0x80204b9e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h999c125207c18a3eE+0x76>
;             }
80204b9e: 03 45 f4 fd  	lbu	a0, -0x21(s0)
80204ba2: e2 70        	ld	ra, 0x38(sp)
80204ba4: 42 74        	ld	s0, 0x30(sp)
80204ba6: 21 61        	addi	sp, sp, 0x40
80204ba8: 82 80        	ret

0000000080204baa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h60adb39f5d2b887eE>:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80204baa: 39 71        	addi	sp, sp, -0x40
80204bac: 06 fc        	sd	ra, 0x38(sp)
80204bae: 22 f8        	sd	s0, 0x30(sp)
80204bb0: 80 00        	addi	s0, sp, 0x40
80204bb2: 23 34 b4 fc  	sd	a1, -0x38(s0)
80204bb6: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204bba: 23 30 a4 fe  	sd	a0, -0x20(s0)
80204bbe: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if f.debug_lower_hex() {
80204bc2: 03 c5 45 03  	lbu	a0, 0x34(a1)
80204bc6: 41 89        	andi	a0, a0, 0x10
80204bc8: 11 e9        	bnez	a0, 0x80204bdc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h60adb39f5d2b887eE+0x32>
80204bca: 09 a0        	j	0x80204bcc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h60adb39f5d2b887eE+0x22>
80204bcc: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 } else if f.debug_upper_hex() {
80204bd0: 03 45 45 03  	lbu	a0, 0x34(a0)
80204bd4: 13 75 05 02  	andi	a0, a0, 0x20
80204bd8: 09 cd        	beqz	a0, 0x80204bf2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h60adb39f5d2b887eE+0x48>
80204bda: 3d a0        	j	0x80204c08 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h60adb39f5d2b887eE+0x5e>
80204bdc: 83 35 84 fc  	ld	a1, -0x38(s0)
80204be0: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::LowerHex::fmt(self, f)
80204be4: 97 a0 02 00  	auipc	ra, 0x2a
80204be8: e7 80 00 3d  	jalr	0x3d0(ra) <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E>
80204bec: a3 0f a4 fc  	sb	a0, -0x21(s0)
80204bf0: 05 a8        	j	0x80204c20 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h60adb39f5d2b887eE+0x76>
80204bf2: 83 35 84 fc  	ld	a1, -0x38(s0)
80204bf6: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::Display::fmt(self, f)
80204bfa: 97 c0 02 00  	auipc	ra, 0x2c
80204bfe: e7 80 40 49  	jalr	0x494(ra) <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h6446c111abea6893E>
80204c02: a3 0f a4 fc  	sb	a0, -0x21(s0)
80204c06: 21 a8        	j	0x80204c1e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h60adb39f5d2b887eE+0x74>
80204c08: 83 35 84 fc  	ld	a1, -0x38(s0)
80204c0c: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::UpperHex::fmt(self, f)
80204c10: 97 a0 02 00  	auipc	ra, 0x2a
80204c14: e7 80 20 41  	jalr	0x412(ra) <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h035bce1319a3ef5cE>
80204c18: a3 0f a4 fc  	sb	a0, -0x21(s0)
80204c1c: 09 a0        	j	0x80204c1e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h60adb39f5d2b887eE+0x74>
;                 if f.debug_lower_hex() {
80204c1e: 09 a0        	j	0x80204c20 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h60adb39f5d2b887eE+0x76>
;             }
80204c20: 03 45 f4 fd  	lbu	a0, -0x21(s0)
80204c24: e2 70        	ld	ra, 0x38(sp)
80204c26: 42 74        	ld	s0, 0x30(sp)
80204c28: 21 61        	addi	sp, sp, 0x40
80204c2a: 82 80        	ret

0000000080204c2c <_ZN72_$LT$os..filesystem..BLOCK_DEVICE$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha75f9bc100c229c8E>:
;             fn deref(&self) -> &$T {
80204c2c: 01 11        	addi	sp, sp, -0x20
80204c2e: 06 ec        	sd	ra, 0x18(sp)
80204c30: 22 e8        	sd	s0, 0x10(sp)
80204c32: 00 10        	addi	s0, sp, 0x20
80204c34: 23 30 a4 fe  	sd	a0, -0x20(s0)

0000000080204c38 <.Lpcrel_hi0>:
80204c38: 17 75 04 00  	auipc	a0, 0x47
80204c3c: 13 05 85 3d  	addi	a0, a0, 0x3d8
80204c40: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0.call_once(builder)
80204c44: 97 40 01 00  	auipc	ra, 0x14
80204c48: e7 80 e0 03  	jalr	0x3e(ra) <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E>
80204c4c: e2 60        	ld	ra, 0x18(sp)
80204c4e: 42 64        	ld	s0, 0x10(sp)
;             }
80204c50: 05 61        	addi	sp, sp, 0x20
80204c52: 82 80        	ret

0000000080204c54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h721950c7f60d1367E>:
;     pub fn iter(&self) -> Iter<'_, T> {
80204c54: 59 71        	addi	sp, sp, -0x70
80204c56: 86 f4        	sd	ra, 0x68(sp)
80204c58: a2 f0        	sd	s0, 0x60(sp)
80204c5a: 80 18        	addi	s0, sp, 0x70
80204c5c: 23 38 b4 f8  	sd	a1, -0x70(s0)
80204c60: 23 3c a4 f8  	sd	a0, -0x68(s0)
80204c64: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204c68: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
80204c6c: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
80204c70: 23 3c a4 fa  	sd	a0, -0x48(s0)
80204c74: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80204c78: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80204c7c: 09 a0        	j	0x80204c7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h721950c7f60d1367E+0x2a>
80204c7e: 03 35 84 f9  	ld	a0, -0x68(s0)
80204c82: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
80204c86: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
80204c8a: 92 05        	slli	a1, a1, 0x4
80204c8c: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80204c8e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80204c92: 09 a0        	j	0x80204c94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h721950c7f60d1367E+0x40>
;             Self { ptr, end_or_len, _marker: PhantomData }
80204c94: 03 35 84 fc  	ld	a0, -0x38(s0)
80204c98: 83 35 04 fb  	ld	a1, -0x50(s0)
80204c9c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80204ca0: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
80204ca4: 03 35 04 fa  	ld	a0, -0x60(s0)
80204ca8: 83 35 84 fa  	ld	a1, -0x58(s0)
80204cac: a6 70        	ld	ra, 0x68(sp)
80204cae: 06 74        	ld	s0, 0x60(sp)
80204cb0: 65 61        	addi	sp, sp, 0x70
80204cb2: 82 80        	ret

0000000080204cb4 <_ZN4core6option15Option$LT$T$GT$3map17h092c5eca03acff62E>:
;     pub fn map<U, F>(self, f: F) -> Option<U>
80204cb4: 39 71        	addi	sp, sp, -0x40
80204cb6: 06 fc        	sd	ra, 0x38(sp)
80204cb8: 22 f8        	sd	s0, 0x30(sp)
80204cba: 80 00        	addi	s0, sp, 0x40
80204cbc: 23 30 b4 fc  	sd	a1, -0x40(s0)
80204cc0: 23 34 a4 fc  	sd	a0, -0x38(s0)
80204cc4: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
80204cc8: 03 35 84 fc  	ld	a0, -0x38(s0)
80204ccc: 11 e5        	bnez	a0, 0x80204cd8 <_ZN4core6option15Option$LT$T$GT$3map17h092c5eca03acff62E+0x24>
80204cce: 09 a0        	j	0x80204cd0 <_ZN4core6option15Option$LT$T$GT$3map17h092c5eca03acff62E+0x1c>
80204cd0: 01 45        	li	a0, 0x0
;             None => None,
80204cd2: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     }
80204cd6: 15 a0        	j	0x80204cfa <_ZN4core6option15Option$LT$T$GT$3map17h092c5eca03acff62E+0x46>
80204cd8: 03 35 04 fc  	ld	a0, -0x40(s0)
;             Some(x) => Some(f(x)),
80204cdc: 83 35 84 fc  	ld	a1, -0x38(s0)
80204ce0: 23 34 b4 fe  	sd	a1, -0x18(s0)
80204ce4: 23 3c b4 fc  	sd	a1, -0x28(s0)
80204ce8: 83 35 84 fd  	ld	a1, -0x28(s0)
80204cec: 97 b0 ff ff  	auipc	ra, 0xffffb
80204cf0: e7 80 00 33  	jalr	0x330(ra) <ekernel+0xffcb301c>
80204cf4: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204cf8: 09 a0        	j	0x80204cfa <_ZN4core6option15Option$LT$T$GT$3map17h092c5eca03acff62E+0x46>
;     }
80204cfa: 03 35 04 fd  	ld	a0, -0x30(s0)
80204cfe: e2 70        	ld	ra, 0x38(sp)
80204d00: 42 74        	ld	s0, 0x30(sp)
80204d02: 21 61        	addi	sp, sp, 0x40
80204d04: 82 80        	ret

0000000080204d06 <_ZN4core6option15Option$LT$T$GT$3map17h89c43c720aa28707E>:
;     pub fn map<U, F>(self, f: F) -> Option<U>
80204d06: 39 71        	addi	sp, sp, -0x40
80204d08: 06 fc        	sd	ra, 0x38(sp)
80204d0a: 22 f8        	sd	s0, 0x30(sp)
80204d0c: 80 00        	addi	s0, sp, 0x40
80204d0e: 23 30 b4 fc  	sd	a1, -0x40(s0)
80204d12: 23 34 a4 fc  	sd	a0, -0x38(s0)
80204d16: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
80204d1a: 03 35 84 fc  	ld	a0, -0x38(s0)
80204d1e: 11 e5        	bnez	a0, 0x80204d2a <_ZN4core6option15Option$LT$T$GT$3map17h89c43c720aa28707E+0x24>
80204d20: 09 a0        	j	0x80204d22 <_ZN4core6option15Option$LT$T$GT$3map17h89c43c720aa28707E+0x1c>
80204d22: 01 45        	li	a0, 0x0
;             None => None,
80204d24: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     }
80204d28: 15 a0        	j	0x80204d4c <_ZN4core6option15Option$LT$T$GT$3map17h89c43c720aa28707E+0x46>
80204d2a: 03 35 04 fc  	ld	a0, -0x40(s0)
;             Some(x) => Some(f(x)),
80204d2e: 83 35 84 fc  	ld	a1, -0x38(s0)
80204d32: 23 34 b4 fe  	sd	a1, -0x18(s0)
80204d36: 23 3c b4 fc  	sd	a1, -0x28(s0)
80204d3a: 83 35 84 fd  	ld	a1, -0x28(s0)
80204d3e: 97 b0 ff ff  	auipc	ra, 0xffffb
80204d42: e7 80 00 34  	jalr	0x340(ra) <ekernel+0xffcb307e>
80204d46: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204d4a: 09 a0        	j	0x80204d4c <_ZN4core6option15Option$LT$T$GT$3map17h89c43c720aa28707E+0x46>
;     }
80204d4c: 03 35 04 fd  	ld	a0, -0x30(s0)
80204d50: e2 70        	ld	ra, 0x38(sp)
80204d52: 42 74        	ld	s0, 0x30(sp)
80204d54: 21 61        	addi	sp, sp, 0x40
80204d56: 82 80        	ret

0000000080204d58 <_ZN4core6option15Option$LT$T$GT$4take17h002df12a67468ebaE>:
;     pub const fn take(&mut self) -> Option<T> {
80204d58: 39 71        	addi	sp, sp, -0x40
80204d5a: 06 fc        	sd	ra, 0x38(sp)
80204d5c: 22 f8        	sd	s0, 0x30(sp)
80204d5e: 80 00        	addi	s0, sp, 0x40
80204d60: aa 86        	mv	a3, a0
80204d62: 23 3c d4 fc  	sd	a3, -0x28(s0)
80204d66: 01 45        	li	a0, 0x0
;         mem::replace(self, None)
80204d68: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         crate::intrinsics::read_via_copy(src)
80204d6c: 88 62        	ld	a0, 0x0(a3)
80204d6e: 8c 66        	ld	a1, 0x8(a3)
80204d70: 23 30 a4 fe  	sd	a0, -0x20(s0)
80204d74: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80204d78: 03 37 84 fc  	ld	a4, -0x38(s0)
80204d7c: 03 36 04 fd  	ld	a2, -0x30(s0)
80204d80: 98 e2        	sd	a4, 0x0(a3)
80204d82: 90 e6        	sd	a2, 0x8(a3)
80204d84: e2 70        	ld	ra, 0x38(sp)
80204d86: 42 74        	ld	s0, 0x30(sp)
;     }
80204d88: 21 61        	addi	sp, sp, 0x40
80204d8a: 82 80        	ret

0000000080204d8c <_ZN4core6option15Option$LT$T$GT$4take17h1a9880b0483435cbE>:
;     pub const fn take(&mut self) -> Option<T> {
80204d8c: 79 71        	addi	sp, sp, -0x30
80204d8e: 06 f4        	sd	ra, 0x28(sp)
80204d90: 22 f0        	sd	s0, 0x20(sp)
80204d92: 00 18        	addi	s0, sp, 0x30
80204d94: 2a 86        	mv	a2, a0
80204d96: 23 30 c4 fe  	sd	a2, -0x20(s0)
80204d9a: 01 45        	li	a0, 0x0
;         mem::replace(self, None)
80204d9c: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         crate::intrinsics::read_via_copy(src)
80204da0: 08 62        	ld	a0, 0x0(a2)
80204da2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80204da6: 83 35 84 fd  	ld	a1, -0x28(s0)
80204daa: 0c e2        	sd	a1, 0x0(a2)
80204dac: a2 70        	ld	ra, 0x28(sp)
80204dae: 02 74        	ld	s0, 0x20(sp)
;     }
80204db0: 45 61        	addi	sp, sp, 0x30
80204db2: 82 80        	ret

0000000080204db4 <_ZN4core6option15Option$LT$T$GT$6as_mut17h668afcac8caeb7a4E>:
;     pub const fn as_mut(&mut self) -> Option<&mut T> {
80204db4: 79 71        	addi	sp, sp, -0x30
80204db6: 06 f4        	sd	ra, 0x28(sp)
80204db8: 22 f0        	sd	s0, 0x20(sp)
80204dba: 00 18        	addi	s0, sp, 0x30
80204dbc: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204dc0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match *self {
80204dc4: 08 61        	ld	a0, 0x0(a0)
80204dc6: 11 e5        	bnez	a0, 0x80204dd2 <_ZN4core6option15Option$LT$T$GT$6as_mut17h668afcac8caeb7a4E+0x1e>
80204dc8: 09 a0        	j	0x80204dca <_ZN4core6option15Option$LT$T$GT$6as_mut17h668afcac8caeb7a4E+0x16>
80204dca: 01 45        	li	a0, 0x0
;             None => None,
80204dcc: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204dd0: 01 a8        	j	0x80204de0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h668afcac8caeb7a4E+0x2c>
80204dd2: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Some(ref mut x) => Some(x),
80204dd6: 23 34 a4 fe  	sd	a0, -0x18(s0)
80204dda: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204dde: 09 a0        	j	0x80204de0 <_ZN4core6option15Option$LT$T$GT$6as_mut17h668afcac8caeb7a4E+0x2c>
;     }
80204de0: 03 35 84 fd  	ld	a0, -0x28(s0)
80204de4: a2 70        	ld	ra, 0x28(sp)
80204de6: 02 74        	ld	s0, 0x20(sp)
80204de8: 45 61        	addi	sp, sp, 0x30
80204dea: 82 80        	ret

0000000080204dec <_ZN4core6option15Option$LT$T$GT$6as_mut17he935b6f99718ea25E>:
;     pub const fn as_mut(&mut self) -> Option<&mut T> {
80204dec: 79 71        	addi	sp, sp, -0x30
80204dee: 06 f4        	sd	ra, 0x28(sp)
80204df0: 22 f0        	sd	s0, 0x20(sp)
80204df2: 00 18        	addi	s0, sp, 0x30
80204df4: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204df8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match *self {
80204dfc: 08 61        	ld	a0, 0x0(a0)
80204dfe: 11 e5        	bnez	a0, 0x80204e0a <_ZN4core6option15Option$LT$T$GT$6as_mut17he935b6f99718ea25E+0x1e>
80204e00: 09 a0        	j	0x80204e02 <_ZN4core6option15Option$LT$T$GT$6as_mut17he935b6f99718ea25E+0x16>
80204e02: 01 45        	li	a0, 0x0
;             None => None,
80204e04: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204e08: 01 a8        	j	0x80204e18 <_ZN4core6option15Option$LT$T$GT$6as_mut17he935b6f99718ea25E+0x2c>
80204e0a: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Some(ref mut x) => Some(x),
80204e0e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80204e12: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204e16: 09 a0        	j	0x80204e18 <_ZN4core6option15Option$LT$T$GT$6as_mut17he935b6f99718ea25E+0x2c>
;     }
80204e18: 03 35 84 fd  	ld	a0, -0x28(s0)
80204e1c: a2 70        	ld	ra, 0x28(sp)
80204e1e: 02 74        	ld	s0, 0x20(sp)
80204e20: 45 61        	addi	sp, sp, 0x30
80204e22: 82 80        	ret

0000000080204e24 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3623f6a5f4408a07E>:
;     pub const fn as_ref(&self) -> Option<&T> {
80204e24: 79 71        	addi	sp, sp, -0x30
80204e26: 06 f4        	sd	ra, 0x28(sp)
80204e28: 22 f0        	sd	s0, 0x20(sp)
80204e2a: 00 18        	addi	s0, sp, 0x30
80204e2c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204e30: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match *self {
80204e34: 08 61        	ld	a0, 0x0(a0)
80204e36: 11 e5        	bnez	a0, 0x80204e42 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3623f6a5f4408a07E+0x1e>
80204e38: 09 a0        	j	0x80204e3a <_ZN4core6option15Option$LT$T$GT$6as_ref17h3623f6a5f4408a07E+0x16>
80204e3a: 01 45        	li	a0, 0x0
;             None => None,
80204e3c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204e40: 01 a8        	j	0x80204e50 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3623f6a5f4408a07E+0x2c>
80204e42: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Some(ref x) => Some(x),
80204e46: 23 34 a4 fe  	sd	a0, -0x18(s0)
80204e4a: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204e4e: 09 a0        	j	0x80204e50 <_ZN4core6option15Option$LT$T$GT$6as_ref17h3623f6a5f4408a07E+0x2c>
;     }
80204e50: 03 35 84 fd  	ld	a0, -0x28(s0)
80204e54: a2 70        	ld	ra, 0x28(sp)
80204e56: 02 74        	ld	s0, 0x20(sp)
80204e58: 45 61        	addi	sp, sp, 0x30
80204e5a: 82 80        	ret

0000000080204e5c <_ZN4core6option15Option$LT$T$GT$6as_ref17h6715c2dfc36a9035E>:
;     pub const fn as_ref(&self) -> Option<&T> {
80204e5c: 79 71        	addi	sp, sp, -0x30
80204e5e: 06 f4        	sd	ra, 0x28(sp)
80204e60: 22 f0        	sd	s0, 0x20(sp)
80204e62: 00 18        	addi	s0, sp, 0x30
80204e64: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204e68: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match *self {
80204e6c: 08 61        	ld	a0, 0x0(a0)
80204e6e: 11 e5        	bnez	a0, 0x80204e7a <_ZN4core6option15Option$LT$T$GT$6as_ref17h6715c2dfc36a9035E+0x1e>
80204e70: 09 a0        	j	0x80204e72 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6715c2dfc36a9035E+0x16>
80204e72: 01 45        	li	a0, 0x0
;             None => None,
80204e74: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204e78: 01 a8        	j	0x80204e88 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6715c2dfc36a9035E+0x2c>
80204e7a: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Some(ref x) => Some(x),
80204e7e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80204e82: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204e86: 09 a0        	j	0x80204e88 <_ZN4core6option15Option$LT$T$GT$6as_ref17h6715c2dfc36a9035E+0x2c>
;     }
80204e88: 03 35 84 fd  	ld	a0, -0x28(s0)
80204e8c: a2 70        	ld	ra, 0x28(sp)
80204e8e: 02 74        	ld	s0, 0x20(sp)
80204e90: 45 61        	addi	sp, sp, 0x30
80204e92: 82 80        	ret

0000000080204e94 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc7fd114bf13a122E>:
;     pub const fn as_ref(&self) -> Option<&T> {
80204e94: 79 71        	addi	sp, sp, -0x30
80204e96: 06 f4        	sd	ra, 0x28(sp)
80204e98: 22 f0        	sd	s0, 0x20(sp)
80204e9a: 00 18        	addi	s0, sp, 0x30
80204e9c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204ea0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match *self {
80204ea4: 08 61        	ld	a0, 0x0(a0)
80204ea6: 11 e5        	bnez	a0, 0x80204eb2 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc7fd114bf13a122E+0x1e>
80204ea8: 09 a0        	j	0x80204eaa <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc7fd114bf13a122E+0x16>
80204eaa: 01 45        	li	a0, 0x0
;             None => None,
80204eac: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204eb0: 01 a8        	j	0x80204ec0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc7fd114bf13a122E+0x2c>
80204eb2: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Some(ref x) => Some(x),
80204eb6: 23 34 a4 fe  	sd	a0, -0x18(s0)
80204eba: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204ebe: 09 a0        	j	0x80204ec0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hcc7fd114bf13a122E+0x2c>
;     }
80204ec0: 03 35 84 fd  	ld	a0, -0x28(s0)
80204ec4: a2 70        	ld	ra, 0x28(sp)
80204ec6: 02 74        	ld	s0, 0x20(sp)
80204ec8: 45 61        	addi	sp, sp, 0x30
80204eca: 82 80        	ret

0000000080204ecc <_ZN4core6option15Option$LT$T$GT$6as_ref17he896c5ea7830ad1eE>:
;     pub const fn as_ref(&self) -> Option<&T> {
80204ecc: 79 71        	addi	sp, sp, -0x30
80204ece: 06 f4        	sd	ra, 0x28(sp)
80204ed0: 22 f0        	sd	s0, 0x20(sp)
80204ed2: 00 18        	addi	s0, sp, 0x30
80204ed4: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204ed8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match *self {
80204edc: 08 61        	ld	a0, 0x0(a0)
80204ede: 11 e5        	bnez	a0, 0x80204eea <_ZN4core6option15Option$LT$T$GT$6as_ref17he896c5ea7830ad1eE+0x1e>
80204ee0: 09 a0        	j	0x80204ee2 <_ZN4core6option15Option$LT$T$GT$6as_ref17he896c5ea7830ad1eE+0x16>
80204ee2: 01 45        	li	a0, 0x0
;             None => None,
80204ee4: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204ee8: 01 a8        	j	0x80204ef8 <_ZN4core6option15Option$LT$T$GT$6as_ref17he896c5ea7830ad1eE+0x2c>
80204eea: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Some(ref x) => Some(x),
80204eee: 23 34 a4 fe  	sd	a0, -0x18(s0)
80204ef2: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204ef6: 09 a0        	j	0x80204ef8 <_ZN4core6option15Option$LT$T$GT$6as_ref17he896c5ea7830ad1eE+0x2c>
;     }
80204ef8: 03 35 84 fd  	ld	a0, -0x28(s0)
80204efc: a2 70        	ld	ra, 0x28(sp)
80204efe: 02 74        	ld	s0, 0x20(sp)
80204f00: 45 61        	addi	sp, sp, 0x30
80204f02: 82 80        	ret

0000000080204f04 <_ZN4core6option15Option$LT$T$GT$6as_ref17hf26442b56f458b2bE>:
;     pub const fn as_ref(&self) -> Option<&T> {
80204f04: 79 71        	addi	sp, sp, -0x30
80204f06: 06 f4        	sd	ra, 0x28(sp)
80204f08: 22 f0        	sd	s0, 0x20(sp)
80204f0a: 00 18        	addi	s0, sp, 0x30
80204f0c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80204f10: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match *self {
80204f14: 08 61        	ld	a0, 0x0(a0)
80204f16: 11 e5        	bnez	a0, 0x80204f22 <_ZN4core6option15Option$LT$T$GT$6as_ref17hf26442b56f458b2bE+0x1e>
80204f18: 09 a0        	j	0x80204f1a <_ZN4core6option15Option$LT$T$GT$6as_ref17hf26442b56f458b2bE+0x16>
80204f1a: 01 45        	li	a0, 0x0
;             None => None,
80204f1c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204f20: 01 a8        	j	0x80204f30 <_ZN4core6option15Option$LT$T$GT$6as_ref17hf26442b56f458b2bE+0x2c>
80204f22: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Some(ref x) => Some(x),
80204f26: 23 34 a4 fe  	sd	a0, -0x18(s0)
80204f2a: 23 3c a4 fc  	sd	a0, -0x28(s0)
80204f2e: 09 a0        	j	0x80204f30 <_ZN4core6option15Option$LT$T$GT$6as_ref17hf26442b56f458b2bE+0x2c>
;     }
80204f30: 03 35 84 fd  	ld	a0, -0x28(s0)
80204f34: a2 70        	ld	ra, 0x28(sp)
80204f36: 02 74        	ld	s0, 0x20(sp)
80204f38: 45 61        	addi	sp, sp, 0x30
80204f3a: 82 80        	ret

0000000080204f3c <_ZN4core6option15Option$LT$T$GT$7is_none17hc9cc09fb50745ea0E>:
;     pub const fn is_none(&self) -> bool {
80204f3c: 01 11        	addi	sp, sp, -0x20
80204f3e: 06 ec        	sd	ra, 0x18(sp)
80204f40: 22 e8        	sd	s0, 0x10(sp)
80204f42: 00 10        	addi	s0, sp, 0x20
80204f44: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         matches!(*self, Some(_))
80204f48: 08 61        	ld	a0, 0x0(a0)
80204f4a: 11 c5        	beqz	a0, 0x80204f56 <_ZN4core6option15Option$LT$T$GT$7is_none17hc9cc09fb50745ea0E+0x1a>
80204f4c: 09 a0        	j	0x80204f4e <_ZN4core6option15Option$LT$T$GT$7is_none17hc9cc09fb50745ea0E+0x12>
80204f4e: 05 45        	li	a0, 0x1
;         matches!(*self, Some(_))
80204f50: a3 03 a4 fe  	sb	a0, -0x19(s0)
80204f54: 29 a0        	j	0x80204f5e <_ZN4core6option15Option$LT$T$GT$7is_none17hc9cc09fb50745ea0E+0x22>
80204f56: 01 45        	li	a0, 0x0
;         matches!(*self, Some(_))
80204f58: a3 03 a4 fe  	sb	a0, -0x19(s0)
80204f5c: 09 a0        	j	0x80204f5e <_ZN4core6option15Option$LT$T$GT$7is_none17hc9cc09fb50745ea0E+0x22>
;         !self.is_some()
80204f5e: 03 45 74 fe  	lbu	a0, -0x19(s0)
80204f62: 13 45 f5 ff  	not	a0, a0
;     }
80204f66: 05 89        	andi	a0, a0, 0x1
80204f68: e2 60        	ld	ra, 0x18(sp)
80204f6a: 42 64        	ld	s0, 0x10(sp)
80204f6c: 05 61        	addi	sp, sp, 0x20
80204f6e: 82 80        	ret

0000000080204f70 <_ZN4core6option15Option$LT$T$GT$7replace17hd2eabe9d9243ff5eE>:
;     pub const fn replace(&mut self, value: T) -> Option<T> {
80204f70: 79 71        	addi	sp, sp, -0x30
80204f72: 06 f4        	sd	ra, 0x28(sp)
80204f74: 22 f0        	sd	s0, 0x20(sp)
80204f76: 00 18        	addi	s0, sp, 0x30
80204f78: 2a 86        	mv	a2, a0
80204f7a: 23 3c c4 fc  	sd	a2, -0x28(s0)
80204f7e: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         mem::replace(self, Some(value))
80204f82: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         crate::intrinsics::read_via_copy(src)
80204f86: 08 62        	ld	a0, 0x0(a2)
80204f88: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80204f8c: 83 35 04 fd  	ld	a1, -0x30(s0)
80204f90: 0c e2        	sd	a1, 0x0(a2)
80204f92: a2 70        	ld	ra, 0x28(sp)
80204f94: 02 74        	ld	s0, 0x20(sp)
;     }
80204f96: 45 61        	addi	sp, sp, 0x30
80204f98: 82 80        	ret

0000000080204f9a <_ZN5alloc5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8into_vec17h1a6cd78cad1dab33E>:
;     pub fn into_vec<A: Allocator>(self: Box<Self, A>) -> Vec<T, A> {
80204f9a: 01 11        	addi	sp, sp, -0x20
80204f9c: 06 ec        	sd	ra, 0x18(sp)
80204f9e: 22 e8        	sd	s0, 0x10(sp)
80204fa0: 00 10        	addi	s0, sp, 0x20
80204fa2: 23 30 b4 fe  	sd	a1, -0x20(s0)
80204fa6: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         hack::into_vec(self)
80204faa: 97 60 00 00  	auipc	ra, 0x6
80204fae: e7 80 20 3f  	jalr	0x3f2(ra) <_ZN5alloc5slice4hack8into_vec17h5f7a300774573e08E>
80204fb2: e2 60        	ld	ra, 0x18(sp)
80204fb4: 42 64        	ld	s0, 0x10(sp)
;     }
80204fb6: 05 61        	addi	sp, sp, 0x20
80204fb8: 82 80        	ret

0000000080204fba <rust_main>:
; pub fn rust_main() -> ! {
80204fba: 13 01 01 c6  	addi	sp, sp, -0x3a0
80204fbe: 23 3c 11 38  	sd	ra, 0x398(sp)
80204fc2: 23 38 81 38  	sd	s0, 0x390(sp)
80204fc6: 00 17        	addi	s0, sp, 0x3a0
;     utils::clear_bss();
80204fc8: 97 c0 ff ff  	auipc	ra, 0xffffc
80204fcc: e7 80 a0 8a  	jalr	-0x756(ra) <ekernel+0xffcb3872>
;     thread_start();
80204fd0: 97 10 01 00  	auipc	ra, 0x11
80204fd4: e7 80 e0 fe  	jalr	-0x12(ra) <thread_start>
;     let cpuid :usize =r_tp();
80204fd8: 97 70 00 00  	auipc	ra, 0x7
80204fdc: e7 80 c0 e0  	jalr	-0x1f4(ra) <_ZN2os5riscv4r_tp17h83d00e10394f4f69E>
80204fe0: 23 30 a4 d0  	sd	a0, -0x300(s0)
;     if cpuid == 0 {
80204fe4: 03 35 04 d0  	ld	a0, -0x300(s0)
80204fe8: 63 13 05 2c  	bnez	a0, 0x802052ae <.Lpcrel_hi7+0x56>
80204fec: 09 a0        	j	0x80204fee <rust_main+0x34>
;         print_info();
80204fee: 97 c0 ff ff  	auipc	ra, 0xffffc
80204ff2: e7 80 c0 8b  	jalr	-0x744(ra) <ekernel+0xffcb38aa>
;         let s = sstatus::read().spp();
80204ff6: 97 00 00 00  	auipc	ra, 0x0
80204ffa: e7 80 c0 74  	jalr	0x74c(ra) <_ZN5riscv8register7sstatus4read17hd59de933bfb9d8d0E>
80204ffe: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
80205002: 13 05 84 d4  	addi	a0, s0, -0x2b8
80205006: 97 00 00 00  	auipc	ra, 0x0
8020500a: e7 80 60 7b  	jalr	0x7b6(ra) <_ZN5riscv8register7sstatus7Sstatus3spp17h48137d438440953bE>
8020500e: a3 03 a4 d4  	sb	a0, -0x2b9(s0)
80205012: 93 05 74 d4  	addi	a1, s0, -0x2b9
80205016: 23 30 b4 fe  	sd	a1, -0x20(s0)

000000008020501a <.Lpcrel_hi1>:
;         Self::new(x, Debug::fmt)
8020501a: 17 15 00 00  	auipc	a0, 0x1
8020501e: 13 05 05 88  	addi	a0, a0, -0x780
80205022: 23 38 a4 ca  	sd	a0, -0x350(s0)
80205026: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020502a: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020502e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80205032: 83 35 04 fd  	ld	a1, -0x30(s0)
80205036: 03 35 84 fd  	ld	a0, -0x28(s0)
;         println!("{:?}",s);
8020503a: 23 30 b4 d8  	sd	a1, -0x280(s0)
8020503e: 23 34 a4 d8  	sd	a0, -0x278(s0)

0000000080205042 <.Lpcrel_hi2>:
80205042: 17 f5 02 00  	auipc	a0, 0x2f
80205046: 93 05 e5 1a  	addi	a1, a0, 0x1ae
8020504a: 23 34 b4 ca  	sd	a1, -0x358(s0)
8020504e: 13 05 04 d5  	addi	a0, s0, -0x2b0
80205052: 23 3c a4 c8  	sd	a0, -0x368(s0)
80205056: 09 46        	li	a2, 0x2
80205058: 23 38 c4 cc  	sd	a2, -0x330(s0)
8020505c: 93 06 04 d8  	addi	a3, s0, -0x280
80205060: 05 47        	li	a4, 0x1
80205062: 23 3c e4 cc  	sd	a4, -0x328(s0)
80205066: 97 20 00 00  	auipc	ra, 0x2
8020506a: e7 80 20 28  	jalr	0x282(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
8020506e: 03 35 84 c9  	ld	a0, -0x368(s0)
80205072: 97 30 01 00  	auipc	ra, 0x13
80205076: e7 80 a0 e1  	jalr	-0x1e6(ra) <_ZN2os7console5print17h042fcde166d682deE>
8020507a: 03 36 04 cd  	ld	a2, -0x330(s0)
8020507e: 03 37 84 cd  	ld	a4, -0x328(s0)
80205082: 93 05 04 d0  	addi	a1, s0, -0x300
80205086: 23 30 b4 fa  	sd	a1, -0x60(s0)

000000008020508a <.Lpcrel_hi3>:
;         Self::new(x, Display::fmt)
8020508a: 17 c5 02 00  	auipc	a0, 0x2c
8020508e: 13 05 45 00  	addi	a0, a0, 0x4
80205092: 23 30 a4 ce  	sd	a0, -0x320(s0)
80205096: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020509a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020509e: 23 3c a4 f8  	sd	a0, -0x68(s0)
;     }
802050a2: 83 35 04 f9  	ld	a1, -0x70(s0)
802050a6: 03 35 84 f9  	ld	a0, -0x68(s0)
;         println!("hart {} is botting",cpuid);
802050aa: 23 30 b4 dc  	sd	a1, -0x240(s0)
802050ae: 23 34 a4 dc  	sd	a0, -0x238(s0)

00000000802050b2 <.Lpcrel_hi4>:
802050b2: 17 f5 02 00  	auipc	a0, 0x2f
802050b6: 93 05 65 17  	addi	a1, a0, 0x176
802050ba: 13 05 04 d9  	addi	a0, s0, -0x270
802050be: 23 30 a4 ca  	sd	a0, -0x360(s0)
802050c2: 93 06 04 dc  	addi	a3, s0, -0x240
802050c6: 97 20 00 00  	auipc	ra, 0x2
802050ca: e7 80 20 22  	jalr	0x222(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
802050ce: 03 35 04 ca  	ld	a0, -0x360(s0)
802050d2: 97 30 01 00  	auipc	ra, 0x13
802050d6: e7 80 a0 db  	jalr	-0x246(ra) <_ZN2os7console5print17h042fcde166d682deE>
;         trap::ktrap_init();//trap init
802050da: 97 d0 ff ff  	auipc	ra, 0xffffd
802050de: e7 80 00 5d  	jalr	0x5d0(ra) <ekernel+0xffcb56aa>
;         ktrap::timerinit();
802050e2: 97 10 01 00  	auipc	ra, 0x11
802050e6: e7 80 80 81  	jalr	-0x7e8(ra) <_ZN2os4trap5ktrap9timerinit17hcb6aabbf3d819cc9E>
;         let s = sstatus::read().spp();
802050ea: 97 00 00 00  	auipc	ra, 0x0
802050ee: e7 80 80 65  	jalr	0x658(ra) <_ZN5riscv8register7sstatus4read17hd59de933bfb9d8d0E>
802050f2: 23 3c a4 dc  	sd	a0, -0x228(s0)
802050f6: 13 05 84 dd  	addi	a0, s0, -0x228
802050fa: 97 00 00 00  	auipc	ra, 0x0
802050fe: e7 80 20 6c  	jalr	0x6c2(ra) <_ZN5riscv8register7sstatus7Sstatus3spp17h48137d438440953bE>
80205102: 83 35 84 ca  	ld	a1, -0x358(s0)
80205106: 03 36 04 cd  	ld	a2, -0x330(s0)
8020510a: 03 37 84 cd  	ld	a4, -0x328(s0)
8020510e: aa 86        	mv	a3, a0
80205110: 03 35 04 cb  	ld	a0, -0x350(s0)
80205114: a3 0b d4 dc  	sb	a3, -0x229(s0)
80205118: 93 06 74 dd  	addi	a3, s0, -0x229
8020511c: 23 30 d4 fc  	sd	a3, -0x40(s0)
;         Self::new(x, Debug::fmt)
80205120: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80205124: 23 38 d4 fa  	sd	a3, -0x50(s0)
80205128: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
8020512c: 83 36 04 fb  	ld	a3, -0x50(s0)
80205130: 03 35 84 fb  	ld	a0, -0x48(s0)
;         println!("{:?}",s);
80205134: 23 38 d4 e0  	sd	a3, -0x1f0(s0)
80205138: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
8020513c: 13 05 04 de  	addi	a0, s0, -0x220
80205140: 23 3c a4 ca  	sd	a0, -0x348(s0)
80205144: 93 06 04 e1  	addi	a3, s0, -0x1f0
80205148: 97 20 00 00  	auipc	ra, 0x2
8020514c: e7 80 00 1a  	jalr	0x1a0(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
80205150: 03 35 84 cb  	ld	a0, -0x348(s0)
80205154: 97 30 01 00  	auipc	ra, 0x13
80205158: e7 80 80 d3  	jalr	-0x2c8(ra) <_ZN2os7console5print17h042fcde166d682deE>
;         unsafe { ebreak() };
8020515c: 97 10 01 00  	auipc	ra, 0x11
80205160: e7 80 80 70  	jalr	0x708(ra) <_ZN5riscv3asm6ebreak17hd58c0782ee636f65E>
;         kalloc::init_heap();//kernel heap init
80205164: 97 60 00 00  	auipc	ra, 0x6
80205168: e7 80 c0 3e  	jalr	0x3ec(ra) <_ZN2os6kalloc9init_heap17he6a1f8969c2a15dcE>

000000008020516c <.Lpcrel_hi5>:
;         page_alloc::FRAME_ALLOC.allocer_init();
8020516c: 17 95 03 00  	auipc	a0, 0x39
80205170: 13 05 45 e9  	addi	a0, a0, -0x16c
80205174: 23 34 a4 cc  	sd	a0, -0x338(s0)
80205178: 97 f0 ff ff  	auipc	ra, 0xfffff
8020517c: e7 80 a0 e3  	jalr	-0x1c6(ra) <ekernel+0xffcb6fb2>
80205180: 13 05 04 e2  	addi	a0, s0, -0x1e0
;         pagetable = PageTable::new();
80205184: 97 70 00 00  	auipc	ra, 0x7
80205188: e7 80 40 1f  	jalr	0x1f4(ra) <_ZN2os2vm9PageTable3new17h82991c91070326d8E>
8020518c: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80205190: 23 3c a4 d2  	sd	a0, -0x2c8(s0)
80205194: 03 35 84 e4  	ld	a0, -0x1b8(s0)
80205198: 23 38 a4 d2  	sd	a0, -0x2d0(s0)
8020519c: 03 35 04 e4  	ld	a0, -0x1c0(s0)
802051a0: 23 34 a4 d2  	sd	a0, -0x2d8(s0)
802051a4: 03 35 84 e3  	ld	a0, -0x1c8(s0)
802051a8: 23 30 a4 d2  	sd	a0, -0x2e0(s0)
802051ac: 03 35 04 e3  	ld	a0, -0x1d0(s0)
802051b0: 23 3c a4 d0  	sd	a0, -0x2e8(s0)
802051b4: 03 35 84 e2  	ld	a0, -0x1d8(s0)
802051b8: 23 38 a4 d0  	sd	a0, -0x2f0(s0)
802051bc: 03 35 04 e2  	ld	a0, -0x1e0(s0)
802051c0: 23 34 a4 d0  	sd	a0, -0x2f8(s0)
802051c4: 13 05 84 d0  	addi	a0, s0, -0x2f8
802051c8: 23 30 a4 cc  	sd	a0, -0x340(s0)
;         vm::kvmmake(&mut pagetable);
802051cc: 97 80 00 00  	auipc	ra, 0x8
802051d0: e7 80 40 3e  	jalr	0x3e4(ra) <_ZN2os2vm7kvmmake17h1c9cd26fdb2f776eE>
802051d4: 03 35 04 cc  	ld	a0, -0x340(s0)
;         PGTBIT.set_bit(pagetable.as_satp());
802051d8: 97 80 00 00  	auipc	ra, 0x8
802051dc: e7 80 e0 cd  	jalr	-0x322(ra) <_ZN2os2vm9PageTable7as_satp17hf9fd91e9244d86d8E>
802051e0: aa 85        	mv	a1, a0

00000000802051e2 <.Lpcrel_hi6>:
802051e2: 17 15 04 00  	auipc	a0, 0x41
802051e6: 13 05 65 c7  	addi	a0, a0, -0x38a
802051ea: 23 38 a4 ce  	sd	a0, -0x310(s0)
802051ee: 97 80 00 00  	auipc	ra, 0x8
802051f2: e7 80 60 5b  	jalr	0x5b6(ra) <_ZN2os2vm12PageTableBit7set_bit17hc5b404c55f55040eE>
802051f6: 03 35 04 cf  	ld	a0, -0x310(s0)
;         PGTBIT.set_root(pagetable.root.0);
802051fa: 83 35 84 d3  	ld	a1, -0x2c8(s0)
802051fe: 97 80 00 00  	auipc	ra, 0x8
80205202: e7 80 40 6d  	jalr	0x6d4(ra) <_ZN2os2vm12PageTableBit8set_root17h8b785f0df9a77194E>
;         pgtbl_install(cpuid);
80205206: 03 35 04 d0  	ld	a0, -0x300(s0)
8020520a: 97 00 00 00  	auipc	ra, 0x0
8020520e: e7 80 40 1a  	jalr	0x1a4(ra) <_ZN2os13pgtbl_install17ha2639894a2f5265fE>
80205212: 03 35 84 cc  	ld	a0, -0x338(s0)
;         let page = FRAME_ALLOC.page_alloc();
80205216: 97 f0 ff ff  	auipc	ra, 0xfffff
8020521a: e7 80 00 ca  	jalr	-0x360(ra) <ekernel+0xffcb6eb6>
8020521e: 03 36 04 cd  	ld	a2, -0x330(s0)
80205222: 03 37 84 cd  	ld	a4, -0x328(s0)
80205226: aa 85        	mv	a1, a0
80205228: 03 35 04 ce  	ld	a0, -0x320(s0)
8020522c: 23 3c b4 e4  	sd	a1, -0x1a8(s0)
80205230: 93 05 84 e5  	addi	a1, s0, -0x1a8
80205234: 23 3c b4 ce  	sd	a1, -0x308(s0)
80205238: 23 30 b4 f8  	sd	a1, -0x80(s0)
;         Self::new(x, Display::fmt)
8020523c: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80205240: 23 38 b4 f6  	sd	a1, -0x90(s0)
80205244: 23 3c a4 f6  	sd	a0, -0x88(s0)
;     }
80205248: 83 35 04 f7  	ld	a1, -0x90(s0)
8020524c: 03 35 84 f7  	ld	a0, -0x88(s0)
;         println!("a : {}",page.pages.0);
80205250: 23 38 b4 e8  	sd	a1, -0x170(s0)
80205254: 23 3c a4 e8  	sd	a0, -0x168(s0)

0000000080205258 <.Lpcrel_hi7>:
80205258: 17 f5 02 00  	auipc	a0, 0x2f
8020525c: 93 05 05 ff  	addi	a1, a0, -0x10
80205260: 13 05 04 e6  	addi	a0, s0, -0x1a0
80205264: 23 34 a4 ce  	sd	a0, -0x318(s0)
80205268: 93 06 04 e9  	addi	a3, s0, -0x170
8020526c: 97 20 00 00  	auipc	ra, 0x2
80205270: e7 80 c0 07  	jalr	0x7c(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
80205274: 03 35 84 ce  	ld	a0, -0x318(s0)
80205278: 97 30 01 00  	auipc	ra, 0x13
8020527c: e7 80 40 c1  	jalr	-0x3ec(ra) <_ZN2os7console5print17h042fcde166d682deE>
80205280: 03 35 04 cf  	ld	a0, -0x310(s0)
;         let last_page:usize = PGTBIT.root_addr();
80205284: 97 80 00 00  	auipc	ra, 0x8
80205288: e7 80 e0 5f  	jalr	0x5fe(ra) <_ZN2os2vm12PageTableBit9root_addr17hec786b844a4eebfeE>
8020528c: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;         fs_ls();
80205290: 97 00 00 00  	auipc	ra, 0x0
80205294: e7 80 c0 1b  	jalr	0x1bc(ra) <_ZN2os5fs_ls17hbf09903517a59817E>
;         task::manager::init();
80205298: 97 30 01 00  	auipc	ra, 0x13
8020529c: e7 80 a0 62  	jalr	0x62a(ra) <_ZN2os4task7manager4init17hb014b1a8773371a2E>
802052a0: 03 35 84 cf  	ld	a0, -0x308(s0)
;     }else {
802052a4: 97 30 00 00  	auipc	ra, 0x3
802052a8: e7 80 e0 c4  	jalr	-0x3b2(ra) <_ZN4core3ptr49drop_in_place$LT$os..page_alloc..AllocerGuard$GT$17h5da965a35f3e2985E>
802052ac: ed a8        	j	0x802053a6 <.Lpcrel_hi11+0x36>
802052ae: 93 05 04 d0  	addi	a1, s0, -0x300
802052b2: 23 30 b4 f6  	sd	a1, -0xa0(s0)

00000000802052b6 <.Lpcrel_hi8>:
;         Self::new(x, Display::fmt)
802052b6: 17 c5 02 00  	auipc	a0, 0x2c
802052ba: 13 05 85 dd  	addi	a0, a0, -0x228
802052be: 23 30 a4 c8  	sd	a0, -0x380(s0)
802052c2: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
802052c6: 23 38 b4 f4  	sd	a1, -0xb0(s0)
802052ca: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;     }
802052ce: 83 35 04 f5  	ld	a1, -0xb0(s0)
802052d2: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         println!("hart {} is botting",cpuid);
802052d6: 23 38 b4 ec  	sd	a1, -0x130(s0)
802052da: 23 3c a4 ec  	sd	a0, -0x128(s0)

00000000802052de <.Lpcrel_hi9>:
802052de: 17 f5 02 00  	auipc	a0, 0x2f
802052e2: 93 05 a5 f4  	addi	a1, a0, -0xb6
802052e6: 13 05 04 ea  	addi	a0, s0, -0x160
802052ea: 23 34 a4 c6  	sd	a0, -0x398(s0)
802052ee: 09 46        	li	a2, 0x2
802052f0: 23 38 c4 c6  	sd	a2, -0x390(s0)
802052f4: 93 06 04 ed  	addi	a3, s0, -0x130
802052f8: 05 47        	li	a4, 0x1
802052fa: 23 3c e4 c6  	sd	a4, -0x388(s0)
802052fe: 97 20 00 00  	auipc	ra, 0x2
80205302: e7 80 a0 fe  	jalr	-0x16(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
80205306: 03 35 84 c6  	ld	a0, -0x398(s0)
8020530a: 97 30 01 00  	auipc	ra, 0x13
8020530e: e7 80 20 b8  	jalr	-0x47e(ra) <_ZN2os7console5print17h042fcde166d682deE>
;         trap::ktrap_init();
80205312: 97 d0 ff ff  	auipc	ra, 0xffffd
80205316: e7 80 80 39  	jalr	0x398(ra) <ekernel+0xffcb56aa>
;         pgtbl_install(cpuid);
8020531a: 03 35 04 d0  	ld	a0, -0x300(s0)
8020531e: 97 00 00 00  	auipc	ra, 0x0
80205322: e7 80 00 09  	jalr	0x90(ra) <_ZN2os13pgtbl_install17ha2639894a2f5265fE>

0000000080205326 <.Lpcrel_hi10>:
;         let page = FRAME_ALLOC.page_alloc();
80205326: 17 95 03 00  	auipc	a0, 0x39
8020532a: 13 05 a5 cd  	addi	a0, a0, -0x326
8020532e: 97 f0 ff ff  	auipc	ra, 0xfffff
80205332: e7 80 80 b8  	jalr	-0x478(ra) <ekernel+0xffcb6eb6>
80205336: 03 36 04 c7  	ld	a2, -0x390(s0)
8020533a: 03 37 84 c7  	ld	a4, -0x388(s0)
8020533e: aa 85        	mv	a1, a0
80205340: 03 35 04 c8  	ld	a0, -0x380(s0)
80205344: 23 30 b4 ee  	sd	a1, -0x120(s0)
80205348: 93 05 04 ee  	addi	a1, s0, -0x120
8020534c: 23 38 b4 c8  	sd	a1, -0x370(s0)
80205350: 23 30 b4 f4  	sd	a1, -0xc0(s0)
;         Self::new(x, Display::fmt)
80205354: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80205358: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8020535c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;     }
80205360: 83 35 04 f3  	ld	a1, -0xd0(s0)
80205364: 03 35 84 f3  	ld	a0, -0xc8(s0)
;         println!("a : {}",page.pages.0);
80205368: 23 3c b4 f0  	sd	a1, -0xe8(s0)
8020536c: 23 30 a4 f2  	sd	a0, -0xe0(s0)

0000000080205370 <.Lpcrel_hi11>:
80205370: 17 f5 02 00  	auipc	a0, 0x2f
80205374: 93 05 85 ed  	addi	a1, a0, -0x128
80205378: 13 05 84 ee  	addi	a0, s0, -0x118
8020537c: 23 34 a4 c8  	sd	a0, -0x378(s0)
80205380: 93 06 84 f1  	addi	a3, s0, -0xe8
80205384: 97 20 00 00  	auipc	ra, 0x2
80205388: e7 80 40 f6  	jalr	-0x9c(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
8020538c: 03 35 84 c8  	ld	a0, -0x378(s0)
80205390: 97 30 01 00  	auipc	ra, 0x13
80205394: e7 80 c0 af  	jalr	-0x504(ra) <_ZN2os7console5print17h042fcde166d682deE>
80205398: 03 35 04 c9  	ld	a0, -0x370(s0)
;     }
8020539c: 97 30 00 00  	auipc	ra, 0x3
802053a0: e7 80 60 b5  	jalr	-0x4aa(ra) <_ZN4core3ptr49drop_in_place$LT$os..page_alloc..AllocerGuard$GT$17h5da965a35f3e2985E>
802053a4: 09 a0        	j	0x802053a6 <.Lpcrel_hi11+0x36>
;     scheduler();
802053a6: 97 c0 00 00  	auipc	ra, 0xc
802053aa: e7 80 a0 cc  	jalr	-0x336(ra) <scheduler>

00000000802053ae <_ZN2os13pgtbl_install17ha2639894a2f5265fE>:
; fn pgtbl_install(cpuid :usize){
802053ae: 35 71        	addi	sp, sp, -0xa0
802053b0: 06 ed        	sd	ra, 0x98(sp)
802053b2: 22 e9        	sd	s0, 0x90(sp)
802053b4: 00 11        	addi	s0, sp, 0xa0
802053b6: 23 38 a4 f6  	sd	a0, -0x90(s0)
;     loop {
802053ba: 09 a0        	j	0x802053bc <.Lpcrel_hi12>

00000000802053bc <.Lpcrel_hi12>:
;         match PGTBIT.get_bit() {
802053bc: 17 15 04 00  	auipc	a0, 0x41
802053c0: 13 05 c5 a9  	addi	a0, a0, -0x564
802053c4: 97 80 00 00  	auipc	ra, 0x8
802053c8: e7 80 80 45  	jalr	0x458(ra) <_ZN2os2vm12PageTableBit7get_bit17hbf79352923a4b3d1E>
802053cc: 23 3c a4 f6  	sd	a0, -0x88(s0)
802053d0: 23 30 b4 f8  	sd	a1, -0x80(s0)
802053d4: 03 35 84 f7  	ld	a0, -0x88(s0)
802053d8: 75 d1        	beqz	a0, 0x802053bc <.Lpcrel_hi12>
802053da: 09 a0        	j	0x802053dc <.Lpcrel_hi12+0x20>
;             Some(i) => {
802053dc: 03 35 04 f8  	ld	a0, -0x80(s0)
802053e0: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                 vm::kvminithart(i);
802053e4: 97 80 00 00  	auipc	ra, 0x8
802053e8: e7 80 c0 39  	jalr	0x39c(ra) <_ZN2os2vm11kvminithart17h0ef27556ac175799E>
802053ec: 93 05 04 f7  	addi	a1, s0, -0x90
802053f0: 23 30 b4 fe  	sd	a1, -0x20(s0)

00000000802053f4 <.Lpcrel_hi13>:
;         Self::new(x, Display::fmt)
802053f4: 17 c5 02 00  	auipc	a0, 0x2c
802053f8: 13 05 a5 c9  	addi	a0, a0, -0x366
802053fc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80205400: 23 38 b4 fc  	sd	a1, -0x30(s0)
80205404: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80205408: 83 35 04 fd  	ld	a1, -0x30(s0)
8020540c: 03 35 84 fd  	ld	a0, -0x28(s0)
;     println!("---hart {} pgtbl install ok---",cpuid);
80205410: 23 3c b4 fa  	sd	a1, -0x48(s0)
80205414: 23 30 a4 fc  	sd	a0, -0x40(s0)

0000000080205418 <.Lpcrel_hi14>:
80205418: 17 f5 02 00  	auipc	a0, 0x2f
8020541c: 93 05 85 e6  	addi	a1, a0, -0x198
80205420: 13 05 84 f8  	addi	a0, s0, -0x78
80205424: 23 34 a4 f6  	sd	a0, -0x98(s0)
80205428: 09 46        	li	a2, 0x2
8020542a: 93 06 84 fb  	addi	a3, s0, -0x48
8020542e: 05 47        	li	a4, 0x1
80205430: 97 20 00 00  	auipc	ra, 0x2
80205434: e7 80 80 eb  	jalr	-0x148(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
80205438: 03 35 84 f6  	ld	a0, -0x98(s0)
8020543c: 97 30 01 00  	auipc	ra, 0x13
80205440: e7 80 00 a5  	jalr	-0x5b0(ra) <_ZN2os7console5print17h042fcde166d682deE>
80205444: ea 60        	ld	ra, 0x98(sp)
80205446: 4a 64        	ld	s0, 0x90(sp)
; }
80205448: 0d 61        	addi	sp, sp, 0xa0
8020544a: 82 80        	ret

000000008020544c <_ZN2os5fs_ls17hbf09903517a59817E>:
; fn fs_ls(){
8020544c: 13 01 01 ce  	addi	sp, sp, -0x320
80205450: 23 3c 11 30  	sd	ra, 0x318(sp)
80205454: 23 38 81 30  	sd	s0, 0x310(sp)
80205458: 00 16        	addi	s0, sp, 0x320

000000008020545a <.Lpcrel_hi15>:
;     for s in ROOT_INODE.ls(){
8020545a: 17 e5 02 00  	auipc	a0, 0x2e
8020545e: 13 05 65 47  	addi	a0, a0, 0x476
80205462: 97 d0 ff ff  	auipc	ra, 0xffffd
80205466: e7 80 00 19  	jalr	0x190(ra) <ekernel+0xffcb55f2>
8020546a: 97 d0 ff ff  	auipc	ra, 0xffffd
8020546e: e7 80 c0 9b  	jalr	-0x644(ra) <ekernel+0xffcb4e26>
80205472: aa 85        	mv	a1, a0
80205474: 13 05 84 d1  	addi	a0, s0, -0x2e8
80205478: 23 38 a4 ce  	sd	a0, -0x310(s0)
8020547c: 97 30 02 00  	auipc	ra, 0x23
80205480: e7 80 00 a0  	jalr	-0x600(ra) <_ZN7easy_fs3vfs5Inode2ls17hc970cb134f1e20f5E>
80205484: 83 35 04 cf  	ld	a1, -0x310(s0)
80205488: 13 05 84 cf  	addi	a0, s0, -0x308
8020548c: 97 00 01 00  	auipc	ra, 0x10
80205490: e7 80 40 ec  	jalr	-0x13c(ra) <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2dfc73a71749b909E>
80205494: 03 35 04 d1  	ld	a0, -0x2f0(s0)
80205498: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
8020549c: 03 35 84 d0  	ld	a0, -0x2f8(s0)
802054a0: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
802054a4: 03 35 04 d0  	ld	a0, -0x300(s0)
802054a8: 23 3c a4 d2  	sd	a0, -0x2c8(s0)
802054ac: 03 35 84 cf  	ld	a0, -0x308(s0)
802054b0: 23 38 a4 d2  	sd	a0, -0x2d0(s0)
802054b4: 09 a0        	j	0x802054b6 <.Lpcrel_hi15+0x5c>
802054b6: 13 05 04 d5  	addi	a0, s0, -0x2b0
802054ba: 93 05 04 d3  	addi	a1, s0, -0x2d0
;     for s in ROOT_INODE.ls(){
802054be: 97 e0 ff ff  	auipc	ra, 0xffffe
802054c2: e7 80 c0 ee  	jalr	-0x114(ra) <ekernel+0xffcb63aa>
802054c6: 03 35 04 d5  	ld	a0, -0x2b0(s0)
802054ca: fd 55        	li	a1, -0x1
802054cc: fe 15        	slli	a1, a1, 0x3f
802054ce: 63 1f b5 04  	bne	a0, a1, 0x8020552c <.Lpcrel_hi16+0x3a>
802054d2: 09 a0        	j	0x802054d4 <.Lpcrel_hi15+0x7a>
802054d4: 13 05 04 d3  	addi	a0, s0, -0x2d0
;     for s in ROOT_INODE.ls(){
802054d8: 97 30 00 00  	auipc	ra, 0x3
802054dc: e7 80 e0 f7  	jalr	-0x82(ra) <_ZN4core3ptr81drop_in_place$LT$alloc..vec..into_iter..IntoIter$LT$alloc..string..String$GT$$GT$17he62d65474f2b9e53E>
802054e0: 13 05 04 dc  	addi	a0, s0, -0x240
802054e4: 81 45        	li	a1, 0x0
802054e6: 13 06 00 20  	li	a2, 0x200
;     let mut read_buffer = [0u8; 512];
802054ea: 97 d0 02 00  	auipc	ra, 0x2d
802054ee: e7 80 40 9a  	jalr	-0x65c(ra) <memset>

00000000802054f2 <.Lpcrel_hi16>:
;     let block_device = BLOCK_DEVICE.clone();
802054f2: 17 f5 02 00  	auipc	a0, 0x2f
802054f6: 13 05 65 cf  	addi	a0, a0, -0x30a
802054fa: 97 f0 ff ff  	auipc	ra, 0xfffff
802054fe: e7 80 20 73  	jalr	0x732(ra) <ekernel+0xffcb7c2c>
80205502: 97 80 01 00  	auipc	ra, 0x18
80205506: e7 80 e0 bd  	jalr	-0x422(ra) <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hf9ea9035163a2c6bE>
8020550a: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020550e: 23 34 b4 fc  	sd	a1, -0x38(s0)
80205512: 13 05 04 fc  	addi	a0, s0, -0x40
; }
80205516: 97 80 01 00  	auipc	ra, 0x18
8020551a: e7 80 40 56  	jalr	0x564(ra) <_ZN4core3ptr84drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$17h88c9727042c9d2a2E>
8020551e: 83 30 81 31  	ld	ra, 0x318(sp)
80205522: 03 34 01 31  	ld	s0, 0x310(sp)
80205526: 13 01 01 32  	addi	sp, sp, 0x320
8020552a: 82 80        	ret
;     for s in ROOT_INODE.ls(){
8020552c: 03 35 04 d6  	ld	a0, -0x2a0(s0)
80205530: 23 3c a4 d6  	sd	a0, -0x288(s0)
80205534: 03 35 84 d5  	ld	a0, -0x2a8(s0)
80205538: 23 38 a4 d6  	sd	a0, -0x290(s0)
8020553c: 03 35 04 d5  	ld	a0, -0x2b0(s0)
80205540: 23 34 a4 d6  	sd	a0, -0x298(s0)
80205544: 93 05 84 d6  	addi	a1, s0, -0x298
80205548: 23 34 b4 ce  	sd	a1, -0x318(s0)
8020554c: 23 30 b4 fe  	sd	a1, -0x20(s0)

0000000080205550 <.Lpcrel_hi17>:
;         Self::new(x, Display::fmt)
80205550: 17 75 00 00  	auipc	a0, 0x7
80205554: 13 05 65 b2  	addi	a0, a0, -0x4da
80205558: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020555c: 23 38 b4 fc  	sd	a1, -0x30(s0)
80205560: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80205564: 83 35 04 fd  	ld	a1, -0x30(s0)
80205568: 03 35 84 fd  	ld	a0, -0x28(s0)
;         println!("ls : {}",s);
8020556c: 23 38 b4 da  	sd	a1, -0x250(s0)
80205570: 23 3c a4 da  	sd	a0, -0x248(s0)

0000000080205574 <.Lpcrel_hi18>:
80205574: 17 f5 02 00  	auipc	a0, 0x2f
80205578: 93 05 45 d3  	addi	a1, a0, -0x2cc
8020557c: 13 05 04 d8  	addi	a0, s0, -0x280
80205580: 23 30 a4 ce  	sd	a0, -0x320(s0)
80205584: 09 46        	li	a2, 0x2
80205586: 93 06 04 db  	addi	a3, s0, -0x250
8020558a: 05 47        	li	a4, 0x1
8020558c: 97 20 00 00  	auipc	ra, 0x2
80205590: e7 80 c0 d5  	jalr	-0x2a4(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
80205594: 03 35 04 ce  	ld	a0, -0x320(s0)
80205598: 97 30 01 00  	auipc	ra, 0x13
8020559c: e7 80 40 8f  	jalr	-0x70c(ra) <_ZN2os7console5print17h042fcde166d682deE>
802055a0: 03 35 84 ce  	ld	a0, -0x318(s0)
;     }
802055a4: 97 20 00 00  	auipc	ra, 0x2
802055a8: e7 80 80 7d  	jalr	0x7d8(ra) <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17hf68a660302d4d33fE>
802055ac: 29 b7        	j	0x802054b6 <.Lpcrel_hi15+0x5c>

00000000802055ae <_ZN2os4sync2up19UPSafeCell$LT$T$GT$3new17h26748a17072270e3E>:
;     pub unsafe fn new(value:T) -> Self{
802055ae: 6d 71        	addi	sp, sp, -0x110
802055b0: 06 e6        	sd	ra, 0x108(sp)
802055b2: 22 e2        	sd	s0, 0x100(sp)
802055b4: 00 0a        	addi	s0, sp, 0x110
802055b6: 23 3c a4 ee  	sd	a0, -0x108(s0)
802055ba: 13 05 84 f0  	addi	a0, s0, -0xf8
802055be: 23 30 a4 f0  	sd	a0, -0x100(s0)
;         Self{inner:RefCell::new(value)}
802055c2: 97 b0 ff ff  	auipc	ra, 0xffffb
802055c6: e7 80 c0 55  	jalr	0x55c(ra) <ekernel+0xffcb3b1e>
802055ca: 03 35 84 ef  	ld	a0, -0x108(s0)
802055ce: 83 35 04 f0  	ld	a1, -0x100(s0)
802055d2: 13 06 80 0e  	li	a2, 0xe8
;         Self{inner:RefCell::new(value)}
802055d6: 97 c0 02 00  	auipc	ra, 0x2c
802055da: e7 80 80 69  	jalr	0x698(ra) <memcpy>
802055de: b2 60        	ld	ra, 0x108(sp)
802055e0: 12 64        	ld	s0, 0x100(sp)
;     }
802055e2: 51 61        	addi	sp, sp, 0x110
802055e4: 82 80        	ret

00000000802055e6 <_ZN2os4sync2up19UPSafeCell$LT$T$GT$16exclusive_access17h8d7dcac8b5637df9E>:
;     pub fn exclusive_access(&self) -> RefMut<'_, T> {
802055e6: 01 11        	addi	sp, sp, -0x20
802055e8: 06 ec        	sd	ra, 0x18(sp)
802055ea: 22 e8        	sd	s0, 0x10(sp)
802055ec: 00 10        	addi	s0, sp, 0x20
802055ee: 23 34 a4 fe  	sd	a0, -0x18(s0)

00000000802055f2 <.Lpcrel_hi0>:
;         self.inner.borrow_mut()
802055f2: 97 f5 02 00  	auipc	a1, 0x2f
802055f6: 93 85 65 ce  	addi	a1, a1, -0x31a
802055fa: 97 b0 ff ff  	auipc	ra, 0xffffb
802055fe: e7 80 a0 41  	jalr	0x41a(ra) <ekernel+0xffcb3a14>
80205602: e2 60        	ld	ra, 0x18(sp)
80205604: 42 64        	ld	s0, 0x10(sp)
;     }
80205606: 05 61        	addi	sp, sp, 0x20
80205608: 82 80        	ret

000000008020560a <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h731d03889581025fE>:
;             const fn precondition_check($($name:$ty),*) {
8020560a: 79 71        	addi	sp, sp, -0x30
8020560c: 06 f4        	sd	ra, 0x28(sp)
8020560e: 22 f0        	sd	s0, 0x20(sp)
80205610: 00 18        	addi	s0, sp, 0x30
80205612: aa 85        	mv	a1, a0
80205614: 23 38 b4 fc  	sd	a1, -0x30(s0)
80205618: 85 45        	li	a1, 0x1
8020561a: ae 05        	slli	a1, a1, 0xb
;     uint_impl! {
8020561c: 23 2c b4 fc  	sw	a1, -0x28(s0)
80205620: 23 20 a4 fe  	sw	a0, -0x20(s0)
80205624: ed 45        	li	a1, 0x1b
80205626: ae 05        	slli	a1, a1, 0xb
;     if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
80205628: 2d 8d        	xor	a0, a0, a1
8020562a: 23 22 a4 fe  	sw	a0, -0x1c(s0)
;     uint_impl! {
8020562e: 1b 05 05 80  	addiw	a0, a0, -0x800
;     if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
80205632: 9b 55 b5 00  	srliw	a1, a0, 0xb
80205636: 13 05 e0 21  	li	a0, 0x21e
8020563a: 63 68 b5 00  	bltu	a0, a1, 0x8020564a <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h731d03889581025fE+0x40>
8020563e: 09 a0        	j	0x80205640 <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h731d03889581025fE+0x36>
80205640: 03 35 04 fd  	ld	a0, -0x30(s0)
;         Ok(unsafe { transmute(i) })
80205644: 23 2e a4 fc  	sw	a0, -0x24(s0)
;     if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
80205648: 31 a0        	j	0x80205654 <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h731d03889581025fE+0x4a>
8020564a: 37 05 11 00  	lui	a0, 0x110
;         Err(CharTryFromError(()))
8020564e: 23 2e a4 fc  	sw	a0, -0x24(s0)
;     if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {
80205652: 09 a0        	j	0x80205654 <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h731d03889581025fE+0x4a>
80205654: 13 05 c4 fd  	addi	a0, s0, -0x24
;             (i: u32 = i) => char_try_from_u32(i).is_ok()
80205658: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         matches!(*self, Ok(_))
8020565c: 03 25 c4 fd  	lw	a0, -0x24(s0)
80205660: b7 05 11 00  	lui	a1, 0x110
80205664: 63 07 b5 00  	beq	a0, a1, 0x80205672 <.Lpcrel_hi0>
80205668: 09 a0        	j	0x8020566a <_ZN4core4char7convert18from_u32_unchecked18precondition_check17h731d03889581025fE+0x60>
8020566a: a2 70        	ld	ra, 0x28(sp)
8020566c: 02 74        	ld	s0, 0x20(sp)
;             }
8020566e: 45 61        	addi	sp, sp, 0x30
80205670: 82 80        	ret

0000000080205672 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
80205672: 17 f5 02 00  	auipc	a0, 0x2f
80205676: 13 05 e5 c7  	addi	a0, a0, -0x382
8020567a: 93 05 90 03  	li	a1, 0x39
8020567e: 97 b0 02 00  	auipc	ra, 0x2b
80205682: e7 80 20 bc  	jalr	-0x43e(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>

0000000080205686 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17h5c5836eb2a8e512bE>:
;     fn le(&self, other: &LevelFilter) -> bool {
80205686: 39 71        	addi	sp, sp, -0x40
80205688: 06 fc        	sd	ra, 0x38(sp)
8020568a: 22 f8        	sd	s0, 0x30(sp)
8020568c: 80 00        	addi	s0, sp, 0x40
8020568e: 23 34 b4 fc  	sd	a1, -0x38(s0)
80205692: aa 85        	mv	a1, a0
80205694: 03 35 84 fc  	ld	a0, -0x38(s0)
80205698: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020569c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self as usize <= *other as usize
802056a0: 8c 61        	ld	a1, 0x0(a1)
802056a2: 23 38 b4 fc  	sd	a1, -0x30(s0)
802056a6: 83 35 04 fd  	ld	a1, -0x30(s0)
802056aa: 08 61        	ld	a0, 0x0(a0)
802056ac: 23 3c a4 fc  	sd	a0, -0x28(s0)
802056b0: 03 35 84 fd  	ld	a0, -0x28(s0)
802056b4: 33 35 b5 00  	sltu	a0, a0, a1
802056b8: 13 45 15 00  	xori	a0, a0, 0x1
802056bc: e2 70        	ld	ra, 0x38(sp)
802056be: 42 74        	ld	s0, 0x30(sp)
;     }
802056c0: 21 61        	addi	sp, sp, 0x40
802056c2: 82 80        	ret

00000000802056c4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1a67b51187ccdd82E>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
802056c4: 01 11        	addi	sp, sp, -0x20
802056c6: 06 ec        	sd	ra, 0x18(sp)
802056c8: 22 e8        	sd	s0, 0x10(sp)
802056ca: 00 10        	addi	s0, sp, 0x20
802056cc: 23 30 a4 fe  	sd	a0, -0x20(s0)
802056d0: 23 34 b4 fe  	sd	a1, -0x18(s0)
802056d4: 08 61        	ld	a0, 0x0(a0)
802056d6: 97 80 02 00  	auipc	ra, 0x28
802056da: e7 80 60 7b  	jalr	0x7b6(ra) <_ZN4core5array69_$LT$impl$u20$core..fmt..Debug$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$3fmt17h2ed576a1f2e906feE>
802056de: e2 60        	ld	ra, 0x18(sp)
802056e0: 42 64        	ld	s0, 0x10(sp)
802056e2: 05 61        	addi	sp, sp, 0x20
802056e4: 82 80        	ret

00000000802056e6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he1553421f3d5c080E>:
802056e6: 01 11        	addi	sp, sp, -0x20
802056e8: 06 ec        	sd	ra, 0x18(sp)
802056ea: 22 e8        	sd	s0, 0x10(sp)
802056ec: 00 10        	addi	s0, sp, 0x20
802056ee: 23 30 a4 fe  	sd	a0, -0x20(s0)
802056f2: 23 34 b4 fe  	sd	a1, -0x18(s0)
802056f6: 08 61        	ld	a0, 0x0(a0)
802056f8: 97 f0 ff ff  	auipc	ra, 0xfffff
802056fc: e7 80 00 43  	jalr	0x430(ra) <ekernel+0xffcb7b28>
80205700: e2 60        	ld	ra, 0x18(sp)
80205702: 42 64        	ld	s0, 0x10(sp)
80205704: 05 61        	addi	sp, sp, 0x20
80205706: 82 80        	ret

0000000080205708 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17he47ad788d57e9f3eE>:
80205708: 01 11        	addi	sp, sp, -0x20
8020570a: 06 ec        	sd	ra, 0x18(sp)
8020570c: 22 e8        	sd	s0, 0x10(sp)
8020570e: 00 10        	addi	s0, sp, 0x20
80205710: 23 30 a4 fe  	sd	a0, -0x20(s0)
80205714: 23 34 b4 fe  	sd	a1, -0x18(s0)
80205718: 08 61        	ld	a0, 0x0(a0)
8020571a: 97 a0 02 00  	auipc	ra, 0x2a
8020571e: e7 80 c0 d0  	jalr	-0x2f4(ra) <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h27dd291ee8f8fb50E>
80205722: e2 60        	ld	ra, 0x18(sp)
80205724: 42 64        	ld	s0, 0x10(sp)
80205726: 05 61        	addi	sp, sp, 0x20
80205728: 82 80        	ret

000000008020572a <_ZN5riscv8register7sstatus4_set17hc03f08b78385412bE>:
;         unsafe fn _set(bits: usize) {
8020572a: 01 11        	addi	sp, sp, -0x20
8020572c: 06 ec        	sd	ra, 0x18(sp)
8020572e: 22 e8        	sd	s0, 0x10(sp)
80205730: 00 10        	addi	s0, sp, 0x20
80205732: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 () => core::arch::asm!("csrrs x0, {1}, {0}", in(reg) bits, const $csr_number),
80205736: 73 20 05 10  	csrs	sstatus, a0
8020573a: e2 60        	ld	ra, 0x18(sp)
8020573c: 42 64        	ld	s0, 0x10(sp)
;         }
8020573e: 05 61        	addi	sp, sp, 0x20
80205740: 82 80        	ret

0000000080205742 <_ZN5riscv8register7sstatus4read17hd59de933bfb9d8d0E>:
;         pub fn read() -> $register {
80205742: 01 11        	addi	sp, sp, -0x20
80205744: 06 ec        	sd	ra, 0x18(sp)
80205746: 22 e8        	sd	s0, 0x10(sp)
80205748: 00 10        	addi	s0, sp, 0x20
;                 bits: unsafe { _read() },
8020574a: 97 00 00 00  	auipc	ra, 0x0
8020574e: e7 80 80 01  	jalr	0x18(ra) <_ZN5riscv8register7sstatus5_read17h16865e02d22245c0E>
;             $register {
80205752: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         }
80205756: 03 35 84 fe  	ld	a0, -0x18(s0)
8020575a: e2 60        	ld	ra, 0x18(sp)
8020575c: 42 64        	ld	s0, 0x10(sp)
8020575e: 05 61        	addi	sp, sp, 0x20
80205760: 82 80        	ret

0000000080205762 <_ZN5riscv8register7sstatus5_read17h16865e02d22245c0E>:
;         unsafe fn _read() -> usize {
80205762: 01 11        	addi	sp, sp, -0x20
80205764: 06 ec        	sd	ra, 0x18(sp)
80205766: 22 e8        	sd	s0, 0x10(sp)
80205768: 00 10        	addi	s0, sp, 0x20
;                     core::arch::asm!("csrrs {0}, {1}, x0", out(reg) r, const $csr_number);
8020576a: 73 25 00 10  	csrr	a0, sstatus
8020576e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     r
80205772: 03 35 84 fe  	ld	a0, -0x18(s0)
80205776: e2 60        	ld	ra, 0x18(sp)
80205778: 42 64        	ld	s0, 0x10(sp)
;         }
8020577a: 05 61        	addi	sp, sp, 0x20
8020577c: 82 80        	ret

000000008020577e <_ZN5riscv8register7sstatus6_clear17ha7ae31f29ead85f5E>:
;         unsafe fn _clear(bits: usize) {
8020577e: 01 11        	addi	sp, sp, -0x20
80205780: 06 ec        	sd	ra, 0x18(sp)
80205782: 22 e8        	sd	s0, 0x10(sp)
80205784: 00 10        	addi	s0, sp, 0x20
80205786: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 () => core::arch::asm!("csrrc x0, {1}, {0}", in(reg) bits, const $csr_number),
8020578a: 73 30 05 10  	csrc	sstatus, a0
8020578e: e2 60        	ld	ra, 0x18(sp)
80205790: 42 64        	ld	s0, 0x10(sp)
;         }
80205792: 05 61        	addi	sp, sp, 0x20
80205794: 82 80        	ret

0000000080205796 <_ZN5riscv8register7sstatus7Sstatus3sie17h570fa8cdba4925c8E>:
;     pub fn sie(&self) -> bool {
80205796: 01 11        	addi	sp, sp, -0x20
80205798: 06 ec        	sd	ra, 0x18(sp)
8020579a: 22 e8        	sd	s0, 0x10(sp)
8020579c: 00 10        	addi	s0, sp, 0x20
8020579e: 23 34 a4 fe  	sd	a0, -0x18(s0)

00000000802057a2 <.Lpcrel_hi0>:
;         self.bits.get_bit(1)
802057a2: 97 f5 02 00  	auipc	a1, 0x2f
802057a6: 13 86 e5 bd  	addi	a2, a1, -0x422
802057aa: 85 45        	li	a1, 0x1
802057ac: 97 00 01 00  	auipc	ra, 0x10
802057b0: e7 80 60 c5  	jalr	-0x3aa(ra) <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17h1adc7a1d2833e03fE>
802057b4: e2 60        	ld	ra, 0x18(sp)
802057b6: 42 64        	ld	s0, 0x10(sp)
;     }
802057b8: 05 61        	addi	sp, sp, 0x20
802057ba: 82 80        	ret

00000000802057bc <_ZN5riscv8register7sstatus7Sstatus3spp17h48137d438440953bE>:
;     pub fn spp(&self) -> SPP {
802057bc: 01 11        	addi	sp, sp, -0x20
802057be: 06 ec        	sd	ra, 0x18(sp)
802057c0: 22 e8        	sd	s0, 0x10(sp)
802057c2: 00 10        	addi	s0, sp, 0x20
802057c4: 23 34 a4 fe  	sd	a0, -0x18(s0)

00000000802057c8 <.Lpcrel_hi1>:
;         match self.bits.get_bit(8) {
802057c8: 97 f5 02 00  	auipc	a1, 0x2f
802057cc: 13 86 05 bd  	addi	a2, a1, -0x430
802057d0: a1 45        	li	a1, 0x8
802057d2: 97 00 01 00  	auipc	ra, 0x10
802057d6: e7 80 00 c3  	jalr	-0x3d0(ra) <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17h1adc7a1d2833e03fE>
802057da: 11 e5        	bnez	a0, 0x802057e6 <.Lpcrel_hi1+0x1e>
802057dc: 09 a0        	j	0x802057de <.Lpcrel_hi1+0x16>
802057de: 01 45        	li	a0, 0x0
;             false => SPP::User,
802057e0: a3 03 a4 fe  	sb	a0, -0x19(s0)
802057e4: 29 a0        	j	0x802057ee <.Lpcrel_hi1+0x26>
802057e6: 05 45        	li	a0, 0x1
;             true => SPP::Supervisor,
802057e8: a3 03 a4 fe  	sb	a0, -0x19(s0)
802057ec: 09 a0        	j	0x802057ee <.Lpcrel_hi1+0x26>
;     }
802057ee: 03 45 74 fe  	lbu	a0, -0x19(s0)
802057f2: e2 60        	ld	ra, 0x18(sp)
802057f4: 42 64        	ld	s0, 0x10(sp)
802057f6: 05 61        	addi	sp, sp, 0x20
802057f8: 82 80        	ret

00000000802057fa <_ZN5riscv8register7sstatus7Sstatus4bits17h76b45ecf1725a589E>:
;     pub fn bits(&self) -> usize {
802057fa: 01 11        	addi	sp, sp, -0x20
802057fc: 06 ec        	sd	ra, 0x18(sp)
802057fe: 22 e8        	sd	s0, 0x10(sp)
80205800: 00 10        	addi	s0, sp, 0x20
80205802: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.bits
80205806: 08 61        	ld	a0, 0x0(a0)
80205808: e2 60        	ld	ra, 0x18(sp)
8020580a: 42 64        	ld	s0, 0x10(sp)
;     }
8020580c: 05 61        	addi	sp, sp, 0x20
8020580e: 82 80        	ret

0000000080205810 <_ZN5riscv8register7sstatus7set_sie17h74fdfa8a4c954fc1E>:
;         pub unsafe fn $set_field() {
80205810: 41 11        	addi	sp, sp, -0x10
80205812: 06 e4        	sd	ra, 0x8(sp)
80205814: 22 e0        	sd	s0, 0x0(sp)
80205816: 00 08        	addi	s0, sp, 0x10
80205818: 09 45        	li	a0, 0x2
;             _set($e);
8020581a: 97 00 00 00  	auipc	ra, 0x0
8020581e: e7 80 00 f1  	jalr	-0xf0(ra) <_ZN5riscv8register7sstatus4_set17hc03f08b78385412bE>
80205822: a2 60        	ld	ra, 0x8(sp)
80205824: 02 64        	ld	s0, 0x0(sp)
;         }
80205826: 41 01        	addi	sp, sp, 0x10
80205828: 82 80        	ret

000000008020582a <_ZN5riscv8register7sstatus7set_spp17h05f6a530d19fceb1E>:
; pub unsafe fn set_spp(spp: SPP) {
8020582a: 01 11        	addi	sp, sp, -0x20
8020582c: 06 ec        	sd	ra, 0x18(sp)
8020582e: 22 e8        	sd	s0, 0x10(sp)
80205830: 00 10        	addi	s0, sp, 0x20
80205832: a3 07 a4 fe  	sb	a0, -0x11(s0)
;     match spp {
80205836: 03 45 f4 fe  	lbu	a0, -0x11(s0)
8020583a: 05 89        	andi	a0, a0, 0x1
8020583c: 09 c9        	beqz	a0, 0x8020584e <_ZN5riscv8register7sstatus7set_spp17h05f6a530d19fceb1E+0x24>
8020583e: 09 a0        	j	0x80205840 <_ZN5riscv8register7sstatus7set_spp17h05f6a530d19fceb1E+0x16>
80205840: 13 05 00 10  	li	a0, 0x100
;         SPP::Supervisor => _set(1 << 8),
80205844: 97 00 00 00  	auipc	ra, 0x0
80205848: e7 80 60 ee  	jalr	-0x11a(ra) <_ZN5riscv8register7sstatus4_set17hc03f08b78385412bE>
8020584c: 01 a8        	j	0x8020585c <_ZN5riscv8register7sstatus7set_spp17h05f6a530d19fceb1E+0x32>
8020584e: 13 05 00 10  	li	a0, 0x100
;         SPP::User => _clear(1 << 8),
80205852: 97 00 00 00  	auipc	ra, 0x0
80205856: e7 80 c0 f2  	jalr	-0xd4(ra) <_ZN5riscv8register7sstatus6_clear17ha7ae31f29ead85f5E>
8020585a: 09 a0        	j	0x8020585c <_ZN5riscv8register7sstatus7set_spp17h05f6a530d19fceb1E+0x32>
8020585c: e2 60        	ld	ra, 0x18(sp)
8020585e: 42 64        	ld	s0, 0x10(sp)
; }
80205860: 05 61        	addi	sp, sp, 0x20
80205862: 82 80        	ret

0000000080205864 <_ZN5riscv8register7sstatus8set_spie17h8a890525add31b71E>:
;         pub unsafe fn $set_field() {
80205864: 41 11        	addi	sp, sp, -0x10
80205866: 06 e4        	sd	ra, 0x8(sp)
80205868: 22 e0        	sd	s0, 0x0(sp)
8020586a: 00 08        	addi	s0, sp, 0x10
8020586c: 13 05 00 02  	li	a0, 0x20
;             _set($e);
80205870: 97 00 00 00  	auipc	ra, 0x0
80205874: e7 80 a0 eb  	jalr	-0x146(ra) <_ZN5riscv8register7sstatus4_set17hc03f08b78385412bE>
80205878: a2 60        	ld	ra, 0x8(sp)
8020587a: 02 64        	ld	s0, 0x0(sp)
;         }
8020587c: 41 01        	addi	sp, sp, 0x10
8020587e: 82 80        	ret

0000000080205880 <_ZN5riscv8register7sstatus9clear_sie17hdc398123205dbd01E>:
;         pub unsafe fn $clear_field() {
80205880: 41 11        	addi	sp, sp, -0x10
80205882: 06 e4        	sd	ra, 0x8(sp)
80205884: 22 e0        	sd	s0, 0x0(sp)
80205886: 00 08        	addi	s0, sp, 0x10
80205888: 09 45        	li	a0, 0x2
;             _clear($e);
8020588a: 97 00 00 00  	auipc	ra, 0x0
8020588e: e7 80 40 ef  	jalr	-0x10c(ra) <_ZN5riscv8register7sstatus6_clear17ha7ae31f29ead85f5E>
80205892: a2 60        	ld	ra, 0x8(sp)
80205894: 02 64        	ld	s0, 0x0(sp)
;         }
80205896: 41 01        	addi	sp, sp, 0x10
80205898: 82 80        	ret

000000008020589a <_ZN66_$LT$riscv..register..sstatus..SPP$u20$as$u20$core..fmt..Debug$GT$3fmt17h967fa33b3e4cc614E>:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8020589a: 39 71        	addi	sp, sp, -0x40
8020589c: 06 fc        	sd	ra, 0x38(sp)
8020589e: 22 f8        	sd	s0, 0x30(sp)
802058a0: 80 00        	addi	s0, sp, 0x40
802058a2: 23 34 b4 fc  	sd	a1, -0x38(s0)
802058a6: 23 30 a4 fe  	sd	a0, -0x20(s0)
802058aa: 23 34 b4 fe  	sd	a1, -0x18(s0)
802058ae: 03 45 05 00  	lbu	a0, 0x0(a0)
802058b2: 05 89        	andi	a0, a0, 0x1
802058b4: 01 cd        	beqz	a0, 0x802058cc <.Lpcrel_hi3>
802058b6: 09 a0        	j	0x802058b8 <.Lpcrel_hi2>

00000000802058b8 <.Lpcrel_hi2>:
802058b8: 17 f5 02 00  	auipc	a0, 0x2f
802058bc: 13 05 85 af  	addi	a0, a0, -0x508
802058c0: 23 38 a4 fc  	sd	a0, -0x30(s0)
802058c4: 29 45        	li	a0, 0xa
802058c6: 23 3c a4 fc  	sd	a0, -0x28(s0)
802058ca: 19 a8        	j	0x802058e0 <.Lpcrel_hi3+0x14>

00000000802058cc <.Lpcrel_hi3>:
802058cc: 17 e5 02 00  	auipc	a0, 0x2e
802058d0: 13 05 45 ee  	addi	a0, a0, -0x11c
802058d4: 23 38 a4 fc  	sd	a0, -0x30(s0)
802058d8: 11 45        	li	a0, 0x4
802058da: 23 3c a4 fc  	sd	a0, -0x28(s0)
802058de: 09 a0        	j	0x802058e0 <.Lpcrel_hi3+0x14>
802058e0: 03 35 84 fc  	ld	a0, -0x38(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
802058e4: 83 35 04 fd  	ld	a1, -0x30(s0)
802058e8: 03 36 84 fd  	ld	a2, -0x28(s0)
802058ec: 97 a0 02 00  	auipc	ra, 0x2a
802058f0: e7 80 a0 14  	jalr	0x14a(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
802058f4: e2 70        	ld	ra, 0x38(sp)
802058f6: 42 74        	ld	s0, 0x30(sp)
802058f8: 21 61        	addi	sp, sp, 0x40
802058fa: 82 80        	ret

00000000802058fc <_ZN2os5utils9clear_bss28_$u7b$$u7b$closure$u7d$$u7d$17hc7aebd4c1accb8a9E>:
;         sbss as usize..ebss as usize).for_each(|a|{
802058fc: 39 71        	addi	sp, sp, -0x40
802058fe: 06 fc        	sd	ra, 0x38(sp)
80205900: 22 f8        	sd	s0, 0x30(sp)
80205902: 80 00        	addi	s0, sp, 0x40
80205904: 23 30 b4 fc  	sd	a1, -0x40(s0)
80205908: aa 85        	mv	a1, a0
8020590a: 03 35 04 fc  	ld	a0, -0x40(s0)
8020590e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80205912: 23 3c a4 fc  	sd	a0, -0x28(s0)
80205916: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020591a: 81 45        	li	a1, 0x0
8020591c: 23 34 b4 fc  	sd	a1, -0x38(s0)
80205920: a3 07 b4 fe  	sb	a1, -0x11(s0)
80205924: 85 45        	li	a1, 0x1
;         assert_unsafe_precondition!(
80205926: 97 e0 00 00  	auipc	ra, 0xe
8020592a: e7 80 a0 5a  	jalr	0x5aa(ra) <_ZN4core3ptr14write_volatile18precondition_check17h38850d7be0fa672bE>
8020592e: 83 35 04 fc  	ld	a1, -0x40(s0)
80205932: 03 35 84 fc  	ld	a0, -0x38(s0)
;         intrinsics::volatile_store(dst, src);
80205936: 23 80 a5 00  	sb	a0, 0x0(a1)
8020593a: e2 70        	ld	ra, 0x38(sp)
8020593c: 42 74        	ld	s0, 0x30(sp)
;         }
8020593e: 21 61        	addi	sp, sp, 0x40
80205940: 82 80        	ret

0000000080205942 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he6dc0fd0e59c9446E>:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
80205942: 75 71        	addi	sp, sp, -0x90
80205944: 06 e5        	sd	ra, 0x88(sp)
80205946: 22 e1        	sd	s0, 0x80(sp)
80205948: 00 09        	addi	s0, sp, 0x90
8020594a: 23 38 d4 f6  	sd	a3, -0x90(s0)
8020594e: 23 3c c4 f6  	sd	a2, -0x88(s0)
80205952: 23 30 b4 f8  	sd	a1, -0x80(s0)
80205956: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020595a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020595e: 23 3c b4 fa  	sd	a1, -0x48(s0)
80205962: 23 30 c4 fc  	sd	a2, -0x40(s0)
;         if self.start > slice.len() {
80205966: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020596a: 63 67 a6 04  	bltu	a2, a0, 0x802059b8 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he6dc0fd0e59c9446E+0x76>
8020596e: 09 a0        	j	0x80205970 <_ZN110_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17he6dc0fd0e59c9446E+0x2e>
80205970: 83 36 84 f7  	ld	a3, -0x88(s0)
80205974: 03 36 04 f8  	ld	a2, -0x80(s0)
80205978: 83 35 84 f8  	ld	a1, -0x78(s0)
;         unsafe { &mut *self.get_unchecked_mut(slice) }
8020597c: 23 38 c4 fc  	sd	a2, -0x30(s0)
80205980: 23 3c d4 fc  	sd	a3, -0x28(s0)
;         metadata(self)
80205984: 23 30 c4 fe  	sd	a2, -0x20(s0)
80205988: 23 34 d4 fe  	sd	a3, -0x18(s0)
;     unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8020598c: 23 30 c4 fa  	sd	a2, -0x60(s0)
80205990: 23 34 d4 fa  	sd	a3, -0x58(s0)
80205994: 03 35 84 fa  	ld	a0, -0x58(s0)
;         unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
80205998: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020599c: 23 3c a4 f8  	sd	a0, -0x68(s0)
802059a0: 03 35 04 f9  	ld	a0, -0x70(s0)
802059a4: 83 35 84 f9  	ld	a1, -0x68(s0)
802059a8: 97 a0 01 00  	auipc	ra, 0x1a
802059ac: e7 80 a0 9c  	jalr	-0x636(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hd4b8b1076d4fa802E>
802059b0: aa 60        	ld	ra, 0x88(sp)
802059b2: 0a 64        	ld	s0, 0x80(sp)
;     }
802059b4: 49 61        	addi	sp, sp, 0x90
802059b6: 82 80        	ret
802059b8: 03 36 04 f7  	ld	a2, -0x90(s0)
802059bc: 83 35 84 f7  	ld	a1, -0x88(s0)
802059c0: 03 35 84 f8  	ld	a0, -0x78(s0)
;             slice_start_index_len_fail(self.start, slice.len());
802059c4: 97 c0 02 00  	auipc	ra, 0x2c
802059c8: e7 80 80 c9  	jalr	-0x368(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

00000000802059cc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17haa6710ed2073b946E>:
;     fn next(&mut self) -> Option<A> {
802059cc: 01 11        	addi	sp, sp, -0x20
802059ce: 06 ec        	sd	ra, 0x18(sp)
802059d0: 22 e8        	sd	s0, 0x10(sp)
802059d2: 00 10        	addi	s0, sp, 0x20
802059d4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spec_next()
802059d8: 97 00 00 00  	auipc	ra, 0x0
802059dc: e7 80 60 25  	jalr	0x256(ra) <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h2c99c4271869d85dE>
802059e0: e2 60        	ld	ra, 0x18(sp)
802059e2: 42 64        	ld	s0, 0x10(sp)
;     }
802059e4: 05 61        	addi	sp, sp, 0x20
802059e6: 82 80        	ret

00000000802059e8 <_ZN4core4iter5range116_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$9next_back17hff8f1cf7c618cdfdE>:
;     fn next_back(&mut self) -> Option<A> {
802059e8: 01 11        	addi	sp, sp, -0x20
802059ea: 06 ec        	sd	ra, 0x18(sp)
802059ec: 22 e8        	sd	s0, 0x10(sp)
802059ee: 00 10        	addi	s0, sp, 0x20
802059f0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spec_next_back()
802059f4: 97 00 00 00  	auipc	ra, 0x0
802059f8: e7 80 e0 1c  	jalr	0x1ce(ra) <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h4949f549f5e67ed9E>
802059fc: e2 60        	ld	ra, 0x18(sp)
802059fe: 42 64        	ld	s0, 0x10(sp)
;     }
80205a00: 05 61        	addi	sp, sp, 0x20
80205a02: 82 80        	ret

0000000080205a04 <_ZN4core4iter6traits8iterator8Iterator3rev17hb86d5ba2ade6bebdE>:
;     fn rev(self) -> Rev<Self>
80205a04: 01 11        	addi	sp, sp, -0x20
80205a06: 06 ec        	sd	ra, 0x18(sp)
80205a08: 22 e8        	sd	s0, 0x10(sp)
80205a0a: 00 10        	addi	s0, sp, 0x20
80205a0c: 23 24 a4 fe  	sw	a0, -0x18(s0)
80205a10: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         Rev { iter }
80205a14: 23 20 a4 fe  	sw	a0, -0x20(s0)
80205a18: 23 22 b4 fe  	sw	a1, -0x1c(s0)
;     }
80205a1c: 03 25 04 fe  	lw	a0, -0x20(s0)
80205a20: 83 25 44 fe  	lw	a1, -0x1c(s0)
80205a24: e2 60        	ld	ra, 0x18(sp)
80205a26: 42 64        	ld	s0, 0x10(sp)
80205a28: 05 61        	addi	sp, sp, 0x20
80205a2a: 82 80        	ret

0000000080205a2c <_ZN4core4iter6traits8iterator8Iterator4find17h096e970175a134ffE>:
;     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
80205a2c: 5d 71        	addi	sp, sp, -0x50
80205a2e: 86 e4        	sd	ra, 0x48(sp)
80205a30: a2 e0        	sd	s0, 0x40(sp)
80205a32: 80 08        	addi	s0, sp, 0x50
80205a34: 23 3c a4 fc  	sd	a0, -0x28(s0)
80205a38: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             move |(), x| {
80205a3c: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.try_fold((), check(predicate)).break_value()
80205a40: 83 35 04 fd  	ld	a1, -0x30(s0)
80205a44: 97 00 00 00  	auipc	ra, 0x0
80205a48: e7 80 20 0c  	jalr	0xc2(ra) <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE>
80205a4c: 23 30 a4 fc  	sd	a0, -0x40(s0)
80205a50: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match self {
80205a54: 03 35 04 fc  	ld	a0, -0x40(s0)
80205a58: 11 e5        	bnez	a0, 0x80205a64 <_ZN4core4iter6traits8iterator8Iterator4find17h096e970175a134ffE+0x38>
80205a5a: 09 a0        	j	0x80205a5c <_ZN4core4iter6traits8iterator8Iterator4find17h096e970175a134ffE+0x30>
80205a5c: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(..) => None,
80205a5e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80205a62: 19 a8        	j	0x80205a78 <_ZN4core4iter6traits8iterator8Iterator4find17h096e970175a134ffE+0x4c>
;             ControlFlow::Break(x) => Some(x),
80205a64: 03 35 84 fc  	ld	a0, -0x38(s0)
80205a68: 23 34 a4 fe  	sd	a0, -0x18(s0)
80205a6c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80205a70: 05 45        	li	a0, 0x1
80205a72: 23 38 a4 fa  	sd	a0, -0x50(s0)
80205a76: 09 a0        	j	0x80205a78 <_ZN4core4iter6traits8iterator8Iterator4find17h096e970175a134ffE+0x4c>
;     }
80205a78: 03 35 04 fc  	ld	a0, -0x40(s0)
80205a7c: 11 c9        	beqz	a0, 0x80205a90 <_ZN4core4iter6traits8iterator8Iterator4find17h096e970175a134ffE+0x64>
80205a7e: 09 a0        	j	0x80205a80 <_ZN4core4iter6traits8iterator8Iterator4find17h096e970175a134ffE+0x54>
;     }
80205a80: 03 35 04 fb  	ld	a0, -0x50(s0)
80205a84: 83 35 84 fb  	ld	a1, -0x48(s0)
80205a88: a6 60        	ld	ra, 0x48(sp)
80205a8a: 06 64        	ld	s0, 0x40(sp)
80205a8c: 61 61        	addi	sp, sp, 0x50
80205a8e: 82 80        	ret
;     }
80205a90: c5 bf        	j	0x80205a80 <_ZN4core4iter6traits8iterator8Iterator4find17h096e970175a134ffE+0x54>

0000000080205a92 <_ZN4core4iter6traits8iterator8Iterator4fold17he0d845ff8272017fE>:
;     fn fold<B, F>(mut self, init: B, mut f: F) -> B
80205a92: 5d 71        	addi	sp, sp, -0x50
80205a94: 86 e4        	sd	ra, 0x48(sp)
80205a96: a2 e0        	sd	s0, 0x40(sp)
80205a98: 80 08        	addi	s0, sp, 0x50
80205a9a: 23 38 a4 fa  	sd	a0, -0x50(s0)
80205a9e: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         while let Some(x) = self.next() {
80205aa2: 09 a0        	j	0x80205aa4 <_ZN4core4iter6traits8iterator8Iterator4fold17he0d845ff8272017fE+0x12>
80205aa4: 13 05 04 fb  	addi	a0, s0, -0x50
;         while let Some(x) = self.next() {
80205aa8: 97 60 02 00  	auipc	ra, 0x26
80205aac: e7 80 e0 b4  	jalr	-0x4b2(ra) <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h58a3e79438385681E>
80205ab0: 23 34 a4 fc  	sd	a0, -0x38(s0)
80205ab4: 23 38 b4 fc  	sd	a1, -0x30(s0)
80205ab8: 03 35 84 fc  	ld	a0, -0x38(s0)
80205abc: 0d c1        	beqz	a0, 0x80205ade <_ZN4core4iter6traits8iterator8Iterator4fold17he0d845ff8272017fE+0x4c>
80205abe: 09 a0        	j	0x80205ac0 <_ZN4core4iter6traits8iterator8Iterator4fold17he0d845ff8272017fE+0x2e>
80205ac0: 03 35 04 fd  	ld	a0, -0x30(s0)
80205ac4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             accum = f(accum, x);
80205ac8: 23 3c a4 fc  	sd	a0, -0x28(s0)
80205acc: 83 35 84 fd  	ld	a1, -0x28(s0)
80205ad0: 13 05 74 fc  	addi	a0, s0, -0x39
80205ad4: 97 40 01 00  	auipc	ra, 0x14
80205ad8: e7 80 e0 c0  	jalr	-0x3f2(ra) <_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17hcacebc47d6019306E>
;         while let Some(x) = self.next() {
80205adc: e1 b7        	j	0x80205aa4 <_ZN4core4iter6traits8iterator8Iterator4fold17he0d845ff8272017fE+0x12>
80205ade: a6 60        	ld	ra, 0x48(sp)
80205ae0: 06 64        	ld	s0, 0x40(sp)
;     }
80205ae2: 61 61        	addi	sp, sp, 0x50
80205ae4: 82 80        	ret

0000000080205ae6 <_ZN4core4iter6traits8iterator8Iterator8for_each17ha48b4121be45f630E>:
;     fn for_each<F>(self, f: F)
80205ae6: 79 71        	addi	sp, sp, -0x30
80205ae8: 06 f4        	sd	ra, 0x28(sp)
80205aea: 22 f0        	sd	s0, 0x20(sp)
80205aec: 00 18        	addi	s0, sp, 0x30
80205aee: 23 3c a4 fc  	sd	a0, -0x28(s0)
80205af2: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         self.fold((), call(f));
80205af6: 97 00 00 00  	auipc	ra, 0x0
80205afa: e7 80 c0 f9  	jalr	-0x64(ra) <_ZN4core4iter6traits8iterator8Iterator4fold17he0d845ff8272017fE>
80205afe: a2 70        	ld	ra, 0x28(sp)
80205b00: 02 74        	ld	s0, 0x20(sp)
;     }
80205b02: 45 61        	addi	sp, sp, 0x30
80205b04: 82 80        	ret

0000000080205b06 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE>:
;     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
80205b06: 19 71        	addi	sp, sp, -0x80
80205b08: 86 fc        	sd	ra, 0x78(sp)
80205b0a: a2 f8        	sd	s0, 0x70(sp)
80205b0c: 00 01        	addi	s0, sp, 0x80
80205b0e: 23 34 a4 f8  	sd	a0, -0x78(s0)
80205b12: 23 38 b4 f8  	sd	a1, -0x70(s0)
80205b16: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         while let Some(x) = self.next() {
80205b1a: 09 a0        	j	0x80205b1c <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE+0x16>
80205b1c: 03 35 84 f8  	ld	a0, -0x78(s0)
;         while let Some(x) = self.next() {
80205b20: 97 60 02 00  	auipc	ra, 0x26
80205b24: e7 80 60 ad  	jalr	-0x52a(ra) <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h58a3e79438385681E>
80205b28: 23 34 a4 fa  	sd	a0, -0x58(s0)
80205b2c: 23 38 b4 fa  	sd	a1, -0x50(s0)
80205b30: 03 35 84 fa  	ld	a0, -0x58(s0)
80205b34: 05 cd        	beqz	a0, 0x80205b6c <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE+0x66>
80205b36: 09 a0        	j	0x80205b38 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE+0x32>
80205b38: 03 35 04 fb  	ld	a0, -0x50(s0)
80205b3c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             accum = f(accum, x)?;
80205b40: 23 34 a4 fc  	sd	a0, -0x38(s0)
80205b44: 83 35 84 fc  	ld	a1, -0x38(s0)
80205b48: 13 05 04 f9  	addi	a0, s0, -0x70
80205b4c: 97 40 01 00  	auipc	ra, 0x14
80205b50: e7 80 00 af  	jalr	-0x510(ra) <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h65db85e0302784aaE>
80205b54: 97 70 01 00  	auipc	ra, 0x17
80205b58: e7 80 80 ac  	jalr	-0x538(ra) <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h71ca79023a28d592E>
80205b5c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80205b60: 23 30 b4 fc  	sd	a1, -0x40(s0)
80205b64: 03 35 84 fb  	ld	a0, -0x48(s0)
80205b68: 19 c9        	beqz	a0, 0x80205b7e <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE+0x78>
80205b6a: 19 a8        	j	0x80205b80 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE+0x7a>
;         try { accum }
80205b6c: 97 70 01 00  	auipc	ra, 0x17
80205b70: e7 80 20 a9  	jalr	-0x56e(ra) <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$11from_output17he69a2413d9dad009E>
80205b74: 23 3c a4 f8  	sd	a0, -0x68(s0)
80205b78: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
80205b7c: 39 a8        	j	0x80205b9a <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE+0x94>
;         while let Some(x) = self.next() {
80205b7e: 79 bf        	j	0x80205b1c <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE+0x16>
;             accum = f(accum, x)?;
80205b80: 03 35 04 fc  	ld	a0, -0x40(s0)
80205b84: 23 34 a4 fe  	sd	a0, -0x18(s0)
80205b88: 97 60 01 00  	auipc	ra, 0x16
80205b8c: e7 80 e0 f8  	jalr	-0x72(ra) <_ZN104_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h96aa70bb1011c844E>
80205b90: 23 3c a4 f8  	sd	a0, -0x68(s0)
80205b94: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
80205b98: 09 a0        	j	0x80205b9a <_ZN4core4iter6traits8iterator8Iterator8try_fold17h345dce3135fa345aE+0x94>
80205b9a: 03 35 84 f9  	ld	a0, -0x68(s0)
80205b9e: 83 35 04 fa  	ld	a1, -0x60(s0)
80205ba2: e6 70        	ld	ra, 0x78(sp)
80205ba4: 46 74        	ld	s0, 0x70(sp)
80205ba6: 09 61        	addi	sp, sp, 0x80
80205ba8: 82 80        	ret

0000000080205baa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h53d3661ae02b5f2cE>:
;     fn into_iter(self) -> I {
80205baa: 01 11        	addi	sp, sp, -0x20
80205bac: 06 ec        	sd	ra, 0x18(sp)
80205bae: 22 e8        	sd	s0, 0x10(sp)
80205bb0: 00 10        	addi	s0, sp, 0x20
80205bb2: 23 16 a4 fe  	sh	a0, -0x14(s0)
80205bb6: 23 17 b4 fe  	sh	a1, -0x12(s0)
80205bba: e2 60        	ld	ra, 0x18(sp)
80205bbc: 42 64        	ld	s0, 0x10(sp)
;     }
80205bbe: 05 61        	addi	sp, sp, 0x20
80205bc0: 82 80        	ret

0000000080205bc2 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h4949f549f5e67ed9E>:
;     fn spec_next_back(&mut self) -> Option<T> {
80205bc2: 39 71        	addi	sp, sp, -0x40
80205bc4: 06 fc        	sd	ra, 0x38(sp)
80205bc6: 22 f8        	sd	s0, 0x30(sp)
80205bc8: 80 00        	addi	s0, sp, 0x40
80205bca: aa 85        	mv	a1, a0
80205bcc: 23 34 b4 fc  	sd	a1, -0x38(s0)
80205bd0: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         if self.start < self.end {
80205bd4: 13 85 45 00  	addi	a0, a1, 0x4
80205bd8: 23 30 b4 fe  	sd	a1, -0x20(s0)
80205bdc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
80205be0: 88 41        	lw	a0, 0x0(a1)
80205be2: cc 41        	lw	a1, 0x4(a1)
;         if self.start < self.end {
80205be4: 63 47 b5 00  	blt	a0, a1, 0x80205bf2 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h4949f549f5e67ed9E+0x30>
80205be8: 09 a0        	j	0x80205bea <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h4949f549f5e67ed9E+0x28>
80205bea: 01 45        	li	a0, 0x0
;             None
80205bec: 23 28 a4 fc  	sw	a0, -0x30(s0)
;         if self.start < self.end {
80205bf0: 3d a0        	j	0x80205c1e <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h4949f549f5e67ed9E+0x5c>
80205bf2: 03 35 84 fc  	ld	a0, -0x38(s0)
;             self.end = unsafe { Step::backward_unchecked(self.end, 1) };
80205bf6: 48 41        	lw	a0, 0x4(a0)
80205bf8: 85 45        	li	a1, 0x1
80205bfa: 23 30 b4 fc  	sd	a1, -0x40(s0)
80205bfe: 97 00 01 00  	auipc	ra, 0x10
80205c02: e7 80 80 88  	jalr	-0x778(ra) <_ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h8f0c77d113b5cf04E>
80205c06: 83 35 84 fc  	ld	a1, -0x38(s0)
80205c0a: 2a 86        	mv	a2, a0
80205c0c: 03 35 04 fc  	ld	a0, -0x40(s0)
80205c10: d0 c1        	sw	a2, 0x4(a1)
;             Some(self.end)
80205c12: cc 41        	lw	a1, 0x4(a1)
80205c14: 23 2a b4 fc  	sw	a1, -0x2c(s0)
80205c18: 23 28 a4 fc  	sw	a0, -0x30(s0)
;         if self.start < self.end {
80205c1c: 09 a0        	j	0x80205c1e <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h4949f549f5e67ed9E+0x5c>
;     }
80205c1e: 03 25 04 fd  	lw	a0, -0x30(s0)
80205c22: 83 25 44 fd  	lw	a1, -0x2c(s0)
80205c26: e2 70        	ld	ra, 0x38(sp)
80205c28: 42 74        	ld	s0, 0x30(sp)
80205c2a: 21 61        	addi	sp, sp, 0x40
80205c2c: 82 80        	ret

0000000080205c2e <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h2c99c4271869d85dE>:
;     fn spec_next(&mut self) -> Option<T> {
80205c2e: 5d 71        	addi	sp, sp, -0x50
80205c30: 86 e4        	sd	ra, 0x48(sp)
80205c32: a2 e0        	sd	s0, 0x40(sp)
80205c34: 80 08        	addi	s0, sp, 0x50
80205c36: aa 85        	mv	a1, a0
80205c38: 23 30 b4 fc  	sd	a1, -0x40(s0)
80205c3c: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         if self.start < self.end {
80205c40: 13 85 25 00  	addi	a0, a1, 0x2
80205c44: 23 30 b4 fe  	sd	a1, -0x20(s0)
80205c48: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
80205c4c: 03 d5 05 00  	lhu	a0, 0x0(a1)
80205c50: 83 d5 25 00  	lhu	a1, 0x2(a1)
;         if self.start < self.end {
80205c54: 63 67 b5 00  	bltu	a0, a1, 0x80205c62 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h2c99c4271869d85dE+0x34>
80205c58: 09 a0        	j	0x80205c5a <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h2c99c4271869d85dE+0x2c>
80205c5a: 01 45        	li	a0, 0x0
;             None
80205c5c: 23 16 a4 fc  	sh	a0, -0x34(s0)
;         if self.start < self.end {
80205c60: 35 a8        	j	0x80205c9c <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h2c99c4271869d85dE+0x6e>
80205c62: 03 35 04 fc  	ld	a0, -0x40(s0)
;             let old = self.start;
80205c66: 03 15 05 00  	lh	a0, 0x0(a0)
80205c6a: 23 38 a4 fa  	sd	a0, -0x50(s0)
80205c6e: 23 1f a4 fc  	sh	a0, -0x22(s0)
80205c72: 85 45        	li	a1, 0x1
80205c74: 23 3c b4 fa  	sd	a1, -0x48(s0)
;             self.start = unsafe { Step::forward_unchecked(old, 1) };
80205c78: 97 00 01 00  	auipc	ra, 0x10
80205c7c: e7 80 e0 89  	jalr	-0x762(ra) <_ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h71a404a0db083afaE>
80205c80: 83 36 04 fc  	ld	a3, -0x40(s0)
80205c84: 83 35 04 fb  	ld	a1, -0x50(s0)
80205c88: 2a 86        	mv	a2, a0
80205c8a: 03 35 84 fb  	ld	a0, -0x48(s0)
80205c8e: 23 90 c6 00  	sh	a2, 0x0(a3)
;             Some(old)
80205c92: 23 17 b4 fc  	sh	a1, -0x32(s0)
80205c96: 23 16 a4 fc  	sh	a0, -0x34(s0)
;         if self.start < self.end {
80205c9a: 09 a0        	j	0x80205c9c <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h2c99c4271869d85dE+0x6e>
;     }
80205c9c: 03 15 c4 fc  	lh	a0, -0x34(s0)
80205ca0: 83 15 e4 fc  	lh	a1, -0x32(s0)
80205ca4: a6 60        	ld	ra, 0x48(sp)
80205ca6: 06 64        	ld	s0, 0x40(sp)
80205ca8: 61 61        	addi	sp, sp, 0x50
80205caa: 82 80        	ret

0000000080205cac <_ZN14virtio_drivers3hal12DMA$LT$H$GT$3new17h6c47ec514b51f57dE>:
;     pub fn new(pages: usize) -> Result<Self> {
80205cac: 5d 71        	addi	sp, sp, -0x50
80205cae: 86 e4        	sd	ra, 0x48(sp)
80205cb0: a2 e0        	sd	s0, 0x40(sp)
80205cb2: 80 08        	addi	s0, sp, 0x50
80205cb4: 23 38 b4 fa  	sd	a1, -0x50(s0)
80205cb8: aa 85        	mv	a1, a0
80205cba: 03 35 04 fb  	ld	a0, -0x50(s0)
80205cbe: 23 3c b4 fa  	sd	a1, -0x48(s0)
80205cc2: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let paddr = H::dma_alloc(pages);
80205cc6: 97 e0 00 00  	auipc	ra, 0xe
80205cca: e7 80 20 64  	jalr	0x642(ra) <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$9dma_alloc17h3aa675f7f8c7bd22E>
80205cce: aa 85        	mv	a1, a0
80205cd0: 23 30 b4 fc  	sd	a1, -0x40(s0)
80205cd4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if paddr == 0 {
80205cd8: 19 ed        	bnez	a0, 0x80205cf6 <_ZN14virtio_drivers3hal12DMA$LT$H$GT$3new17h6c47ec514b51f57dE+0x4a>
80205cda: 09 a0        	j	0x80205cdc <_ZN14virtio_drivers3hal12DMA$LT$H$GT$3new17h6c47ec514b51f57dE+0x30>
80205cdc: 83 35 84 fb  	ld	a1, -0x48(s0)
80205ce0: 11 45        	li	a0, 0x4
;             return Err(Error::DmaError);
80205ce2: a3 07 a4 fc  	sb	a0, -0x31(s0)
80205ce6: 03 45 f4 fc  	lbu	a0, -0x31(s0)
80205cea: a3 80 a5 00  	sb	a0, 0x1(a1)
80205cee: 05 45        	li	a0, 0x1
80205cf0: 23 80 a5 00  	sb	a0, 0x0(a1)
;     }
80205cf4: 0d a8        	j	0x80205d26 <_ZN14virtio_drivers3hal12DMA$LT$H$GT$3new17h6c47ec514b51f57dE+0x7a>
;             _phantom: PhantomData::default(),
80205cf6: 97 40 01 00  	auipc	ra, 0x14
80205cfa: e7 80 60 93  	jalr	-0x6ca(ra) <_ZN77_$LT$core..marker..PhantomData$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hbd7baa101f2d030bE>
80205cfe: 03 36 04 fc  	ld	a2, -0x40(s0)
80205d02: 03 35 04 fb  	ld	a0, -0x50(s0)
80205d06: 83 35 84 fb  	ld	a1, -0x48(s0)
;         Ok(DMA {
80205d0a: 23 38 c4 fc  	sd	a2, -0x30(s0)
80205d0e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80205d12: 03 36 04 fd  	ld	a2, -0x30(s0)
80205d16: 03 35 84 fd  	ld	a0, -0x28(s0)
80205d1a: 90 e5        	sd	a2, 0x8(a1)
80205d1c: 88 e9        	sd	a0, 0x10(a1)
80205d1e: 01 45        	li	a0, 0x0
80205d20: 23 80 a5 00  	sb	a0, 0x0(a1)
;     }
80205d24: 09 a0        	j	0x80205d26 <_ZN14virtio_drivers3hal12DMA$LT$H$GT$3new17h6c47ec514b51f57dE+0x7a>
80205d26: a6 60        	ld	ra, 0x48(sp)
80205d28: 06 64        	ld	s0, 0x40(sp)
;     }
80205d2a: 61 61        	addi	sp, sp, 0x50
80205d2c: 82 80        	ret

0000000080205d2e <_ZN14virtio_drivers3hal12DMA$LT$H$GT$3pfn17h3acb576f531d64abE>:
;     pub fn pfn(&self) -> u32 {
80205d2e: 01 11        	addi	sp, sp, -0x20
80205d30: 06 ec        	sd	ra, 0x18(sp)
80205d32: 22 e8        	sd	s0, 0x10(sp)
80205d34: 00 10        	addi	s0, sp, 0x20
80205d36: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         (self.paddr >> 12) as u32
80205d3a: 08 61        	ld	a0, 0x0(a0)
80205d3c: 31 81        	srli	a0, a0, 0xc
80205d3e: e2 60        	ld	ra, 0x18(sp)
80205d40: 42 64        	ld	s0, 0x10(sp)
;     }
80205d42: 05 61        	addi	sp, sp, 0x20
80205d44: 82 80        	ret

0000000080205d46 <_ZN14virtio_drivers3hal12DMA$LT$H$GT$5vaddr17h79747bc0699ab6feE>:
;     pub fn vaddr(&self) -> usize {
80205d46: 01 11        	addi	sp, sp, -0x20
80205d48: 06 ec        	sd	ra, 0x18(sp)
80205d4a: 22 e8        	sd	s0, 0x10(sp)
80205d4c: 00 10        	addi	s0, sp, 0x20
80205d4e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         H::phys_to_virt(self.paddr)
80205d52: 08 61        	ld	a0, 0x0(a0)
80205d54: 97 e0 00 00  	auipc	ra, 0xe
80205d58: e7 80 40 77  	jalr	0x774(ra) <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$12phys_to_virt17h62299b7cc2b7ac1cE>
80205d5c: e2 60        	ld	ra, 0x18(sp)
80205d5e: 42 64        	ld	s0, 0x10(sp)
;     }
80205d60: 05 61        	addi	sp, sp, 0x20
80205d62: 82 80        	ret

0000000080205d64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h1e08dcd30f82a1ccE>:
;     pub fn iter(&self) -> Iter<'_, T> {
80205d64: 59 71        	addi	sp, sp, -0x70
80205d66: 86 f4        	sd	ra, 0x68(sp)
80205d68: a2 f0        	sd	s0, 0x60(sp)
80205d6a: 80 18        	addi	s0, sp, 0x70
80205d6c: 23 38 b4 f8  	sd	a1, -0x70(s0)
80205d70: 23 3c a4 f8  	sd	a0, -0x68(s0)
80205d74: 23 38 a4 fc  	sd	a0, -0x30(s0)
80205d78: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
80205d7c: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
80205d80: 23 3c a4 fa  	sd	a0, -0x48(s0)
80205d84: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80205d88: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80205d8c: 09 a0        	j	0x80205d8e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h1e08dcd30f82a1ccE+0x2a>
80205d8e: 03 35 84 f9  	ld	a0, -0x68(s0)
80205d92: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
80205d96: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
80205d9a: 92 05        	slli	a1, a1, 0x4
80205d9c: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80205d9e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80205da2: 09 a0        	j	0x80205da4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h1e08dcd30f82a1ccE+0x40>
;             Self { ptr, end_or_len, _marker: PhantomData }
80205da4: 03 35 84 fc  	ld	a0, -0x38(s0)
80205da8: 83 35 04 fb  	ld	a1, -0x50(s0)
80205dac: 23 30 b4 fa  	sd	a1, -0x60(s0)
80205db0: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
80205db4: 03 35 04 fa  	ld	a0, -0x60(s0)
80205db8: 83 35 84 fa  	ld	a1, -0x58(s0)
80205dbc: a6 70        	ld	ra, 0x68(sp)
80205dbe: 06 74        	ld	s0, 0x60(sp)
80205dc0: 65 61        	addi	sp, sp, 0x70
80205dc2: 82 80        	ret

0000000080205dc4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h861122a063915004E>:
;     pub fn iter(&self) -> Iter<'_, T> {
80205dc4: 59 71        	addi	sp, sp, -0x70
80205dc6: 86 f4        	sd	ra, 0x68(sp)
80205dc8: a2 f0        	sd	s0, 0x60(sp)
80205dca: 80 18        	addi	s0, sp, 0x70
80205dcc: 23 38 b4 f8  	sd	a1, -0x70(s0)
80205dd0: 23 3c a4 f8  	sd	a0, -0x68(s0)
80205dd4: 23 38 a4 fc  	sd	a0, -0x30(s0)
80205dd8: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
80205ddc: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
80205de0: 23 3c a4 fa  	sd	a0, -0x48(s0)
80205de4: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80205de8: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80205dec: 09 a0        	j	0x80205dee <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h861122a063915004E+0x2a>
80205dee: 03 35 84 f9  	ld	a0, -0x68(s0)
80205df2: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
80205df6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
80205dfa: 92 05        	slli	a1, a1, 0x4
80205dfc: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80205dfe: 23 34 a4 fc  	sd	a0, -0x38(s0)
80205e02: 09 a0        	j	0x80205e04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h861122a063915004E+0x40>
;             Self { ptr, end_or_len, _marker: PhantomData }
80205e04: 03 35 84 fc  	ld	a0, -0x38(s0)
80205e08: 83 35 04 fb  	ld	a1, -0x50(s0)
80205e0c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80205e10: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
80205e14: 03 35 04 fa  	ld	a0, -0x60(s0)
80205e18: 83 35 84 fa  	ld	a1, -0x58(s0)
80205e1c: a6 70        	ld	ra, 0x68(sp)
80205e1e: 06 74        	ld	s0, 0x60(sp)
80205e20: 65 61        	addi	sp, sp, 0x70
80205e22: 82 80        	ret

0000000080205e24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9031ef9caebde82E>:
;     pub fn iter(&self) -> Iter<'_, T> {
80205e24: 59 71        	addi	sp, sp, -0x70
80205e26: 86 f4        	sd	ra, 0x68(sp)
80205e28: a2 f0        	sd	s0, 0x60(sp)
80205e2a: 80 18        	addi	s0, sp, 0x70
80205e2c: 23 38 b4 f8  	sd	a1, -0x70(s0)
80205e30: 23 3c a4 f8  	sd	a0, -0x68(s0)
80205e34: 23 38 a4 fc  	sd	a0, -0x30(s0)
80205e38: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
80205e3c: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
80205e40: 23 3c a4 fa  	sd	a0, -0x48(s0)
80205e44: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80205e48: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80205e4c: 09 a0        	j	0x80205e4e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9031ef9caebde82E+0x2a>
80205e4e: 03 35 84 f9  	ld	a0, -0x68(s0)
80205e52: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
80205e56: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
80205e5a: 8e 05        	slli	a1, a1, 0x3
80205e5c: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80205e5e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80205e62: 09 a0        	j	0x80205e64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9031ef9caebde82E+0x40>
;             Self { ptr, end_or_len, _marker: PhantomData }
80205e64: 03 35 84 fc  	ld	a0, -0x38(s0)
80205e68: 83 35 04 fb  	ld	a1, -0x50(s0)
80205e6c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80205e70: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
80205e74: 03 35 04 fa  	ld	a0, -0x60(s0)
80205e78: 83 35 84 fa  	ld	a1, -0x58(s0)
80205e7c: a6 70        	ld	ra, 0x68(sp)
80205e7e: 06 74        	ld	s0, 0x60(sp)
80205e80: 65 61        	addi	sp, sp, 0x70
80205e82: 82 80        	ret

0000000080205e84 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h5d6ff08845b45ae8E>:
;     pub const fn is_empty(&self) -> bool {
80205e84: 01 11        	addi	sp, sp, -0x20
80205e86: 06 ec        	sd	ra, 0x18(sp)
80205e88: 22 e8        	sd	s0, 0x10(sp)
80205e8a: 00 10        	addi	s0, sp, 0x20
80205e8c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80205e90: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.len() == 0
80205e94: 13 b5 15 00  	seqz	a0, a1
80205e98: e2 60        	ld	ra, 0x18(sp)
80205e9a: 42 64        	ld	s0, 0x10(sp)
;     }
80205e9c: 05 61        	addi	sp, sp, 0x20
80205e9e: 82 80        	ret

0000000080205ea0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8is_empty17h843f55b0b909f25cE>:
;     pub const fn is_empty(&self) -> bool {
80205ea0: 01 11        	addi	sp, sp, -0x20
80205ea2: 06 ec        	sd	ra, 0x18(sp)
80205ea4: 22 e8        	sd	s0, 0x10(sp)
80205ea6: 00 10        	addi	s0, sp, 0x20
80205ea8: 23 30 a4 fe  	sd	a0, -0x20(s0)
80205eac: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.len() == 0
80205eb0: 13 b5 15 00  	seqz	a0, a1
80205eb4: e2 60        	ld	ra, 0x18(sp)
80205eb6: 42 64        	ld	s0, 0x10(sp)
;     }
80205eb8: 05 61        	addi	sp, sp, 0x20
80205eba: 82 80        	ret

0000000080205ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h417a7ddc24293c7bE>:
;     pub fn iter_mut(&mut self) -> IterMut<'_, T> {
80205ebc: 59 71        	addi	sp, sp, -0x70
80205ebe: 86 f4        	sd	ra, 0x68(sp)
80205ec0: a2 f0        	sd	s0, 0x60(sp)
80205ec2: 80 18        	addi	s0, sp, 0x70
80205ec4: 23 38 b4 f8  	sd	a1, -0x70(s0)
80205ec8: 23 3c a4 f8  	sd	a0, -0x68(s0)
80205ecc: 23 38 a4 fc  	sd	a0, -0x30(s0)
80205ed0: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
80205ed4: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
80205ed8: 23 3c a4 fa  	sd	a0, -0x48(s0)
80205edc: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80205ee0: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
80205ee4: 09 a0        	j	0x80205ee6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h417a7ddc24293c7bE+0x2a>
80205ee6: 03 35 84 f9  	ld	a0, -0x68(s0)
80205eea: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
80205eee: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
80205ef2: 92 05        	slli	a1, a1, 0x4
80205ef4: 2e 95        	add	a0, a0, a1
80205ef6: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                 if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
80205efa: 09 a0        	j	0x80205efc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h417a7ddc24293c7bE+0x40>
;             Self { ptr, end_or_len, _marker: PhantomData }
80205efc: 03 35 84 fc  	ld	a0, -0x38(s0)
80205f00: 83 35 04 fb  	ld	a1, -0x50(s0)
80205f04: 23 30 b4 fa  	sd	a1, -0x60(s0)
80205f08: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
80205f0c: 03 35 04 fa  	ld	a0, -0x60(s0)
80205f10: 83 35 84 fa  	ld	a1, -0x58(s0)
80205f14: a6 70        	ld	ra, 0x68(sp)
80205f16: 06 74        	ld	s0, 0x60(sp)
80205f18: 65 61        	addi	sp, sp, 0x70
80205f1a: 82 80        	ret

0000000080205f1c <_ZN2os3cow14copy_pagetable17h56395cf9a056f879E>:
; pub fn copy_pagetable(pgtbl_new: &mut PageTable, pgtbl_old: &mut PageTable) {
80205f1c: 4d 71        	addi	sp, sp, -0x150
80205f1e: 86 e6        	sd	ra, 0x148(sp)
80205f20: a2 e2        	sd	s0, 0x140(sp)
80205f22: 80 0a        	addi	s0, sp, 0x150
80205f24: 23 3c b4 ec  	sd	a1, -0x128(s0)
80205f28: 23 38 a4 ec  	sd	a0, -0x130(s0)
80205f2c: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80205f30: 23 30 b4 f6  	sd	a1, -0xa0(s0)

0000000080205f34 <.Lpcrel_hi0>:
;     let new_root = FRAME_ALLOC.page_alloc();
80205f34: 17 85 03 00  	auipc	a0, 0x38
80205f38: 13 05 c5 0c  	addi	a0, a0, 0xcc
80205f3c: 97 e0 ff ff  	auipc	ra, 0xffffe
80205f40: e7 80 a0 f7  	jalr	-0x86(ra) <ekernel+0xffcb6eb6>
80205f44: aa 85        	mv	a1, a0
80205f46: 03 35 04 ed  	ld	a0, -0x130(s0)
80205f4a: 23 34 b4 f6  	sd	a1, -0x98(s0)
;     pgtbl_new.root = new_root.pages;
80205f4e: 0c f9        	sd	a1, 0x30(a0)
;     pgtbl_new.save_page(new_root);
80205f50: 97 60 00 00  	auipc	ra, 0x6
80205f54: e7 80 40 53  	jalr	0x534(ra) <_ZN2os2vm9PageTable9save_page17h1a9d9d87053129a1E>
80205f58: 13 05 04 ee  	addi	a0, s0, -0x120
;     let mut v: Vec<usize> = Vec::new();
80205f5c: 97 e0 00 00  	auipc	ra, 0xe
80205f60: e7 80 60 7a  	jalr	0x7a6(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h9761f4c138b1b01fE>
80205f64: 83 35 84 ed  	ld	a1, -0x128(s0)
;     for i in pgtbl_old.data.iter() {
80205f68: 13 85 85 01  	addi	a0, a1, 0x18
80205f6c: 97 f0 00 00  	auipc	ra, 0xf
80205f70: e7 80 c0 0b  	jalr	0xbc(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf4f75d0324e5c103E>
80205f74: 97 00 00 00  	auipc	ra, 0x0
80205f78: e7 80 00 eb  	jalr	-0x150(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9031ef9caebde82E>
80205f7c: 97 60 00 00  	auipc	ra, 0x6
80205f80: e7 80 80 9b  	jalr	-0x648(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h8cdf9b2c1f91f96bE>
80205f84: 23 3c a4 ee  	sd	a0, -0x108(s0)
80205f88: 23 30 b4 f0  	sd	a1, -0x100(s0)
80205f8c: 09 a0        	j	0x80205f8e <.Lpcrel_hi0+0x5a>
80205f8e: 13 05 84 ef  	addi	a0, s0, -0x108
;     for i in pgtbl_old.data.iter() {
80205f92: 97 60 02 00  	auipc	ra, 0x26
80205f96: e7 80 80 a9  	jalr	-0x568(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E>
80205f9a: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80205f9e: 03 35 84 f0  	ld	a0, -0xf8(s0)
80205fa2: 0d e5        	bnez	a0, 0x80205fcc <.Lpcrel_hi0+0x98>
80205fa4: 09 a0        	j	0x80205fa6 <.Lpcrel_hi0+0x72>
80205fa6: 13 05 04 ee  	addi	a0, s0, -0x120
;     for va in v.iter() {
80205faa: 97 f0 00 00  	auipc	ra, 0xf
80205fae: e7 80 e0 07  	jalr	0x7e(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf4f75d0324e5c103E>
80205fb2: 97 00 00 00  	auipc	ra, 0x0
80205fb6: e7 80 20 e7  	jalr	-0x18e(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9031ef9caebde82E>
80205fba: 97 60 00 00  	auipc	ra, 0x6
80205fbe: e7 80 a0 97  	jalr	-0x686(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h8cdf9b2c1f91f96bE>
80205fc2: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80205fc6: 23 3c b4 f0  	sd	a1, -0xe8(s0)
80205fca: 39 a8        	j	0x80205fe8 <.Lpcrel_hi0+0xb4>
;     for i in pgtbl_old.data.iter() {
80205fcc: 03 35 84 f0  	ld	a0, -0xf8(s0)
80205fd0: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         let data_va = *i;
80205fd4: 0c 61        	ld	a1, 0x0(a0)
80205fd6: 23 30 b4 fa  	sd	a1, -0x60(s0)
80205fda: 13 05 04 ee  	addi	a0, s0, -0x120
;         v.push(data_va);
80205fde: 97 f0 00 00  	auipc	ra, 0xf
80205fe2: e7 80 40 cd  	jalr	-0x32c(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE>
80205fe6: 65 b7        	j	0x80205f8e <.Lpcrel_hi0+0x5a>
80205fe8: 13 05 04 f1  	addi	a0, s0, -0xf0
;     for va in v.iter() {
80205fec: 97 60 02 00  	auipc	ra, 0x26
80205ff0: e7 80 e0 a3  	jalr	-0x5c2(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E>
80205ff4: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80205ff8: 03 35 04 f2  	ld	a0, -0xe0(s0)
80205ffc: 0d e5        	bnez	a0, 0x80206026 <.Lpcrel_hi0+0xf2>
80205ffe: 09 a0        	j	0x80206000 <.Lpcrel_hi0+0xcc>
80206000: 13 05 04 ee  	addi	a0, s0, -0x120
;     for i in v.iter() {
80206004: 97 f0 00 00  	auipc	ra, 0xf
80206008: e7 80 40 02  	jalr	0x24(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf4f75d0324e5c103E>
8020600c: 97 00 00 00  	auipc	ra, 0x0
80206010: e7 80 80 e1  	jalr	-0x1e8(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb9031ef9caebde82E>
80206014: 97 60 00 00  	auipc	ra, 0x6
80206018: e7 80 00 92  	jalr	-0x6e0(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h8cdf9b2c1f91f96bE>
8020601c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80206020: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80206024: ad a8        	j	0x8020609e <.Lpcrel_hi2+0x12>
80206026: 03 35 84 ed  	ld	a0, -0x128(s0)
;     for va in v.iter() {
8020602a: 83 35 04 f2  	ld	a1, -0xe0(s0)
8020602e: 23 34 b4 f8  	sd	a1, -0x78(s0)
;         let data_pa = pgtbl_old.walk_addr(*va).unwrap();
80206032: 8c 61        	ld	a1, 0x0(a1)
80206034: 97 70 00 00  	auipc	ra, 0x7
80206038: e7 80 e0 c6  	jalr	-0x392(ra) <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>
8020603c: 23 34 a4 fa  	sd	a0, -0x58(s0)
80206040: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         match self {
80206044: 03 35 84 fa  	ld	a0, -0x58(s0)
80206048: 11 e9        	bnez	a0, 0x8020605c <.Lpcrel_hi1+0x10>
8020604a: 09 a0        	j	0x8020604c <.Lpcrel_hi1>

000000008020604c <.Lpcrel_hi1>:
;             None => unwrap_failed(),
8020604c: 17 e5 02 00  	auipc	a0, 0x2e
80206050: 13 05 c5 3d  	addi	a0, a0, 0x3dc
80206054: 97 b0 02 00  	auipc	ra, 0x2b
80206058: e7 80 40 c7  	jalr	-0x38c(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
8020605c: 03 35 04 ed  	ld	a0, -0x130(s0)
;             Some(val) => val,
80206060: 83 35 04 fb  	ld	a1, -0x50(s0)
80206064: 23 34 b4 ec  	sd	a1, -0x138(s0)
80206068: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         let data_pa = pgtbl_old.walk_addr(*va).unwrap();
8020606c: 23 38 b4 f8  	sd	a1, -0x70(s0)
;             pages: PhyPageNum(data_pa),
80206070: 23 38 b4 f2  	sd	a1, -0xd0(s0)
;         pgtbl_new.pagetable.push(AllocerGuard {
80206074: 83 35 04 f3  	ld	a1, -0xd0(s0)
80206078: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8020607c: 83 35 84 f2  	ld	a1, -0xd8(s0)
80206080: 97 f0 00 00  	auipc	ra, 0xf
80206084: e7 80 e0 ba  	jalr	-0x452(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E>
80206088: 83 35 84 ec  	ld	a1, -0x138(s0)

000000008020608c <.Lpcrel_hi2>:
;         PAGE_COUNTS.addcount(data_pa);
8020608c: 17 85 03 00  	auipc	a0, 0x38
80206090: 13 05 45 fb  	addi	a0, a0, -0x4c
80206094: 97 d0 ff ff  	auipc	ra, 0xffffd
80206098: e7 80 40 5f  	jalr	0x5f4(ra) <ekernel+0xffcb6688>
8020609c: b1 b7        	j	0x80205fe8 <.Lpcrel_hi0+0xb4>
8020609e: 13 05 84 f3  	addi	a0, s0, -0xc8
;     for i in v.iter() {
802060a2: 97 60 02 00  	auipc	ra, 0x26
802060a6: e7 80 80 98  	jalr	-0x678(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E>
802060aa: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802060ae: 03 35 84 f4  	ld	a0, -0xb8(s0)
802060b2: 01 ed        	bnez	a0, 0x802060ca <.Lpcrel_hi2+0x3e>
802060b4: 09 a0        	j	0x802060b6 <.Lpcrel_hi2+0x2a>
802060b6: 13 05 04 ee  	addi	a0, s0, -0x120
; }
802060ba: 97 20 00 00  	auipc	ra, 0x2
802060be: e7 80 c0 dd  	jalr	-0x224(ra) <_ZN4core3ptr49drop_in_place$LT$alloc..vec..Vec$LT$usize$GT$$GT$17he14401ebb716fc74E>
802060c2: b6 60        	ld	ra, 0x148(sp)
802060c4: 16 64        	ld	s0, 0x140(sp)
802060c6: 71 61        	addi	sp, sp, 0x150
802060c8: 82 80        	ret
802060ca: 03 35 84 ed  	ld	a0, -0x128(s0)
;     for i in v.iter() {
802060ce: 83 35 84 f4  	ld	a1, -0xb8(s0)
802060d2: 23 38 b4 f6  	sd	a1, -0x90(s0)
;         let va = *i;
802060d6: 8c 61        	ld	a1, 0x0(a1)
802060d8: 23 30 b4 ec  	sd	a1, -0x140(s0)
802060dc: 23 3c b4 f6  	sd	a1, -0x88(s0)
;         let pa = pgtbl_old.walk_addr(va).unwrap();
802060e0: 97 70 00 00  	auipc	ra, 0x7
802060e4: e7 80 20 bc  	jalr	-0x43e(ra) <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>
802060e8: 23 3c a4 fc  	sd	a0, -0x28(s0)
802060ec: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
802060f0: 03 35 84 fd  	ld	a0, -0x28(s0)
802060f4: 11 e9        	bnez	a0, 0x80206108 <.Lpcrel_hi3+0x10>
802060f6: 09 a0        	j	0x802060f8 <.Lpcrel_hi3>

00000000802060f8 <.Lpcrel_hi3>:
;             None => unwrap_failed(),
802060f8: 17 e5 02 00  	auipc	a0, 0x2e
802060fc: 13 05 05 2d  	addi	a0, a0, 0x2d0
80206100: 97 b0 02 00  	auipc	ra, 0x2b
80206104: e7 80 80 bc  	jalr	-0x438(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
80206108: 83 35 04 ec  	ld	a1, -0x140(s0)
8020610c: 03 35 84 ed  	ld	a0, -0x128(s0)
;             Some(val) => val,
80206110: 03 36 04 fe  	ld	a2, -0x20(s0)
80206114: 23 3c c4 ea  	sd	a2, -0x148(s0)
80206118: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         let pa = pgtbl_old.walk_addr(va).unwrap();
8020611c: 23 30 c4 f8  	sd	a2, -0x80(s0)
;         let mut flag = pgtbl_old.walk_perm(va).unwrap();
80206120: 97 70 00 00  	auipc	ra, 0x7
80206124: e7 80 20 c9  	jalr	-0x36e(ra) <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE>
80206128: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020612c: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match self {
80206130: 03 35 04 fc  	ld	a0, -0x40(s0)
80206134: 11 e9        	bnez	a0, 0x80206148 <.Lpcrel_hi4+0x10>
80206136: 09 a0        	j	0x80206138 <.Lpcrel_hi4>

0000000080206138 <.Lpcrel_hi4>:
;             None => unwrap_failed(),
80206138: 17 e5 02 00  	auipc	a0, 0x2e
8020613c: 13 05 85 2a  	addi	a0, a0, 0x2a8
80206140: 97 b0 02 00  	auipc	ra, 0x2b
80206144: e7 80 80 b8  	jalr	-0x478(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
80206148: 03 35 04 ec  	ld	a0, -0x140(s0)
;             Some(val) => val,
8020614c: 83 35 84 fc  	ld	a1, -0x38(s0)
80206150: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         let mut flag = pgtbl_old.walk_perm(va).unwrap();
80206154: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;         flag = flag & (!PTE_W);
80206158: 83 35 04 f5  	ld	a1, -0xb0(s0)
8020615c: ed 99        	andi	a1, a1, -0x5
8020615e: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;         flag = flag & (!PTE_R);
80206162: 83 35 04 f5  	ld	a1, -0xb0(s0)
80206166: f5 99        	andi	a1, a1, -0x3
80206168: 23 38 b4 f4  	sd	a1, -0xb0(s0)

000000008020616c <.Lpcrel_hi5>:
;         pgtbl_new.mappages(va.into(), pa.into(), PGSZ, flag);
8020616c: 97 e5 02 00  	auipc	a1, 0x2e
80206170: 93 85 c5 28  	addi	a1, a1, 0x28c
80206174: 97 60 00 00  	auipc	ra, 0x6
80206178: e7 80 20 d8  	jalr	-0x27e(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha90e1b523d38a347E>
8020617c: aa 85        	mv	a1, a0
8020617e: 03 35 84 eb  	ld	a0, -0x148(s0)
80206182: 23 38 b4 ea  	sd	a1, -0x150(s0)

0000000080206186 <.Lpcrel_hi6>:
80206186: 97 e5 02 00  	auipc	a1, 0x2e
8020618a: 93 85 a5 28  	addi	a1, a1, 0x28a
8020618e: 97 60 00 00  	auipc	ra, 0x6
80206192: e7 80 c0 d4  	jalr	-0x2b4(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>
80206196: 83 35 04 eb  	ld	a1, -0x150(s0)
8020619a: 2a 86        	mv	a2, a0
8020619c: 03 35 04 ed  	ld	a0, -0x130(s0)
802061a0: 03 37 04 f5  	ld	a4, -0xb0(s0)
802061a4: 85 66        	lui	a3, 0x1
802061a6: 97 60 00 00  	auipc	ra, 0x6
802061aa: e7 80 e0 2f  	jalr	0x2fe(ra) <_ZN2os2vm9PageTable8mappages17h6ce27cbab819796cE>
802061ae: c5 bd        	j	0x8020609e <.Lpcrel_hi2+0x12>

00000000802061b0 <_ZN2os3cow14map_trampoline17h708ef00789e21bd5E>:
; pub fn map_trampoline(pgtbl_new: &mut PageTable) {
802061b0: 79 71        	addi	sp, sp, -0x30
802061b2: 06 f4        	sd	ra, 0x28(sp)
802061b4: 22 f0        	sd	s0, 0x20(sp)
802061b6: 00 18        	addi	s0, sp, 0x30
802061b8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802061bc: 23 34 a4 fe  	sd	a0, -0x18(s0)

00000000802061c0 <.Lpcrel_hi7>:
;         TRAMPOLINE.into(),
802061c0: 17 e5 02 00  	auipc	a0, 0x2e
802061c4: 93 05 05 28  	addi	a1, a0, 0x280
802061c8: 37 05 00 04  	lui	a0, 0x4000
802061cc: 7d 35        	addiw	a0, a0, -0x1
802061ce: 32 05        	slli	a0, a0, 0xc
802061d0: 97 60 00 00  	auipc	ra, 0x6
802061d4: e7 80 60 d2  	jalr	-0x2da(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha90e1b523d38a347E>
802061d8: 23 3c a4 fc  	sd	a0, -0x28(s0)

00000000802061dc <.Lpcrel_hi8>:
;         (trampoline as usize).into(),
802061dc: 17 c5 02 00  	auipc	a0, 0x2c
802061e0: 13 05 45 e2  	addi	a0, a0, -0x1dc

00000000802061e4 <.Lpcrel_hi9>:
802061e4: 97 e5 02 00  	auipc	a1, 0x2e
802061e8: 93 85 45 27  	addi	a1, a1, 0x274
802061ec: 97 60 00 00  	auipc	ra, 0x6
802061f0: e7 80 e0 ce  	jalr	-0x312(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>
802061f4: 83 35 84 fd  	ld	a1, -0x28(s0)
802061f8: 2a 86        	mv	a2, a0
802061fa: 03 35 04 fe  	ld	a0, -0x20(s0)
802061fe: 85 66        	lui	a3, 0x1
80206200: 29 47        	li	a4, 0xa
;     pgtbl_new.mappages(
80206202: 97 60 00 00  	auipc	ra, 0x6
80206206: e7 80 20 2a  	jalr	0x2a2(ra) <_ZN2os2vm9PageTable8mappages17h6ce27cbab819796cE>
8020620a: a2 70        	ld	ra, 0x28(sp)
8020620c: 02 74        	ld	s0, 0x20(sp)
; }
8020620e: 45 61        	addi	sp, sp, 0x30
80206210: 82 80        	ret

0000000080206212 <_ZN2os3cow13map_trapframe17h2bfc4f704b98296cE>:
; pub fn map_trapframe(pgtbl_new: &mut PageTable, pgtbl_old: &mut PageTable) {
80206212: 19 71        	addi	sp, sp, -0x80
80206214: 86 fc        	sd	ra, 0x78(sp)
80206216: a2 f8        	sd	s0, 0x70(sp)
80206218: 00 01        	addi	s0, sp, 0x80
8020621a: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020621e: aa 85        	mv	a1, a0
80206220: 03 35 04 fa  	ld	a0, -0x60(s0)
80206224: 23 34 b4 fa  	sd	a1, -0x58(s0)
80206228: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020622c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80206230: b7 05 00 02  	lui	a1, 0x2000
80206234: fd 35        	addiw	a1, a1, -0x1
80206236: b6 05        	slli	a1, a1, 0xd
;     let old_trapframe = PhyPageNum(pgtbl_old.walk_addr(TRAPFRAME).unwrap());
80206238: 97 70 00 00  	auipc	ra, 0x7
8020623c: e7 80 a0 a6  	jalr	-0x596(ra) <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>
80206240: 23 3c a4 fc  	sd	a0, -0x28(s0)
80206244: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
80206248: 03 35 84 fd  	ld	a0, -0x28(s0)
8020624c: 11 e9        	bnez	a0, 0x80206260 <.Lpcrel_hi10+0x10>
8020624e: 09 a0        	j	0x80206250 <.Lpcrel_hi10>

0000000080206250 <.Lpcrel_hi10>:
;             None => unwrap_failed(),
80206250: 17 e5 02 00  	auipc	a0, 0x2e
80206254: 13 05 05 22  	addi	a0, a0, 0x220
80206258: 97 b0 02 00  	auipc	ra, 0x2b
8020625c: e7 80 00 a7  	jalr	-0x590(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206260: 03 35 04 fe  	ld	a0, -0x20(s0)
80206264: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let old_trapframe = PhyPageNum(pgtbl_old.walk_addr(TRAPFRAME).unwrap());
80206268: 23 38 a4 fa  	sd	a0, -0x50(s0)

000000008020626c <.Lpcrel_hi11>:
;     let gurd = FRAME_ALLOC.page_alloc();
8020626c: 17 85 03 00  	auipc	a0, 0x38
80206270: 13 05 45 d9  	addi	a0, a0, -0x26c
80206274: 97 e0 ff ff  	auipc	ra, 0xffffe
80206278: e7 80 20 c4  	jalr	-0x3be(ra) <ekernel+0xffcb6eb6>
8020627c: aa 85        	mv	a1, a0
8020627e: 03 35 84 fa  	ld	a0, -0x58(s0)
80206282: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     let new_trapframe = gurd.pages;
80206286: 23 3c b4 fa  	sd	a1, -0x48(s0)
;     pgtbl_new.save_page(gurd);
8020628a: 97 60 00 00  	auipc	ra, 0x6
8020628e: e7 80 a0 1f  	jalr	0x1fa(ra) <_ZN2os2vm9PageTable9save_page17h1a9d9d87053129a1E>
80206292: 13 05 84 fb  	addi	a0, s0, -0x48
;     new_trapframe
80206296: 97 60 00 00  	auipc	ra, 0x6
8020629a: e7 80 60 04  	jalr	0x46(ra) <_ZN2os2vm10PhyPageNum15get_bytes_array17ha54148423947db22E>
8020629e: 23 34 a4 f8  	sd	a0, -0x78(s0)
802062a2: 23 38 b4 f8  	sd	a1, -0x70(s0)
802062a6: 13 05 04 fb  	addi	a0, s0, -0x50
;         .copy_from_slice(old_trapframe.get_bytes_array());
802062aa: 97 60 00 00  	auipc	ra, 0x6
802062ae: e7 80 20 03  	jalr	0x32(ra) <_ZN2os2vm10PhyPageNum15get_bytes_array17ha54148423947db22E>
802062b2: 2a 86        	mv	a2, a0
802062b4: 03 35 84 f8  	ld	a0, -0x78(s0)
802062b8: ae 86        	mv	a3, a1
802062ba: 83 35 04 f9  	ld	a1, -0x70(s0)

00000000802062be <.Lpcrel_hi12>:
;     new_trapframe
802062be: 17 e7 02 00  	auipc	a4, 0x2e
802062c2: 13 07 a7 1c  	addi	a4, a4, 0x1ca
802062c6: 97 70 01 00  	auipc	ra, 0x17
802062ca: e7 80 c0 f3  	jalr	-0xc4(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h96dd97b40ac35cabE>

00000000802062ce <.Lpcrel_hi13>:
;         TRAPFRAME.into(),
802062ce: 17 e5 02 00  	auipc	a0, 0x2e
802062d2: 93 05 25 1d  	addi	a1, a0, 0x1d2
802062d6: 37 05 00 02  	lui	a0, 0x2000
802062da: 7d 35        	addiw	a0, a0, -0x1
802062dc: 36 05        	slli	a0, a0, 0xd
802062de: 97 60 00 00  	auipc	ra, 0x6
802062e2: e7 80 80 c1  	jalr	-0x3e8(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha90e1b523d38a347E>
802062e6: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         new_trapframe.0.into(),
802062ea: 03 35 84 fb  	ld	a0, -0x48(s0)

00000000802062ee <.Lpcrel_hi14>:
802062ee: 97 e5 02 00  	auipc	a1, 0x2e
802062f2: 93 85 a5 1c  	addi	a1, a1, 0x1ca
802062f6: 97 60 00 00  	auipc	ra, 0x6
802062fa: e7 80 40 be  	jalr	-0x41c(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>
802062fe: 83 35 84 f9  	ld	a1, -0x68(s0)
80206302: 2a 86        	mv	a2, a0
80206304: 03 35 84 fa  	ld	a0, -0x58(s0)
80206308: 85 66        	lui	a3, 0x1
8020630a: 39 47        	li	a4, 0xe
;     pgtbl_new.mappages(
8020630c: 97 60 00 00  	auipc	ra, 0x6
80206310: e7 80 80 19  	jalr	0x198(ra) <_ZN2os2vm9PageTable8mappages17h6ce27cbab819796cE>
80206314: e6 70        	ld	ra, 0x78(sp)
80206316: 46 74        	ld	s0, 0x70(sp)
; }
80206318: 09 61        	addi	sp, sp, 0x80
8020631a: 82 80        	ret

000000008020631c <_ZN2os3cow9map_stack17h1be20667ef533ec7E>:
; pub fn map_stack(pgtbl_new: &mut PageTable, pgtbl_old: &mut PageTable) {
8020631c: 79 71        	addi	sp, sp, -0x30
8020631e: 06 f4        	sd	ra, 0x28(sp)
80206320: 22 f0        	sd	s0, 0x20(sp)
80206322: 00 18        	addi	s0, sp, 0x30
80206324: 23 3c b4 fc  	sd	a1, -0x28(s0)
80206328: aa 85        	mv	a1, a0
8020632a: 03 35 84 fd  	ld	a0, -0x28(s0)
8020632e: 23 30 b4 fe  	sd	a1, -0x20(s0)
80206332: 23 34 a4 fe  	sd	a0, -0x18(s0)
80206336: b7 06 00 04  	lui	a3, 0x4000
8020633a: 1b 86 b6 ff  	addiw	a2, a3, -0x5
8020633e: 32 06        	slli	a2, a2, 0xc
80206340: f5 36        	addiw	a3, a3, -0x3
80206342: b2 06        	slli	a3, a3, 0xc
;     map_user_stack_fork(pgtbl_old, pgtbl_new, USERSTACK, USERSTACK_TOP);
80206344: 97 c0 00 00  	auipc	ra, 0xc
80206348: e7 80 a0 c5  	jalr	-0x3a6(ra) <_ZN2os4task19map_user_stack_fork17hf98f1e081e054c88E>
8020634c: a2 70        	ld	ra, 0x28(sp)
8020634e: 02 74        	ld	s0, 0x20(sp)
; }
80206350: 45 61        	addi	sp, sp, 0x30
80206352: 82 80        	ret

0000000080206354 <_ZN2os3cow13copy_on_write17h69b3be66c6288532E>:
; pub fn copy_on_write(va: usize, task: &Arc<TaskControlBlock>) {
80206354: 09 71        	addi	sp, sp, -0x180
80206356: 86 fe        	sd	ra, 0x178(sp)
80206358: a2 fa        	sd	s0, 0x170(sp)
8020635a: 00 03        	addi	s0, sp, 0x180
8020635c: 23 38 b4 ec  	sd	a1, -0x130(s0)
80206360: aa 85        	mv	a1, a0
80206362: 03 35 04 ed  	ld	a0, -0x130(s0)
80206366: 23 3c b4 ec  	sd	a1, -0x128(s0)
8020636a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020636e: 23 3c a4 f8  	sd	a0, -0x68(s0)
;     let mut flag = task.inner_mut().pagetable().walk_perm(va).unwrap();
80206372: 97 c0 ff ff  	auipc	ra, 0xffffc
80206376: e7 80 a0 a5  	jalr	-0x5a6(ra) <ekernel+0xffcb4dcc>
8020637a: 97 80 00 00  	auipc	ra, 0x8
8020637e: e7 80 c0 ea  	jalr	-0x154(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80206382: 23 34 a4 ee  	sd	a0, -0x118(s0)
80206386: 23 38 b4 ee  	sd	a1, -0x110(s0)
8020638a: 13 05 84 ee  	addi	a0, s0, -0x118
8020638e: 97 b0 ff ff  	auipc	ra, 0xffffb
80206392: e7 80 80 80  	jalr	-0x7f8(ra) <ekernel+0xffcb3b96>
80206396: 97 70 00 00  	auipc	ra, 0x7
8020639a: e7 80 60 75  	jalr	0x756(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
8020639e: 83 35 84 ed  	ld	a1, -0x128(s0)
802063a2: 08 61        	ld	a0, 0x0(a0)
802063a4: 97 70 00 00  	auipc	ra, 0x7
802063a8: e7 80 e0 a0  	jalr	-0x5f2(ra) <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE>
802063ac: 23 3c a4 fc  	sd	a0, -0x28(s0)
802063b0: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
802063b4: 03 35 84 fd  	ld	a0, -0x28(s0)
802063b8: 11 e9        	bnez	a0, 0x802063cc <.Lpcrel_hi15+0x10>
802063ba: 09 a0        	j	0x802063bc <.Lpcrel_hi15>

00000000802063bc <.Lpcrel_hi15>:
;             None => unwrap_failed(),
802063bc: 17 e5 02 00  	auipc	a0, 0x2e
802063c0: 13 05 45 11  	addi	a0, a0, 0x114
802063c4: 97 b0 02 00  	auipc	ra, 0x2b
802063c8: e7 80 40 90  	jalr	-0x6fc(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
802063cc: 03 35 04 fe  	ld	a0, -0x20(s0)
802063d0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let mut flag = task.inner_mut().pagetable().walk_perm(va).unwrap();
802063d4: 23 30 a4 ee  	sd	a0, -0x120(s0)
802063d8: 13 05 84 ee  	addi	a0, s0, -0x118
802063dc: 97 20 00 00  	auipc	ra, 0x2
802063e0: e7 80 40 e3  	jalr	-0x1cc(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>

00000000802063e4 <.Lpcrel_hi16>:
;     let page = FRAME_ALLOC.page_alloc();
802063e4: 17 85 03 00  	auipc	a0, 0x38
802063e8: 13 05 c5 c1  	addi	a0, a0, -0x3e4
802063ec: 97 e0 ff ff  	auipc	ra, 0xffffe
802063f0: e7 80 a0 ac  	jalr	-0x536(ra) <ekernel+0xffcb6eb6>
802063f4: aa 85        	mv	a1, a0
802063f6: 03 35 04 ed  	ld	a0, -0x130(s0)
802063fa: 2e 86        	mv	a2, a1
802063fc: 23 3c c4 ea  	sd	a2, -0x148(s0)
80206400: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     let pa = PhyPageNum(page.pages.0);
80206404: 23 3c b4 ee  	sd	a1, -0x108(s0)
;     let mut parent_page = PageTable::create(task.inner_mut().parent_root);
80206408: 97 c0 ff ff  	auipc	ra, 0xffffc
8020640c: e7 80 40 9c  	jalr	-0x63c(ra) <ekernel+0xffcb4dcc>
80206410: 97 80 00 00  	auipc	ra, 0x8
80206414: e7 80 60 e1  	jalr	-0x1ea(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80206418: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8020641c: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80206420: 13 05 84 f3  	addi	a0, s0, -0xc8
80206424: 23 30 a4 ec  	sd	a0, -0x140(s0)
80206428: 97 a0 ff ff  	auipc	ra, 0xffffa
8020642c: e7 80 c0 74  	jalr	0x74c(ra) <ekernel+0xffcb3b74>
80206430: 6c 6d        	ld	a1, 0xd8(a0)
80206432: 13 05 04 f0  	addi	a0, s0, -0x100
80206436: 23 34 a4 ec  	sd	a0, -0x138(s0)
8020643a: 97 60 00 00  	auipc	ra, 0x6
8020643e: e7 80 00 fe  	jalr	-0x20(ra) <_ZN2os2vm9PageTable6create17h8a678b1f2d671733E>
80206442: 03 35 04 ec  	ld	a0, -0x140(s0)
80206446: 97 20 00 00  	auipc	ra, 0x2
8020644a: e7 80 a0 dc  	jalr	-0x236(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
8020644e: 03 35 84 ec  	ld	a0, -0x138(s0)
80206452: 83 35 84 ed  	ld	a1, -0x128(s0)
;     let src_pa = PhyPageNum(parent_page.walk_addr(va).unwrap());
80206456: 97 70 00 00  	auipc	ra, 0x7
8020645a: e7 80 c0 84  	jalr	-0x7b4(ra) <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>
8020645e: 23 30 a4 fc  	sd	a0, -0x40(s0)
80206462: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match self {
80206466: 03 35 04 fc  	ld	a0, -0x40(s0)
8020646a: 11 e9        	bnez	a0, 0x8020647e <.Lpcrel_hi17+0x10>
8020646c: 09 a0        	j	0x8020646e <.Lpcrel_hi17>

000000008020646e <.Lpcrel_hi17>:
;             None => unwrap_failed(),
8020646e: 17 e5 02 00  	auipc	a0, 0x2e
80206472: 13 05 a5 07  	addi	a0, a0, 0x7a
80206476: 97 b0 02 00  	auipc	ra, 0x2b
8020647a: e7 80 20 85  	jalr	-0x7ae(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020647e: 03 35 84 fc  	ld	a0, -0x38(s0)
80206482: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     let src_pa = PhyPageNum(parent_page.walk_addr(va).unwrap());
80206486: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8020648a: 13 05 84 ef  	addi	a0, s0, -0x108
;     pa.get_bytes_array()
8020648e: 97 60 00 00  	auipc	ra, 0x6
80206492: e7 80 e0 e4  	jalr	-0x1b2(ra) <_ZN2os2vm10PhyPageNum15get_bytes_array17ha54148423947db22E>
80206496: 23 30 a4 e8  	sd	a0, -0x180(s0)
8020649a: 23 34 b4 e8  	sd	a1, -0x178(s0)
8020649e: 13 05 84 f4  	addi	a0, s0, -0xb8
;         .copy_from_slice(src_pa.get_bytes_array());
802064a2: 97 60 00 00  	auipc	ra, 0x6
802064a6: e7 80 a0 e3  	jalr	-0x1c6(ra) <_ZN2os2vm10PhyPageNum15get_bytes_array17ha54148423947db22E>
802064aa: 2a 86        	mv	a2, a0
802064ac: 03 35 04 e8  	ld	a0, -0x180(s0)
802064b0: ae 86        	mv	a3, a1
802064b2: 83 35 84 e8  	ld	a1, -0x178(s0)

00000000802064b6 <.Lpcrel_hi18>:
;     pa.get_bytes_array()
802064b6: 17 e7 02 00  	auipc	a4, 0x2e
802064ba: 13 07 a7 04  	addi	a4, a4, 0x4a
802064be: 97 70 01 00  	auipc	ra, 0x17
802064c2: e7 80 40 d4  	jalr	-0x2bc(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h96dd97b40ac35cabE>
802064c6: 03 35 04 ed  	ld	a0, -0x130(s0)
;     task.inner_mut().pagetable().save_page(page);
802064ca: 97 c0 ff ff  	auipc	ra, 0xffffc
802064ce: e7 80 20 90  	jalr	-0x6fe(ra) <ekernel+0xffcb4dcc>
802064d2: 97 80 00 00  	auipc	ra, 0x8
802064d6: e7 80 40 d5  	jalr	-0x2ac(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
802064da: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802064de: 23 3c b4 f4  	sd	a1, -0xa8(s0)
802064e2: 13 05 04 f5  	addi	a0, s0, -0xb0
802064e6: 23 38 a4 e8  	sd	a0, -0x170(s0)
802064ea: 97 a0 ff ff  	auipc	ra, 0xffffa
802064ee: e7 80 c0 6a  	jalr	0x6ac(ra) <ekernel+0xffcb3b96>
802064f2: 97 70 00 00  	auipc	ra, 0x7
802064f6: e7 80 a0 5f  	jalr	0x5fa(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
802064fa: 83 35 84 eb  	ld	a1, -0x148(s0)
802064fe: 08 61        	ld	a0, 0x0(a0)
80206500: 97 60 00 00  	auipc	ra, 0x6
80206504: e7 80 40 f8  	jalr	-0x7c(ra) <_ZN2os2vm9PageTable9save_page17h1a9d9d87053129a1E>
80206508: 03 35 04 e9  	ld	a0, -0x170(s0)
8020650c: 97 20 00 00  	auipc	ra, 0x2
80206510: e7 80 40 d0  	jalr	-0x2fc(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80206514: 03 35 04 ed  	ld	a0, -0x130(s0)
;     task.inner_mut().pagetable().umappage(va);
80206518: 97 c0 ff ff  	auipc	ra, 0xffffc
8020651c: e7 80 40 8b  	jalr	-0x74c(ra) <ekernel+0xffcb4dcc>
80206520: 97 80 00 00  	auipc	ra, 0x8
80206524: e7 80 60 d0  	jalr	-0x2fa(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80206528: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8020652c: 23 34 b4 f6  	sd	a1, -0x98(s0)
80206530: 13 05 04 f6  	addi	a0, s0, -0xa0
80206534: 23 3c a4 e8  	sd	a0, -0x168(s0)
80206538: 97 a0 ff ff  	auipc	ra, 0xffffa
8020653c: e7 80 e0 65  	jalr	0x65e(ra) <ekernel+0xffcb3b96>
80206540: 97 70 00 00  	auipc	ra, 0x7
80206544: e7 80 c0 5a  	jalr	0x5ac(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
80206548: 83 35 84 ed  	ld	a1, -0x128(s0)
8020654c: 08 61        	ld	a0, 0x0(a0)
8020654e: 97 60 00 00  	auipc	ra, 0x6
80206552: e7 80 60 2c  	jalr	0x2c6(ra) <_ZN2os2vm9PageTable8umappage17h6dfa0208ecae262eE>
80206556: 03 35 84 e9  	ld	a0, -0x168(s0)
8020655a: 97 20 00 00  	auipc	ra, 0x2
8020655e: e7 80 60 cb  	jalr	-0x34a(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80206562: 03 35 04 ed  	ld	a0, -0x130(s0)
;     task.inner_mut()
80206566: 97 c0 ff ff  	auipc	ra, 0xffffc
8020656a: e7 80 60 86  	jalr	-0x79a(ra) <ekernel+0xffcb4dcc>
8020656e: 97 80 00 00  	auipc	ra, 0x8
80206572: e7 80 80 cb  	jalr	-0x348(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80206576: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020657a: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020657e: 13 05 04 f7  	addi	a0, s0, -0x90
80206582: 23 38 a4 ea  	sd	a0, -0x150(s0)
80206586: 97 a0 ff ff  	auipc	ra, 0xffffa
8020658a: e7 80 00 61  	jalr	0x610(ra) <ekernel+0xffcb3b96>
8020658e: 97 70 00 00  	auipc	ra, 0x7
80206592: e7 80 e0 55  	jalr	0x55e(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
80206596: aa 85        	mv	a1, a0
80206598: 03 35 84 ed  	ld	a0, -0x128(s0)
8020659c: 8c 61        	ld	a1, 0x0(a1)
8020659e: 23 34 b4 ea  	sd	a1, -0x158(s0)

00000000802065a2 <.Lpcrel_hi19>:
;         .mappages(va.into(), pa.0.into(), PGSZ, flag | PTE_W | PTE_R);
802065a2: 97 e5 02 00  	auipc	a1, 0x2e
802065a6: 93 85 65 f7  	addi	a1, a1, -0x8a
802065aa: 97 60 00 00  	auipc	ra, 0x6
802065ae: e7 80 c0 94  	jalr	-0x6b4(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha90e1b523d38a347E>
802065b2: 23 30 a4 ea  	sd	a0, -0x160(s0)
802065b6: 03 35 84 ef  	ld	a0, -0x108(s0)

00000000802065ba <.Lpcrel_hi20>:
802065ba: 97 e5 02 00  	auipc	a1, 0x2e
802065be: 93 85 65 f7  	addi	a1, a1, -0x8a
802065c2: 97 60 00 00  	auipc	ra, 0x6
802065c6: e7 80 80 91  	jalr	-0x6e8(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>
802065ca: 83 35 04 ea  	ld	a1, -0x160(s0)
802065ce: 2a 86        	mv	a2, a0
802065d0: 03 35 84 ea  	ld	a0, -0x158(s0)
802065d4: 83 36 04 ee  	ld	a3, -0x120(s0)
802065d8: 13 e7 66 00  	ori	a4, a3, 0x6
802065dc: 85 66        	lui	a3, 0x1
;     task.inner_mut()
802065de: 97 60 00 00  	auipc	ra, 0x6
802065e2: e7 80 60 ec  	jalr	-0x13a(ra) <_ZN2os2vm9PageTable8mappages17h6ce27cbab819796cE>
802065e6: 03 35 04 eb  	ld	a0, -0x150(s0)
;         .mappages(va.into(), pa.0.into(), PGSZ, flag | PTE_W | PTE_R);
802065ea: 97 20 00 00  	auipc	ra, 0x2
802065ee: e7 80 60 c2  	jalr	-0x3da(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
802065f2: 03 35 04 ed  	ld	a0, -0x130(s0)
;     flag = task.inner_mut().pagetable().walk_perm(va).unwrap();
802065f6: 97 b0 ff ff  	auipc	ra, 0xffffb
802065fa: e7 80 60 7d  	jalr	0x7d6(ra) <ekernel+0xffcb4dcc>
802065fe: 97 80 00 00  	auipc	ra, 0x8
80206602: e7 80 80 c2  	jalr	-0x3d8(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80206606: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020660a: 23 34 b4 f8  	sd	a1, -0x78(s0)
8020660e: 13 05 04 f8  	addi	a0, s0, -0x80
80206612: 97 a0 ff ff  	auipc	ra, 0xffffa
80206616: e7 80 40 58  	jalr	0x584(ra) <ekernel+0xffcb3b96>
8020661a: 97 70 00 00  	auipc	ra, 0x7
8020661e: e7 80 20 4d  	jalr	0x4d2(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
80206622: 83 35 84 ed  	ld	a1, -0x128(s0)
80206626: 08 61        	ld	a0, 0x0(a0)
80206628: 97 60 00 00  	auipc	ra, 0x6
8020662c: e7 80 a0 78  	jalr	0x78a(ra) <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE>
80206630: 23 34 a4 fa  	sd	a0, -0x58(s0)
80206634: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         match self {
80206638: 03 35 84 fa  	ld	a0, -0x58(s0)
8020663c: 11 e9        	bnez	a0, 0x80206650 <.Lpcrel_hi21+0x10>
8020663e: 09 a0        	j	0x80206640 <.Lpcrel_hi21>

0000000080206640 <.Lpcrel_hi21>:
;             None => unwrap_failed(),
80206640: 17 e5 02 00  	auipc	a0, 0x2e
80206644: 13 05 85 f0  	addi	a0, a0, -0xf8
80206648: 97 a0 02 00  	auipc	ra, 0x2a
8020664c: e7 80 00 68  	jalr	0x680(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206650: 03 35 04 fb  	ld	a0, -0x50(s0)
80206654: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     flag = task.inner_mut().pagetable().walk_perm(va).unwrap();
80206658: 23 30 a4 ee  	sd	a0, -0x120(s0)
8020665c: 13 05 04 f8  	addi	a0, s0, -0x80
80206660: 97 20 00 00  	auipc	ra, 0x2
80206664: e7 80 00 bb  	jalr	-0x450(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80206668: 13 05 04 f0  	addi	a0, s0, -0x100
; }
8020666c: 97 10 00 00  	auipc	ra, 0x1
80206670: e7 80 00 6a  	jalr	0x6a0(ra) <_ZN4core3ptr38drop_in_place$LT$os..vm..PageTable$GT$17h37485d31fc718f76E>
80206674: f6 70        	ld	ra, 0x178(sp)
80206676: 56 74        	ld	s0, 0x170(sp)
80206678: 19 61        	addi	sp, sp, 0x180
8020667a: 82 80        	ret

000000008020667c <_ZN104_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17had1e3321d70b435bE>:
;     fn from_residual(residual: ControlFlow<B, convert::Infallible>) -> Self {
8020667c: 39 71        	addi	sp, sp, -0x40
8020667e: 06 fc        	sd	ra, 0x38(sp)
80206680: 22 f8        	sd	s0, 0x30(sp)
80206682: 80 00        	addi	s0, sp, 0x40
80206684: 23 30 a4 fc  	sd	a0, -0x40(s0)
80206688: 23 34 b4 fc  	sd	a1, -0x38(s0)
;             ControlFlow::Break(b) => ControlFlow::Break(b),
8020668c: 83 35 04 fc  	ld	a1, -0x40(s0)
80206690: 03 35 84 fc  	ld	a0, -0x38(s0)
80206694: 23 30 b4 fe  	sd	a1, -0x20(s0)
80206698: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020669c: 23 38 b4 fc  	sd	a1, -0x30(s0)
802066a0: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
802066a4: 03 35 04 fd  	ld	a0, -0x30(s0)
802066a8: 83 35 84 fd  	ld	a1, -0x28(s0)
802066ac: e2 70        	ld	ra, 0x38(sp)
802066ae: 42 74        	ld	s0, 0x30(sp)
802066b0: 21 61        	addi	sp, sp, 0x40
802066b2: 82 80        	ret

00000000802066b4 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$11from_output17h47ced31a3270d904E>:
;     fn from_output(output: Self::Output) -> Self {
802066b4: 79 71        	addi	sp, sp, -0x30
802066b6: 06 f4        	sd	ra, 0x28(sp)
802066b8: 22 f0        	sd	s0, 0x20(sp)
802066ba: 00 18        	addi	s0, sp, 0x30
802066bc: 01 45        	li	a0, 0x0
;         ControlFlow::Continue(output)
802066be: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     }
802066c2: 03 35 84 fd  	ld	a0, -0x28(s0)
802066c6: 83 35 04 fe  	ld	a1, -0x20(s0)
802066ca: a2 70        	ld	ra, 0x28(sp)
802066cc: 02 74        	ld	s0, 0x20(sp)
802066ce: 45 61        	addi	sp, sp, 0x30
802066d0: 82 80        	ret

00000000802066d2 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8e5c8e258be0067aE>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
802066d2: 1d 71        	addi	sp, sp, -0x60
802066d4: 86 ec        	sd	ra, 0x58(sp)
802066d6: a2 e8        	sd	s0, 0x50(sp)
802066d8: 80 10        	addi	s0, sp, 0x60
802066da: 23 34 a4 fa  	sd	a0, -0x58(s0)
802066de: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         match self {
802066e2: 03 35 04 fb  	ld	a0, -0x50(s0)
802066e6: 11 e5        	bnez	a0, 0x802066f2 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8e5c8e258be0067aE+0x20>
802066e8: 09 a0        	j	0x802066ea <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8e5c8e258be0067aE+0x18>
802066ea: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(c) => ControlFlow::Continue(c),
802066ec: 23 30 a4 fc  	sd	a0, -0x40(s0)
802066f0: 35 a0        	j	0x8020671c <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8e5c8e258be0067aE+0x4a>
;             ControlFlow::Break(b) => ControlFlow::Break(ControlFlow::Break(b)),
802066f2: 83 35 84 fa  	ld	a1, -0x58(s0)
802066f6: 03 35 04 fb  	ld	a0, -0x50(s0)
802066fa: 23 30 b4 fe  	sd	a1, -0x20(s0)
802066fe: 23 34 a4 fe  	sd	a0, -0x18(s0)
80206702: 23 34 b4 fc  	sd	a1, -0x38(s0)
80206706: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020670a: 83 35 84 fc  	ld	a1, -0x38(s0)
8020670e: 03 35 04 fd  	ld	a0, -0x30(s0)
80206712: 23 3c b4 fa  	sd	a1, -0x48(s0)
80206716: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020671a: 09 a0        	j	0x8020671c <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8e5c8e258be0067aE+0x4a>
;     }
8020671c: 03 35 84 fb  	ld	a0, -0x48(s0)
80206720: 83 35 04 fc  	ld	a1, -0x40(s0)
80206724: e6 60        	ld	ra, 0x58(sp)
80206726: 46 64        	ld	s0, 0x50(sp)
80206728: 25 61        	addi	sp, sp, 0x60
8020672a: 82 80        	ret

000000008020672c <_ZN58_$LT$virtio_drivers..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h2057d0016bf288b9E>:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8020672c: 39 71        	addi	sp, sp, -0x40
8020672e: 06 fc        	sd	ra, 0x38(sp)
80206730: 22 f8        	sd	s0, 0x30(sp)
80206732: 80 00        	addi	s0, sp, 0x40
80206734: 23 30 b4 fc  	sd	a1, -0x40(s0)
80206738: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020673c: 23 34 b4 fe  	sd	a1, -0x18(s0)
80206740: 03 45 05 00  	lbu	a0, 0x0(a0)
80206744: 23 34 a4 fc  	sd	a0, -0x38(s0)
80206748: 03 35 84 fc  	ld	a0, -0x38(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8020674c: 0e 05        	slli	a0, a0, 0x3

000000008020674e <.Lpcrel_hi0>:
8020674e: 97 e5 02 00  	auipc	a1, 0x2e
80206752: 93 85 25 e1  	addi	a1, a1, -0x1ee
80206756: 2e 95        	add	a0, a0, a1
80206758: 08 61        	ld	a0, 0x0(a0)
8020675a: 02 85        	jr	a0
8020675c: 00 00        	unimp

000000008020675e <.Lpcrel_hi1>:
8020675e: 17 e5 02 00  	auipc	a0, 0x2e
80206762: 13 05 25 e3  	addi	a0, a0, -0x1ce
80206766: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020676a: 39 45        	li	a0, 0xe
8020676c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80206770: 9d a0        	j	0x802067d6 <.Lpcrel_hi6+0x14>

0000000080206772 <.Lpcrel_hi2>:
80206772: 17 d5 02 00  	auipc	a0, 0x2d
80206776: 13 05 65 c7  	addi	a0, a0, -0x38a
8020677a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020677e: 21 45        	li	a0, 0x8
80206780: 23 3c a4 fc  	sd	a0, -0x28(s0)
80206784: 89 a8        	j	0x802067d6 <.Lpcrel_hi6+0x14>

0000000080206786 <.Lpcrel_hi3>:
80206786: 17 e5 02 00  	auipc	a0, 0x2e
8020678a: 13 05 85 e1  	addi	a0, a0, -0x1e8
8020678e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80206792: 2d 45        	li	a0, 0xb
80206794: 23 3c a4 fc  	sd	a0, -0x28(s0)
80206798: 3d a8        	j	0x802067d6 <.Lpcrel_hi6+0x14>

000000008020679a <.Lpcrel_hi4>:
8020679a: 17 e5 02 00  	auipc	a0, 0x2e
8020679e: 13 05 f5 e0  	addi	a0, a0, -0x1f1
802067a2: 23 38 a4 fc  	sd	a0, -0x30(s0)
802067a6: 31 45        	li	a0, 0xc
802067a8: 23 3c a4 fc  	sd	a0, -0x28(s0)
802067ac: 2d a0        	j	0x802067d6 <.Lpcrel_hi6+0x14>

00000000802067ae <.Lpcrel_hi5>:
802067ae: 17 d5 02 00  	auipc	a0, 0x2d
802067b2: 13 05 25 c9  	addi	a0, a0, -0x36e
802067b6: 23 38 a4 fc  	sd	a0, -0x30(s0)
802067ba: 21 45        	li	a0, 0x8
802067bc: 23 3c a4 fc  	sd	a0, -0x28(s0)
802067c0: 19 a8        	j	0x802067d6 <.Lpcrel_hi6+0x14>

00000000802067c2 <.Lpcrel_hi6>:
802067c2: 17 e5 02 00  	auipc	a0, 0x2e
802067c6: 13 05 35 df  	addi	a0, a0, -0x20d
802067ca: 23 38 a4 fc  	sd	a0, -0x30(s0)
802067ce: 1d 45        	li	a0, 0x7
802067d0: 23 3c a4 fc  	sd	a0, -0x28(s0)
802067d4: 09 a0        	j	0x802067d6 <.Lpcrel_hi6+0x14>
802067d6: 03 35 04 fc  	ld	a0, -0x40(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
802067da: 83 35 04 fd  	ld	a1, -0x30(s0)
802067de: 03 36 84 fd  	ld	a2, -0x28(s0)
802067e2: 97 90 02 00  	auipc	ra, 0x29
802067e6: e7 80 40 25  	jalr	0x254(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
802067ea: e2 70        	ld	ra, 0x38(sp)
802067ec: 42 74        	ld	s0, 0x30(sp)
802067ee: 21 61        	addi	sp, sp, 0x40
802067f0: 82 80        	ret

00000000802067f2 <rust_begin_unwind>:
; fn panic(_info: &PanicInfo) -> ! {
802067f2: 45 71        	addi	sp, sp, -0x1d0
802067f4: 86 e7        	sd	ra, 0x1c8(sp)
802067f6: a2 e3        	sd	s0, 0x1c0(sp)
802067f8: 80 0b        	addi	s0, sp, 0x1d0
802067fa: 23 34 a4 e6  	sd	a0, -0x198(s0)
802067fe: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     if let Some(location) = _info.location(){
80206802: 97 30 01 00  	auipc	ra, 0x13
80206806: e7 80 40 24  	jalr	0x244(ra) <_ZN4core5panic10panic_info9PanicInfo8location17hf308bb9d02a0a769E>
8020680a: 23 38 a4 e6  	sd	a0, -0x190(s0)
8020680e: 03 35 04 e7  	ld	a0, -0x190(s0)
80206812: 63 0e 05 12  	beqz	a0, 0x8020694e <.Lpcrel_hi4+0x2e>
80206816: 09 a0        	j	0x80206818 <rust_begin_unwind+0x26>
80206818: 03 35 04 e7  	ld	a0, -0x190(s0)
8020681c: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
80206820: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;             location.file(),
80206824: 97 50 00 00  	auipc	ra, 0x5
80206828: e7 80 c0 cf  	jalr	-0x304(ra) <_ZN4core5panic8location8Location4file17hd9f016dacada464aE>
8020682c: 2a 86        	mv	a2, a0
8020682e: 03 35 04 e4  	ld	a0, -0x1c0(s0)
80206832: 23 3c c4 ec  	sd	a2, -0x128(s0)
80206836: 23 30 b4 ee  	sd	a1, -0x120(s0)
8020683a: 13 06 84 ed  	addi	a2, s0, -0x128
8020683e: 23 30 c4 fc  	sd	a2, -0x40(s0)

0000000080206842 <.Lpcrel_hi0>:
;         Self::new(x, Display::fmt)
80206842: 97 55 01 00  	auipc	a1, 0x15
80206846: 93 85 25 30  	addi	a1, a1, 0x302
8020684a: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020684e: 23 38 c4 fa  	sd	a2, -0x50(s0)
80206852: 23 3c b4 fa  	sd	a1, -0x48(s0)
;     }
80206856: 83 35 04 fb  	ld	a1, -0x50(s0)
8020685a: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
8020685e: 83 35 84 fb  	ld	a1, -0x48(s0)
80206862: 23 38 b4 e4  	sd	a1, -0x1b0(s0)
;             location.line(),
80206866: 97 50 00 00  	auipc	ra, 0x5
8020686a: e7 80 40 cd  	jalr	-0x32c(ra) <_ZN4core5panic8location8Location4line17h4a57ba39b3e6ddaeE>
8020686e: aa 85        	mv	a1, a0
80206870: 03 35 84 e6  	ld	a0, -0x198(s0)
80206874: 23 26 b4 ee  	sw	a1, -0x114(s0)
80206878: 13 06 c4 ee  	addi	a2, s0, -0x114
8020687c: 23 30 c4 fa  	sd	a2, -0x60(s0)

0000000080206880 <.Lpcrel_hi1>:
;         Self::new(x, Display::fmt)
80206880: 97 a5 02 00  	auipc	a1, 0x2a
80206884: 93 85 e5 7f  	addi	a1, a1, 0x7fe
80206888: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020688c: 23 38 c4 f8  	sd	a2, -0x70(s0)
80206890: 23 3c b4 f8  	sd	a1, -0x68(s0)
;     }
80206894: 83 35 04 f9  	ld	a1, -0x70(s0)
80206898: 23 3c b4 e4  	sd	a1, -0x1a8(s0)
8020689c: 83 35 84 f9  	ld	a1, -0x68(s0)
802068a0: 23 30 b4 e6  	sd	a1, -0x1a0(s0)
;             _info.message().unwrap()
802068a4: 97 30 01 00  	auipc	ra, 0x13
802068a8: e7 80 c0 18  	jalr	0x18c(ra) <_ZN4core5panic10panic_info9PanicInfo7message17h8a9f06b69571ed1bE>
802068ac: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
802068b0: 03 35 04 fe  	ld	a0, -0x20(s0)
802068b4: 11 e9        	bnez	a0, 0x802068c8 <.Lpcrel_hi2+0x10>
802068b6: 09 a0        	j	0x802068b8 <.Lpcrel_hi2>

00000000802068b8 <.Lpcrel_hi2>:
;             None => unwrap_failed(),
802068b8: 17 e5 02 00  	auipc	a0, 0x2e
802068bc: 13 05 85 d6  	addi	a0, a0, -0x298
802068c0: 97 a0 02 00  	auipc	ra, 0x2a
802068c4: e7 80 80 40  	jalr	0x408(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
802068c8: 03 36 04 e6  	ld	a2, -0x1a0(s0)
802068cc: 83 36 84 e5  	ld	a3, -0x1a8(s0)
802068d0: 03 37 04 e5  	ld	a4, -0x1b0(s0)
802068d4: 83 37 84 e4  	ld	a5, -0x1b8(s0)
;             Some(val) => val,
802068d8: 03 35 04 fe  	ld	a0, -0x20(s0)
802068dc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             _info.message().unwrap()
802068e0: 23 38 a4 ee  	sd	a0, -0x110(s0)
802068e4: 93 05 04 ef  	addi	a1, s0, -0x110
802068e8: 23 30 b4 f8  	sd	a1, -0x80(s0)

00000000802068ec <.Lpcrel_hi3>:
;         Self::new(x, Display::fmt)
802068ec: 17 f5 ff ff  	auipc	a0, 0xfffff
802068f0: 13 05 c5 e1  	addi	a0, a0, -0x1e4
802068f4: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
802068f8: 23 38 b4 f6  	sd	a1, -0x90(s0)
802068fc: 23 3c a4 f6  	sd	a0, -0x88(s0)
;     }
80206900: 83 35 04 f7  	ld	a1, -0x90(s0)
80206904: 03 35 84 f7  	ld	a0, -0x88(s0)
;         println!(
80206908: 23 34 f4 ea  	sd	a5, -0x158(s0)
8020690c: 23 38 e4 ea  	sd	a4, -0x150(s0)
80206910: 23 3c d4 ea  	sd	a3, -0x148(s0)
80206914: 23 30 c4 ec  	sd	a2, -0x140(s0)
80206918: 23 34 b4 ec  	sd	a1, -0x138(s0)
8020691c: 23 38 a4 ec  	sd	a0, -0x130(s0)

0000000080206920 <.Lpcrel_hi4>:
80206920: 17 e5 02 00  	auipc	a0, 0x2e
80206924: 93 05 85 ca  	addi	a1, a0, -0x358
80206928: 13 05 84 e7  	addi	a0, s0, -0x188
8020692c: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
80206930: 11 46        	li	a2, 0x4
80206932: 93 06 84 ea  	addi	a3, s0, -0x158
80206936: 0d 47        	li	a4, 0x3
80206938: 97 10 00 00  	auipc	ra, 0x1
8020693c: e7 80 00 9b  	jalr	-0x650(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
80206940: 03 35 84 e3  	ld	a0, -0x1c8(s0)
80206944: 97 10 01 00  	auipc	ra, 0x11
80206948: e7 80 80 54  	jalr	0x548(ra) <_ZN2os7console5print17h042fcde166d682deE>
8020694c: 41 a8        	j	0x802069dc <.Lpcrel_hi7+0x2e>
8020694e: 03 35 84 e6  	ld	a0, -0x198(s0)
;         println!("panic:{}",_info.message().unwrap())
80206952: 97 30 01 00  	auipc	ra, 0x13
80206956: e7 80 e0 0d  	jalr	0xde(ra) <_ZN4core5panic10panic_info9PanicInfo7message17h8a9f06b69571ed1bE>
8020695a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         match self {
8020695e: 03 35 04 fd  	ld	a0, -0x30(s0)
80206962: 11 e9        	bnez	a0, 0x80206976 <.Lpcrel_hi5+0x10>
80206964: 09 a0        	j	0x80206966 <.Lpcrel_hi5>

0000000080206966 <.Lpcrel_hi5>:
;             None => unwrap_failed(),
80206966: 17 e5 02 00  	auipc	a0, 0x2e
8020696a: 13 05 a5 cf  	addi	a0, a0, -0x306
8020696e: 97 a0 02 00  	auipc	ra, 0x2a
80206972: e7 80 a0 35  	jalr	0x35a(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206976: 03 35 04 fd  	ld	a0, -0x30(s0)
8020697a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         println!("panic:{}",_info.message().unwrap())
8020697e: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80206982: 93 05 84 f3  	addi	a1, s0, -0xc8
80206986: 23 30 b4 f6  	sd	a1, -0xa0(s0)

000000008020698a <.Lpcrel_hi6>:
;         Self::new(x, Display::fmt)
8020698a: 17 f5 ff ff  	auipc	a0, 0xfffff
8020698e: 13 05 e5 d7  	addi	a0, a0, -0x282
80206992: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80206996: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8020699a: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;     }
8020699e: 83 35 04 f5  	ld	a1, -0xb0(s0)
802069a2: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         println!("panic:{}",_info.message().unwrap())
802069a6: 23 34 b4 f2  	sd	a1, -0xd8(s0)
802069aa: 23 38 a4 f2  	sd	a0, -0xd0(s0)

00000000802069ae <.Lpcrel_hi7>:
802069ae: 17 e5 02 00  	auipc	a0, 0x2e
802069b2: 93 05 25 c9  	addi	a1, a0, -0x36e
802069b6: 13 05 84 ef  	addi	a0, s0, -0x108
802069ba: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
802069be: 09 46        	li	a2, 0x2
802069c0: 93 06 84 f2  	addi	a3, s0, -0xd8
802069c4: 05 47        	li	a4, 0x1
802069c6: 97 10 00 00  	auipc	ra, 0x1
802069ca: e7 80 20 92  	jalr	-0x6de(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
802069ce: 03 35 04 e3  	ld	a0, -0x1d0(s0)
802069d2: 97 10 01 00  	auipc	ra, 0x11
802069d6: e7 80 a0 4b  	jalr	0x4ba(ra) <_ZN2os7console5print17h042fcde166d682deE>
802069da: 09 a0        	j	0x802069dc <.Lpcrel_hi7+0x2e>
;     loop{};
802069dc: 01 a0        	j	0x802069dc <.Lpcrel_hi7+0x2e>

00000000802069de <_ZN2os10lang_items18handle_alloc_error17h23b5fea19107d61aE>:
; pub fn handle_alloc_error(layout: core::alloc::Layout) -> ! {
802069de: 75 71        	addi	sp, sp, -0x90
802069e0: 06 e5        	sd	ra, 0x88(sp)
802069e2: 22 e1        	sd	s0, 0x80(sp)
802069e4: 00 09        	addi	s0, sp, 0x90
802069e6: 23 30 a4 f8  	sd	a0, -0x80(s0)
802069ea: 23 34 b4 f8  	sd	a1, -0x78(s0)
802069ee: 93 05 04 f8  	addi	a1, s0, -0x80
802069f2: 23 30 b4 fe  	sd	a1, -0x20(s0)

00000000802069f6 <.Lpcrel_hi8>:
;         Self::new(x, Debug::fmt)
802069f6: 17 d5 00 00  	auipc	a0, 0xd
802069fa: 13 05 c5 3c  	addi	a0, a0, 0x3cc
802069fe: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80206a02: 23 38 b4 fc  	sd	a1, -0x30(s0)
80206a06: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80206a0a: 83 35 04 fd  	ld	a1, -0x30(s0)
80206a0e: 03 35 84 fd  	ld	a0, -0x28(s0)
;     panic!("Heap allocation error, layout = {:?}", layout);
80206a12: 23 30 b4 fc  	sd	a1, -0x40(s0)
80206a16: 23 34 a4 fc  	sd	a0, -0x38(s0)

0000000080206a1a <.Lpcrel_hi9>:
80206a1a: 17 e5 02 00  	auipc	a0, 0x2e
80206a1e: 93 05 e5 c9  	addi	a1, a0, -0x362
80206a22: 13 05 04 f9  	addi	a0, s0, -0x70
80206a26: 23 3c a4 f6  	sd	a0, -0x88(s0)
80206a2a: 93 06 04 fc  	addi	a3, s0, -0x40
80206a2e: 05 47        	li	a4, 0x1
80206a30: 3a 86        	mv	a2, a4
80206a32: 97 10 00 00  	auipc	ra, 0x1
80206a36: e7 80 60 8b  	jalr	-0x74a(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
80206a3a: 03 35 84 f7  	ld	a0, -0x88(s0)

0000000080206a3e <.Lpcrel_hi10>:
80206a3e: 97 e5 02 00  	auipc	a1, 0x2e
80206a42: 93 85 a5 c8  	addi	a1, a1, -0x376
80206a46: 97 90 02 00  	auipc	ra, 0x29
80206a4a: e7 80 20 76  	jalr	0x762(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080206a4e <__rg_oom>:
; pub fn handle_alloc_error(layout: core::alloc::Layout) -> ! {
80206a4e: 01 11        	addi	sp, sp, -0x20
80206a50: 06 ec        	sd	ra, 0x18(sp)
80206a52: 22 e8        	sd	s0, 0x10(sp)
80206a54: 00 10        	addi	s0, sp, 0x20
80206a56: 23 30 a4 fe  	sd	a0, -0x20(s0)
80206a5a: 23 34 b4 fe  	sd	a1, -0x18(s0)
80206a5e: 97 d0 00 00  	auipc	ra, 0xd
80206a62: e7 80 e0 21  	jalr	0x21e(ra) <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hf24a76158b220961E>
80206a66: 97 00 00 00  	auipc	ra, 0x0
80206a6a: e7 80 80 f7  	jalr	-0x88(ra) <_ZN2os10lang_items18handle_alloc_error17h23b5fea19107d61aE>

0000000080206a6e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3dc1756d9911275eE>:
;     fn into(self) -> U {
80206a6e: 01 11        	addi	sp, sp, -0x20
80206a70: 06 ec        	sd	ra, 0x18(sp)
80206a72: 22 e8        	sd	s0, 0x10(sp)
80206a74: 00 10        	addi	s0, sp, 0x20
80206a76: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         U::from(self)
80206a7a: 97 50 00 00  	auipc	ra, 0x5
80206a7e: e7 80 c0 7d  	jalr	0x7dc(ra) <_ZN2os2vm81_$LT$impl$u20$core..convert..From$LT$os..vm..VirPageNum$GT$$u20$for$u20$usize$GT$4from17hcf507068f9c51afbE>
80206a82: e2 60        	ld	ra, 0x18(sp)
80206a84: 42 64        	ld	s0, 0x10(sp)
;     }
80206a86: 05 61        	addi	sp, sp, 0x20
80206a88: 82 80        	ret

0000000080206a8a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hafd30f1eda44114fE>:
;     fn into(self) -> U {
80206a8a: 01 11        	addi	sp, sp, -0x20
80206a8c: 06 ec        	sd	ra, 0x18(sp)
80206a8e: 22 e8        	sd	s0, 0x10(sp)
80206a90: 00 10        	addi	s0, sp, 0x20
80206a92: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         U::from(self)
80206a96: 97 50 00 00  	auipc	ra, 0x5
80206a9a: e7 80 c0 78  	jalr	0x78c(ra) <_ZN2os2vm81_$LT$impl$u20$core..convert..From$LT$os..vm..PhyPageNum$GT$$u20$for$u20$usize$GT$4from17h6f9eb10db9fd1873E>
80206a9e: e2 60        	ld	ra, 0x18(sp)
80206aa0: 42 64        	ld	s0, 0x10(sp)
;     }
80206aa2: 05 61        	addi	sp, sp, 0x20
80206aa4: 82 80        	ret

0000000080206aa6 <_ZN2os2vm10PhyPageNum7get_mut17h19933020b5e0b4d2E>:
;     pub fn get_mut<T>(&self) -> &'static mut T{
80206aa6: 39 71        	addi	sp, sp, -0x40
80206aa8: 06 fc        	sd	ra, 0x38(sp)
80206aaa: 22 f8        	sd	s0, 0x30(sp)
80206aac: 80 00        	addi	s0, sp, 0x40
80206aae: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         let pa :usize = self.clone().into();
80206ab2: 97 70 00 00  	auipc	ra, 0x7
80206ab6: e7 80 40 e7  	jalr	-0x18c(ra) <_ZN57_$LT$os..vm..PhyPageNum$u20$as$u20$core..clone..Clone$GT$5clone17h7eb991e43e797854E>

0000000080206aba <.Lpcrel_hi0>:
80206aba: 97 e5 02 00  	auipc	a1, 0x2e
80206abe: 93 85 65 c3  	addi	a1, a1, -0x3ca
80206ac2: 97 00 00 00  	auipc	ra, 0x0
80206ac6: e7 80 80 fc  	jalr	-0x38(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hafd30f1eda44114fE>
80206aca: 23 38 a4 fc  	sd	a0, -0x30(s0)

0000000080206ace <.Lpcrel_hi1>:
;         let pa :PhyAddr= pa.into();
80206ace: 97 e5 02 00  	auipc	a1, 0x2e
80206ad2: 93 85 a5 c3  	addi	a1, a1, -0x3c6
80206ad6: 97 50 00 00  	auipc	ra, 0x5
80206ada: e7 80 40 40  	jalr	0x404(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>
80206ade: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             (pa.0 as *mut T).as_mut().unwrap()
80206ae2: 97 d0 00 00  	auipc	ra, 0xd
80206ae6: e7 80 a0 45  	jalr	0x45a(ra) <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b6d23a51786f3b1E>
80206aea: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80206aee: 03 35 04 fe  	ld	a0, -0x20(s0)
80206af2: 11 e9        	bnez	a0, 0x80206b06 <.Lpcrel_hi2+0x10>
80206af4: 09 a0        	j	0x80206af6 <.Lpcrel_hi2>

0000000080206af6 <.Lpcrel_hi2>:
;             None => unwrap_failed(),
80206af6: 17 e5 02 00  	auipc	a0, 0x2e
80206afa: 13 05 a5 c2  	addi	a0, a0, -0x3d6
80206afe: 97 a0 02 00  	auipc	ra, 0x2a
80206b02: e7 80 a0 1c  	jalr	0x1ca(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206b06: 03 35 04 fe  	ld	a0, -0x20(s0)
80206b0a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80206b0e: e2 70        	ld	ra, 0x38(sp)
80206b10: 42 74        	ld	s0, 0x30(sp)
;     }
80206b12: 21 61        	addi	sp, sp, 0x40
80206b14: 82 80        	ret

0000000080206b16 <_ZN2os2vm10PhyPageNum7get_mut17ha8c9cddc5a191496E>:
;     pub fn get_mut<T>(&self) -> &'static mut T{
80206b16: 39 71        	addi	sp, sp, -0x40
80206b18: 06 fc        	sd	ra, 0x38(sp)
80206b1a: 22 f8        	sd	s0, 0x30(sp)
80206b1c: 80 00        	addi	s0, sp, 0x40
80206b1e: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         let pa :usize = self.clone().into();
80206b22: 97 70 00 00  	auipc	ra, 0x7
80206b26: e7 80 40 e0  	jalr	-0x1fc(ra) <_ZN57_$LT$os..vm..PhyPageNum$u20$as$u20$core..clone..Clone$GT$5clone17h7eb991e43e797854E>

0000000080206b2a <.Lpcrel_hi3>:
80206b2a: 97 e5 02 00  	auipc	a1, 0x2e
80206b2e: 93 85 65 bc  	addi	a1, a1, -0x43a
80206b32: 97 00 00 00  	auipc	ra, 0x0
80206b36: e7 80 80 f5  	jalr	-0xa8(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hafd30f1eda44114fE>
80206b3a: 23 38 a4 fc  	sd	a0, -0x30(s0)

0000000080206b3e <.Lpcrel_hi4>:
;         let pa :PhyAddr= pa.into();
80206b3e: 97 e5 02 00  	auipc	a1, 0x2e
80206b42: 93 85 a5 bc  	addi	a1, a1, -0x436
80206b46: 97 50 00 00  	auipc	ra, 0x5
80206b4a: e7 80 40 39  	jalr	0x394(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>
80206b4e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             (pa.0 as *mut T).as_mut().unwrap()
80206b52: 97 c0 ff ff  	auipc	ra, 0xffffc
80206b56: e7 80 c0 7e  	jalr	0x7ec(ra) <ekernel+0xffcb633e>
80206b5a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80206b5e: 03 35 04 fe  	ld	a0, -0x20(s0)
80206b62: 11 e9        	bnez	a0, 0x80206b76 <.Lpcrel_hi5+0x10>
80206b64: 09 a0        	j	0x80206b66 <.Lpcrel_hi5>

0000000080206b66 <.Lpcrel_hi5>:
;             None => unwrap_failed(),
80206b66: 17 e5 02 00  	auipc	a0, 0x2e
80206b6a: 13 05 a5 bb  	addi	a0, a0, -0x446
80206b6e: 97 a0 02 00  	auipc	ra, 0x2a
80206b72: e7 80 a0 15  	jalr	0x15a(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206b76: 03 35 04 fe  	ld	a0, -0x20(s0)
80206b7a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80206b7e: e2 70        	ld	ra, 0x38(sp)
80206b80: 42 74        	ld	s0, 0x30(sp)
;     }
80206b82: 21 61        	addi	sp, sp, 0x40
80206b84: 82 80        	ret

0000000080206b86 <_ZN2os2vm10PhyPageNum7get_mut17he79b9b118cf4aabaE>:
;     pub fn get_mut<T>(&self) -> &'static mut T{
80206b86: 39 71        	addi	sp, sp, -0x40
80206b88: 06 fc        	sd	ra, 0x38(sp)
80206b8a: 22 f8        	sd	s0, 0x30(sp)
80206b8c: 80 00        	addi	s0, sp, 0x40
80206b8e: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         let pa :usize = self.clone().into();
80206b92: 97 70 00 00  	auipc	ra, 0x7
80206b96: e7 80 40 d9  	jalr	-0x26c(ra) <_ZN57_$LT$os..vm..PhyPageNum$u20$as$u20$core..clone..Clone$GT$5clone17h7eb991e43e797854E>

0000000080206b9a <.Lpcrel_hi6>:
80206b9a: 97 e5 02 00  	auipc	a1, 0x2e
80206b9e: 93 85 65 b5  	addi	a1, a1, -0x4aa
80206ba2: 97 00 00 00  	auipc	ra, 0x0
80206ba6: e7 80 80 ee  	jalr	-0x118(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hafd30f1eda44114fE>
80206baa: 23 38 a4 fc  	sd	a0, -0x30(s0)

0000000080206bae <.Lpcrel_hi7>:
;         let pa :PhyAddr= pa.into();
80206bae: 97 e5 02 00  	auipc	a1, 0x2e
80206bb2: 93 85 a5 b5  	addi	a1, a1, -0x4a6
80206bb6: 97 50 00 00  	auipc	ra, 0x5
80206bba: e7 80 40 32  	jalr	0x324(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>
80206bbe: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             (pa.0 as *mut T).as_mut().unwrap()
80206bc2: 97 c0 ff ff  	auipc	ra, 0xffffc
80206bc6: e7 80 20 7b  	jalr	0x7b2(ra) <ekernel+0xffcb6374>
80206bca: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80206bce: 03 35 04 fe  	ld	a0, -0x20(s0)
80206bd2: 11 e9        	bnez	a0, 0x80206be6 <.Lpcrel_hi8+0x10>
80206bd4: 09 a0        	j	0x80206bd6 <.Lpcrel_hi8>

0000000080206bd6 <.Lpcrel_hi8>:
;             None => unwrap_failed(),
80206bd6: 17 e5 02 00  	auipc	a0, 0x2e
80206bda: 13 05 a5 b4  	addi	a0, a0, -0x4b6
80206bde: 97 a0 02 00  	auipc	ra, 0x2a
80206be2: e7 80 a0 0e  	jalr	0xea(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206be6: 03 35 04 fe  	ld	a0, -0x20(s0)
80206bea: 23 34 a4 fe  	sd	a0, -0x18(s0)
80206bee: e2 70        	ld	ra, 0x38(sp)
80206bf0: 42 74        	ld	s0, 0x30(sp)
;     }
80206bf2: 21 61        	addi	sp, sp, 0x40
80206bf4: 82 80        	ret

0000000080206bf6 <_ZN2os2vm9PageTable15tasnlate_refmut17hb77266f4f530763cE>:
;     pub fn tasnlate_refmut<T>(&mut self, ptr:*mut T) -> &'static mut T{
80206bf6: 59 71        	addi	sp, sp, -0x70
80206bf8: 86 f4        	sd	ra, 0x68(sp)
80206bfa: a2 f0        	sd	s0, 0x60(sp)
80206bfc: 80 18        	addi	s0, sp, 0x70
80206bfe: 23 38 a4 fa  	sd	a0, -0x50(s0)
80206c02: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         let va = ptr as usize;
80206c06: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         let offset = va % PGSZ;
80206c0a: 13 96 45 03  	slli	a2, a1, 0x34
80206c0e: 51 92        	srli	a2, a2, 0x34
80206c10: 23 30 c4 fa  	sd	a2, -0x60(s0)
80206c14: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         let pa_base = self.walk_addr(va).unwrap();
80206c18: 97 60 00 00  	auipc	ra, 0x6
80206c1c: e7 80 a0 08  	jalr	0x8a(ra) <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>
80206c20: 23 3c a4 fc  	sd	a0, -0x28(s0)
80206c24: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
80206c28: 03 35 84 fd  	ld	a0, -0x28(s0)
80206c2c: 11 e9        	bnez	a0, 0x80206c40 <.Lpcrel_hi9+0x10>
80206c2e: 09 a0        	j	0x80206c30 <.Lpcrel_hi9>

0000000080206c30 <.Lpcrel_hi9>:
;             None => unwrap_failed(),
80206c30: 17 e5 02 00  	auipc	a0, 0x2e
80206c34: 13 05 85 b0  	addi	a0, a0, -0x4f8
80206c38: 97 a0 02 00  	auipc	ra, 0x2a
80206c3c: e7 80 00 09  	jalr	0x90(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
80206c40: 03 35 04 fa  	ld	a0, -0x60(s0)
;             Some(val) => val,
80206c44: 83 35 04 fe  	ld	a1, -0x20(s0)
80206c48: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         let pa_base = self.walk_addr(va).unwrap();
80206c4c: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         let pa = PhyPageNum(pa_base+offset);
80206c50: 2e 95        	add	a0, a0, a1
80206c52: 23 3c a4 f8  	sd	a0, -0x68(s0)
80206c56: 63 61 b5 02  	bltu	a0, a1, 0x80206c78 <.Lpcrel_hi10>
80206c5a: 09 a0        	j	0x80206c5c <.Lpcrel_hi9+0x2c>
80206c5c: 03 35 84 f9  	ld	a0, -0x68(s0)
;         let pa = PhyPageNum(pa_base+offset);
80206c60: 23 34 a4 fa  	sd	a0, -0x58(s0)
80206c64: 13 05 84 fa  	addi	a0, s0, -0x58
;         pa.get_mut()
80206c68: 97 00 00 00  	auipc	ra, 0x0
80206c6c: e7 80 e0 f1  	jalr	-0xe2(ra) <_ZN2os2vm10PhyPageNum7get_mut17he79b9b118cf4aabaE>
80206c70: a6 70        	ld	ra, 0x68(sp)
80206c72: 06 74        	ld	s0, 0x60(sp)
;     }
80206c74: 65 61        	addi	sp, sp, 0x70
80206c76: 82 80        	ret

0000000080206c78 <.Lpcrel_hi10>:
;         let pa = PhyPageNum(pa_base+offset);
80206c78: 17 e5 02 00  	auipc	a0, 0x2e
80206c7c: 13 05 85 af  	addi	a0, a0, -0x508

0000000080206c80 <.Lpcrel_hi11>:
80206c80: 97 e5 02 00  	auipc	a1, 0x2e
80206c84: 13 86 05 ad  	addi	a2, a1, -0x530
80206c88: f1 45        	li	a1, 0x1c
80206c8a: 97 90 02 00  	auipc	ra, 0x29
80206c8e: e7 80 e0 58  	jalr	0x58e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080206c92 <_ZN2os7syscall7process9sys_yield17h2c17cbb7c7541c27E>:
; pub fn sys_yield() -> isize{
80206c92: 79 71        	addi	sp, sp, -0x30
80206c94: 06 f4        	sd	ra, 0x28(sp)
80206c96: 22 f0        	sd	s0, 0x20(sp)
80206c98: 00 18        	addi	s0, sp, 0x30

0000000080206c9a <.Lpcrel_hi0>:
;     let proc = CPUS.my_proc().unwrap();
80206c9a: 17 55 34 00  	auipc	a0, 0x345
80206c9e: 13 05 65 56  	addi	a0, a0, 0x566
80206ca2: 97 20 01 00  	auipc	ra, 0x12
80206ca6: e7 80 a0 7f  	jalr	0x7fa(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80206caa: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80206cae: 03 35 04 fe  	ld	a0, -0x20(s0)
80206cb2: 11 e9        	bnez	a0, 0x80206cc6 <.Lpcrel_hi1+0x10>
80206cb4: 09 a0        	j	0x80206cb6 <.Lpcrel_hi1>

0000000080206cb6 <.Lpcrel_hi1>:
;             None => unwrap_failed(),
80206cb6: 17 e5 02 00  	auipc	a0, 0x2e
80206cba: 13 05 25 af  	addi	a0, a0, -0x50e
80206cbe: 97 a0 02 00  	auipc	ra, 0x2a
80206cc2: e7 80 a0 00  	jalr	0xa(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206cc6: 03 35 04 fe  	ld	a0, -0x20(s0)
80206cca: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let proc = CPUS.my_proc().unwrap();
80206cce: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     proc.yielding();
80206cd2: 97 b0 ff ff  	auipc	ra, 0xffffb
80206cd6: e7 80 a0 0f  	jalr	0xfa(ra) <ekernel+0xffcb4dcc>
80206cda: 97 80 00 00  	auipc	ra, 0x8
80206cde: e7 80 00 32  	jalr	0x320(ra) <_ZN2os4task4task16TaskControlBlock8yielding17hc4a42e6d7870a0eaE>
80206ce2: 01 45        	li	a0, 0x0
80206ce4: a2 70        	ld	ra, 0x28(sp)
80206ce6: 02 74        	ld	s0, 0x20(sp)
; }
80206ce8: 45 61        	addi	sp, sp, 0x30
80206cea: 82 80        	ret

0000000080206cec <_ZN2os7syscall7process8sys_exit17h517ef4e4aa5da1fbE>:
; pub fn sys_exit(exit_code:i32) -> ! {
80206cec: 01 11        	addi	sp, sp, -0x20
80206cee: 06 ec        	sd	ra, 0x18(sp)
80206cf0: 22 e8        	sd	s0, 0x10(sp)
80206cf2: 00 10        	addi	s0, sp, 0x20
80206cf4: 23 26 a4 fe  	sw	a0, -0x14(s0)
;     exit(exit_code);
80206cf8: 97 a0 00 00  	auipc	ra, 0xa
80206cfc: e7 80 20 62  	jalr	0x622(ra) <_ZN2os4task4exit17hb1cac5637418cca8E>

0000000080206d00 <.Lpcrel_hi2>:
;     panic!()
80206d00: 17 e5 02 00  	auipc	a0, 0x2e
80206d04: 13 05 05 ac  	addi	a0, a0, -0x540
80206d08: 97 00 00 00  	auipc	ra, 0x0
80206d0c: e7 80 40 4a  	jalr	0x4a4(ra) <_ZN2os7syscall7process8sys_exit19panic_cold_explicit17hb95a3d9d222cdf89E>

0000000080206d10 <_ZN2os7syscall7process8sys_fork17ha24f419be4ca0515E>:
; pub fn sys_fork() -> isize{
80206d10: 59 71        	addi	sp, sp, -0x70
80206d12: 86 f4        	sd	ra, 0x68(sp)
80206d14: a2 f0        	sd	s0, 0x60(sp)
80206d16: 80 18        	addi	s0, sp, 0x70

0000000080206d18 <.Lpcrel_hi3>:
;     let current_task  = CPUS.my_proc().unwrap();
80206d18: 17 55 34 00  	auipc	a0, 0x345
80206d1c: 13 05 85 4e  	addi	a0, a0, 0x4e8
80206d20: 97 20 01 00  	auipc	ra, 0x12
80206d24: e7 80 c0 77  	jalr	0x77c(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80206d28: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80206d2c: 03 35 04 fe  	ld	a0, -0x20(s0)
80206d30: 11 e9        	bnez	a0, 0x80206d44 <.Lpcrel_hi4+0x10>
80206d32: 09 a0        	j	0x80206d34 <.Lpcrel_hi4>

0000000080206d34 <.Lpcrel_hi4>:
;             None => unwrap_failed(),
80206d34: 17 e5 02 00  	auipc	a0, 0x2e
80206d38: 13 05 45 aa  	addi	a0, a0, -0x55c
80206d3c: 97 a0 02 00  	auipc	ra, 0x2a
80206d40: e7 80 c0 f8  	jalr	-0x74(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206d44: 03 35 04 fe  	ld	a0, -0x20(s0)
80206d48: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let current_task  = CPUS.my_proc().unwrap();
80206d4c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     let new_task = current_task.fork();
80206d50: 97 80 00 00  	auipc	ra, 0x8
80206d54: e7 80 20 94  	jalr	-0x6be(ra) <_ZN2os4task4task16TaskControlBlock4fork17hc04b4183a208e783E>
80206d58: 23 38 a4 fa  	sd	a0, -0x50(s0)
80206d5c: 13 05 04 fb  	addi	a0, s0, -0x50
80206d60: 23 3c a4 f8  	sd	a0, -0x68(s0)
;     let new_pid = new_task.pid();
80206d64: 97 b0 ff ff  	auipc	ra, 0xffffb
80206d68: e7 80 80 06  	jalr	0x68(ra) <ekernel+0xffcb4dcc>
80206d6c: 97 70 00 00  	auipc	ra, 0x7
80206d70: e7 80 60 30  	jalr	0x306(ra) <_ZN2os4task4task16TaskControlBlock3pid17h1ef377ec86e4a976E>
80206d74: aa 85        	mv	a1, a0
80206d76: 03 35 84 f9  	ld	a0, -0x68(s0)
80206d7a: 23 34 b4 fa  	sd	a1, -0x58(s0)
80206d7e: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     let new_trapframe = new_task.get_trapframe();
80206d82: 97 b0 ff ff  	auipc	ra, 0xffffb
80206d86: e7 80 a0 04  	jalr	0x4a(ra) <ekernel+0xffcb4dcc>
80206d8a: 97 70 00 00  	auipc	ra, 0x7
80206d8e: e7 80 c0 4b  	jalr	0x4bc(ra) <_ZN2os4task4task16TaskControlBlock13get_trapframe17h5eacf2fb51701e7bE>
80206d92: aa 85        	mv	a1, a0
80206d94: 23 3c b4 fc  	sd	a1, -0x28(s0)
80206d98: 01 45        	li	a0, 0x0
;     new_trapframe.a0 = 0;
80206d9a: a8 f9        	sd	a0, 0x70(a1)

0000000080206d9c <.Lpcrel_hi5>:
;     unsafe { TASKMANGER.lock().add_task(new_task)};
80206d9c: 17 05 03 00  	auipc	a0, 0x30
80206da0: 13 05 c5 5a  	addi	a0, a0, 0x5ac
80206da4: 97 20 01 00  	auipc	ra, 0x12
80206da8: e7 80 60 b3  	jalr	-0x4ca(ra) <_ZN73_$LT$os..task..manager..TASKMANGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13a6a188e04fdd86E>
80206dac: 97 c0 00 00  	auipc	ra, 0xc
80206db0: e7 80 80 3d  	jalr	0x3d8(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17ha7c692bd7ee4f1cfE>
80206db4: 23 3c a4 fa  	sd	a0, -0x48(s0)
80206db8: 23 30 b4 fc  	sd	a1, -0x40(s0)
80206dbc: 13 05 84 fb  	addi	a0, s0, -0x48
80206dc0: 23 30 a4 fa  	sd	a0, -0x60(s0)
80206dc4: 97 d0 00 00  	auipc	ra, 0xd
80206dc8: e7 80 40 df  	jalr	-0x20c(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2f6946418d8b1239E>
80206dcc: 83 35 04 fb  	ld	a1, -0x50(s0)
80206dd0: 97 10 01 00  	auipc	ra, 0x11
80206dd4: e7 80 80 2c  	jalr	0x2c8(ra) <_ZN2os4task7manager11TaskManager8add_task17hcc122bf2f11e487eE>
80206dd8: 03 35 04 fa  	ld	a0, -0x60(s0)
80206ddc: 97 10 00 00  	auipc	ra, 0x1
80206de0: e7 80 60 74  	jalr	0x746(ra) <_ZN4core3ptr84drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..task..manager..TaskManager$GT$$GT$17haf6d50c6bfeb102bE>
80206de4: 03 35 84 fa  	ld	a0, -0x58(s0)
80206de8: a6 70        	ld	ra, 0x68(sp)
80206dea: 06 74        	ld	s0, 0x60(sp)
; }
80206dec: 65 61        	addi	sp, sp, 0x70
80206dee: 82 80        	ret

0000000080206df0 <_ZN2os7syscall7process8sys_exec17h353ae9b22f634491E>:
; pub fn sys_exec(path :*const u8) -> isize {
80206df0: 15 71        	addi	sp, sp, -0xe0
80206df2: 86 ed        	sd	ra, 0xd8(sp)
80206df4: a2 e9        	sd	s0, 0xd0(sp)
80206df6: 80 11        	addi	s0, sp, 0xe0
80206df8: 23 34 a4 f6  	sd	a0, -0x98(s0)
80206dfc: 23 38 a4 fc  	sd	a0, -0x30(s0)
80206e00: 01 45        	li	a0, 0x0
;     let task = CPUS.my_proc().unwrap();
80206e02: a3 07 a4 fc  	sb	a0, -0x31(s0)

0000000080206e06 <.Lpcrel_hi6>:
80206e06: 17 55 34 00  	auipc	a0, 0x345
80206e0a: 13 05 a5 3f  	addi	a0, a0, 0x3fa
80206e0e: 97 20 01 00  	auipc	ra, 0x12
80206e12: e7 80 e0 68  	jalr	0x68e(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80206e16: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80206e1a: 03 35 04 fe  	ld	a0, -0x20(s0)
80206e1e: 11 e9        	bnez	a0, 0x80206e32 <.Lpcrel_hi7+0x10>
80206e20: 09 a0        	j	0x80206e22 <.Lpcrel_hi7>

0000000080206e22 <.Lpcrel_hi7>:
;             None => unwrap_failed(),
80206e22: 17 e5 02 00  	auipc	a0, 0x2e
80206e26: 13 05 e5 9c  	addi	a0, a0, -0x632
80206e2a: 97 a0 02 00  	auipc	ra, 0x2a
80206e2e: e7 80 e0 e9  	jalr	-0x162(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206e32: 03 35 04 fe  	ld	a0, -0x20(s0)
80206e36: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80206e3a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let task = CPUS.my_proc().unwrap();
80206e3e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     let path = task.inner_mut().pagetable().translated_str(path);
80206e42: 97 b0 ff ff  	auipc	ra, 0xffffb
80206e46: e7 80 a0 f8  	jalr	-0x76(ra) <ekernel+0xffcb4dcc>
80206e4a: 97 70 00 00  	auipc	ra, 0x7
80206e4e: e7 80 c0 3d  	jalr	0x3dc(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80206e52: 23 38 a4 f8  	sd	a0, -0x70(s0)
80206e56: 23 3c b4 f8  	sd	a1, -0x68(s0)
80206e5a: 13 05 04 f9  	addi	a0, s0, -0x70
80206e5e: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80206e62: 97 a0 ff ff  	auipc	ra, 0xffffa
80206e66: e7 80 40 d3  	jalr	-0x2cc(ra) <ekernel+0xffcb3b96>
80206e6a: 97 70 00 00  	auipc	ra, 0x7
80206e6e: e7 80 20 c8  	jalr	-0x37e(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
80206e72: 03 36 84 f6  	ld	a2, -0x98(s0)
80206e76: 0c 61        	ld	a1, 0x0(a0)
80206e78: 13 05 84 f7  	addi	a0, s0, -0x88
80206e7c: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80206e80: 97 60 00 00  	auipc	ra, 0x6
80206e84: e7 80 00 3a  	jalr	0x3a0(ra) <_ZN2os2vm9PageTable14translated_str17hd3ebdd22cc59e034E>
80206e88: 03 35 84 f5  	ld	a0, -0xa8(s0)
80206e8c: 97 10 00 00  	auipc	ra, 0x1
80206e90: e7 80 40 38  	jalr	0x384(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80206e94: 03 35 04 f6  	ld	a0, -0xa0(s0)
;     if let Some(app_inode) = open_file(path.as_str(), READONLY){
80206e98: 97 50 00 00  	auipc	ra, 0x5
80206e9c: e7 80 a0 1b  	jalr	0x1ba(ra) <_ZN5alloc6string6String6as_str17hf11a06c050b113a3E>
80206ea0: 01 46        	li	a2, 0x0
80206ea2: 97 b0 ff ff  	auipc	ra, 0xffffb
80206ea6: e7 80 20 5c  	jalr	0x5c2(ra) <ekernel+0xffcb5464>
80206eaa: 23 30 a4 fa  	sd	a0, -0x60(s0)
80206eae: 05 45        	li	a0, 0x1
80206eb0: a3 07 a4 fc  	sb	a0, -0x31(s0)
80206eb4: 03 35 04 fa  	ld	a0, -0x60(s0)
80206eb8: 41 c9        	beqz	a0, 0x80206f48 <.Lpcrel_hi7+0x126>
80206eba: 09 a0        	j	0x80206ebc <.Lpcrel_hi7+0x9a>
80206ebc: 01 45        	li	a0, 0x0
80206ebe: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;     if let Some(app_inode) = open_file(path.as_str(), READONLY){
80206ec2: a3 07 a4 fc  	sb	a0, -0x31(s0)
80206ec6: 03 35 04 fa  	ld	a0, -0x60(s0)
80206eca: 23 34 a4 fa  	sd	a0, -0x58(s0)
80206ece: 13 05 84 fa  	addi	a0, s0, -0x58
80206ed2: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;         let all_data = app_inode.read_all();
80206ed6: 97 b0 ff ff  	auipc	ra, 0xffffb
80206eda: e7 80 20 ed  	jalr	-0x12e(ra) <ekernel+0xffcb4da8>
80206ede: aa 85        	mv	a1, a0
80206ee0: 13 05 04 fb  	addi	a0, s0, -0x50
80206ee4: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80206ee8: 97 b0 ff ff  	auipc	ra, 0xffffb
80206eec: e7 80 c0 04  	jalr	0x4c(ra) <ekernel+0xffcb4f34>
80206ef0: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         task.exec(all_data.as_slice());
80206ef4: 97 b0 ff ff  	auipc	ra, 0xffffb
80206ef8: e7 80 80 ed  	jalr	-0x128(ra) <ekernel+0xffcb4dcc>
80206efc: aa 85        	mv	a1, a0
80206efe: 03 35 04 f4  	ld	a0, -0xc0(s0)
80206f02: 23 34 b4 f2  	sd	a1, -0xd8(s0)
80206f06: 97 e0 00 00  	auipc	ra, 0xe
80206f0a: e7 80 a0 fa  	jalr	-0x56(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hb1e4d923a4a7dc1eE>
80206f0e: 2a 86        	mv	a2, a0
80206f10: 03 35 84 f2  	ld	a0, -0xd8(s0)
80206f14: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80206f18: 2e 86        	mv	a2, a1
80206f1a: 83 35 04 f3  	ld	a1, -0xd0(s0)
80206f1e: 97 80 00 00  	auipc	ra, 0x8
80206f22: e7 80 60 e4  	jalr	-0x1ba(ra) <_ZN2os4task4task16TaskControlBlock4exec17h6caf76ad6af7b1edE>
80206f26: 83 35 84 f3  	ld	a1, -0xc8(s0)
80206f2a: 03 35 04 f4  	ld	a0, -0xc0(s0)
;         0
80206f2e: 23 38 b4 f6  	sd	a1, -0x90(s0)
;     }else {
80206f32: 97 10 00 00  	auipc	ra, 0x1
80206f36: e7 80 40 ef  	jalr	-0x10c(ra) <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hb2c11e0757f8d666E>
80206f3a: 03 35 84 f4  	ld	a0, -0xb8(s0)
80206f3e: 97 10 00 00  	auipc	ra, 0x1
80206f42: e7 80 00 3a  	jalr	0x3a0(ra) <_ZN4core3ptr75drop_in_place$LT$alloc..sync..Arc$LT$os..filesystem..inode..OSinode$GT$$GT$17h10c0ef47ef01150bE>
80206f46: 29 a0        	j	0x80206f50 <.Lpcrel_hi7+0x12e>
80206f48: 7d 55        	li	a0, -0x1
;         -1
80206f4a: 23 38 a4 f6  	sd	a0, -0x90(s0)
;     if let Some(app_inode) = open_file(path.as_str(), READONLY){
80206f4e: 09 a0        	j	0x80206f50 <.Lpcrel_hi7+0x12e>
80206f50: 13 05 84 f7  	addi	a0, s0, -0x88
; }
80206f54: 97 10 00 00  	auipc	ra, 0x1
80206f58: e7 80 80 e2  	jalr	-0x1d8(ra) <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17hf68a660302d4d33fE>
80206f5c: 03 35 04 fa  	ld	a0, -0x60(s0)
80206f60: 19 c5        	beqz	a0, 0x80206f6e <.Lpcrel_hi7+0x14c>
80206f62: 09 a0        	j	0x80206f64 <.Lpcrel_hi7+0x142>
80206f64: 03 45 f4 fc  	lbu	a0, -0x31(s0)
80206f68: 05 89        	andi	a0, a0, 0x1
80206f6a: 19 e9        	bnez	a0, 0x80206f80 <.Lpcrel_hi7+0x15e>
80206f6c: 09 a0        	j	0x80206f6e <.Lpcrel_hi7+0x14c>
80206f6e: 01 45        	li	a0, 0x0
; }
80206f70: a3 07 a4 fc  	sb	a0, -0x31(s0)
80206f74: 03 35 04 f7  	ld	a0, -0x90(s0)
80206f78: ee 60        	ld	ra, 0xd8(sp)
80206f7a: 4e 64        	ld	s0, 0xd0(sp)
80206f7c: 2d 61        	addi	sp, sp, 0xe0
80206f7e: 82 80        	ret
80206f80: 13 05 04 fa  	addi	a0, s0, -0x60
; }
80206f84: 97 10 00 00  	auipc	ra, 0x1
80206f88: e7 80 a0 35  	jalr	0x35a(ra) <_ZN4core3ptr75drop_in_place$LT$alloc..sync..Arc$LT$os..filesystem..inode..OSinode$GT$$GT$17h10c0ef47ef01150bE>
80206f8c: cd b7        	j	0x80206f6e <.Lpcrel_hi7+0x14c>

0000000080206f8e <_ZN2os7syscall7process11sys_waitpid17ha8b28e308316662eE>:
; pub fn sys_waitpid(pid:isize,exit_code_ptr:*mut i32) -> isize {
80206f8e: 6d 71        	addi	sp, sp, -0x110
80206f90: 06 e6        	sd	ra, 0x108(sp)
80206f92: 22 e2        	sd	s0, 0x100(sp)
80206f94: 00 0a        	addi	s0, sp, 0x110
80206f96: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80206f9a: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80206f9e: 23 3c b4 fa  	sd	a1, -0x48(s0)

0000000080206fa2 <.Lpcrel_hi8>:
;     let task = CPUS.my_proc().unwrap();
80206fa2: 17 55 34 00  	auipc	a0, 0x345
80206fa6: 13 05 e5 25  	addi	a0, a0, 0x25e
80206faa: 97 20 01 00  	auipc	ra, 0x12
80206fae: e7 80 20 4f  	jalr	0x4f2(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80206fb2: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80206fb6: 03 35 04 fe  	ld	a0, -0x20(s0)
80206fba: 11 e9        	bnez	a0, 0x80206fce <.Lpcrel_hi9+0x10>
80206fbc: 09 a0        	j	0x80206fbe <.Lpcrel_hi9>

0000000080206fbe <.Lpcrel_hi9>:
;             None => unwrap_failed(),
80206fbe: 17 e5 02 00  	auipc	a0, 0x2e
80206fc2: 13 05 a5 84  	addi	a0, a0, -0x7b6
80206fc6: 97 a0 02 00  	auipc	ra, 0x2a
80206fca: e7 80 20 d0  	jalr	-0x2fe(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80206fce: 03 35 04 fe  	ld	a0, -0x20(s0)
80206fd2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let task = CPUS.my_proc().unwrap();
80206fd6: 23 30 a4 fc  	sd	a0, -0x40(s0)
;     let mut inner = task.inner_mut();
80206fda: 97 b0 ff ff  	auipc	ra, 0xffffb
80206fde: e7 80 20 df  	jalr	-0x20e(ra) <ekernel+0xffcb4dcc>
80206fe2: 97 70 00 00  	auipc	ra, 0x7
80206fe6: e7 80 40 24  	jalr	0x244(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
80206fea: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80206fee: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80206ff2: 13 05 84 f4  	addi	a0, s0, -0xb8
;     if !inner
80206ff6: 97 a0 ff ff  	auipc	ra, 0xffffa
80206ffa: e7 80 e0 b7  	jalr	-0x482(ra) <ekernel+0xffcb3b74>
80206ffe: 13 05 05 03  	addi	a0, a0, 0x30
80207002: 97 e0 00 00  	auipc	ra, 0xe
80207006: e7 80 20 fb  	jalr	-0x4e(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h85c6f64a20f56b2fE>
8020700a: 97 a0 ff ff  	auipc	ra, 0xffffa
8020700e: e7 80 80 65  	jalr	0x658(ra) <ekernel+0xffcb4662>
80207012: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80207016: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8020701a: 13 05 84 f3  	addi	a0, s0, -0xc8
;         .any(|p| pid == -1 || pid as usize == p.pid())
8020701e: 23 34 a4 f6  	sd	a0, -0x98(s0)
;     if !inner
80207022: 83 35 84 f6  	ld	a1, -0x98(s0)
80207026: 13 05 84 f5  	addi	a0, s0, -0xa8
8020702a: 97 50 00 00  	auipc	ra, 0x5
8020702e: e7 80 a0 93  	jalr	-0x6c6(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E>
80207032: 01 ed        	bnez	a0, 0x8020704a <.Lpcrel_hi9+0x8c>
80207034: 09 a0        	j	0x80207036 <.Lpcrel_hi9+0x78>
80207036: 7d 55        	li	a0, -0x1
;         return -1;
80207038: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8020703c: 13 05 84 f4  	addi	a0, s0, -0xb8
; }
80207040: 97 10 00 00  	auipc	ra, 0x1
80207044: e7 80 00 1d  	jalr	0x1d0(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
80207048: 95 a0        	j	0x802070ac <.Lpcrel_hi9+0xee>
8020704a: 13 05 84 f4  	addi	a0, s0, -0xb8
;     let pair = inner.children.iter().enumerate().find(|(_,p)|{
8020704e: 97 a0 ff ff  	auipc	ra, 0xffffa
80207052: e7 80 60 b2  	jalr	-0x4da(ra) <ekernel+0xffcb3b74>
80207056: 13 05 05 03  	addi	a0, a0, 0x30
8020705a: 97 e0 00 00  	auipc	ra, 0xe
8020705e: e7 80 a0 f5  	jalr	-0xa6(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h85c6f64a20f56b2fE>
80207062: 97 a0 ff ff  	auipc	ra, 0xffffa
80207066: e7 80 00 60  	jalr	0x600(ra) <ekernel+0xffcb4662>
8020706a: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8020706e: 2e 86        	mv	a2, a1
80207070: 83 35 04 f2  	ld	a1, -0xe0(s0)
80207074: 13 05 04 f8  	addi	a0, s0, -0x80
80207078: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8020707c: 97 40 00 00  	auipc	ra, 0x4
80207080: e7 80 80 7e  	jalr	0x7e8(ra) <_ZN4core4iter6traits8iterator8Iterator9enumerate17h17d351a8c8e38888E>
80207084: 03 35 84 f2  	ld	a0, -0xd8(s0)
80207088: 93 05 84 f3  	addi	a1, s0, -0xc8
8020708c: 23 3c b4 f8  	sd	a1, -0x68(s0)
80207090: 83 35 84 f9  	ld	a1, -0x68(s0)
80207094: 97 a0 ff ff  	auipc	ra, 0xffffa
80207098: e7 80 80 f7  	jalr	-0x88(ra) <ekernel+0xffcb400c>
8020709c: 23 38 a4 f6  	sd	a0, -0x90(s0)
802070a0: 23 3c b4 f6  	sd	a1, -0x88(s0)
;     if let Some((idx,_)) = pair{
802070a4: 03 35 84 f7  	ld	a0, -0x88(s0)
802070a8: 01 e9        	bnez	a0, 0x802070b8 <.Lpcrel_hi9+0xfa>
802070aa: f5 a0        	j	0x80207196 <.Lpcrel_hi10+0xba>
; }
802070ac: 03 35 04 f4  	ld	a0, -0xc0(s0)
802070b0: b2 60        	ld	ra, 0x108(sp)
802070b2: 12 64        	ld	s0, 0x100(sp)
802070b4: 51 61        	addi	sp, sp, 0x110
802070b6: 82 80        	ret
;     if let Some((idx,_)) = pair{
802070b8: 03 35 04 f7  	ld	a0, -0x90(s0)
802070bc: 23 38 a4 ee  	sd	a0, -0x110(s0)
802070c0: 23 34 a4 fc  	sd	a0, -0x38(s0)
802070c4: 13 05 84 f4  	addi	a0, s0, -0xb8
802070c8: 23 30 a4 f0  	sd	a0, -0x100(s0)
;         let child = inner.children.remove(idx);
802070cc: 97 a0 ff ff  	auipc	ra, 0xffffa
802070d0: e7 80 a0 ac  	jalr	-0x536(ra) <ekernel+0xffcb3b96>
802070d4: 83 35 04 ef  	ld	a1, -0x110(s0)
802070d8: 13 05 05 03  	addi	a0, a0, 0x30

00000000802070dc <.Lpcrel_hi10>:
802070dc: 17 d6 02 00  	auipc	a2, 0x2d
802070e0: 13 06 46 74  	addi	a2, a2, 0x744
802070e4: 97 e0 00 00  	auipc	ra, 0xe
802070e8: e7 80 a0 c8  	jalr	-0x376(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove17haf8db81a47f2fed3E>
802070ec: 23 30 a4 fa  	sd	a0, -0x60(s0)
802070f0: 13 05 04 fa  	addi	a0, s0, -0x60
802070f4: 23 3c a4 f0  	sd	a0, -0xe8(s0)
;         let found_pid = child.pid() as isize;
802070f8: 97 b0 ff ff  	auipc	ra, 0xffffb
802070fc: e7 80 40 cd  	jalr	-0x32c(ra) <ekernel+0xffcb4dcc>
80207100: 97 70 00 00  	auipc	ra, 0x7
80207104: e7 80 20 f7  	jalr	-0x8e(ra) <_ZN2os4task4task16TaskControlBlock3pid17h1ef377ec86e4a976E>
80207108: aa 85        	mv	a1, a0
8020710a: 03 35 84 f1  	ld	a0, -0xe8(s0)
8020710e: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80207112: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         let exit_code = unsafe { child.out_data.lock() }.xstate;
80207116: 97 b0 ff ff  	auipc	ra, 0xffffb
8020711a: e7 80 60 cb  	jalr	-0x34a(ra) <ekernel+0xffcb4dcc>
8020711e: 97 c0 00 00  	auipc	ra, 0xc
80207122: e7 80 a0 dd  	jalr	-0x226(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7cf5583f2d8e897eE>
80207126: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020712a: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020712e: 13 05 84 fa  	addi	a0, s0, -0x58
80207132: 23 3c a4 ee  	sd	a0, -0x108(s0)
80207136: 97 d0 00 00  	auipc	ra, 0xd
8020713a: e7 80 e0 a2  	jalr	-0x5d2(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd8605aecacba44f4E>
8020713e: aa 85        	mv	a1, a0
80207140: 03 35 84 ef  	ld	a0, -0x108(s0)
80207144: 8c 51        	lw	a1, 0x20(a1)
80207146: 23 34 b4 f0  	sd	a1, -0xf8(s0)
8020714a: 23 2e b4 fc  	sw	a1, -0x24(s0)
8020714e: 97 10 00 00  	auipc	ra, 0x1
80207152: e7 80 40 1e  	jalr	0x1e4(ra) <_ZN4core3ptr76drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..task..task..TcbOut$GT$$GT$17h464cfbdf4ef3ff12E>
80207156: 03 35 04 f0  	ld	a0, -0x100(s0)
;         *(inner.pagetable().tasnlate_refmut(exit_code_ptr)) = exit_code;
8020715a: 97 a0 ff ff  	auipc	ra, 0xffffa
8020715e: e7 80 c0 a3  	jalr	-0x5c4(ra) <ekernel+0xffcb3b96>
80207162: 97 70 00 00  	auipc	ra, 0x7
80207166: e7 80 a0 98  	jalr	-0x676(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
8020716a: 83 35 04 f3  	ld	a1, -0xd0(s0)
8020716e: 08 61        	ld	a0, 0x0(a0)
80207170: 97 00 00 00  	auipc	ra, 0x0
80207174: e7 80 60 a8  	jalr	-0x57a(ra) <_ZN2os2vm9PageTable15tasnlate_refmut17hb77266f4f530763cE>
80207178: 03 36 84 f0  	ld	a2, -0xf8(s0)
8020717c: 83 35 04 f1  	ld	a1, -0xf0(s0)
80207180: aa 86        	mv	a3, a0
80207182: 03 35 84 f1  	ld	a0, -0xe8(s0)
80207186: 90 c2        	sw	a2, 0x0(a3)
;         found_pid
80207188: 23 30 b4 f4  	sd	a1, -0xc0(s0)
;     }else {
8020718c: 97 10 00 00  	auipc	ra, 0x1
80207190: e7 80 40 1d  	jalr	0x1d4(ra) <_ZN4core3ptr77drop_in_place$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$17h7fe297b01037ef7cE>
80207194: 29 a0        	j	0x8020719e <.Lpcrel_hi10+0xc2>
80207196: 79 55        	li	a0, -0x2
;         -2
80207198: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     if let Some((idx,_)) = pair{
8020719c: 09 a0        	j	0x8020719e <.Lpcrel_hi10+0xc2>
8020719e: 13 05 84 f4  	addi	a0, s0, -0xb8
; }
802071a2: 97 10 00 00  	auipc	ra, 0x1
802071a6: e7 80 e0 06  	jalr	0x6e(ra) <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>
802071aa: 09 b7        	j	0x802070ac <.Lpcrel_hi9+0xee>

00000000802071ac <_ZN2os7syscall7process8sys_exit19panic_cold_explicit17hb95a3d9d222cdf89E>:
;         const fn panic_cold_explicit() -> ! {
802071ac: 41 11        	addi	sp, sp, -0x10
802071ae: 06 e4        	sd	ra, 0x8(sp)
802071b0: 22 e0        	sd	s0, 0x0(sp)
802071b2: 00 08        	addi	s0, sp, 0x10
;             $crate::panicking::panic_explicit()
802071b4: 97 90 02 00  	auipc	ra, 0x29
802071b8: e7 80 c0 0b  	jalr	0xbc(ra) <_ZN4core9panicking14panic_explicit17h498d6efec0ee05d9E>

00000000802071bc <_ZN4core3fmt9Arguments12as_const_str17h943ebf99381543c9E>:
;     fn as_const_str(&self) -> Option<&'static str> {
802071bc: 59 71        	addi	sp, sp, -0x70
802071be: 86 f4        	sd	ra, 0x68(sp)
802071c0: a2 f0        	sd	s0, 0x60(sp)
802071c2: 80 18        	addi	s0, sp, 0x70
802071c4: aa 85        	mv	a1, a0
802071c6: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         match (self.pieces, self.args) {
802071ca: 88 61        	ld	a0, 0x0(a1)
802071cc: 23 38 a4 f8  	sd	a0, -0x70(s0)
802071d0: 88 65        	ld	a0, 0x8(a1)
802071d2: 23 3c a4 f8  	sd	a0, -0x68(s0)
802071d6: 8c 6d        	ld	a1, 0x18(a1)
802071d8: 23 30 b4 fa  	sd	a1, -0x60(s0)
;             ([], []) => Some(""),
802071dc: 11 e5        	bnez	a0, 0x802071e8 <_ZN4core3fmt9Arguments12as_const_str17h943ebf99381543c9E+0x2c>
802071de: 09 a0        	j	0x802071e0 <_ZN4core3fmt9Arguments12as_const_str17h943ebf99381543c9E+0x24>
802071e0: 03 35 04 fa  	ld	a0, -0x60(s0)
;             ([], []) => Some(""),
802071e4: 01 c9        	beqz	a0, 0x802071f4 <.Lpcrel_hi0>
802071e6: 0d a0        	j	0x80207208 <.Lpcrel_hi1>
802071e8: 03 35 84 f9  	ld	a0, -0x68(s0)
802071ec: 85 45        	li	a1, 0x1
;             ([s], []) => Some(s),
802071ee: 63 00 b5 04  	beq	a0, a1, 0x8020722e <.Lpcrel_hi1+0x26>
802071f2: 19 a8        	j	0x80207208 <.Lpcrel_hi1>

00000000802071f4 <.Lpcrel_hi0>:
;             ([], []) => Some(""),
802071f4: 17 d5 02 00  	auipc	a0, 0x2d
802071f8: 13 05 45 64  	addi	a0, a0, 0x644
802071fc: 23 3c a4 fa  	sd	a0, -0x48(s0)
80207200: 01 45        	li	a0, 0x0
80207202: 23 30 a4 fc  	sd	a0, -0x40(s0)
80207206: 21 a8        	j	0x8020721e <.Lpcrel_hi1+0x16>

0000000080207208 <.Lpcrel_hi1>:
;             _ => None,
80207208: 17 c5 02 00  	auipc	a0, 0x2c
8020720c: 13 05 85 08  	addi	a0, a0, 0x88
80207210: 0c 61        	ld	a1, 0x0(a0)
80207212: 08 65        	ld	a0, 0x8(a0)
80207214: 23 3c b4 fa  	sd	a1, -0x48(s0)
80207218: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020721c: 09 a0        	j	0x8020721e <.Lpcrel_hi1+0x16>
8020721e: 13 05 84 fb  	addi	a0, s0, -0x48
;         if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
80207222: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         matches!(*self, Some(_))
80207226: 03 35 84 fb  	ld	a0, -0x48(s0)
8020722a: 0d e1        	bnez	a0, 0x8020724c <.Lpcrel_hi1+0x44>
8020722c: 25 a0        	j	0x80207254 <.Lpcrel_hi1+0x4c>
8020722e: 03 35 04 fa  	ld	a0, -0x60(s0)
;             ([s], []) => Some(s),
80207232: 79 f9        	bnez	a0, 0x80207208 <.Lpcrel_hi1>
80207234: 09 a0        	j	0x80207236 <.Lpcrel_hi1+0x2e>
80207236: 03 35 04 f9  	ld	a0, -0x70(s0)
;             ([s], []) => Some(s),
8020723a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020723e: 0c 61        	ld	a1, 0x0(a0)
80207240: 08 65        	ld	a0, 0x8(a0)
80207242: 23 3c b4 fa  	sd	a1, -0x48(s0)
80207246: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020724a: d1 bf        	j	0x8020721e <.Lpcrel_hi1+0x16>
8020724c: 05 45        	li	a0, 0x1
;         matches!(*self, Some(_))
8020724e: a3 07 a4 fc  	sb	a0, -0x31(s0)
80207252: 29 a0        	j	0x8020725c <.Lpcrel_hi1+0x54>
80207254: 01 45        	li	a0, 0x0
;         matches!(*self, Some(_))
80207256: a3 07 a4 fc  	sb	a0, -0x31(s0)
8020725a: 09 a0        	j	0x8020725c <.Lpcrel_hi1+0x54>
8020725c: 01 45        	li	a0, 0x0
;         if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
8020725e: a3 07 a4 fe  	sb	a0, -0x11(s0)
80207262: 03 45 f4 fe  	lbu	a0, -0x11(s0)
80207266: 05 89        	andi	a0, a0, 0x1
80207268: 09 ed        	bnez	a0, 0x80207282 <.Lpcrel_hi2+0x16>
8020726a: 09 a0        	j	0x8020726c <.Lpcrel_hi2>

000000008020726c <.Lpcrel_hi2>:
8020726c: 17 c5 02 00  	auipc	a0, 0x2c
80207270: 13 05 45 02  	addi	a0, a0, 0x24
80207274: 0c 61        	ld	a1, 0x0(a0)
80207276: 08 65        	ld	a0, 0x8(a0)
80207278: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020727c: 23 38 a4 fa  	sd	a0, -0x50(s0)
80207280: 11 a8        	j	0x80207294 <.Lpcrel_hi2+0x28>
80207282: 83 35 84 fb  	ld	a1, -0x48(s0)
80207286: 03 35 04 fc  	ld	a0, -0x40(s0)
8020728a: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020728e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80207292: 09 a0        	j	0x80207294 <.Lpcrel_hi2+0x28>
;     }
80207294: 03 35 84 fa  	ld	a0, -0x58(s0)
80207298: 83 35 04 fb  	ld	a1, -0x50(s0)
8020729c: a6 70        	ld	ra, 0x68(sp)
8020729e: 06 74        	ld	s0, 0x60(sp)
802072a0: 65 61        	addi	sp, sp, 0x70
802072a2: 82 80        	ret

00000000802072a4 <_ZN4core3fmt9Arguments16new_v1_formatted17h3e99fd036cfd62bdE>:
;     pub fn new_v1_formatted(
802072a4: 1d 71        	addi	sp, sp, -0x60
802072a6: 86 ec        	sd	ra, 0x58(sp)
802072a8: a2 e8        	sd	s0, 0x50(sp)
802072aa: 80 10        	addi	s0, sp, 0x60
;         _unsafe_arg: rt::UnsafeArg,
802072ac: 23 3c b4 fa  	sd	a1, -0x48(s0)
802072b0: 23 30 c4 fc  	sd	a2, -0x40(s0)
802072b4: 23 34 d4 fc  	sd	a3, -0x38(s0)
802072b8: 23 38 e4 fc  	sd	a4, -0x30(s0)
802072bc: 23 3c f4 fc  	sd	a5, -0x28(s0)
802072c0: 23 30 04 ff  	sd	a6, -0x20(s0)
;         Arguments { pieces, fmt: Some(fmt), args }
802072c4: 23 34 f4 fa  	sd	a5, -0x58(s0)
802072c8: 23 38 04 fb  	sd	a6, -0x50(s0)
802072cc: 0c e1        	sd	a1, 0x0(a0)
802072ce: 10 e5        	sd	a2, 0x8(a0)
802072d0: 03 36 84 fa  	ld	a2, -0x58(s0)
802072d4: 83 35 04 fb  	ld	a1, -0x50(s0)
802072d8: 10 f1        	sd	a2, 0x20(a0)
802072da: 0c f5        	sd	a1, 0x28(a0)
802072dc: 14 e9        	sd	a3, 0x10(a0)
802072de: 18 ed        	sd	a4, 0x18(a0)
802072e0: e6 60        	ld	ra, 0x58(sp)
802072e2: 46 64        	ld	s0, 0x50(sp)
;     }
802072e4: 25 61        	addi	sp, sp, 0x60
802072e6: 82 80        	ret

00000000802072e8 <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>:
;     pub fn new_v1(pieces: &'a [&'static str], args: &'a [rt::Argument<'a>]) -> Arguments<'a> {
802072e8: 35 71        	addi	sp, sp, -0xa0
802072ea: 06 ed        	sd	ra, 0x98(sp)
802072ec: 22 e9        	sd	s0, 0x90(sp)
802072ee: 00 11        	addi	s0, sp, 0xa0
802072f0: 23 34 e4 f6  	sd	a4, -0x98(s0)
802072f4: 23 38 d4 f6  	sd	a3, -0x90(s0)
802072f8: 23 3c c4 f6  	sd	a2, -0x88(s0)
802072fc: 23 30 b4 f8  	sd	a1, -0x80(s0)
80207300: 23 34 a4 f8  	sd	a0, -0x78(s0)
80207304: 23 30 b4 fc  	sd	a1, -0x40(s0)
80207308: 23 34 c4 fc  	sd	a2, -0x38(s0)
8020730c: 23 38 d4 fc  	sd	a3, -0x30(s0)
80207310: 23 3c e4 fc  	sd	a4, -0x28(s0)
;         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80207314: 63 6b e6 00  	bltu	a2, a4, 0x8020732a <.Lpcrel_hi3>
80207318: 09 a0        	j	0x8020731a <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E+0x32>
8020731a: 83 35 84 f7  	ld	a1, -0x88(s0)
8020731e: 03 35 84 f6  	ld	a0, -0x98(s0)
;         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
80207322: 05 05        	addi	a0, a0, 0x1
80207324: 63 67 b5 08  	bltu	a0, a1, 0x802073b2 <.Lpcrel_hi7+0x1c>
80207328: 99 a8        	j	0x8020737e <.Lpcrel_hi6+0x14>

000000008020732a <.Lpcrel_hi3>:
;             panic!("invalid args");
8020732a: 17 d5 02 00  	auipc	a0, 0x2d
8020732e: 93 05 e5 51  	addi	a1, a0, 0x51e
80207332: 23 30 b4 fe  	sd	a1, -0x20(s0)
80207336: 05 45        	li	a0, 0x1
80207338: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8020733c: 23 38 b4 f8  	sd	a1, -0x70(s0)
80207340: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080207344 <.Lpcrel_hi4>:
80207344: 17 c5 02 00  	auipc	a0, 0x2c
80207348: 13 05 c5 f4  	addi	a0, a0, -0xb4
8020734c: 0c 61        	ld	a1, 0x0(a0)
8020734e: 08 65        	ld	a0, 0x8(a0)
80207350: 23 38 b4 fa  	sd	a1, -0x50(s0)
80207354: 23 3c a4 fa  	sd	a0, -0x48(s0)

0000000080207358 <.Lpcrel_hi5>:
80207358: 17 d5 02 00  	auipc	a0, 0x2d
8020735c: 13 05 05 4e  	addi	a0, a0, 0x4e0
80207360: 23 30 a4 fa  	sd	a0, -0x60(s0)
80207364: 01 45        	li	a0, 0x0
80207366: 23 34 a4 fa  	sd	a0, -0x58(s0)

000000008020736a <.Lpcrel_hi6>:
;             panic!("invalid args");
8020736a: 17 d5 02 00  	auipc	a0, 0x2d
8020736e: 93 05 e5 55  	addi	a1, a0, 0x55e
80207372: 13 05 04 f9  	addi	a0, s0, -0x70
80207376: 97 90 02 00  	auipc	ra, 0x29
8020737a: e7 80 20 e3  	jalr	-0x1ce(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
8020737e: 03 35 84 f6  	ld	a0, -0x98(s0)
80207382: 83 35 84 f8  	ld	a1, -0x78(s0)
80207386: 03 36 04 f7  	ld	a2, -0x90(s0)
8020738a: 83 36 84 f7  	ld	a3, -0x88(s0)
8020738e: 03 37 04 f8  	ld	a4, -0x80(s0)
;         Arguments { pieces, fmt: None, args }
80207392: 98 e1        	sd	a4, 0x0(a1)
80207394: 94 e5        	sd	a3, 0x8(a1)

0000000080207396 <.Lpcrel_hi7>:
80207396: 97 c6 02 00  	auipc	a3, 0x2c
8020739a: 93 86 a6 ef  	addi	a3, a3, -0x106
8020739e: 98 62        	ld	a4, 0x0(a3)
802073a0: 94 66        	ld	a3, 0x8(a3)
802073a2: 98 f1        	sd	a4, 0x20(a1)
802073a4: 94 f5        	sd	a3, 0x28(a1)
802073a6: 90 e9        	sd	a2, 0x10(a1)
802073a8: 88 ed        	sd	a0, 0x18(a1)
802073aa: ea 60        	ld	ra, 0x98(sp)
802073ac: 4a 64        	ld	s0, 0x90(sp)
;     }
802073ae: 0d 61        	addi	sp, sp, 0xa0
802073b0: 82 80        	ret
;         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
802073b2: a5 bf        	j	0x8020732a <.Lpcrel_hi3>

00000000802073b4 <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>:
;     pub const fn new_const(pieces: &'a [&'static str]) -> Self {
802073b4: 59 71        	addi	sp, sp, -0x70
802073b6: 86 f4        	sd	ra, 0x68(sp)
802073b8: a2 f0        	sd	s0, 0x60(sp)
802073ba: 80 18        	addi	s0, sp, 0x70
802073bc: 23 3c c4 f8  	sd	a2, -0x68(s0)
802073c0: 23 30 b4 fa  	sd	a1, -0x60(s0)
802073c4: 23 34 a4 fa  	sd	a0, -0x58(s0)
802073c8: 23 30 b4 fe  	sd	a1, -0x20(s0)
802073cc: 23 34 c4 fe  	sd	a2, -0x18(s0)
802073d0: 05 45        	li	a0, 0x1
;         if pieces.len() > 1 {
802073d2: 63 6e c5 02  	bltu	a0, a2, 0x8020740e <.Lpcrel_hi10>
802073d6: 09 a0        	j	0x802073d8 <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E+0x24>
802073d8: 83 35 84 fa  	ld	a1, -0x58(s0)
802073dc: 03 35 84 f9  	ld	a0, -0x68(s0)
802073e0: 03 36 04 fa  	ld	a2, -0x60(s0)
;         Arguments { pieces, fmt: None, args: &[] }
802073e4: 90 e1        	sd	a2, 0x0(a1)
802073e6: 88 e5        	sd	a0, 0x8(a1)

00000000802073e8 <.Lpcrel_hi8>:
802073e8: 17 c5 02 00  	auipc	a0, 0x2c
802073ec: 13 05 85 ea  	addi	a0, a0, -0x158
802073f0: 10 61        	ld	a2, 0x0(a0)
802073f2: 08 65        	ld	a0, 0x8(a0)
802073f4: 90 f1        	sd	a2, 0x20(a1)
802073f6: 88 f5        	sd	a0, 0x28(a1)

00000000802073f8 <.Lpcrel_hi9>:
802073f8: 17 d5 02 00  	auipc	a0, 0x2d
802073fc: 13 05 05 44  	addi	a0, a0, 0x440
80207400: 88 e9        	sd	a0, 0x10(a1)
80207402: 01 45        	li	a0, 0x0
80207404: 88 ed        	sd	a0, 0x18(a1)
80207406: a6 70        	ld	ra, 0x68(sp)
80207408: 06 74        	ld	s0, 0x60(sp)
;     }
8020740a: 65 61        	addi	sp, sp, 0x70
8020740c: 82 80        	ret

000000008020740e <.Lpcrel_hi10>:
;             panic!("invalid args");
8020740e: 17 d5 02 00  	auipc	a0, 0x2d
80207412: 93 05 a5 43  	addi	a1, a0, 0x43a
80207416: 13 05 04 fb  	addi	a0, s0, -0x50
8020741a: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020741e: 05 46        	li	a2, 0x1
80207420: 97 00 00 00  	auipc	ra, 0x0
80207424: e7 80 40 f9  	jalr	-0x6c(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
80207428: 03 35 04 f9  	ld	a0, -0x70(s0)

000000008020742c <.Lpcrel_hi11>:
8020742c: 97 d5 02 00  	auipc	a1, 0x2d
80207430: 93 85 45 4b  	addi	a1, a1, 0x4b4
80207434: 97 90 02 00  	auipc	ra, 0x29
80207438: e7 80 40 d7  	jalr	-0x28c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008020743c <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17hfd4d981012acb85fE>:
; #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
8020743c: 79 71        	addi	sp, sp, -0x30
8020743e: 06 f4        	sd	ra, 0x28(sp)
80207440: 22 f0        	sd	s0, 0x20(sp)
80207442: 00 18        	addi	s0, sp, 0x30
80207444: 23 3c b4 fc  	sd	a1, -0x28(s0)
80207448: aa 85        	mv	a1, a0
8020744a: 03 35 84 fd  	ld	a0, -0x28(s0)
8020744e: 23 30 b4 fe  	sd	a1, -0x20(s0)
80207452: 23 34 a4 fe  	sd	a0, -0x18(s0)

0000000080207456 <.Lpcrel_hi12>:
80207456: 97 d5 02 00  	auipc	a1, 0x2d
8020745a: 93 85 25 4a  	addi	a1, a1, 0x4a2
8020745e: 15 46        	li	a2, 0x5
80207460: 97 80 02 00  	auipc	ra, 0x28
80207464: e7 80 60 5d  	jalr	0x5d6(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
80207468: a2 70        	ld	ra, 0x28(sp)
8020746a: 02 74        	ld	s0, 0x20(sp)
8020746c: 45 61        	addi	sp, sp, 0x30
8020746e: 82 80        	ret

0000000080207470 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he858039e63e83009E>:
;     fn next(&mut self) -> Option<char> {
80207470: 39 71        	addi	sp, sp, -0x40
80207472: 06 fc        	sd	ra, 0x38(sp)
80207474: 22 f8        	sd	s0, 0x30(sp)
80207476: 80 00        	addi	s0, sp, 0x40
;     pub fn map<U, F>(self, f: F) -> Option<U>
80207478: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { next_code_point(&mut self.iter).map(|ch| char::from_u32_unchecked(ch)) }
8020747c: 97 e0 00 00  	auipc	ra, 0xe
80207480: e7 80 e0 6c  	jalr	0x6ce(ra) <_ZN4core3str11validations15next_code_point17h220572d36c780f95E>
80207484: 23 2c a4 fc  	sw	a0, -0x28(s0)
80207488: 23 2e b4 fc  	sw	a1, -0x24(s0)
;         match self {
8020748c: 03 25 84 fd  	lw	a0, -0x28(s0)
80207490: 19 e5        	bnez	a0, 0x8020749e <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he858039e63e83009E+0x2e>
80207492: 09 a0        	j	0x80207494 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he858039e63e83009E+0x24>
80207494: 37 05 11 00  	lui	a0, 0x110
;             None => None,
80207498: 23 2a a4 fc  	sw	a0, -0x2c(s0)
;     }
8020749c: 01 a8        	j	0x802074ac <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he858039e63e83009E+0x3c>
;             Some(x) => Some(f(x)),
8020749e: 03 25 c4 fd  	lw	a0, -0x24(s0)
802074a2: 23 34 a4 fc  	sd	a0, -0x38(s0)
802074a6: 23 26 a4 fe  	sw	a0, -0x14(s0)
;         assert_unsafe_precondition!(
802074aa: 39 a0        	j	0x802074b8 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he858039e63e83009E+0x48>
;     }
802074ac: 03 25 44 fd  	lw	a0, -0x2c(s0)
802074b0: e2 70        	ld	ra, 0x38(sp)
802074b2: 42 74        	ld	s0, 0x30(sp)
802074b4: 21 61        	addi	sp, sp, 0x40
802074b6: 82 80        	ret
802074b8: 03 35 84 fc  	ld	a0, -0x38(s0)
;         assert_unsafe_precondition!(
802074bc: 97 e0 ff ff  	auipc	ra, 0xffffe
802074c0: e7 80 e0 14  	jalr	0x14e(ra) <ekernel+0xffcb860a>
802074c4: 09 a0        	j	0x802074c6 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he858039e63e83009E+0x56>
802074c6: 03 35 84 fc  	ld	a0, -0x38(s0)
;             Some(x) => Some(f(x)),
802074ca: 23 2a a4 fc  	sw	a0, -0x2c(s0)
802074ce: f9 bf        	j	0x802074ac <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he858039e63e83009E+0x3c>

00000000802074d0 <syscall>:
; pub fn syscall(syscall_id :usize ,arg:[usize;3]) -> isize {
802074d0: 15 71        	addi	sp, sp, -0xe0
802074d2: 86 ed        	sd	ra, 0xd8(sp)
802074d4: a2 e9        	sd	s0, 0xd0(sp)
802074d6: 80 11        	addi	s0, sp, 0xe0
802074d8: 23 30 b4 f4  	sd	a1, -0xc0(s0)
802074dc: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;     match syscall_id {
802074e0: 03 35 04 f5  	ld	a0, -0xb0(s0)
802074e4: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802074e8: 9d 45        	li	a1, 0x7
802074ea: 63 07 b5 20  	beq	a0, a1, 0x802076f8 <.Lpcrel_hi7+0x70>
802074ee: 09 a0        	j	0x802074f0 <syscall+0x20>
802074f0: 03 35 84 f4  	ld	a0, -0xb8(s0)
802074f4: 93 05 80 03  	li	a1, 0x38
;     match syscall_id {
802074f8: 63 0f b5 10  	beq	a0, a1, 0x80207616 <.Lpcrel_hi3+0x10>
802074fc: 09 a0        	j	0x802074fe <syscall+0x2e>
802074fe: 03 35 84 f4  	ld	a0, -0xb8(s0)
80207502: 93 05 90 03  	li	a1, 0x39
;     match syscall_id {
80207506: 63 03 b5 12  	beq	a0, a1, 0x8020762c <.Lpcrel_hi3+0x26>
8020750a: 09 a0        	j	0x8020750c <syscall+0x3c>
8020750c: 03 35 84 f4  	ld	a0, -0xb8(s0)
80207510: 93 05 f0 03  	li	a1, 0x3f
;     match syscall_id {
80207514: 63 06 b5 12  	beq	a0, a1, 0x80207640 <.Lpcrel_hi3+0x3a>
80207518: 09 a0        	j	0x8020751a <syscall+0x4a>
8020751a: 03 35 84 f4  	ld	a0, -0xb8(s0)
8020751e: 93 05 00 04  	li	a1, 0x40
;     match syscall_id {
80207522: 63 0e b5 18  	beq	a0, a1, 0x802076be <.Lpcrel_hi7+0x36>
80207526: 09 a0        	j	0x80207528 <syscall+0x58>
80207528: 03 35 84 f4  	ld	a0, -0xb8(s0)
8020752c: 93 05 d0 05  	li	a1, 0x5d
;     match syscall_id {
80207530: 63 03 b5 1a  	beq	a0, a1, 0x802076d6 <.Lpcrel_hi7+0x4e>
80207534: 09 a0        	j	0x80207536 <syscall+0x66>
80207536: 03 35 84 f4  	ld	a0, -0xb8(s0)
8020753a: 93 05 c0 07  	li	a1, 0x7c
;     match syscall_id {
8020753e: 63 0d b5 10  	beq	a0, a1, 0x80207658 <.Lpcrel_hi3+0x52>
80207542: 09 a0        	j	0x80207544 <syscall+0x74>
80207544: 03 35 84 f4  	ld	a0, -0xb8(s0)
80207548: 93 05 90 0a  	li	a1, 0xa9
;     match syscall_id {
8020754c: 63 0d b5 10  	beq	a0, a1, 0x80207666 <.Lpcrel_hi4>
80207550: 09 a0        	j	0x80207552 <syscall+0x82>
80207552: 03 35 84 f4  	ld	a0, -0xb8(s0)
80207556: 93 05 c0 0a  	li	a1, 0xac
;     match syscall_id {
8020755a: 63 03 b5 12  	beq	a0, a1, 0x80207680 <.Lpcrel_hi6>
8020755e: 09 a0        	j	0x80207560 <syscall+0x90>
80207560: 03 35 84 f4  	ld	a0, -0xb8(s0)
80207564: 93 05 c0 0d  	li	a1, 0xdc
;     match syscall_id {
80207568: 63 09 b5 12  	beq	a0, a1, 0x8020769a <.Lpcrel_hi7+0x12>
8020756c: 09 a0        	j	0x8020756e <syscall+0x9e>
8020756e: 03 35 84 f4  	ld	a0, -0xb8(s0)
80207572: 93 05 d0 0d  	li	a1, 0xdd
;     match syscall_id {
80207576: 63 07 b5 16  	beq	a0, a1, 0x802076e4 <.Lpcrel_hi7+0x5c>
8020757a: 09 a0        	j	0x8020757c <syscall+0xac>
8020757c: 03 35 84 f4  	ld	a0, -0xb8(s0)
80207580: 93 05 40 10  	li	a1, 0x104
;     match syscall_id {
80207584: 63 02 b5 12  	beq	a0, a1, 0x802076a8 <.Lpcrel_hi7+0x20>
80207588: 09 a0        	j	0x8020758a <syscall+0xba>
8020758a: 93 05 04 f5  	addi	a1, s0, -0xb0
8020758e: 23 30 b4 fe  	sd	a1, -0x20(s0)

0000000080207592 <.Lpcrel_hi0>:
;         Self::new(x, Display::fmt)
80207592: 17 a5 02 00  	auipc	a0, 0x2a
80207596: 13 05 c5 af  	addi	a0, a0, -0x504
8020759a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020759e: 23 38 b4 fc  	sd	a1, -0x30(s0)
802075a2: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
802075a6: 83 35 04 fd  	ld	a1, -0x30(s0)
802075aa: 03 35 84 fd  	ld	a0, -0x28(s0)
;             println!("syscall id is{}",syscall_id);
802075ae: 23 38 b4 f8  	sd	a1, -0x70(s0)
802075b2: 23 3c a4 f8  	sd	a0, -0x68(s0)

00000000802075b6 <.Lpcrel_hi1>:
802075b6: 17 d5 02 00  	auipc	a0, 0x2d
802075ba: 93 05 25 3b  	addi	a1, a0, 0x3b2
802075be: 13 05 04 f6  	addi	a0, s0, -0xa0
802075c2: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802075c6: 09 46        	li	a2, 0x2
802075c8: 93 06 04 f9  	addi	a3, s0, -0x70
802075cc: 05 47        	li	a4, 0x1
802075ce: 23 38 e4 f2  	sd	a4, -0xd0(s0)
802075d2: 97 00 00 00  	auipc	ra, 0x0
802075d6: e7 80 60 d1  	jalr	-0x2ea(ra) <_ZN4core3fmt9Arguments6new_v117he502b5005315f377E>
802075da: 03 35 84 f2  	ld	a0, -0xd8(s0)
802075de: 97 10 01 00  	auipc	ra, 0x11
802075e2: e7 80 e0 8a  	jalr	-0x752(ra) <_ZN2os7console5print17h042fcde166d682deE>
802075e6: 03 36 04 f3  	ld	a2, -0xd0(s0)

00000000802075ea <.Lpcrel_hi2>:
;             panic!("not souppeted syscall");
802075ea: 17 d5 02 00  	auipc	a0, 0x2d
802075ee: 93 05 65 3b  	addi	a1, a0, 0x3b6
802075f2: 13 05 04 fa  	addi	a0, s0, -0x60
802075f6: 23 3c a4 f2  	sd	a0, -0xc8(s0)
802075fa: 97 00 00 00  	auipc	ra, 0x0
802075fe: e7 80 a0 db  	jalr	-0x246(ra) <_ZN4core3fmt9Arguments9new_const17hefd2779a32410380E>
80207602: 03 35 84 f3  	ld	a0, -0xc8(s0)

0000000080207606 <.Lpcrel_hi3>:
80207606: 97 d5 02 00  	auipc	a1, 0x2d
8020760a: 93 85 a5 3a  	addi	a1, a1, 0x3aa
8020760e: 97 90 02 00  	auipc	ra, 0x29
80207612: e7 80 a0 b9  	jalr	-0x466(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80207616: 83 35 04 f4  	ld	a1, -0xc0(s0)
;             sys_open(arg[0] as *const u8 , arg[1] as usize)
8020761a: 88 61        	ld	a0, 0x0(a1)
8020761c: 8c 65        	ld	a1, 0x8(a1)
8020761e: 97 d0 ff ff  	auipc	ra, 0xffffd
80207622: e7 80 a0 19  	jalr	0x19a(ra) <ekernel+0xffcb77b8>
80207626: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020762a: cd a0        	j	0x8020770c <.Lpcrel_hi7+0x84>
8020762c: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             sys_close(arg[0])
80207630: 08 61        	ld	a0, 0x0(a0)
80207632: 97 d0 ff ff  	auipc	ra, 0xffffd
80207636: e7 80 e0 35  	jalr	0x35e(ra) <ekernel+0xffcb7990>
8020763a: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020763e: f9 a0        	j	0x8020770c <.Lpcrel_hi7+0x84>
80207640: 03 36 04 f4  	ld	a2, -0xc0(s0)
;             sys_read(arg[0], arg[1] as *const u8, arg[2])
80207644: 08 62        	ld	a0, 0x0(a2)
80207646: 0c 66        	ld	a1, 0x8(a2)
80207648: 10 6a        	ld	a2, 0x10(a2)
8020764a: 97 d0 ff ff  	auipc	ra, 0xffffd
8020764e: e7 80 80 e3  	jalr	-0x1c8(ra) <ekernel+0xffcb7482>
80207652: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80207656: 5d a8        	j	0x8020770c <.Lpcrel_hi7+0x84>
;             sys_yield()
80207658: 97 f0 ff ff  	auipc	ra, 0xfffff
8020765c: e7 80 a0 63  	jalr	0x63a(ra) <ekernel+0xffcb9c92>
80207660: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80207664: 65 a0        	j	0x8020770c <.Lpcrel_hi7+0x84>

0000000080207666 <.Lpcrel_hi4>:
;             todo!()
80207666: 17 d5 02 00  	auipc	a0, 0x2d
8020766a: 13 05 75 29  	addi	a0, a0, 0x297

000000008020766e <.Lpcrel_hi5>:
8020766e: 97 d5 02 00  	auipc	a1, 0x2d
80207672: 13 86 a5 2b  	addi	a2, a1, 0x2ba
80207676: cd 45        	li	a1, 0x13
80207678: 97 90 02 00  	auipc	ra, 0x29
8020767c: e7 80 00 ba  	jalr	-0x460(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080207680 <.Lpcrel_hi6>:
;             todo!()
80207680: 17 d5 02 00  	auipc	a0, 0x2d
80207684: 13 05 d5 27  	addi	a0, a0, 0x27d

0000000080207688 <.Lpcrel_hi7>:
80207688: 97 d5 02 00  	auipc	a1, 0x2d
8020768c: 13 86 85 2b  	addi	a2, a1, 0x2b8
80207690: cd 45        	li	a1, 0x13
80207692: 97 90 02 00  	auipc	ra, 0x29
80207696: e7 80 60 b8  	jalr	-0x47a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;             sys_fork()
8020769a: 97 f0 ff ff  	auipc	ra, 0xfffff
8020769e: e7 80 60 67  	jalr	0x676(ra) <ekernel+0xffcb9d10>
802076a2: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802076a6: 9d a0        	j	0x8020770c <.Lpcrel_hi7+0x84>
802076a8: 83 35 04 f4  	ld	a1, -0xc0(s0)
;             sys_waitpid(arg[0] as isize, arg[1] as *mut i32)
802076ac: 88 61        	ld	a0, 0x0(a1)
802076ae: 8c 65        	ld	a1, 0x8(a1)
802076b0: 97 00 00 00  	auipc	ra, 0x0
802076b4: e7 80 e0 8d  	jalr	-0x722(ra) <_ZN2os7syscall7process11sys_waitpid17ha8b28e308316662eE>
802076b8: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802076bc: 81 a8        	j	0x8020770c <.Lpcrel_hi7+0x84>
802076be: 03 36 04 f4  	ld	a2, -0xc0(s0)
;             sys_write(arg[0], arg[1] as *const u8, arg[2])
802076c2: 08 62        	ld	a0, 0x0(a2)
802076c4: 0c 66        	ld	a1, 0x8(a2)
802076c6: 10 6a        	ld	a2, 0x10(a2)
802076c8: 97 d0 ff ff  	auipc	ra, 0xffffd
802076cc: e7 80 40 a8  	jalr	-0x57c(ra) <ekernel+0xffcb714c>
802076d0: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802076d4: 25 a8        	j	0x8020770c <.Lpcrel_hi7+0x84>
802076d6: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             sys_exit(arg[0] as i32)
802076da: 08 61        	ld	a0, 0x0(a0)
802076dc: 97 f0 ff ff  	auipc	ra, 0xfffff
802076e0: e7 80 00 61  	jalr	0x610(ra) <ekernel+0xffcb9cec>
802076e4: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             sys_exec(arg[0] as *const u8)
802076e8: 08 61        	ld	a0, 0x0(a0)
802076ea: 97 f0 ff ff  	auipc	ra, 0xfffff
802076ee: e7 80 60 70  	jalr	0x706(ra) <ekernel+0xffcb9df0>
802076f2: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802076f6: 19 a8        	j	0x8020770c <.Lpcrel_hi7+0x84>
802076f8: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             sys_exec(arg[0] as *const u8)
802076fc: 08 61        	ld	a0, 0x0(a0)
802076fe: 97 f0 ff ff  	auipc	ra, 0xfffff
80207702: e7 80 20 6f  	jalr	0x6f2(ra) <ekernel+0xffcb9df0>
80207706: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020770a: 09 a0        	j	0x8020770c <.Lpcrel_hi7+0x84>
; }
8020770c: 03 35 84 f5  	ld	a0, -0xa8(s0)
80207710: ee 60        	ld	ra, 0xd8(sp)
80207712: 4e 64        	ld	s0, 0xd0(sp)
80207714: 2d 61        	addi	sp, sp, 0xe0
80207716: 82 80        	ret

0000000080207718 <_ZN157_$LT$$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6e129fc827b83a6bE>:
;             fn drop(&mut self) {
80207718: 5d 71        	addi	sp, sp, -0x50
8020771a: 86 e4        	sd	ra, 0x48(sp)
8020771c: a2 e0        	sd	s0, 0x40(sp)
8020771e: 80 08        	addi	s0, sp, 0x50
80207720: aa 85        	mv	a1, a0
80207722: 23 34 b4 fc  	sd	a1, -0x38(s0)
;                     let alloc = ManuallyDrop::take(&mut self.0.alloc);
80207726: 88 61        	ld	a0, 0x0(a1)
80207728: 13 05 05 02  	addi	a0, a0, 0x20
8020772c: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { ptr::read(&slot.value) }
80207730: 23 30 a4 fe  	sd	a0, -0x20(s0)
;                     let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);
80207734: 88 61        	ld	a0, 0x0(a1)
80207736: 08 61        	ld	a0, 0x0(a0)
80207738: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020773c: 8c 61        	ld	a1, 0x0(a1)
8020773e: 8c 69        	ld	a1, 0x10(a1)
80207740: 97 90 00 00  	auipc	ra, 0x9
80207744: e7 80 e0 3f  	jalr	0x3fe(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hd99479896e6bd5a5E>
80207748: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020774c: 23 30 b4 fc  	sd	a1, -0x40(s0)
80207750: 13 05 84 fb  	addi	a0, s0, -0x48
80207754: 97 10 00 00  	auipc	ra, 0x1
80207758: e7 80 a0 ad  	jalr	-0x526(ra) <_ZN4core3ptr72drop_in_place$LT$alloc..raw_vec..RawVec$LT$alloc..string..String$GT$$GT$17h776eb704121ca400E>
8020775c: a6 60        	ld	ra, 0x48(sp)
8020775e: 06 64        	ld	s0, 0x40(sp)
;             }
80207760: 61 61        	addi	sp, sp, 0x50
80207762: 82 80        	ret

0000000080207764 <_ZN159_$LT$$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..Dropper$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h732c36a854b7244cE>:
;             fn drop(&mut self) {
80207764: 01 11        	addi	sp, sp, -0x20
80207766: 06 ec        	sd	ra, 0x18(sp)
80207768: 22 e8        	sd	s0, 0x10(sp)
8020776a: 00 10        	addi	s0, sp, 0x20
8020776c: aa 85        	mv	a1, a0
8020776e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     ptr::drop_in_place(self.0);
80207772: 88 61        	ld	a0, 0x0(a1)
80207774: 8c 65        	ld	a1, 0x8(a1)
80207776: 97 10 00 00  	auipc	ra, 0x1
8020777a: e7 80 a0 dd  	jalr	-0x226(ra) <_ZN4core3ptr87drop_in_place$LT$$u5b$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$u5d$$GT$17hbdc027501203ea0aE>
8020777e: e2 60        	ld	ra, 0x18(sp)
80207780: 42 64        	ld	s0, 0x10(sp)
;             }
80207782: 05 61        	addi	sp, sp, 0x20
80207784: 82 80        	ret

0000000080207786 <_ZN4core3ops8function6FnOnce9call_once17h686606d59661ce4bE>:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
80207786: 79 71        	addi	sp, sp, -0x30
80207788: 06 f4        	sd	ra, 0x28(sp)
8020778a: 22 f0        	sd	s0, 0x20(sp)
8020778c: 00 18        	addi	s0, sp, 0x30
8020778e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80207792: 23 30 b4 fe  	sd	a1, -0x20(s0)
80207796: 03 35 84 fd  	ld	a0, -0x28(s0)
8020779a: 83 35 04 fe  	ld	a1, -0x20(s0)
8020779e: 97 40 00 00  	auipc	ra, 0x4
802077a2: e7 80 20 fc  	jalr	-0x3e(ra) <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E>
802077a6: a2 70        	ld	ra, 0x28(sp)
802077a8: 02 74        	ld	s0, 0x20(sp)
802077aa: 45 61        	addi	sp, sp, 0x30
802077ac: 82 80        	ret

00000000802077ae <_ZN4core3ops8function6FnOnce9call_once17hc21a02356ba5b0b5E>:
802077ae: 1d 71        	addi	sp, sp, -0x60
802077b0: 86 ec        	sd	ra, 0x58(sp)
802077b2: a2 e8        	sd	s0, 0x50(sp)
802077b4: 80 10        	addi	s0, sp, 0x60

00000000802077b6 <.Lpcrel_hi0>:
;         let efs = EasyFileSystem::open(BLOCK_DEVICE.clone());
802077b6: 17 d5 02 00  	auipc	a0, 0x2d
802077ba: 13 05 25 a3  	addi	a0, a0, -0x5ce
802077be: 97 d0 ff ff  	auipc	ra, 0xffffd
802077c2: e7 80 e0 46  	jalr	0x46e(ra) <ekernel+0xffcb7c2c>
802077c6: 97 60 01 00  	auipc	ra, 0x16
802077ca: e7 80 a0 91  	jalr	-0x6e6(ra) <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hf9ea9035163a2c6bE>
802077ce: 97 90 01 00  	auipc	ra, 0x19
802077d2: e7 80 00 0f  	jalr	0xf0(ra) <_ZN7easy_fs3efs14EasyFileSystem4open17h306860e803e985d2E>
802077d6: 23 30 a4 fc  	sd	a0, -0x40(s0)
802077da: 13 05 84 fc  	addi	a0, s0, -0x38
802077de: 23 30 a4 fa  	sd	a0, -0x60(s0)
802077e2: 93 05 04 fc  	addi	a1, s0, -0x40
802077e6: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         Arc::new(EasyFileSystem::root_inode(&efs))
802077ea: 97 90 01 00  	auipc	ra, 0x19
802077ee: e7 80 60 20  	jalr	0x206(ra) <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E>
802077f2: 03 35 04 fa  	ld	a0, -0x60(s0)
802077f6: 97 50 01 00  	auipc	ra, 0x15
802077fa: e7 80 20 65  	jalr	0x652(ra) <_ZN5alloc4sync12Arc$LT$T$GT$3new17hb50cf66713b1629eE>
802077fe: aa 85        	mv	a1, a0
80207800: 03 35 84 fa  	ld	a0, -0x58(s0)
80207804: 23 38 b4 fa  	sd	a1, -0x50(s0)
;     };
80207808: 97 10 00 00  	auipc	ra, 0x1
8020780c: e7 80 60 eb  	jalr	-0x14a(ra) <_ZN4core3ptr99drop_in_place$LT$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..efs..EasyFileSystem$GT$$GT$$GT$17h4f71b212d9758283E>
80207810: 03 35 04 fb  	ld	a0, -0x50(s0)
80207814: e6 60        	ld	ra, 0x58(sp)
80207816: 46 64        	ld	s0, 0x50(sp)
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
80207818: 25 61        	addi	sp, sp, 0x60
8020781a: 82 80        	ret

000000008020781c <_ZN4core3ops8function6FnOnce9call_once17hd91a59d216147d7cE>:
8020781c: 39 71        	addi	sp, sp, -0x40
8020781e: 06 fc        	sd	ra, 0x38(sp)
80207820: 22 f8        	sd	s0, 0x30(sp)
80207822: 80 00        	addi	s0, sp, 0x40
80207824: 23 30 a4 fc  	sd	a0, -0x40(s0)
80207828: 13 05 84 fd  	addi	a0, s0, -0x28
8020782c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     pub static ref QUEUE_FRAMES: Spin<Vec<AllocerGuard>> = unsafe { Spin::new(Vec::new(),"viro_queue") };
80207830: 97 d0 00 00  	auipc	ra, 0xd
80207834: e7 80 a0 e9  	jalr	-0x166(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h7972205b75f93b38E>
80207838: 03 35 04 fc  	ld	a0, -0x40(s0)
8020783c: 83 35 84 fc  	ld	a1, -0x38(s0)

0000000080207840 <.Lpcrel_hi1>:
80207840: 17 d6 02 00  	auipc	a2, 0x2d
80207844: 13 06 86 24  	addi	a2, a2, 0x248
80207848: a9 46        	li	a3, 0xa
8020784a: 97 b0 00 00  	auipc	ra, 0xb
8020784e: e7 80 80 c0  	jalr	-0x3f8(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$3new17h321ce8a1ce25db96E>
80207852: e2 70        	ld	ra, 0x38(sp)
80207854: 42 74        	ld	s0, 0x30(sp)
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
80207856: 21 61        	addi	sp, sp, 0x40
80207858: 82 80        	ret

000000008020785a <_ZN4core3ops8function6FnOnce9call_once17hea10407658feb17aE>:
8020785a: 75 71        	addi	sp, sp, -0x90
8020785c: 06 e5        	sd	ra, 0x88(sp)
8020785e: 22 e1        	sd	s0, 0x80(sp)
80207860: 00 09        	addi	s0, sp, 0x90
80207862: 13 05 84 f8  	addi	a0, s0, -0x78
80207866: 23 3c a4 f6  	sd	a0, -0x88(s0)
;     pub static ref BLOCK_DEVICE: Arc<dyn BlockDevice> = Arc::new(BlockDeviceImpl::new());
8020786a: 97 d0 00 00  	auipc	ra, 0xd
8020786e: e7 80 80 9f  	jalr	-0x608(ra) <_ZN2os10filesystem2fs11VirtIOBlock3new17h78528803e2fd46ceE>
80207872: 03 35 84 f7  	ld	a0, -0x88(s0)
80207876: 97 a0 ff ff  	auipc	ra, 0xffffa
8020787a: e7 80 c0 e4  	jalr	-0x1b4(ra) <ekernel+0xffcb46c2>

000000008020787e <.Lpcrel_hi2>:
;                 fn __static_ref_initialize() -> $T { $e }
8020787e: 97 d5 02 00  	auipc	a1, 0x2d
80207882: 93 85 a5 21  	addi	a1, a1, 0x21a
80207886: aa 60        	ld	ra, 0x88(sp)
80207888: 0a 64        	ld	s0, 0x80(sp)
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
8020788a: 49 61        	addi	sp, sp, 0x90
8020788c: 82 80        	ret

000000008020788e <_ZN4core3ops8function6FnOnce9call_once17hf0325500a94a1a65E>:
8020788e: 19 71        	addi	sp, sp, -0x80
80207890: 86 fc        	sd	ra, 0x78(sp)
80207892: a2 f8        	sd	s0, 0x70(sp)
80207894: 00 01        	addi	s0, sp, 0x80
80207896: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020789a: 13 05 84 f9  	addi	a0, s0, -0x68
8020789e: 23 34 a4 f8  	sd	a0, -0x78(s0)
;     pub static ref TASKMANGER:Spin<TaskManager> = Spin::new(TaskManager::new(),"task_manger");
802078a2: 97 00 01 00  	auipc	ra, 0x10
802078a6: e7 80 00 70  	jalr	0x700(ra) <_ZN2os4task7manager11TaskManager3new17hd99569f4eff87d02E>
802078aa: 03 35 04 f8  	ld	a0, -0x80(s0)
802078ae: 83 35 84 f8  	ld	a1, -0x78(s0)

00000000802078b2 <.Lpcrel_hi3>:
802078b2: 17 d6 02 00  	auipc	a2, 0x2d
802078b6: 13 06 66 21  	addi	a2, a2, 0x216
802078ba: ad 46        	li	a3, 0xb
802078bc: 97 b0 00 00  	auipc	ra, 0xb
802078c0: e7 80 a0 a5  	jalr	-0x5a6(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$3new17h09cc844b3bb4925eE>
802078c4: e6 70        	ld	ra, 0x78(sp)
802078c6: 46 74        	ld	s0, 0x70(sp)
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
802078c8: 09 61        	addi	sp, sp, 0x80
802078ca: 82 80        	ret

00000000802078cc <_ZN4core3ptr100drop_in_place$LT$alloc..vec..Vec$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17ha8ea67a36eba523aE>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
802078cc: 01 11        	addi	sp, sp, -0x20
802078ce: 06 ec        	sd	ra, 0x18(sp)
802078d0: 22 e8        	sd	s0, 0x10(sp)
802078d2: 00 10        	addi	s0, sp, 0x20
802078d4: 23 30 a4 fe  	sd	a0, -0x20(s0)
802078d8: 23 34 a4 fe  	sd	a0, -0x18(s0)
802078dc: 97 10 00 00  	auipc	ra, 0x1
802078e0: e7 80 00 e4  	jalr	-0x1c0(ra) <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h22d3d95304fc22dbE>
802078e4: 03 35 04 fe  	ld	a0, -0x20(s0)
802078e8: 97 00 00 00  	auipc	ra, 0x0
802078ec: e7 80 80 10  	jalr	0x108(ra) <_ZN4core3ptr107drop_in_place$LT$alloc..raw_vec..RawVec$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17h545c7f5549d336f8E>
802078f0: e2 60        	ld	ra, 0x18(sp)
802078f2: 42 64        	ld	s0, 0x10(sp)
802078f4: 05 61        	addi	sp, sp, 0x20
802078f6: 82 80        	ret

00000000802078f8 <_ZN4core3ptr100drop_in_place$LT$os..sync..spin..Spin$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$$GT$17he61ced0872e2113bE>:
802078f8: 01 11        	addi	sp, sp, -0x20
802078fa: 06 ec        	sd	ra, 0x18(sp)
802078fc: 22 e8        	sd	s0, 0x10(sp)
802078fe: 00 10        	addi	s0, sp, 0x20
80207900: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207904: 61 05        	addi	a0, a0, 0x18
80207906: 97 00 00 00  	auipc	ra, 0x0
8020790a: e7 80 00 01  	jalr	0x10(ra) <_ZN4core3ptr102drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$$GT$17had5c2daf99832a6aE>
8020790e: e2 60        	ld	ra, 0x18(sp)
80207910: 42 64        	ld	s0, 0x10(sp)
80207912: 05 61        	addi	sp, sp, 0x20
80207914: 82 80        	ret

0000000080207916 <_ZN4core3ptr102drop_in_place$LT$core..cell..UnsafeCell$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$$GT$17had5c2daf99832a6aE>:
80207916: 01 11        	addi	sp, sp, -0x20
80207918: 06 ec        	sd	ra, 0x18(sp)
8020791a: 22 e8        	sd	s0, 0x10(sp)
8020791c: 00 10        	addi	s0, sp, 0x20
8020791e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207922: 97 10 00 00  	auipc	ra, 0x1
80207926: e7 80 80 92  	jalr	-0x6d8(ra) <_ZN4core3ptr72drop_in_place$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$17had0106bc1d3fbf6fE>
8020792a: e2 60        	ld	ra, 0x18(sp)
8020792c: 42 64        	ld	s0, 0x10(sp)
8020792e: 05 61        	addi	sp, sp, 0x20
80207930: 82 80        	ret

0000000080207932 <_ZN4core3ptr103drop_in_place$LT$alloc..sync..Weak$LT$os..filesystem..inode..OSinode$C$$RF$alloc..alloc..Global$GT$$GT$17h3977a806c02ba95cE>:
80207932: 01 11        	addi	sp, sp, -0x20
80207934: 06 ec        	sd	ra, 0x18(sp)
80207936: 22 e8        	sd	s0, 0x10(sp)
80207938: 00 10        	addi	s0, sp, 0x20
8020793a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020793e: 97 10 00 00  	auipc	ra, 0x1
80207942: e7 80 e0 26  	jalr	0x26e(ra) <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE>
80207946: e2 60        	ld	ra, 0x18(sp)
80207948: 42 64        	ld	s0, 0x10(sp)
8020794a: 05 61        	addi	sp, sp, 0x20
8020794c: 82 80        	ret

000000008020794e <_ZN4core3ptr105drop_in_place$LT$alloc..sync..Weak$LT$os..task..task..TaskControlBlock$C$$RF$alloc..alloc..Global$GT$$GT$17h4ba24f9bed30384eE>:
8020794e: 01 11        	addi	sp, sp, -0x20
80207950: 06 ec        	sd	ra, 0x18(sp)
80207952: 22 e8        	sd	s0, 0x10(sp)
80207954: 00 10        	addi	s0, sp, 0x20
80207956: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020795a: 97 10 00 00  	auipc	ra, 0x1
8020795e: e7 80 c0 5c  	jalr	0x5cc(ra) <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E>
80207962: e2 60        	ld	ra, 0x18(sp)
80207964: 42 64        	ld	s0, 0x10(sp)
80207966: 05 61        	addi	sp, sp, 0x20
80207968: 82 80        	ret

000000008020796a <_ZN4core3ptr105drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hea43eedd76595f2eE>:
8020796a: 01 11        	addi	sp, sp, -0x20
8020796c: 06 ec        	sd	ra, 0x18(sp)
8020796e: 22 e8        	sd	s0, 0x10(sp)
80207970: 00 10        	addi	s0, sp, 0x20
80207972: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207976: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020797a: 08 61        	ld	a0, 0x0(a0)
8020797c: 11 e5        	bnez	a0, 0x80207988 <_ZN4core3ptr105drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hea43eedd76595f2eE+0x1e>
8020797e: 09 a0        	j	0x80207980 <_ZN4core3ptr105drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hea43eedd76595f2eE+0x16>
80207980: e2 60        	ld	ra, 0x18(sp)
80207982: 42 64        	ld	s0, 0x10(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207984: 05 61        	addi	sp, sp, 0x20
80207986: 82 80        	ret
80207988: 03 35 04 fe  	ld	a0, -0x20(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8020798c: 97 10 00 00  	auipc	ra, 0x1
80207990: e7 80 40 9d  	jalr	-0x62c(ra) <_ZN4core3ptr77drop_in_place$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$17h7fe297b01037ef7cE>
80207994: f5 b7        	j	0x80207980 <_ZN4core3ptr105drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hea43eedd76595f2eE+0x16>

0000000080207996 <_ZN4core3ptr105drop_in_place$LT$os..sync..spin..SpinGuard$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$$GT$17hca3268c610c83bfdE>:
80207996: 01 11        	addi	sp, sp, -0x20
80207998: 06 ec        	sd	ra, 0x18(sp)
8020799a: 22 e8        	sd	s0, 0x10(sp)
8020799c: 00 10        	addi	s0, sp, 0x20
8020799e: 23 30 a4 fe  	sd	a0, -0x20(s0)
802079a2: 23 34 a4 fe  	sd	a0, -0x18(s0)
802079a6: 97 20 00 00  	auipc	ra, 0x2
802079aa: e7 80 40 fd  	jalr	-0x2c(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5cbd1855be7c37ceE>
802079ae: 03 35 04 fe  	ld	a0, -0x20(s0)
802079b2: 21 05        	addi	a0, a0, 0x8
802079b4: 97 00 00 00  	auipc	ra, 0x0
802079b8: e7 80 c0 33  	jalr	0x33c(ra) <_ZN4core3ptr38drop_in_place$LT$os..cpu..IntrLock$GT$17h7a76135fe40e9467E>
802079bc: e2 60        	ld	ra, 0x18(sp)
802079be: 42 64        	ld	s0, 0x10(sp)
802079c0: 05 61        	addi	sp, sp, 0x20
802079c2: 82 80        	ret

00000000802079c4 <_ZN4core3ptr106drop_in_place$LT$core..option..Option$LT$alloc..sync..Weak$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hb2f0f88941310d04E>:
802079c4: 01 11        	addi	sp, sp, -0x20
802079c6: 06 ec        	sd	ra, 0x18(sp)
802079c8: 22 e8        	sd	s0, 0x10(sp)
802079ca: 00 10        	addi	s0, sp, 0x20
802079cc: 23 30 a4 fe  	sd	a0, -0x20(s0)
802079d0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802079d4: 08 61        	ld	a0, 0x0(a0)
802079d6: 11 e5        	bnez	a0, 0x802079e2 <_ZN4core3ptr106drop_in_place$LT$core..option..Option$LT$alloc..sync..Weak$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hb2f0f88941310d04E+0x1e>
802079d8: 09 a0        	j	0x802079da <_ZN4core3ptr106drop_in_place$LT$core..option..Option$LT$alloc..sync..Weak$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hb2f0f88941310d04E+0x16>
802079da: e2 60        	ld	ra, 0x18(sp)
802079dc: 42 64        	ld	s0, 0x10(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
802079de: 05 61        	addi	sp, sp, 0x20
802079e0: 82 80        	ret
802079e2: 03 35 04 fe  	ld	a0, -0x20(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
802079e6: 97 10 00 00  	auipc	ra, 0x1
802079ea: e7 80 20 9b  	jalr	-0x64e(ra) <_ZN4core3ptr78drop_in_place$LT$alloc..sync..Weak$LT$os..task..task..TaskControlBlock$GT$$GT$17hbaf216b4486ec19aE>
802079ee: f5 b7        	j	0x802079da <_ZN4core3ptr106drop_in_place$LT$core..option..Option$LT$alloc..sync..Weak$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hb2f0f88941310d04E+0x16>

00000000802079f0 <_ZN4core3ptr107drop_in_place$LT$alloc..raw_vec..RawVec$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17h545c7f5549d336f8E>:
802079f0: 01 11        	addi	sp, sp, -0x20
802079f2: 06 ec        	sd	ra, 0x18(sp)
802079f4: 22 e8        	sd	s0, 0x10(sp)
802079f6: 00 10        	addi	s0, sp, 0x20
802079f8: 23 34 a4 fe  	sd	a0, -0x18(s0)
802079fc: 97 20 00 00  	auipc	ra, 0x2
80207a00: e7 80 00 af  	jalr	-0x510(ra) <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf50b4b308c099762E>
80207a04: e2 60        	ld	ra, 0x18(sp)
80207a06: 42 64        	ld	s0, 0x10(sp)
80207a08: 05 61        	addi	sp, sp, 0x20
80207a0a: 82 80        	ret

0000000080207a0c <_ZN4core3ptr107drop_in_place$LT$core..option..Option$LT$os..sync..spin..Spin$LT$os..task..manager..TaskManager$GT$$GT$$GT$17hfaf427fef6691009E>:
80207a0c: 01 11        	addi	sp, sp, -0x20
80207a0e: 06 ec        	sd	ra, 0x18(sp)
80207a10: 22 e8        	sd	s0, 0x10(sp)
80207a12: 00 10        	addi	s0, sp, 0x20
80207a14: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207a18: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207a1c: 08 61        	ld	a0, 0x0(a0)
80207a1e: 11 e5        	bnez	a0, 0x80207a2a <_ZN4core3ptr107drop_in_place$LT$core..option..Option$LT$os..sync..spin..Spin$LT$os..task..manager..TaskManager$GT$$GT$$GT$17hfaf427fef6691009E+0x1e>
80207a20: 09 a0        	j	0x80207a22 <_ZN4core3ptr107drop_in_place$LT$core..option..Option$LT$os..sync..spin..Spin$LT$os..task..manager..TaskManager$GT$$GT$$GT$17hfaf427fef6691009E+0x16>
80207a22: e2 60        	ld	ra, 0x18(sp)
80207a24: 42 64        	ld	s0, 0x10(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207a26: 05 61        	addi	sp, sp, 0x20
80207a28: 82 80        	ret
80207a2a: 03 35 04 fe  	ld	a0, -0x20(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207a2e: 97 10 00 00  	auipc	ra, 0x1
80207a32: e7 80 c0 9d  	jalr	-0x624(ra) <_ZN4core3ptr79drop_in_place$LT$os..sync..spin..Spin$LT$os..task..manager..TaskManager$GT$$GT$17hd1f05526cb58429cE>
80207a36: f5 b7        	j	0x80207a22 <_ZN4core3ptr107drop_in_place$LT$core..option..Option$LT$os..sync..spin..Spin$LT$os..task..manager..TaskManager$GT$$GT$$GT$17hfaf427fef6691009E+0x16>

0000000080207a38 <_ZN4core3ptr112drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$$GT$17hb7366305fee61554E>:
80207a38: 01 11        	addi	sp, sp, -0x20
80207a3a: 06 ec        	sd	ra, 0x18(sp)
80207a3c: 22 e8        	sd	s0, 0x10(sp)
80207a3e: 00 10        	addi	s0, sp, 0x20
80207a40: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207a44: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207a48: 08 61        	ld	a0, 0x0(a0)
80207a4a: 11 e5        	bnez	a0, 0x80207a56 <_ZN4core3ptr112drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$$GT$17hb7366305fee61554E+0x1e>
80207a4c: 09 a0        	j	0x80207a4e <_ZN4core3ptr112drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$$GT$17hb7366305fee61554E+0x16>
80207a4e: e2 60        	ld	ra, 0x18(sp)
80207a50: 42 64        	ld	s0, 0x10(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207a52: 05 61        	addi	sp, sp, 0x20
80207a54: 82 80        	ret
80207a56: 03 35 04 fe  	ld	a0, -0x20(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207a5a: 97 60 01 00  	auipc	ra, 0x16
80207a5e: e7 80 00 02  	jalr	0x20(ra) <_ZN4core3ptr84drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$17h88c9727042c9d2a2E>
80207a62: f5 b7        	j	0x80207a4e <_ZN4core3ptr112drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$$GT$17hb7366305fee61554E+0x16>

0000000080207a64 <_ZN4core3ptr116drop_in_place$LT$os..sync..spin..Spin$LT$virtio_drivers..blk..VirtIOBlk$LT$os..filesystem..fs..VirtioHal$GT$$GT$$GT$17h050c4ef64a5b04fbE>:
80207a64: 01 11        	addi	sp, sp, -0x20
80207a66: 06 ec        	sd	ra, 0x18(sp)
80207a68: 22 e8        	sd	s0, 0x10(sp)
80207a6a: 00 10        	addi	s0, sp, 0x20
80207a6c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207a70: 61 05        	addi	a0, a0, 0x18
80207a72: 97 00 00 00  	auipc	ra, 0x0
80207a76: e7 80 00 01  	jalr	0x10(ra) <_ZN4core3ptr118drop_in_place$LT$core..cell..UnsafeCell$LT$virtio_drivers..blk..VirtIOBlk$LT$os..filesystem..fs..VirtioHal$GT$$GT$$GT$17h4a875429a04bbc57E>
80207a7a: e2 60        	ld	ra, 0x18(sp)
80207a7c: 42 64        	ld	s0, 0x10(sp)
80207a7e: 05 61        	addi	sp, sp, 0x20
80207a80: 82 80        	ret

0000000080207a82 <_ZN4core3ptr118drop_in_place$LT$core..cell..UnsafeCell$LT$virtio_drivers..blk..VirtIOBlk$LT$os..filesystem..fs..VirtioHal$GT$$GT$$GT$17h4a875429a04bbc57E>:
80207a82: 01 11        	addi	sp, sp, -0x20
80207a84: 06 ec        	sd	ra, 0x18(sp)
80207a86: 22 e8        	sd	s0, 0x10(sp)
80207a88: 00 10        	addi	s0, sp, 0x20
80207a8a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207a8e: 97 10 00 00  	auipc	ra, 0x1
80207a92: e7 80 40 b4  	jalr	-0x4bc(ra) <_ZN4core3ptr88drop_in_place$LT$virtio_drivers..blk..VirtIOBlk$LT$os..filesystem..fs..VirtioHal$GT$$GT$17h1fcb4b9cc70545a1E>
80207a96: e2 60        	ld	ra, 0x18(sp)
80207a98: 42 64        	ld	s0, 0x10(sp)
80207a9a: 05 61        	addi	sp, sp, 0x20
80207a9c: 82 80        	ret

0000000080207a9e <_ZN4core3ptr119drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$17h1d9cd17a19f7525cE>:
80207a9e: 01 11        	addi	sp, sp, -0x20
80207aa0: 06 ec        	sd	ra, 0x18(sp)
80207aa2: 22 e8        	sd	s0, 0x10(sp)
80207aa4: 00 10        	addi	s0, sp, 0x20
80207aa6: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207aaa: 97 10 00 00  	auipc	ra, 0x1
80207aae: e7 80 e0 f1  	jalr	-0xe2(ra) <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60439991405ec880E>
80207ab2: e2 60        	ld	ra, 0x18(sp)
80207ab4: 42 64        	ld	s0, 0x10(sp)
80207ab6: 05 61        	addi	sp, sp, 0x20
80207ab8: 82 80        	ret

0000000080207aba <_ZN4core3ptr121drop_in_place$LT$os..sync..spin..SpinGuard$LT$virtio_drivers..blk..VirtIOBlk$LT$os..filesystem..fs..VirtioHal$GT$$GT$$GT$17hb869881bea743419E>:
80207aba: 01 11        	addi	sp, sp, -0x20
80207abc: 06 ec        	sd	ra, 0x18(sp)
80207abe: 22 e8        	sd	s0, 0x10(sp)
80207ac0: 00 10        	addi	s0, sp, 0x20
80207ac2: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207ac6: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207aca: 97 20 00 00  	auipc	ra, 0x2
80207ace: e7 80 e0 0d  	jalr	0xde(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7863b6cb886f3b1eE>
80207ad2: 03 35 04 fe  	ld	a0, -0x20(s0)
80207ad6: 21 05        	addi	a0, a0, 0x8
80207ad8: 97 00 00 00  	auipc	ra, 0x0
80207adc: e7 80 80 21  	jalr	0x218(ra) <_ZN4core3ptr38drop_in_place$LT$os..cpu..IntrLock$GT$17h7a76135fe40e9467E>
80207ae0: e2 60        	ld	ra, 0x18(sp)
80207ae2: 42 64        	ld	s0, 0x10(sp)
80207ae4: 05 61        	addi	sp, sp, 0x20
80207ae6: 82 80        	ret

0000000080207ae8 <_ZN4core3ptr124drop_in_place$LT$alloc..collections..vec_deque..VecDeque$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hd3638dec9a5d0a11E>:
80207ae8: 01 11        	addi	sp, sp, -0x20
80207aea: 06 ec        	sd	ra, 0x18(sp)
80207aec: 22 e8        	sd	s0, 0x10(sp)
80207aee: 00 10        	addi	s0, sp, 0x20
80207af0: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207af4: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207af8: 97 20 00 00  	auipc	ra, 0x2
80207afc: e7 80 20 a8  	jalr	-0x57e(ra) <_ZN94_$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h670a2b1674358ec6E>
80207b00: 03 35 04 fe  	ld	a0, -0x20(s0)
80207b04: 97 00 00 00  	auipc	ra, 0x0
80207b08: e7 80 c0 ee  	jalr	-0x114(ra) <_ZN4core3ptr107drop_in_place$LT$alloc..raw_vec..RawVec$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17h545c7f5549d336f8E>
80207b0c: e2 60        	ld	ra, 0x18(sp)
80207b0e: 42 64        	ld	s0, 0x10(sp)
80207b10: 05 61        	addi	sp, sp, 0x20
80207b12: 82 80        	ret

0000000080207b14 <_ZN4core3ptr127drop_in_place$LT$alloc..sync..Weak$LT$spin..mutex..Mutex$LT$easy_fs..efs..EasyFileSystem$GT$$C$$RF$alloc..alloc..Global$GT$$GT$17h69484c8ca23378f4E>:
80207b14: 01 11        	addi	sp, sp, -0x20
80207b16: 06 ec        	sd	ra, 0x18(sp)
80207b18: 22 e8        	sd	s0, 0x10(sp)
80207b1a: 00 10        	addi	s0, sp, 0x20
80207b1c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207b20: 97 10 00 00  	auipc	ra, 0x1
80207b24: e7 80 40 50  	jalr	0x504(ra) <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E>
80207b28: e2 60        	ld	ra, 0x18(sp)
80207b2a: 42 64        	ld	s0, 0x10(sp)
80207b2c: 05 61        	addi	sp, sp, 0x20
80207b2e: 82 80        	ret

0000000080207b30 <_ZN4core3ptr128drop_in_place$LT$core..option..Option$LT$os..sync..spin..Spin$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$$GT$$GT$17hf9293c2362695eb9E>:
80207b30: 01 11        	addi	sp, sp, -0x20
80207b32: 06 ec        	sd	ra, 0x18(sp)
80207b34: 22 e8        	sd	s0, 0x10(sp)
80207b36: 00 10        	addi	s0, sp, 0x20
80207b38: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207b3c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207b40: 08 61        	ld	a0, 0x0(a0)
80207b42: 11 e5        	bnez	a0, 0x80207b4e <_ZN4core3ptr128drop_in_place$LT$core..option..Option$LT$os..sync..spin..Spin$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$$GT$$GT$17hf9293c2362695eb9E+0x1e>
80207b44: 09 a0        	j	0x80207b46 <_ZN4core3ptr128drop_in_place$LT$core..option..Option$LT$os..sync..spin..Spin$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$$GT$$GT$17hf9293c2362695eb9E+0x16>
80207b46: e2 60        	ld	ra, 0x18(sp)
80207b48: 42 64        	ld	s0, 0x10(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207b4a: 05 61        	addi	sp, sp, 0x20
80207b4c: 82 80        	ret
80207b4e: 03 35 04 fe  	ld	a0, -0x20(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207b52: 97 00 00 00  	auipc	ra, 0x0
80207b56: e7 80 60 da  	jalr	-0x25a(ra) <_ZN4core3ptr100drop_in_place$LT$os..sync..spin..Spin$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$$GT$17he61ced0872e2113bE>
80207b5a: f5 b7        	j	0x80207b46 <_ZN4core3ptr128drop_in_place$LT$core..option..Option$LT$os..sync..spin..Spin$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$$GT$$GT$17hf9293c2362695eb9E+0x16>

0000000080207b5c <_ZN4core3ptr147drop_in_place$LT$alloc..sync..Weak$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$C$$RF$alloc..alloc..Global$GT$$GT$17h5c6378ac321e71b8E>:
80207b5c: 01 11        	addi	sp, sp, -0x20
80207b5e: 06 ec        	sd	ra, 0x18(sp)
80207b60: 22 e8        	sd	s0, 0x10(sp)
80207b62: 00 10        	addi	s0, sp, 0x20
80207b64: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207b68: 97 10 00 00  	auipc	ra, 0x1
80207b6c: e7 80 20 14  	jalr	0x142(ra) <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE>
80207b70: e2 60        	ld	ra, 0x18(sp)
80207b72: 42 64        	ld	s0, 0x10(sp)
80207b74: 05 61        	addi	sp, sp, 0x20
80207b76: 82 80        	ret

0000000080207b78 <_ZN4core3ptr147drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$17h51e0465a82d21f6fE>:
80207b78: 01 11        	addi	sp, sp, -0x20
80207b7a: 06 ec        	sd	ra, 0x18(sp)
80207b7c: 22 e8        	sd	s0, 0x10(sp)
80207b7e: 00 10        	addi	s0, sp, 0x20
80207b80: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207b84: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207b88: 08 61        	ld	a0, 0x0(a0)
80207b8a: 11 e5        	bnez	a0, 0x80207b96 <_ZN4core3ptr147drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$17h51e0465a82d21f6fE+0x1e>
80207b8c: 09 a0        	j	0x80207b8e <_ZN4core3ptr147drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$17h51e0465a82d21f6fE+0x16>
80207b8e: e2 60        	ld	ra, 0x18(sp)
80207b90: 42 64        	ld	s0, 0x10(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207b92: 05 61        	addi	sp, sp, 0x20
80207b94: 82 80        	ret
80207b96: 03 35 04 fe  	ld	a0, -0x20(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207b9a: 97 00 00 00  	auipc	ra, 0x0
80207b9e: e7 80 40 f0  	jalr	-0xfc(ra) <_ZN4core3ptr119drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$17h1d9cd17a19f7525cE>
80207ba2: f5 b7        	j	0x80207b8e <_ZN4core3ptr147drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$17h51e0465a82d21f6fE+0x16>

0000000080207ba4 <_ZN4core3ptr157drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$u5d$$GT$17h21589b439a36a657E>:
80207ba4: 39 71        	addi	sp, sp, -0x40
80207ba6: 06 fc        	sd	ra, 0x38(sp)
80207ba8: 22 f8        	sd	s0, 0x30(sp)
80207baa: 80 00        	addi	s0, sp, 0x40
80207bac: 23 34 b4 fc  	sd	a1, -0x38(s0)
80207bb0: 23 38 a4 fc  	sd	a0, -0x30(s0)
80207bb4: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207bb8: 23 34 b4 fe  	sd	a1, -0x18(s0)
80207bbc: 01 45        	li	a0, 0x0
80207bbe: 23 3c a4 fc  	sd	a0, -0x28(s0)
80207bc2: 09 a0        	j	0x80207bc4 <_ZN4core3ptr157drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$u5d$$GT$17h21589b439a36a657E+0x20>
80207bc4: 83 35 84 fc  	ld	a1, -0x38(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207bc8: 03 35 84 fd  	ld	a0, -0x28(s0)
80207bcc: 63 02 b5 02  	beq	a0, a1, 0x80207bf0 <_ZN4core3ptr157drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$u5d$$GT$17h21589b439a36a657E+0x4c>
80207bd0: 09 a0        	j	0x80207bd2 <_ZN4core3ptr157drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$u5d$$GT$17h21589b439a36a657E+0x2e>
80207bd2: 03 35 04 fd  	ld	a0, -0x30(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207bd6: 83 35 84 fd  	ld	a1, -0x28(s0)
80207bda: 13 96 45 00  	slli	a2, a1, 0x4
80207bde: 32 95        	add	a0, a0, a2
80207be0: 85 05        	addi	a1, a1, 0x1
80207be2: 23 3c b4 fc  	sd	a1, -0x28(s0)
80207be6: 97 00 00 00  	auipc	ra, 0x0
80207bea: e7 80 20 f9  	jalr	-0x6e(ra) <_ZN4core3ptr147drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$17h51e0465a82d21f6fE>
80207bee: d9 bf        	j	0x80207bc4 <_ZN4core3ptr157drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$u5d$$GT$17h21589b439a36a657E+0x20>
80207bf0: e2 70        	ld	ra, 0x38(sp)
80207bf2: 42 74        	ld	s0, 0x30(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80207bf4: 21 61        	addi	sp, sp, 0x40
80207bf6: 82 80        	ret

0000000080207bf8 <_ZN4core3ptr170drop_in_place$LT$alloc..vec..Vec$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$$GT$17h66d5cbe56aff75ddE>:
80207bf8: 01 11        	addi	sp, sp, -0x20
80207bfa: 06 ec        	sd	ra, 0x18(sp)
80207bfc: 22 e8        	sd	s0, 0x10(sp)
80207bfe: 00 10        	addi	s0, sp, 0x20
80207c00: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207c04: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207c08: 97 10 00 00  	auipc	ra, 0x1
80207c0c: e7 80 80 c8  	jalr	-0x378(ra) <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc091cf9c3ed0da45E>
80207c10: 03 35 04 fe  	ld	a0, -0x20(s0)
80207c14: 97 00 00 00  	auipc	ra, 0x0
80207c18: e7 80 c0 02  	jalr	0x2c(ra) <_ZN4core3ptr177drop_in_place$LT$alloc..raw_vec..RawVec$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$$GT$17hd93a0dccaf3d1ffdE>
80207c1c: e2 60        	ld	ra, 0x18(sp)
80207c1e: 42 64        	ld	s0, 0x10(sp)
80207c20: 05 61        	addi	sp, sp, 0x20
80207c22: 82 80        	ret

0000000080207c24 <_ZN4core3ptr175drop_in_place$LT$$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$alloc..string..String$C$alloc..alloc..Global$GT$$GT$17hf3cff385b668efe5E>:
80207c24: 01 11        	addi	sp, sp, -0x20
80207c26: 06 ec        	sd	ra, 0x18(sp)
80207c28: 22 e8        	sd	s0, 0x10(sp)
80207c2a: 00 10        	addi	s0, sp, 0x20
80207c2c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207c30: 97 00 00 00  	auipc	ra, 0x0
80207c34: e7 80 80 ae  	jalr	-0x518(ra) <_ZN157_$LT$$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h6e129fc827b83a6bE>
80207c38: e2 60        	ld	ra, 0x18(sp)
80207c3a: 42 64        	ld	s0, 0x10(sp)
80207c3c: 05 61        	addi	sp, sp, 0x20
80207c3e: 82 80        	ret

0000000080207c40 <_ZN4core3ptr177drop_in_place$LT$alloc..raw_vec..RawVec$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$$GT$17hd93a0dccaf3d1ffdE>:
80207c40: 01 11        	addi	sp, sp, -0x20
80207c42: 06 ec        	sd	ra, 0x18(sp)
80207c44: 22 e8        	sd	s0, 0x10(sp)
80207c46: 00 10        	addi	s0, sp, 0x20
80207c48: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207c4c: 97 20 00 00  	auipc	ra, 0x2
80207c50: e7 80 a0 84  	jalr	-0x7b6(ra) <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd81c64764defc969E>
80207c54: e2 60        	ld	ra, 0x18(sp)
80207c56: 42 64        	ld	s0, 0x10(sp)
80207c58: 05 61        	addi	sp, sp, 0x20
80207c5a: 82 80        	ret

0000000080207c5c <_ZN4core3ptr193drop_in_place$LT$$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..Dropper$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17h3be37e759ffc4b78E>:
80207c5c: 01 11        	addi	sp, sp, -0x20
80207c5e: 06 ec        	sd	ra, 0x18(sp)
80207c60: 22 e8        	sd	s0, 0x10(sp)
80207c62: 00 10        	addi	s0, sp, 0x20
80207c64: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207c68: 97 00 00 00  	auipc	ra, 0x0
80207c6c: e7 80 c0 af  	jalr	-0x504(ra) <_ZN159_$LT$$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..Dropper$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h732c36a854b7244cE>
80207c70: e2 60        	ld	ra, 0x18(sp)
80207c72: 42 64        	ld	s0, 0x10(sp)
80207c74: 05 61        	addi	sp, sp, 0x20
80207c76: 82 80        	ret

0000000080207c78 <_ZN4core3ptr26drop_in_place$LT$usize$GT$17h57119a925e682259E>:
80207c78: 01 11        	addi	sp, sp, -0x20
80207c7a: 06 ec        	sd	ra, 0x18(sp)
80207c7c: 22 e8        	sd	s0, 0x10(sp)
80207c7e: 00 10        	addi	s0, sp, 0x20
80207c80: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207c84: e2 60        	ld	ra, 0x18(sp)
80207c86: 42 64        	ld	s0, 0x10(sp)
80207c88: 05 61        	addi	sp, sp, 0x20
80207c8a: 82 80        	ret

0000000080207c8c <_ZN4core3ptr27drop_in_place$LT$$RF$u8$GT$17h680d73902634c334E>:
80207c8c: 01 11        	addi	sp, sp, -0x20
80207c8e: 06 ec        	sd	ra, 0x18(sp)
80207c90: 22 e8        	sd	s0, 0x10(sp)
80207c92: 00 10        	addi	s0, sp, 0x20
80207c94: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207c98: e2 60        	ld	ra, 0x18(sp)
80207c9a: 42 64        	ld	s0, 0x10(sp)
80207c9c: 05 61        	addi	sp, sp, 0x20
80207c9e: 82 80        	ret

0000000080207ca0 <_ZN4core3ptr28drop_in_place$LT$$RF$i32$GT$17h3bab86f7db3558a6E>:
80207ca0: 01 11        	addi	sp, sp, -0x20
80207ca2: 06 ec        	sd	ra, 0x18(sp)
80207ca4: 22 e8        	sd	s0, 0x10(sp)
80207ca6: 00 10        	addi	s0, sp, 0x20
80207ca8: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207cac: e2 60        	ld	ra, 0x18(sp)
80207cae: 42 64        	ld	s0, 0x10(sp)
80207cb0: 05 61        	addi	sp, sp, 0x20
80207cb2: 82 80        	ret

0000000080207cb4 <_ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17h861a4e39513add14E>:
80207cb4: 01 11        	addi	sp, sp, -0x20
80207cb6: 06 ec        	sd	ra, 0x18(sp)
80207cb8: 22 e8        	sd	s0, 0x10(sp)
80207cba: 00 10        	addi	s0, sp, 0x20
80207cbc: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207cc0: e2 60        	ld	ra, 0x18(sp)
80207cc2: 42 64        	ld	s0, 0x10(sp)
80207cc4: 05 61        	addi	sp, sp, 0x20
80207cc6: 82 80        	ret

0000000080207cc8 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h15f053b9b1f07b96E>:
80207cc8: 01 11        	addi	sp, sp, -0x20
80207cca: 06 ec        	sd	ra, 0x18(sp)
80207ccc: 22 e8        	sd	s0, 0x10(sp)
80207cce: 00 10        	addi	s0, sp, 0x20
80207cd0: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207cd4: e2 60        	ld	ra, 0x18(sp)
80207cd6: 42 64        	ld	s0, 0x10(sp)
80207cd8: 05 61        	addi	sp, sp, 0x20
80207cda: 82 80        	ret

0000000080207cdc <_ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17h6d8df06a43cf1fa2E>:
80207cdc: 01 11        	addi	sp, sp, -0x20
80207cde: 06 ec        	sd	ra, 0x18(sp)
80207ce0: 22 e8        	sd	s0, 0x10(sp)
80207ce2: 00 10        	addi	s0, sp, 0x20
80207ce4: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207ce8: e2 60        	ld	ra, 0x18(sp)
80207cea: 42 64        	ld	s0, 0x10(sp)
80207cec: 05 61        	addi	sp, sp, 0x20
80207cee: 82 80        	ret

0000000080207cf0 <_ZN4core3ptr38drop_in_place$LT$os..cpu..IntrLock$GT$17h7a76135fe40e9467E>:
80207cf0: 01 11        	addi	sp, sp, -0x20
80207cf2: 06 ec        	sd	ra, 0x18(sp)
80207cf4: 22 e8        	sd	s0, 0x10(sp)
80207cf6: 00 10        	addi	s0, sp, 0x20
80207cf8: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207cfc: 97 20 00 00  	auipc	ra, 0x2
80207d00: e7 80 00 02  	jalr	0x20(ra) <_ZN59_$LT$os..cpu..IntrLock$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb5cd8e8e622db9b9E>
80207d04: e2 60        	ld	ra, 0x18(sp)
80207d06: 42 64        	ld	s0, 0x10(sp)
80207d08: 05 61        	addi	sp, sp, 0x20
80207d0a: 82 80        	ret

0000000080207d0c <_ZN4core3ptr38drop_in_place$LT$os..vm..PageTable$GT$17h37485d31fc718f76E>:
80207d0c: 01 11        	addi	sp, sp, -0x20
80207d0e: 06 ec        	sd	ra, 0x18(sp)
80207d10: 22 e8        	sd	s0, 0x10(sp)
80207d12: 00 10        	addi	s0, sp, 0x20
80207d14: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207d18: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207d1c: 97 00 00 00  	auipc	ra, 0x0
80207d20: e7 80 e0 52  	jalr	0x52e(ra) <_ZN4core3ptr72drop_in_place$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$17had0106bc1d3fbf6fE>
80207d24: 03 35 04 fe  	ld	a0, -0x20(s0)
80207d28: 61 05        	addi	a0, a0, 0x18
80207d2a: 97 00 00 00  	auipc	ra, 0x0
80207d2e: e7 80 c0 16  	jalr	0x16c(ra) <_ZN4core3ptr49drop_in_place$LT$alloc..vec..Vec$LT$usize$GT$$GT$17he14401ebb716fc74E>
80207d32: e2 60        	ld	ra, 0x18(sp)
80207d34: 42 64        	ld	s0, 0x10(sp)
80207d36: 05 61        	addi	sp, sp, 0x20
80207d38: 82 80        	ret

0000000080207d3a <_ZN4core3ptr40drop_in_place$LT$easy_fs..vfs..Inode$GT$17he803c156303cc8b9E>:
80207d3a: 01 11        	addi	sp, sp, -0x20
80207d3c: 06 ec        	sd	ra, 0x18(sp)
80207d3e: 22 e8        	sd	s0, 0x10(sp)
80207d40: 00 10        	addi	s0, sp, 0x20
80207d42: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207d46: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207d4a: 97 10 00 00  	auipc	ra, 0x1
80207d4e: e7 80 40 97  	jalr	-0x68c(ra) <_ZN4core3ptr99drop_in_place$LT$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..efs..EasyFileSystem$GT$$GT$$GT$17h4f71b212d9758283E>
80207d52: 03 35 04 fe  	ld	a0, -0x20(s0)
80207d56: 21 05        	addi	a0, a0, 0x8
80207d58: 97 60 01 00  	auipc	ra, 0x16
80207d5c: e7 80 20 d2  	jalr	-0x2de(ra) <_ZN4core3ptr84drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$17h88c9727042c9d2a2E>
80207d60: e2 60        	ld	ra, 0x18(sp)
80207d62: 42 64        	ld	s0, 0x10(sp)
80207d64: 05 61        	addi	sp, sp, 0x20
80207d66: 82 80        	ret

0000000080207d68 <_ZN4core3ptr40drop_in_place$LT$os..console..Writer$GT$17hb6408660f7ab88b9E>:
80207d68: 01 11        	addi	sp, sp, -0x20
80207d6a: 06 ec        	sd	ra, 0x18(sp)
80207d6c: 22 e8        	sd	s0, 0x10(sp)
80207d6e: 00 10        	addi	s0, sp, 0x20
80207d70: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207d74: e2 60        	ld	ra, 0x18(sp)
80207d76: 42 64        	ld	s0, 0x10(sp)
80207d78: 05 61        	addi	sp, sp, 0x20
80207d7a: 82 80        	ret

0000000080207d7c <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17hf68a660302d4d33fE>:
80207d7c: 01 11        	addi	sp, sp, -0x20
80207d7e: 06 ec        	sd	ra, 0x18(sp)
80207d80: 22 e8        	sd	s0, 0x10(sp)
80207d82: 00 10        	addi	s0, sp, 0x20
80207d84: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207d88: 97 00 00 00  	auipc	ra, 0x0
80207d8c: e7 80 e0 09  	jalr	0x9e(ra) <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hb2c11e0757f8d666E>
80207d90: e2 60        	ld	ra, 0x18(sp)
80207d92: 42 64        	ld	s0, 0x10(sp)
80207d94: 05 61        	addi	sp, sp, 0x20
80207d96: 82 80        	ret

0000000080207d98 <_ZN4core3ptr42drop_in_place$LT$virtio_drivers..Error$GT$17h5b7feea27194d903E>:
80207d98: 01 11        	addi	sp, sp, -0x20
80207d9a: 06 ec        	sd	ra, 0x18(sp)
80207d9c: 22 e8        	sd	s0, 0x10(sp)
80207d9e: 00 10        	addi	s0, sp, 0x20
80207da0: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207da4: e2 60        	ld	ra, 0x18(sp)
80207da6: 42 64        	ld	s0, 0x10(sp)
80207da8: 05 61        	addi	sp, sp, 0x20
80207daa: 82 80        	ret

0000000080207dac <_ZN4core3ptr45drop_in_place$LT$core..cell..BorrowRefMut$GT$17h2473fbc3bd552c74E>:
80207dac: 01 11        	addi	sp, sp, -0x20
80207dae: 06 ec        	sd	ra, 0x18(sp)
80207db0: 22 e8        	sd	s0, 0x10(sp)
80207db2: 00 10        	addi	s0, sp, 0x20
80207db4: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207db8: 97 10 00 00  	auipc	ra, 0x1
80207dbc: e7 80 20 92  	jalr	-0x6de(ra) <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17he4d9bd61b1ab2499E>
80207dc0: e2 60        	ld	ra, 0x18(sp)
80207dc2: 42 64        	ld	s0, 0x10(sp)
80207dc4: 05 61        	addi	sp, sp, 0x20
80207dc6: 82 80        	ret

0000000080207dc8 <_ZN4core3ptr45drop_in_place$LT$os..task..task..TcbInner$GT$17hba6dac20de063c91E>:
80207dc8: 01 11        	addi	sp, sp, -0x20
80207dca: 06 ec        	sd	ra, 0x18(sp)
80207dcc: 22 e8        	sd	s0, 0x10(sp)
80207dce: 00 10        	addi	s0, sp, 0x20
80207dd0: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207dd4: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207dd8: 97 00 00 00  	auipc	ra, 0x0
80207ddc: e7 80 40 fa  	jalr	-0x5c(ra) <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17hf68a660302d4d33fE>
80207de0: 03 35 04 fe  	ld	a0, -0x20(s0)
80207de4: 13 05 05 05  	addi	a0, a0, 0x50
80207de8: 97 10 00 00  	auipc	ra, 0x1
80207dec: e7 80 60 84  	jalr	-0x7ba(ra) <_ZN4core3ptr91drop_in_place$LT$core..option..Option$LT$alloc..boxed..Box$LT$os..vm..PageTable$GT$$GT$$GT$17h7369e6a7b60fa11aE>
80207df0: 03 35 04 fe  	ld	a0, -0x20(s0)
80207df4: 61 05        	addi	a0, a0, 0x18
80207df6: 97 00 00 00  	auipc	ra, 0x0
80207dfa: e7 80 20 e0  	jalr	-0x1fe(ra) <_ZN4core3ptr170drop_in_place$LT$alloc..vec..Vec$LT$core..option..Option$LT$alloc..sync..Arc$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$$GT$$GT$$GT$17h66d5cbe56aff75ddE>
80207dfe: 03 35 04 fe  	ld	a0, -0x20(s0)
80207e02: 13 05 05 06  	addi	a0, a0, 0x60
80207e06: 97 00 00 00  	auipc	ra, 0x0
80207e0a: e7 80 e0 bb  	jalr	-0x442(ra) <_ZN4core3ptr106drop_in_place$LT$core..option..Option$LT$alloc..sync..Weak$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hb2f0f88941310d04E>
80207e0e: 03 35 04 fe  	ld	a0, -0x20(s0)
80207e12: 13 05 05 03  	addi	a0, a0, 0x30
80207e16: 97 00 00 00  	auipc	ra, 0x0
80207e1a: e7 80 60 ab  	jalr	-0x54a(ra) <_ZN4core3ptr100drop_in_place$LT$alloc..vec..Vec$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17ha8ea67a36eba523aE>
80207e1e: e2 60        	ld	ra, 0x18(sp)
80207e20: 42 64        	ld	s0, 0x10(sp)
80207e22: 05 61        	addi	sp, sp, 0x20
80207e24: 82 80        	ret

0000000080207e26 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hb2c11e0757f8d666E>:
80207e26: 01 11        	addi	sp, sp, -0x20
80207e28: 06 ec        	sd	ra, 0x18(sp)
80207e2a: 22 e8        	sd	s0, 0x10(sp)
80207e2c: 00 10        	addi	s0, sp, 0x20
80207e2e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207e32: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207e36: 97 10 00 00  	auipc	ra, 0x1
80207e3a: e7 80 60 a1  	jalr	-0x5ea(ra) <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha6baad283f5b5d92E>
80207e3e: 03 35 04 fe  	ld	a0, -0x20(s0)
80207e42: 97 00 00 00  	auipc	ra, 0x0
80207e46: e7 80 a0 21  	jalr	0x21a(ra) <_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h8715a4ab2d5c338bE>
80207e4a: e2 60        	ld	ra, 0x18(sp)
80207e4c: 42 64        	ld	s0, 0x10(sp)
80207e4e: 05 61        	addi	sp, sp, 0x20
80207e50: 82 80        	ret

0000000080207e52 <_ZN4core3ptr47drop_in_place$LT$os..page_alloc..UserBuffer$GT$17hf9d1417356447d81E>:
80207e52: 01 11        	addi	sp, sp, -0x20
80207e54: 06 ec        	sd	ra, 0x18(sp)
80207e56: 22 e8        	sd	s0, 0x10(sp)
80207e58: 00 10        	addi	s0, sp, 0x20
80207e5a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207e5e: 97 00 00 00  	auipc	ra, 0x0
80207e62: e7 80 60 38  	jalr	0x386(ra) <_ZN4core3ptr68drop_in_place$LT$alloc..vec..Vec$LT$$RF$mut$u20$$u5b$u8$u5d$$GT$$GT$17hdcd769d79123e62dE>
80207e66: e2 60        	ld	ra, 0x18(sp)
80207e68: 42 64        	ld	s0, 0x10(sp)
80207e6a: 05 61        	addi	sp, sp, 0x20
80207e6c: 82 80        	ret

0000000080207e6e <_ZN4core3ptr48drop_in_place$LT$$RF$$u5b$u8$u3b$$u20$4$u5d$$GT$17h47da5b2dcc807c62E>:
80207e6e: 01 11        	addi	sp, sp, -0x20
80207e70: 06 ec        	sd	ra, 0x18(sp)
80207e72: 22 e8        	sd	s0, 0x10(sp)
80207e74: 00 10        	addi	s0, sp, 0x20
80207e76: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207e7a: e2 60        	ld	ra, 0x18(sp)
80207e7c: 42 64        	ld	s0, 0x10(sp)
80207e7e: 05 61        	addi	sp, sp, 0x20
80207e80: 82 80        	ret

0000000080207e82 <_ZN4core3ptr48drop_in_place$LT$core..str..error..Utf8Error$GT$17hf022e948aecc4ba7E>:
80207e82: 01 11        	addi	sp, sp, -0x20
80207e84: 06 ec        	sd	ra, 0x18(sp)
80207e86: 22 e8        	sd	s0, 0x10(sp)
80207e88: 00 10        	addi	s0, sp, 0x20
80207e8a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207e8e: e2 60        	ld	ra, 0x18(sp)
80207e90: 42 64        	ld	s0, 0x10(sp)
80207e92: 05 61        	addi	sp, sp, 0x20
80207e94: 82 80        	ret

0000000080207e96 <_ZN4core3ptr49drop_in_place$LT$alloc..vec..Vec$LT$usize$GT$$GT$17he14401ebb716fc74E>:
80207e96: 01 11        	addi	sp, sp, -0x20
80207e98: 06 ec        	sd	ra, 0x18(sp)
80207e9a: 22 e8        	sd	s0, 0x10(sp)
80207e9c: 00 10        	addi	s0, sp, 0x20
80207e9e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207ea2: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207ea6: 97 10 00 00  	auipc	ra, 0x1
80207eaa: e7 80 e0 91  	jalr	-0x6e2(ra) <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h33624bc08c62c6b6E>
80207eae: 03 35 04 fe  	ld	a0, -0x20(s0)
80207eb2: 97 00 00 00  	auipc	ra, 0x0
80207eb6: e7 80 20 22  	jalr	0x222(ra) <_ZN4core3ptr56drop_in_place$LT$alloc..raw_vec..RawVec$LT$usize$GT$$GT$17h08f8d0717f9a77f4E>
80207eba: e2 60        	ld	ra, 0x18(sp)
80207ebc: 42 64        	ld	s0, 0x10(sp)
80207ebe: 05 61        	addi	sp, sp, 0x20
80207ec0: 82 80        	ret

0000000080207ec2 <_ZN4core3ptr49drop_in_place$LT$easy_fs..efs..EasyFileSystem$GT$17hac966d09e2a10160E>:
80207ec2: 01 11        	addi	sp, sp, -0x20
80207ec4: 06 ec        	sd	ra, 0x18(sp)
80207ec6: 22 e8        	sd	s0, 0x10(sp)
80207ec8: 00 10        	addi	s0, sp, 0x20
80207eca: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207ece: 97 60 01 00  	auipc	ra, 0x16
80207ed2: e7 80 c0 ba  	jalr	-0x454(ra) <_ZN4core3ptr84drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$17h88c9727042c9d2a2E>
80207ed6: e2 60        	ld	ra, 0x18(sp)
80207ed8: 42 64        	ld	s0, 0x10(sp)
80207eda: 05 61        	addi	sp, sp, 0x20
80207edc: 82 80        	ret

0000000080207ede <_ZN4core3ptr49drop_in_place$LT$os..filesystem..stdio..Stdin$GT$17h8ff2a81f65502641E>:
80207ede: 01 11        	addi	sp, sp, -0x20
80207ee0: 06 ec        	sd	ra, 0x18(sp)
80207ee2: 22 e8        	sd	s0, 0x10(sp)
80207ee4: 00 10        	addi	s0, sp, 0x20
80207ee6: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207eea: e2 60        	ld	ra, 0x18(sp)
80207eec: 42 64        	ld	s0, 0x10(sp)
80207eee: 05 61        	addi	sp, sp, 0x20
80207ef0: 82 80        	ret

0000000080207ef2 <_ZN4core3ptr49drop_in_place$LT$os..page_alloc..AllocerGuard$GT$17h5da965a35f3e2985E>:
80207ef2: 01 11        	addi	sp, sp, -0x20
80207ef4: 06 ec        	sd	ra, 0x18(sp)
80207ef6: 22 e8        	sd	s0, 0x10(sp)
80207ef8: 00 10        	addi	s0, sp, 0x20
80207efa: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207efe: 97 20 00 00  	auipc	ra, 0x2
80207f02: e7 80 c0 e3  	jalr	-0x1c4(ra) <_ZN70_$LT$os..page_alloc..AllocerGuard$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha062ed88a1afcce9E>
80207f06: e2 60        	ld	ra, 0x18(sp)
80207f08: 42 64        	ld	s0, 0x10(sp)
80207f0a: 05 61        	addi	sp, sp, 0x20
80207f0c: 82 80        	ret

0000000080207f0e <_ZN4core3ptr49drop_in_place$LT$volatile..Volatile$LT$u8$GT$$GT$17ha0f4a85dfd2ecd1cE>:
80207f0e: 01 11        	addi	sp, sp, -0x20
80207f10: 06 ec        	sd	ra, 0x18(sp)
80207f12: 22 e8        	sd	s0, 0x10(sp)
80207f14: 00 10        	addi	s0, sp, 0x20
80207f16: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207f1a: e2 60        	ld	ra, 0x18(sp)
80207f1c: 42 64        	ld	s0, 0x10(sp)
80207f1e: 05 61        	addi	sp, sp, 0x20
80207f20: 82 80        	ret

0000000080207f22 <_ZN4core3ptr50drop_in_place$LT$os..filesystem..stdio..Stdout$GT$17h6c4c7270a1a7ae57E>:
80207f22: 01 11        	addi	sp, sp, -0x20
80207f24: 06 ec        	sd	ra, 0x18(sp)
80207f26: 22 e8        	sd	s0, 0x10(sp)
80207f28: 00 10        	addi	s0, sp, 0x20
80207f2a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207f2e: e2 60        	ld	ra, 0x18(sp)
80207f30: 42 64        	ld	s0, 0x10(sp)
80207f32: 05 61        	addi	sp, sp, 0x20
80207f34: 82 80        	ret

0000000080207f36 <_ZN4core3ptr50drop_in_place$LT$volatile..Volatile$LT$u16$GT$$GT$17hadf0eabb8f1914c1E>:
80207f36: 01 11        	addi	sp, sp, -0x20
80207f38: 06 ec        	sd	ra, 0x18(sp)
80207f3a: 22 e8        	sd	s0, 0x10(sp)
80207f3c: 00 10        	addi	s0, sp, 0x20
80207f3e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207f42: e2 60        	ld	ra, 0x18(sp)
80207f44: 42 64        	ld	s0, 0x10(sp)
80207f46: 05 61        	addi	sp, sp, 0x20
80207f48: 82 80        	ret

0000000080207f4a <_ZN4core3ptr50drop_in_place$LT$volatile..Volatile$LT$u32$GT$$GT$17h0e63662e300138deE>:
80207f4a: 01 11        	addi	sp, sp, -0x20
80207f4c: 06 ec        	sd	ra, 0x18(sp)
80207f4e: 22 e8        	sd	s0, 0x10(sp)
80207f50: 00 10        	addi	s0, sp, 0x20
80207f52: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207f56: e2 60        	ld	ra, 0x18(sp)
80207f58: 42 64        	ld	s0, 0x10(sp)
80207f5a: 05 61        	addi	sp, sp, 0x20
80207f5c: 82 80        	ret

0000000080207f5e <_ZN4core3ptr50drop_in_place$LT$volatile..Volatile$LT$u64$GT$$GT$17h26a261bdba0ed4b3E>:
80207f5e: 01 11        	addi	sp, sp, -0x20
80207f60: 06 ec        	sd	ra, 0x18(sp)
80207f62: 22 e8        	sd	s0, 0x10(sp)
80207f64: 00 10        	addi	s0, sp, 0x20
80207f66: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207f6a: e2 60        	ld	ra, 0x18(sp)
80207f6c: 42 64        	ld	s0, 0x10(sp)
80207f6e: 05 61        	addi	sp, sp, 0x20
80207f70: 82 80        	ret

0000000080207f72 <_ZN4core3ptr51drop_in_place$LT$os..filesystem..inode..OSinode$GT$17h6996aa2ce5a9f428E>:
80207f72: 01 11        	addi	sp, sp, -0x20
80207f74: 06 ec        	sd	ra, 0x18(sp)
80207f76: 22 e8        	sd	s0, 0x10(sp)
80207f78: 00 10        	addi	s0, sp, 0x20
80207f7a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207f7e: 97 00 00 00  	auipc	ra, 0x0
80207f82: e7 80 e0 46  	jalr	0x46e(ra) <_ZN4core3ptr79drop_in_place$LT$os..sync..spin..Spin$LT$os..filesystem..inode..RLinode$GT$$GT$17h5540dc9c8a3be39eE>
80207f86: e2 60        	ld	ra, 0x18(sp)
80207f88: 42 64        	ld	s0, 0x10(sp)
80207f8a: 05 61        	addi	sp, sp, 0x20
80207f8c: 82 80        	ret

0000000080207f8e <_ZN4core3ptr51drop_in_place$LT$os..filesystem..inode..RLinode$GT$17he3072ec265b2aaafE>:
80207f8e: 01 11        	addi	sp, sp, -0x20
80207f90: 06 ec        	sd	ra, 0x18(sp)
80207f92: 22 e8        	sd	s0, 0x10(sp)
80207f94: 00 10        	addi	s0, sp, 0x20
80207f96: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207f9a: 97 00 00 00  	auipc	ra, 0x0
80207f9e: e7 80 e0 22  	jalr	0x22e(ra) <_ZN4core3ptr64drop_in_place$LT$alloc..sync..Arc$LT$easy_fs..vfs..Inode$GT$$GT$17hac687c9eac6e2cfdE>
80207fa2: e2 60        	ld	ra, 0x18(sp)
80207fa4: 42 64        	ld	s0, 0x10(sp)
80207fa6: 05 61        	addi	sp, sp, 0x20
80207fa8: 82 80        	ret

0000000080207faa <_ZN4core3ptr51drop_in_place$LT$os..task..manager..TaskManager$GT$17h5644a42c748778e7E>:
80207faa: 01 11        	addi	sp, sp, -0x20
80207fac: 06 ec        	sd	ra, 0x18(sp)
80207fae: 22 e8        	sd	s0, 0x10(sp)
80207fb0: 00 10        	addi	s0, sp, 0x20
80207fb2: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207fb6: 23 34 a4 fe  	sd	a0, -0x18(s0)
80207fba: 97 00 00 00  	auipc	ra, 0x0
80207fbe: e7 80 e0 b2  	jalr	-0x4d2(ra) <_ZN4core3ptr124drop_in_place$LT$alloc..collections..vec_deque..VecDeque$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hd3638dec9a5d0a11E>
80207fc2: 03 35 04 fe  	ld	a0, -0x20(s0)
80207fc6: 13 05 05 02  	addi	a0, a0, 0x20
80207fca: 97 00 00 00  	auipc	ra, 0x0
80207fce: e7 80 c0 ec  	jalr	-0x134(ra) <_ZN4core3ptr49drop_in_place$LT$alloc..vec..Vec$LT$usize$GT$$GT$17he14401ebb716fc74E>
80207fd2: 03 35 04 fe  	ld	a0, -0x20(s0)
80207fd6: 13 05 85 03  	addi	a0, a0, 0x38
80207fda: 97 00 00 00  	auipc	ra, 0x0
80207fde: e7 80 e0 b0  	jalr	-0x4f2(ra) <_ZN4core3ptr124drop_in_place$LT$alloc..collections..vec_deque..VecDeque$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$$GT$17hd3638dec9a5d0a11E>
80207fe2: e2 60        	ld	ra, 0x18(sp)
80207fe4: 42 64        	ld	s0, 0x10(sp)
80207fe6: 05 61        	addi	sp, sp, 0x20
80207fe8: 82 80        	ret

0000000080207fea <_ZN4core3ptr52drop_in_place$LT$$u5b$alloc..string..String$u5d$$GT$17h154e2bcf8b5adc0fE>:
80207fea: 39 71        	addi	sp, sp, -0x40
80207fec: 06 fc        	sd	ra, 0x38(sp)
80207fee: 22 f8        	sd	s0, 0x30(sp)
80207ff0: 80 00        	addi	s0, sp, 0x40
80207ff2: 23 34 b4 fc  	sd	a1, -0x38(s0)
80207ff6: 23 38 a4 fc  	sd	a0, -0x30(s0)
80207ffa: 23 30 a4 fe  	sd	a0, -0x20(s0)
80207ffe: 23 34 b4 fe  	sd	a1, -0x18(s0)
80208002: 01 45        	li	a0, 0x0
80208004: 23 3c a4 fc  	sd	a0, -0x28(s0)
80208008: 09 a0        	j	0x8020800a <_ZN4core3ptr52drop_in_place$LT$$u5b$alloc..string..String$u5d$$GT$17h154e2bcf8b5adc0fE+0x20>
8020800a: 83 35 84 fc  	ld	a1, -0x38(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8020800e: 03 35 84 fd  	ld	a0, -0x28(s0)
80208012: 63 03 b5 02  	beq	a0, a1, 0x80208038 <_ZN4core3ptr52drop_in_place$LT$$u5b$alloc..string..String$u5d$$GT$17h154e2bcf8b5adc0fE+0x4e>
80208016: 09 a0        	j	0x80208018 <_ZN4core3ptr52drop_in_place$LT$$u5b$alloc..string..String$u5d$$GT$17h154e2bcf8b5adc0fE+0x2e>
80208018: 03 35 04 fd  	ld	a0, -0x30(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8020801c: 83 35 84 fd  	ld	a1, -0x28(s0)
80208020: 61 46        	li	a2, 0x18
80208022: 33 86 c5 02  	mul	a2, a1, a2
80208026: 32 95        	add	a0, a0, a2
80208028: 85 05        	addi	a1, a1, 0x1
8020802a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020802e: 97 00 00 00  	auipc	ra, 0x0
80208032: e7 80 e0 d4  	jalr	-0x2b2(ra) <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17hf68a660302d4d33fE>
80208036: d1 bf        	j	0x8020800a <_ZN4core3ptr52drop_in_place$LT$$u5b$alloc..string..String$u5d$$GT$17h154e2bcf8b5adc0fE+0x20>
80208038: e2 70        	ld	ra, 0x38(sp)
8020803a: 42 74        	ld	s0, 0x30(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8020803c: 21 61        	addi	sp, sp, 0x40
8020803e: 82 80        	ret

0000000080208040 <_ZN4core3ptr52drop_in_place$LT$os..filesystem..fs..VirtIOBlock$GT$17h7134ea41dd280816E>:
80208040: 01 11        	addi	sp, sp, -0x20
80208042: 06 ec        	sd	ra, 0x18(sp)
80208044: 22 e8        	sd	s0, 0x10(sp)
80208046: 00 10        	addi	s0, sp, 0x20
80208048: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020804c: 97 00 00 00  	auipc	ra, 0x0
80208050: e7 80 80 a1  	jalr	-0x5e8(ra) <_ZN4core3ptr116drop_in_place$LT$os..sync..spin..Spin$LT$virtio_drivers..blk..VirtIOBlk$LT$os..filesystem..fs..VirtioHal$GT$$GT$$GT$17h050c4ef64a5b04fbE>
80208054: e2 60        	ld	ra, 0x18(sp)
80208056: 42 64        	ld	s0, 0x10(sp)
80208058: 05 61        	addi	sp, sp, 0x20
8020805a: 82 80        	ret

000000008020805c <_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h8715a4ab2d5c338bE>:
8020805c: 01 11        	addi	sp, sp, -0x20
8020805e: 06 ec        	sd	ra, 0x18(sp)
80208060: 22 e8        	sd	s0, 0x10(sp)
80208062: 00 10        	addi	s0, sp, 0x20
80208064: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208068: 97 10 00 00  	auipc	ra, 0x1
8020806c: e7 80 c0 32  	jalr	0x32c(ra) <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7f12684349e9ef5dE>
80208070: e2 60        	ld	ra, 0x18(sp)
80208072: 42 64        	ld	s0, 0x10(sp)
80208074: 05 61        	addi	sp, sp, 0x20
80208076: 82 80        	ret

0000000080208078 <_ZN4core3ptr53drop_in_place$LT$os..task..task..TaskControlBlock$GT$17h729112982d5b241eE>:
80208078: 01 11        	addi	sp, sp, -0x20
8020807a: 06 ec        	sd	ra, 0x18(sp)
8020807c: 22 e8        	sd	s0, 0x10(sp)
8020807e: 00 10        	addi	s0, sp, 0x20
80208080: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208084: 13 05 05 04  	addi	a0, a0, 0x40
80208088: 97 00 00 00  	auipc	ra, 0x0
8020808c: e7 80 40 2f  	jalr	0x2f4(ra) <_ZN4core3ptr77drop_in_place$LT$os..sync..up..UPSafeCell$LT$os..task..task..TcbInner$GT$$GT$17h6c4d64c5f330df9fE>
80208090: e2 60        	ld	ra, 0x18(sp)
80208092: 42 64        	ld	s0, 0x10(sp)
80208094: 05 61        	addi	sp, sp, 0x20
80208096: 82 80        	ret

0000000080208098 <_ZN4core3ptr54drop_in_place$LT$$RF$volatile..Volatile$LT$u32$GT$$GT$17h5351f02be8555264E>:
80208098: 01 11        	addi	sp, sp, -0x20
8020809a: 06 ec        	sd	ra, 0x18(sp)
8020809c: 22 e8        	sd	s0, 0x10(sp)
8020809e: 00 10        	addi	s0, sp, 0x20
802080a0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802080a4: e2 60        	ld	ra, 0x18(sp)
802080a6: 42 64        	ld	s0, 0x10(sp)
802080a8: 05 61        	addi	sp, sp, 0x20
802080aa: 82 80        	ret

00000000802080ac <_ZN4core3ptr55drop_in_place$LT$$RF$core..option..Option$LT$u8$GT$$GT$17h363ee19f1c3e7cd4E>:
802080ac: 01 11        	addi	sp, sp, -0x20
802080ae: 06 ec        	sd	ra, 0x18(sp)
802080b0: 22 e8        	sd	s0, 0x10(sp)
802080b2: 00 10        	addi	s0, sp, 0x20
802080b4: 23 34 a4 fe  	sd	a0, -0x18(s0)
802080b8: e2 60        	ld	ra, 0x18(sp)
802080ba: 42 64        	ld	s0, 0x10(sp)
802080bc: 05 61        	addi	sp, sp, 0x20
802080be: 82 80        	ret

00000000802080c0 <_ZN4core3ptr56drop_in_place$LT$$RF$core..ptr..alignment..Alignment$GT$17h62e6e0ac2ecff7a8E>:
802080c0: 01 11        	addi	sp, sp, -0x20
802080c2: 06 ec        	sd	ra, 0x18(sp)
802080c4: 22 e8        	sd	s0, 0x10(sp)
802080c6: 00 10        	addi	s0, sp, 0x20
802080c8: 23 34 a4 fe  	sd	a0, -0x18(s0)
802080cc: e2 60        	ld	ra, 0x18(sp)
802080ce: 42 64        	ld	s0, 0x10(sp)
802080d0: 05 61        	addi	sp, sp, 0x20
802080d2: 82 80        	ret

00000000802080d4 <_ZN4core3ptr56drop_in_place$LT$alloc..raw_vec..RawVec$LT$usize$GT$$GT$17h08f8d0717f9a77f4E>:
802080d4: 01 11        	addi	sp, sp, -0x20
802080d6: 06 ec        	sd	ra, 0x18(sp)
802080d8: 22 e8        	sd	s0, 0x10(sp)
802080da: 00 10        	addi	s0, sp, 0x20
802080dc: 23 34 a4 fe  	sd	a0, -0x18(s0)
802080e0: 97 10 00 00  	auipc	ra, 0x1
802080e4: e7 80 a0 30  	jalr	0x30a(ra) <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h961ad5c695549214E>
802080e8: e2 60        	ld	ra, 0x18(sp)
802080ea: 42 64        	ld	s0, 0x10(sp)
802080ec: 05 61        	addi	sp, sp, 0x20
802080ee: 82 80        	ret

00000000802080f0 <_ZN4core3ptr59drop_in_place$LT$$RF$riscv..register..scause..Exception$GT$17h067f5b15b06fcef3E>:
802080f0: 01 11        	addi	sp, sp, -0x20
802080f2: 06 ec        	sd	ra, 0x18(sp)
802080f4: 22 e8        	sd	s0, 0x10(sp)
802080f6: 00 10        	addi	s0, sp, 0x20
802080f8: 23 34 a4 fe  	sd	a0, -0x18(s0)
802080fc: e2 60        	ld	ra, 0x18(sp)
802080fe: 42 64        	ld	s0, 0x10(sp)
80208100: 05 61        	addi	sp, sp, 0x20
80208102: 82 80        	ret

0000000080208104 <_ZN4core3ptr59drop_in_place$LT$$RF$riscv..register..scause..Interrupt$GT$17hc40d035b794b74f9E>:
80208104: 01 11        	addi	sp, sp, -0x20
80208106: 06 ec        	sd	ra, 0x18(sp)
80208108: 22 e8        	sd	s0, 0x10(sp)
8020810a: 00 10        	addi	s0, sp, 0x20
8020810c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208110: e2 60        	ld	ra, 0x18(sp)
80208112: 42 64        	ld	s0, 0x10(sp)
80208114: 05 61        	addi	sp, sp, 0x20
80208116: 82 80        	ret

0000000080208118 <_ZN4core3ptr59drop_in_place$LT$$u5b$os..page_alloc..AllocerGuard$u5d$$GT$17h13aaf2bae0fde306E>:
80208118: 39 71        	addi	sp, sp, -0x40
8020811a: 06 fc        	sd	ra, 0x38(sp)
8020811c: 22 f8        	sd	s0, 0x30(sp)
8020811e: 80 00        	addi	s0, sp, 0x40
80208120: 23 34 b4 fc  	sd	a1, -0x38(s0)
80208124: 23 38 a4 fc  	sd	a0, -0x30(s0)
80208128: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020812c: 23 34 b4 fe  	sd	a1, -0x18(s0)
80208130: 01 45        	li	a0, 0x0
80208132: 23 3c a4 fc  	sd	a0, -0x28(s0)
80208136: 09 a0        	j	0x80208138 <_ZN4core3ptr59drop_in_place$LT$$u5b$os..page_alloc..AllocerGuard$u5d$$GT$17h13aaf2bae0fde306E+0x20>
80208138: 83 35 84 fc  	ld	a1, -0x38(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8020813c: 03 35 84 fd  	ld	a0, -0x28(s0)
80208140: 63 02 b5 02  	beq	a0, a1, 0x80208164 <_ZN4core3ptr59drop_in_place$LT$$u5b$os..page_alloc..AllocerGuard$u5d$$GT$17h13aaf2bae0fde306E+0x4c>
80208144: 09 a0        	j	0x80208146 <_ZN4core3ptr59drop_in_place$LT$$u5b$os..page_alloc..AllocerGuard$u5d$$GT$17h13aaf2bae0fde306E+0x2e>
80208146: 03 35 04 fd  	ld	a0, -0x30(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8020814a: 83 35 84 fd  	ld	a1, -0x28(s0)
8020814e: 13 96 35 00  	slli	a2, a1, 0x3
80208152: 32 95        	add	a0, a0, a2
80208154: 85 05        	addi	a1, a1, 0x1
80208156: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020815a: 97 00 00 00  	auipc	ra, 0x0
8020815e: e7 80 80 d9  	jalr	-0x268(ra) <_ZN4core3ptr49drop_in_place$LT$os..page_alloc..AllocerGuard$GT$17h5da965a35f3e2985E>
80208162: d9 bf        	j	0x80208138 <_ZN4core3ptr59drop_in_place$LT$$u5b$os..page_alloc..AllocerGuard$u5d$$GT$17h13aaf2bae0fde306E+0x20>
80208164: e2 70        	ld	ra, 0x38(sp)
80208166: 42 74        	ld	s0, 0x30(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80208168: 21 61        	addi	sp, sp, 0x40
8020816a: 82 80        	ret

000000008020816c <_ZN4core3ptr59drop_in_place$LT$os..sync..spin..SpinGuard$LT$usize$GT$$GT$17h40bf3ee25da96165E>:
8020816c: 01 11        	addi	sp, sp, -0x20
8020816e: 06 ec        	sd	ra, 0x18(sp)
80208170: 22 e8        	sd	s0, 0x10(sp)
80208172: 00 10        	addi	s0, sp, 0x20
80208174: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208178: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020817c: 97 10 00 00  	auipc	ra, 0x1
80208180: e7 80 c0 45  	jalr	0x45c(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h03437352b45a32e0E>
80208184: 03 35 04 fe  	ld	a0, -0x20(s0)
80208188: 21 05        	addi	a0, a0, 0x8
8020818a: 97 00 00 00  	auipc	ra, 0x0
8020818e: e7 80 60 b6  	jalr	-0x49a(ra) <_ZN4core3ptr38drop_in_place$LT$os..cpu..IntrLock$GT$17h7a76135fe40e9467E>
80208192: e2 60        	ld	ra, 0x18(sp)
80208194: 42 64        	ld	s0, 0x10(sp)
80208196: 05 61        	addi	sp, sp, 0x20
80208198: 82 80        	ret

000000008020819a <_ZN4core3ptr63drop_in_place$LT$alloc..boxed..Box$LT$os..vm..PageTable$GT$$GT$17h9e901d0737afa155E>:
8020819a: 01 11        	addi	sp, sp, -0x20
8020819c: 06 ec        	sd	ra, 0x18(sp)
8020819e: 22 e8        	sd	s0, 0x10(sp)
802081a0: 00 10        	addi	s0, sp, 0x20
802081a2: 23 30 a4 fe  	sd	a0, -0x20(s0)
802081a6: 23 34 a4 fe  	sd	a0, -0x18(s0)
802081aa: 08 61        	ld	a0, 0x0(a0)
802081ac: 97 00 00 00  	auipc	ra, 0x0
802081b0: e7 80 00 b6  	jalr	-0x4a0(ra) <_ZN4core3ptr38drop_in_place$LT$os..vm..PageTable$GT$17h37485d31fc718f76E>
802081b4: 03 35 04 fe  	ld	a0, -0x20(s0)
802081b8: 97 10 00 00  	auipc	ra, 0x1
802081bc: e7 80 20 97  	jalr	-0x68e(ra) <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h748720f456fc2736E>
802081c0: e2 60        	ld	ra, 0x18(sp)
802081c2: 42 64        	ld	s0, 0x10(sp)
802081c4: 05 61        	addi	sp, sp, 0x20
802081c6: 82 80        	ret

00000000802081c8 <_ZN4core3ptr64drop_in_place$LT$alloc..sync..Arc$LT$easy_fs..vfs..Inode$GT$$GT$17hac687c9eac6e2cfdE>:
802081c8: 01 11        	addi	sp, sp, -0x20
802081ca: 06 ec        	sd	ra, 0x18(sp)
802081cc: 22 e8        	sd	s0, 0x10(sp)
802081ce: 00 10        	addi	s0, sp, 0x20
802081d0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802081d4: 97 00 00 00  	auipc	ra, 0x0
802081d8: e7 80 20 78  	jalr	0x782(ra) <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238f4cc6706820f7E>
802081dc: e2 60        	ld	ra, 0x18(sp)
802081de: 42 64        	ld	s0, 0x10(sp)
802081e0: 05 61        	addi	sp, sp, 0x20
802081e2: 82 80        	ret

00000000802081e4 <_ZN4core3ptr68drop_in_place$LT$alloc..vec..Vec$LT$$RF$mut$u20$$u5b$u8$u5d$$GT$$GT$17hdcd769d79123e62dE>:
802081e4: 01 11        	addi	sp, sp, -0x20
802081e6: 06 ec        	sd	ra, 0x18(sp)
802081e8: 22 e8        	sd	s0, 0x10(sp)
802081ea: 00 10        	addi	s0, sp, 0x20
802081ec: 23 30 a4 fe  	sd	a0, -0x20(s0)
802081f0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802081f4: 97 00 00 00  	auipc	ra, 0x0
802081f8: e7 80 40 61  	jalr	0x614(ra) <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h62ac02ebefa8e735E>
802081fc: 03 35 04 fe  	ld	a0, -0x20(s0)
80208200: 97 00 00 00  	auipc	ra, 0x0
80208204: e7 80 20 0c  	jalr	0xc2(ra) <_ZN4core3ptr75drop_in_place$LT$alloc..raw_vec..RawVec$LT$$RF$mut$u20$$u5b$u8$u5d$$GT$$GT$17heb20fae6ff846affE>
80208208: e2 60        	ld	ra, 0x18(sp)
8020820a: 42 64        	ld	s0, 0x10(sp)
8020820c: 05 61        	addi	sp, sp, 0x20
8020820e: 82 80        	ret

0000000080208210 <_ZN4core3ptr71drop_in_place$LT$core..cell..RefMut$LT$os..task..task..TcbInner$GT$$GT$17hb0080ed53c05ca29E>:
80208210: 01 11        	addi	sp, sp, -0x20
80208212: 06 ec        	sd	ra, 0x18(sp)
80208214: 22 e8        	sd	s0, 0x10(sp)
80208216: 00 10        	addi	s0, sp, 0x20
80208218: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020821c: 21 05        	addi	a0, a0, 0x8
8020821e: 97 00 00 00  	auipc	ra, 0x0
80208222: e7 80 e0 b8  	jalr	-0x472(ra) <_ZN4core3ptr45drop_in_place$LT$core..cell..BorrowRefMut$GT$17h2473fbc3bd552c74E>
80208226: e2 60        	ld	ra, 0x18(sp)
80208228: 42 64        	ld	s0, 0x10(sp)
8020822a: 05 61        	addi	sp, sp, 0x20
8020822c: 82 80        	ret

000000008020822e <_ZN4core3ptr72drop_in_place$LT$alloc..raw_vec..RawVec$LT$alloc..string..String$GT$$GT$17h776eb704121ca400E>:
8020822e: 01 11        	addi	sp, sp, -0x20
80208230: 06 ec        	sd	ra, 0x18(sp)
80208232: 22 e8        	sd	s0, 0x10(sp)
80208234: 00 10        	addi	s0, sp, 0x20
80208236: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020823a: 97 10 00 00  	auipc	ra, 0x1
8020823e: e7 80 40 10  	jalr	0x104(ra) <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h233e516e552636a8E>
80208242: e2 60        	ld	ra, 0x18(sp)
80208244: 42 64        	ld	s0, 0x10(sp)
80208246: 05 61        	addi	sp, sp, 0x20
80208248: 82 80        	ret

000000008020824a <_ZN4core3ptr72drop_in_place$LT$alloc..vec..Vec$LT$os..page_alloc..AllocerGuard$GT$$GT$17had0106bc1d3fbf6fE>:
8020824a: 01 11        	addi	sp, sp, -0x20
8020824c: 06 ec        	sd	ra, 0x18(sp)
8020824e: 22 e8        	sd	s0, 0x10(sp)
80208250: 00 10        	addi	s0, sp, 0x20
80208252: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208256: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020825a: 97 00 00 00  	auipc	ra, 0x0
8020825e: e7 80 60 51  	jalr	0x516(ra) <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2b3014efa066599eE>
80208262: 03 35 04 fe  	ld	a0, -0x20(s0)
80208266: 97 00 00 00  	auipc	ra, 0x0
8020826a: e7 80 e0 14  	jalr	0x14e(ra) <_ZN4core3ptr79drop_in_place$LT$alloc..raw_vec..RawVec$LT$os..page_alloc..AllocerGuard$GT$$GT$17hef1c94ec6759efafE>
8020826e: e2 60        	ld	ra, 0x18(sp)
80208270: 42 64        	ld	s0, 0x10(sp)
80208272: 05 61        	addi	sp, sp, 0x20
80208274: 82 80        	ret

0000000080208276 <_ZN4core3ptr72drop_in_place$LT$core..cell..RefCell$LT$os..task..task..TcbInner$GT$$GT$17hc2fb2801cff50751E>:
80208276: 01 11        	addi	sp, sp, -0x20
80208278: 06 ec        	sd	ra, 0x18(sp)
8020827a: 22 e8        	sd	s0, 0x10(sp)
8020827c: 00 10        	addi	s0, sp, 0x20
8020827e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208282: 21 05        	addi	a0, a0, 0x8
80208284: 97 00 00 00  	auipc	ra, 0x0
80208288: e7 80 60 07  	jalr	0x76(ra) <_ZN4core3ptr75drop_in_place$LT$core..cell..UnsafeCell$LT$os..task..task..TcbInner$GT$$GT$17h1955eb35ac3e1ed6E>
8020828c: e2 60        	ld	ra, 0x18(sp)
8020828e: 42 64        	ld	s0, 0x10(sp)
80208290: 05 61        	addi	sp, sp, 0x20
80208292: 82 80        	ret

0000000080208294 <_ZN4core3ptr73drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..console..Writer$GT$$GT$17h61952d2e32eaaf25E>:
80208294: 01 11        	addi	sp, sp, -0x20
80208296: 06 ec        	sd	ra, 0x18(sp)
80208298: 22 e8        	sd	s0, 0x10(sp)
8020829a: 00 10        	addi	s0, sp, 0x20
8020829c: 23 30 a4 fe  	sd	a0, -0x20(s0)
802082a0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802082a4: 97 20 00 00  	auipc	ra, 0x2
802082a8: e7 80 a0 84  	jalr	-0x7b6(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h66d7484dec9ef52fE>
802082ac: 03 35 04 fe  	ld	a0, -0x20(s0)
802082b0: 21 05        	addi	a0, a0, 0x8
802082b2: 97 00 00 00  	auipc	ra, 0x0
802082b6: e7 80 e0 a3  	jalr	-0x5c2(ra) <_ZN4core3ptr38drop_in_place$LT$os..cpu..IntrLock$GT$17h7a76135fe40e9467E>
802082ba: e2 60        	ld	ra, 0x18(sp)
802082bc: 42 64        	ld	s0, 0x10(sp)
802082be: 05 61        	addi	sp, sp, 0x20
802082c0: 82 80        	ret

00000000802082c2 <_ZN4core3ptr75drop_in_place$LT$alloc..raw_vec..RawVec$LT$$RF$mut$u20$$u5b$u8$u5d$$GT$$GT$17heb20fae6ff846affE>:
802082c2: 01 11        	addi	sp, sp, -0x20
802082c4: 06 ec        	sd	ra, 0x18(sp)
802082c6: 22 e8        	sd	s0, 0x10(sp)
802082c8: 00 10        	addi	s0, sp, 0x20
802082ca: 23 34 a4 fe  	sd	a0, -0x18(s0)
802082ce: 97 10 00 00  	auipc	ra, 0x1
802082d2: e7 80 a0 01  	jalr	0x1a(ra) <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h18a18da2b8892c9eE>
802082d6: e2 60        	ld	ra, 0x18(sp)
802082d8: 42 64        	ld	s0, 0x10(sp)
802082da: 05 61        	addi	sp, sp, 0x20
802082dc: 82 80        	ret

00000000802082de <_ZN4core3ptr75drop_in_place$LT$alloc..sync..Arc$LT$os..filesystem..inode..OSinode$GT$$GT$17h10c0ef47ef01150bE>:
802082de: 01 11        	addi	sp, sp, -0x20
802082e0: 06 ec        	sd	ra, 0x18(sp)
802082e2: 22 e8        	sd	s0, 0x10(sp)
802082e4: 00 10        	addi	s0, sp, 0x20
802082e6: 23 34 a4 fe  	sd	a0, -0x18(s0)
802082ea: 97 00 00 00  	auipc	ra, 0x0
802082ee: e7 80 c0 75  	jalr	0x75c(ra) <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6da26ea01207a62E>
802082f2: e2 60        	ld	ra, 0x18(sp)
802082f4: 42 64        	ld	s0, 0x10(sp)
802082f6: 05 61        	addi	sp, sp, 0x20
802082f8: 82 80        	ret

00000000802082fa <_ZN4core3ptr75drop_in_place$LT$core..cell..UnsafeCell$LT$os..task..task..TcbInner$GT$$GT$17h1955eb35ac3e1ed6E>:
802082fa: 01 11        	addi	sp, sp, -0x20
802082fc: 06 ec        	sd	ra, 0x18(sp)
802082fe: 22 e8        	sd	s0, 0x10(sp)
80208300: 00 10        	addi	s0, sp, 0x20
80208302: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208306: 97 00 00 00  	auipc	ra, 0x0
8020830a: e7 80 20 ac  	jalr	-0x53e(ra) <_ZN4core3ptr45drop_in_place$LT$os..task..task..TcbInner$GT$17hba6dac20de063c91E>
8020830e: e2 60        	ld	ra, 0x18(sp)
80208310: 42 64        	ld	s0, 0x10(sp)
80208312: 05 61        	addi	sp, sp, 0x20
80208314: 82 80        	ret

0000000080208316 <_ZN4core3ptr75drop_in_place$LT$spin..mutex..Mutex$LT$easy_fs..efs..EasyFileSystem$GT$$GT$17h1581f0e730be0456E>:
80208316: 01 11        	addi	sp, sp, -0x20
80208318: 06 ec        	sd	ra, 0x18(sp)
8020831a: 22 e8        	sd	s0, 0x10(sp)
8020831c: 00 10        	addi	s0, sp, 0x20
8020831e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208322: 97 00 00 00  	auipc	ra, 0x0
80208326: e7 80 e0 2c  	jalr	0x2ce(ra) <_ZN4core3ptr89drop_in_place$LT$spin..mutex..ticket..TicketMutex$LT$easy_fs..efs..EasyFileSystem$GT$$GT$17h61585662622eb03eE>
8020832a: e2 60        	ld	ra, 0x18(sp)
8020832c: 42 64        	ld	s0, 0x10(sp)
8020832e: 05 61        	addi	sp, sp, 0x20
80208330: 82 80        	ret

0000000080208332 <_ZN4core3ptr76drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..task..task..TcbOut$GT$$GT$17h464cfbdf4ef3ff12E>:
80208332: 01 11        	addi	sp, sp, -0x20
80208334: 06 ec        	sd	ra, 0x18(sp)
80208336: 22 e8        	sd	s0, 0x10(sp)
80208338: 00 10        	addi	s0, sp, 0x20
8020833a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020833e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208342: 97 10 00 00  	auipc	ra, 0x1
80208346: e7 80 a0 40  	jalr	0x40a(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h350f8d410d325037E>
8020834a: 03 35 04 fe  	ld	a0, -0x20(s0)
8020834e: 21 05        	addi	a0, a0, 0x8
80208350: 97 00 00 00  	auipc	ra, 0x0
80208354: e7 80 00 9a  	jalr	-0x660(ra) <_ZN4core3ptr38drop_in_place$LT$os..cpu..IntrLock$GT$17h7a76135fe40e9467E>
80208358: e2 60        	ld	ra, 0x18(sp)
8020835a: 42 64        	ld	s0, 0x10(sp)
8020835c: 05 61        	addi	sp, sp, 0x20
8020835e: 82 80        	ret

0000000080208360 <_ZN4core3ptr77drop_in_place$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$17h7fe297b01037ef7cE>:
80208360: 01 11        	addi	sp, sp, -0x20
80208362: 06 ec        	sd	ra, 0x18(sp)
80208364: 22 e8        	sd	s0, 0x10(sp)
80208366: 00 10        	addi	s0, sp, 0x20
80208368: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020836c: 97 00 00 00  	auipc	ra, 0x0
80208370: e7 80 80 57  	jalr	0x578(ra) <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d5bb707567aa53fE>
80208374: e2 60        	ld	ra, 0x18(sp)
80208376: 42 64        	ld	s0, 0x10(sp)
80208378: 05 61        	addi	sp, sp, 0x20
8020837a: 82 80        	ret

000000008020837c <_ZN4core3ptr77drop_in_place$LT$os..sync..up..UPSafeCell$LT$os..task..task..TcbInner$GT$$GT$17h6c4d64c5f330df9fE>:
8020837c: 01 11        	addi	sp, sp, -0x20
8020837e: 06 ec        	sd	ra, 0x18(sp)
80208380: 22 e8        	sd	s0, 0x10(sp)
80208382: 00 10        	addi	s0, sp, 0x20
80208384: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208388: 97 00 00 00  	auipc	ra, 0x0
8020838c: e7 80 e0 ee  	jalr	-0x112(ra) <_ZN4core3ptr72drop_in_place$LT$core..cell..RefCell$LT$os..task..task..TcbInner$GT$$GT$17hc2fb2801cff50751E>
80208390: e2 60        	ld	ra, 0x18(sp)
80208392: 42 64        	ld	s0, 0x10(sp)
80208394: 05 61        	addi	sp, sp, 0x20
80208396: 82 80        	ret

0000000080208398 <_ZN4core3ptr78drop_in_place$LT$alloc..sync..Weak$LT$os..task..task..TaskControlBlock$GT$$GT$17hbaf216b4486ec19aE>:
80208398: 01 11        	addi	sp, sp, -0x20
8020839a: 06 ec        	sd	ra, 0x18(sp)
8020839c: 22 e8        	sd	s0, 0x10(sp)
8020839e: 00 10        	addi	s0, sp, 0x20
802083a0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802083a4: 97 10 00 00  	auipc	ra, 0x1
802083a8: e7 80 40 a8  	jalr	-0x57c(ra) <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E>
802083ac: e2 60        	ld	ra, 0x18(sp)
802083ae: 42 64        	ld	s0, 0x10(sp)
802083b0: 05 61        	addi	sp, sp, 0x20
802083b2: 82 80        	ret

00000000802083b4 <_ZN4core3ptr79drop_in_place$LT$alloc..raw_vec..RawVec$LT$os..page_alloc..AllocerGuard$GT$$GT$17hef1c94ec6759efafE>:
802083b4: 01 11        	addi	sp, sp, -0x20
802083b6: 06 ec        	sd	ra, 0x18(sp)
802083b8: 22 e8        	sd	s0, 0x10(sp)
802083ba: 00 10        	addi	s0, sp, 0x20
802083bc: 23 34 a4 fe  	sd	a0, -0x18(s0)
802083c0: 97 10 00 00  	auipc	ra, 0x1
802083c4: e7 80 00 08  	jalr	0x80(ra) <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd64e7f774ec0ff0fE>
802083c8: e2 60        	ld	ra, 0x18(sp)
802083ca: 42 64        	ld	s0, 0x10(sp)
802083cc: 05 61        	addi	sp, sp, 0x20
802083ce: 82 80        	ret

00000000802083d0 <_ZN4core3ptr79drop_in_place$LT$core..cell..UnsafeCell$LT$easy_fs..efs..EasyFileSystem$GT$$GT$17h81b1c8898091fcedE>:
802083d0: 01 11        	addi	sp, sp, -0x20
802083d2: 06 ec        	sd	ra, 0x18(sp)
802083d4: 22 e8        	sd	s0, 0x10(sp)
802083d6: 00 10        	addi	s0, sp, 0x20
802083d8: 23 34 a4 fe  	sd	a0, -0x18(s0)
802083dc: 97 00 00 00  	auipc	ra, 0x0
802083e0: e7 80 60 ae  	jalr	-0x51a(ra) <_ZN4core3ptr49drop_in_place$LT$easy_fs..efs..EasyFileSystem$GT$17hac966d09e2a10160E>
802083e4: e2 60        	ld	ra, 0x18(sp)
802083e6: 42 64        	ld	s0, 0x10(sp)
802083e8: 05 61        	addi	sp, sp, 0x20
802083ea: 82 80        	ret

00000000802083ec <_ZN4core3ptr79drop_in_place$LT$os..sync..spin..Spin$LT$os..filesystem..inode..RLinode$GT$$GT$17h5540dc9c8a3be39eE>:
802083ec: 01 11        	addi	sp, sp, -0x20
802083ee: 06 ec        	sd	ra, 0x18(sp)
802083f0: 22 e8        	sd	s0, 0x10(sp)
802083f2: 00 10        	addi	s0, sp, 0x20
802083f4: 23 34 a4 fe  	sd	a0, -0x18(s0)
802083f8: 61 05        	addi	a0, a0, 0x18
802083fa: 97 00 00 00  	auipc	ra, 0x0
802083fe: e7 80 80 07  	jalr	0x78(ra) <_ZN4core3ptr81drop_in_place$LT$core..cell..UnsafeCell$LT$os..filesystem..inode..RLinode$GT$$GT$17h0f1820502a926fd7E>
80208402: e2 60        	ld	ra, 0x18(sp)
80208404: 42 64        	ld	s0, 0x10(sp)
80208406: 05 61        	addi	sp, sp, 0x20
80208408: 82 80        	ret

000000008020840a <_ZN4core3ptr79drop_in_place$LT$os..sync..spin..Spin$LT$os..task..manager..TaskManager$GT$$GT$17hd1f05526cb58429cE>:
8020840a: 01 11        	addi	sp, sp, -0x20
8020840c: 06 ec        	sd	ra, 0x18(sp)
8020840e: 22 e8        	sd	s0, 0x10(sp)
80208410: 00 10        	addi	s0, sp, 0x20
80208412: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208416: 61 05        	addi	a0, a0, 0x18
80208418: 97 00 00 00  	auipc	ra, 0x0
8020841c: e7 80 60 07  	jalr	0x76(ra) <_ZN4core3ptr81drop_in_place$LT$core..cell..UnsafeCell$LT$os..task..manager..TaskManager$GT$$GT$17hdc9fce0486760f4cE>
80208420: e2 60        	ld	ra, 0x18(sp)
80208422: 42 64        	ld	s0, 0x10(sp)
80208424: 05 61        	addi	sp, sp, 0x20
80208426: 82 80        	ret

0000000080208428 <_ZN4core3ptr80drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..page_alloc..StackFrame$GT$$GT$17ha2f4a81332d784cbE>:
80208428: 01 11        	addi	sp, sp, -0x20
8020842a: 06 ec        	sd	ra, 0x18(sp)
8020842c: 22 e8        	sd	s0, 0x10(sp)
8020842e: 00 10        	addi	s0, sp, 0x20
80208430: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208434: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208438: 97 10 00 00  	auipc	ra, 0x1
8020843c: e7 80 e0 3c  	jalr	0x3ce(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3b507530d2daf56fE>
80208440: 03 35 04 fe  	ld	a0, -0x20(s0)
80208444: 21 05        	addi	a0, a0, 0x8
80208446: 97 00 00 00  	auipc	ra, 0x0
8020844a: e7 80 a0 8a  	jalr	-0x756(ra) <_ZN4core3ptr38drop_in_place$LT$os..cpu..IntrLock$GT$17h7a76135fe40e9467E>
8020844e: e2 60        	ld	ra, 0x18(sp)
80208450: 42 64        	ld	s0, 0x10(sp)
80208452: 05 61        	addi	sp, sp, 0x20
80208454: 82 80        	ret

0000000080208456 <_ZN4core3ptr81drop_in_place$LT$alloc..vec..into_iter..IntoIter$LT$alloc..string..String$GT$$GT$17he62d65474f2b9e53E>:
80208456: 01 11        	addi	sp, sp, -0x20
80208458: 06 ec        	sd	ra, 0x18(sp)
8020845a: 22 e8        	sd	s0, 0x10(sp)
8020845c: 00 10        	addi	s0, sp, 0x20
8020845e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208462: 97 10 00 00  	auipc	ra, 0x1
80208466: e7 80 00 0e  	jalr	0xe0(ra) <_ZN86_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h93753afec8760ea8E>
8020846a: e2 60        	ld	ra, 0x18(sp)
8020846c: 42 64        	ld	s0, 0x10(sp)
8020846e: 05 61        	addi	sp, sp, 0x20
80208470: 82 80        	ret

0000000080208472 <_ZN4core3ptr81drop_in_place$LT$core..cell..UnsafeCell$LT$os..filesystem..inode..RLinode$GT$$GT$17h0f1820502a926fd7E>:
80208472: 01 11        	addi	sp, sp, -0x20
80208474: 06 ec        	sd	ra, 0x18(sp)
80208476: 22 e8        	sd	s0, 0x10(sp)
80208478: 00 10        	addi	s0, sp, 0x20
8020847a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020847e: 97 00 00 00  	auipc	ra, 0x0
80208482: e7 80 00 b1  	jalr	-0x4f0(ra) <_ZN4core3ptr51drop_in_place$LT$os..filesystem..inode..RLinode$GT$17he3072ec265b2aaafE>
80208486: e2 60        	ld	ra, 0x18(sp)
80208488: 42 64        	ld	s0, 0x10(sp)
8020848a: 05 61        	addi	sp, sp, 0x20
8020848c: 82 80        	ret

000000008020848e <_ZN4core3ptr81drop_in_place$LT$core..cell..UnsafeCell$LT$os..task..manager..TaskManager$GT$$GT$17hdc9fce0486760f4cE>:
8020848e: 01 11        	addi	sp, sp, -0x20
80208490: 06 ec        	sd	ra, 0x18(sp)
80208492: 22 e8        	sd	s0, 0x10(sp)
80208494: 00 10        	addi	s0, sp, 0x20
80208496: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020849a: 97 00 00 00  	auipc	ra, 0x0
8020849e: e7 80 00 b1  	jalr	-0x4f0(ra) <_ZN4core3ptr51drop_in_place$LT$os..task..manager..TaskManager$GT$17h5644a42c748778e7E>
802084a2: e2 60        	ld	ra, 0x18(sp)
802084a4: 42 64        	ld	s0, 0x10(sp)
802084a6: 05 61        	addi	sp, sp, 0x20
802084a8: 82 80        	ret

00000000802084aa <_ZN4core3ptr81drop_in_place$LT$os..sync..spin..SpinGuard$LT$$u5b$u8$u3b$$u20$32256$u5d$$GT$$GT$17h45be4ee30f739548E>:
802084aa: 01 11        	addi	sp, sp, -0x20
802084ac: 06 ec        	sd	ra, 0x18(sp)
802084ae: 22 e8        	sd	s0, 0x10(sp)
802084b0: 00 10        	addi	s0, sp, 0x20
802084b2: 23 30 a4 fe  	sd	a0, -0x20(s0)
802084b6: 23 34 a4 fe  	sd	a0, -0x18(s0)
802084ba: 97 10 00 00  	auipc	ra, 0x1
802084be: e7 80 80 1d  	jalr	0x1d8(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2f42c5c687145f08E>
802084c2: 03 35 04 fe  	ld	a0, -0x20(s0)
802084c6: 21 05        	addi	a0, a0, 0x8
802084c8: 97 00 00 00  	auipc	ra, 0x0
802084cc: e7 80 80 82  	jalr	-0x7d8(ra) <_ZN4core3ptr38drop_in_place$LT$os..cpu..IntrLock$GT$17h7a76135fe40e9467E>
802084d0: e2 60        	ld	ra, 0x18(sp)
802084d2: 42 64        	ld	s0, 0x10(sp)
802084d4: 05 61        	addi	sp, sp, 0x20
802084d6: 82 80        	ret

00000000802084d8 <_ZN4core3ptr82drop_in_place$LT$virtio_drivers..hal..DMA$LT$os..filesystem..fs..VirtioHal$GT$$GT$17ha229803198bf5d16E>:
802084d8: 01 11        	addi	sp, sp, -0x20
802084da: 06 ec        	sd	ra, 0x18(sp)
802084dc: 22 e8        	sd	s0, 0x10(sp)
802084de: 00 10        	addi	s0, sp, 0x20
802084e0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802084e4: 97 10 00 00  	auipc	ra, 0x1
802084e8: e7 80 c0 d3  	jalr	-0x2c4(ra) <_ZN75_$LT$virtio_drivers..hal..DMA$LT$H$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h575739e0618e9bf1E>
802084ec: e2 60        	ld	ra, 0x18(sp)
802084ee: 42 64        	ld	s0, 0x10(sp)
802084f0: 05 61        	addi	sp, sp, 0x20
802084f2: 82 80        	ret

00000000802084f4 <_ZN4core3ptr84drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..filesystem..inode..RLinode$GT$$GT$17h7797634964e624d7E>:
802084f4: 01 11        	addi	sp, sp, -0x20
802084f6: 06 ec        	sd	ra, 0x18(sp)
802084f8: 22 e8        	sd	s0, 0x10(sp)
802084fa: 00 10        	addi	s0, sp, 0x20
802084fc: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208500: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208504: 97 10 00 00  	auipc	ra, 0x1
80208508: e7 80 c0 3b  	jalr	0x3bc(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h542879920f97e9d9E>
8020850c: 03 35 04 fe  	ld	a0, -0x20(s0)
80208510: 21 05        	addi	a0, a0, 0x8
80208512: 97 f0 ff ff  	auipc	ra, 0xfffff
80208516: e7 80 e0 7d  	jalr	0x7de(ra) <ekernel+0xffcbacf0>
8020851a: e2 60        	ld	ra, 0x18(sp)
8020851c: 42 64        	ld	s0, 0x10(sp)
8020851e: 05 61        	addi	sp, sp, 0x20
80208520: 82 80        	ret

0000000080208522 <_ZN4core3ptr84drop_in_place$LT$os..sync..spin..SpinGuard$LT$os..task..manager..TaskManager$GT$$GT$17haf6d50c6bfeb102bE>:
80208522: 01 11        	addi	sp, sp, -0x20
80208524: 06 ec        	sd	ra, 0x18(sp)
80208526: 22 e8        	sd	s0, 0x10(sp)
80208528: 00 10        	addi	s0, sp, 0x20
8020852a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020852e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208532: 97 10 00 00  	auipc	ra, 0x1
80208536: e7 80 20 50  	jalr	0x502(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h61c197545f86855fE>
8020853a: 03 35 04 fe  	ld	a0, -0x20(s0)
8020853e: 21 05        	addi	a0, a0, 0x8
80208540: 97 f0 ff ff  	auipc	ra, 0xfffff
80208544: e7 80 00 7b  	jalr	0x7b0(ra) <ekernel+0xffcbacf0>
80208548: e2 60        	ld	ra, 0x18(sp)
8020854a: 42 64        	ld	s0, 0x10(sp)
8020854c: 05 61        	addi	sp, sp, 0x20
8020854e: 82 80        	ret

0000000080208550 <_ZN4core3ptr87drop_in_place$LT$$u5b$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$u5d$$GT$17hbdc027501203ea0aE>:
80208550: 39 71        	addi	sp, sp, -0x40
80208552: 06 fc        	sd	ra, 0x38(sp)
80208554: 22 f8        	sd	s0, 0x30(sp)
80208556: 80 00        	addi	s0, sp, 0x40
80208558: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020855c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80208560: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208564: 23 34 b4 fe  	sd	a1, -0x18(s0)
80208568: 01 45        	li	a0, 0x0
8020856a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020856e: 09 a0        	j	0x80208570 <_ZN4core3ptr87drop_in_place$LT$$u5b$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$u5d$$GT$17hbdc027501203ea0aE+0x20>
80208570: 83 35 84 fc  	ld	a1, -0x38(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80208574: 03 35 84 fd  	ld	a0, -0x28(s0)
80208578: 63 02 b5 02  	beq	a0, a1, 0x8020859c <_ZN4core3ptr87drop_in_place$LT$$u5b$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$u5d$$GT$17hbdc027501203ea0aE+0x4c>
8020857c: 09 a0        	j	0x8020857e <_ZN4core3ptr87drop_in_place$LT$$u5b$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$u5d$$GT$17hbdc027501203ea0aE+0x2e>
8020857e: 03 35 04 fd  	ld	a0, -0x30(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80208582: 83 35 84 fd  	ld	a1, -0x28(s0)
80208586: 13 96 35 00  	slli	a2, a1, 0x3
8020858a: 32 95        	add	a0, a0, a2
8020858c: 85 05        	addi	a1, a1, 0x1
8020858e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80208592: 97 00 00 00  	auipc	ra, 0x0
80208596: e7 80 e0 dc  	jalr	-0x232(ra) <_ZN4core3ptr77drop_in_place$LT$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$GT$17h7fe297b01037ef7cE>
8020859a: d9 bf        	j	0x80208570 <_ZN4core3ptr87drop_in_place$LT$$u5b$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$u5d$$GT$17hbdc027501203ea0aE+0x20>
8020859c: e2 70        	ld	ra, 0x38(sp)
8020859e: 42 74        	ld	s0, 0x30(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
802085a0: 21 61        	addi	sp, sp, 0x40
802085a2: 82 80        	ret

00000000802085a4 <_ZN4core3ptr87drop_in_place$LT$os..sync..spin..SpinGuard$LT$core..option..Option$LT$usize$GT$$GT$$GT$17h1775c93150a2e475E>:
802085a4: 01 11        	addi	sp, sp, -0x20
802085a6: 06 ec        	sd	ra, 0x18(sp)
802085a8: 22 e8        	sd	s0, 0x10(sp)
802085aa: 00 10        	addi	s0, sp, 0x20
802085ac: 23 30 a4 fe  	sd	a0, -0x20(s0)
802085b0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802085b4: 97 10 00 00  	auipc	ra, 0x1
802085b8: e7 80 e0 6a  	jalr	0x6ae(ra) <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc891a9e3f924462cE>
802085bc: 03 35 04 fe  	ld	a0, -0x20(s0)
802085c0: 21 05        	addi	a0, a0, 0x8
802085c2: 97 f0 ff ff  	auipc	ra, 0xfffff
802085c6: e7 80 e0 72  	jalr	0x72e(ra) <ekernel+0xffcbacf0>
802085ca: e2 60        	ld	ra, 0x18(sp)
802085cc: 42 64        	ld	s0, 0x10(sp)
802085ce: 05 61        	addi	sp, sp, 0x20
802085d0: 82 80        	ret

00000000802085d2 <_ZN4core3ptr88drop_in_place$LT$virtio_drivers..blk..VirtIOBlk$LT$os..filesystem..fs..VirtioHal$GT$$GT$17h1fcb4b9cc70545a1E>:
802085d2: 01 11        	addi	sp, sp, -0x20
802085d4: 06 ec        	sd	ra, 0x18(sp)
802085d6: 22 e8        	sd	s0, 0x10(sp)
802085d8: 00 10        	addi	s0, sp, 0x20
802085da: 23 34 a4 fe  	sd	a0, -0x18(s0)
802085de: 21 05        	addi	a0, a0, 0x8
802085e0: 97 00 00 00  	auipc	ra, 0x0
802085e4: e7 80 e0 02  	jalr	0x2e(ra) <_ZN4core3ptr90drop_in_place$LT$virtio_drivers..queue..VirtQueue$LT$os..filesystem..fs..VirtioHal$GT$$GT$17h8d71f317cc9cc7cbE>
802085e8: e2 60        	ld	ra, 0x18(sp)
802085ea: 42 64        	ld	s0, 0x10(sp)
802085ec: 05 61        	addi	sp, sp, 0x20
802085ee: 82 80        	ret

00000000802085f0 <_ZN4core3ptr89drop_in_place$LT$spin..mutex..ticket..TicketMutex$LT$easy_fs..efs..EasyFileSystem$GT$$GT$17h61585662622eb03eE>:
802085f0: 01 11        	addi	sp, sp, -0x20
802085f2: 06 ec        	sd	ra, 0x18(sp)
802085f4: 22 e8        	sd	s0, 0x10(sp)
802085f6: 00 10        	addi	s0, sp, 0x20
802085f8: 23 34 a4 fe  	sd	a0, -0x18(s0)
802085fc: 41 05        	addi	a0, a0, 0x10
802085fe: 97 00 00 00  	auipc	ra, 0x0
80208602: e7 80 20 dd  	jalr	-0x22e(ra) <_ZN4core3ptr79drop_in_place$LT$core..cell..UnsafeCell$LT$easy_fs..efs..EasyFileSystem$GT$$GT$17h81b1c8898091fcedE>
80208606: e2 60        	ld	ra, 0x18(sp)
80208608: 42 64        	ld	s0, 0x10(sp)
8020860a: 05 61        	addi	sp, sp, 0x20
8020860c: 82 80        	ret

000000008020860e <_ZN4core3ptr90drop_in_place$LT$virtio_drivers..queue..VirtQueue$LT$os..filesystem..fs..VirtioHal$GT$$GT$17h8d71f317cc9cc7cbE>:
8020860e: 01 11        	addi	sp, sp, -0x20
80208610: 06 ec        	sd	ra, 0x18(sp)
80208612: 22 e8        	sd	s0, 0x10(sp)
80208614: 00 10        	addi	s0, sp, 0x20
80208616: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020861a: 13 05 05 02  	addi	a0, a0, 0x20
8020861e: 97 00 00 00  	auipc	ra, 0x0
80208622: e7 80 a0 eb  	jalr	-0x146(ra) <_ZN4core3ptr82drop_in_place$LT$virtio_drivers..hal..DMA$LT$os..filesystem..fs..VirtioHal$GT$$GT$17ha229803198bf5d16E>
80208626: e2 60        	ld	ra, 0x18(sp)
80208628: 42 64        	ld	s0, 0x10(sp)
8020862a: 05 61        	addi	sp, sp, 0x20
8020862c: 82 80        	ret

000000008020862e <_ZN4core3ptr91drop_in_place$LT$core..option..Option$LT$alloc..boxed..Box$LT$os..vm..PageTable$GT$$GT$$GT$17h7369e6a7b60fa11aE>:
8020862e: 01 11        	addi	sp, sp, -0x20
80208630: 06 ec        	sd	ra, 0x18(sp)
80208632: 22 e8        	sd	s0, 0x10(sp)
80208634: 00 10        	addi	s0, sp, 0x20
80208636: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020863a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020863e: 08 61        	ld	a0, 0x0(a0)
80208640: 11 e5        	bnez	a0, 0x8020864c <_ZN4core3ptr91drop_in_place$LT$core..option..Option$LT$alloc..boxed..Box$LT$os..vm..PageTable$GT$$GT$$GT$17h7369e6a7b60fa11aE+0x1e>
80208642: 09 a0        	j	0x80208644 <_ZN4core3ptr91drop_in_place$LT$core..option..Option$LT$alloc..boxed..Box$LT$os..vm..PageTable$GT$$GT$$GT$17h7369e6a7b60fa11aE+0x16>
80208644: e2 60        	ld	ra, 0x18(sp)
80208646: 42 64        	ld	s0, 0x10(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80208648: 05 61        	addi	sp, sp, 0x20
8020864a: 82 80        	ret
8020864c: 03 35 04 fe  	ld	a0, -0x20(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80208650: 97 00 00 00  	auipc	ra, 0x0
80208654: e7 80 a0 b4  	jalr	-0x4b6(ra) <_ZN4core3ptr63drop_in_place$LT$alloc..boxed..Box$LT$os..vm..PageTable$GT$$GT$17h9e901d0737afa155E>
80208658: f5 b7        	j	0x80208644 <_ZN4core3ptr91drop_in_place$LT$core..option..Option$LT$alloc..boxed..Box$LT$os..vm..PageTable$GT$$GT$$GT$17h7369e6a7b60fa11aE+0x16>

000000008020865a <_ZN4core3ptr92drop_in_place$LT$alloc..sync..Weak$LT$easy_fs..vfs..Inode$C$$RF$alloc..alloc..Global$GT$$GT$17hb779da9d957944a4E>:
8020865a: 01 11        	addi	sp, sp, -0x20
8020865c: 06 ec        	sd	ra, 0x18(sp)
8020865e: 22 e8        	sd	s0, 0x10(sp)
80208660: 00 10        	addi	s0, sp, 0x20
80208662: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208666: 97 10 00 00  	auipc	ra, 0x1
8020866a: e7 80 c0 ab  	jalr	-0x544(ra) <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E>
8020866e: e2 60        	ld	ra, 0x18(sp)
80208670: 42 64        	ld	s0, 0x10(sp)
80208672: 05 61        	addi	sp, sp, 0x20
80208674: 82 80        	ret

0000000080208676 <_ZN4core3ptr92drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$easy_fs..vfs..Inode$GT$$GT$$GT$17h87f9a95a85f24bb6E>:
80208676: 01 11        	addi	sp, sp, -0x20
80208678: 06 ec        	sd	ra, 0x18(sp)
8020867a: 22 e8        	sd	s0, 0x10(sp)
8020867c: 00 10        	addi	s0, sp, 0x20
8020867e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208682: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208686: 08 61        	ld	a0, 0x0(a0)
80208688: 11 e5        	bnez	a0, 0x80208694 <_ZN4core3ptr92drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$easy_fs..vfs..Inode$GT$$GT$$GT$17h87f9a95a85f24bb6E+0x1e>
8020868a: 09 a0        	j	0x8020868c <_ZN4core3ptr92drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$easy_fs..vfs..Inode$GT$$GT$$GT$17h87f9a95a85f24bb6E+0x16>
8020868c: e2 60        	ld	ra, 0x18(sp)
8020868e: 42 64        	ld	s0, 0x10(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80208690: 05 61        	addi	sp, sp, 0x20
80208692: 82 80        	ret
80208694: 03 35 04 fe  	ld	a0, -0x20(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80208698: 97 00 00 00  	auipc	ra, 0x0
8020869c: e7 80 00 b3  	jalr	-0x4d0(ra) <_ZN4core3ptr64drop_in_place$LT$alloc..sync..Arc$LT$easy_fs..vfs..Inode$GT$$GT$17hac687c9eac6e2cfdE>
802086a0: f5 b7        	j	0x8020868c <_ZN4core3ptr92drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$easy_fs..vfs..Inode$GT$$GT$$GT$17h87f9a95a85f24bb6E+0x16>

00000000802086a2 <_ZN4core3ptr95drop_in_place$LT$dyn$u20$os..filesystem..File$u2b$core..marker..Send$u2b$core..marker..Sync$GT$17hea124166eb3fde95E>:
802086a2: 01 11        	addi	sp, sp, -0x20
802086a4: 06 ec        	sd	ra, 0x18(sp)
802086a6: 22 e8        	sd	s0, 0x10(sp)
802086a8: 00 10        	addi	s0, sp, 0x20
802086aa: 23 30 a4 fe  	sd	a0, -0x20(s0)
802086ae: 23 34 b4 fe  	sd	a1, -0x18(s0)
802086b2: 8c 61        	ld	a1, 0x0(a1)
802086b4: 82 95        	jalr	a1
802086b6: e2 60        	ld	ra, 0x18(sp)
802086b8: 42 64        	ld	s0, 0x10(sp)
802086ba: 05 61        	addi	sp, sp, 0x20
802086bc: 82 80        	ret

00000000802086be <_ZN4core3ptr99drop_in_place$LT$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..efs..EasyFileSystem$GT$$GT$$GT$17h4f71b212d9758283E>:
802086be: 01 11        	addi	sp, sp, -0x20
802086c0: 06 ec        	sd	ra, 0x18(sp)
802086c2: 22 e8        	sd	s0, 0x10(sp)
802086c4: 00 10        	addi	s0, sp, 0x20
802086c6: 23 34 a4 fe  	sd	a0, -0x18(s0)
802086ca: 97 00 00 00  	auipc	ra, 0x0
802086ce: e7 80 e0 3e  	jalr	0x3ee(ra) <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd99ea33b2282b71dE>
802086d2: e2 60        	ld	ra, 0x18(sp)
802086d4: 42 64        	ld	s0, 0x10(sp)
802086d6: 05 61        	addi	sp, sp, 0x20
802086d8: 82 80        	ret

00000000802086da <_ZN66_$LT$core..cell..BorrowRefMut$u20$as$u20$core..ops..drop..Drop$GT$4drop17he4d9bd61b1ab2499E>:
;     fn drop(&mut self) {
802086da: 1d 71        	addi	sp, sp, -0x60
802086dc: 86 ec        	sd	ra, 0x58(sp)
802086de: a2 e8        	sd	s0, 0x50(sp)
802086e0: 80 10        	addi	s0, sp, 0x60
802086e2: aa 85        	mv	a1, a0
802086e4: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         let borrow = self.borrow.get();
802086e8: 88 61        	ld	a0, 0x0(a1)
802086ea: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         unsafe { *self.value.get() }
802086ee: 23 3c a4 fa  	sd	a0, -0x48(s0)
802086f2: 08 61        	ld	a0, 0x0(a0)
802086f4: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.borrow.set(borrow + 1);
802086f8: 8c 61        	ld	a1, 0x0(a1)
802086fa: 23 34 b4 fc  	sd	a1, -0x38(s0)
802086fe: 05 05        	addi	a0, a0, 0x1
80208700: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         mem::replace(unsafe { &mut *self.value.get() }, val)
80208704: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208708: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         crate::intrinsics::read_via_copy(src)
8020870c: 90 61        	ld	a2, 0x0(a1)
8020870e: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80208712: 88 e1        	sd	a0, 0x0(a1)
80208714: e6 60        	ld	ra, 0x58(sp)
80208716: 46 64        	ld	s0, 0x50(sp)
;     }
80208718: 25 61        	addi	sp, sp, 0x60
8020871a: 82 80        	ret

000000008020871c <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h22d3d95304fc22dbE>:
;     fn drop(&mut self) {
8020871c: 1d 71        	addi	sp, sp, -0x60
8020871e: 86 ec        	sd	ra, 0x58(sp)
80208720: a2 e8        	sd	s0, 0x50(sp)
80208722: 80 10        	addi	s0, sp, 0x60
80208724: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
80208728: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
8020872c: 0c 65        	ld	a1, 0x8(a0)
8020872e: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
80208732: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
80208736: 08 69        	ld	a0, 0x10(a0)
80208738: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
8020873c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80208740: 23 38 b4 fa  	sd	a1, -0x50(s0)
80208744: 23 3c a4 fa  	sd	a0, -0x48(s0)
80208748: 83 35 04 fb  	ld	a1, -0x50(s0)
8020874c: 03 35 84 fb  	ld	a0, -0x48(s0)
80208750: 23 30 b4 fa  	sd	a1, -0x60(s0)
80208754: 23 34 a4 fa  	sd	a0, -0x58(s0)
80208758: 03 35 04 fa  	ld	a0, -0x60(s0)
8020875c: 83 35 84 fa  	ld	a1, -0x58(s0)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
80208760: 97 00 00 00  	auipc	ra, 0x0
80208764: e7 80 00 df  	jalr	-0x210(ra) <_ZN4core3ptr87drop_in_place$LT$$u5b$alloc..sync..Arc$LT$os..task..task..TaskControlBlock$GT$$u5d$$GT$17hbdc027501203ea0aE>
80208768: e6 60        	ld	ra, 0x58(sp)
8020876a: 46 64        	ld	s0, 0x50(sp)
;     }
8020876c: 25 61        	addi	sp, sp, 0x60
8020876e: 82 80        	ret

0000000080208770 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2b3014efa066599eE>:
;     fn drop(&mut self) {
80208770: 1d 71        	addi	sp, sp, -0x60
80208772: 86 ec        	sd	ra, 0x58(sp)
80208774: a2 e8        	sd	s0, 0x50(sp)
80208776: 80 10        	addi	s0, sp, 0x60
80208778: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
8020877c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
80208780: 0c 65        	ld	a1, 0x8(a0)
80208782: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
80208786: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
8020878a: 08 69        	ld	a0, 0x10(a0)
8020878c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
80208790: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80208794: 23 38 b4 fa  	sd	a1, -0x50(s0)
80208798: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020879c: 83 35 04 fb  	ld	a1, -0x50(s0)
802087a0: 03 35 84 fb  	ld	a0, -0x48(s0)
802087a4: 23 30 b4 fa  	sd	a1, -0x60(s0)
802087a8: 23 34 a4 fa  	sd	a0, -0x58(s0)
802087ac: 03 35 04 fa  	ld	a0, -0x60(s0)
802087b0: 83 35 84 fa  	ld	a1, -0x58(s0)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
802087b4: 97 00 00 00  	auipc	ra, 0x0
802087b8: e7 80 40 96  	jalr	-0x69c(ra) <_ZN4core3ptr59drop_in_place$LT$$u5b$os..page_alloc..AllocerGuard$u5d$$GT$17h13aaf2bae0fde306E>
802087bc: e6 60        	ld	ra, 0x58(sp)
802087be: 46 64        	ld	s0, 0x50(sp)
;     }
802087c0: 25 61        	addi	sp, sp, 0x60
802087c2: 82 80        	ret

00000000802087c4 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h33624bc08c62c6b6E>:
;     fn drop(&mut self) {
802087c4: 1d 71        	addi	sp, sp, -0x60
802087c6: 86 ec        	sd	ra, 0x58(sp)
802087c8: a2 e8        	sd	s0, 0x50(sp)
802087ca: 80 10        	addi	s0, sp, 0x60
802087cc: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
802087d0: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
802087d4: 0c 65        	ld	a1, 0x8(a0)
802087d6: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
802087da: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
802087de: 08 69        	ld	a0, 0x10(a0)
802087e0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
802087e4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802087e8: 23 38 b4 fa  	sd	a1, -0x50(s0)
802087ec: 23 3c a4 fa  	sd	a0, -0x48(s0)
802087f0: 83 35 04 fb  	ld	a1, -0x50(s0)
802087f4: 03 35 84 fb  	ld	a0, -0x48(s0)
802087f8: 23 30 b4 fa  	sd	a1, -0x60(s0)
802087fc: 23 34 a4 fa  	sd	a0, -0x58(s0)
80208800: e6 60        	ld	ra, 0x58(sp)
80208802: 46 64        	ld	s0, 0x50(sp)
;     }
80208804: 25 61        	addi	sp, sp, 0x60
80208806: 82 80        	ret

0000000080208808 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h62ac02ebefa8e735E>:
;     fn drop(&mut self) {
80208808: 1d 71        	addi	sp, sp, -0x60
8020880a: 86 ec        	sd	ra, 0x58(sp)
8020880c: a2 e8        	sd	s0, 0x50(sp)
8020880e: 80 10        	addi	s0, sp, 0x60
80208810: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
80208814: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
80208818: 0c 65        	ld	a1, 0x8(a0)
8020881a: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
8020881e: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
80208822: 08 69        	ld	a0, 0x10(a0)
80208824: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
80208828: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8020882c: 23 38 b4 fa  	sd	a1, -0x50(s0)
80208830: 23 3c a4 fa  	sd	a0, -0x48(s0)
80208834: 83 35 04 fb  	ld	a1, -0x50(s0)
80208838: 03 35 84 fb  	ld	a0, -0x48(s0)
8020883c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80208840: 23 34 a4 fa  	sd	a0, -0x58(s0)
80208844: e6 60        	ld	ra, 0x58(sp)
80208846: 46 64        	ld	s0, 0x50(sp)
;     }
80208848: 25 61        	addi	sp, sp, 0x60
8020884a: 82 80        	ret

000000008020884c <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha6baad283f5b5d92E>:
;     fn drop(&mut self) {
8020884c: 1d 71        	addi	sp, sp, -0x60
8020884e: 86 ec        	sd	ra, 0x58(sp)
80208850: a2 e8        	sd	s0, 0x50(sp)
80208852: 80 10        	addi	s0, sp, 0x60
80208854: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
80208858: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
8020885c: 0c 65        	ld	a1, 0x8(a0)
8020885e: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
80208862: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
80208866: 08 69        	ld	a0, 0x10(a0)
80208868: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
8020886c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80208870: 23 38 b4 fa  	sd	a1, -0x50(s0)
80208874: 23 3c a4 fa  	sd	a0, -0x48(s0)
80208878: 83 35 04 fb  	ld	a1, -0x50(s0)
8020887c: 03 35 84 fb  	ld	a0, -0x48(s0)
80208880: 23 30 b4 fa  	sd	a1, -0x60(s0)
80208884: 23 34 a4 fa  	sd	a0, -0x58(s0)
80208888: e6 60        	ld	ra, 0x58(sp)
8020888a: 46 64        	ld	s0, 0x50(sp)
;     }
8020888c: 25 61        	addi	sp, sp, 0x60
8020888e: 82 80        	ret

0000000080208890 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc091cf9c3ed0da45E>:
;     fn drop(&mut self) {
80208890: 1d 71        	addi	sp, sp, -0x60
80208892: 86 ec        	sd	ra, 0x58(sp)
80208894: a2 e8        	sd	s0, 0x50(sp)
80208896: 80 10        	addi	s0, sp, 0x60
80208898: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
8020889c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
802088a0: 0c 65        	ld	a1, 0x8(a0)
802088a2: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
802088a6: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
802088aa: 08 69        	ld	a0, 0x10(a0)
802088ac: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
802088b0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802088b4: 23 38 b4 fa  	sd	a1, -0x50(s0)
802088b8: 23 3c a4 fa  	sd	a0, -0x48(s0)
802088bc: 83 35 04 fb  	ld	a1, -0x50(s0)
802088c0: 03 35 84 fb  	ld	a0, -0x48(s0)
802088c4: 23 30 b4 fa  	sd	a1, -0x60(s0)
802088c8: 23 34 a4 fa  	sd	a0, -0x58(s0)
802088cc: 03 35 04 fa  	ld	a0, -0x60(s0)
802088d0: 83 35 84 fa  	ld	a1, -0x58(s0)
;             ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
802088d4: 97 f0 ff ff  	auipc	ra, 0xfffff
802088d8: e7 80 00 2d  	jalr	0x2d0(ra) <ekernel+0xffcbaba4>
802088dc: e6 60        	ld	ra, 0x58(sp)
802088de: 46 64        	ld	s0, 0x50(sp)
;     }
802088e0: 25 61        	addi	sp, sp, 0x60
802088e2: 82 80        	ret

00000000802088e4 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d5bb707567aa53fE>:
;     fn drop(&mut self) {
802088e4: 19 71        	addi	sp, sp, -0x80
802088e6: 86 fc        	sd	ra, 0x78(sp)
802088e8: a2 f8        	sd	s0, 0x70(sp)
802088ea: 00 01        	addi	s0, sp, 0x80
802088ec: 23 34 a4 f8  	sd	a0, -0x78(s0)
802088f0: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
802088f2: 23 38 b4 f8  	sd	a1, -0x70(s0)
802088f6: a3 0f b4 f8  	sb	a1, -0x61(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
802088fa: 23 30 b4 fa  	sd	a1, -0x60(s0)
802088fe: 23 07 b4 fa  	sb	a1, -0x52(s0)
80208902: 09 46        	li	a2, 0x2
; pub fn fence(order: Ordering) {
80208904: a3 07 c4 fa  	sb	a2, -0x51(s0)
80208908: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         unsafe { self.ptr.as_ref() }
8020890c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80208910: 08 61        	ld	a0, 0x0(a0)
80208912: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.pointer as *mut T
80208916: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
8020891a: 23 38 a4 fc  	sd	a0, -0x30(s0)
; atomic_int_ptr_sized! {
8020891e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208922: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208926: 7d 56        	li	a2, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
80208928: 2f 35 c5 02  	amoadd.d.rl	a0, a2, (a0)
8020892c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208930: 03 35 84 fe  	ld	a0, -0x18(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
80208934: 63 1c b5 00  	bne	a0, a1, 0x8020894c <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d5bb707567aa53fE+0x68>
80208938: 09 a0        	j	0x8020893a <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d5bb707567aa53fE+0x56>
8020893a: 03 35 84 f8  	ld	a0, -0x78(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
8020893e: 0f 00 30 02  	fence	r, rw
;             self.drop_slow();
80208942: 97 90 ff ff  	auipc	ra, 0xffff9
80208946: e7 80 c0 21  	jalr	0x21c(ra) <ekernel+0xffcb4b5e>
8020894a: 11 a0        	j	0x8020894e <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d5bb707567aa53fE+0x6a>
;     }
8020894c: 09 a0        	j	0x8020894e <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d5bb707567aa53fE+0x6a>
8020894e: e6 70        	ld	ra, 0x78(sp)
80208950: 46 74        	ld	s0, 0x70(sp)
;     }
80208952: 09 61        	addi	sp, sp, 0x80
80208954: 82 80        	ret

0000000080208956 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238f4cc6706820f7E>:
;     fn drop(&mut self) {
80208956: 19 71        	addi	sp, sp, -0x80
80208958: 86 fc        	sd	ra, 0x78(sp)
8020895a: a2 f8        	sd	s0, 0x70(sp)
8020895c: 00 01        	addi	s0, sp, 0x80
8020895e: 23 34 a4 f8  	sd	a0, -0x78(s0)
80208962: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80208964: 23 38 b4 f8  	sd	a1, -0x70(s0)
80208968: a3 0f b4 f8  	sb	a1, -0x61(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8020896c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80208970: 23 07 b4 fa  	sb	a1, -0x52(s0)
80208974: 09 46        	li	a2, 0x2
; pub fn fence(order: Ordering) {
80208976: a3 07 c4 fa  	sb	a2, -0x51(s0)
8020897a: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         unsafe { self.ptr.as_ref() }
8020897e: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80208982: 08 61        	ld	a0, 0x0(a0)
80208984: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.pointer as *mut T
80208988: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
8020898c: 23 38 a4 fc  	sd	a0, -0x30(s0)
; atomic_int_ptr_sized! {
80208990: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208994: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208998: 7d 56        	li	a2, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
8020899a: 2f 35 c5 02  	amoadd.d.rl	a0, a2, (a0)
8020899e: 23 34 a4 fe  	sd	a0, -0x18(s0)
802089a2: 03 35 84 fe  	ld	a0, -0x18(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
802089a6: 63 1c b5 00  	bne	a0, a1, 0x802089be <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238f4cc6706820f7E+0x68>
802089aa: 09 a0        	j	0x802089ac <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238f4cc6706820f7E+0x56>
802089ac: 03 35 84 f8  	ld	a0, -0x78(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
802089b0: 0f 00 30 02  	fence	r, rw
;             self.drop_slow();
802089b4: 97 90 ff ff  	auipc	ra, 0xffff9
802089b8: e7 80 60 24  	jalr	0x246(ra) <ekernel+0xffcb4bfa>
802089bc: 11 a0        	j	0x802089c0 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238f4cc6706820f7E+0x6a>
;     }
802089be: 09 a0        	j	0x802089c0 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h238f4cc6706820f7E+0x6a>
802089c0: e6 70        	ld	ra, 0x78(sp)
802089c2: 46 74        	ld	s0, 0x70(sp)
;     }
802089c4: 09 61        	addi	sp, sp, 0x80
802089c6: 82 80        	ret

00000000802089c8 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60439991405ec880E>:
;     fn drop(&mut self) {
802089c8: 75 71        	addi	sp, sp, -0x90
802089ca: 06 e5        	sd	ra, 0x88(sp)
802089cc: 22 e1        	sd	s0, 0x80(sp)
802089ce: 00 09        	addi	s0, sp, 0x90
802089d0: 2a 86        	mv	a2, a0
802089d2: 23 3c c4 f6  	sd	a2, -0x88(s0)
802089d6: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
802089d8: 23 30 b4 f8  	sd	a1, -0x80(s0)
802089dc: a3 07 b4 f8  	sb	a1, -0x71(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
802089e0: 23 38 b4 f8  	sd	a1, -0x70(s0)
802089e4: 23 0f b4 f8  	sb	a1, -0x62(s0)
802089e8: 09 45        	li	a0, 0x2
; pub fn fence(order: Ordering) {
802089ea: a3 0f a4 f8  	sb	a0, -0x61(s0)
802089ee: 23 30 c4 fa  	sd	a2, -0x60(s0)
;         unsafe { self.ptr.as_ref() }
802089f2: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         unsafe { &*self.as_ptr().cast_const() }
802089f6: 08 62        	ld	a0, 0x0(a2)
802089f8: 10 66        	ld	a2, 0x8(a2)
802089fa: 23 38 a4 fa  	sd	a0, -0x50(s0)
802089fe: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         self.pointer as *mut T
80208a02: 23 30 a4 fc  	sd	a0, -0x40(s0)
80208a06: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
80208a0a: 23 38 a4 fc  	sd	a0, -0x30(s0)
; atomic_int_ptr_sized! {
80208a0e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208a12: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208a16: 7d 56        	li	a2, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
80208a18: 2f 35 c5 02  	amoadd.d.rl	a0, a2, (a0)
80208a1c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208a20: 03 35 84 fe  	ld	a0, -0x18(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
80208a24: 63 1c b5 00  	bne	a0, a1, 0x80208a3c <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60439991405ec880E+0x74>
80208a28: 09 a0        	j	0x80208a2a <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60439991405ec880E+0x62>
80208a2a: 03 35 84 f7  	ld	a0, -0x88(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
80208a2e: 0f 00 30 02  	fence	r, rw
;             self.drop_slow();
80208a32: 97 90 ff ff  	auipc	ra, 0xffff9
80208a36: e7 80 00 17  	jalr	0x170(ra) <ekernel+0xffcb4ba2>
80208a3a: 11 a0        	j	0x80208a3e <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60439991405ec880E+0x76>
;     }
80208a3c: 09 a0        	j	0x80208a3e <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60439991405ec880E+0x76>
80208a3e: aa 60        	ld	ra, 0x88(sp)
80208a40: 0a 64        	ld	s0, 0x80(sp)
;     }
80208a42: 49 61        	addi	sp, sp, 0x90
80208a44: 82 80        	ret

0000000080208a46 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6da26ea01207a62E>:
;     fn drop(&mut self) {
80208a46: 19 71        	addi	sp, sp, -0x80
80208a48: 86 fc        	sd	ra, 0x78(sp)
80208a4a: a2 f8        	sd	s0, 0x70(sp)
80208a4c: 00 01        	addi	s0, sp, 0x80
80208a4e: 23 34 a4 f8  	sd	a0, -0x78(s0)
80208a52: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80208a54: 23 38 b4 f8  	sd	a1, -0x70(s0)
80208a58: a3 0f b4 f8  	sb	a1, -0x61(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
80208a5c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80208a60: 23 07 b4 fa  	sb	a1, -0x52(s0)
80208a64: 09 46        	li	a2, 0x2
; pub fn fence(order: Ordering) {
80208a66: a3 07 c4 fa  	sb	a2, -0x51(s0)
80208a6a: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         unsafe { self.ptr.as_ref() }
80208a6e: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80208a72: 08 61        	ld	a0, 0x0(a0)
80208a74: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.pointer as *mut T
80208a78: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
80208a7c: 23 38 a4 fc  	sd	a0, -0x30(s0)
; atomic_int_ptr_sized! {
80208a80: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208a84: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208a88: 7d 56        	li	a2, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
80208a8a: 2f 35 c5 02  	amoadd.d.rl	a0, a2, (a0)
80208a8e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208a92: 03 35 84 fe  	ld	a0, -0x18(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
80208a96: 63 1c b5 00  	bne	a0, a1, 0x80208aae <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6da26ea01207a62E+0x68>
80208a9a: 09 a0        	j	0x80208a9c <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6da26ea01207a62E+0x56>
80208a9c: 03 35 84 f8  	ld	a0, -0x78(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
80208aa0: 0f 00 30 02  	fence	r, rw
;             self.drop_slow();
80208aa4: 97 90 ff ff  	auipc	ra, 0xffff9
80208aa8: e7 80 a0 19  	jalr	0x19a(ra) <ekernel+0xffcb4c3e>
80208aac: 11 a0        	j	0x80208ab0 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6da26ea01207a62E+0x6a>
;     }
80208aae: 09 a0        	j	0x80208ab0 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6da26ea01207a62E+0x6a>
80208ab0: e6 70        	ld	ra, 0x78(sp)
80208ab2: 46 74        	ld	s0, 0x70(sp)
;     }
80208ab4: 09 61        	addi	sp, sp, 0x80
80208ab6: 82 80        	ret

0000000080208ab8 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd99ea33b2282b71dE>:
;     fn drop(&mut self) {
80208ab8: 19 71        	addi	sp, sp, -0x80
80208aba: 86 fc        	sd	ra, 0x78(sp)
80208abc: a2 f8        	sd	s0, 0x70(sp)
80208abe: 00 01        	addi	s0, sp, 0x80
80208ac0: 23 34 a4 f8  	sd	a0, -0x78(s0)
80208ac4: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80208ac6: 23 38 b4 f8  	sd	a1, -0x70(s0)
80208aca: a3 0f b4 f8  	sb	a1, -0x61(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
80208ace: 23 30 b4 fa  	sd	a1, -0x60(s0)
80208ad2: 23 07 b4 fa  	sb	a1, -0x52(s0)
80208ad6: 09 46        	li	a2, 0x2
; pub fn fence(order: Ordering) {
80208ad8: a3 07 c4 fa  	sb	a2, -0x51(s0)
80208adc: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         unsafe { self.ptr.as_ref() }
80208ae0: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80208ae4: 08 61        	ld	a0, 0x0(a0)
80208ae6: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.pointer as *mut T
80208aea: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
80208aee: 23 38 a4 fc  	sd	a0, -0x30(s0)
; atomic_int_ptr_sized! {
80208af2: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208af6: 23 30 a4 fe  	sd	a0, -0x20(s0)
80208afa: 7d 56        	li	a2, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
80208afc: 2f 35 c5 02  	amoadd.d.rl	a0, a2, (a0)
80208b00: 23 34 a4 fe  	sd	a0, -0x18(s0)
80208b04: 03 35 84 fe  	ld	a0, -0x18(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
80208b08: 63 1c b5 00  	bne	a0, a1, 0x80208b20 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd99ea33b2282b71dE+0x68>
80208b0c: 09 a0        	j	0x80208b0e <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd99ea33b2282b71dE+0x56>
80208b0e: 03 35 84 f8  	ld	a0, -0x78(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
80208b12: 0f 00 30 02  	fence	r, rw
;             self.drop_slow();
80208b16: 97 90 ff ff  	auipc	ra, 0xffff9
80208b1a: e7 80 40 00  	jalr	0x4(ra) <ekernel+0xffcb4b1a>
80208b1e: 11 a0        	j	0x80208b22 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd99ea33b2282b71dE+0x6a>
;     }
80208b20: 09 a0        	j	0x80208b22 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd99ea33b2282b71dE+0x6a>
80208b22: e6 70        	ld	ra, 0x78(sp)
80208b24: 46 74        	ld	s0, 0x70(sp)
;     }
80208b26: 09 61        	addi	sp, sp, 0x80
80208b28: 82 80        	ret

0000000080208b2a <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h748720f456fc2736E>:
;     fn drop(&mut self) {
80208b2a: 19 71        	addi	sp, sp, -0x80
80208b2c: 86 fc        	sd	ra, 0x78(sp)
80208b2e: a2 f8        	sd	s0, 0x70(sp)
80208b30: 00 01        	addi	s0, sp, 0x80
80208b32: 23 34 a4 f8  	sd	a0, -0x78(s0)
80208b36: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         let ptr = self.0;
80208b3a: 08 61        	ld	a0, 0x0(a0)
80208b3c: 23 38 a4 f8  	sd	a0, -0x70(s0)
80208b40: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         self.pointer as *mut T
80208b44: 23 30 a4 fc  	sd	a0, -0x40(s0)
80208b48: 13 05 80 03  	li	a0, 0x38
;     unsafe { intrinsics::size_of_val(val) }
80208b4c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80208b50: 83 35 84 fc  	ld	a1, -0x38(s0)
80208b54: 23 38 b4 fc  	sd	a1, -0x30(s0)
80208b58: 21 45        	li	a0, 0x8
;     unsafe { intrinsics::min_align_of_val(val) }
80208b5a: 23 3c a4 fc  	sd	a0, -0x28(s0)
80208b5e: 03 35 84 fd  	ld	a0, -0x28(s0)
80208b62: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80208b66: 23 30 b4 fa  	sd	a1, -0x60(s0)
80208b6a: 23 3c a4 f8  	sd	a0, -0x68(s0)
80208b6e: 13 05 84 f9  	addi	a0, s0, -0x68
;             if layout.size() != 0 {
80208b72: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.size
80208b76: 03 35 04 fa  	ld	a0, -0x60(s0)
;             if layout.size() != 0 {
80208b7a: 19 e1        	bnez	a0, 0x80208b80 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h748720f456fc2736E+0x56>
80208b7c: 09 a0        	j	0x80208b7e <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h748720f456fc2736E+0x54>
80208b7e: 1d a0        	j	0x80208ba4 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h748720f456fc2736E+0x7a>
80208b80: 83 35 04 f9  	ld	a1, -0x70(s0)
80208b84: 03 35 84 f8  	ld	a0, -0x78(s0)
;                 self.1.deallocate(From::from(ptr.cast()), layout);
80208b88: 21 05        	addi	a0, a0, 0x8
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80208b8a: 23 34 b4 fa  	sd	a1, -0x58(s0)
;                 self.1.deallocate(From::from(ptr.cast()), layout);
80208b8e: 03 36 84 f9  	ld	a2, -0x68(s0)
80208b92: 83 36 04 fa  	ld	a3, -0x60(s0)
80208b96: 83 35 84 fa  	ld	a1, -0x58(s0)
80208b9a: 97 20 00 00  	auipc	ra, 0x2
80208b9e: e7 80 a0 1d  	jalr	0x1da(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
;             if layout.size() != 0 {
80208ba2: 09 a0        	j	0x80208ba4 <_ZN72_$LT$alloc..boxed..Box$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h748720f456fc2736E+0x7a>
80208ba4: e6 70        	ld	ra, 0x78(sp)
80208ba6: 46 74        	ld	s0, 0x70(sp)
;     }
80208ba8: 09 61        	addi	sp, sp, 0x80
80208baa: 82 80        	ret

0000000080208bac <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE>:
;     fn drop(&mut self) {
80208bac: 11 71        	addi	sp, sp, -0x100
80208bae: 86 fd        	sd	ra, 0xf8(sp)
80208bb0: a2 f9        	sd	s0, 0xf0(sp)
80208bb2: 00 02        	addi	s0, sp, 0x100
80208bb4: 23 30 a4 f0  	sd	a0, -0x100(s0)
80208bb8: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80208bba: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80208bbe: a3 0f b4 f0  	sb	a1, -0xe1(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
80208bc2: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80208bc6: 23 07 b4 f2  	sb	a1, -0xd2(s0)
80208bca: 89 45        	li	a1, 0x2
; pub fn fence(order: Ordering) {
80208bcc: a3 07 b4 f2  	sb	a1, -0xd1(s0)
80208bd0: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         let ptr = self.ptr.as_ptr();
80208bd4: 08 61        	ld	a0, 0x0(a0)
80208bd6: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80208bda: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         self.pointer as *mut T
80208bde: 23 3c a4 f6  	sd	a0, -0x88(s0)
80208be2: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self as _
80208be6: 23 34 a4 f8  	sd	a0, -0x78(s0)
80208bea: fd 55        	li	a1, -0x1
;         if is_dangling(ptr) {
80208bec: 63 0a b5 04  	beq	a0, a1, 0x80208c40 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE+0x94>
80208bf0: 09 a0        	j	0x80208bf2 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE+0x46>
80208bf2: 03 35 84 f0  	ld	a0, -0xf8(s0)
;             Some(unsafe { WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak } })
80208bf6: 93 05 85 00  	addi	a1, a0, 0x8
80208bfa: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80208bfe: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80208c02: 83 35 84 f5  	ld	a1, -0xa8(s0)
80208c06: 03 35 04 f6  	ld	a0, -0xa0(s0)
80208c0a: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80208c0e: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         let inner = if let Some(inner) = self.inner() { inner } else { return };
80208c12: 03 35 04 f3  	ld	a0, -0xd0(s0)
80208c16: 23 38 a4 f8  	sd	a0, -0x70(s0)
80208c1a: 83 35 84 f3  	ld	a1, -0xc8(s0)
80208c1e: 23 3c b4 f8  	sd	a1, -0x68(s0)
; atomic_int_ptr_sized! {
80208c22: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208c26: 23 34 a4 fa  	sd	a0, -0x58(s0)
80208c2a: fd 55        	li	a1, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
80208c2c: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
80208c30: 23 38 a4 fa  	sd	a0, -0x50(s0)
80208c34: 03 35 04 fb  	ld	a0, -0x50(s0)
80208c38: 85 45        	li	a1, 0x1
;         if inner.weak.fetch_sub(1, Release) == 1 {
80208c3a: 63 04 b5 00  	beq	a0, a1, 0x80208c42 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE+0x96>
80208c3e: 85 a0        	j	0x80208c9e <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE+0xf2>
;     }
80208c40: 8d a0        	j	0x80208ca2 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE+0xf6>
80208c42: 83 35 04 f0  	ld	a1, -0x100(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
80208c46: 0f 00 30 02  	fence	r, rw
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208c4a: 13 85 85 00  	addi	a0, a1, 0x8
80208c4e: 90 61        	ld	a2, 0x0(a1)
80208c50: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80208c54: 23 30 c4 f4  	sd	a2, -0xc0(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208c58: 8c 61        	ld	a1, 0x0(a1)
80208c5a: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self.pointer as *mut T
80208c5e: 23 34 b4 fc  	sd	a1, -0x38(s0)
80208c62: 93 05 00 04  	li	a1, 0x40
;     unsafe { intrinsics::size_of_val(val) }
80208c66: 23 38 b4 fc  	sd	a1, -0x30(s0)
80208c6a: 03 36 04 fd  	ld	a2, -0x30(s0)
80208c6e: 23 3c c4 fc  	sd	a2, -0x28(s0)
80208c72: a1 45        	li	a1, 0x8
;     unsafe { intrinsics::min_align_of_val(val) }
80208c74: 23 30 b4 fe  	sd	a1, -0x20(s0)
80208c78: 83 35 04 fe  	ld	a1, -0x20(s0)
80208c7c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80208c80: 23 38 c4 f4  	sd	a2, -0xb0(s0)
80208c84: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208c88: 83 35 04 f4  	ld	a1, -0xc0(s0)
80208c8c: 03 36 84 f4  	ld	a2, -0xb8(s0)
80208c90: 83 36 04 f5  	ld	a3, -0xb0(s0)
80208c94: 97 20 02 00  	auipc	ra, 0x22
80208c98: e7 80 60 9a  	jalr	-0x65a(ra) <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9108b7cd150cf04bE>
;         if inner.weak.fetch_sub(1, Release) == 1 {
80208c9c: 11 a0        	j	0x80208ca0 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE+0xf4>
80208c9e: 09 a0        	j	0x80208ca0 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE+0xf4>
;     }
80208ca0: 09 a0        	j	0x80208ca2 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h255a5e9728fd5c3eE+0xf6>
80208ca2: ee 70        	ld	ra, 0xf8(sp)
80208ca4: 4e 74        	ld	s0, 0xf0(sp)
;     }
80208ca6: 11 61        	addi	sp, sp, 0x100
80208ca8: 82 80        	ret

0000000080208caa <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE>:
;     fn drop(&mut self) {
80208caa: 49 71        	addi	sp, sp, -0x170
80208cac: 86 f6        	sd	ra, 0x168(sp)
80208cae: a2 f2        	sd	s0, 0x160(sp)
80208cb0: 80 1a        	addi	s0, sp, 0x170
80208cb2: aa 85        	mv	a1, a0
80208cb4: 23 38 b4 ec  	sd	a1, -0x130(s0)
80208cb8: 05 45        	li	a0, 0x1
; atomic_int_ptr_sized! {
80208cba: 23 30 a4 ee  	sd	a0, -0x120(s0)
80208cbe: a3 07 a4 ee  	sb	a0, -0x111(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
80208cc2: 23 38 a4 ee  	sd	a0, -0x110(s0)
80208cc6: 23 0f a4 ee  	sb	a0, -0x102(s0)
80208cca: 09 45        	li	a0, 0x2
; pub fn fence(order: Ordering) {
80208ccc: a3 0f a4 ee  	sb	a0, -0x101(s0)
80208cd0: 23 3c b4 f2  	sd	a1, -0xc8(s0)
;         let ptr = self.ptr.as_ptr();
80208cd4: 88 61        	ld	a0, 0x0(a1)
80208cd6: 23 3c a4 ec  	sd	a0, -0x128(s0)
80208cda: 8c 65        	ld	a1, 0x8(a1)
80208cdc: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80208ce0: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;         self.pointer as *mut T
80208ce4: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80208ce8: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80208cec: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80208cf0: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         self as _
80208cf4: 23 38 a4 f6  	sd	a0, -0x90(s0)
80208cf8: fd 55        	li	a1, -0x1
;         if is_dangling(ptr) {
80208cfa: 63 0a b5 04  	beq	a0, a1, 0x80208d4e <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0xa4>
80208cfe: 09 a0        	j	0x80208d00 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0x56>
80208d00: 03 35 84 ed  	ld	a0, -0x128(s0)
;             Some(unsafe { WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak } })
80208d04: 93 05 85 00  	addi	a1, a0, 0x8
80208d08: 23 34 b4 f2  	sd	a1, -0xd8(s0)
80208d0c: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80208d10: 83 35 84 f2  	ld	a1, -0xd8(s0)
80208d14: 03 35 04 f3  	ld	a0, -0xd0(s0)
80208d18: 23 30 b4 f0  	sd	a1, -0x100(s0)
80208d1c: 23 34 a4 f0  	sd	a0, -0xf8(s0)
;         let inner = if let Some(inner) = self.inner() { inner } else { return };
80208d20: 03 35 04 f0  	ld	a0, -0x100(s0)
80208d24: 23 3c a4 f6  	sd	a0, -0x88(s0)
80208d28: 83 35 84 f0  	ld	a1, -0xf8(s0)
80208d2c: 23 30 b4 f8  	sd	a1, -0x80(s0)
; atomic_int_ptr_sized! {
80208d30: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208d34: 23 38 a4 f8  	sd	a0, -0x70(s0)
80208d38: fd 55        	li	a1, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
80208d3a: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
80208d3e: 23 3c a4 f8  	sd	a0, -0x68(s0)
80208d42: 03 35 84 f9  	ld	a0, -0x68(s0)
80208d46: 85 45        	li	a1, 0x1
;         if inner.weak.fetch_sub(1, Release) == 1 {
80208d48: 63 04 b5 00  	beq	a0, a1, 0x80208d50 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0xa6>
80208d4c: c1 a8        	j	0x80208e1c <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0x172>
;     }
80208d4e: c9 a8        	j	0x80208e20 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0x176>
80208d50: 03 35 04 ed  	ld	a0, -0x130(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
80208d54: 0f 00 30 02  	fence	r, rw
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208d58: 93 05 05 01  	addi	a1, a0, 0x10
80208d5c: 23 34 b4 ea  	sd	a1, -0x158(s0)
80208d60: 0c 61        	ld	a1, 0x0(a0)
80208d62: 10 65        	ld	a2, 0x8(a0)
80208d64: 23 30 b4 fa  	sd	a1, -0x60(s0)
80208d68: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80208d6c: 23 38 b4 f0  	sd	a1, -0xf0(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208d70: 0c 61        	ld	a1, 0x0(a0)
80208d72: 08 65        	ld	a0, 0x8(a0)
80208d74: 23 38 a4 ea  	sd	a0, -0x150(s0)
80208d78: 23 38 b4 fa  	sd	a1, -0x50(s0)
80208d7c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         self.pointer as *mut T
80208d80: 23 30 b4 fc  	sd	a1, -0x40(s0)
80208d84: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     unsafe { intrinsics::size_of_val(val) }
80208d88: 0c 65        	ld	a1, 0x8(a0)
80208d8a: 23 3c b4 ea  	sd	a1, -0x148(s0)
80208d8e: 08 69        	ld	a0, 0x10(a0)
80208d90: a1 45        	li	a1, 0x8
80208d92: 23 30 b4 ec  	sd	a1, -0x140(s0)
80208d96: 2a 86        	mv	a2, a0
80208d98: 23 34 c4 ec  	sd	a2, -0x138(s0)
80208d9c: 63 76 b5 00  	bgeu	a0, a1, 0x80208da8 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0xfe>
80208da0: 03 35 04 ec  	ld	a0, -0x140(s0)
80208da4: 23 34 a4 ec  	sd	a0, -0x138(s0)
80208da8: 83 35 04 ec  	ld	a1, -0x140(s0)
80208dac: 03 35 04 eb  	ld	a0, -0x150(s0)
80208db0: 03 36 84 eb  	ld	a2, -0x148(s0)
80208db4: 03 37 84 ec  	ld	a4, -0x138(s0)
;     unsafe { intrinsics::size_of_val(val) }
80208db8: 3a 96        	add	a2, a2, a4
80208dba: 3d 06        	addi	a2, a2, 0xf
80208dbc: 81 46        	li	a3, 0x0
80208dbe: 99 8e        	sub	a3, a3, a4
80208dc0: 75 8e        	and	a2, a2, a3
80208dc2: 23 38 c4 fc  	sd	a2, -0x30(s0)
80208dc6: 03 36 04 fd  	ld	a2, -0x30(s0)
80208dca: 23 3c c4 e8  	sd	a2, -0x168(s0)
80208dce: 23 3c c4 fc  	sd	a2, -0x28(s0)
;     unsafe { intrinsics::min_align_of_val(val) }
80208dd2: 08 69        	ld	a0, 0x10(a0)
80208dd4: 2a 86        	mv	a2, a0
80208dd6: 23 30 c4 ea  	sd	a2, -0x160(s0)
80208dda: 63 76 b5 00  	bgeu	a0, a1, 0x80208de6 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0x13c>
80208dde: 03 35 04 ec  	ld	a0, -0x140(s0)
80208de2: 23 30 a4 ea  	sd	a0, -0x160(s0)
80208de6: 03 35 84 ea  	ld	a0, -0x158(s0)
80208dea: 03 36 84 e9  	ld	a2, -0x168(s0)
80208dee: 83 35 04 ea  	ld	a1, -0x160(s0)
;     unsafe { intrinsics::min_align_of_val(val) }
80208df2: 23 30 b4 fe  	sd	a1, -0x20(s0)
80208df6: 83 35 04 fe  	ld	a1, -0x20(s0)
80208dfa: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80208dfe: 23 30 c4 f2  	sd	a2, -0xe0(s0)
80208e02: 23 3c b4 f0  	sd	a1, -0xe8(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208e06: 83 35 04 f1  	ld	a1, -0xf0(s0)
80208e0a: 03 36 84 f1  	ld	a2, -0xe8(s0)
80208e0e: 83 36 04 f2  	ld	a3, -0xe0(s0)
80208e12: 97 20 02 00  	auipc	ra, 0x22
80208e16: e7 80 80 82  	jalr	-0x7d8(ra) <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9108b7cd150cf04bE>
;         if inner.weak.fetch_sub(1, Release) == 1 {
80208e1a: 11 a0        	j	0x80208e1e <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0x174>
80208e1c: 09 a0        	j	0x80208e1e <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0x174>
;     }
80208e1e: 09 a0        	j	0x80208e20 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h30c7185778421e0fE+0x176>
80208e20: b6 70        	ld	ra, 0x168(sp)
80208e22: 16 74        	ld	s0, 0x160(sp)
;     }
80208e24: 75 61        	addi	sp, sp, 0x170
80208e26: 82 80        	ret

0000000080208e28 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E>:
;     fn drop(&mut self) {
80208e28: 11 71        	addi	sp, sp, -0x100
80208e2a: 86 fd        	sd	ra, 0xf8(sp)
80208e2c: a2 f9        	sd	s0, 0xf0(sp)
80208e2e: 00 02        	addi	s0, sp, 0x100
80208e30: 23 30 a4 f0  	sd	a0, -0x100(s0)
80208e34: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80208e36: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80208e3a: a3 0f b4 f0  	sb	a1, -0xe1(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
80208e3e: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80208e42: 23 07 b4 f2  	sb	a1, -0xd2(s0)
80208e46: 89 45        	li	a1, 0x2
; pub fn fence(order: Ordering) {
80208e48: a3 07 b4 f2  	sb	a1, -0xd1(s0)
80208e4c: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         let ptr = self.ptr.as_ptr();
80208e50: 08 61        	ld	a0, 0x0(a0)
80208e52: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80208e56: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         self.pointer as *mut T
80208e5a: 23 3c a4 f6  	sd	a0, -0x88(s0)
80208e5e: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self as _
80208e62: 23 34 a4 f8  	sd	a0, -0x78(s0)
80208e66: fd 55        	li	a1, -0x1
;         if is_dangling(ptr) {
80208e68: 63 0a b5 04  	beq	a0, a1, 0x80208ebc <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E+0x94>
80208e6c: 09 a0        	j	0x80208e6e <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E+0x46>
80208e6e: 03 35 84 f0  	ld	a0, -0xf8(s0)
;             Some(unsafe { WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak } })
80208e72: 93 05 85 00  	addi	a1, a0, 0x8
80208e76: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80208e7a: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80208e7e: 83 35 84 f5  	ld	a1, -0xa8(s0)
80208e82: 03 35 04 f6  	ld	a0, -0xa0(s0)
80208e86: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80208e8a: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         let inner = if let Some(inner) = self.inner() { inner } else { return };
80208e8e: 03 35 04 f3  	ld	a0, -0xd0(s0)
80208e92: 23 38 a4 f8  	sd	a0, -0x70(s0)
80208e96: 83 35 84 f3  	ld	a1, -0xc8(s0)
80208e9a: 23 3c b4 f8  	sd	a1, -0x68(s0)
; atomic_int_ptr_sized! {
80208e9e: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208ea2: 23 34 a4 fa  	sd	a0, -0x58(s0)
80208ea6: fd 55        	li	a1, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
80208ea8: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
80208eac: 23 38 a4 fa  	sd	a0, -0x50(s0)
80208eb0: 03 35 04 fb  	ld	a0, -0x50(s0)
80208eb4: 85 45        	li	a1, 0x1
;         if inner.weak.fetch_sub(1, Release) == 1 {
80208eb6: 63 04 b5 00  	beq	a0, a1, 0x80208ebe <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E+0x96>
80208eba: 85 a0        	j	0x80208f1a <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E+0xf2>
;     }
80208ebc: 8d a0        	j	0x80208f1e <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E+0xf6>
80208ebe: 83 35 04 f0  	ld	a1, -0x100(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
80208ec2: 0f 00 30 02  	fence	r, rw
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208ec6: 13 85 85 00  	addi	a0, a1, 0x8
80208eca: 90 61        	ld	a2, 0x0(a1)
80208ecc: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80208ed0: 23 30 c4 f4  	sd	a2, -0xc0(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208ed4: 8c 61        	ld	a1, 0x0(a1)
80208ed6: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self.pointer as *mut T
80208eda: 23 34 b4 fc  	sd	a1, -0x38(s0)
80208ede: 93 05 80 13  	li	a1, 0x138
;     unsafe { intrinsics::size_of_val(val) }
80208ee2: 23 38 b4 fc  	sd	a1, -0x30(s0)
80208ee6: 03 36 04 fd  	ld	a2, -0x30(s0)
80208eea: 23 3c c4 fc  	sd	a2, -0x28(s0)
80208eee: a1 45        	li	a1, 0x8
;     unsafe { intrinsics::min_align_of_val(val) }
80208ef0: 23 30 b4 fe  	sd	a1, -0x20(s0)
80208ef4: 83 35 04 fe  	ld	a1, -0x20(s0)
80208ef8: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80208efc: 23 38 c4 f4  	sd	a2, -0xb0(s0)
80208f00: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208f04: 83 35 04 f4  	ld	a1, -0xc0(s0)
80208f08: 03 36 84 f4  	ld	a2, -0xb8(s0)
80208f0c: 83 36 04 f5  	ld	a3, -0xb0(s0)
80208f10: 97 20 00 00  	auipc	ra, 0x2
80208f14: e7 80 40 e6  	jalr	-0x19c(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
;         if inner.weak.fetch_sub(1, Release) == 1 {
80208f18: 11 a0        	j	0x80208f1c <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E+0xf4>
80208f1a: 09 a0        	j	0x80208f1c <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E+0xf4>
;     }
80208f1c: 09 a0        	j	0x80208f1e <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h44c14ee9ff4a2119E+0xf6>
80208f1e: ee 70        	ld	ra, 0xf8(sp)
80208f20: 4e 74        	ld	s0, 0xf0(sp)
;     }
80208f22: 11 61        	addi	sp, sp, 0x100
80208f24: 82 80        	ret

0000000080208f26 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E>:
;     fn drop(&mut self) {
80208f26: 11 71        	addi	sp, sp, -0x100
80208f28: 86 fd        	sd	ra, 0xf8(sp)
80208f2a: a2 f9        	sd	s0, 0xf0(sp)
80208f2c: 00 02        	addi	s0, sp, 0x100
80208f2e: 23 30 a4 f0  	sd	a0, -0x100(s0)
80208f32: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80208f34: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80208f38: a3 0f b4 f0  	sb	a1, -0xe1(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
80208f3c: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80208f40: 23 07 b4 f2  	sb	a1, -0xd2(s0)
80208f44: 89 45        	li	a1, 0x2
; pub fn fence(order: Ordering) {
80208f46: a3 07 b4 f2  	sb	a1, -0xd1(s0)
80208f4a: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         let ptr = self.ptr.as_ptr();
80208f4e: 08 61        	ld	a0, 0x0(a0)
80208f50: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80208f54: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         self.pointer as *mut T
80208f58: 23 3c a4 f6  	sd	a0, -0x88(s0)
80208f5c: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self as _
80208f60: 23 34 a4 f8  	sd	a0, -0x78(s0)
80208f64: fd 55        	li	a1, -0x1
;         if is_dangling(ptr) {
80208f66: 63 0a b5 04  	beq	a0, a1, 0x80208fba <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E+0x94>
80208f6a: 09 a0        	j	0x80208f6c <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E+0x46>
80208f6c: 03 35 84 f0  	ld	a0, -0xf8(s0)
;             Some(unsafe { WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak } })
80208f70: 93 05 85 00  	addi	a1, a0, 0x8
80208f74: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80208f78: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80208f7c: 83 35 84 f5  	ld	a1, -0xa8(s0)
80208f80: 03 35 04 f6  	ld	a0, -0xa0(s0)
80208f84: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80208f88: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         let inner = if let Some(inner) = self.inner() { inner } else { return };
80208f8c: 03 35 04 f3  	ld	a0, -0xd0(s0)
80208f90: 23 38 a4 f8  	sd	a0, -0x70(s0)
80208f94: 83 35 84 f3  	ld	a1, -0xc8(s0)
80208f98: 23 3c b4 f8  	sd	a1, -0x68(s0)
; atomic_int_ptr_sized! {
80208f9c: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80208fa0: 23 34 a4 fa  	sd	a0, -0x58(s0)
80208fa4: fd 55        	li	a1, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
80208fa6: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
80208faa: 23 38 a4 fa  	sd	a0, -0x50(s0)
80208fae: 03 35 04 fb  	ld	a0, -0x50(s0)
80208fb2: 85 45        	li	a1, 0x1
;         if inner.weak.fetch_sub(1, Release) == 1 {
80208fb4: 63 04 b5 00  	beq	a0, a1, 0x80208fbc <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E+0x96>
80208fb8: 85 a0        	j	0x80209018 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E+0xf2>
;     }
80208fba: 8d a0        	j	0x8020901c <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E+0xf6>
80208fbc: 83 35 04 f0  	ld	a1, -0x100(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
80208fc0: 0f 00 30 02  	fence	r, rw
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208fc4: 13 85 85 00  	addi	a0, a1, 0x8
80208fc8: 90 61        	ld	a2, 0x0(a1)
80208fca: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80208fce: 23 30 c4 f4  	sd	a2, -0xc0(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80208fd2: 8c 61        	ld	a1, 0x0(a1)
80208fd4: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self.pointer as *mut T
80208fd8: 23 34 b4 fc  	sd	a1, -0x38(s0)
80208fdc: 93 05 80 13  	li	a1, 0x138
;     unsafe { intrinsics::size_of_val(val) }
80208fe0: 23 38 b4 fc  	sd	a1, -0x30(s0)
80208fe4: 03 36 04 fd  	ld	a2, -0x30(s0)
80208fe8: 23 3c c4 fc  	sd	a2, -0x28(s0)
80208fec: a1 45        	li	a1, 0x8
;     unsafe { intrinsics::min_align_of_val(val) }
80208fee: 23 30 b4 fe  	sd	a1, -0x20(s0)
80208ff2: 83 35 04 fe  	ld	a1, -0x20(s0)
80208ff6: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80208ffa: 23 38 c4 f4  	sd	a2, -0xb0(s0)
80208ffe: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80209002: 83 35 04 f4  	ld	a1, -0xc0(s0)
80209006: 03 36 84 f4  	ld	a2, -0xb8(s0)
8020900a: 83 36 04 f5  	ld	a3, -0xb0(s0)
8020900e: 97 10 02 00  	auipc	ra, 0x21
80209012: e7 80 c0 62  	jalr	0x62c(ra) <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9108b7cd150cf04bE>
;         if inner.weak.fetch_sub(1, Release) == 1 {
80209016: 11 a0        	j	0x8020901a <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E+0xf4>
80209018: 09 a0        	j	0x8020901a <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E+0xf4>
;     }
8020901a: 09 a0        	j	0x8020901c <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h548e27941fe66bc8E+0xf6>
8020901c: ee 70        	ld	ra, 0xf8(sp)
8020901e: 4e 74        	ld	s0, 0xf0(sp)
;     }
80209020: 11 61        	addi	sp, sp, 0x100
80209022: 82 80        	ret

0000000080209024 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E>:
;     fn drop(&mut self) {
80209024: 11 71        	addi	sp, sp, -0x100
80209026: 86 fd        	sd	ra, 0xf8(sp)
80209028: a2 f9        	sd	s0, 0xf0(sp)
8020902a: 00 02        	addi	s0, sp, 0x100
8020902c: 23 30 a4 f0  	sd	a0, -0x100(s0)
80209030: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80209032: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80209036: a3 0f b4 f0  	sb	a1, -0xe1(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8020903a: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8020903e: 23 07 b4 f2  	sb	a1, -0xd2(s0)
80209042: 89 45        	li	a1, 0x2
; pub fn fence(order: Ordering) {
80209044: a3 07 b4 f2  	sb	a1, -0xd1(s0)
80209048: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         let ptr = self.ptr.as_ptr();
8020904c: 08 61        	ld	a0, 0x0(a0)
8020904e: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80209052: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         self.pointer as *mut T
80209056: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020905a: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self as _
8020905e: 23 34 a4 f8  	sd	a0, -0x78(s0)
80209062: fd 55        	li	a1, -0x1
;         if is_dangling(ptr) {
80209064: 63 0a b5 04  	beq	a0, a1, 0x802090b8 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E+0x94>
80209068: 09 a0        	j	0x8020906a <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E+0x46>
8020906a: 03 35 84 f0  	ld	a0, -0xf8(s0)
;             Some(unsafe { WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak } })
8020906e: 93 05 85 00  	addi	a1, a0, 0x8
80209072: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80209076: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8020907a: 83 35 84 f5  	ld	a1, -0xa8(s0)
8020907e: 03 35 04 f6  	ld	a0, -0xa0(s0)
80209082: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80209086: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         let inner = if let Some(inner) = self.inner() { inner } else { return };
8020908a: 03 35 04 f3  	ld	a0, -0xd0(s0)
8020908e: 23 38 a4 f8  	sd	a0, -0x70(s0)
80209092: 83 35 84 f3  	ld	a1, -0xc8(s0)
80209096: 23 3c b4 f8  	sd	a1, -0x68(s0)
; atomic_int_ptr_sized! {
8020909a: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8020909e: 23 34 a4 fa  	sd	a0, -0x58(s0)
802090a2: fd 55        	li	a1, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
802090a4: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
802090a8: 23 38 a4 fa  	sd	a0, -0x50(s0)
802090ac: 03 35 04 fb  	ld	a0, -0x50(s0)
802090b0: 85 45        	li	a1, 0x1
;         if inner.weak.fetch_sub(1, Release) == 1 {
802090b2: 63 04 b5 00  	beq	a0, a1, 0x802090ba <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E+0x96>
802090b6: 85 a0        	j	0x80209116 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E+0xf2>
;     }
802090b8: 8d a0        	j	0x8020911a <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E+0xf6>
802090ba: 83 35 04 f0  	ld	a1, -0x100(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
802090be: 0f 00 30 02  	fence	r, rw
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
802090c2: 13 85 85 00  	addi	a0, a1, 0x8
802090c6: 90 61        	ld	a2, 0x0(a1)
802090c8: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
802090cc: 23 30 c4 f4  	sd	a2, -0xc0(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
802090d0: 8c 61        	ld	a1, 0x0(a1)
802090d2: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self.pointer as *mut T
802090d6: 23 34 b4 fc  	sd	a1, -0x38(s0)
802090da: 93 05 80 05  	li	a1, 0x58
;     unsafe { intrinsics::size_of_val(val) }
802090de: 23 38 b4 fc  	sd	a1, -0x30(s0)
802090e2: 03 36 04 fd  	ld	a2, -0x30(s0)
802090e6: 23 3c c4 fc  	sd	a2, -0x28(s0)
802090ea: a1 45        	li	a1, 0x8
;     unsafe { intrinsics::min_align_of_val(val) }
802090ec: 23 30 b4 fe  	sd	a1, -0x20(s0)
802090f0: 83 35 04 fe  	ld	a1, -0x20(s0)
802090f4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
802090f8: 23 38 c4 f4  	sd	a2, -0xb0(s0)
802090fc: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
80209100: 83 35 04 f4  	ld	a1, -0xc0(s0)
80209104: 03 36 84 f4  	ld	a2, -0xb8(s0)
80209108: 83 36 04 f5  	ld	a3, -0xb0(s0)
8020910c: 97 10 02 00  	auipc	ra, 0x21
80209110: e7 80 e0 52  	jalr	0x52e(ra) <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9108b7cd150cf04bE>
;         if inner.weak.fetch_sub(1, Release) == 1 {
80209114: 11 a0        	j	0x80209118 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E+0xf4>
80209116: 09 a0        	j	0x80209118 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E+0xf4>
;     }
80209118: 09 a0        	j	0x8020911a <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7b6cc651978670d0E+0xf6>
8020911a: ee 70        	ld	ra, 0xf8(sp)
8020911c: 4e 74        	ld	s0, 0xf0(sp)
;     }
8020911e: 11 61        	addi	sp, sp, 0x100
80209120: 82 80        	ret

0000000080209122 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E>:
;     fn drop(&mut self) {
80209122: 11 71        	addi	sp, sp, -0x100
80209124: 86 fd        	sd	ra, 0xf8(sp)
80209126: a2 f9        	sd	s0, 0xf0(sp)
80209128: 00 02        	addi	s0, sp, 0x100
8020912a: 23 30 a4 f0  	sd	a0, -0x100(s0)
8020912e: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
80209130: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80209134: a3 0f b4 f0  	sb	a1, -0xe1(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
80209138: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8020913c: 23 07 b4 f2  	sb	a1, -0xd2(s0)
80209140: 89 45        	li	a1, 0x2
; pub fn fence(order: Ordering) {
80209142: a3 07 b4 f2  	sb	a1, -0xd1(s0)
80209146: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         let ptr = self.ptr.as_ptr();
8020914a: 08 61        	ld	a0, 0x0(a0)
8020914c: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80209150: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         self.pointer as *mut T
80209154: 23 3c a4 f6  	sd	a0, -0x88(s0)
80209158: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self as _
8020915c: 23 34 a4 f8  	sd	a0, -0x78(s0)
80209160: fd 55        	li	a1, -0x1
;         if is_dangling(ptr) {
80209162: 63 0a b5 04  	beq	a0, a1, 0x802091b6 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E+0x94>
80209166: 09 a0        	j	0x80209168 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E+0x46>
80209168: 03 35 84 f0  	ld	a0, -0xf8(s0)
;             Some(unsafe { WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak } })
8020916c: 93 05 85 00  	addi	a1, a0, 0x8
80209170: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80209174: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80209178: 83 35 84 f5  	ld	a1, -0xa8(s0)
8020917c: 03 35 04 f6  	ld	a0, -0xa0(s0)
80209180: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80209184: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         let inner = if let Some(inner) = self.inner() { inner } else { return };
80209188: 03 35 04 f3  	ld	a0, -0xd0(s0)
8020918c: 23 38 a4 f8  	sd	a0, -0x70(s0)
80209190: 83 35 84 f3  	ld	a1, -0xc8(s0)
80209194: 23 3c b4 f8  	sd	a1, -0x68(s0)
; atomic_int_ptr_sized! {
80209198: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8020919c: 23 34 a4 fa  	sd	a0, -0x58(s0)
802091a0: fd 55        	li	a1, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
802091a2: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
802091a6: 23 38 a4 fa  	sd	a0, -0x50(s0)
802091aa: 03 35 04 fb  	ld	a0, -0x50(s0)
802091ae: 85 45        	li	a1, 0x1
;         if inner.weak.fetch_sub(1, Release) == 1 {
802091b0: 63 04 b5 00  	beq	a0, a1, 0x802091b8 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E+0x96>
802091b4: 85 a0        	j	0x80209214 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E+0xf2>
;     }
802091b6: 8d a0        	j	0x80209218 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E+0xf6>
802091b8: 83 35 04 f0  	ld	a1, -0x100(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
802091bc: 0f 00 30 02  	fence	r, rw
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
802091c0: 13 85 85 00  	addi	a0, a1, 0x8
802091c4: 90 61        	ld	a2, 0x0(a1)
802091c6: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
802091ca: 23 30 c4 f4  	sd	a2, -0xc0(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
802091ce: 8c 61        	ld	a1, 0x0(a1)
802091d0: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self.pointer as *mut T
802091d4: 23 34 b4 fc  	sd	a1, -0x38(s0)
802091d8: 93 05 80 03  	li	a1, 0x38
;     unsafe { intrinsics::size_of_val(val) }
802091dc: 23 38 b4 fc  	sd	a1, -0x30(s0)
802091e0: 03 36 04 fd  	ld	a2, -0x30(s0)
802091e4: 23 3c c4 fc  	sd	a2, -0x28(s0)
802091e8: a1 45        	li	a1, 0x8
;     unsafe { intrinsics::min_align_of_val(val) }
802091ea: 23 30 b4 fe  	sd	a1, -0x20(s0)
802091ee: 83 35 04 fe  	ld	a1, -0x20(s0)
802091f2: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
802091f6: 23 38 c4 f4  	sd	a2, -0xb0(s0)
802091fa: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
802091fe: 83 35 04 f4  	ld	a1, -0xc0(s0)
80209202: 03 36 84 f4  	ld	a2, -0xb8(s0)
80209206: 83 36 04 f5  	ld	a3, -0xb0(s0)
8020920a: 97 10 02 00  	auipc	ra, 0x21
8020920e: e7 80 00 43  	jalr	0x430(ra) <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9108b7cd150cf04bE>
;         if inner.weak.fetch_sub(1, Release) == 1 {
80209212: 11 a0        	j	0x80209216 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E+0xf4>
80209214: 09 a0        	j	0x80209216 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E+0xf4>
;     }
80209216: 09 a0        	j	0x80209218 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf8b7552aad756c37E+0xf6>
80209218: ee 70        	ld	ra, 0xf8(sp)
8020921a: 4e 74        	ld	s0, 0xf0(sp)
;     }
8020921c: 11 61        	addi	sp, sp, 0x100
8020921e: 82 80        	ret

0000000080209220 <_ZN75_$LT$virtio_drivers..hal..DMA$LT$H$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h575739e0618e9bf1E>:
;     fn drop(&mut self) {
80209220: 31 71        	addi	sp, sp, -0xc0
80209222: 06 fd        	sd	ra, 0xb8(sp)
80209224: 22 f9        	sd	s0, 0xb0(sp)
80209226: 80 01        	addi	s0, sp, 0xc0
80209228: aa 85        	mv	a1, a0
8020922a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let err = H::dma_dealloc(self.paddr as usize, self.pages as usize);
8020922e: 88 61        	ld	a0, 0x0(a1)
80209230: 8c 65        	ld	a1, 0x8(a1)
80209232: 97 b0 00 00  	auipc	ra, 0xb
80209236: e7 80 60 1b  	jalr	0x1b6(ra) <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$11dma_dealloc17hed7c28653e7496eaE>
8020923a: 23 2e a4 f4  	sw	a0, -0xa4(s0)
8020923e: 13 05 c4 f5  	addi	a0, s0, -0xa4
;         assert_eq!(err, 0, "failed to deallocate DMA");
80209242: 23 30 a4 f6  	sd	a0, -0xa0(s0)

0000000080209246 <.Lpcrel_hi4>:
80209246: 17 a5 02 00  	auipc	a0, 0x2a
8020924a: 13 05 65 55  	addi	a0, a0, 0x556
8020924e: 23 34 a4 f6  	sd	a0, -0x98(s0)
80209252: 03 35 04 f6  	ld	a0, -0xa0(s0)
80209256: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8020925a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020925e: 83 35 84 f6  	ld	a1, -0x98(s0)
80209262: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80209266: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020926a: 08 41        	lw	a0, 0x0(a0)
8020926c: 8c 41        	lw	a1, 0x0(a1)
8020926e: 63 09 b5 06  	beq	a0, a1, 0x802092e0 <.Lpcrel_hi6+0x14>
80209272: 09 a0        	j	0x80209274 <.Lpcrel_hi4+0x2e>
80209274: 01 45        	li	a0, 0x0
;         assert_eq!(err, 0, "failed to deallocate DMA");
80209276: a3 0b a4 f6  	sb	a0, -0x89(s0)

000000008020927a <.Lpcrel_hi5>:
8020927a: 17 b5 02 00  	auipc	a0, 0x2b
8020927e: 93 05 65 76  	addi	a1, a0, 0x766
80209282: 13 05 84 fa  	addi	a0, s0, -0x58
80209286: 05 46        	li	a2, 0x1
80209288: 97 e0 ff ff  	auipc	ra, 0xffffe
8020928c: e7 80 c0 12  	jalr	0x12c(ra) <ekernel+0xffcba3b4>
80209290: 83 35 84 f4  	ld	a1, -0xb8(s0)
80209294: 03 36 04 f5  	ld	a2, -0xb0(s0)
80209298: 03 35 04 fd  	ld	a0, -0x30(s0)
8020929c: 23 30 a4 fa  	sd	a0, -0x60(s0)
802092a0: 03 35 84 fc  	ld	a0, -0x38(s0)
802092a4: 23 3c a4 f8  	sd	a0, -0x68(s0)
802092a8: 03 35 04 fc  	ld	a0, -0x40(s0)
802092ac: 23 38 a4 f8  	sd	a0, -0x70(s0)
802092b0: 03 35 84 fb  	ld	a0, -0x48(s0)
802092b4: 23 34 a4 f8  	sd	a0, -0x78(s0)
802092b8: 03 35 04 fb  	ld	a0, -0x50(s0)
802092bc: 23 30 a4 f8  	sd	a0, -0x80(s0)
802092c0: 03 35 84 fa  	ld	a0, -0x58(s0)
802092c4: 23 3c a4 f6  	sd	a0, -0x88(s0)
802092c8: 03 45 74 f7  	lbu	a0, -0x89(s0)

00000000802092cc <.Lpcrel_hi6>:
802092cc: 97 b6 02 00  	auipc	a3, 0x2b
802092d0: 13 87 c6 77  	addi	a4, a3, 0x77c
802092d4: 93 06 84 f7  	addi	a3, s0, -0x88
802092d8: 97 c0 00 00  	auipc	ra, 0xc
802092dc: e7 80 e0 28  	jalr	0x28e(ra) <_ZN4core9panicking13assert_failed17hd077154fa942e831E>
802092e0: ea 70        	ld	ra, 0xb8(sp)
802092e2: 4a 74        	ld	s0, 0xb0(sp)
;     }
802092e4: 29 61        	addi	sp, sp, 0xc0
802092e6: 82 80        	ret

00000000802092e8 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h18a18da2b8892c9eE>:
;     fn drop(&mut self) {
802092e8: 5d 71        	addi	sp, sp, -0x50
802092ea: 86 e4        	sd	ra, 0x48(sp)
802092ec: a2 e0        	sd	s0, 0x40(sp)
802092ee: 80 08        	addi	s0, sp, 0x50
802092f0: aa 85        	mv	a1, a0
802092f2: 23 38 b4 fa  	sd	a1, -0x50(s0)
802092f6: 23 38 b4 fc  	sd	a1, -0x30(s0)
802092fa: 13 05 84 fb  	addi	a0, s0, -0x48
;         if let Some((ptr, layout)) = self.current_memory() {
802092fe: 97 60 00 00  	auipc	ra, 0x6
80209302: e7 80 20 03  	jalr	0x32(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h12407fc33bda1e47E>
80209306: 03 35 04 fc  	ld	a0, -0x40(s0)
8020930a: 15 c5        	beqz	a0, 0x80209336 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h18a18da2b8892c9eE+0x4e>
8020930c: 09 a0        	j	0x8020930e <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h18a18da2b8892c9eE+0x26>
8020930e: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if let Some((ptr, layout)) = self.current_memory() {
80209312: 83 35 84 fb  	ld	a1, -0x48(s0)
80209316: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020931a: 03 36 04 fc  	ld	a2, -0x40(s0)
8020931e: 83 36 84 fc  	ld	a3, -0x38(s0)
80209322: 23 30 c4 fe  	sd	a2, -0x20(s0)
80209326: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) }
8020932a: 41 05        	addi	a0, a0, 0x10
8020932c: 97 20 00 00  	auipc	ra, 0x2
80209330: e7 80 80 a4  	jalr	-0x5b8(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
;         if let Some((ptr, layout)) = self.current_memory() {
80209334: 09 a0        	j	0x80209336 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h18a18da2b8892c9eE+0x4e>
80209336: a6 60        	ld	ra, 0x48(sp)
80209338: 06 64        	ld	s0, 0x40(sp)
;     }
8020933a: 61 61        	addi	sp, sp, 0x50
8020933c: 82 80        	ret

000000008020933e <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h233e516e552636a8E>:
;     fn drop(&mut self) {
8020933e: 5d 71        	addi	sp, sp, -0x50
80209340: 86 e4        	sd	ra, 0x48(sp)
80209342: a2 e0        	sd	s0, 0x40(sp)
80209344: 80 08        	addi	s0, sp, 0x50
80209346: aa 85        	mv	a1, a0
80209348: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020934c: 23 38 b4 fc  	sd	a1, -0x30(s0)
80209350: 13 05 84 fb  	addi	a0, s0, -0x48
;         if let Some((ptr, layout)) = self.current_memory() {
80209354: 97 00 02 00  	auipc	ra, 0x20
80209358: e7 80 e0 45  	jalr	0x45e(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h19a61df1585953bfE>
8020935c: 03 35 04 fc  	ld	a0, -0x40(s0)
80209360: 15 c5        	beqz	a0, 0x8020938c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h233e516e552636a8E+0x4e>
80209362: 09 a0        	j	0x80209364 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h233e516e552636a8E+0x26>
80209364: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if let Some((ptr, layout)) = self.current_memory() {
80209368: 83 35 84 fb  	ld	a1, -0x48(s0)
8020936c: 23 3c b4 fc  	sd	a1, -0x28(s0)
80209370: 03 36 04 fc  	ld	a2, -0x40(s0)
80209374: 83 36 84 fc  	ld	a3, -0x38(s0)
80209378: 23 30 c4 fe  	sd	a2, -0x20(s0)
8020937c: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) }
80209380: 41 05        	addi	a0, a0, 0x10
80209382: 97 20 00 00  	auipc	ra, 0x2
80209386: e7 80 20 9f  	jalr	-0x60e(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
;         if let Some((ptr, layout)) = self.current_memory() {
8020938a: 09 a0        	j	0x8020938c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h233e516e552636a8E+0x4e>
8020938c: a6 60        	ld	ra, 0x48(sp)
8020938e: 06 64        	ld	s0, 0x40(sp)
;     }
80209390: 61 61        	addi	sp, sp, 0x50
80209392: 82 80        	ret

0000000080209394 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7f12684349e9ef5dE>:
;     fn drop(&mut self) {
80209394: 5d 71        	addi	sp, sp, -0x50
80209396: 86 e4        	sd	ra, 0x48(sp)
80209398: a2 e0        	sd	s0, 0x40(sp)
8020939a: 80 08        	addi	s0, sp, 0x50
8020939c: aa 85        	mv	a1, a0
8020939e: 23 38 b4 fa  	sd	a1, -0x50(s0)
802093a2: 23 38 b4 fc  	sd	a1, -0x30(s0)
802093a6: 13 05 84 fb  	addi	a0, s0, -0x48
;         if let Some((ptr, layout)) = self.current_memory() {
802093aa: 97 60 00 00  	auipc	ra, 0x6
802093ae: e7 80 80 01  	jalr	0x18(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h5d04944e220ce5f4E>
802093b2: 03 35 04 fc  	ld	a0, -0x40(s0)
802093b6: 15 c5        	beqz	a0, 0x802093e2 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7f12684349e9ef5dE+0x4e>
802093b8: 09 a0        	j	0x802093ba <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7f12684349e9ef5dE+0x26>
802093ba: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if let Some((ptr, layout)) = self.current_memory() {
802093be: 83 35 84 fb  	ld	a1, -0x48(s0)
802093c2: 23 3c b4 fc  	sd	a1, -0x28(s0)
802093c6: 03 36 04 fc  	ld	a2, -0x40(s0)
802093ca: 83 36 84 fc  	ld	a3, -0x38(s0)
802093ce: 23 30 c4 fe  	sd	a2, -0x20(s0)
802093d2: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) }
802093d6: 41 05        	addi	a0, a0, 0x10
802093d8: 97 20 00 00  	auipc	ra, 0x2
802093dc: e7 80 c0 99  	jalr	-0x664(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
;         if let Some((ptr, layout)) = self.current_memory() {
802093e0: 09 a0        	j	0x802093e2 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7f12684349e9ef5dE+0x4e>
802093e2: a6 60        	ld	ra, 0x48(sp)
802093e4: 06 64        	ld	s0, 0x40(sp)
;     }
802093e6: 61 61        	addi	sp, sp, 0x50
802093e8: 82 80        	ret

00000000802093ea <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h961ad5c695549214E>:
;     fn drop(&mut self) {
802093ea: 5d 71        	addi	sp, sp, -0x50
802093ec: 86 e4        	sd	ra, 0x48(sp)
802093ee: a2 e0        	sd	s0, 0x40(sp)
802093f0: 80 08        	addi	s0, sp, 0x50
802093f2: aa 85        	mv	a1, a0
802093f4: 23 38 b4 fa  	sd	a1, -0x50(s0)
802093f8: 23 38 b4 fc  	sd	a1, -0x30(s0)
802093fc: 13 05 84 fb  	addi	a0, s0, -0x48
;         if let Some((ptr, layout)) = self.current_memory() {
80209400: 97 60 00 00  	auipc	ra, 0x6
80209404: e7 80 00 05  	jalr	0x50(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h87d39b9df75b440aE>
80209408: 03 35 04 fc  	ld	a0, -0x40(s0)
8020940c: 15 c5        	beqz	a0, 0x80209438 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h961ad5c695549214E+0x4e>
8020940e: 09 a0        	j	0x80209410 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h961ad5c695549214E+0x26>
80209410: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if let Some((ptr, layout)) = self.current_memory() {
80209414: 83 35 84 fb  	ld	a1, -0x48(s0)
80209418: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020941c: 03 36 04 fc  	ld	a2, -0x40(s0)
80209420: 83 36 84 fc  	ld	a3, -0x38(s0)
80209424: 23 30 c4 fe  	sd	a2, -0x20(s0)
80209428: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) }
8020942c: 41 05        	addi	a0, a0, 0x10
8020942e: 97 20 00 00  	auipc	ra, 0x2
80209432: e7 80 60 94  	jalr	-0x6ba(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
;         if let Some((ptr, layout)) = self.current_memory() {
80209436: 09 a0        	j	0x80209438 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h961ad5c695549214E+0x4e>
80209438: a6 60        	ld	ra, 0x48(sp)
8020943a: 06 64        	ld	s0, 0x40(sp)
;     }
8020943c: 61 61        	addi	sp, sp, 0x50
8020943e: 82 80        	ret

0000000080209440 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd64e7f774ec0ff0fE>:
;     fn drop(&mut self) {
80209440: 5d 71        	addi	sp, sp, -0x50
80209442: 86 e4        	sd	ra, 0x48(sp)
80209444: a2 e0        	sd	s0, 0x40(sp)
80209446: 80 08        	addi	s0, sp, 0x50
80209448: aa 85        	mv	a1, a0
8020944a: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020944e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80209452: 13 05 84 fb  	addi	a0, s0, -0x48
;         if let Some((ptr, layout)) = self.current_memory() {
80209456: 97 60 00 00  	auipc	ra, 0x6
8020945a: e7 80 a0 08  	jalr	0x8a(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17ha26e7f61f3bdc5dbE>
8020945e: 03 35 04 fc  	ld	a0, -0x40(s0)
80209462: 15 c5        	beqz	a0, 0x8020948e <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd64e7f774ec0ff0fE+0x4e>
80209464: 09 a0        	j	0x80209466 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd64e7f774ec0ff0fE+0x26>
80209466: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if let Some((ptr, layout)) = self.current_memory() {
8020946a: 83 35 84 fb  	ld	a1, -0x48(s0)
8020946e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80209472: 03 36 04 fc  	ld	a2, -0x40(s0)
80209476: 83 36 84 fc  	ld	a3, -0x38(s0)
8020947a: 23 30 c4 fe  	sd	a2, -0x20(s0)
8020947e: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) }
80209482: 41 05        	addi	a0, a0, 0x10
80209484: 97 20 00 00  	auipc	ra, 0x2
80209488: e7 80 00 8f  	jalr	-0x710(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
;         if let Some((ptr, layout)) = self.current_memory() {
8020948c: 09 a0        	j	0x8020948e <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd64e7f774ec0ff0fE+0x4e>
8020948e: a6 60        	ld	ra, 0x48(sp)
80209490: 06 64        	ld	s0, 0x40(sp)
;     }
80209492: 61 61        	addi	sp, sp, 0x50
80209494: 82 80        	ret

0000000080209496 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd81c64764defc969E>:
;     fn drop(&mut self) {
80209496: 5d 71        	addi	sp, sp, -0x50
80209498: 86 e4        	sd	ra, 0x48(sp)
8020949a: a2 e0        	sd	s0, 0x40(sp)
8020949c: 80 08        	addi	s0, sp, 0x50
8020949e: aa 85        	mv	a1, a0
802094a0: 23 38 b4 fa  	sd	a1, -0x50(s0)
802094a4: 23 38 b4 fc  	sd	a1, -0x30(s0)
802094a8: 13 05 84 fb  	addi	a0, s0, -0x48
;         if let Some((ptr, layout)) = self.current_memory() {
802094ac: 97 60 00 00  	auipc	ra, 0x6
802094b0: e7 80 40 15  	jalr	0x154(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc050dfbb17da6580E>
802094b4: 03 35 04 fc  	ld	a0, -0x40(s0)
802094b8: 15 c5        	beqz	a0, 0x802094e4 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd81c64764defc969E+0x4e>
802094ba: 09 a0        	j	0x802094bc <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd81c64764defc969E+0x26>
802094bc: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if let Some((ptr, layout)) = self.current_memory() {
802094c0: 83 35 84 fb  	ld	a1, -0x48(s0)
802094c4: 23 3c b4 fc  	sd	a1, -0x28(s0)
802094c8: 03 36 04 fc  	ld	a2, -0x40(s0)
802094cc: 83 36 84 fc  	ld	a3, -0x38(s0)
802094d0: 23 30 c4 fe  	sd	a2, -0x20(s0)
802094d4: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) }
802094d8: 41 05        	addi	a0, a0, 0x10
802094da: 97 20 00 00  	auipc	ra, 0x2
802094de: e7 80 a0 89  	jalr	-0x766(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
;         if let Some((ptr, layout)) = self.current_memory() {
802094e2: 09 a0        	j	0x802094e4 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd81c64764defc969E+0x4e>
802094e4: a6 60        	ld	ra, 0x48(sp)
802094e6: 06 64        	ld	s0, 0x40(sp)
;     }
802094e8: 61 61        	addi	sp, sp, 0x50
802094ea: 82 80        	ret

00000000802094ec <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf50b4b308c099762E>:
;     fn drop(&mut self) {
802094ec: 5d 71        	addi	sp, sp, -0x50
802094ee: 86 e4        	sd	ra, 0x48(sp)
802094f0: a2 e0        	sd	s0, 0x40(sp)
802094f2: 80 08        	addi	s0, sp, 0x50
802094f4: aa 85        	mv	a1, a0
802094f6: 23 38 b4 fa  	sd	a1, -0x50(s0)
802094fa: 23 38 b4 fc  	sd	a1, -0x30(s0)
802094fe: 13 05 84 fb  	addi	a0, s0, -0x48
;         if let Some((ptr, layout)) = self.current_memory() {
80209502: 97 60 00 00  	auipc	ra, 0x6
80209506: e7 80 e0 06  	jalr	0x6e(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hbb42d3bb87dc66aeE>
8020950a: 03 35 04 fc  	ld	a0, -0x40(s0)
8020950e: 15 c5        	beqz	a0, 0x8020953a <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf50b4b308c099762E+0x4e>
80209510: 09 a0        	j	0x80209512 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf50b4b308c099762E+0x26>
80209512: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if let Some((ptr, layout)) = self.current_memory() {
80209516: 83 35 84 fb  	ld	a1, -0x48(s0)
8020951a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020951e: 03 36 04 fc  	ld	a2, -0x40(s0)
80209522: 83 36 84 fc  	ld	a3, -0x38(s0)
80209526: 23 30 c4 fe  	sd	a2, -0x20(s0)
8020952a: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) }
8020952e: 41 05        	addi	a0, a0, 0x10
80209530: 97 20 00 00  	auipc	ra, 0x2
80209534: e7 80 40 84  	jalr	-0x7bc(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
;         if let Some((ptr, layout)) = self.current_memory() {
80209538: 09 a0        	j	0x8020953a <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf50b4b308c099762E+0x4e>
8020953a: a6 60        	ld	ra, 0x48(sp)
8020953c: 06 64        	ld	s0, 0x40(sp)
;     }
8020953e: 61 61        	addi	sp, sp, 0x50
80209540: 82 80        	ret

0000000080209542 <_ZN86_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h93753afec8760ea8E>:
;     fn drop(&mut self) {
80209542: 01 11        	addi	sp, sp, -0x20
80209544: 06 ec        	sd	ra, 0x18(sp)
80209546: 22 e8        	sd	s0, 0x10(sp)
80209548: 00 10        	addi	s0, sp, 0x20
8020954a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         let guard = DropGuard(self);
8020954e: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             ptr::drop_in_place(guard.0.as_raw_mut_slice());
80209552: 03 35 04 fe  	ld	a0, -0x20(s0)
80209556: 97 a0 ff ff  	auipc	ra, 0xffffa
8020955a: e7 80 00 01  	jalr	0x10(ra) <ekernel+0xffcb6566>
8020955e: 97 f0 ff ff  	auipc	ra, 0xfffff
80209562: e7 80 c0 a8  	jalr	-0x574(ra) <ekernel+0xffcbafea>
80209566: 13 05 04 fe  	addi	a0, s0, -0x20
;     }
8020956a: 97 e0 ff ff  	auipc	ra, 0xffffe
8020956e: e7 80 a0 6b  	jalr	0x6ba(ra) <ekernel+0xffcbac24>
80209572: e2 60        	ld	ra, 0x18(sp)
80209574: 42 64        	ld	s0, 0x10(sp)
80209576: 05 61        	addi	sp, sp, 0x20
80209578: 82 80        	ret

000000008020957a <_ZN94_$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h670a2b1674358ec6E>:
;     fn drop(&mut self) {
8020957a: 59 71        	addi	sp, sp, -0x70
8020957c: 86 f4        	sd	ra, 0x68(sp)
8020957e: a2 f0        	sd	s0, 0x60(sp)
80209580: 80 18        	addi	s0, sp, 0x70
80209582: aa 85        	mv	a1, a0
80209584: 23 34 b4 fc  	sd	a1, -0x38(s0)
80209588: 13 05 84 f9  	addi	a0, s0, -0x68
;         let (front, back) = self.as_mut_slices();
8020958c: 97 70 ff ff  	auipc	ra, 0xffff7
80209590: e7 80 80 e4  	jalr	-0x1b8(ra) <ekernel+0xffcb33d4>
80209594: 03 35 84 f9  	ld	a0, -0x68(s0)
80209598: 83 35 04 fa  	ld	a1, -0x60(s0)
8020959c: 23 38 a4 fc  	sd	a0, -0x30(s0)
802095a0: 23 3c b4 fc  	sd	a1, -0x28(s0)
802095a4: 83 36 84 fa  	ld	a3, -0x58(s0)
802095a8: 03 36 04 fb  	ld	a2, -0x50(s0)
802095ac: 23 30 d4 fe  	sd	a3, -0x20(s0)
802095b0: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             let _back_dropper = Dropper(back);
802095b4: 23 3c d4 fa  	sd	a3, -0x48(s0)
802095b8: 23 30 c4 fc  	sd	a2, -0x40(s0)
;             ptr::drop_in_place(front);
802095bc: 97 f0 ff ff  	auipc	ra, 0xfffff
802095c0: e7 80 40 f9  	jalr	-0x6c(ra) <ekernel+0xffcbb550>
802095c4: 13 05 84 fb  	addi	a0, s0, -0x48
;         }
802095c8: 97 e0 ff ff  	auipc	ra, 0xffffe
802095cc: e7 80 40 69  	jalr	0x694(ra) <ekernel+0xffcbac5c>
802095d0: a6 70        	ld	ra, 0x68(sp)
802095d2: 06 74        	ld	s0, 0x60(sp)
;     }
802095d4: 65 61        	addi	sp, sp, 0x70
802095d6: 82 80        	ret

00000000802095d8 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h03437352b45a32e0E>:
;     fn drop(&mut self) {
802095d8: 71 71        	addi	sp, sp, -0xb0
802095da: 06 f5        	sd	ra, 0xa8(sp)
802095dc: 22 f1        	sd	s0, 0xa0(sp)
802095de: 00 19        	addi	s0, sp, 0xb0
802095e0: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802095e4: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
802095e8: 97 a0 00 00  	auipc	ra, 0xa
802095ec: e7 80 80 16  	jalr	0x168(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h0d38aff749ab5af0E>
802095f0: 3d e1        	bnez	a0, 0x80209656 <.Lpcrel_hi9+0x10>
802095f2: 09 a0        	j	0x802095f4 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h03437352b45a32e0E+0x1c>
802095f4: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
802095f8: 0c 61        	ld	a1, 0x0(a0)
802095fa: 23 30 b4 fc  	sd	a1, -0x40(s0)

00000000802095fe <.Lpcrel_hi7>:
;         Self::new(x, Display::fmt)
802095fe: 17 25 01 00  	auipc	a0, 0x12
80209602: 13 05 65 54  	addi	a0, a0, 0x546
80209606: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020960a: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020960e: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80209612: 83 35 04 fb  	ld	a1, -0x50(s0)
80209616: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
8020961a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020961e: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080209622 <.Lpcrel_hi8>:
80209622: 17 b5 02 00  	auipc	a0, 0x2b
80209626: 93 05 e5 43  	addi	a1, a0, 0x43e
8020962a: 13 05 04 f6  	addi	a0, s0, -0xa0
8020962e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80209632: 93 06 04 f9  	addi	a3, s0, -0x70
80209636: 05 47        	li	a4, 0x1
80209638: 3a 86        	mv	a2, a4
8020963a: 97 e0 ff ff  	auipc	ra, 0xffffe
8020963e: e7 80 e0 ca  	jalr	-0x352(ra) <ekernel+0xffcba2e8>
80209642: 03 35 04 f5  	ld	a0, -0xb0(s0)

0000000080209646 <.Lpcrel_hi9>:
80209646: 97 b5 02 00  	auipc	a1, 0x2b
8020964a: 93 85 a5 42  	addi	a1, a1, 0x42a
8020964e: 97 70 02 00  	auipc	ra, 0x27
80209652: e7 80 a0 b5  	jalr	-0x4a6(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80209656: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
8020965a: 08 61        	ld	a0, 0x0(a0)
8020965c: 41 05        	addi	a0, a0, 0x10
8020965e: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80209660: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
80209664: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80209668: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020966c: 83 35 84 fe  	ld	a1, -0x18(s0)
80209670: 23 30 b4 fe  	sd	a1, -0x20(s0)
80209674: 83 35 04 fe  	ld	a1, -0x20(s0)
80209678: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
8020967a: a3 03 c4 fa  	sb	a2, -0x59(s0)
8020967e: 03 46 74 fa  	lbu	a2, -0x59(s0)
80209682: 97 e0 00 00  	auipc	ra, 0xe
80209686: e7 80 a0 e6  	jalr	-0x196(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
8020968a: aa 70        	ld	ra, 0xa8(sp)
8020968c: 0a 74        	ld	s0, 0xa0(sp)
;     }
8020968e: 4d 61        	addi	sp, sp, 0xb0
80209690: 82 80        	ret

0000000080209692 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2f42c5c687145f08E>:
;     fn drop(&mut self) {
80209692: 71 71        	addi	sp, sp, -0xb0
80209694: 06 f5        	sd	ra, 0xa8(sp)
80209696: 22 f1        	sd	s0, 0xa0(sp)
80209698: 00 19        	addi	s0, sp, 0xb0
8020969a: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020969e: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
802096a2: 97 a0 00 00  	auipc	ra, 0xa
802096a6: e7 80 e0 10  	jalr	0x10e(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h1ce0e32824c23021E>
802096aa: 3d e1        	bnez	a0, 0x80209710 <.Lpcrel_hi12+0x10>
802096ac: 09 a0        	j	0x802096ae <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h2f42c5c687145f08E+0x1c>
802096ae: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
802096b2: 0c 61        	ld	a1, 0x0(a0)
802096b4: 23 30 b4 fc  	sd	a1, -0x40(s0)

00000000802096b8 <.Lpcrel_hi10>:
;         Self::new(x, Display::fmt)
802096b8: 17 25 01 00  	auipc	a0, 0x12
802096bc: 13 05 c5 48  	addi	a0, a0, 0x48c
802096c0: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
802096c4: 23 38 b4 fa  	sd	a1, -0x50(s0)
802096c8: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
802096cc: 83 35 04 fb  	ld	a1, -0x50(s0)
802096d0: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
802096d4: 23 38 b4 f8  	sd	a1, -0x70(s0)
802096d8: 23 3c a4 f8  	sd	a0, -0x68(s0)

00000000802096dc <.Lpcrel_hi11>:
802096dc: 17 b5 02 00  	auipc	a0, 0x2b
802096e0: 93 05 45 38  	addi	a1, a0, 0x384
802096e4: 13 05 04 f6  	addi	a0, s0, -0xa0
802096e8: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802096ec: 93 06 04 f9  	addi	a3, s0, -0x70
802096f0: 05 47        	li	a4, 0x1
802096f2: 3a 86        	mv	a2, a4
802096f4: 97 e0 ff ff  	auipc	ra, 0xffffe
802096f8: e7 80 40 bf  	jalr	-0x40c(ra) <ekernel+0xffcba2e8>
802096fc: 03 35 04 f5  	ld	a0, -0xb0(s0)

0000000080209700 <.Lpcrel_hi12>:
80209700: 97 b5 02 00  	auipc	a1, 0x2b
80209704: 93 85 05 37  	addi	a1, a1, 0x370
80209708: 97 70 02 00  	auipc	ra, 0x27
8020970c: e7 80 00 aa  	jalr	-0x560(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80209710: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209714: 08 61        	ld	a0, 0x0(a0)
80209716: 41 05        	addi	a0, a0, 0x10
80209718: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
8020971a: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
8020971e: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80209722: 23 34 b4 fe  	sd	a1, -0x18(s0)
80209726: 83 35 84 fe  	ld	a1, -0x18(s0)
8020972a: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020972e: 83 35 04 fe  	ld	a1, -0x20(s0)
80209732: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209734: a3 03 c4 fa  	sb	a2, -0x59(s0)
80209738: 03 46 74 fa  	lbu	a2, -0x59(s0)
8020973c: 97 e0 00 00  	auipc	ra, 0xe
80209740: e7 80 00 db  	jalr	-0x250(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
80209744: aa 70        	ld	ra, 0xa8(sp)
80209746: 0a 74        	ld	s0, 0xa0(sp)
;     }
80209748: 4d 61        	addi	sp, sp, 0xb0
8020974a: 82 80        	ret

000000008020974c <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h350f8d410d325037E>:
;     fn drop(&mut self) {
8020974c: 71 71        	addi	sp, sp, -0xb0
8020974e: 06 f5        	sd	ra, 0xa8(sp)
80209750: 22 f1        	sd	s0, 0xa0(sp)
80209752: 00 19        	addi	s0, sp, 0xb0
80209754: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80209758: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
8020975c: 97 a0 00 00  	auipc	ra, 0xa
80209760: e7 80 40 29  	jalr	0x294(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17heb32da5b46e9869cE>
80209764: 3d e1        	bnez	a0, 0x802097ca <.Lpcrel_hi15+0x10>
80209766: 09 a0        	j	0x80209768 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h350f8d410d325037E+0x1c>
80209768: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
8020976c: 0c 61        	ld	a1, 0x0(a0)
8020976e: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080209772 <.Lpcrel_hi13>:
;         Self::new(x, Display::fmt)
80209772: 17 25 01 00  	auipc	a0, 0x12
80209776: 13 05 25 3d  	addi	a0, a0, 0x3d2
8020977a: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8020977e: 23 38 b4 fa  	sd	a1, -0x50(s0)
80209782: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80209786: 83 35 04 fb  	ld	a1, -0x50(s0)
8020978a: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
8020978e: 23 38 b4 f8  	sd	a1, -0x70(s0)
80209792: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080209796 <.Lpcrel_hi14>:
80209796: 17 b5 02 00  	auipc	a0, 0x2b
8020979a: 93 05 a5 2c  	addi	a1, a0, 0x2ca
8020979e: 13 05 04 f6  	addi	a0, s0, -0xa0
802097a2: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802097a6: 93 06 04 f9  	addi	a3, s0, -0x70
802097aa: 05 47        	li	a4, 0x1
802097ac: 3a 86        	mv	a2, a4
802097ae: 97 e0 ff ff  	auipc	ra, 0xffffe
802097b2: e7 80 a0 b3  	jalr	-0x4c6(ra) <ekernel+0xffcba2e8>
802097b6: 03 35 04 f5  	ld	a0, -0xb0(s0)

00000000802097ba <.Lpcrel_hi15>:
802097ba: 97 b5 02 00  	auipc	a1, 0x2b
802097be: 93 85 65 2b  	addi	a1, a1, 0x2b6
802097c2: 97 70 02 00  	auipc	ra, 0x27
802097c6: e7 80 60 9e  	jalr	-0x61a(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
802097ca: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
802097ce: 08 61        	ld	a0, 0x0(a0)
802097d0: 41 05        	addi	a0, a0, 0x10
802097d2: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
802097d4: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
802097d8: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802097dc: 23 34 b4 fe  	sd	a1, -0x18(s0)
802097e0: 83 35 84 fe  	ld	a1, -0x18(s0)
802097e4: 23 30 b4 fe  	sd	a1, -0x20(s0)
802097e8: 83 35 04 fe  	ld	a1, -0x20(s0)
802097ec: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
802097ee: a3 03 c4 fa  	sb	a2, -0x59(s0)
802097f2: 03 46 74 fa  	lbu	a2, -0x59(s0)
802097f6: 97 e0 00 00  	auipc	ra, 0xe
802097fa: e7 80 60 cf  	jalr	-0x30a(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
802097fe: aa 70        	ld	ra, 0xa8(sp)
80209800: 0a 74        	ld	s0, 0xa0(sp)
;     }
80209802: 4d 61        	addi	sp, sp, 0xb0
80209804: 82 80        	ret

0000000080209806 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3b507530d2daf56fE>:
;     fn drop(&mut self) {
80209806: 71 71        	addi	sp, sp, -0xb0
80209808: 06 f5        	sd	ra, 0xa8(sp)
8020980a: 22 f1        	sd	s0, 0xa0(sp)
8020980c: 00 19        	addi	s0, sp, 0xb0
8020980e: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80209812: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209816: 97 a0 00 00  	auipc	ra, 0xa
8020981a: e7 80 a0 29  	jalr	0x29a(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17hf6229c873a249607E>
8020981e: 3d e1        	bnez	a0, 0x80209884 <.Lpcrel_hi18+0x10>
80209820: 09 a0        	j	0x80209822 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3b507530d2daf56fE+0x1c>
80209822: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209826: 0c 61        	ld	a1, 0x0(a0)
80209828: 23 30 b4 fc  	sd	a1, -0x40(s0)

000000008020982c <.Lpcrel_hi16>:
;         Self::new(x, Display::fmt)
8020982c: 17 25 01 00  	auipc	a0, 0x12
80209830: 13 05 85 31  	addi	a0, a0, 0x318
80209834: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80209838: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020983c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80209840: 83 35 04 fb  	ld	a1, -0x50(s0)
80209844: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209848: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020984c: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080209850 <.Lpcrel_hi17>:
80209850: 17 b5 02 00  	auipc	a0, 0x2b
80209854: 93 05 05 21  	addi	a1, a0, 0x210
80209858: 13 05 04 f6  	addi	a0, s0, -0xa0
8020985c: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80209860: 93 06 04 f9  	addi	a3, s0, -0x70
80209864: 05 47        	li	a4, 0x1
80209866: 3a 86        	mv	a2, a4
80209868: 97 e0 ff ff  	auipc	ra, 0xffffe
8020986c: e7 80 00 a8  	jalr	-0x580(ra) <ekernel+0xffcba2e8>
80209870: 03 35 04 f5  	ld	a0, -0xb0(s0)

0000000080209874 <.Lpcrel_hi18>:
80209874: 97 b5 02 00  	auipc	a1, 0x2b
80209878: 93 85 c5 1f  	addi	a1, a1, 0x1fc
8020987c: 97 70 02 00  	auipc	ra, 0x27
80209880: e7 80 c0 92  	jalr	-0x6d4(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80209884: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209888: 08 61        	ld	a0, 0x0(a0)
8020988a: 41 05        	addi	a0, a0, 0x10
8020988c: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
8020988e: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
80209892: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80209896: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020989a: 83 35 84 fe  	ld	a1, -0x18(s0)
8020989e: 23 30 b4 fe  	sd	a1, -0x20(s0)
802098a2: 83 35 04 fe  	ld	a1, -0x20(s0)
802098a6: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
802098a8: a3 03 c4 fa  	sb	a2, -0x59(s0)
802098ac: 03 46 74 fa  	lbu	a2, -0x59(s0)
802098b0: 97 e0 00 00  	auipc	ra, 0xe
802098b4: e7 80 c0 c3  	jalr	-0x3c4(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
802098b8: aa 70        	ld	ra, 0xa8(sp)
802098ba: 0a 74        	ld	s0, 0xa0(sp)
;     }
802098bc: 4d 61        	addi	sp, sp, 0xb0
802098be: 82 80        	ret

00000000802098c0 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h542879920f97e9d9E>:
;     fn drop(&mut self) {
802098c0: 71 71        	addi	sp, sp, -0xb0
802098c2: 06 f5        	sd	ra, 0xa8(sp)
802098c4: 22 f1        	sd	s0, 0xa0(sp)
802098c6: 00 19        	addi	s0, sp, 0xb0
802098c8: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802098cc: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
802098d0: 97 a0 00 00  	auipc	ra, 0xa
802098d4: e7 80 00 06  	jalr	0x60(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17ha48e7fa2bf3416f6E>
802098d8: 3d e1        	bnez	a0, 0x8020993e <.Lpcrel_hi21+0x10>
802098da: 09 a0        	j	0x802098dc <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h542879920f97e9d9E+0x1c>
802098dc: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
802098e0: 0c 61        	ld	a1, 0x0(a0)
802098e2: 23 30 b4 fc  	sd	a1, -0x40(s0)

00000000802098e6 <.Lpcrel_hi19>:
;         Self::new(x, Display::fmt)
802098e6: 17 25 01 00  	auipc	a0, 0x12
802098ea: 13 05 e5 25  	addi	a0, a0, 0x25e
802098ee: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
802098f2: 23 38 b4 fa  	sd	a1, -0x50(s0)
802098f6: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
802098fa: 83 35 04 fb  	ld	a1, -0x50(s0)
802098fe: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209902: 23 38 b4 f8  	sd	a1, -0x70(s0)
80209906: 23 3c a4 f8  	sd	a0, -0x68(s0)

000000008020990a <.Lpcrel_hi20>:
8020990a: 17 b5 02 00  	auipc	a0, 0x2b
8020990e: 93 05 65 15  	addi	a1, a0, 0x156
80209912: 13 05 04 f6  	addi	a0, s0, -0xa0
80209916: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020991a: 93 06 04 f9  	addi	a3, s0, -0x70
8020991e: 05 47        	li	a4, 0x1
80209920: 3a 86        	mv	a2, a4
80209922: 97 e0 ff ff  	auipc	ra, 0xffffe
80209926: e7 80 60 9c  	jalr	-0x63a(ra) <ekernel+0xffcba2e8>
8020992a: 03 35 04 f5  	ld	a0, -0xb0(s0)

000000008020992e <.Lpcrel_hi21>:
8020992e: 97 b5 02 00  	auipc	a1, 0x2b
80209932: 93 85 25 14  	addi	a1, a1, 0x142
80209936: 97 70 02 00  	auipc	ra, 0x27
8020993a: e7 80 20 87  	jalr	-0x78e(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
8020993e: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209942: 08 61        	ld	a0, 0x0(a0)
80209944: 41 05        	addi	a0, a0, 0x10
80209946: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80209948: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
8020994c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80209950: 23 34 b4 fe  	sd	a1, -0x18(s0)
80209954: 83 35 84 fe  	ld	a1, -0x18(s0)
80209958: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020995c: 83 35 04 fe  	ld	a1, -0x20(s0)
80209960: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209962: a3 03 c4 fa  	sb	a2, -0x59(s0)
80209966: 03 46 74 fa  	lbu	a2, -0x59(s0)
8020996a: 97 e0 00 00  	auipc	ra, 0xe
8020996e: e7 80 20 b8  	jalr	-0x47e(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
80209972: aa 70        	ld	ra, 0xa8(sp)
80209974: 0a 74        	ld	s0, 0xa0(sp)
;     }
80209976: 4d 61        	addi	sp, sp, 0xb0
80209978: 82 80        	ret

000000008020997a <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5cbd1855be7c37ceE>:
;     fn drop(&mut self) {
8020997a: 71 71        	addi	sp, sp, -0xb0
8020997c: 06 f5        	sd	ra, 0xa8(sp)
8020997e: 22 f1        	sd	s0, 0xa0(sp)
80209980: 00 19        	addi	s0, sp, 0xb0
80209982: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80209986: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
8020998a: 97 a0 00 00  	auipc	ra, 0xa
8020998e: e7 80 60 0c  	jalr	0xc6(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17hec37ec12198c12e0E>
80209992: 3d e1        	bnez	a0, 0x802099f8 <.Lpcrel_hi24+0x10>
80209994: 09 a0        	j	0x80209996 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5cbd1855be7c37ceE+0x1c>
80209996: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
8020999a: 0c 61        	ld	a1, 0x0(a0)
8020999c: 23 30 b4 fc  	sd	a1, -0x40(s0)

00000000802099a0 <.Lpcrel_hi22>:
;         Self::new(x, Display::fmt)
802099a0: 17 25 01 00  	auipc	a0, 0x12
802099a4: 13 05 45 1a  	addi	a0, a0, 0x1a4
802099a8: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
802099ac: 23 38 b4 fa  	sd	a1, -0x50(s0)
802099b0: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
802099b4: 83 35 04 fb  	ld	a1, -0x50(s0)
802099b8: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
802099bc: 23 38 b4 f8  	sd	a1, -0x70(s0)
802099c0: 23 3c a4 f8  	sd	a0, -0x68(s0)

00000000802099c4 <.Lpcrel_hi23>:
802099c4: 17 b5 02 00  	auipc	a0, 0x2b
802099c8: 93 05 c5 09  	addi	a1, a0, 0x9c
802099cc: 13 05 04 f6  	addi	a0, s0, -0xa0
802099d0: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802099d4: 93 06 04 f9  	addi	a3, s0, -0x70
802099d8: 05 47        	li	a4, 0x1
802099da: 3a 86        	mv	a2, a4
802099dc: 97 e0 ff ff  	auipc	ra, 0xffffe
802099e0: e7 80 c0 90  	jalr	-0x6f4(ra) <ekernel+0xffcba2e8>
802099e4: 03 35 04 f5  	ld	a0, -0xb0(s0)

00000000802099e8 <.Lpcrel_hi24>:
802099e8: 97 b5 02 00  	auipc	a1, 0x2b
802099ec: 93 85 85 08  	addi	a1, a1, 0x88
802099f0: 97 60 02 00  	auipc	ra, 0x26
802099f4: e7 80 80 7b  	jalr	0x7b8(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
802099f8: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
802099fc: 08 61        	ld	a0, 0x0(a0)
802099fe: 41 05        	addi	a0, a0, 0x10
80209a00: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80209a02: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
80209a06: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80209a0a: 23 34 b4 fe  	sd	a1, -0x18(s0)
80209a0e: 83 35 84 fe  	ld	a1, -0x18(s0)
80209a12: 23 30 b4 fe  	sd	a1, -0x20(s0)
80209a16: 83 35 04 fe  	ld	a1, -0x20(s0)
80209a1a: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209a1c: a3 03 c4 fa  	sb	a2, -0x59(s0)
80209a20: 03 46 74 fa  	lbu	a2, -0x59(s0)
80209a24: 97 e0 00 00  	auipc	ra, 0xe
80209a28: e7 80 80 ac  	jalr	-0x538(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
80209a2c: aa 70        	ld	ra, 0xa8(sp)
80209a2e: 0a 74        	ld	s0, 0xa0(sp)
;     }
80209a30: 4d 61        	addi	sp, sp, 0xb0
80209a32: 82 80        	ret

0000000080209a34 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h61c197545f86855fE>:
;     fn drop(&mut self) {
80209a34: 71 71        	addi	sp, sp, -0xb0
80209a36: 06 f5        	sd	ra, 0xa8(sp)
80209a38: 22 f1        	sd	s0, 0xa0(sp)
80209a3a: 00 19        	addi	s0, sp, 0xb0
80209a3c: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80209a40: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209a44: 97 a0 00 00  	auipc	ra, 0xa
80209a48: e7 80 c0 dc  	jalr	-0x234(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h76795623b6983813E>
80209a4c: 3d e1        	bnez	a0, 0x80209ab2 <.Lpcrel_hi27+0x10>
80209a4e: 09 a0        	j	0x80209a50 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h61c197545f86855fE+0x1c>
80209a50: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209a54: 0c 61        	ld	a1, 0x0(a0)
80209a56: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080209a5a <.Lpcrel_hi25>:
;         Self::new(x, Display::fmt)
80209a5a: 17 25 01 00  	auipc	a0, 0x12
80209a5e: 13 05 a5 0e  	addi	a0, a0, 0xea
80209a62: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80209a66: 23 38 b4 fa  	sd	a1, -0x50(s0)
80209a6a: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80209a6e: 83 35 04 fb  	ld	a1, -0x50(s0)
80209a72: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209a76: 23 38 b4 f8  	sd	a1, -0x70(s0)
80209a7a: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080209a7e <.Lpcrel_hi26>:
80209a7e: 17 b5 02 00  	auipc	a0, 0x2b
80209a82: 93 05 25 fe  	addi	a1, a0, -0x1e
80209a86: 13 05 04 f6  	addi	a0, s0, -0xa0
80209a8a: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80209a8e: 93 06 04 f9  	addi	a3, s0, -0x70
80209a92: 05 47        	li	a4, 0x1
80209a94: 3a 86        	mv	a2, a4
80209a96: 97 e0 ff ff  	auipc	ra, 0xffffe
80209a9a: e7 80 20 85  	jalr	-0x7ae(ra) <ekernel+0xffcba2e8>
80209a9e: 03 35 04 f5  	ld	a0, -0xb0(s0)

0000000080209aa2 <.Lpcrel_hi27>:
80209aa2: 97 b5 02 00  	auipc	a1, 0x2b
80209aa6: 93 85 e5 fc  	addi	a1, a1, -0x32
80209aaa: 97 60 02 00  	auipc	ra, 0x26
80209aae: e7 80 e0 6f  	jalr	0x6fe(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80209ab2: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209ab6: 08 61        	ld	a0, 0x0(a0)
80209ab8: 41 05        	addi	a0, a0, 0x10
80209aba: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80209abc: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
80209ac0: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80209ac4: 23 34 b4 fe  	sd	a1, -0x18(s0)
80209ac8: 83 35 84 fe  	ld	a1, -0x18(s0)
80209acc: 23 30 b4 fe  	sd	a1, -0x20(s0)
80209ad0: 83 35 04 fe  	ld	a1, -0x20(s0)
80209ad4: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209ad6: a3 03 c4 fa  	sb	a2, -0x59(s0)
80209ada: 03 46 74 fa  	lbu	a2, -0x59(s0)
80209ade: 97 e0 00 00  	auipc	ra, 0xe
80209ae2: e7 80 e0 a0  	jalr	-0x5f2(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
80209ae6: aa 70        	ld	ra, 0xa8(sp)
80209ae8: 0a 74        	ld	s0, 0xa0(sp)
;     }
80209aea: 4d 61        	addi	sp, sp, 0xb0
80209aec: 82 80        	ret

0000000080209aee <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h66d7484dec9ef52fE>:
;     fn drop(&mut self) {
80209aee: 71 71        	addi	sp, sp, -0xb0
80209af0: 06 f5        	sd	ra, 0xa8(sp)
80209af2: 22 f1        	sd	s0, 0xa0(sp)
80209af4: 00 19        	addi	s0, sp, 0xb0
80209af6: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80209afa: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209afe: 97 a0 00 00  	auipc	ra, 0xa
80209b02: e7 80 20 dd  	jalr	-0x22e(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h99943c48b817664dE>
80209b06: 3d e1        	bnez	a0, 0x80209b6c <.Lpcrel_hi30+0x10>
80209b08: 09 a0        	j	0x80209b0a <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h66d7484dec9ef52fE+0x1c>
80209b0a: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209b0e: 0c 61        	ld	a1, 0x0(a0)
80209b10: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080209b14 <.Lpcrel_hi28>:
;         Self::new(x, Display::fmt)
80209b14: 17 25 01 00  	auipc	a0, 0x12
80209b18: 13 05 05 03  	addi	a0, a0, 0x30
80209b1c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80209b20: 23 38 b4 fa  	sd	a1, -0x50(s0)
80209b24: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80209b28: 83 35 04 fb  	ld	a1, -0x50(s0)
80209b2c: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209b30: 23 38 b4 f8  	sd	a1, -0x70(s0)
80209b34: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080209b38 <.Lpcrel_hi29>:
80209b38: 17 b5 02 00  	auipc	a0, 0x2b
80209b3c: 93 05 85 f2  	addi	a1, a0, -0xd8
80209b40: 13 05 04 f6  	addi	a0, s0, -0xa0
80209b44: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80209b48: 93 06 04 f9  	addi	a3, s0, -0x70
80209b4c: 05 47        	li	a4, 0x1
80209b4e: 3a 86        	mv	a2, a4
80209b50: 97 d0 ff ff  	auipc	ra, 0xffffd
80209b54: e7 80 80 79  	jalr	0x798(ra) <ekernel+0xffcba2e8>
80209b58: 03 35 04 f5  	ld	a0, -0xb0(s0)

0000000080209b5c <.Lpcrel_hi30>:
80209b5c: 97 b5 02 00  	auipc	a1, 0x2b
80209b60: 93 85 45 f1  	addi	a1, a1, -0xec
80209b64: 97 60 02 00  	auipc	ra, 0x26
80209b68: e7 80 40 64  	jalr	0x644(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80209b6c: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209b70: 08 61        	ld	a0, 0x0(a0)
80209b72: 41 05        	addi	a0, a0, 0x10
80209b74: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80209b76: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
80209b7a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80209b7e: 23 34 b4 fe  	sd	a1, -0x18(s0)
80209b82: 83 35 84 fe  	ld	a1, -0x18(s0)
80209b86: 23 30 b4 fe  	sd	a1, -0x20(s0)
80209b8a: 83 35 04 fe  	ld	a1, -0x20(s0)
80209b8e: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209b90: a3 03 c4 fa  	sb	a2, -0x59(s0)
80209b94: 03 46 74 fa  	lbu	a2, -0x59(s0)
80209b98: 97 e0 00 00  	auipc	ra, 0xe
80209b9c: e7 80 40 95  	jalr	-0x6ac(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
80209ba0: aa 70        	ld	ra, 0xa8(sp)
80209ba2: 0a 74        	ld	s0, 0xa0(sp)
;     }
80209ba4: 4d 61        	addi	sp, sp, 0xb0
80209ba6: 82 80        	ret

0000000080209ba8 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7863b6cb886f3b1eE>:
;     fn drop(&mut self) {
80209ba8: 71 71        	addi	sp, sp, -0xb0
80209baa: 06 f5        	sd	ra, 0xa8(sp)
80209bac: 22 f1        	sd	s0, 0xa0(sp)
80209bae: 00 19        	addi	s0, sp, 0xb0
80209bb0: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80209bb4: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209bb8: 97 a0 00 00  	auipc	ra, 0xa
80209bbc: e7 80 80 dd  	jalr	-0x228(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17hc95cede140248586E>
80209bc0: 3d e1        	bnez	a0, 0x80209c26 <.Lpcrel_hi33+0x10>
80209bc2: 09 a0        	j	0x80209bc4 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h7863b6cb886f3b1eE+0x1c>
80209bc4: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209bc8: 0c 61        	ld	a1, 0x0(a0)
80209bca: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080209bce <.Lpcrel_hi31>:
;         Self::new(x, Display::fmt)
80209bce: 17 25 01 00  	auipc	a0, 0x12
80209bd2: 13 05 65 f7  	addi	a0, a0, -0x8a
80209bd6: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80209bda: 23 38 b4 fa  	sd	a1, -0x50(s0)
80209bde: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80209be2: 83 35 04 fb  	ld	a1, -0x50(s0)
80209be6: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209bea: 23 38 b4 f8  	sd	a1, -0x70(s0)
80209bee: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080209bf2 <.Lpcrel_hi32>:
80209bf2: 17 b5 02 00  	auipc	a0, 0x2b
80209bf6: 93 05 e5 e6  	addi	a1, a0, -0x192
80209bfa: 13 05 04 f6  	addi	a0, s0, -0xa0
80209bfe: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80209c02: 93 06 04 f9  	addi	a3, s0, -0x70
80209c06: 05 47        	li	a4, 0x1
80209c08: 3a 86        	mv	a2, a4
80209c0a: 97 d0 ff ff  	auipc	ra, 0xffffd
80209c0e: e7 80 e0 6d  	jalr	0x6de(ra) <ekernel+0xffcba2e8>
80209c12: 03 35 04 f5  	ld	a0, -0xb0(s0)

0000000080209c16 <.Lpcrel_hi33>:
80209c16: 97 b5 02 00  	auipc	a1, 0x2b
80209c1a: 93 85 a5 e5  	addi	a1, a1, -0x1a6
80209c1e: 97 60 02 00  	auipc	ra, 0x26
80209c22: e7 80 a0 58  	jalr	0x58a(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80209c26: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209c2a: 08 61        	ld	a0, 0x0(a0)
80209c2c: 41 05        	addi	a0, a0, 0x10
80209c2e: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80209c30: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
80209c34: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80209c38: 23 34 b4 fe  	sd	a1, -0x18(s0)
80209c3c: 83 35 84 fe  	ld	a1, -0x18(s0)
80209c40: 23 30 b4 fe  	sd	a1, -0x20(s0)
80209c44: 83 35 04 fe  	ld	a1, -0x20(s0)
80209c48: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209c4a: a3 03 c4 fa  	sb	a2, -0x59(s0)
80209c4e: 03 46 74 fa  	lbu	a2, -0x59(s0)
80209c52: 97 e0 00 00  	auipc	ra, 0xe
80209c56: e7 80 a0 89  	jalr	-0x766(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
80209c5a: aa 70        	ld	ra, 0xa8(sp)
80209c5c: 0a 74        	ld	s0, 0xa0(sp)
;     }
80209c5e: 4d 61        	addi	sp, sp, 0xb0
80209c60: 82 80        	ret

0000000080209c62 <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc891a9e3f924462cE>:
;     fn drop(&mut self) {
80209c62: 71 71        	addi	sp, sp, -0xb0
80209c64: 06 f5        	sd	ra, 0xa8(sp)
80209c66: 22 f1        	sd	s0, 0xa0(sp)
80209c68: 00 19        	addi	s0, sp, 0xb0
80209c6a: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80209c6e: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209c72: 97 a0 00 00  	auipc	ra, 0xa
80209c76: e7 80 e0 bf  	jalr	-0x402(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h8460a60971567558E>
80209c7a: 3d e1        	bnez	a0, 0x80209ce0 <.Lpcrel_hi36+0x10>
80209c7c: 09 a0        	j	0x80209c7e <_ZN76_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc891a9e3f924462cE+0x1c>
80209c7e: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209c82: 0c 61        	ld	a1, 0x0(a0)
80209c84: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080209c88 <.Lpcrel_hi34>:
;         Self::new(x, Display::fmt)
80209c88: 17 25 01 00  	auipc	a0, 0x12
80209c8c: 13 05 c5 eb  	addi	a0, a0, -0x144
80209c90: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80209c94: 23 38 b4 fa  	sd	a1, -0x50(s0)
80209c98: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80209c9c: 83 35 04 fb  	ld	a1, -0x50(s0)
80209ca0: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(self.holding(), "release {}", self.spin.name);
80209ca4: 23 38 b4 f8  	sd	a1, -0x70(s0)
80209ca8: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080209cac <.Lpcrel_hi35>:
80209cac: 17 b5 02 00  	auipc	a0, 0x2b
80209cb0: 93 05 45 db  	addi	a1, a0, -0x24c
80209cb4: 13 05 04 f6  	addi	a0, s0, -0xa0
80209cb8: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80209cbc: 93 06 04 f9  	addi	a3, s0, -0x70
80209cc0: 05 47        	li	a4, 0x1
80209cc2: 3a 86        	mv	a2, a4
80209cc4: 97 d0 ff ff  	auipc	ra, 0xffffd
80209cc8: e7 80 40 62  	jalr	0x624(ra) <ekernel+0xffcba2e8>
80209ccc: 03 35 04 f5  	ld	a0, -0xb0(s0)

0000000080209cd0 <.Lpcrel_hi36>:
80209cd0: 97 b5 02 00  	auipc	a1, 0x2b
80209cd4: 93 85 05 da  	addi	a1, a1, -0x260
80209cd8: 97 60 02 00  	auipc	ra, 0x26
80209cdc: e7 80 00 4d  	jalr	0x4d0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80209ce0: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209ce4: 08 61        	ld	a0, 0x0(a0)
80209ce6: 41 05        	addi	a0, a0, 0x10
80209ce8: 81 45        	li	a1, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80209cea: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     data_pointer: *mut (),
80209cee: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80209cf2: 23 34 b4 fe  	sd	a1, -0x18(s0)
80209cf6: 83 35 84 fe  	ld	a1, -0x18(s0)
80209cfa: 23 30 b4 fe  	sd	a1, -0x20(s0)
80209cfe: 83 35 04 fe  	ld	a1, -0x20(s0)
80209d02: 05 46        	li	a2, 0x1
;         self.spin.locked.store(ptr::null_mut(),Ordering::Release);
80209d04: a3 03 c4 fa  	sb	a2, -0x59(s0)
80209d08: 03 46 74 fa  	lbu	a2, -0x59(s0)
80209d0c: 97 d0 00 00  	auipc	ra, 0xd
80209d10: e7 80 00 7e  	jalr	0x7e0(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>
80209d14: aa 70        	ld	ra, 0xa8(sp)
80209d16: 0a 74        	ld	s0, 0xa0(sp)
;     }
80209d18: 4d 61        	addi	sp, sp, 0xb0
80209d1a: 82 80        	ret

0000000080209d1c <_ZN59_$LT$os..cpu..IntrLock$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb5cd8e8e622db9b9E>:
;     fn drop(&mut self) {
80209d1c: 01 11        	addi	sp, sp, -0x20
80209d1e: 06 ec        	sd	ra, 0x18(sp)
80209d20: 22 e8        	sd	s0, 0x10(sp)
80209d22: 00 10        	addi	s0, sp, 0x20
80209d24: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             self.cpu.unlock();
80209d28: 08 61        	ld	a0, 0x0(a0)
80209d2a: 97 f0 00 00  	auipc	ra, 0xf
80209d2e: e7 80 00 53  	jalr	0x530(ra) <_ZN2os3cpu3Cpu6unlock17ha4e4dadfdd6dac43E>
80209d32: e2 60        	ld	ra, 0x18(sp)
80209d34: 42 64        	ld	s0, 0x10(sp)
;     }
80209d36: 05 61        	addi	sp, sp, 0x20
80209d38: 82 80        	ret

0000000080209d3a <_ZN70_$LT$os..page_alloc..AllocerGuard$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha062ed88a1afcce9E>:
;     fn drop(&mut self) {
80209d3a: 01 11        	addi	sp, sp, -0x20
80209d3c: 06 ec        	sd	ra, 0x18(sp)
80209d3e: 22 e8        	sd	s0, 0x10(sp)
80209d40: 00 10        	addi	s0, sp, 0x20
80209d42: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             FRAME_ALLOC.page_dealloc(self.pages);
80209d46: 0c 61        	ld	a1, 0x0(a0)

0000000080209d48 <.Lpcrel_hi37>:
80209d48: 17 45 03 00  	auipc	a0, 0x34
80209d4c: 13 05 85 2b  	addi	a0, a0, 0x2b8
80209d50: 97 a0 ff ff  	auipc	ra, 0xffffa
80209d54: e7 80 e0 20  	jalr	0x20e(ra) <ekernel+0xffcb6f5e>
80209d58: e2 60        	ld	ra, 0x18(sp)
80209d5a: 42 64        	ld	s0, 0x10(sp)
;     }
80209d5c: 05 61        	addi	sp, sp, 0x20
80209d5e: 82 80        	ret

0000000080209d60 <_ZN14virtio_drivers5queue10Descriptor7set_buf17h2346af91c7464e82E>:
;     fn set_buf<H: Hal>(&mut self, buf: &[u8]) {
80209d60: 5d 71        	addi	sp, sp, -0x50
80209d62: 86 e4        	sd	ra, 0x48(sp)
80209d64: a2 e0        	sd	s0, 0x40(sp)
80209d66: 80 08        	addi	s0, sp, 0x50
80209d68: 23 30 c4 fc  	sd	a2, -0x40(s0)
80209d6c: 23 38 b4 fa  	sd	a1, -0x50(s0)
80209d70: aa 85        	mv	a1, a0
80209d72: 03 35 04 fb  	ld	a0, -0x50(s0)
80209d76: 23 3c b4 fa  	sd	a1, -0x48(s0)
80209d7a: 23 34 b4 fc  	sd	a1, -0x38(s0)
80209d7e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80209d82: 23 3c c4 fc  	sd	a2, -0x28(s0)
80209d86: 23 30 a4 fe  	sd	a0, -0x20(s0)
80209d8a: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             .write(H::virt_to_phys(buf.as_ptr() as usize) as u64);
80209d8e: 97 a0 00 00  	auipc	ra, 0xa
80209d92: e7 80 e0 74  	jalr	0x74e(ra) <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$12virt_to_phys17h9045b5e528be51b9E>
80209d96: aa 85        	mv	a1, a0
80209d98: 03 35 84 fb  	ld	a0, -0x48(s0)
;         self.addr
80209d9c: 97 70 ff ff  	auipc	ra, 0xffff7
80209da0: e7 80 80 3f  	jalr	0x3f8(ra) <ekernel+0xffcb4194>
80209da4: 03 35 84 fb  	ld	a0, -0x48(s0)
80209da8: 83 35 04 fc  	ld	a1, -0x40(s0)
;         self.len.write(buf.len() as u32);
80209dac: 21 05        	addi	a0, a0, 0x8
80209dae: 97 00 01 00  	auipc	ra, 0x10
80209db2: e7 80 20 1f  	jalr	0x1f2(ra) <_ZN8volatile17Volatile$LT$T$GT$5write17h2428a8b44f0d1264E>
80209db6: a6 60        	ld	ra, 0x48(sp)
80209db8: 06 64        	ld	s0, 0x40(sp)
;     }
80209dba: 61 61        	addi	sp, sp, 0x50
80209dbc: 82 80        	ret

0000000080209dbe <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$19recycle_descriptors17h15b82b3644c7e249E>:
;     fn recycle_descriptors(&mut self, mut head: u16) {
80209dbe: 59 71        	addi	sp, sp, -0x70
80209dc0: 86 f4        	sd	ra, 0x68(sp)
80209dc2: a2 f0        	sd	s0, 0x60(sp)
80209dc4: 80 18        	addi	s0, sp, 0x70
80209dc6: 23 3c b4 fa  	sd	a1, -0x48(s0)
80209dca: aa 85        	mv	a1, a0
80209dcc: 03 35 84 fb  	ld	a0, -0x48(s0)
80209dd0: 23 30 b4 fc  	sd	a1, -0x40(s0)
80209dd4: 23 1a a4 fc  	sh	a0, -0x2c(s0)
80209dd8: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let origin_free_head = self.free_head;
80209ddc: 03 d5 85 03  	lhu	a0, 0x38(a1)
80209de0: 23 34 a4 fc  	sd	a0, -0x38(s0)
80209de4: 23 13 a4 fe  	sh	a0, -0x1a(s0)
;         self.free_head = head;
80209de8: 03 15 44 fd  	lh	a0, -0x2c(s0)
80209dec: 23 9c a5 02  	sh	a0, 0x38(a1)
;         loop {
80209df0: 09 a0        	j	0x80209df2 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$19recycle_descriptors17h15b82b3644c7e249E+0x34>
80209df2: 83 35 04 fc  	ld	a1, -0x40(s0)
;             let desc = &mut self.desc[head as usize];
80209df6: 03 55 44 fd  	lhu	a0, -0x2c(s0)
80209dfa: 23 34 a4 fa  	sd	a0, -0x58(s0)
80209dfe: 8c 65        	ld	a1, 0x8(a1)
80209e00: 23 38 b4 fa  	sd	a1, -0x50(s0)
80209e04: 63 70 b5 04  	bgeu	a0, a1, 0x80209e44 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$19recycle_descriptors17h15b82b3644c7e249E+0x86>
80209e08: 09 a0        	j	0x80209e0a <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$19recycle_descriptors17h15b82b3644c7e249E+0x4c>
80209e0a: 03 35 04 fc  	ld	a0, -0x40(s0)
80209e0e: 83 35 84 fa  	ld	a1, -0x58(s0)
;             let desc = &mut self.desc[head as usize];
80209e12: 08 61        	ld	a0, 0x0(a0)
80209e14: 92 05        	slli	a1, a1, 0x4
80209e16: 2e 95        	add	a0, a0, a1
80209e18: 23 3c a4 f8  	sd	a0, -0x68(s0)
80209e1c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             let flags = desc.flags.read();
80209e20: 31 05        	addi	a0, a0, 0xc
80209e22: 97 70 ff ff  	auipc	ra, 0xffff7
80209e26: e7 80 e0 2d  	jalr	0x2de(ra) <ekernel+0xffcb4100>
80209e2a: aa 85        	mv	a1, a0
80209e2c: 03 35 04 fc  	ld	a0, -0x40(s0)
80209e30: 23 1b b4 fc  	sh	a1, -0x2a(s0)
;             self.num_used -= 1;
80209e34: 03 55 65 03  	lhu	a0, 0x36(a0)
80209e38: 93 05 f5 ff  	addi	a1, a0, -0x1
80209e3c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80209e40: 0d cd        	beqz	a0, 0x80209e7a <.Lpcrel_hi1>
80209e42: 29 a8        	j	0x80209e5c <.Lpcrel_hi0+0x10>
80209e44: 83 35 04 fb  	ld	a1, -0x50(s0)
80209e48: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080209e4c <.Lpcrel_hi0>:
;             let desc = &mut self.desc[head as usize];
80209e4c: 17 b6 02 00  	auipc	a2, 0x2b
80209e50: 13 06 c6 cd  	addi	a2, a2, -0x324
80209e54: 97 60 02 00  	auipc	ra, 0x26
80209e58: e7 80 c0 45  	jalr	0x45c(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
80209e5c: 03 35 04 fa  	ld	a0, -0x60(s0)
80209e60: 83 35 04 fc  	ld	a1, -0x40(s0)
;             self.num_used -= 1;
80209e64: 23 9b a5 02  	sh	a0, 0x36(a1)
80209e68: 13 05 64 fd  	addi	a0, s0, -0x2a
80209e6c: 85 45        	li	a1, 0x1
;             if flags.contains(DescFlags::NEXT) {
80209e6e: 97 b0 00 00  	auipc	ra, 0xb
80209e72: e7 80 40 7f  	jalr	0x7f4(ra) <_ZN14virtio_drivers5queue9DescFlags8contains17hd8f1f0796a61f996E>
80209e76: 0d ed        	bnez	a0, 0x80209eb0 <.Lpcrel_hi2+0x2e>
80209e78: 39 a8        	j	0x80209e96 <.Lpcrel_hi2+0x14>

0000000080209e7a <.Lpcrel_hi1>:
;             self.num_used -= 1;
80209e7a: 17 b5 02 00  	auipc	a0, 0x2b
80209e7e: 13 05 65 ce  	addi	a0, a0, -0x31a

0000000080209e82 <.Lpcrel_hi2>:
80209e82: 97 b5 02 00  	auipc	a1, 0x2b
80209e86: 13 86 e5 cb  	addi	a2, a1, -0x342
80209e8a: 93 05 10 02  	li	a1, 0x21
80209e8e: 97 60 02 00  	auipc	ra, 0x26
80209e92: e7 80 a0 38  	jalr	0x38a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80209e96: 83 35 84 fc  	ld	a1, -0x38(s0)
80209e9a: 03 35 84 f9  	ld	a0, -0x68(s0)
;                 desc.next.write(origin_free_head);
80209e9e: 39 05        	addi	a0, a0, 0xe
80209ea0: 97 70 ff ff  	auipc	ra, 0xffff7
80209ea4: e7 80 40 2b  	jalr	0x2b4(ra) <ekernel+0xffcb4154>
80209ea8: a6 70        	ld	ra, 0x68(sp)
80209eaa: 06 74        	ld	s0, 0x60(sp)
;     }
80209eac: 65 61        	addi	sp, sp, 0x70
80209eae: 82 80        	ret
80209eb0: 03 35 84 f9  	ld	a0, -0x68(s0)
;                 head = desc.next.read();
80209eb4: 39 05        	addi	a0, a0, 0xe
80209eb6: 97 70 ff ff  	auipc	ra, 0xffff7
80209eba: e7 80 60 26  	jalr	0x266(ra) <ekernel+0xffcb411c>
80209ebe: 23 1a a4 fc  	sh	a0, -0x2c(s0)
;         loop {
80209ec2: 05 bf        	j	0x80209df2 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$19recycle_descriptors17h15b82b3644c7e249E+0x34>

0000000080209ec4 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3add17hb284d6077712d412E>:
;     pub fn add(&mut self, inputs: &[&[u8]], outputs: &[&mut [u8]]) -> Result<u16> {
80209ec4: 09 71        	addi	sp, sp, -0x180
80209ec6: 86 fe        	sd	ra, 0x178(sp)
80209ec8: a2 fa        	sd	s0, 0x170(sp)
80209eca: 00 03        	addi	s0, sp, 0x180
80209ecc: 23 30 e4 f2  	sd	a4, -0xe0(s0)
80209ed0: 23 34 d4 f2  	sd	a3, -0xd8(s0)
80209ed4: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80209ed8: 2e 86        	mv	a2, a1
80209eda: 83 35 04 f3  	ld	a1, -0xd0(s0)
80209ede: 23 3c c4 f2  	sd	a2, -0xc8(s0)
80209ee2: 2a 86        	mv	a2, a0
80209ee4: 03 35 84 f3  	ld	a0, -0xc8(s0)
80209ee8: 23 30 c4 f4  	sd	a2, -0xc0(s0)
80209eec: 23 34 c4 f8  	sd	a2, -0x78(s0)
80209ef0: 23 38 a4 f8  	sd	a0, -0x70(s0)
80209ef4: 23 3c b4 f8  	sd	a1, -0x68(s0)
80209ef8: 23 30 d4 fa  	sd	a3, -0x60(s0)
80209efc: 23 34 e4 fa  	sd	a4, -0x58(s0)
;         if inputs.is_empty() && outputs.is_empty() {
80209f00: 97 c0 ff ff  	auipc	ra, 0xffffc
80209f04: e7 80 40 f8  	jalr	-0x7c(ra) <ekernel+0xffcb8e84>
80209f08: 01 ed        	bnez	a0, 0x80209f20 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3add17hb284d6077712d412E+0x5c>
80209f0a: 09 a0        	j	0x80209f0c <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3add17hb284d6077712d412E+0x48>
80209f0c: 83 35 04 f3  	ld	a1, -0xd0(s0)
80209f10: 03 35 04 f2  	ld	a0, -0xe0(s0)
;         if inputs.len() + outputs.len() + self.num_used as usize > self.queue_size as usize {
80209f14: 2e 95        	add	a0, a0, a1
80209f16: 23 3c a4 f0  	sd	a0, -0xe8(s0)
80209f1a: 63 64 b5 04  	bltu	a0, a1, 0x80209f62 <.Lpcrel_hi3>
80209f1e: 35 a0        	j	0x80209f4a <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3add17hb284d6077712d412E+0x86>
80209f20: 83 35 04 f2  	ld	a1, -0xe0(s0)
80209f24: 03 35 84 f2  	ld	a0, -0xd8(s0)
;         if inputs.is_empty() && outputs.is_empty() {
80209f28: 97 c0 ff ff  	auipc	ra, 0xffffc
80209f2c: e7 80 80 f7  	jalr	-0x88(ra) <ekernel+0xffcb8ea0>
80209f30: 71 dd        	beqz	a0, 0x80209f0c <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3add17hb284d6077712d412E+0x48>
80209f32: 09 a0        	j	0x80209f34 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3add17hb284d6077712d412E+0x70>
80209f34: 0d 45        	li	a0, 0x3
;             return Err(Error::InvalidParam);
80209f36: 23 06 a4 f4  	sb	a0, -0xb4(s0)
80209f3a: 03 45 c4 f4  	lbu	a0, -0xb4(s0)
80209f3e: a3 04 a4 f4  	sb	a0, -0xb7(s0)
80209f42: 05 45        	li	a0, 0x1
80209f44: 23 04 a4 f4  	sb	a0, -0xb8(s0)
; #![no_std]
80209f48: 09 a6        	j	0x8020a24a <.Lpcrel_hi14+0x14>
80209f4a: 83 35 84 f1  	ld	a1, -0xe8(s0)
80209f4e: 03 35 04 f4  	ld	a0, -0xc0(s0)
;         if inputs.len() + outputs.len() + self.num_used as usize > self.queue_size as usize {
80209f52: 03 55 65 03  	lhu	a0, 0x36(a0)
80209f56: 2e 95        	add	a0, a0, a1
80209f58: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80209f5c: 63 69 b5 02  	bltu	a0, a1, 0x80209f8e <.Lpcrel_hi5>
80209f60: 31 a8        	j	0x80209f7c <.Lpcrel_hi4+0x12>

0000000080209f62 <.Lpcrel_hi3>:
80209f62: 17 b5 02 00  	auipc	a0, 0x2b
80209f66: 13 05 e5 c3  	addi	a0, a0, -0x3c2

0000000080209f6a <.Lpcrel_hi4>:
80209f6a: 97 b5 02 00  	auipc	a1, 0x2b
80209f6e: 13 86 e5 c1  	addi	a2, a1, -0x3e2
80209f72: f1 45        	li	a1, 0x1c
80209f74: 97 60 02 00  	auipc	ra, 0x26
80209f78: e7 80 40 2a  	jalr	0x2a4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80209f7c: 83 35 04 f1  	ld	a1, -0xf0(s0)
80209f80: 03 35 04 f4  	ld	a0, -0xc0(s0)
;         if inputs.len() + outputs.len() + self.num_used as usize > self.queue_size as usize {
80209f84: 03 55 45 03  	lhu	a0, 0x34(a0)
80209f88: 63 6d b5 04  	bltu	a0, a1, 0x80209fe2 <.Lpcrel_hi6+0x4c>
80209f8c: 31 a8        	j	0x80209fa8 <.Lpcrel_hi6+0x12>

0000000080209f8e <.Lpcrel_hi5>:
80209f8e: 17 b5 02 00  	auipc	a0, 0x2b
80209f92: 13 05 25 c1  	addi	a0, a0, -0x3ee

0000000080209f96 <.Lpcrel_hi6>:
80209f96: 97 b5 02 00  	auipc	a1, 0x2b
80209f9a: 13 86 25 bf  	addi	a2, a1, -0x40e
80209f9e: f1 45        	li	a1, 0x1c
80209fa0: 97 60 02 00  	auipc	ra, 0x26
80209fa4: e7 80 80 27  	jalr	0x278(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80209fa8: 83 35 04 f3  	ld	a1, -0xd0(s0)
80209fac: 03 35 84 f3  	ld	a0, -0xc8(s0)
80209fb0: 03 36 04 f4  	ld	a2, -0xc0(s0)
;         let head = self.free_head;
80209fb4: 83 56 86 03  	lhu	a3, 0x38(a2)
80209fb8: 23 34 d4 f0  	sd	a3, -0xf8(s0)
80209fbc: 23 1b d4 fa  	sh	a3, -0x4a(s0)
;         let mut last = self.free_head;
80209fc0: 03 16 86 03  	lh	a2, 0x38(a2)
80209fc4: 23 17 c4 f4  	sh	a2, -0xb2(s0)
;         for input in inputs.iter() {
80209fc8: 97 c0 ff ff  	auipc	ra, 0xffffc
80209fcc: e7 80 c0 d9  	jalr	-0x264(ra) <ekernel+0xffcb8d64>
80209fd0: 97 20 00 00  	auipc	ra, 0x2
80209fd4: e7 80 40 93  	jalr	-0x6cc(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6b79e4f6109403b0E>
80209fd8: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80209fdc: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80209fe0: 21 a8        	j	0x80209ff8 <.Lpcrel_hi6+0x62>
80209fe2: 01 45        	li	a0, 0x0
;             return Err(Error::BufferTooSmall);
80209fe4: a3 06 a4 f4  	sb	a0, -0xb3(s0)
80209fe8: 03 45 d4 f4  	lbu	a0, -0xb3(s0)
80209fec: a3 04 a4 f4  	sb	a0, -0xb7(s0)
80209ff0: 05 45        	li	a0, 0x1
80209ff2: 23 04 a4 f4  	sb	a0, -0xb8(s0)
; #![no_std]
80209ff6: 91 ac        	j	0x8020a24a <.Lpcrel_hi14+0x14>
80209ff8: 13 05 04 f5  	addi	a0, s0, -0xb0
;         for input in inputs.iter() {
80209ffc: 97 20 00 00  	auipc	ra, 0x2
8020a000: e7 80 40 9d  	jalr	-0x62c(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE>
8020a004: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8020a008: 03 35 04 f6  	ld	a0, -0xa0(s0)
8020a00c: 1d e1        	bnez	a0, 0x8020a032 <.Lpcrel_hi6+0x9c>
8020a00e: 09 a0        	j	0x8020a010 <.Lpcrel_hi6+0x7a>
8020a010: 83 35 04 f2  	ld	a1, -0xe0(s0)
8020a014: 03 35 84 f2  	ld	a0, -0xd8(s0)
;         for output in outputs.iter() {
8020a018: 97 c0 ff ff  	auipc	ra, 0xffffc
8020a01c: e7 80 c0 da  	jalr	-0x254(ra) <ekernel+0xffcb8dc4>
8020a020: 97 20 00 00  	auipc	ra, 0x2
8020a024: e7 80 c0 8f  	jalr	-0x704(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7acfd28025590632E>
8020a028: 23 34 a4 f6  	sd	a0, -0x98(s0)
8020a02c: 23 38 b4 f6  	sd	a1, -0x90(s0)
8020a030: 1d a0        	j	0x8020a056 <.Lpcrel_hi6+0xc0>
8020a032: 83 35 04 f4  	ld	a1, -0xc0(s0)
;         for input in inputs.iter() {
8020a036: 03 35 04 f6  	ld	a0, -0xa0(s0)
8020a03a: 23 38 a4 ee  	sd	a0, -0x110(s0)
8020a03e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             let desc = &mut self.desc[self.free_head as usize];
8020a042: 03 d5 85 03  	lhu	a0, 0x38(a1)
8020a046: 23 3c a4 ee  	sd	a0, -0x108(s0)
8020a04a: 8c 65        	ld	a1, 0x8(a1)
8020a04c: 23 30 b4 f0  	sd	a1, -0x100(s0)
8020a050: 63 6a b5 28  	bltu	a0, a1, 0x8020a2e4 <.Lpcrel_hi15+0x10>
8020a054: ed a4        	j	0x8020a33e <.Lpcrel_hi15+0x6a>
8020a056: 13 05 84 f6  	addi	a0, s0, -0x98
;         for output in outputs.iter() {
8020a05a: 97 20 00 00  	auipc	ra, 0x2
8020a05e: e7 80 60 bb  	jalr	-0x44a(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E>
8020a062: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020a066: 03 35 84 f7  	ld	a0, -0x88(s0)
8020a06a: 11 ed        	bnez	a0, 0x8020a086 <.Lpcrel_hi6+0xf0>
8020a06c: 09 a0        	j	0x8020a06e <.Lpcrel_hi6+0xd8>
8020a06e: 83 35 04 f4  	ld	a1, -0xc0(s0)
;             let desc = &mut self.desc[last as usize];
8020a072: 03 55 e4 f4  	lhu	a0, -0xb2(s0)
8020a076: 23 30 a4 ee  	sd	a0, -0x120(s0)
8020a07a: 8c 65        	ld	a1, 0x8(a1)
8020a07c: 23 34 b4 ee  	sd	a1, -0x118(s0)
8020a080: 63 65 b5 02  	bltu	a0, a1, 0x8020a0aa <.Lpcrel_hi6+0x114>
8020a084: b5 a8        	j	0x8020a100 <.Lpcrel_hi6+0x16a>
8020a086: 83 35 04 f4  	ld	a1, -0xc0(s0)
;         for output in outputs.iter() {
8020a08a: 03 35 84 f7  	ld	a0, -0x88(s0)
8020a08e: 23 34 a4 ec  	sd	a0, -0x138(s0)
8020a092: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             let desc = &mut self.desc[self.free_head as usize];
8020a096: 03 d5 85 03  	lhu	a0, 0x38(a1)
8020a09a: 23 38 a4 ec  	sd	a0, -0x130(s0)
8020a09e: 8c 65        	ld	a1, 0x8(a1)
8020a0a0: 23 3c b4 ec  	sd	a1, -0x128(s0)
8020a0a4: 63 6d b5 1a  	bltu	a0, a1, 0x8020a25e <.Lpcrel_hi14+0x28>
8020a0a8: 15 a4        	j	0x8020a2cc <.Lpcrel_hi14+0x96>
8020a0aa: 83 35 04 ee  	ld	a1, -0x120(s0)
8020a0ae: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             let desc = &mut self.desc[last as usize];
8020a0b2: 08 61        	ld	a0, 0x0(a0)
8020a0b4: 92 05        	slli	a1, a1, 0x4
8020a0b6: 2e 95        	add	a0, a0, a1
8020a0b8: 23 3c a4 fa  	sd	a0, -0x48(s0)
;             let mut flags = desc.flags.read();
8020a0bc: 31 05        	addi	a0, a0, 0xc
8020a0be: 23 3c a4 ea  	sd	a0, -0x148(s0)
8020a0c2: 97 70 ff ff  	auipc	ra, 0xffff7
8020a0c6: e7 80 e0 03  	jalr	0x3e(ra) <ekernel+0xffcb4100>
8020a0ca: 23 12 a4 f8  	sh	a0, -0x7c(s0)
8020a0ce: 13 05 44 f8  	addi	a0, s0, -0x7c
8020a0d2: 85 45        	li	a1, 0x1
;             flags.remove(DescFlags::NEXT);
8020a0d4: 97 b0 00 00  	auipc	ra, 0xb
8020a0d8: e7 80 e0 55  	jalr	0x55e(ra) <_ZN14virtio_drivers5queue9DescFlags6remove17hdc9d5875df047f92E>
8020a0dc: 03 35 84 eb  	ld	a0, -0x148(s0)
;             desc.flags.write(flags);
8020a0e0: 83 15 44 f8  	lh	a1, -0x7c(s0)
8020a0e4: 97 70 ff ff  	auipc	ra, 0xffff7
8020a0e8: e7 80 00 09  	jalr	0x90(ra) <ekernel+0xffcb4174>
8020a0ec: 03 35 04 f2  	ld	a0, -0xe0(s0)
8020a0f0: 83 35 04 f3  	ld	a1, -0xd0(s0)
;         self.num_used += (inputs.len() + outputs.len()) as u16;
8020a0f4: 2e 95        	add	a0, a0, a1
8020a0f6: 23 30 a4 ec  	sd	a0, -0x140(s0)
8020a0fa: 63 6f b5 02  	bltu	a0, a1, 0x8020a138 <.Lpcrel_hi8>
8020a0fe: 29 a8        	j	0x8020a118 <.Lpcrel_hi7+0x10>
8020a100: 83 35 84 ee  	ld	a1, -0x118(s0)
8020a104: 03 35 04 ee  	ld	a0, -0x120(s0)

000000008020a108 <.Lpcrel_hi7>:
;             let desc = &mut self.desc[last as usize];
8020a108: 17 b6 02 00  	auipc	a2, 0x2b
8020a10c: 13 06 86 ab  	addi	a2, a2, -0x548
8020a110: 97 60 02 00  	auipc	ra, 0x26
8020a114: e7 80 00 1a  	jalr	0x1a0(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8020a118: 83 35 04 f4  	ld	a1, -0xc0(s0)
8020a11c: 03 36 04 ec  	ld	a2, -0x140(s0)
8020a120: 41 65        	lui	a0, 0x10
8020a122: 7d 35        	addiw	a0, a0, -0x1
;         self.num_used += (inputs.len() + outputs.len()) as u16;
8020a124: 69 8e        	and	a2, a2, a0
8020a126: 83 d5 65 03  	lhu	a1, 0x36(a1)
8020a12a: b2 95        	add	a1, a1, a2
8020a12c: 23 38 b4 ea  	sd	a1, -0x150(s0)
8020a130: 6d 8d        	and	a0, a0, a1
8020a132: 63 12 b5 04  	bne	a0, a1, 0x8020a176 <.Lpcrel_hi10>
8020a136: 31 a8        	j	0x8020a152 <.Lpcrel_hi9+0x12>

000000008020a138 <.Lpcrel_hi8>:
8020a138: 17 b5 02 00  	auipc	a0, 0x2b
8020a13c: 13 05 85 a6  	addi	a0, a0, -0x598

000000008020a140 <.Lpcrel_hi9>:
8020a140: 97 b5 02 00  	auipc	a1, 0x2b
8020a144: 13 86 85 a9  	addi	a2, a1, -0x568
8020a148: f1 45        	li	a1, 0x1c
8020a14a: 97 60 02 00  	auipc	ra, 0x26
8020a14e: e7 80 e0 0c  	jalr	0xce(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020a152: 03 35 04 f4  	ld	a0, -0xc0(s0)
8020a156: 83 35 04 eb  	ld	a1, -0x150(s0)
;         self.num_used += (inputs.len() + outputs.len()) as u16;
8020a15a: 23 1b b5 02  	sh	a1, 0x36(a0)
;         let avail_slot = self.avail_idx & (self.queue_size - 1);
8020a15e: 83 55 a5 03  	lhu	a1, 0x3a(a0)
8020a162: 23 30 b4 ea  	sd	a1, -0x160(s0)
8020a166: 03 55 45 03  	lhu	a0, 0x34(a0)
8020a16a: 93 05 f5 ff  	addi	a1, a0, -0x1
8020a16e: 23 34 b4 ea  	sd	a1, -0x158(s0)
8020a172: 1d cd        	beqz	a0, 0x8020a1b0 <.Lpcrel_hi12>
8020a174: 31 a8        	j	0x8020a190 <.Lpcrel_hi11+0x12>

000000008020a176 <.Lpcrel_hi10>:
;         self.num_used += (inputs.len() + outputs.len()) as u16;
8020a176: 17 b5 02 00  	auipc	a0, 0x2b
8020a17a: 13 05 a5 a2  	addi	a0, a0, -0x5d6

000000008020a17e <.Lpcrel_hi11>:
8020a17e: 97 b5 02 00  	auipc	a1, 0x2b
8020a182: 13 86 25 a7  	addi	a2, a1, -0x58e
8020a186: f1 45        	li	a1, 0x1c
8020a188: 97 60 02 00  	auipc	ra, 0x26
8020a18c: e7 80 00 09  	jalr	0x90(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020a190: 03 35 04 ea  	ld	a0, -0x160(s0)
8020a194: 83 35 84 ea  	ld	a1, -0x158(s0)
;         let avail_slot = self.avail_idx & (self.queue_size - 1);
8020a198: 6d 8d        	and	a0, a0, a1
8020a19a: 23 13 a4 fc  	sh	a0, -0x3a(s0)
8020a19e: 42 15        	slli	a0, a0, 0x30
8020a1a0: 41 91        	srli	a0, a0, 0x30
8020a1a2: 23 3c a4 e8  	sd	a0, -0x168(s0)
8020a1a6: 93 05 00 02  	li	a1, 0x20
;         self.avail.ring[avail_slot as usize].write(head);
8020a1aa: 63 61 b5 02  	bltu	a0, a1, 0x8020a1cc <.Lpcrel_hi13+0x14>
8020a1ae: 51 a0        	j	0x8020a232 <.Lpcrel_hi13+0x7a>

000000008020a1b0 <.Lpcrel_hi12>:
;         let avail_slot = self.avail_idx & (self.queue_size - 1);
8020a1b0: 17 b5 02 00  	auipc	a0, 0x2b
8020a1b4: 13 05 05 9b  	addi	a0, a0, -0x650

000000008020a1b8 <.Lpcrel_hi13>:
8020a1b8: 97 b5 02 00  	auipc	a1, 0x2b
8020a1bc: 13 86 05 a5  	addi	a2, a1, -0x5b0
8020a1c0: 93 05 10 02  	li	a1, 0x21
8020a1c4: 97 60 02 00  	auipc	ra, 0x26
8020a1c8: e7 80 40 05  	jalr	0x54(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020a1cc: 83 35 84 f0  	ld	a1, -0xf8(s0)
8020a1d0: 03 35 04 f4  	ld	a0, -0xc0(s0)
8020a1d4: 03 36 84 e9  	ld	a2, -0x168(s0)
;         self.avail.ring[avail_slot as usize].write(head);
8020a1d8: 08 69        	ld	a0, 0x10(a0)
8020a1da: 06 06        	slli	a2, a2, 0x1
8020a1dc: 32 95        	add	a0, a0, a2
8020a1de: 11 05        	addi	a0, a0, 0x4
8020a1e0: 97 70 ff ff  	auipc	ra, 0xffff7
8020a1e4: e7 80 40 f7  	jalr	-0x8c(ra) <ekernel+0xffcb4154>
8020a1e8: 11 45        	li	a0, 0x4
;         fence(Ordering::SeqCst);
8020a1ea: a3 03 a4 f8  	sb	a0, -0x79(s0)
8020a1ee: 03 45 74 f8  	lbu	a0, -0x79(s0)
8020a1f2: 97 c0 00 00  	auipc	ra, 0xc
8020a1f6: e7 80 60 d1  	jalr	-0x2ea(ra) <_ZN4core4sync6atomic5fence17h5a13a54df8cf9d31E>
8020a1fa: 83 35 04 f4  	ld	a1, -0xc0(s0)
;         self.avail_idx = self.avail_idx.wrapping_add(1);
8020a1fe: 03 95 a5 03  	lh	a0, 0x3a(a1)
8020a202: 23 16 a4 fe  	sh	a0, -0x14(s0)
8020a206: 05 46        	li	a2, 0x1
8020a208: 23 17 c4 fe  	sh	a2, -0x12(s0)
;             intrinsics::wrapping_add(self, rhs)
8020a20c: 05 25        	addiw	a0, a0, 0x1
;         self.avail_idx = self.avail_idx.wrapping_add(1);
8020a20e: 23 9d a5 02  	sh	a0, 0x3a(a1)
;         self.avail.idx.write(self.avail_idx);
8020a212: 88 69        	ld	a0, 0x10(a1)
8020a214: 09 05        	addi	a0, a0, 0x2
8020a216: 83 95 a5 03  	lh	a1, 0x3a(a1)
8020a21a: 97 70 ff ff  	auipc	ra, 0xffff7
8020a21e: e7 80 a0 f3  	jalr	-0xc6(ra) <ekernel+0xffcb4154>
8020a222: 03 35 84 f0  	ld	a0, -0xf8(s0)
;         Ok(head)
8020a226: 23 15 a4 f4  	sh	a0, -0xb6(s0)
8020a22a: 01 45        	li	a0, 0x0
8020a22c: 23 04 a4 f4  	sb	a0, -0xb8(s0)
;     }
8020a230: 29 a8        	j	0x8020a24a <.Lpcrel_hi14+0x14>
8020a232: 03 35 84 e9  	ld	a0, -0x168(s0)

000000008020a236 <.Lpcrel_hi14>:
;         self.avail.ring[avail_slot as usize].write(head);
8020a236: 97 b5 02 00  	auipc	a1, 0x2b
8020a23a: 13 86 a5 9e  	addi	a2, a1, -0x616
8020a23e: 93 05 00 02  	li	a1, 0x20
8020a242: 97 60 02 00  	auipc	ra, 0x26
8020a246: e7 80 e0 06  	jalr	0x6e(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
;     }
8020a24a: 03 15 a4 f4  	lh	a0, -0xb6(s0)
8020a24e: 42 05        	slli	a0, a0, 0x10
8020a250: 83 55 84 f4  	lhu	a1, -0xb8(s0)
8020a254: 4d 8d        	or	a0, a0, a1
8020a256: f6 70        	ld	ra, 0x178(sp)
8020a258: 56 74        	ld	s0, 0x170(sp)
8020a25a: 19 61        	addi	sp, sp, 0x180
8020a25c: 82 80        	ret
8020a25e: 03 35 04 f4  	ld	a0, -0xc0(s0)
8020a262: 03 36 84 ec  	ld	a2, -0x138(s0)
8020a266: 83 35 04 ed  	ld	a1, -0x130(s0)
;             let desc = &mut self.desc[self.free_head as usize];
8020a26a: 08 61        	ld	a0, 0x0(a0)
8020a26c: 92 05        	slli	a1, a1, 0x4
8020a26e: 2e 95        	add	a0, a0, a1
8020a270: 23 38 a4 e8  	sd	a0, -0x170(s0)
8020a274: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             desc.set_buf::<H>(output);
8020a278: 0c 62        	ld	a1, 0x0(a2)
8020a27a: 10 66        	ld	a2, 0x8(a2)
8020a27c: 97 00 00 00  	auipc	ra, 0x0
8020a280: e7 80 40 ae  	jalr	-0x51c(ra) <_ZN14virtio_drivers5queue10Descriptor7set_buf17h2346af91c7464e82E>
8020a284: 03 35 04 e9  	ld	a0, -0x170(s0)
;             desc.flags.write(DescFlags::NEXT | DescFlags::WRITE);
8020a288: 31 05        	addi	a0, a0, 0xc
8020a28a: 23 34 a4 e8  	sd	a0, -0x178(s0)
8020a28e: 05 45        	li	a0, 0x1
8020a290: 89 45        	li	a1, 0x2
8020a292: 97 b0 00 00  	auipc	ra, 0xb
8020a296: e7 80 c0 3f  	jalr	0x3fc(ra) <_ZN74_$LT$virtio_drivers..queue..DescFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17he72016ea509cbf84E>
8020a29a: aa 85        	mv	a1, a0
8020a29c: 03 35 84 e8  	ld	a0, -0x178(s0)
8020a2a0: 97 70 ff ff  	auipc	ra, 0xffff7
8020a2a4: e7 80 40 ed  	jalr	-0x12c(ra) <ekernel+0xffcb4174>
8020a2a8: 03 35 04 e9  	ld	a0, -0x170(s0)
8020a2ac: 83 35 04 f4  	ld	a1, -0xc0(s0)
;             last = self.free_head;
8020a2b0: 83 95 85 03  	lh	a1, 0x38(a1)
8020a2b4: 23 17 b4 f4  	sh	a1, -0xb2(s0)
;             self.free_head = desc.next.read();
8020a2b8: 39 05        	addi	a0, a0, 0xe
8020a2ba: 97 70 ff ff  	auipc	ra, 0xffff7
8020a2be: e7 80 20 e6  	jalr	-0x19e(ra) <ekernel+0xffcb411c>
8020a2c2: 83 35 04 f4  	ld	a1, -0xc0(s0)
8020a2c6: 23 9c a5 02  	sh	a0, 0x38(a1)
;         for output in outputs.iter() {
8020a2ca: 71 b3        	j	0x8020a056 <.Lpcrel_hi6+0xc0>
8020a2cc: 83 35 84 ed  	ld	a1, -0x128(s0)
8020a2d0: 03 35 04 ed  	ld	a0, -0x130(s0)

000000008020a2d4 <.Lpcrel_hi15>:
;             let desc = &mut self.desc[self.free_head as usize];
8020a2d4: 17 b6 02 00  	auipc	a2, 0x2b
8020a2d8: 13 06 46 96  	addi	a2, a2, -0x69c
8020a2dc: 97 60 02 00  	auipc	ra, 0x26
8020a2e0: e7 80 40 fd  	jalr	-0x2c(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8020a2e4: 03 35 04 f4  	ld	a0, -0xc0(s0)
8020a2e8: 03 36 04 ef  	ld	a2, -0x110(s0)
8020a2ec: 83 35 84 ef  	ld	a1, -0x108(s0)
;             let desc = &mut self.desc[self.free_head as usize];
8020a2f0: 08 61        	ld	a0, 0x0(a0)
8020a2f2: 92 05        	slli	a1, a1, 0x4
8020a2f4: 2e 95        	add	a0, a0, a1
8020a2f6: 23 30 a4 e8  	sd	a0, -0x180(s0)
8020a2fa: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             desc.set_buf::<H>(input);
8020a2fe: 0c 62        	ld	a1, 0x0(a2)
8020a300: 10 66        	ld	a2, 0x8(a2)
8020a302: 97 00 00 00  	auipc	ra, 0x0
8020a306: e7 80 e0 a5  	jalr	-0x5a2(ra) <_ZN14virtio_drivers5queue10Descriptor7set_buf17h2346af91c7464e82E>
8020a30a: 03 35 04 e8  	ld	a0, -0x180(s0)
;             desc.flags.write(DescFlags::NEXT);
8020a30e: 31 05        	addi	a0, a0, 0xc
8020a310: 85 45        	li	a1, 0x1
8020a312: 97 70 ff ff  	auipc	ra, 0xffff7
8020a316: e7 80 20 e6  	jalr	-0x19e(ra) <ekernel+0xffcb4174>
8020a31a: 03 35 04 e8  	ld	a0, -0x180(s0)
8020a31e: 83 35 04 f4  	ld	a1, -0xc0(s0)
;             last = self.free_head;
8020a322: 83 95 85 03  	lh	a1, 0x38(a1)
8020a326: 23 17 b4 f4  	sh	a1, -0xb2(s0)
;             self.free_head = desc.next.read();
8020a32a: 39 05        	addi	a0, a0, 0xe
8020a32c: 97 70 ff ff  	auipc	ra, 0xffff7
8020a330: e7 80 00 df  	jalr	-0x210(ra) <ekernel+0xffcb411c>
8020a334: 83 35 04 f4  	ld	a1, -0xc0(s0)
8020a338: 23 9c a5 02  	sh	a0, 0x38(a1)
;         for input in inputs.iter() {
8020a33c: 75 b9        	j	0x80209ff8 <.Lpcrel_hi6+0x62>
8020a33e: 83 35 04 f0  	ld	a1, -0x100(s0)
8020a342: 03 35 84 ef  	ld	a0, -0x108(s0)

000000008020a346 <.Lpcrel_hi16>:
;             let desc = &mut self.desc[self.free_head as usize];
8020a346: 17 b6 02 00  	auipc	a2, 0x2b
8020a34a: 13 06 a6 90  	addi	a2, a2, -0x6f6
8020a34e: 97 60 02 00  	auipc	ra, 0x26
8020a352: e7 80 20 f6  	jalr	-0x9e(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008020a356 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3new17hd011036e4700a688E>:
;     pub fn new(header: &mut VirtIOHeader, idx: usize, size: u16) -> Result<Self> {
8020a356: 25 71        	addi	sp, sp, -0x1a0
8020a358: 06 ef        	sd	ra, 0x198(sp)
8020a35a: 22 eb        	sd	s0, 0x190(sp)
8020a35c: 00 13        	addi	s0, sp, 0x1a0
8020a35e: 23 38 c4 ec  	sd	a2, -0x130(s0)
8020a362: 2e 86        	mv	a2, a1
8020a364: 83 35 04 ed  	ld	a1, -0x130(s0)
8020a368: 23 3c c4 ec  	sd	a2, -0x128(s0)
8020a36c: 2a 86        	mv	a2, a0
8020a36e: 03 35 84 ed  	ld	a0, -0x128(s0)
8020a372: 23 30 c4 ee  	sd	a2, -0x120(s0)
8020a376: 36 86        	mv	a2, a3
8020a378: 23 34 c4 ee  	sd	a2, -0x118(s0)
8020a37c: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020a380: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020a384: 23 1b d4 fa  	sh	a3, -0x4a(s0)
;         if header.queue_used(idx as u32) {
8020a388: 97 00 01 00  	auipc	ra, 0x10
8020a38c: e7 80 a0 e5  	jalr	-0x1a6(ra) <_ZN14virtio_drivers6header12VirtIOHeader10queue_used17h69a7c10f25ca91deE>
8020a390: 31 e5        	bnez	a0, 0x8020a3dc <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3new17hd011036e4700a688E+0x86>
8020a392: 09 a0        	j	0x8020a394 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3new17hd011036e4700a688E+0x3e>
8020a394: 03 35 84 ee  	ld	a0, -0x118(s0)
8020a398: 23 16 a4 fe  	sh	a0, -0x14(s0)
;             intrinsics::ctpop(self as $ActualT) as u32
8020a39c: 93 55 15 00  	srli	a1, a0, 0x1
8020a3a0: 15 66        	lui	a2, 0x5
8020a3a2: 1b 06 56 55  	addiw	a2, a2, 0x555
8020a3a6: f1 8d        	and	a1, a1, a2
8020a3a8: b3 05 b5 40  	sub	a1, a0, a1
8020a3ac: 0d 65        	lui	a0, 0x3
8020a3ae: 1b 06 35 33  	addiw	a2, a0, 0x333
8020a3b2: 33 f5 c5 00  	and	a0, a1, a2
8020a3b6: 89 81        	srli	a1, a1, 0x2
8020a3b8: f1 8d        	and	a1, a1, a2
8020a3ba: 2e 95        	add	a0, a0, a1
8020a3bc: 93 55 45 00  	srli	a1, a0, 0x4
8020a3c0: a9 9d        	addw	a1, a1, a0
8020a3c2: 13 f5 f5 00  	andi	a0, a1, 0xf
8020a3c6: d2 15        	slli	a1, a1, 0x34
8020a3c8: f1 91        	srli	a1, a1, 0x3c
8020a3ca: 2d 9d        	addw	a0, a0, a1
8020a3cc: 23 17 a4 fe  	sh	a0, -0x12(s0)
8020a3d0: 03 55 e4 fe  	lhu	a0, -0x12(s0)
8020a3d4: 85 45        	li	a1, 0x1
;         if !size.is_power_of_two() || header.max_queue_size() < size as u32 {
8020a3d6: 63 0b b5 02  	beq	a0, a1, 0x8020a40c <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3new17hd011036e4700a688E+0xb6>
8020a3da: 29 a8        	j	0x8020a3f4 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3new17hd011036e4700a688E+0x9e>
8020a3dc: 83 35 04 ee  	ld	a1, -0x120(s0)
8020a3e0: 09 45        	li	a0, 0x2
;             return Err(Error::AlreadyUsed);
8020a3e2: 23 0b a4 ee  	sb	a0, -0x10a(s0)
8020a3e6: 03 45 64 ef  	lbu	a0, -0x10a(s0)
8020a3ea: 23 84 a5 00  	sb	a0, 0x8(a1)
8020a3ee: 01 45        	li	a0, 0x0
8020a3f0: 88 e1        	sd	a0, 0x0(a1)
; #![no_std]
8020a3f2: 7d a4        	j	0x8020a6a0 <.Lpcrel_hi23+0xd4>
8020a3f4: 83 35 04 ee  	ld	a1, -0x120(s0)
8020a3f8: 0d 45        	li	a0, 0x3
;             return Err(Error::InvalidParam);
8020a3fa: a3 0b a4 ee  	sb	a0, -0x109(s0)
8020a3fe: 03 45 74 ef  	lbu	a0, -0x109(s0)
8020a402: 23 84 a5 00  	sb	a0, 0x8(a1)
8020a406: 01 45        	li	a0, 0x0
8020a408: 88 e1        	sd	a0, 0x0(a1)
; #![no_std]
8020a40a: 59 ac        	j	0x8020a6a0 <.Lpcrel_hi23+0xd4>
8020a40c: 03 35 84 ed  	ld	a0, -0x128(s0)
;         if !size.is_power_of_two() || header.max_queue_size() < size as u32 {
8020a410: 97 00 01 00  	auipc	ra, 0x10
8020a414: e7 80 80 df  	jalr	-0x208(ra) <_ZN14virtio_drivers6header12VirtIOHeader14max_queue_size17hd0e0465849e20f14E>
8020a418: 83 35 84 ee  	ld	a1, -0x118(s0)
8020a41c: 01 25        	sext.w	a0, a0
8020a41e: c2 15        	slli	a1, a1, 0x30
8020a420: c1 91        	srli	a1, a1, 0x30
8020a422: e3 69 b5 fc  	bltu	a0, a1, 0x8020a3f4 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3new17hd011036e4700a688E+0x9e>
8020a426: 09 a0        	j	0x8020a428 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3new17hd011036e4700a688E+0xd2>
8020a428: 83 35 84 ee  	ld	a1, -0x118(s0)
8020a42c: 13 05 84 ef  	addi	a0, s0, -0x108
;         let layout = VirtQueueLayout::new(size);
8020a430: 97 00 01 00  	auipc	ra, 0x10
8020a434: e7 80 e0 e5  	jalr	-0x1a2(ra) <_ZN14virtio_drivers5queue15VirtQueueLayout3new17hc96b76ce604eb761E>
;         let dma = DMA::new(layout.size / PAGE_SIZE)?;
8020a438: 03 35 84 f0  	ld	a0, -0xf8(s0)
8020a43c: 93 55 c5 00  	srli	a1, a0, 0xc
8020a440: 13 05 84 f3  	addi	a0, s0, -0xc8
8020a444: 23 34 a4 ec  	sd	a0, -0x138(s0)
8020a448: 97 c0 ff ff  	auipc	ra, 0xffffc
8020a44c: e7 80 40 86  	jalr	-0x79c(ra) <ekernel+0xffcb8cac>
8020a450: 83 35 84 ec  	ld	a1, -0x138(s0)
8020a454: 13 05 04 f2  	addi	a0, s0, -0xe0
8020a458: 97 70 ff ff  	auipc	ra, 0xffff7
8020a45c: e7 80 00 04  	jalr	0x40(ra) <ekernel+0xffcb4498>
8020a460: 03 45 04 f2  	lbu	a0, -0xe0(s0)
8020a464: 05 89        	andi	a0, a0, 0x1
8020a466: 41 ed        	bnez	a0, 0x8020a4fe <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3new17hd011036e4700a688E+0x1a8>
8020a468: 09 a0        	j	0x8020a46a <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$3new17hd011036e4700a688E+0x114>
8020a46a: 83 35 84 f2  	ld	a1, -0xd8(s0)
8020a46e: 03 35 04 f3  	ld	a0, -0xd0(s0)
8020a472: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020a476: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020a47a: 23 38 b4 f0  	sd	a1, -0xf0(s0)
8020a47e: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020a482: 13 05 04 f1  	addi	a0, s0, -0xf0
8020a486: 23 34 a4 ea  	sd	a0, -0x158(s0)
;         header.queue_set(idx as u32, size as u32, PAGE_SIZE as u32, dma.pfn());
8020a48a: 97 c0 ff ff  	auipc	ra, 0xffffc
8020a48e: e7 80 40 8a  	jalr	-0x75c(ra) <ekernel+0xffcb8d2e>
8020a492: 03 36 84 ee  	ld	a2, -0x118(s0)
8020a496: 83 35 04 ed  	ld	a1, -0x130(s0)
8020a49a: 2a 87        	mv	a4, a0
8020a49c: 03 35 84 ed  	ld	a0, -0x128(s0)
8020a4a0: 42 16        	slli	a2, a2, 0x30
8020a4a2: 41 92        	srli	a2, a2, 0x30
8020a4a4: 23 30 c4 ea  	sd	a2, -0x160(s0)
8020a4a8: 85 66        	lui	a3, 0x1
8020a4aa: 97 00 01 00  	auipc	ra, 0x10
8020a4ae: e7 80 40 c8  	jalr	-0x37c(ra) <_ZN14virtio_drivers6header12VirtIOHeader9queue_set17h08d3929779f948acE>
8020a4b2: 03 35 84 ea  	ld	a0, -0x158(s0)
;             unsafe { slice::from_raw_parts_mut(dma.vaddr() as *mut Descriptor, size as usize) };
8020a4b6: 97 c0 ff ff  	auipc	ra, 0xffffc
8020a4ba: e7 80 00 89  	jalr	-0x770(ra) <ekernel+0xffcb8d46>
8020a4be: 83 35 04 ea  	ld	a1, -0x160(s0)
8020a4c2: 97 20 00 00  	auipc	ra, 0x2
8020a4c6: e7 80 40 9b  	jalr	-0x64c(ra) <_ZN4core5slice3raw18from_raw_parts_mut17hea9fb0299d895b2cE>
8020a4ca: 2a 86        	mv	a2, a0
8020a4cc: 03 35 84 ea  	ld	a0, -0x158(s0)
8020a4d0: b2 86        	mv	a3, a2
8020a4d2: 23 38 d4 ea  	sd	a3, -0x150(s0)
8020a4d6: ae 86        	mv	a3, a1
8020a4d8: 23 3c d4 ea  	sd	a3, -0x148(s0)
8020a4dc: 23 34 c4 fc  	sd	a2, -0x38(s0)
8020a4e0: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         let avail = unsafe { &mut *((dma.vaddr() + layout.avail_offset) as *mut AvailRing) };
8020a4e4: 97 c0 ff ff  	auipc	ra, 0xffffc
8020a4e8: e7 80 20 86  	jalr	-0x79e(ra) <ekernel+0xffcb8d46>
8020a4ec: aa 85        	mv	a1, a0
8020a4ee: 03 35 84 ef  	ld	a0, -0x108(s0)
8020a4f2: 2e 95        	add	a0, a0, a1
8020a4f4: 23 30 a4 ec  	sd	a0, -0x140(s0)
8020a4f8: 63 68 b5 04  	bltu	a0, a1, 0x8020a548 <.Lpcrel_hi18>
8020a4fc: 05 a0        	j	0x8020a51c <.Lpcrel_hi17+0x12>
8020a4fe: 03 35 04 ee  	ld	a0, -0x120(s0)
;         let dma = DMA::new(layout.size / PAGE_SIZE)?;
8020a502: 83 45 14 f2  	lbu	a1, -0xdf(s0)
8020a506: a3 05 b4 fe  	sb	a1, -0x15(s0)

000000008020a50a <.Lpcrel_hi17>:
8020a50a: 17 a6 02 00  	auipc	a2, 0x2a
8020a50e: 13 06 66 7d  	addi	a2, a2, 0x7d6
8020a512: 97 70 ff ff  	auipc	ra, 0xffff7
8020a516: e7 80 c0 cf  	jalr	-0x304(ra) <ekernel+0xffcb420e>
8020a51a: 59 a2        	j	0x8020a6a0 <.Lpcrel_hi23+0xd4>
8020a51c: 03 35 04 ec  	ld	a0, -0x140(s0)
;         let avail = unsafe { &mut *((dma.vaddr() + layout.avail_offset) as *mut AvailRing) };
8020a520: aa 85        	mv	a1, a0
8020a522: 23 38 b4 e8  	sd	a1, -0x170(s0)
8020a526: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020a52a: 13 05 04 f1  	addi	a0, s0, -0xf0
;         let used = unsafe { &mut *((dma.vaddr() + layout.used_offset) as *mut UsedRing) };
8020a52e: 97 c0 ff ff  	auipc	ra, 0xffffc
8020a532: e7 80 80 81  	jalr	-0x7e8(ra) <ekernel+0xffcb8d46>
8020a536: aa 85        	mv	a1, a0
8020a538: 03 35 04 f0  	ld	a0, -0x100(s0)
8020a53c: 2e 95        	add	a0, a0, a1
8020a53e: 23 3c a4 e8  	sd	a0, -0x168(s0)
8020a542: 63 60 b5 04  	bltu	a0, a1, 0x8020a582 <.Lpcrel_hi20>
8020a546: 31 a8        	j	0x8020a562 <.Lpcrel_hi19+0x12>

000000008020a548 <.Lpcrel_hi18>:
;         let avail = unsafe { &mut *((dma.vaddr() + layout.avail_offset) as *mut AvailRing) };
8020a548: 17 a5 02 00  	auipc	a0, 0x2a
8020a54c: 13 05 85 65  	addi	a0, a0, 0x658

000000008020a550 <.Lpcrel_hi19>:
8020a550: 97 a5 02 00  	auipc	a1, 0x2a
8020a554: 13 86 85 71  	addi	a2, a1, 0x718
8020a558: f1 45        	li	a1, 0x1c
8020a55a: 97 60 02 00  	auipc	ra, 0x26
8020a55e: e7 80 e0 cb  	jalr	-0x342(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020a562: 03 35 84 ee  	ld	a0, -0x118(s0)
8020a566: 83 35 84 e9  	ld	a1, -0x168(s0)
;         let used = unsafe { &mut *((dma.vaddr() + layout.used_offset) as *mut UsedRing) };
8020a56a: 2e 86        	mv	a2, a1
8020a56c: 23 30 c4 e8  	sd	a2, -0x180(s0)
8020a570: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         for i in 0..(size - 1) {
8020a574: 93 05 f5 ff  	addi	a1, a0, -0x1
8020a578: 23 34 b4 e8  	sd	a1, -0x178(s0)
8020a57c: 42 15        	slli	a0, a0, 0x30
8020a57e: 39 c1        	beqz	a0, 0x8020a5c4 <.Lpcrel_hi22>
8020a580: 31 a8        	j	0x8020a59c <.Lpcrel_hi21+0x12>

000000008020a582 <.Lpcrel_hi20>:
;         let used = unsafe { &mut *((dma.vaddr() + layout.used_offset) as *mut UsedRing) };
8020a582: 17 a5 02 00  	auipc	a0, 0x2a
8020a586: 13 05 e5 61  	addi	a0, a0, 0x61e

000000008020a58a <.Lpcrel_hi21>:
8020a58a: 97 a5 02 00  	auipc	a1, 0x2a
8020a58e: 13 86 65 6f  	addi	a2, a1, 0x6f6
8020a592: f1 45        	li	a1, 0x1c
8020a594: 97 60 02 00  	auipc	ra, 0x26
8020a598: e7 80 40 c8  	jalr	-0x37c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020a59c: 03 35 84 e8  	ld	a0, -0x178(s0)
8020a5a0: 81 45        	li	a1, 0x0
;         for i in 0..(size - 1) {
8020a5a2: 23 1a b4 f4  	sh	a1, -0xac(s0)
8020a5a6: 23 1b a4 f4  	sh	a0, -0xaa(s0)
8020a5aa: 83 15 64 f5  	lh	a1, -0xaa(s0)
8020a5ae: 03 15 44 f5  	lh	a0, -0xac(s0)
8020a5b2: 97 b0 ff ff  	auipc	ra, 0xffffb
8020a5b6: e7 80 80 5f  	jalr	0x5f8(ra) <ekernel+0xffcb8baa>
8020a5ba: 23 1c a4 f4  	sh	a0, -0xa8(s0)
8020a5be: 23 1d b4 f4  	sh	a1, -0xa6(s0)
8020a5c2: 39 a8        	j	0x8020a5e0 <.Lpcrel_hi23+0x14>

000000008020a5c4 <.Lpcrel_hi22>:
8020a5c4: 17 a5 02 00  	auipc	a0, 0x2a
8020a5c8: 13 05 c5 59  	addi	a0, a0, 0x59c

000000008020a5cc <.Lpcrel_hi23>:
8020a5cc: 97 a5 02 00  	auipc	a1, 0x2a
8020a5d0: 13 86 c5 6c  	addi	a2, a1, 0x6cc
8020a5d4: 93 05 10 02  	li	a1, 0x21
8020a5d8: 97 60 02 00  	auipc	ra, 0x26
8020a5dc: e7 80 00 c4  	jalr	-0x3c0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020a5e0: 13 05 84 f5  	addi	a0, s0, -0xa8
;         for i in 0..(size - 1) {
8020a5e4: 97 b0 ff ff  	auipc	ra, 0xffffb
8020a5e8: e7 80 80 3e  	jalr	0x3e8(ra) <ekernel+0xffcb89cc>
8020a5ec: 23 1e a4 f4  	sh	a0, -0xa4(s0)
8020a5f0: 23 1f b4 f4  	sh	a1, -0xa2(s0)
8020a5f4: 03 55 c4 f5  	lhu	a0, -0xa4(s0)
8020a5f8: 51 e5        	bnez	a0, 0x8020a684 <.Lpcrel_hi23+0xb8>
8020a5fa: 09 a0        	j	0x8020a5fc <.Lpcrel_hi23+0x30>
8020a5fc: 83 35 04 ee  	ld	a1, -0x120(s0)
8020a600: 03 35 84 ee  	ld	a0, -0x118(s0)
8020a604: 03 36 04 ed  	ld	a2, -0x130(s0)
8020a608: 83 36 04 e8  	ld	a3, -0x180(s0)
8020a60c: 03 37 04 e9  	ld	a4, -0x170(s0)
8020a610: 83 37 84 eb  	ld	a5, -0x148(s0)
8020a614: 03 38 04 eb  	ld	a6, -0x150(s0)
;             dma,
8020a618: 83 32 04 f1  	ld	t0, -0xf0(s0)
8020a61c: 83 38 84 f1  	ld	a7, -0xe8(s0)
;         Ok(VirtQueue {
8020a620: 23 30 54 f8  	sd	t0, -0x80(s0)
8020a624: 23 34 14 f9  	sd	a7, -0x78(s0)
8020a628: 23 30 04 f7  	sd	a6, -0xa0(s0)
8020a62c: 23 34 f4 f6  	sd	a5, -0x98(s0)
8020a630: 23 38 e4 f6  	sd	a4, -0x90(s0)
8020a634: 23 3c d4 f6  	sd	a3, -0x88(s0)
8020a638: 23 28 c4 f8  	sw	a2, -0x70(s0)
8020a63c: 23 1a a4 f8  	sh	a0, -0x6c(s0)
8020a640: 01 45        	li	a0, 0x0
8020a642: 23 1b a4 f8  	sh	a0, -0x6a(s0)
8020a646: 23 1c a4 f8  	sh	a0, -0x68(s0)
8020a64a: 23 1d a4 f8  	sh	a0, -0x66(s0)
8020a64e: 23 1e a4 f8  	sh	a0, -0x64(s0)
8020a652: 03 35 84 f9  	ld	a0, -0x68(s0)
8020a656: 88 fd        	sd	a0, 0x38(a1)
8020a658: 03 35 04 f9  	ld	a0, -0x70(s0)
8020a65c: 88 f9        	sd	a0, 0x30(a1)
8020a65e: 03 35 84 f8  	ld	a0, -0x78(s0)
8020a662: 88 f5        	sd	a0, 0x28(a1)
8020a664: 03 35 04 f8  	ld	a0, -0x80(s0)
8020a668: 88 f1        	sd	a0, 0x20(a1)
8020a66a: 03 35 84 f7  	ld	a0, -0x88(s0)
8020a66e: 88 ed        	sd	a0, 0x18(a1)
8020a670: 03 35 04 f7  	ld	a0, -0x90(s0)
8020a674: 88 e9        	sd	a0, 0x10(a1)
8020a676: 03 35 84 f6  	ld	a0, -0x98(s0)
8020a67a: 88 e5        	sd	a0, 0x8(a1)
8020a67c: 03 35 04 f6  	ld	a0, -0xa0(s0)
8020a680: 88 e1        	sd	a0, 0x0(a1)
;     }
8020a682: 39 a8        	j	0x8020a6a0 <.Lpcrel_hi23+0xd4>
8020a684: 83 35 84 eb  	ld	a1, -0x148(s0)
;         for i in 0..(size - 1) {
8020a688: 03 55 e4 f5  	lhu	a0, -0xa2(s0)
8020a68c: 23 38 a4 e6  	sd	a0, -0x190(s0)
8020a690: 23 14 a4 fe  	sh	a0, -0x18(s0)
;             desc[i as usize].next.write(i + 1);
8020a694: 2a 86        	mv	a2, a0
8020a696: 23 3c c4 e6  	sd	a2, -0x188(s0)
8020a69a: 63 67 b5 00  	bltu	a0, a1, 0x8020a6a8 <.Lpcrel_hi23+0xdc>
8020a69e: 15 a8        	j	0x8020a6d2 <.Lpcrel_hi23+0x106>
8020a6a0: fa 60        	ld	ra, 0x198(sp)
8020a6a2: 5a 64        	ld	s0, 0x190(sp)
;     }
8020a6a4: 1d 61        	addi	sp, sp, 0x1a0
8020a6a6: 82 80        	ret
8020a6a8: 83 35 04 e7  	ld	a1, -0x190(s0)
8020a6ac: 03 35 04 eb  	ld	a0, -0x150(s0)
8020a6b0: 03 36 84 e7  	ld	a2, -0x188(s0)
;             desc[i as usize].next.write(i + 1);
8020a6b4: 12 06        	slli	a2, a2, 0x4
8020a6b6: 32 95        	add	a0, a0, a2
8020a6b8: 39 05        	addi	a0, a0, 0xe
8020a6ba: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
8020a6be: 41 65        	lui	a0, 0x10
8020a6c0: 7d 35        	addiw	a0, a0, -0x1
8020a6c2: e9 8d        	and	a1, a1, a0
8020a6c4: 85 05        	addi	a1, a1, 0x1
8020a6c6: 23 34 b4 e6  	sd	a1, -0x198(s0)
8020a6ca: 6d 8d        	and	a0, a0, a1
8020a6cc: 63 18 b5 02  	bne	a0, a1, 0x8020a6fc <.Lpcrel_hi25>
8020a6d0: 29 a8        	j	0x8020a6ea <.Lpcrel_hi24+0x10>
8020a6d2: 83 35 84 eb  	ld	a1, -0x148(s0)
8020a6d6: 03 35 84 e7  	ld	a0, -0x188(s0)

000000008020a6da <.Lpcrel_hi24>:
;             desc[i as usize].next.write(i + 1);
8020a6da: 17 a6 02 00  	auipc	a2, 0x2a
8020a6de: 13 06 66 5d  	addi	a2, a2, 0x5d6
8020a6e2: 97 60 02 00  	auipc	ra, 0x26
8020a6e6: e7 80 e0 bc  	jalr	-0x432(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8020a6ea: 83 35 84 e6  	ld	a1, -0x198(s0)
8020a6ee: 03 35 04 e6  	ld	a0, -0x1a0(s0)
;             desc[i as usize].next.write(i + 1);
8020a6f2: 97 70 ff ff  	auipc	ra, 0xffff7
8020a6f6: e7 80 20 a6  	jalr	-0x59e(ra) <ekernel+0xffcb4154>
8020a6fa: dd b5        	j	0x8020a5e0 <.Lpcrel_hi23+0x14>

000000008020a6fc <.Lpcrel_hi25>:
8020a6fc: 17 a5 02 00  	auipc	a0, 0x2a
8020a700: 13 05 45 4a  	addi	a0, a0, 0x4a4

000000008020a704 <.Lpcrel_hi26>:
8020a704: 97 a5 02 00  	auipc	a1, 0x2a
8020a708: 13 86 45 5c  	addi	a2, a1, 0x5c4
8020a70c: f1 45        	li	a1, 0x1c
8020a70e: 97 60 02 00  	auipc	ra, 0x26
8020a712: e7 80 a0 b0  	jalr	-0x4f6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020a716 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$7can_pop17h0954ad397229da20E>:
;     pub fn can_pop(&self) -> bool {
8020a716: 01 11        	addi	sp, sp, -0x20
8020a718: 06 ec        	sd	ra, 0x18(sp)
8020a71a: 22 e8        	sd	s0, 0x10(sp)
8020a71c: 00 10        	addi	s0, sp, 0x20
8020a71e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.last_used_idx != self.used.idx.read()
8020a722: 83 55 c5 03  	lhu	a1, 0x3c(a0)
8020a726: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020a72a: 08 6d        	ld	a0, 0x18(a0)
8020a72c: 09 05        	addi	a0, a0, 0x2
8020a72e: 97 70 ff ff  	auipc	ra, 0xffff7
8020a732: e7 80 e0 9e  	jalr	-0x612(ra) <ekernel+0xffcb411c>
8020a736: aa 85        	mv	a1, a0
8020a738: 03 35 04 fe  	ld	a0, -0x20(s0)
8020a73c: c2 15        	slli	a1, a1, 0x30
8020a73e: c1 91        	srli	a1, a1, 0x30
8020a740: 2d 8d        	xor	a0, a0, a1
8020a742: 33 35 a0 00  	snez	a0, a0
8020a746: e2 60        	ld	ra, 0x18(sp)
8020a748: 42 64        	ld	s0, 0x10(sp)
;     }
8020a74a: 05 61        	addi	sp, sp, 0x20
8020a74c: 82 80        	ret

000000008020a74e <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$8pop_used17hb86fa88e7a90c85fE>:
;     pub fn pop_used(&mut self) -> Result<(u16, u32)> {
8020a74e: 19 71        	addi	sp, sp, -0x80
8020a750: 86 fc        	sd	ra, 0x78(sp)
8020a752: a2 f8        	sd	s0, 0x70(sp)
8020a754: 00 01        	addi	s0, sp, 0x80
8020a756: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020a75a: aa 85        	mv	a1, a0
8020a75c: 03 35 84 fb  	ld	a0, -0x48(s0)
8020a760: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020a764: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if !self.can_pop() {
8020a768: 97 00 00 00  	auipc	ra, 0x0
8020a76c: e7 80 e0 fa  	jalr	-0x52(ra) <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$7can_pop17h0954ad397229da20E>
8020a770: 11 ed        	bnez	a0, 0x8020a78c <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$8pop_used17hb86fa88e7a90c85fE+0x3e>
8020a772: 09 a0        	j	0x8020a774 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$8pop_used17hb86fa88e7a90c85fE+0x26>
8020a774: 83 35 04 fc  	ld	a1, -0x40(s0)
8020a778: 05 45        	li	a0, 0x1
;             return Err(Error::NotReady);
8020a77a: 23 07 a4 fc  	sb	a0, -0x32(s0)
8020a77e: 03 46 e4 fc  	lbu	a2, -0x32(s0)
8020a782: a3 80 c5 00  	sb	a2, 0x1(a1)
8020a786: 23 80 a5 00  	sb	a0, 0x0(a1)
;     }
8020a78a: 05 a8        	j	0x8020a7ba <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$8pop_used17hb86fa88e7a90c85fE+0x6c>
8020a78c: 11 45        	li	a0, 0x4
;         fence(Ordering::SeqCst);
8020a78e: a3 07 a4 fc  	sb	a0, -0x31(s0)
8020a792: 03 45 f4 fc  	lbu	a0, -0x31(s0)
8020a796: 97 b0 00 00  	auipc	ra, 0xb
8020a79a: e7 80 20 77  	jalr	0x772(ra) <_ZN4core4sync6atomic5fence17h5a13a54df8cf9d31E>
8020a79e: 03 35 84 fb  	ld	a0, -0x48(s0)
;         let last_used_slot = self.last_used_idx & (self.queue_size - 1);
8020a7a2: 83 55 c5 03  	lhu	a1, 0x3c(a0)
8020a7a6: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020a7aa: 03 55 45 03  	lhu	a0, 0x34(a0)
8020a7ae: 93 05 f5 ff  	addi	a1, a0, -0x1
8020a7b2: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020a7b6: 05 c9        	beqz	a0, 0x8020a7e6 <.Lpcrel_hi27>
8020a7b8: 29 a0        	j	0x8020a7c2 <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$8pop_used17hb86fa88e7a90c85fE+0x74>
8020a7ba: e6 70        	ld	ra, 0x78(sp)
8020a7bc: 46 74        	ld	s0, 0x70(sp)
;     }
8020a7be: 09 61        	addi	sp, sp, 0x80
8020a7c0: 82 80        	ret
8020a7c2: 03 35 84 fa  	ld	a0, -0x58(s0)
8020a7c6: 83 35 04 fb  	ld	a1, -0x50(s0)
;         let last_used_slot = self.last_used_idx & (self.queue_size - 1);
8020a7ca: 6d 8d        	and	a0, a0, a1
8020a7cc: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020a7d0: 23 12 a4 fe  	sh	a0, -0x1c(s0)
8020a7d4: 42 15        	slli	a0, a0, 0x30
8020a7d6: 41 91        	srli	a0, a0, 0x30
8020a7d8: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020a7dc: 93 05 00 02  	li	a1, 0x20
;         let index = self.used.ring[last_used_slot as usize].id.read() as u16;
8020a7e0: 63 61 b5 02  	bltu	a0, a1, 0x8020a802 <.Lpcrel_hi28+0x14>
8020a7e4: a1 a8        	j	0x8020a83c <.Lpcrel_hi28+0x4e>

000000008020a7e6 <.Lpcrel_hi27>:
;         let last_used_slot = self.last_used_idx & (self.queue_size - 1);
8020a7e6: 17 a5 02 00  	auipc	a0, 0x2a
8020a7ea: 13 05 a5 37  	addi	a0, a0, 0x37a

000000008020a7ee <.Lpcrel_hi28>:
8020a7ee: 97 a5 02 00  	auipc	a1, 0x2a
8020a7f2: 13 86 a5 50  	addi	a2, a1, 0x50a
8020a7f6: 93 05 10 02  	li	a1, 0x21
8020a7fa: 97 60 02 00  	auipc	ra, 0x26
8020a7fe: e7 80 e0 a1  	jalr	-0x5e2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020a802: 83 35 04 fa  	ld	a1, -0x60(s0)
8020a806: 03 35 84 fb  	ld	a0, -0x48(s0)
;         let index = self.used.ring[last_used_slot as usize].id.read() as u16;
8020a80a: 08 6d        	ld	a0, 0x18(a0)
8020a80c: 8e 05        	slli	a1, a1, 0x3
8020a80e: 2e 95        	add	a0, a0, a1
8020a810: 11 05        	addi	a0, a0, 0x4
8020a812: 97 f0 00 00  	auipc	ra, 0xf
8020a816: e7 80 20 77  	jalr	0x772(ra) <_ZN8volatile17Volatile$LT$T$GT$4read17h723ac65cf741bdfeE>
8020a81a: aa 85        	mv	a1, a0
8020a81c: 03 35 84 f9  	ld	a0, -0x68(s0)
8020a820: 2e 86        	mv	a2, a1
8020a822: 23 34 c4 f8  	sd	a2, -0x78(s0)
8020a826: 23 13 b4 fe  	sh	a1, -0x1a(s0)
;         let len = self.used.ring[last_used_slot as usize].len.read();
8020a82a: 42 15        	slli	a0, a0, 0x30
8020a82c: 41 91        	srli	a0, a0, 0x30
8020a82e: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020a832: 93 05 00 02  	li	a1, 0x20
8020a836: 63 6f b5 00  	bltu	a0, a1, 0x8020a854 <.Lpcrel_hi29+0x14>
8020a83a: 79 a0        	j	0x8020a8c8 <.Lpcrel_hi29+0x88>
8020a83c: 03 35 04 fa  	ld	a0, -0x60(s0)

000000008020a840 <.Lpcrel_hi29>:
;         let index = self.used.ring[last_used_slot as usize].id.read() as u16;
8020a840: 97 a5 02 00  	auipc	a1, 0x2a
8020a844: 13 86 05 4d  	addi	a2, a1, 0x4d0
8020a848: 93 05 00 02  	li	a1, 0x20
8020a84c: 97 60 02 00  	auipc	ra, 0x26
8020a850: e7 80 40 a6  	jalr	-0x59c(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8020a854: 03 35 84 fb  	ld	a0, -0x48(s0)
8020a858: 83 35 04 f9  	ld	a1, -0x70(s0)
;         let len = self.used.ring[last_used_slot as usize].len.read();
8020a85c: 08 6d        	ld	a0, 0x18(a0)
8020a85e: 8e 05        	slli	a1, a1, 0x3
8020a860: 2e 95        	add	a0, a0, a1
8020a862: 21 05        	addi	a0, a0, 0x8
8020a864: 97 f0 00 00  	auipc	ra, 0xf
8020a868: e7 80 00 72  	jalr	0x720(ra) <_ZN8volatile17Volatile$LT$T$GT$4read17h723ac65cf741bdfeE>
8020a86c: 83 35 84 f8  	ld	a1, -0x78(s0)
8020a870: 2a 86        	mv	a2, a0
8020a872: 03 35 84 fb  	ld	a0, -0x48(s0)
8020a876: 23 30 c4 f8  	sd	a2, -0x80(s0)
8020a87a: 23 24 c4 fe  	sw	a2, -0x18(s0)
;         self.recycle_descriptors(index);
8020a87e: 97 f0 ff ff  	auipc	ra, 0xfffff
8020a882: e7 80 00 54  	jalr	0x540(ra) <ekernel+0xffcbcdbe>
8020a886: 03 37 84 fb  	ld	a4, -0x48(s0)
8020a88a: 03 36 84 f8  	ld	a2, -0x78(s0)
8020a88e: 03 35 04 f8  	ld	a0, -0x80(s0)
8020a892: 83 35 04 fc  	ld	a1, -0x40(s0)
;         self.last_used_idx = self.last_used_idx.wrapping_add(1);
8020a896: 83 16 c7 03  	lh	a3, 0x3c(a4)
8020a89a: 23 16 d4 fe  	sh	a3, -0x14(s0)
8020a89e: 85 47        	li	a5, 0x1
8020a8a0: 23 17 f4 fe  	sh	a5, -0x12(s0)
;             intrinsics::wrapping_add(self, rhs)
8020a8a4: 85 26        	addiw	a3, a3, 0x1
;         self.last_used_idx = self.last_used_idx.wrapping_add(1);
8020a8a6: 23 1e d7 02  	sh	a3, 0x3c(a4)
;         Ok((index, len))
8020a8aa: 23 18 c4 fc  	sh	a2, -0x30(s0)
8020a8ae: 23 2a a4 fc  	sw	a0, -0x2c(s0)
8020a8b2: 03 16 04 fd  	lh	a2, -0x30(s0)
8020a8b6: 03 25 44 fd  	lw	a0, -0x2c(s0)
8020a8ba: 23 92 c5 00  	sh	a2, 0x4(a1)
8020a8be: 88 c5        	sw	a0, 0x8(a1)
8020a8c0: 01 45        	li	a0, 0x0
8020a8c2: 23 80 a5 00  	sb	a0, 0x0(a1)
;     }
8020a8c6: d5 bd        	j	0x8020a7ba <_ZN14virtio_drivers5queue18VirtQueue$LT$H$GT$8pop_used17hb86fa88e7a90c85fE+0x6c>
8020a8c8: 03 35 04 f9  	ld	a0, -0x70(s0)

000000008020a8cc <.Lpcrel_hi30>:
;         let len = self.used.ring[last_used_slot as usize].len.read();
8020a8cc: 97 a5 02 00  	auipc	a1, 0x2a
8020a8d0: 13 86 c5 45  	addi	a2, a1, 0x45c
8020a8d4: 93 05 00 02  	li	a1, 0x20
8020a8d8: 97 60 02 00  	auipc	ra, 0x26
8020a8dc: e7 80 80 9d  	jalr	-0x628(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008020a8e0 <_ZN4core4hint16assert_unchecked18precondition_check17hc3c9cbded1b45111E>:
;             const fn precondition_check($($name:$ty),*) {
8020a8e0: 01 11        	addi	sp, sp, -0x20
8020a8e2: 06 ec        	sd	ra, 0x18(sp)
8020a8e4: 22 e8        	sd	s0, 0x10(sp)
8020a8e6: 00 10        	addi	s0, sp, 0x20
8020a8e8: a3 07 a4 fe  	sb	a0, -0x11(s0)
;             (cond: bool = cond) => cond,
8020a8ec: 01 ed        	bnez	a0, 0x8020a904 <.Lpcrel_hi0+0x14>
8020a8ee: 09 a0        	j	0x8020a8f0 <.Lpcrel_hi0>

000000008020a8f0 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
8020a8f0: 17 a5 02 00  	auipc	a0, 0x2a
8020a8f4: 13 05 05 45  	addi	a0, a0, 0x450
8020a8f8: 93 05 80 06  	li	a1, 0x68
8020a8fc: 97 60 02 00  	auipc	ra, 0x26
8020a900: e7 80 40 94  	jalr	-0x6bc(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8020a904: e2 60        	ld	ra, 0x18(sp)
8020a906: 42 64        	ld	s0, 0x10(sp)
;             }
8020a908: 05 61        	addi	sp, sp, 0x20
8020a90a: 82 80        	ret

000000008020a90c <_ZN4core4hint21unreachable_unchecked17hd7ad68079ee33815E>:
; pub const unsafe fn unreachable_unchecked() -> ! {
8020a90c: 41 11        	addi	sp, sp, -0x10
8020a90e: 06 e4        	sd	ra, 0x8(sp)
8020a910: 22 e0        	sd	s0, 0x0(sp)
8020a912: 00 08        	addi	s0, sp, 0x10
;     intrinsics::assert_unsafe_precondition!(
8020a914: 97 00 00 00  	auipc	ra, 0x0
8020a918: e7 80 a0 00  	jalr	0xa(ra) <_ZN4core4hint21unreachable_unchecked18precondition_check17h736e0c162c1f5679E>
8020a91c: 00 00        	unimp

000000008020a91e <_ZN4core4hint21unreachable_unchecked18precondition_check17h736e0c162c1f5679E>:
;             const fn precondition_check($($name:$ty),*) {
8020a91e: 41 11        	addi	sp, sp, -0x10
8020a920: 06 e4        	sd	ra, 0x8(sp)
8020a922: 22 e0        	sd	s0, 0x0(sp)
8020a924: 00 08        	addi	s0, sp, 0x10

000000008020a926 <.Lpcrel_hi1>:
;                     ::core::panicking::panic_nounwind(
8020a926: 17 a5 02 00  	auipc	a0, 0x2a
8020a92a: 13 05 25 48  	addi	a0, a0, 0x482
8020a92e: 93 05 20 05  	li	a1, 0x52
8020a932: 97 60 02 00  	auipc	ra, 0x26
8020a936: e7 80 e0 90  	jalr	-0x6f2(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>

000000008020a93a <_ZN2os3sbi15consele_putchar17he7619331292bbd19E>:
; pub fn consele_putchar(c:usize){
8020a93a: 5d 71        	addi	sp, sp, -0x50
8020a93c: 86 e4        	sd	ra, 0x48(sp)
8020a93e: a2 e0        	sd	s0, 0x40(sp)
8020a940: 80 08        	addi	s0, sp, 0x50
8020a942: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020a946: 85 48        	li	a7, 0x1
8020a948: 23 34 14 fd  	sd	a7, -0x38(s0)
8020a94c: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020a950: 01 48        	li	a6, 0x0
8020a952: 23 3c 04 fd  	sd	a6, -0x28(s0)
8020a956: 23 30 04 ff  	sd	a6, -0x20(s0)
8020a95a: 23 34 04 ff  	sd	a6, -0x18(s0)
;         asm!(
8020a95e: c2 85        	mv	a1, a6
8020a960: 42 86        	mv	a2, a6
8020a962: 73 00 00 00  	ecall
8020a966: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020a96a: a6 60        	ld	ra, 0x48(sp)
8020a96c: 06 64        	ld	s0, 0x40(sp)
; }
8020a96e: 61 61        	addi	sp, sp, 0x50
8020a970: 82 80        	ret

000000008020a972 <_ZN2os3sbi8shutdown17h1acb64e135bfdc47E>:
; pub fn shutdown() -> ! {
8020a972: 19 71        	addi	sp, sp, -0x80
8020a974: 86 fc        	sd	ra, 0x78(sp)
8020a976: a2 f8        	sd	s0, 0x70(sp)
8020a978: 00 01        	addi	s0, sp, 0x80
8020a97a: a1 48        	li	a7, 0x8
8020a97c: 23 34 14 fd  	sd	a7, -0x38(s0)
8020a980: 01 48        	li	a6, 0x0
8020a982: 23 38 04 fd  	sd	a6, -0x30(s0)
8020a986: 23 3c 04 fd  	sd	a6, -0x28(s0)
8020a98a: 23 30 04 ff  	sd	a6, -0x20(s0)
8020a98e: 23 34 04 ff  	sd	a6, -0x18(s0)
;         asm!(
8020a992: 42 85        	mv	a0, a6
8020a994: c2 85        	mv	a1, a6
8020a996: 42 86        	mv	a2, a6
8020a998: 73 00 00 00  	ecall
8020a99c: 23 30 a4 fc  	sd	a0, -0x40(s0)

000000008020a9a0 <.Lpcrel_hi0>:
;     panic!("It should shutdown!");
8020a9a0: 17 a5 02 00  	auipc	a0, 0x2a
8020a9a4: 93 05 05 47  	addi	a1, a0, 0x470
8020a9a8: 13 05 04 f9  	addi	a0, s0, -0x70
8020a9ac: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020a9b0: 05 46        	li	a2, 0x1
8020a9b2: 97 d0 ff ff  	auipc	ra, 0xffffd
8020a9b6: e7 80 20 a0  	jalr	-0x5fe(ra) <ekernel+0xffcba3b4>
8020a9ba: 03 35 84 f8  	ld	a0, -0x78(s0)

000000008020a9be <.Lpcrel_hi1>:
8020a9be: 97 a5 02 00  	auipc	a1, 0x2a
8020a9c2: 93 85 25 47  	addi	a1, a1, 0x472
8020a9c6: 97 50 02 00  	auipc	ra, 0x25
8020a9ca: e7 80 20 7e  	jalr	0x7e2(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008020a9ce <_ZN2os3sbi18sbi_hsm_hart_start17hff8c3926294c41bfE>:
; pub fn sbi_hsm_hart_start(hart_id:usize){
8020a9ce: 5d 71        	addi	sp, sp, -0x50
8020a9d0: 86 e4        	sd	ra, 0x48(sp)
8020a9d2: a2 e0        	sd	s0, 0x40(sp)
8020a9d4: 80 08        	addi	s0, sp, 0x50
8020a9d6: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020a9da: b7 55 48 00  	lui	a1, 0x485
8020a9de: 9b 88 d5 34  	addiw	a7, a1, 0x34d
8020a9e2: 23 34 14 fd  	sd	a7, -0x38(s0)
8020a9e6: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020a9ea: 93 05 10 40  	li	a1, 0x401
8020a9ee: d6 05        	slli	a1, a1, 0x15
8020a9f0: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020a9f4: 13 06 00 04  	li	a2, 0x40
8020a9f8: 23 30 c4 fe  	sd	a2, -0x20(s0)
8020a9fc: 01 48        	li	a6, 0x0
8020a9fe: 23 34 04 ff  	sd	a6, -0x18(s0)
;         asm!(
8020aa02: 73 00 00 00  	ecall
8020aa06: 23 30 a4 fc  	sd	a0, -0x40(s0)
;     ret
8020aa0a: 03 35 04 fc  	ld	a0, -0x40(s0)
;     let i= sbi_call(SBI_EXT_HSM, hart_id, 0x80200000, 64, 0x0);
8020aa0e: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020aa12: a6 60        	ld	ra, 0x48(sp)
8020aa14: 06 64        	ld	s0, 0x40(sp)
; }
8020aa16: 61 61        	addi	sp, sp, 0x50
8020aa18: 82 80        	ret

000000008020aa1a <_ZN2os3sbi9set_timer17h30f38d9fe9d70bf4E>:
; pub fn set_timer(time_value:usize){
8020aa1a: 5d 71        	addi	sp, sp, -0x50
8020aa1c: 86 e4        	sd	ra, 0x48(sp)
8020aa1e: a2 e0        	sd	s0, 0x40(sp)
8020aa20: 80 08        	addi	s0, sp, 0x50
8020aa22: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020aa26: 81 48        	li	a7, 0x0
8020aa28: 23 34 14 fd  	sd	a7, -0x38(s0)
8020aa2c: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020aa30: 23 3c 14 fd  	sd	a7, -0x28(s0)
8020aa34: 23 30 14 ff  	sd	a7, -0x20(s0)
8020aa38: 23 34 14 ff  	sd	a7, -0x18(s0)
;         asm!(
8020aa3c: c6 85        	mv	a1, a7
8020aa3e: 46 86        	mv	a2, a7
8020aa40: 46 88        	mv	a6, a7
8020aa42: 73 00 00 00  	ecall
8020aa46: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020aa4a: a6 60        	ld	ra, 0x48(sp)
8020aa4c: 06 64        	ld	s0, 0x40(sp)
; }
8020aa4e: 61 61        	addi	sp, sp, 0x50
8020aa50: 82 80        	ret

000000008020aa52 <_ZN2os3sbi20sbi_console_get_char17h725e70b704afd92cE>:
; pub fn sbi_console_get_char() -> usize {
8020aa52: 01 11        	addi	sp, sp, -0x20
8020aa54: 06 ec        	sd	ra, 0x18(sp)
8020aa56: 22 e8        	sd	s0, 0x10(sp)
8020aa58: 00 10        	addi	s0, sp, 0x20
;     let ret = sbi_rt::legacy::console_getchar();
8020aa5a: 97 f0 00 00  	auipc	ra, 0xf
8020aa5e: e7 80 40 fb  	jalr	-0x4c(ra) <_ZN6sbi_rt6legacy15console_getchar17h6e9f14464b716802E>
8020aa62: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020aa66: e2 60        	ld	ra, 0x18(sp)
8020aa68: 42 64        	ld	s0, 0x10(sp)
; }
8020aa6a: 05 61        	addi	sp, sp, 0x20
8020aa6c: 82 80        	ret

000000008020aa6e <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17hffa4ba116d85ff40E>:
; #[derive(Copy, Clone, Default, Debug)]
8020aa6e: 01 11        	addi	sp, sp, -0x20
8020aa70: 06 ec        	sd	ra, 0x18(sp)
8020aa72: 22 e8        	sd	s0, 0x10(sp)
8020aa74: 00 10        	addi	s0, sp, 0x20
8020aa76: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020aa7a: e2 60        	ld	ra, 0x18(sp)
8020aa7c: 42 64        	ld	s0, 0x10(sp)
8020aa7e: 05 61        	addi	sp, sp, 0x20
8020aa80: 82 80        	ret

000000008020aa82 <_ZN5alloc5alloc15exchange_malloc17h76e02859c15d7752E>:
; unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
8020aa82: 1d 71        	addi	sp, sp, -0x60
8020aa84: 86 ec        	sd	ra, 0x58(sp)
8020aa86: a2 e8        	sd	s0, 0x50(sp)
8020aa88: 80 10        	addi	s0, sp, 0x60
8020aa8a: 2a 86        	mv	a2, a0

000000008020aa8c <.Lpcrel_hi0>:
;     fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
8020aa8c: 17 a5 02 00  	auipc	a0, 0x2a
8020aa90: 13 05 c5 3b  	addi	a0, a0, 0x3bc
8020aa94: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020aa98: 23 38 c4 fc  	sd	a2, -0x30(s0)
8020aa9c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
8020aaa0: 23 38 c4 fa  	sd	a2, -0x50(s0)
8020aaa4: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.alloc_impl(layout, false)
8020aaa8: 83 35 84 fa  	ld	a1, -0x58(s0)
8020aaac: 03 36 04 fb  	ld	a2, -0x50(s0)
8020aab0: 81 46        	li	a3, 0x0
8020aab2: 97 00 00 00  	auipc	ra, 0x0
8020aab6: e7 80 60 0b  	jalr	0xb6(ra) <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E>
8020aaba: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020aabe: 23 30 b4 fc  	sd	a1, -0x40(s0)
;     match Global.allocate(layout) {
8020aac2: 03 35 84 fb  	ld	a0, -0x48(s0)
8020aac6: 05 c1        	beqz	a0, 0x8020aae6 <.Lpcrel_hi0+0x5a>
8020aac8: 09 a0        	j	0x8020aaca <.Lpcrel_hi0+0x3e>
;         Ok(ptr) => ptr.as_mut_ptr(),
8020aaca: 03 35 84 fb  	ld	a0, -0x48(s0)
8020aace: 83 35 04 fc  	ld	a1, -0x40(s0)
8020aad2: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020aad6: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020aada: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020aade: e6 60        	ld	ra, 0x58(sp)
8020aae0: 46 64        	ld	s0, 0x50(sp)
; }
8020aae2: 25 61        	addi	sp, sp, 0x60
8020aae4: 82 80        	ret
;         Err(_) => handle_alloc_error(layout),
8020aae6: 03 35 84 fa  	ld	a0, -0x58(s0)
8020aaea: 83 35 04 fb  	ld	a1, -0x50(s0)
8020aaee: 97 40 02 00  	auipc	ra, 0x24
8020aaf2: e7 80 20 1a  	jalr	0x1a2(ra) <_ZN5alloc5alloc18handle_alloc_error17h82a5a817f63685d8E>

000000008020aaf6 <_ZN5alloc5alloc5alloc17h364d6146c98d42c3E>:
; pub unsafe fn alloc(layout: Layout) -> *mut u8 {
8020aaf6: 5d 71        	addi	sp, sp, -0x50
8020aaf8: 86 e4        	sd	ra, 0x48(sp)
8020aafa: a2 e0        	sd	s0, 0x40(sp)
8020aafc: 80 08        	addi	s0, sp, 0x50

000000008020aafe <.Lpcrel_hi1>:
; pub unsafe fn read_volatile<T>(src: *const T) -> T {
8020aafe: 17 26 34 00  	auipc	a2, 0x342
8020ab02: 13 06 b6 8d  	addi	a2, a2, -0x725
8020ab06: 23 38 c4 fa  	sd	a2, -0x50(s0)
8020ab0a: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020ab0e: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         assert_unsafe_precondition!(
8020ab12: 09 a0        	j	0x8020ab14 <.Lpcrel_hi2>

000000008020ab14 <.Lpcrel_hi2>:
8020ab14: 17 25 34 00  	auipc	a0, 0x342
8020ab18: 13 05 55 8c  	addi	a0, a0, -0x73b
8020ab1c: 85 45        	li	a1, 0x1
8020ab1e: 97 90 00 00  	auipc	ra, 0x9
8020ab22: e7 80 a0 37  	jalr	0x37a(ra) <_ZN4core3ptr13read_volatile18precondition_check17h0d89a123e64e7f92E>
8020ab26: 09 a0        	j	0x8020ab28 <.Lpcrel_hi3>

000000008020ab28 <.Lpcrel_hi3>:
;         intrinsics::volatile_load(src)
8020ab28: 17 25 34 00  	auipc	a0, 0x342
8020ab2c: 13 05 15 8b  	addi	a0, a0, -0x74f
8020ab30: 03 45 05 00  	lbu	a0, 0x0(a0)
8020ab34: a3 0b a4 fc  	sb	a0, -0x29(s0)
8020ab38: 93 05 84 fb  	addi	a1, s0, -0x48
;         __rust_alloc(layout.size(), layout.align())
8020ab3c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         self.size
8020ab40: 03 35 04 fc  	ld	a0, -0x40(s0)
;         __rust_alloc(layout.size(), layout.align())
8020ab44: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         self.align.as_usize()
8020ab48: 83 35 84 fb  	ld	a1, -0x48(s0)
8020ab4c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.0 as usize
8020ab50: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020ab54: 83 35 84 fc  	ld	a1, -0x38(s0)
;         __rust_alloc(layout.size(), layout.align())
8020ab58: 97 10 00 00  	auipc	ra, 0x1
8020ab5c: e7 80 00 ae  	jalr	-0x520(ra) <__rust_alloc>
8020ab60: a6 60        	ld	ra, 0x48(sp)
8020ab62: 06 64        	ld	s0, 0x40(sp)
; }
8020ab64: 61 61        	addi	sp, sp, 0x50
8020ab66: 82 80        	ret

000000008020ab68 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E>:
;     fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
8020ab68: 45 71        	addi	sp, sp, -0x1d0
8020ab6a: 86 e7        	sd	ra, 0x1c8(sp)
8020ab6c: a2 e3        	sd	s0, 0x1c0(sp)
8020ab6e: 80 0b        	addi	s0, sp, 0x1d0
8020ab70: 36 87        	mv	a4, a3
8020ab72: 23 3c e4 e4  	sd	a4, -0x1a8(s0)
8020ab76: 01 47        	li	a4, 0x0
;     pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
8020ab78: 23 38 e4 e6  	sd	a4, -0x190(s0)
; pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
8020ab7c: 23 3c e4 e6  	sd	a4, -0x188(s0)
;     metadata: <T as Pointee>::Metadata,
8020ab80: 23 30 e4 e8  	sd	a4, -0x180(s0)
;     fn from(t: T) -> T {
8020ab84: 23 38 b4 e8  	sd	a1, -0x170(s0)
8020ab88: 23 3c c4 e8  	sd	a2, -0x168(s0)
8020ab8c: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020ab90: a3 0f d4 f4  	sb	a3, -0xa1(s0)
8020ab94: 13 05 04 e9  	addi	a0, s0, -0x170
;         match layout.size() {
8020ab98: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         self.size
8020ab9c: 03 35 84 e9  	ld	a0, -0x168(s0)
8020aba0: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
8020aba4: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         match layout.size() {
8020aba8: 21 e9        	bnez	a0, 0x8020abf8 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0x90>
8020abaa: 09 a0        	j	0x8020abac <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0x44>
8020abac: 13 05 04 e9  	addi	a0, s0, -0x170
;             0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
8020abb0: 97 90 00 00  	auipc	ra, 0x9
8020abb4: e7 80 80 1c  	jalr	0x1c8(ra) <_ZN4core5alloc6layout6Layout8dangling17h5bb4677f0568c5b0E>
8020abb8: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         self.pointer as *mut T
8020abbc: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         self as _
8020abc0: 23 30 a4 f8  	sd	a0, -0x80(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8020abc4: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8020abc8: 01 45        	li	a0, 0x0
8020abca: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020abce: 83 35 04 f1  	ld	a1, -0xf0(s0)
8020abd2: 03 35 84 f1  	ld	a0, -0xe8(s0)
8020abd6: 23 30 b4 f0  	sd	a1, -0x100(s0)
8020abda: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8020abde: 83 35 04 f0  	ld	a1, -0x100(s0)
8020abe2: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
8020abe6: 03 35 84 f0  	ld	a0, -0xf8(s0)
8020abea: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8020abee: 23 34 b4 f8  	sd	a1, -0x78(s0)
8020abf2: 23 38 a4 f8  	sd	a0, -0x70(s0)
;             assert_unsafe_precondition!(
8020abf6: 31 a0        	j	0x8020ac02 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0x9a>
8020abf8: 03 35 84 e5  	ld	a0, -0x1a8(s0)
;                 let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
8020abfc: 05 89        	andi	a0, a0, 0x1
8020abfe: 29 ed        	bnez	a0, 0x8020ac58 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0xf0>
8020ac00: 89 a0        	j	0x8020ac42 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0xda>
8020ac02: 03 35 84 e4  	ld	a0, -0x1b8(s0)
;             assert_unsafe_precondition!(
8020ac06: 97 60 ff ff  	auipc	ra, 0xffff6
8020ac0a: e7 80 e0 dd  	jalr	-0x222(ra) <ekernel+0xffcb39e4>
8020ac0e: 09 a0        	j	0x8020ac10 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0xa8>
8020ac10: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8020ac14: 83 35 84 e4  	ld	a1, -0x1b8(s0)
;             NonNull { pointer: ptr as _ }
8020ac18: 23 38 b4 ea  	sd	a1, -0x150(s0)
8020ac1c: 23 3c a4 ea  	sd	a0, -0x148(s0)
;             0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
8020ac20: 83 35 04 eb  	ld	a1, -0x150(s0)
8020ac24: 03 35 84 eb  	ld	a0, -0x148(s0)
8020ac28: 23 30 b4 ea  	sd	a1, -0x160(s0)
8020ac2c: 23 34 a4 ea  	sd	a0, -0x158(s0)
8020ac30: 09 a0        	j	0x8020ac32 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0xca>
;     }
8020ac32: 03 35 04 ea  	ld	a0, -0x160(s0)
8020ac36: 83 35 84 ea  	ld	a1, -0x158(s0)
8020ac3a: be 60        	ld	ra, 0x1c8(sp)
8020ac3c: 1e 64        	ld	s0, 0x1c0(sp)
8020ac3e: 79 61        	addi	sp, sp, 0x1d0
8020ac40: 82 80        	ret
;                 let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
8020ac42: 03 35 04 e9  	ld	a0, -0x170(s0)
8020ac46: 83 35 84 e9  	ld	a1, -0x168(s0)
8020ac4a: 97 00 00 00  	auipc	ra, 0x0
8020ac4e: e7 80 c0 ea  	jalr	-0x154(ra) <_ZN5alloc5alloc5alloc17h364d6146c98d42c3E>
8020ac52: 23 30 a4 ec  	sd	a0, -0x140(s0)
8020ac56: 81 a0        	j	0x8020ac96 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0x12e>
8020ac58: 83 35 04 e9  	ld	a1, -0x170(s0)
8020ac5c: 03 35 84 e9  	ld	a0, -0x168(s0)
8020ac60: 23 34 b4 ec  	sd	a1, -0x138(s0)
8020ac64: 23 38 a4 ec  	sd	a0, -0x130(s0)
8020ac68: 93 05 84 ec  	addi	a1, s0, -0x138
;     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
8020ac6c: 23 3c b4 f8  	sd	a1, -0x68(s0)
;         self.size
8020ac70: 03 35 04 ed  	ld	a0, -0x130(s0)
;     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
8020ac74: 23 30 b4 fa  	sd	a1, -0x60(s0)
;         self.align.as_usize()
8020ac78: 83 35 84 ec  	ld	a1, -0x138(s0)
8020ac7c: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.0 as usize
8020ac80: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8020ac84: 83 35 04 f2  	ld	a1, -0xe0(s0)
;     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
8020ac88: 97 10 00 00  	auipc	ra, 0x1
8020ac8c: e7 80 e0 a9  	jalr	-0x562(ra) <__rust_alloc_zeroed>
8020ac90: 23 30 a4 ec  	sd	a0, -0x140(s0)
;                 let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
8020ac94: 09 a0        	j	0x8020ac96 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0x12e>
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8020ac96: 03 35 04 ec  	ld	a0, -0x140(s0)
8020ac9a: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
8020ac9e: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         if !ptr.is_null() {
8020aca2: 15 e1        	bnez	a0, 0x8020acc6 <.Lpcrel_hi4+0x16>
8020aca4: 09 a0        	j	0x8020aca6 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0x13e>
8020aca6: 01 45        	li	a0, 0x0
;             None
8020aca8: 23 34 a4 ee  	sd	a0, -0x118(s0)
;             None => Err(err),
8020acac: 23 30 a4 ee  	sd	a0, -0x120(s0)

000000008020acb0 <.Lpcrel_hi4>:
;             Err(e) => Err(From::from(e)),
8020acb0: 17 85 02 00  	auipc	a0, 0x28
8020acb4: 13 05 05 5e  	addi	a0, a0, 0x5e0
8020acb8: 0c 61        	ld	a1, 0x0(a0)
8020acba: 08 65        	ld	a0, 0x8(a0)
8020acbc: 23 30 b4 ea  	sd	a1, -0x160(s0)
8020acc0: 23 34 a4 ea  	sd	a0, -0x158(s0)
;     }
8020acc4: bd b7        	j	0x8020ac32 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0xca>
;             assert_unsafe_precondition!(
8020acc6: 09 a0        	j	0x8020acc8 <.Lpcrel_hi4+0x18>
8020acc8: 03 35 04 e4  	ld	a0, -0x1c0(s0)
;             assert_unsafe_precondition!(
8020accc: 97 60 ff ff  	auipc	ra, 0xffff6
8020acd0: e7 80 80 d1  	jalr	-0x2e8(ra) <ekernel+0xffcb39e4>
8020acd4: 09 a0        	j	0x8020acd6 <.Lpcrel_hi4+0x26>
8020acd6: 03 35 04 e6  	ld	a0, -0x1a0(s0)
8020acda: 83 35 04 e4  	ld	a1, -0x1c0(s0)
;             NonNull { pointer: ptr as _ }
8020acde: 23 34 b4 f2  	sd	a1, -0xd8(s0)
;             Some(unsafe { Self::new_unchecked(ptr) })
8020ace2: 83 35 84 f2  	ld	a1, -0xd8(s0)
8020ace6: 23 34 b4 ee  	sd	a1, -0x118(s0)
;             Some(v) => Ok(v),
8020acea: 83 35 84 ee  	ld	a1, -0x118(s0)
8020acee: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020acf2: 23 30 b4 ee  	sd	a1, -0x120(s0)
;             Ok(v) => ControlFlow::Continue(v),
8020acf6: 83 35 04 ee  	ld	a1, -0x120(s0)
8020acfa: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020acfe: 23 3c b4 ec  	sd	a1, -0x128(s0)
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8020ad02: 83 35 84 ed  	ld	a1, -0x128(s0)
8020ad06: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.pointer as *mut T
8020ad0a: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self as _
8020ad0e: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8020ad12: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8020ad16: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8020ad1a: 83 35 04 f4  	ld	a1, -0xc0(s0)
8020ad1e: 03 35 84 f4  	ld	a0, -0xb8(s0)
8020ad22: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8020ad26: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8020ad2a: 83 35 04 f3  	ld	a1, -0xd0(s0)
8020ad2e: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
8020ad32: 03 35 84 f3  	ld	a0, -0xc8(s0)
8020ad36: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8020ad3a: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020ad3e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
8020ad42: 09 a0        	j	0x8020ad44 <.Lpcrel_hi4+0x94>
8020ad44: 03 35 04 e3  	ld	a0, -0x1d0(s0)
;             assert_unsafe_precondition!(
8020ad48: 97 60 ff ff  	auipc	ra, 0xffff6
8020ad4c: e7 80 c0 c9  	jalr	-0x364(ra) <ekernel+0xffcb39e4>
8020ad50: 09 a0        	j	0x8020ad52 <.Lpcrel_hi4+0xa2>
8020ad52: 03 35 84 e3  	ld	a0, -0x1c8(s0)
8020ad56: 83 35 04 e3  	ld	a1, -0x1d0(s0)
;             NonNull { pointer: ptr as _ }
8020ad5a: 23 38 b4 ee  	sd	a1, -0x110(s0)
8020ad5e: 23 3c a4 ee  	sd	a0, -0x108(s0)
;                 Ok(NonNull::slice_from_raw_parts(ptr, size))
8020ad62: 83 35 04 ef  	ld	a1, -0x110(s0)
8020ad66: 03 35 84 ef  	ld	a0, -0x108(s0)
8020ad6a: 23 30 b4 ea  	sd	a1, -0x160(s0)
8020ad6e: 23 34 a4 ea  	sd	a0, -0x158(s0)
;             },
8020ad72: c1 b5        	j	0x8020ac32 <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E+0xca>

000000008020ad74 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>:
;     unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
8020ad74: 19 71        	addi	sp, sp, -0x80
8020ad76: 86 fc        	sd	ra, 0x78(sp)
8020ad78: a2 f8        	sd	s0, 0x70(sp)
8020ad7a: 00 01        	addi	s0, sp, 0x80
8020ad7c: 23 34 b4 f8  	sd	a1, -0x78(s0)
8020ad80: 23 38 c4 f8  	sd	a2, -0x70(s0)
8020ad84: 23 3c d4 f8  	sd	a3, -0x68(s0)
8020ad88: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020ad8c: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020ad90: 13 05 04 f9  	addi	a0, s0, -0x70
;         if layout.size() != 0 {
8020ad94: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.size
8020ad98: 03 35 84 f9  	ld	a0, -0x68(s0)
;         if layout.size() != 0 {
8020ad9c: 19 e1        	bnez	a0, 0x8020ada2 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E+0x2e>
8020ad9e: 09 a0        	j	0x8020ada0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E+0x2c>
8020ada0: 91 a0        	j	0x8020ade4 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E+0x70>
8020ada2: 03 35 84 f8  	ld	a0, -0x78(s0)
;         self.pointer as *mut T
8020ada6: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             unsafe { dealloc(ptr.as_ptr(), layout) }
8020adaa: 03 36 04 f9  	ld	a2, -0x70(s0)
8020adae: 83 35 84 f9  	ld	a1, -0x68(s0)
8020adb2: 23 30 c4 fa  	sd	a2, -0x60(s0)
8020adb6: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020adba: 13 06 04 fa  	addi	a2, s0, -0x60
;     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
8020adbe: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         self.size
8020adc2: 83 35 84 fa  	ld	a1, -0x58(s0)
;     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
8020adc6: 23 30 c4 fe  	sd	a2, -0x20(s0)
;         self.align.as_usize()
8020adca: 03 36 04 fa  	ld	a2, -0x60(s0)
8020adce: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         self.0 as usize
8020add2: 23 38 c4 fa  	sd	a2, -0x50(s0)
8020add6: 03 36 04 fb  	ld	a2, -0x50(s0)
;     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
8020adda: 97 10 00 00  	auipc	ra, 0x1
8020adde: e7 80 80 89  	jalr	-0x768(ra) <__rust_dealloc>
;         if layout.size() != 0 {
8020ade2: 09 a0        	j	0x8020ade4 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E+0x70>
8020ade4: e6 70        	ld	ra, 0x78(sp)
8020ade6: 46 74        	ld	s0, 0x70(sp)
;     }
8020ade8: 09 61        	addi	sp, sp, 0x80
8020adea: 82 80        	ret

000000008020adec <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE>:
;     unsafe fn shrink(
8020adec: 13 01 01 d3  	addi	sp, sp, -0x2d0
8020adf0: 23 34 11 2c  	sd	ra, 0x2c8(sp)
8020adf4: 23 30 81 2c  	sd	s0, 0x2c0(sp)
8020adf8: 80 0d        	addi	s0, sp, 0x2d0
8020adfa: 23 30 b4 d8  	sd	a1, -0x280(s0)
8020adfe: 23 34 a4 d8  	sd	a0, -0x278(s0)
8020ae02: 01 48        	li	a6, 0x0
;     pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
8020ae04: 23 3c 04 d9  	sd	a6, -0x268(s0)
; pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
8020ae08: 23 30 04 db  	sd	a6, -0x260(s0)
;     metadata: <T as Pointee>::Metadata,
8020ae0c: 23 34 04 db  	sd	a6, -0x258(s0)
;     fn from(t: T) -> T {
8020ae10: 23 30 c4 dc  	sd	a2, -0x240(s0)
8020ae14: 23 34 d4 dc  	sd	a3, -0x238(s0)
8020ae18: 23 38 e4 dc  	sd	a4, -0x230(s0)
8020ae1c: 23 3c f4 dc  	sd	a5, -0x228(s0)
8020ae20: 23 34 a4 ec  	sd	a0, -0x138(s0)
8020ae24: 23 38 b4 ec  	sd	a1, -0x130(s0)
8020ae28: 13 05 04 dd  	addi	a0, s0, -0x230
;         match new_layout.size() {
8020ae2c: 23 3c a4 ec  	sd	a0, -0x128(s0)
;         self.size
8020ae30: 03 35 84 dd  	ld	a0, -0x228(s0)
8020ae34: 23 38 a4 de  	sd	a0, -0x210(s0)
;         match new_layout.size() {
8020ae38: 03 35 04 df  	ld	a0, -0x210(s0)
8020ae3c: 25 e5        	bnez	a0, 0x8020aea4 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0xb8>
8020ae3e: 09 a0        	j	0x8020ae40 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0x54>
8020ae40: 83 35 04 d8  	ld	a1, -0x280(s0)
8020ae44: 03 35 84 d8  	ld	a0, -0x278(s0)
;                 self.deallocate(ptr, old_layout);
8020ae48: 03 36 04 dc  	ld	a2, -0x240(s0)
8020ae4c: 83 36 84 dc  	ld	a3, -0x238(s0)
8020ae50: 97 00 00 00  	auipc	ra, 0x0
8020ae54: e7 80 40 f2  	jalr	-0xdc(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
8020ae58: 13 05 04 dd  	addi	a0, s0, -0x230
;                 Ok(NonNull::slice_from_raw_parts(new_layout.dangling(), 0))
8020ae5c: 97 90 00 00  	auipc	ra, 0x9
8020ae60: e7 80 c0 f1  	jalr	-0xe4(ra) <_ZN4core5alloc6layout6Layout8dangling17h5bb4677f0568c5b0E>
8020ae64: 23 30 a4 ee  	sd	a0, -0x120(s0)
;         self.pointer as *mut T
8020ae68: 23 34 a4 ee  	sd	a0, -0x118(s0)
;         self as _
8020ae6c: 23 38 a4 ee  	sd	a0, -0x110(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8020ae70: 23 38 a4 e6  	sd	a0, -0x190(s0)
8020ae74: 01 45        	li	a0, 0x0
8020ae76: 23 3c a4 e6  	sd	a0, -0x188(s0)
8020ae7a: 83 35 04 e7  	ld	a1, -0x190(s0)
8020ae7e: 03 35 84 e7  	ld	a0, -0x188(s0)
8020ae82: 23 30 b4 e6  	sd	a1, -0x1a0(s0)
8020ae86: 23 34 a4 e6  	sd	a0, -0x198(s0)
8020ae8a: 83 35 04 e6  	ld	a1, -0x1a0(s0)
8020ae8e: 23 38 b4 d6  	sd	a1, -0x290(s0)
8020ae92: 03 35 84 e6  	ld	a0, -0x198(s0)
8020ae96: 23 3c a4 d6  	sd	a0, -0x288(s0)
8020ae9a: 23 3c b4 ee  	sd	a1, -0x108(s0)
8020ae9e: 23 30 a4 f0  	sd	a0, -0x100(s0)
;             assert_unsafe_precondition!(
8020aea2: 81 a0        	j	0x8020aee2 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0xf6>
8020aea4: 13 05 04 df  	addi	a0, s0, -0x210
;             new_size if old_layout.align() == new_layout.align() => unsafe {
8020aea8: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8020aeac: 13 05 04 dc  	addi	a0, s0, -0x240
8020aeb0: 23 38 a4 f0  	sd	a0, -0xf0(s0)
;         self.align.as_usize()
8020aeb4: 03 35 04 dc  	ld	a0, -0x240(s0)
8020aeb8: 23 3c a4 f0  	sd	a0, -0xe8(s0)
;         self.0 as usize
8020aebc: 23 30 a4 e8  	sd	a0, -0x180(s0)
8020aec0: 03 35 04 e8  	ld	a0, -0x180(s0)
8020aec4: 93 05 04 dd  	addi	a1, s0, -0x230
;             new_size if old_layout.align() == new_layout.align() => unsafe {
8020aec8: 23 30 b4 f2  	sd	a1, -0xe0(s0)
;         self.align.as_usize()
8020aecc: 83 35 04 dd  	ld	a1, -0x230(s0)
8020aed0: 23 34 b4 f2  	sd	a1, -0xd8(s0)
;         self.0 as usize
8020aed4: 23 34 b4 e8  	sd	a1, -0x178(s0)
8020aed8: 83 35 84 e8  	ld	a1, -0x178(s0)
;             new_size if old_layout.align() == new_layout.align() => unsafe {
8020aedc: 63 09 b5 06  	beq	a0, a1, 0x8020af4e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0x162>
8020aee0: 15 a8        	j	0x8020af14 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0x128>
8020aee2: 03 35 04 d7  	ld	a0, -0x290(s0)
;             assert_unsafe_precondition!(
8020aee6: 97 60 ff ff  	auipc	ra, 0xffff6
8020aeea: e7 80 e0 af  	jalr	-0x502(ra) <ekernel+0xffcb39e4>
8020aeee: 09 a0        	j	0x8020aef0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0x104>
8020aef0: 03 35 84 d7  	ld	a0, -0x288(s0)
8020aef4: 83 35 04 d7  	ld	a1, -0x290(s0)
;             NonNull { pointer: ptr as _ }
8020aef8: 23 3c b4 de  	sd	a1, -0x208(s0)
8020aefc: 23 30 a4 e0  	sd	a0, -0x200(s0)
;                 Ok(NonNull::slice_from_raw_parts(new_layout.dangling(), 0))
8020af00: 83 35 84 df  	ld	a1, -0x208(s0)
8020af04: 03 35 04 e0  	ld	a0, -0x200(s0)
8020af08: 23 30 b4 de  	sd	a1, -0x220(s0)
8020af0c: 23 34 a4 de  	sd	a0, -0x218(s0)
8020af10: 09 a0        	j	0x8020af12 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0x126>
;     }
8020af12: 71 aa        	j	0x8020b0ae <.Lpcrel_hi6+0x18>
8020af14: 03 35 84 d8  	ld	a0, -0x278(s0)
;             new_size => unsafe {
8020af18: 83 35 04 df  	ld	a1, -0x210(s0)
8020af1c: 23 34 b4 d6  	sd	a1, -0x298(s0)
8020af20: 23 38 b4 f2  	sd	a1, -0xd0(s0)
;                 let new_ptr = self.allocate(new_layout)?;
8020af24: 83 35 04 dd  	ld	a1, -0x230(s0)
8020af28: 03 36 84 dd  	ld	a2, -0x228(s0)
8020af2c: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8020af30: 23 30 c4 f4  	sd	a2, -0xc0(s0)
8020af34: 81 46        	li	a3, 0x0
;         self.alloc_impl(layout, false)
8020af36: 97 00 00 00  	auipc	ra, 0x0
8020af3a: e7 80 20 c3  	jalr	-0x3ce(ra) <_ZN5alloc5alloc6Global10alloc_impl17h08dcddede9475827E>
8020af3e: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8020af42: 23 3c b4 e4  	sd	a1, -0x1a8(s0)
;         match self {
8020af46: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8020af4a: 1d e5        	bnez	a0, 0x8020af78 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0x18c>
8020af4c: bd a0        	j	0x8020afba <.Lpcrel_hi5>
;             new_size if old_layout.align() == new_layout.align() => unsafe {
8020af4e: 83 35 04 df  	ld	a1, -0x210(s0)
8020af52: 23 3c b4 d4  	sd	a1, -0x2a8(s0)
8020af56: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020af5a: 13 05 04 dc  	addi	a0, s0, -0x240
;                 hint::assert_unchecked(new_size <= old_layout.size());
8020af5e: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self.size
8020af62: 03 35 84 dc  	ld	a0, -0x238(s0)
;                 hint::assert_unchecked(new_size <= old_layout.size());
8020af66: 33 35 b5 00  	sltu	a0, a0, a1
8020af6a: 13 45 15 00  	xori	a0, a0, 0x1
8020af6e: 23 30 a4 d6  	sd	a0, -0x2a0(s0)
8020af72: a3 07 a4 f8  	sb	a0, -0x71(s0)
;         intrinsics::assert_unsafe_precondition!(
8020af76: 55 a8        	j	0x8020b02a <.Lpcrel_hi5+0x70>
8020af78: 83 35 04 d8  	ld	a1, -0x280(s0)
;             Ok(v) => ControlFlow::Continue(v),
8020af7c: 03 36 04 e5  	ld	a2, -0x1b0(s0)
8020af80: 03 35 84 e5  	ld	a0, -0x1a8(s0)
8020af84: 23 34 c4 f4  	sd	a2, -0xb8(s0)
8020af88: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020af8c: 23 30 c4 e4  	sd	a2, -0x1c0(s0)
8020af90: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
;                 let new_ptr = self.allocate(new_layout)?;
8020af94: 03 35 04 e4  	ld	a0, -0x1c0(s0)
8020af98: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
8020af9c: 03 36 84 e4  	ld	a2, -0x1b8(s0)
8020afa0: 23 38 c4 d4  	sd	a2, -0x2b0(s0)
8020afa4: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020afa8: 23 30 c4 f6  	sd	a2, -0xa0(s0)
;         self.pointer as *mut T
8020afac: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020afb0: 23 30 a4 ec  	sd	a0, -0x140(s0)
;         self.pointer as *mut T
8020afb4: 23 38 a4 f6  	sd	a0, -0x90(s0)
;     assert_unsafe_precondition!(
8020afb8: 21 a8        	j	0x8020afd0 <.Lpcrel_hi5+0x16>

000000008020afba <.Lpcrel_hi5>:
;             Err(e) => Err(From::from(e)),
8020afba: 17 85 02 00  	auipc	a0, 0x28
8020afbe: 13 05 65 2d  	addi	a0, a0, 0x2d6
8020afc2: 0c 61        	ld	a1, 0x0(a0)
8020afc4: 08 65        	ld	a0, 0x8(a0)
8020afc6: 23 30 b4 de  	sd	a1, -0x220(s0)
8020afca: 23 34 a4 de  	sd	a0, -0x218(s0)
; #![no_std]
8020afce: a9 a8        	j	0x8020b028 <.Lpcrel_hi5+0x6e>
8020afd0: 03 37 84 d6  	ld	a4, -0x298(s0)
8020afd4: 83 35 84 d4  	ld	a1, -0x2b8(s0)
8020afd8: 03 35 04 d8  	ld	a0, -0x280(s0)
8020afdc: 85 46        	li	a3, 0x1
;     assert_unsafe_precondition!(
8020afde: 36 86        	mv	a2, a3
8020afe0: 97 f0 00 00  	auipc	ra, 0xf
8020afe4: e7 80 c0 82  	jalr	-0x7d4(ra) <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h279b2b08ed81b702E>
8020afe8: 09 a0        	j	0x8020afea <.Lpcrel_hi5+0x30>
8020afea: 03 35 84 d4  	ld	a0, -0x2b8(s0)
8020afee: 83 35 04 d8  	ld	a1, -0x280(s0)
8020aff2: 03 36 84 d6  	ld	a2, -0x298(s0)
;     unsafe { copy_nonoverlapping(src, dst, count) }
8020aff6: 97 70 02 00  	auipc	ra, 0x27
8020affa: e7 80 80 c7  	jalr	-0x388(ra) <memcpy>
8020affe: 83 35 04 d8  	ld	a1, -0x280(s0)
8020b002: 03 35 84 d8  	ld	a0, -0x278(s0)
;                 self.deallocate(ptr, old_layout);
8020b006: 03 36 04 dc  	ld	a2, -0x240(s0)
8020b00a: 83 36 84 dc  	ld	a3, -0x238(s0)
8020b00e: 97 00 00 00  	auipc	ra, 0x0
8020b012: e7 80 60 d6  	jalr	-0x29a(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hebf3c826c132e051E>
8020b016: 83 35 84 d4  	ld	a1, -0x2b8(s0)
8020b01a: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;                 Ok(new_ptr)
8020b01e: 23 30 b4 de  	sd	a1, -0x220(s0)
8020b022: 23 34 a4 de  	sd	a0, -0x218(s0)
;             },
8020b026: f5 b5        	j	0x8020af12 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0x126>
;     }
8020b028: 59 a0        	j	0x8020b0ae <.Lpcrel_hi6+0x18>
8020b02a: 03 35 04 d6  	ld	a0, -0x2a0(s0)
;         intrinsics::assert_unsafe_precondition!(
8020b02e: 05 89        	andi	a0, a0, 0x1
8020b030: 97 00 00 00  	auipc	ra, 0x0
8020b034: e7 80 00 8b  	jalr	-0x750(ra) <_ZN4core4hint16assert_unchecked18precondition_check17hc3c9cbded1b45111E>
8020b038: 09 a0        	j	0x8020b03a <.Lpcrel_hi5+0x80>
8020b03a: 83 36 84 d5  	ld	a3, -0x2a8(s0)
8020b03e: 03 35 04 d8  	ld	a0, -0x280(s0)
;         self.pointer as *mut T
8020b042: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                 let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
8020b046: 03 36 04 dc  	ld	a2, -0x240(s0)
8020b04a: 83 35 84 dc  	ld	a1, -0x238(s0)
8020b04e: 23 34 c4 e0  	sd	a2, -0x1f8(s0)
8020b052: 23 38 b4 e0  	sd	a1, -0x1f0(s0)
8020b056: 13 06 84 e0  	addi	a2, s0, -0x1f8
;     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
8020b05a: 23 3c c4 f8  	sd	a2, -0x68(s0)
;         self.size
8020b05e: 83 35 04 e1  	ld	a1, -0x1f0(s0)
;     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
8020b062: 23 30 c4 fa  	sd	a2, -0x60(s0)
;         self.align.as_usize()
8020b066: 03 36 84 e0  	ld	a2, -0x1f8(s0)
8020b06a: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         self.0 as usize
8020b06e: 23 38 c4 e8  	sd	a2, -0x170(s0)
8020b072: 03 36 04 e9  	ld	a2, -0x170(s0)
;     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
8020b076: 97 00 00 00  	auipc	ra, 0x0
8020b07a: e7 80 00 65  	jalr	0x650(ra) <__rust_realloc>
8020b07e: aa 85        	mv	a1, a0
8020b080: 23 30 b4 d4  	sd	a1, -0x2c0(s0)
8020b084: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         if !ptr.is_null() {
8020b088: 15 e1        	bnez	a0, 0x8020b0ac <.Lpcrel_hi6+0x16>
8020b08a: 09 a0        	j	0x8020b08c <.Lpcrel_hi5+0xd2>
8020b08c: 01 45        	li	a0, 0x0
;             None
8020b08e: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
;             None => Err(err),
8020b092: 23 30 a4 e2  	sd	a0, -0x1e0(s0)

000000008020b096 <.Lpcrel_hi6>:
;             Err(e) => Err(From::from(e)),
8020b096: 17 85 02 00  	auipc	a0, 0x28
8020b09a: 13 05 a5 1f  	addi	a0, a0, 0x1fa
8020b09e: 0c 61        	ld	a1, 0x0(a0)
8020b0a0: 08 65        	ld	a0, 0x8(a0)
8020b0a2: 23 30 b4 de  	sd	a1, -0x220(s0)
8020b0a6: 23 34 a4 de  	sd	a0, -0x218(s0)
; #![no_std]
8020b0aa: bd bf        	j	0x8020b028 <.Lpcrel_hi5+0x6e>
;             assert_unsafe_precondition!(
8020b0ac: 21 a8        	j	0x8020b0c4 <.Lpcrel_hi6+0x2e>
;     }
8020b0ae: 03 35 04 de  	ld	a0, -0x220(s0)
8020b0b2: 83 35 84 de  	ld	a1, -0x218(s0)
8020b0b6: 83 30 81 2c  	ld	ra, 0x2c8(sp)
8020b0ba: 03 34 01 2c  	ld	s0, 0x2c0(sp)
8020b0be: 13 01 01 2d  	addi	sp, sp, 0x2d0
8020b0c2: 82 80        	ret
8020b0c4: 03 35 04 d4  	ld	a0, -0x2c0(s0)
;             assert_unsafe_precondition!(
8020b0c8: 97 60 ff ff  	auipc	ra, 0xffff6
8020b0cc: e7 80 c0 91  	jalr	-0x6e4(ra) <ekernel+0xffcb39e4>
8020b0d0: 09 a0        	j	0x8020b0d2 <.Lpcrel_hi6+0x3c>
8020b0d2: 03 35 84 d5  	ld	a0, -0x2a8(s0)
8020b0d6: 83 35 04 d4  	ld	a1, -0x2c0(s0)
;             NonNull { pointer: ptr as _ }
8020b0da: 23 3c b4 e8  	sd	a1, -0x168(s0)
;             Some(unsafe { Self::new_unchecked(ptr) })
8020b0de: 83 35 84 e9  	ld	a1, -0x168(s0)
8020b0e2: 23 34 b4 e2  	sd	a1, -0x1d8(s0)
;             Some(v) => Ok(v),
8020b0e6: 83 35 84 e2  	ld	a1, -0x1d8(s0)
8020b0ea: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020b0ee: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
;             Ok(v) => ControlFlow::Continue(v),
8020b0f2: 83 35 04 e2  	ld	a1, -0x1e0(s0)
8020b0f6: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020b0fa: 23 3c b4 e0  	sd	a1, -0x1e8(s0)
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
8020b0fe: 83 35 84 e1  	ld	a1, -0x1e8(s0)
8020b102: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.pointer as *mut T
8020b106: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self as _
8020b10a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8020b10e: 23 38 b4 ea  	sd	a1, -0x150(s0)
8020b112: 23 3c a4 ea  	sd	a0, -0x148(s0)
8020b116: 83 35 04 eb  	ld	a1, -0x150(s0)
8020b11a: 03 35 84 eb  	ld	a0, -0x148(s0)
8020b11e: 23 30 b4 ea  	sd	a1, -0x160(s0)
8020b122: 23 34 a4 ea  	sd	a0, -0x158(s0)
8020b126: 83 35 04 ea  	ld	a1, -0x160(s0)
8020b12a: 23 38 b4 d2  	sd	a1, -0x2d0(s0)
8020b12e: 03 35 84 ea  	ld	a0, -0x158(s0)
8020b132: 23 3c a4 d2  	sd	a0, -0x2c8(s0)
8020b136: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020b13a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
8020b13e: 09 a0        	j	0x8020b140 <.Lpcrel_hi6+0xaa>
8020b140: 03 35 04 d3  	ld	a0, -0x2d0(s0)
;             assert_unsafe_precondition!(
8020b144: 97 60 ff ff  	auipc	ra, 0xffff6
8020b148: e7 80 00 8a  	jalr	-0x760(ra) <ekernel+0xffcb39e4>
8020b14c: 09 a0        	j	0x8020b14e <.Lpcrel_hi6+0xb8>
8020b14e: 03 35 84 d3  	ld	a0, -0x2c8(s0)
8020b152: 83 35 04 d3  	ld	a1, -0x2d0(s0)
;             NonNull { pointer: ptr as _ }
8020b156: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
8020b15a: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
;                 Ok(NonNull::slice_from_raw_parts(ptr, new_size))
8020b15e: 83 35 04 e3  	ld	a1, -0x1d0(s0)
8020b162: 03 35 84 e3  	ld	a0, -0x1c8(s0)
8020b166: 23 30 b4 de  	sd	a1, -0x220(s0)
8020b16a: 23 34 a4 de  	sd	a0, -0x218(s0)
;             },
8020b16e: 55 b3        	j	0x8020af12 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$6shrink17h505fa109a5c0013cE+0x126>

000000008020b170 <_ZN14virtio_drivers6header12VirtIOHeader10begin_init17haf592af346e23cc1E>:
;     pub fn begin_init(&mut self, negotiate_features: impl FnOnce(u64) -> u64) {
8020b170: 39 71        	addi	sp, sp, -0x40
8020b172: 06 fc        	sd	ra, 0x38(sp)
8020b174: 22 f8        	sd	s0, 0x30(sp)
8020b176: 80 00        	addi	s0, sp, 0x40
8020b178: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020b17c: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.status.write(DeviceStatus::ACKNOWLEDGE);
8020b180: 13 05 05 07  	addi	a0, a0, 0x70
8020b184: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020b188: 85 45        	li	a1, 0x1
8020b18a: 97 f0 00 00  	auipc	ra, 0xf
8020b18e: e7 80 60 e3  	jalr	-0x1ca(ra) <_ZN8volatile17Volatile$LT$T$GT$5write17h98adde7dee18a555E>
8020b192: 03 35 04 fc  	ld	a0, -0x40(s0)
8020b196: 89 45        	li	a1, 0x2
;         self.status.write(DeviceStatus::DRIVER);
8020b198: 97 f0 00 00  	auipc	ra, 0xf
8020b19c: e7 80 80 e2  	jalr	-0x1d8(ra) <_ZN8volatile17Volatile$LT$T$GT$5write17h98adde7dee18a555E>
8020b1a0: 03 35 84 fc  	ld	a0, -0x38(s0)
;         let features = self.read_device_features();
8020b1a4: 97 f0 00 00  	auipc	ra, 0xf
8020b1a8: e7 80 e0 e7  	jalr	-0x182(ra) <_ZN14virtio_drivers6header12VirtIOHeader20read_device_features17he43839aba792c0cdE>
8020b1ac: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.write_driver_features(negotiate_features(features));
8020b1b0: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020b1b4: 03 35 04 fd  	ld	a0, -0x30(s0)
8020b1b8: 97 c0 00 00  	auipc	ra, 0xc
8020b1bc: e7 80 80 e0  	jalr	-0x1f8(ra) <_ZN14virtio_drivers3blk18VirtIOBlk$LT$H$GT$3new28_$u7b$$u7b$closure$u7d$$u7d$17h73e08e92b2156d50E>
8020b1c0: aa 85        	mv	a1, a0
8020b1c2: 03 35 84 fc  	ld	a0, -0x38(s0)
8020b1c6: 97 f0 00 00  	auipc	ra, 0xf
8020b1ca: e7 80 e0 ef  	jalr	-0x102(ra) <_ZN14virtio_drivers6header12VirtIOHeader21write_driver_features17hb6ab0db3a3c0da05E>
8020b1ce: 03 35 04 fc  	ld	a0, -0x40(s0)
8020b1d2: a1 45        	li	a1, 0x8
;         self.status.write(DeviceStatus::FEATURES_OK);
8020b1d4: 97 f0 00 00  	auipc	ra, 0xf
8020b1d8: e7 80 c0 de  	jalr	-0x214(ra) <_ZN8volatile17Volatile$LT$T$GT$5write17h98adde7dee18a555E>
8020b1dc: 03 35 84 fc  	ld	a0, -0x38(s0)
;         self.guest_page_size.write(PAGE_SIZE as u32);
8020b1e0: 13 05 85 02  	addi	a0, a0, 0x28
8020b1e4: 85 65        	lui	a1, 0x1
8020b1e6: 97 f0 00 00  	auipc	ra, 0xf
8020b1ea: e7 80 a0 df  	jalr	-0x206(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8020b1ee: e2 70        	ld	ra, 0x38(sp)
8020b1f0: 42 74        	ld	s0, 0x30(sp)
;     }
8020b1f2: 21 61        	addi	sp, sp, 0x40
8020b1f4: 82 80        	ret

000000008020b1f6 <_ZN14virtio_drivers3blk10BlkFeature18from_bits_truncate17hfebcaaf6f2b64947E>:
;             pub const fn from_bits_truncate(bits: $T) -> Self {
8020b1f6: 79 71        	addi	sp, sp, -0x30
8020b1f8: 06 f4        	sd	ra, 0x28(sp)
8020b1fa: 22 f0        	sd	s0, 0x20(sp)
8020b1fc: 00 18        	addi	s0, sp, 0x30
8020b1fe: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020b202: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 Self { bits: bits & Self::all().bits }
8020b206: 97 00 00 00  	auipc	ra, 0x0
8020b20a: e7 80 00 02  	jalr	0x20(ra) <_ZN14virtio_drivers3blk10BlkFeature3all17hb7a16a5b8b2b4d07E>
8020b20e: aa 85        	mv	a1, a0
8020b210: 03 35 84 fd  	ld	a0, -0x28(s0)
8020b214: 6d 8d        	and	a0, a0, a1
8020b216: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             }
8020b21a: 03 35 04 fe  	ld	a0, -0x20(s0)
8020b21e: a2 70        	ld	ra, 0x28(sp)
8020b220: 02 74        	ld	s0, 0x20(sp)
8020b222: 45 61        	addi	sp, sp, 0x30
8020b224: 82 80        	ret

000000008020b226 <_ZN14virtio_drivers3blk10BlkFeature3all17hb7a16a5b8b2b4d07E>:
;             pub const fn all() -> Self {
8020b226: 01 11        	addi	sp, sp, -0x20
8020b228: 06 ec        	sd	ra, 0x18(sp)
8020b22a: 22 e8        	sd	s0, 0x10(sp)
8020b22c: 00 10        	addi	s0, sp, 0x20
8020b22e: 37 95 f7 07  	lui	a0, 0x7f79
8020b232: 1d 25        	addiw	a0, a0, 0x7
8020b234: 32 05        	slli	a0, a0, 0xc
8020b236: 13 05 75 ef  	addi	a0, a0, -0x109
;                 __impl_all_bitflags! {
8020b23a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             }
8020b23e: 03 35 84 fe  	ld	a0, -0x18(s0)
8020b242: e2 60        	ld	ra, 0x18(sp)
8020b244: 42 64        	ld	s0, 0x10(sp)
8020b246: 05 61        	addi	sp, sp, 0x20
8020b248: 82 80        	ret

000000008020b24a <_ZN14virtio_drivers3blk10BlkFeature4bits17h3490af20e36cb861E>:
;             pub const fn bits(&self) -> $T {
8020b24a: 01 11        	addi	sp, sp, -0x20
8020b24c: 06 ec        	sd	ra, 0x18(sp)
8020b24e: 22 e8        	sd	s0, 0x10(sp)
8020b250: 00 10        	addi	s0, sp, 0x20
8020b252: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 self.bits
8020b256: 08 61        	ld	a0, 0x0(a0)
8020b258: e2 60        	ld	ra, 0x18(sp)
8020b25a: 42 64        	ld	s0, 0x10(sp)
;             }
8020b25c: 05 61        	addi	sp, sp, 0x20
8020b25e: 82 80        	ret

000000008020b260 <_ZN14virtio_drivers3blk10BlkFeature5empty17h47b168b7dbddfe3bE>:
;             pub const fn empty() -> Self {
8020b260: 01 11        	addi	sp, sp, -0x20
8020b262: 06 ec        	sd	ra, 0x18(sp)
8020b264: 22 e8        	sd	s0, 0x10(sp)
8020b266: 00 10        	addi	s0, sp, 0x20
8020b268: 01 45        	li	a0, 0x0
;                 Self { bits: 0 }
8020b26a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             }
8020b26e: 03 35 84 fe  	ld	a0, -0x18(s0)
8020b272: e2 60        	ld	ra, 0x18(sp)
8020b274: 42 64        	ld	s0, 0x10(sp)
8020b276: 05 61        	addi	sp, sp, 0x20
8020b278: 82 80        	ret

000000008020b27a <_ZN67_$LT$virtio_drivers..blk..BlkConfig$u20$as$u20$core..fmt..Debug$GT$3fmt17h4e0b08623151865cE>:
; #[derive(Debug)]
8020b27a: 11 71        	addi	sp, sp, -0x100
8020b27c: 86 fd        	sd	ra, 0xf8(sp)
8020b27e: a2 f9        	sd	s0, 0xf0(sp)
8020b280: 00 02        	addi	s0, sp, 0x100
8020b282: 23 34 b4 f0  	sd	a1, -0xf8(s0)
8020b286: 2a 8e        	mv	t3, a0
8020b288: 03 35 84 f0  	ld	a0, -0xf8(s0)
8020b28c: 23 34 c4 fd  	sd	t3, -0x38(s0)
8020b290: 23 38 a4 fc  	sd	a0, -0x30(s0)

000000008020b294 <.Lpcrel_hi0>:
8020b294: 97 a5 02 00  	auipc	a1, 0x2a
8020b298: 93 86 c5 bf  	addi	a3, a1, -0x404
8020b29c: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     size_max: Volatile<u32>,
8020b2a0: 93 08 8e 00  	addi	a7, t3, 0x8
;     seg_max: Volatile<u32>,
8020b2a4: 93 03 ce 00  	addi	t2, t3, 0xc
;     cylinders: Volatile<u16>,
8020b2a8: 93 05 0e 01  	addi	a1, t3, 0x10
;     heads: Volatile<u8>,
8020b2ac: 13 07 2e 01  	addi	a4, t3, 0x12
;     sectors: Volatile<u8>,
8020b2b0: 13 03 3e 01  	addi	t1, t3, 0x13
;     blk_size: Volatile<u32>,
8020b2b4: 93 02 4e 01  	addi	t0, t3, 0x14
;     physical_block_exp: Volatile<u8>,
8020b2b8: 13 08 8e 01  	addi	a6, t3, 0x18
;     alignment_offset: Volatile<u8>,
8020b2bc: 93 07 9e 01  	addi	a5, t3, 0x19
;     min_io_size: Volatile<u16>,
8020b2c0: 13 06 ae 01  	addi	a2, t3, 0x1a
;     opt_io_size: Volatile<u32>,
8020b2c4: 93 0e ce 01  	addi	t4, t3, 0x1c
8020b2c8: 23 30 d4 fd  	sd	t4, -0x40(s0)
; #[derive(Debug)]
8020b2cc: 23 38 c4 f1  	sd	t3, -0xf0(s0)

000000008020b2d0 <.Lpcrel_hi1>:
8020b2d0: 17 ae 02 00  	auipc	t3, 0x2a
8020b2d4: 13 0e 0e c7  	addi	t3, t3, -0x390
8020b2d8: 23 3c c4 f1  	sd	t3, -0xe8(s0)
8020b2dc: 23 30 14 f3  	sd	a7, -0xe0(s0)

000000008020b2e0 <.Lpcrel_hi2>:
8020b2e0: 97 a8 02 00  	auipc	a7, 0x2a
8020b2e4: 93 88 08 c8  	addi	a7, a7, -0x380
8020b2e8: 23 34 14 f3  	sd	a7, -0xd8(s0)
8020b2ec: 23 38 74 f2  	sd	t2, -0xd0(s0)
8020b2f0: 23 3c 14 f3  	sd	a7, -0xc8(s0)
8020b2f4: 23 30 b4 f4  	sd	a1, -0xc0(s0)

000000008020b2f8 <.Lpcrel_hi3>:
8020b2f8: 97 a5 02 00  	auipc	a1, 0x2a
8020b2fc: 93 85 85 c8  	addi	a1, a1, -0x378
8020b300: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8020b304: 23 38 e4 f4  	sd	a4, -0xb0(s0)

000000008020b308 <.Lpcrel_hi4>:
8020b308: 17 a7 02 00  	auipc	a4, 0x2a
8020b30c: 13 07 87 c9  	addi	a4, a4, -0x368
8020b310: 23 3c e4 f4  	sd	a4, -0xa8(s0)
8020b314: 23 30 64 f6  	sd	t1, -0xa0(s0)
8020b318: 23 34 e4 f6  	sd	a4, -0x98(s0)
8020b31c: 23 38 54 f6  	sd	t0, -0x90(s0)
8020b320: 23 3c 14 f7  	sd	a7, -0x88(s0)
8020b324: 23 30 04 f9  	sd	a6, -0x80(s0)
8020b328: 23 34 e4 f8  	sd	a4, -0x78(s0)
8020b32c: 23 38 f4 f8  	sd	a5, -0x70(s0)
8020b330: 23 3c e4 f8  	sd	a4, -0x68(s0)
8020b334: 23 30 c4 fa  	sd	a2, -0x60(s0)
8020b338: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020b33c: 93 05 04 fc  	addi	a1, s0, -0x40
8020b340: 23 38 b4 fa  	sd	a1, -0x50(s0)

000000008020b344 <.Lpcrel_hi5>:
8020b344: 97 a5 02 00  	auipc	a1, 0x2a
8020b348: 93 85 c5 c7  	addi	a1, a1, -0x384
8020b34c: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020b350: 93 07 04 f1  	addi	a5, s0, -0xf0
8020b354: 23 30 f4 fe  	sd	a5, -0x20(s0)
8020b358: 2d 48        	li	a6, 0xb
8020b35a: 23 34 04 ff  	sd	a6, -0x18(s0)

000000008020b35e <.Lpcrel_hi6>:
8020b35e: 97 a5 02 00  	auipc	a1, 0x2a
8020b362: 93 85 25 c8  	addi	a1, a1, -0x37e
8020b366: 25 46        	li	a2, 0x9
8020b368: 42 87        	mv	a4, a6
8020b36a: 97 40 02 00  	auipc	ra, 0x24
8020b36e: e7 80 00 79  	jalr	0x790(ra) <_ZN4core3fmt9Formatter26debug_struct_fields_finish17hceb5608869353109E>
8020b372: ee 70        	ld	ra, 0xf8(sp)
8020b374: 4e 74        	ld	s0, 0xf0(sp)
8020b376: 11 61        	addi	sp, sp, 0x100
8020b378: 82 80        	ret

000000008020b37a <_ZN74_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..ops..bit..BitAnd$GT$6bitand17h87b788225c445815E>:
;             fn bitand(self, other: Self) -> Self {
8020b37a: 79 71        	addi	sp, sp, -0x30
8020b37c: 06 f4        	sd	ra, 0x28(sp)
8020b37e: 22 f0        	sd	s0, 0x20(sp)
8020b380: 00 18        	addi	s0, sp, 0x30
8020b382: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b386: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 Self { bits: self.bits & other.bits }
8020b38a: 6d 8d        	and	a0, a0, a1
8020b38c: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             }
8020b390: 03 35 84 fd  	ld	a0, -0x28(s0)
8020b394: a2 70        	ld	ra, 0x28(sp)
8020b396: 02 74        	ld	s0, 0x20(sp)
8020b398: 45 61        	addi	sp, sp, 0x30
8020b39a: 82 80        	ret

000000008020b39c <_ZN5alloc5slice4hack8into_vec17h5f7a300774573e08E>:
;     pub fn into_vec<T, A: Allocator>(b: Box<[T], A>) -> Vec<T, A> {
8020b39c: 75 71        	addi	sp, sp, -0x90
8020b39e: 06 e5        	sd	ra, 0x88(sp)
8020b3a0: 22 e1        	sd	s0, 0x80(sp)
8020b3a2: 00 09        	addi	s0, sp, 0x90
8020b3a4: 23 30 c4 f8  	sd	a2, -0x80(s0)
8020b3a8: 2e 86        	mv	a2, a1
8020b3aa: 83 35 04 f8  	ld	a1, -0x80(s0)
8020b3ae: 23 3c c4 f6  	sd	a2, -0x88(s0)
8020b3b2: 2a 86        	mv	a2, a0
8020b3b4: 03 35 84 f7  	ld	a0, -0x88(s0)
8020b3b8: 23 34 c4 f8  	sd	a2, -0x78(s0)
8020b3bc: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020b3c0: 23 34 b4 fa  	sd	a1, -0x58(s0)
;             let len = b.len();
8020b3c4: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         ManuallyDrop { value }
8020b3c8: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020b3cc: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020b3d0: 13 06 04 f9  	addi	a2, s0, -0x70
;         let ptr = addr_of_mut!(**b);
8020b3d4: 23 30 c4 fc  	sd	a2, -0x40(s0)
8020b3d8: 03 35 04 f9  	ld	a0, -0x70(s0)
8020b3dc: 83 36 84 f9  	ld	a3, -0x68(s0)
8020b3e0: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020b3e4: 23 38 d4 fc  	sd	a3, -0x30(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
8020b3e8: 23 3c c4 fc  	sd	a2, -0x28(s0)
8020b3ec: 13 06 04 fa  	addi	a2, s0, -0x60
8020b3f0: 23 30 c4 fe  	sd	a2, -0x20(s0)
;             Vec::from_raw_parts_in(b as *mut T, len, len, alloc)
8020b3f4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
8020b3f8: 97 50 00 00  	auipc	ra, 0x5
8020b3fc: e7 80 a0 7a  	jalr	0x7aa(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hed15dec1547ccf0cE>
8020b400: 03 36 04 f8  	ld	a2, -0x80(s0)
8020b404: aa 86        	mv	a3, a0
8020b406: 03 35 84 f8  	ld	a0, -0x78(s0)
8020b40a: 14 e1        	sd	a3, 0x0(a0)
8020b40c: 0c e5        	sd	a1, 0x8(a0)
8020b40e: 10 e9        	sd	a2, 0x10(a0)
8020b410: aa 60        	ld	ra, 0x88(sp)
8020b412: 0a 64        	ld	s0, 0x80(sp)
;     }
8020b414: 49 61        	addi	sp, sp, 0x90
8020b416: 82 80        	ret

000000008020b418 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h1669939f1b13bebdE>:
;     pub const unsafe fn sub_ptr(self, origin: *const T) -> usize
8020b418: 39 71        	addi	sp, sp, -0x40
8020b41a: 06 fc        	sd	ra, 0x38(sp)
8020b41c: 22 f8        	sd	s0, 0x30(sp)
8020b41e: 80 00        	addi	s0, sp, 0x40
8020b420: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020b424: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020b428: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020b42c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         assert_unsafe_precondition!(
8020b430: 09 a0        	j	0x8020b432 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h1669939f1b13bebdE+0x1a>
8020b432: 83 35 04 fc  	ld	a1, -0x40(s0)
8020b436: 03 35 84 fc  	ld	a0, -0x38(s0)
;         assert_unsafe_precondition!(
8020b43a: 97 70 00 00  	auipc	ra, 0x7
8020b43e: e7 80 a0 db  	jalr	-0x246(ra) <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17he02cf9b043a20bcaE>
8020b442: 09 a0        	j	0x8020b444 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h1669939f1b13bebdE+0x2c>
8020b444: 61 45        	li	a0, 0x18
;     intrinsics::size_of::<T>()
8020b446: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
8020b44a: 09 a0        	j	0x8020b44c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h1669939f1b13bebdE+0x34>
8020b44c: 09 a0        	j	0x8020b44e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h1669939f1b13bebdE+0x36>
8020b44e: 03 35 84 fc  	ld	a0, -0x38(s0)
8020b452: 83 35 04 fc  	ld	a1, -0x40(s0)
;         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }
8020b456: 0d 8d        	sub	a0, a0, a1
8020b458: b7 b5 aa aa  	lui	a1, 0xaaaab
8020b45c: 9b 85 b5 aa  	addiw	a1, a1, -0x555
8020b460: 13 96 05 02  	slli	a2, a1, 0x20
8020b464: b2 95        	add	a1, a1, a2
8020b466: 33 35 b5 02  	mulhu	a0, a0, a1
8020b46a: 11 81        	srli	a0, a0, 0x4
8020b46c: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020b470: 03 35 84 fe  	ld	a0, -0x18(s0)
8020b474: e2 70        	ld	ra, 0x38(sp)
8020b476: 42 74        	ld	s0, 0x30(sp)
;     }
8020b478: 21 61        	addi	sp, sp, 0x40
8020b47a: 82 80        	ret

000000008020b47c <_ZN5riscv8register4time4read17h3f97d3f15bfa9b7aE>:
;         pub fn read() -> usize {
8020b47c: 41 11        	addi	sp, sp, -0x10
8020b47e: 06 e4        	sd	ra, 0x8(sp)
8020b480: 22 e0        	sd	s0, 0x0(sp)
8020b482: 00 08        	addi	s0, sp, 0x10
;             unsafe { _read() }
8020b484: 97 00 00 00  	auipc	ra, 0x0
8020b488: e7 80 00 01  	jalr	0x10(ra) <_ZN5riscv8register4time5_read17hce5c4534c8a6b116E>
8020b48c: a2 60        	ld	ra, 0x8(sp)
8020b48e: 02 64        	ld	s0, 0x0(sp)
;         }
8020b490: 41 01        	addi	sp, sp, 0x10
8020b492: 82 80        	ret

000000008020b494 <_ZN5riscv8register4time5_read17hce5c4534c8a6b116E>:
;         unsafe fn _read() -> usize {
8020b494: 01 11        	addi	sp, sp, -0x20
8020b496: 06 ec        	sd	ra, 0x18(sp)
8020b498: 22 e8        	sd	s0, 0x10(sp)
8020b49a: 00 10        	addi	s0, sp, 0x20
;                     core::arch::asm!("csrrs {0}, {1}, x0", out(reg) r, const $csr_number);
8020b49c: 73 25 10 c0  	rdtime	a0
8020b4a0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     r
8020b4a4: 03 35 84 fe  	ld	a0, -0x18(s0)
8020b4a8: e2 60        	ld	ra, 0x18(sp)
8020b4aa: 42 64        	ld	s0, 0x10(sp)
;         }
8020b4ac: 05 61        	addi	sp, sp, 0x20
8020b4ae: 82 80        	ret

000000008020b4b0 <_ZN5riscv8register5stvec5write17hf43881e0ca0273f5E>:
; pub unsafe fn write(addr: usize, mode: TrapMode) {
8020b4b0: 79 71        	addi	sp, sp, -0x30
8020b4b2: 06 f4        	sd	ra, 0x28(sp)
8020b4b4: 22 f0        	sd	s0, 0x20(sp)
8020b4b6: 00 18        	addi	s0, sp, 0x30
8020b4b8: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020b4bc: aa 85        	mv	a1, a0
8020b4be: 03 35 04 fd  	ld	a0, -0x30(s0)
8020b4c2: a3 03 a4 fe  	sb	a0, -0x19(s0)
8020b4c6: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     _write(addr + mode as usize);
8020b4ca: 03 45 74 fe  	lbu	a0, -0x19(s0)
8020b4ce: 2e 95        	add	a0, a0, a1
8020b4d0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020b4d4: 63 6d b5 00  	bltu	a0, a1, 0x8020b4ee <.Lpcrel_hi0>
8020b4d8: 09 a0        	j	0x8020b4da <_ZN5riscv8register5stvec5write17hf43881e0ca0273f5E+0x2a>
8020b4da: 03 35 84 fd  	ld	a0, -0x28(s0)
;     _write(addr + mode as usize);
8020b4de: 97 00 00 00  	auipc	ra, 0x0
8020b4e2: e7 80 a0 02  	jalr	0x2a(ra) <_ZN5riscv8register5stvec6_write17h09feb635914b2a89E>
8020b4e6: a2 70        	ld	ra, 0x28(sp)
8020b4e8: 02 74        	ld	s0, 0x20(sp)
; }
8020b4ea: 45 61        	addi	sp, sp, 0x30
8020b4ec: 82 80        	ret

000000008020b4ee <.Lpcrel_hi0>:
;     _write(addr + mode as usize);
8020b4ee: 17 a5 02 00  	auipc	a0, 0x2a
8020b4f2: 13 05 25 b7  	addi	a0, a0, -0x48e

000000008020b4f6 <.Lpcrel_hi1>:
8020b4f6: 97 a5 02 00  	auipc	a1, 0x2a
8020b4fa: 13 86 a5 b4  	addi	a2, a1, -0x4b6
8020b4fe: f1 45        	li	a1, 0x1c
8020b500: 97 50 02 00  	auipc	ra, 0x25
8020b504: e7 80 80 d1  	jalr	-0x2e8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020b508 <_ZN5riscv8register5stvec6_write17h09feb635914b2a89E>:
;         unsafe fn _write(bits: usize) {
8020b508: 01 11        	addi	sp, sp, -0x20
8020b50a: 06 ec        	sd	ra, 0x18(sp)
8020b50c: 22 e8        	sd	s0, 0x10(sp)
8020b50e: 00 10        	addi	s0, sp, 0x20
8020b510: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 () => core::arch::asm!("csrrw x0, {1}, {0}", in(reg) bits, const $csr_number),
8020b514: 73 10 55 10  	csrw	stvec, a0
8020b518: e2 60        	ld	ra, 0x18(sp)
8020b51a: 42 64        	ld	s0, 0x10(sp)
;         }
8020b51c: 05 61        	addi	sp, sp, 0x20
8020b51e: 82 80        	ret

000000008020b520 <_ZN4core5panic8location8Location4file17hd9f016dacada464aE>:
;     pub const fn file(&self) -> &str {
8020b520: 01 11        	addi	sp, sp, -0x20
8020b522: 06 ec        	sd	ra, 0x18(sp)
8020b524: 22 e8        	sd	s0, 0x10(sp)
8020b526: 00 10        	addi	s0, sp, 0x20
8020b528: aa 85        	mv	a1, a0
8020b52a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.file
8020b52e: 88 61        	ld	a0, 0x0(a1)
8020b530: 8c 65        	ld	a1, 0x8(a1)
8020b532: e2 60        	ld	ra, 0x18(sp)
8020b534: 42 64        	ld	s0, 0x10(sp)
;     }
8020b536: 05 61        	addi	sp, sp, 0x20
8020b538: 82 80        	ret

000000008020b53a <_ZN4core5panic8location8Location4line17h4a57ba39b3e6ddaeE>:
;     pub const fn line(&self) -> u32 {
8020b53a: 01 11        	addi	sp, sp, -0x20
8020b53c: 06 ec        	sd	ra, 0x18(sp)
8020b53e: 22 e8        	sd	s0, 0x10(sp)
8020b540: 00 10        	addi	s0, sp, 0x20
8020b542: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     }
8020b546: 08 49        	lw	a0, 0x10(a0)
8020b548: e2 60        	ld	ra, 0x18(sp)
8020b54a: 42 64        	ld	s0, 0x10(sp)
8020b54c: 05 61        	addi	sp, sp, 0x20
8020b54e: 82 80        	ret

000000008020b550 <_ZN2os6kalloc9init_heap17he6a1f8969c2a15dcE>:
; pub fn init_heap() {
8020b550: 75 71        	addi	sp, sp, -0x90
8020b552: 06 e5        	sd	ra, 0x88(sp)
8020b554: 22 e1        	sd	s0, 0x80(sp)
8020b556: 00 09        	addi	s0, sp, 0x90

000000008020b558 <.Lpcrel_hi0>:
;         HEAP_ALLOCATOR
8020b558: 17 15 34 00  	auipc	a0, 0x341
8020b55c: 13 05 05 ad  	addi	a0, a0, -0x530
8020b560: 97 10 02 00  	auipc	ra, 0x21
8020b564: e7 80 e0 2f  	jalr	0x2fe(ra) <_ZN78_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc3e893983b613bb1E>
8020b568: aa 85        	mv	a1, a0
8020b56a: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020b56e: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020b572: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020b576: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8020b578: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8020b57c: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8020b580: 85 45        	li	a1, 0x1
8020b582: 97 b0 00 00  	auipc	ra, 0xb
8020b586: e7 80 a0 8c  	jalr	-0x736(ra) <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h6fac44f85eef4e4dE>
8020b58a: aa 85        	mv	a1, a0
8020b58c: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020b590: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b594: 09 a0        	j	0x8020b596 <.Lpcrel_hi0+0x3e>
8020b596: 03 35 84 f7  	ld	a0, -0x88(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8020b59a: 21 05        	addi	a0, a0, 0x8
8020b59c: 89 45        	li	a1, 0x2
8020b59e: a3 0b b4 fc  	sb	a1, -0x29(s0)
8020b5a2: 83 45 74 fd  	lbu	a1, -0x29(s0)
8020b5a6: 97 b0 00 00  	auipc	ra, 0xb
8020b5aa: e7 80 a0 85  	jalr	-0x7a6(ra) <_ZN4core4sync6atomic11AtomicUsize4load17h58aa0dee2db70143E>
8020b5ae: 83 35 04 f8  	ld	a1, -0x80(s0)
8020b5b2: 63 08 b5 00  	beq	a0, a1, 0x8020b5c2 <.Lpcrel_hi0+0x6a>
8020b5b6: 09 a0        	j	0x8020b5b8 <.Lpcrel_hi0+0x60>
;             crate::relax();
8020b5b8: 97 b0 00 00  	auipc	ra, 0xb
8020b5bc: e7 80 c0 93  	jalr	-0x6c4(ra) <_ZN4core4sync6atomic14spin_loop_hint17he741a157a0cd59b6E>
8020b5c0: d9 bf        	j	0x8020b596 <.Lpcrel_hi0+0x3e>
8020b5c2: 83 35 04 f8  	ld	a1, -0x80(s0)
8020b5c6: 03 35 84 f7  	ld	a0, -0x88(s0)
;             next_serving: &self.next_serving,
8020b5ca: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8020b5ce: 41 05        	addi	a0, a0, 0x10
8020b5d0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8020b5d4: 23 38 c4 fa  	sd	a2, -0x50(s0)
8020b5d8: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020b5dc: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8020b5e0: 03 35 04 fc  	ld	a0, -0x40(s0)
8020b5e4: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020b5e8: 03 35 84 fb  	ld	a0, -0x48(s0)
8020b5ec: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020b5f0: 03 35 04 fb  	ld	a0, -0x50(s0)
8020b5f4: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020b5f8: 13 05 84 f8  	addi	a0, s0, -0x78
8020b5fc: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         HEAP_ALLOCATOR
8020b600: 97 00 02 00  	auipc	ra, 0x20
8020b604: e7 80 e0 2c  	jalr	0x2ce(ra) <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf652265eb1fb4a55E>

000000008020b608 <.Lpcrel_hi1>:
8020b608: 97 15 04 00  	auipc	a1, 0x41
8020b60c: 93 85 05 a2  	addi	a1, a1, -0x5e0
8020b610: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020b614: 37 06 30 00  	lui	a2, 0x300
8020b618: 23 34 c4 fa  	sd	a2, -0x58(s0)
8020b61c: 97 10 02 00  	auipc	ra, 0x21
8020b620: e7 80 60 97  	jalr	-0x68a(ra) <_ZN22buddy_system_allocator4Heap4init17h0db55cc383a9fc70E>
8020b624: 03 35 04 f7  	ld	a0, -0x90(s0)
;             .init(HEAP_SPACE.as_ptr() as usize, HEAP_SIZE);
8020b628: 97 00 02 00  	auipc	ra, 0x20
8020b62c: e7 80 40 ee  	jalr	-0x11c(ra) <_ZN4core3ptr80drop_in_place$LT$spin..mutex..MutexGuard$LT$buddy_system_allocator..Heap$GT$$GT$17h7d471ee1e3e36d8dE>
8020b630: aa 60        	ld	ra, 0x88(sp)
8020b632: 0a 64        	ld	s0, 0x80(sp)
; }
8020b634: 49 61        	addi	sp, sp, 0x90
8020b636: 82 80        	ret

000000008020b638 <__rust_alloc>:
; static HEAP_ALLOCATOR: LockedHeap = LockedHeap::empty();
8020b638: 79 71        	addi	sp, sp, -0x30
8020b63a: 06 f4        	sd	ra, 0x28(sp)
8020b63c: 22 f0        	sd	s0, 0x20(sp)
8020b63e: 00 18        	addi	s0, sp, 0x30
8020b640: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b644: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020b648: 97 80 00 00  	auipc	ra, 0x8
8020b64c: e7 80 40 63  	jalr	0x634(ra) <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hf24a76158b220961E>
8020b650: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020b654: 2e 86        	mv	a2, a1
8020b656: 83 35 84 fd  	ld	a1, -0x28(s0)

000000008020b65a <.Lpcrel_hi2>:
8020b65a: 17 15 34 00  	auipc	a0, 0x341
8020b65e: 13 05 e5 9c  	addi	a0, a0, -0x632
8020b662: 97 10 02 00  	auipc	ra, 0x21
8020b666: e7 80 00 21  	jalr	0x210(ra) <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hba892e8a7ee7ae28E>
8020b66a: a2 70        	ld	ra, 0x28(sp)
8020b66c: 02 74        	ld	s0, 0x20(sp)
8020b66e: 45 61        	addi	sp, sp, 0x30
8020b670: 82 80        	ret

000000008020b672 <__rust_dealloc>:
8020b672: 39 71        	addi	sp, sp, -0x40
8020b674: 06 fc        	sd	ra, 0x38(sp)
8020b676: 22 f8        	sd	s0, 0x30(sp)
8020b678: 80 00        	addi	s0, sp, 0x40
8020b67a: 23 30 c4 fc  	sd	a2, -0x40(s0)
8020b67e: 2e 86        	mv	a2, a1
8020b680: 83 35 04 fc  	ld	a1, -0x40(s0)
8020b684: 23 34 c4 fc  	sd	a2, -0x38(s0)
8020b688: 2a 86        	mv	a2, a0
8020b68a: 03 35 84 fc  	ld	a0, -0x38(s0)
8020b68e: 23 38 c4 fc  	sd	a2, -0x30(s0)
8020b692: 23 3c c4 fc  	sd	a2, -0x28(s0)
8020b696: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b69a: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020b69e: 97 80 00 00  	auipc	ra, 0x8
8020b6a2: e7 80 e0 5d  	jalr	0x5de(ra) <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hf24a76158b220961E>
8020b6a6: 2a 86        	mv	a2, a0
8020b6a8: ae 86        	mv	a3, a1
8020b6aa: 83 35 04 fd  	ld	a1, -0x30(s0)

000000008020b6ae <.Lpcrel_hi3>:
8020b6ae: 17 15 34 00  	auipc	a0, 0x341
8020b6b2: 13 05 a5 97  	addi	a0, a0, -0x686
8020b6b6: 97 10 02 00  	auipc	ra, 0x21
8020b6ba: e7 80 e0 2c  	jalr	0x2ce(ra) <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h70a0674c9280ca80E>
8020b6be: e2 70        	ld	ra, 0x38(sp)
8020b6c0: 42 74        	ld	s0, 0x30(sp)
8020b6c2: 21 61        	addi	sp, sp, 0x40
8020b6c4: 82 80        	ret

000000008020b6c6 <__rust_realloc>:
8020b6c6: 5d 71        	addi	sp, sp, -0x50
8020b6c8: 86 e4        	sd	ra, 0x48(sp)
8020b6ca: a2 e0        	sd	s0, 0x40(sp)
8020b6cc: 80 08        	addi	s0, sp, 0x50
8020b6ce: 23 30 d4 fc  	sd	a3, -0x40(s0)
8020b6d2: 23 38 c4 fa  	sd	a2, -0x50(s0)
8020b6d6: 2e 86        	mv	a2, a1
8020b6d8: 83 35 04 fb  	ld	a1, -0x50(s0)
8020b6dc: 23 3c c4 fa  	sd	a2, -0x48(s0)
8020b6e0: 2a 86        	mv	a2, a0
8020b6e2: 03 35 84 fb  	ld	a0, -0x48(s0)
8020b6e6: 23 34 c4 fc  	sd	a2, -0x38(s0)
8020b6ea: 23 38 c4 fc  	sd	a2, -0x30(s0)
8020b6ee: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020b6f2: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020b6f6: 23 34 d4 fe  	sd	a3, -0x18(s0)
8020b6fa: 97 80 00 00  	auipc	ra, 0x8
8020b6fe: e7 80 20 58  	jalr	0x582(ra) <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hf24a76158b220961E>
8020b702: 03 37 04 fc  	ld	a4, -0x40(s0)
8020b706: 2a 86        	mv	a2, a0
8020b708: ae 86        	mv	a3, a1
8020b70a: 83 35 84 fc  	ld	a1, -0x38(s0)

000000008020b70e <.Lpcrel_hi4>:
8020b70e: 17 15 34 00  	auipc	a0, 0x341
8020b712: 13 05 a5 91  	addi	a0, a0, -0x6e6
8020b716: 97 90 00 00  	auipc	ra, 0x9
8020b71a: e7 80 00 95  	jalr	-0x6b0(ra) <_ZN4core5alloc6global11GlobalAlloc7realloc17h340ff7356c1e5e95E>
8020b71e: a6 60        	ld	ra, 0x48(sp)
8020b720: 06 64        	ld	s0, 0x40(sp)
8020b722: 61 61        	addi	sp, sp, 0x50
8020b724: 82 80        	ret

000000008020b726 <__rust_alloc_zeroed>:
8020b726: 79 71        	addi	sp, sp, -0x30
8020b728: 06 f4        	sd	ra, 0x28(sp)
8020b72a: 22 f0        	sd	s0, 0x20(sp)
8020b72c: 00 18        	addi	s0, sp, 0x30
8020b72e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b732: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020b736: 97 80 00 00  	auipc	ra, 0x8
8020b73a: e7 80 60 54  	jalr	0x546(ra) <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hf24a76158b220961E>
8020b73e: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020b742: 2e 86        	mv	a2, a1
8020b744: 83 35 84 fd  	ld	a1, -0x28(s0)

000000008020b748 <.Lpcrel_hi5>:
8020b748: 17 15 34 00  	auipc	a0, 0x341
8020b74c: 13 05 05 8e  	addi	a0, a0, -0x720
8020b750: 97 90 00 00  	auipc	ra, 0x9
8020b754: e7 80 60 89  	jalr	-0x76a(ra) <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h66194cd169e8451fE>
8020b758: a2 70        	ld	ra, 0x28(sp)
8020b75a: 02 74        	ld	s0, 0x20(sp)
8020b75c: 45 61        	addi	sp, sp, 0x30
8020b75e: 82 80        	ret

000000008020b760 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E>:
;                 fn cmp(&self, other: &$t) -> Ordering {
8020b760: 39 71        	addi	sp, sp, -0x40
8020b762: 06 fc        	sd	ra, 0x38(sp)
8020b764: 22 f8        	sd	s0, 0x30(sp)
8020b766: 80 00        	addi	s0, sp, 0x40
8020b768: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b76c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     if *self < *other { Less }
8020b770: 08 61        	ld	a0, 0x0(a0)
8020b772: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020b776: 8c 61        	ld	a1, 0x0(a1)
8020b778: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020b77c: 63 6a b5 00  	bltu	a0, a1, 0x8020b790 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E+0x30>
8020b780: 09 a0        	j	0x8020b782 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E+0x22>
8020b782: 03 35 84 fc  	ld	a0, -0x38(s0)
8020b786: 83 35 04 fd  	ld	a1, -0x30(s0)
;                     else if *self == *other { Equal }
8020b78a: 63 0c b5 00  	beq	a0, a1, 0x8020b7a2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E+0x42>
8020b78e: 31 a0        	j	0x8020b79a <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E+0x3a>
8020b790: 13 05 f0 0f  	li	a0, 0xff
;                     if *self < *other { Less }
8020b794: a3 0f a4 fc  	sb	a0, -0x21(s0)
8020b798: 11 a8        	j	0x8020b7ac <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E+0x4c>
8020b79a: 05 45        	li	a0, 0x1
;                     else { Greater }
8020b79c: a3 0f a4 fc  	sb	a0, -0x21(s0)
;                     else if *self == *other { Equal }
8020b7a0: 29 a0        	j	0x8020b7aa <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E+0x4a>
8020b7a2: 01 45        	li	a0, 0x0
;                     else if *self == *other { Equal }
8020b7a4: a3 0f a4 fc  	sb	a0, -0x21(s0)
8020b7a8: 09 a0        	j	0x8020b7aa <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E+0x4a>
;                     if *self < *other { Less }
8020b7aa: 09 a0        	j	0x8020b7ac <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hd654f510de7f7b06E+0x4c>
;                 }
8020b7ac: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8020b7b0: e2 70        	ld	ra, 0x38(sp)
8020b7b2: 42 74        	ld	s0, 0x30(sp)
8020b7b4: 21 61        	addi	sp, sp, 0x40
8020b7b6: 82 80        	ret

000000008020b7b8 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E>:
;     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
8020b7b8: 19 71        	addi	sp, sp, -0x80
8020b7ba: 86 fc        	sd	ra, 0x78(sp)
8020b7bc: a2 f8        	sd	s0, 0x70(sp)
8020b7be: 00 01        	addi	s0, sp, 0x80
8020b7c0: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020b7c4: 23 34 b4 f8  	sd	a1, -0x78(s0)
8020b7c8: 23 38 c4 f8  	sd	a2, -0x70(s0)
8020b7cc: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         while let Some(x) = self.next() {
8020b7d0: 09 a0        	j	0x8020b7d2 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E+0x1a>
8020b7d2: 03 35 04 f8  	ld	a0, -0x80(s0)
;         while let Some(x) = self.next() {
8020b7d6: 97 00 00 00  	auipc	ra, 0x0
8020b7da: e7 80 a0 2b  	jalr	0x2ba(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E>
8020b7de: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020b7e2: 03 35 84 fa  	ld	a0, -0x58(s0)
8020b7e6: 05 cd        	beqz	a0, 0x8020b81e <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E+0x66>
8020b7e8: 09 a0        	j	0x8020b7ea <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E+0x32>
8020b7ea: 03 35 84 fa  	ld	a0, -0x58(s0)
8020b7ee: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             accum = f(accum, x)?;
8020b7f2: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020b7f6: 83 35 04 fc  	ld	a1, -0x40(s0)
8020b7fa: 13 05 84 f8  	addi	a0, s0, -0x78
8020b7fe: 97 50 ff ff  	auipc	ra, 0xffff5
8020b802: e7 80 00 77  	jalr	0x770(ra) <ekernel+0xffcb3f6e>
8020b806: 97 b0 ff ff  	auipc	ra, 0xffffb
8020b80a: e7 80 c0 ec  	jalr	-0x134(ra) <ekernel+0xffcb96d2>
8020b80e: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020b812: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020b816: 03 35 84 fb  	ld	a0, -0x48(s0)
8020b81a: 19 c9        	beqz	a0, 0x8020b830 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E+0x78>
8020b81c: 19 a8        	j	0x8020b832 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E+0x7a>
;         try { accum }
8020b81e: 97 b0 ff ff  	auipc	ra, 0xffffb
8020b822: e7 80 60 e9  	jalr	-0x16a(ra) <ekernel+0xffcb96b4>
8020b826: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020b82a: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
8020b82e: 1d a0        	j	0x8020b854 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E+0x9c>
;         while let Some(x) = self.next() {
8020b830: 4d b7        	j	0x8020b7d2 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E+0x1a>
;             accum = f(accum, x)?;
8020b832: 03 35 04 fb  	ld	a0, -0x50(s0)
8020b836: 83 35 84 fb  	ld	a1, -0x48(s0)
8020b83a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b83e: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020b842: 97 b0 ff ff  	auipc	ra, 0xffffb
8020b846: e7 80 a0 e3  	jalr	-0x1c6(ra) <ekernel+0xffcb967c>
8020b84a: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020b84e: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
8020b852: 09 a0        	j	0x8020b854 <_ZN4core4iter6traits8iterator8Iterator8try_fold17h2ef9901081dc0a48E+0x9c>
8020b854: 03 35 84 f9  	ld	a0, -0x68(s0)
8020b858: 83 35 04 fa  	ld	a1, -0x60(s0)
8020b85c: e6 70        	ld	ra, 0x78(sp)
8020b85e: 46 74        	ld	s0, 0x70(sp)
8020b860: 09 61        	addi	sp, sp, 0x80
8020b862: 82 80        	ret

000000008020b864 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h17d351a8c8e38888E>:
;     fn enumerate(self) -> Enumerate<Self>
8020b864: 79 71        	addi	sp, sp, -0x30
8020b866: 06 f4        	sd	ra, 0x28(sp)
8020b868: 22 f0        	sd	s0, 0x20(sp)
8020b86a: 00 18        	addi	s0, sp, 0x30
8020b86c: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020b870: aa 85        	mv	a1, a0
8020b872: 03 35 84 fd  	ld	a0, -0x28(s0)
8020b876: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b87a: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         Enumerate { iter, count: 0 }
8020b87e: 88 e1        	sd	a0, 0x0(a1)
8020b880: 90 e5        	sd	a2, 0x8(a1)
8020b882: 01 45        	li	a0, 0x0
8020b884: 88 e9        	sd	a0, 0x10(a1)
8020b886: a2 70        	ld	ra, 0x28(sp)
8020b888: 02 74        	ld	s0, 0x20(sp)
;     }
8020b88a: 45 61        	addi	sp, sp, 0x30
8020b88c: 82 80        	ret

000000008020b88e <_ZN4core5slice4iter95_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$mut$u20$$u5b$T$u5d$$GT$9into_iter17h5644b02908c8be85E>:
;     fn into_iter(self) -> IterMut<'a, T> {
8020b88e: 59 71        	addi	sp, sp, -0x70
8020b890: 86 f4        	sd	ra, 0x68(sp)
8020b892: a2 f0        	sd	s0, 0x60(sp)
8020b894: 80 18        	addi	s0, sp, 0x70
8020b896: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020b89a: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020b89e: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020b8a2: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
8020b8a6: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
8020b8aa: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020b8ae: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020b8b2: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
8020b8b6: 09 a0        	j	0x8020b8b8 <_ZN4core5slice4iter95_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$mut$u20$$u5b$T$u5d$$GT$9into_iter17h5644b02908c8be85E+0x2a>
8020b8b8: 03 35 84 f9  	ld	a0, -0x68(s0)
8020b8bc: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
8020b8c0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
8020b8c4: 2e 95        	add	a0, a0, a1
8020b8c6: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                 if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
8020b8ca: 09 a0        	j	0x8020b8cc <_ZN4core5slice4iter95_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$mut$u20$$u5b$T$u5d$$GT$9into_iter17h5644b02908c8be85E+0x3e>
;             Self { ptr, end_or_len, _marker: PhantomData }
8020b8cc: 03 35 84 fc  	ld	a0, -0x38(s0)
8020b8d0: 83 35 04 fb  	ld	a1, -0x50(s0)
8020b8d4: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020b8d8: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
8020b8dc: 03 35 04 fa  	ld	a0, -0x60(s0)
8020b8e0: 83 35 84 fa  	ld	a1, -0x58(s0)
8020b8e4: a6 70        	ld	ra, 0x68(sp)
8020b8e6: 06 74        	ld	s0, 0x60(sp)
8020b8e8: 65 61        	addi	sp, sp, 0x70
8020b8ea: 82 80        	ret

000000008020b8ec <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0212aa9bd85e9fc6E>:
;     fn into_iter(self) -> I {
8020b8ec: 01 11        	addi	sp, sp, -0x20
8020b8ee: 06 ec        	sd	ra, 0x18(sp)
8020b8f0: 22 e8        	sd	s0, 0x10(sp)
8020b8f2: 00 10        	addi	s0, sp, 0x20
8020b8f4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b8f8: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020b8fc: e2 60        	ld	ra, 0x18(sp)
8020b8fe: 42 64        	ld	s0, 0x10(sp)
;     }
8020b900: 05 61        	addi	sp, sp, 0x20
8020b902: 82 80        	ret

000000008020b904 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6b79e4f6109403b0E>:
;     fn into_iter(self) -> I {
8020b904: 01 11        	addi	sp, sp, -0x20
8020b906: 06 ec        	sd	ra, 0x18(sp)
8020b908: 22 e8        	sd	s0, 0x10(sp)
8020b90a: 00 10        	addi	s0, sp, 0x20
8020b90c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b910: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020b914: e2 60        	ld	ra, 0x18(sp)
8020b916: 42 64        	ld	s0, 0x10(sp)
;     }
8020b918: 05 61        	addi	sp, sp, 0x20
8020b91a: 82 80        	ret

000000008020b91c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7acfd28025590632E>:
;     fn into_iter(self) -> I {
8020b91c: 01 11        	addi	sp, sp, -0x20
8020b91e: 06 ec        	sd	ra, 0x18(sp)
8020b920: 22 e8        	sd	s0, 0x10(sp)
8020b922: 00 10        	addi	s0, sp, 0x20
8020b924: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b928: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020b92c: e2 60        	ld	ra, 0x18(sp)
8020b92e: 42 64        	ld	s0, 0x10(sp)
;     }
8020b930: 05 61        	addi	sp, sp, 0x20
8020b932: 82 80        	ret

000000008020b934 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h8cdf9b2c1f91f96bE>:
;     fn into_iter(self) -> I {
8020b934: 01 11        	addi	sp, sp, -0x20
8020b936: 06 ec        	sd	ra, 0x18(sp)
8020b938: 22 e8        	sd	s0, 0x10(sp)
8020b93a: 00 10        	addi	s0, sp, 0x20
8020b93c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b940: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020b944: e2 60        	ld	ra, 0x18(sp)
8020b946: 42 64        	ld	s0, 0x10(sp)
;     }
8020b948: 05 61        	addi	sp, sp, 0x20
8020b94a: 82 80        	ret

000000008020b94c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb9752d9e1c899570E>:
;     fn into_iter(self) -> I {
8020b94c: 01 11        	addi	sp, sp, -0x20
8020b94e: 06 ec        	sd	ra, 0x18(sp)
8020b950: 22 e8        	sd	s0, 0x10(sp)
8020b952: 00 10        	addi	s0, sp, 0x20
8020b954: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020b958: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020b95c: e2 60        	ld	ra, 0x18(sp)
8020b95e: 42 64        	ld	s0, 0x10(sp)
;     }
8020b960: 05 61        	addi	sp, sp, 0x20
8020b962: 82 80        	ret

000000008020b964 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E>:
;             fn any<F>(&mut self, mut f: F) -> bool
8020b964: 5d 71        	addi	sp, sp, -0x50
8020b966: 86 e4        	sd	ra, 0x48(sp)
8020b968: a2 e0        	sd	s0, 0x40(sp)
8020b96a: 80 08        	addi	s0, sp, 0x50
8020b96c: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020b970: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020b974: 23 30 a4 fe  	sd	a0, -0x20(s0)
;                 while let Some(x) = self.next() {
8020b978: 09 a0        	j	0x8020b97a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E+0x16>
8020b97a: 03 35 84 fb  	ld	a0, -0x48(s0)
;                 while let Some(x) = self.next() {
8020b97e: 97 00 00 00  	auipc	ra, 0x0
8020b982: e7 80 20 11  	jalr	0x112(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E>
8020b986: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020b98a: 03 35 04 fd  	ld	a0, -0x30(s0)
8020b98e: 15 c1        	beqz	a0, 0x8020b9b2 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E+0x4e>
8020b990: 09 a0        	j	0x8020b992 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E+0x2e>
8020b992: 03 35 04 fd  	ld	a0, -0x30(s0)
8020b996: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     if f(x) {
8020b99a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020b99e: 83 35 84 fd  	ld	a1, -0x28(s0)
8020b9a2: 13 05 04 fc  	addi	a0, s0, -0x40
8020b9a6: 97 00 00 00  	auipc	ra, 0x0
8020b9aa: e7 80 80 70  	jalr	0x708(ra) <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17h86fbc5ca13ac7216E>
8020b9ae: 19 e5        	bnez	a0, 0x8020b9bc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E+0x58>
8020b9b0: 29 a0        	j	0x8020b9ba <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E+0x56>
8020b9b2: 01 45        	li	a0, 0x0
;                 false
8020b9b4: a3 07 a4 fc  	sb	a0, -0x31(s0)
;             }
8020b9b8: 31 a0        	j	0x8020b9c4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E+0x60>
;                 while let Some(x) = self.next() {
8020b9ba: c1 b7        	j	0x8020b97a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E+0x16>
8020b9bc: 05 45        	li	a0, 0x1
;                         return true;
8020b9be: a3 07 a4 fc  	sb	a0, -0x31(s0)
;             }
8020b9c2: 09 a0        	j	0x8020b9c4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$3any17h7229b51cce990bd0E+0x60>
8020b9c4: 03 45 f4 fc  	lbu	a0, -0x31(s0)
8020b9c8: a6 60        	ld	ra, 0x48(sp)
8020b9ca: 06 64        	ld	s0, 0x40(sp)
8020b9cc: 61 61        	addi	sp, sp, 0x50
8020b9ce: 82 80        	ret

000000008020b9d0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE>:
;             fn next(&mut self) -> Option<$elem> {
8020b9d0: 31 71        	addi	sp, sp, -0xc0
8020b9d2: 06 fd        	sd	ra, 0xb8(sp)
8020b9d4: 22 f9        	sd	s0, 0xb0(sp)
8020b9d6: 80 01        	addi	s0, sp, 0xc0
8020b9d8: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8020b9dc: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
8020b9de: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     uint_impl! {
8020b9e2: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
8020b9e6: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8020b9ea: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     if is_empty!(self) {
8020b9ee: 09 a0        	j	0x8020b9f0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE+0x20>
8020b9f0: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     if is_empty!(self) {
8020b9f4: 93 05 85 00  	addi	a1, a0, 0x8
8020b9f8: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020b9fc: 0c 65        	ld	a1, 0x8(a0)
8020b9fe: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020ba02: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020ba06: 93 05 84 f7  	addi	a1, s0, -0x88
8020ba0a: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.as_ptr() == other.as_ptr()
8020ba0e: 08 61        	ld	a0, 0x0(a0)
8020ba10: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020ba14: 83 35 84 f7  	ld	a1, -0x88(s0)
8020ba18: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020ba1c: 2d 8d        	xor	a0, a0, a1
8020ba1e: 13 35 15 00  	seqz	a0, a0
8020ba22: a3 0b a4 f6  	sb	a0, -0x89(s0)
;                     if is_empty!(self) {
8020ba26: 09 a0        	j	0x8020ba28 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE+0x58>
8020ba28: 03 45 74 f7  	lbu	a0, -0x89(s0)
8020ba2c: 05 89        	andi	a0, a0, 0x1
8020ba2e: 01 e9        	bnez	a0, 0x8020ba3e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE+0x6e>
8020ba30: 09 a0        	j	0x8020ba32 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE+0x62>
8020ba32: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let old = self.ptr;
8020ba36: 08 61        	ld	a0, 0x0(a0)
8020ba38: 23 30 a4 f8  	sd	a0, -0x80(s0)
;                     if_zst!(mut self,
8020ba3c: 29 a0        	j	0x8020ba46 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE+0x76>
8020ba3e: 01 45        	li	a0, 0x0
;                         None
8020ba40: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8020ba44: 81 a0        	j	0x8020ba84 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE+0xb4>
8020ba46: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                     if_zst!(mut self,
8020ba4a: 13 85 85 00  	addi	a0, a1, 0x8
8020ba4e: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as _
8020ba52: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020ba56: 88 61        	ld	a0, 0x0(a1)
8020ba58: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8020ba5c: 41 05        	addi	a0, a0, 0x10
8020ba5e: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020ba62: 03 35 84 f8  	ld	a0, -0x78(s0)
8020ba66: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
8020ba68: 09 a0        	j	0x8020ba6a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE+0x9a>
8020ba6a: 13 05 04 f8  	addi	a0, s0, -0x80
;                         Some(next_unchecked!(self))
8020ba6e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8020ba72: 03 35 04 f8  	ld	a0, -0x80(s0)
8020ba76: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
8020ba7a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
8020ba7e: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8020ba82: 09 a0        	j	0x8020ba84 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1489162fc15f43dcE+0xb4>
;             }
8020ba84: 03 35 84 f6  	ld	a0, -0x98(s0)
8020ba88: ea 70        	ld	ra, 0xb8(sp)
8020ba8a: 4a 74        	ld	s0, 0xb0(sp)
8020ba8c: 29 61        	addi	sp, sp, 0xc0
8020ba8e: 82 80        	ret

000000008020ba90 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E>:
;             fn next(&mut self) -> Option<$elem> {
8020ba90: 31 71        	addi	sp, sp, -0xc0
8020ba92: 06 fd        	sd	ra, 0xb8(sp)
8020ba94: 22 f9        	sd	s0, 0xb0(sp)
8020ba96: 80 01        	addi	s0, sp, 0xc0
8020ba98: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8020ba9c: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
8020ba9e: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     uint_impl! {
8020baa2: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
8020baa6: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8020baaa: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     if is_empty!(self) {
8020baae: 09 a0        	j	0x8020bab0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E+0x20>
8020bab0: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     if is_empty!(self) {
8020bab4: 93 05 85 00  	addi	a1, a0, 0x8
8020bab8: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020babc: 0c 65        	ld	a1, 0x8(a0)
8020babe: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020bac2: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020bac6: 93 05 84 f7  	addi	a1, s0, -0x88
8020baca: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.as_ptr() == other.as_ptr()
8020bace: 08 61        	ld	a0, 0x0(a0)
8020bad0: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020bad4: 83 35 84 f7  	ld	a1, -0x88(s0)
8020bad8: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020badc: 2d 8d        	xor	a0, a0, a1
8020bade: 13 35 15 00  	seqz	a0, a0
8020bae2: a3 0b a4 f6  	sb	a0, -0x89(s0)
;                     if is_empty!(self) {
8020bae6: 09 a0        	j	0x8020bae8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E+0x58>
8020bae8: 03 45 74 f7  	lbu	a0, -0x89(s0)
8020baec: 05 89        	andi	a0, a0, 0x1
8020baee: 01 e9        	bnez	a0, 0x8020bafe <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E+0x6e>
8020baf0: 09 a0        	j	0x8020baf2 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E+0x62>
8020baf2: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let old = self.ptr;
8020baf6: 08 61        	ld	a0, 0x0(a0)
8020baf8: 23 30 a4 f8  	sd	a0, -0x80(s0)
;                     if_zst!(mut self,
8020bafc: 29 a0        	j	0x8020bb06 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E+0x76>
8020bafe: 01 45        	li	a0, 0x0
;                         None
8020bb00: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8020bb04: 81 a0        	j	0x8020bb44 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E+0xb4>
8020bb06: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                     if_zst!(mut self,
8020bb0a: 13 85 85 00  	addi	a0, a1, 0x8
8020bb0e: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as _
8020bb12: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020bb16: 88 61        	ld	a0, 0x0(a1)
8020bb18: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8020bb1c: 21 05        	addi	a0, a0, 0x8
8020bb1e: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020bb22: 03 35 84 f8  	ld	a0, -0x78(s0)
8020bb26: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
8020bb28: 09 a0        	j	0x8020bb2a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E+0x9a>
8020bb2a: 13 05 04 f8  	addi	a0, s0, -0x80
;                         Some(next_unchecked!(self))
8020bb2e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8020bb32: 03 35 04 f8  	ld	a0, -0x80(s0)
8020bb36: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
8020bb3a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
8020bb3e: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8020bb42: 09 a0        	j	0x8020bb44 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391fd35d33d0f05E+0xb4>
;             }
8020bb44: 03 35 84 f6  	ld	a0, -0x98(s0)
8020bb48: ea 70        	ld	ra, 0xb8(sp)
8020bb4a: 4a 74        	ld	s0, 0xb0(sp)
8020bb4c: 29 61        	addi	sp, sp, 0xc0
8020bb4e: 82 80        	ret

000000008020bb50 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hba7dc57270f85008E>:
;             fn next(&mut self) -> Option<$elem> {
8020bb50: 31 71        	addi	sp, sp, -0xc0
8020bb52: 06 fd        	sd	ra, 0xb8(sp)
8020bb54: 22 f9        	sd	s0, 0xb0(sp)
8020bb56: 80 01        	addi	s0, sp, 0xc0
8020bb58: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8020bb5c: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
8020bb5e: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     uint_impl! {
8020bb62: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
8020bb66: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8020bb6a: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     if is_empty!(self) {
8020bb6e: 09 a0        	j	0x8020bb70 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hba7dc57270f85008E+0x20>
8020bb70: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     if is_empty!(self) {
8020bb74: 93 05 85 00  	addi	a1, a0, 0x8
8020bb78: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020bb7c: 0c 65        	ld	a1, 0x8(a0)
8020bb7e: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020bb82: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020bb86: 93 05 84 f7  	addi	a1, s0, -0x88
8020bb8a: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.as_ptr() == other.as_ptr()
8020bb8e: 08 61        	ld	a0, 0x0(a0)
8020bb90: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020bb94: 83 35 84 f7  	ld	a1, -0x88(s0)
8020bb98: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020bb9c: 2d 8d        	xor	a0, a0, a1
8020bb9e: 13 35 15 00  	seqz	a0, a0
8020bba2: a3 0b a4 f6  	sb	a0, -0x89(s0)
;                     if is_empty!(self) {
8020bba6: 09 a0        	j	0x8020bba8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hba7dc57270f85008E+0x58>
8020bba8: 03 45 74 f7  	lbu	a0, -0x89(s0)
8020bbac: 05 89        	andi	a0, a0, 0x1
8020bbae: 01 e9        	bnez	a0, 0x8020bbbe <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hba7dc57270f85008E+0x6e>
8020bbb0: 09 a0        	j	0x8020bbb2 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hba7dc57270f85008E+0x62>
8020bbb2: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let old = self.ptr;
8020bbb6: 08 61        	ld	a0, 0x0(a0)
8020bbb8: 23 30 a4 f8  	sd	a0, -0x80(s0)
;                     if_zst!(mut self,
8020bbbc: 29 a0        	j	0x8020bbc6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hba7dc57270f85008E+0x76>
8020bbbe: 01 45        	li	a0, 0x0
;                         None
8020bbc0: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8020bbc4: 81 a0        	j	0x8020bc04 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hba7dc57270f85008E+0xb4>
8020bbc6: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                     if_zst!(mut self,
8020bbca: 13 85 85 00  	addi	a0, a1, 0x8
8020bbce: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as _
8020bbd2: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020bbd6: 88 61        	ld	a0, 0x0(a1)
8020bbd8: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8020bbdc: 41 05        	addi	a0, a0, 0x10
8020bbde: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020bbe2: 03 35 84 f8  	ld	a0, -0x78(s0)
8020bbe6: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
8020bbe8: 09 a0        	j	0x8020bbea <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hba7dc57270f85008E+0x9a>
8020bbea: 13 05 04 f8  	addi	a0, s0, -0x80
;                         Some(next_unchecked!(self))
8020bbee: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8020bbf2: 03 35 04 f8  	ld	a0, -0x80(s0)
8020bbf6: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
8020bbfa: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
8020bbfe: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8020bc02: 09 a0        	j	0x8020bc04 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hba7dc57270f85008E+0xb4>
;             }
8020bc04: 03 35 84 f6  	ld	a0, -0x98(s0)
8020bc08: ea 70        	ld	ra, 0xb8(sp)
8020bc0a: 4a 74        	ld	s0, 0xb0(sp)
8020bc0c: 29 61        	addi	sp, sp, 0xc0
8020bc0e: 82 80        	ret

000000008020bc10 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E>:
;             fn next(&mut self) -> Option<$elem> {
8020bc10: 31 71        	addi	sp, sp, -0xc0
8020bc12: 06 fd        	sd	ra, 0xb8(sp)
8020bc14: 22 f9        	sd	s0, 0xb0(sp)
8020bc16: 80 01        	addi	s0, sp, 0xc0
8020bc18: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8020bc1c: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
8020bc1e: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     uint_impl! {
8020bc22: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
8020bc26: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8020bc2a: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     if is_empty!(self) {
8020bc2e: 09 a0        	j	0x8020bc30 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E+0x20>
8020bc30: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     if is_empty!(self) {
8020bc34: 93 05 85 00  	addi	a1, a0, 0x8
8020bc38: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020bc3c: 0c 65        	ld	a1, 0x8(a0)
8020bc3e: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020bc42: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020bc46: 93 05 84 f7  	addi	a1, s0, -0x88
8020bc4a: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.as_ptr() == other.as_ptr()
8020bc4e: 08 61        	ld	a0, 0x0(a0)
8020bc50: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020bc54: 83 35 84 f7  	ld	a1, -0x88(s0)
8020bc58: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020bc5c: 2d 8d        	xor	a0, a0, a1
8020bc5e: 13 35 15 00  	seqz	a0, a0
8020bc62: a3 0b a4 f6  	sb	a0, -0x89(s0)
;                     if is_empty!(self) {
8020bc66: 09 a0        	j	0x8020bc68 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E+0x58>
8020bc68: 03 45 74 f7  	lbu	a0, -0x89(s0)
8020bc6c: 05 89        	andi	a0, a0, 0x1
8020bc6e: 01 e9        	bnez	a0, 0x8020bc7e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E+0x6e>
8020bc70: 09 a0        	j	0x8020bc72 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E+0x62>
8020bc72: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let old = self.ptr;
8020bc76: 08 61        	ld	a0, 0x0(a0)
8020bc78: 23 30 a4 f8  	sd	a0, -0x80(s0)
;                     if_zst!(mut self,
8020bc7c: 29 a0        	j	0x8020bc86 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E+0x76>
8020bc7e: 01 45        	li	a0, 0x0
;                         None
8020bc80: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8020bc84: 81 a0        	j	0x8020bcc4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E+0xb4>
8020bc86: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                     if_zst!(mut self,
8020bc8a: 13 85 85 00  	addi	a0, a1, 0x8
8020bc8e: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as _
8020bc92: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020bc96: 88 61        	ld	a0, 0x0(a1)
8020bc98: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8020bc9c: 41 05        	addi	a0, a0, 0x10
8020bc9e: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020bca2: 03 35 84 f8  	ld	a0, -0x78(s0)
8020bca6: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
8020bca8: 09 a0        	j	0x8020bcaa <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E+0x9a>
8020bcaa: 13 05 04 f8  	addi	a0, s0, -0x80
;                         Some(next_unchecked!(self))
8020bcae: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8020bcb2: 03 35 04 f8  	ld	a0, -0x80(s0)
8020bcb6: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
8020bcba: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
8020bcbe: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8020bcc2: 09 a0        	j	0x8020bcc4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hce9c4b989bd6bde0E+0xb4>
;             }
8020bcc4: 03 35 84 f6  	ld	a0, -0x98(s0)
8020bcc8: ea 70        	ld	ra, 0xb8(sp)
8020bcca: 4a 74        	ld	s0, 0xb0(sp)
8020bccc: 29 61        	addi	sp, sp, 0xc0
8020bcce: 82 80        	ret

000000008020bcd0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E>:
;             fn next(&mut self) -> Option<$elem> {
8020bcd0: 71 71        	addi	sp, sp, -0xb0
8020bcd2: 06 f5        	sd	ra, 0xa8(sp)
8020bcd4: 22 f1        	sd	s0, 0xa0(sp)
8020bcd6: 00 19        	addi	s0, sp, 0xb0
8020bcd8: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020bcdc: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
8020bcde: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     uint_impl! {
8020bce2: 23 30 b4 f6  	sd	a1, -0xa0(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
8020bce6: 23 34 b4 f6  	sd	a1, -0x98(s0)
8020bcea: 23 3c a4 f8  	sd	a0, -0x68(s0)
;                     if is_empty!(self) {
8020bcee: 09 a0        	j	0x8020bcf0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E+0x20>
8020bcf0: 03 35 04 f5  	ld	a0, -0xb0(s0)
;                     if is_empty!(self) {
8020bcf4: 93 05 85 00  	addi	a1, a0, 0x8
8020bcf8: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020bcfc: 0c 65        	ld	a1, 0x8(a0)
8020bcfe: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020bd02: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020bd06: 93 05 04 f8  	addi	a1, s0, -0x80
8020bd0a: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         self.as_ptr() == other.as_ptr()
8020bd0e: 08 61        	ld	a0, 0x0(a0)
8020bd10: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020bd14: 83 35 04 f8  	ld	a1, -0x80(s0)
8020bd18: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020bd1c: 2d 8d        	xor	a0, a0, a1
8020bd1e: 13 35 15 00  	seqz	a0, a0
8020bd22: a3 0f a4 f6  	sb	a0, -0x81(s0)
;                     if is_empty!(self) {
8020bd26: 09 a0        	j	0x8020bd28 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E+0x58>
8020bd28: 03 45 f4 f7  	lbu	a0, -0x81(s0)
8020bd2c: 05 89        	andi	a0, a0, 0x1
8020bd2e: 01 e9        	bnez	a0, 0x8020bd3e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E+0x6e>
8020bd30: 09 a0        	j	0x8020bd32 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E+0x62>
8020bd32: 03 35 04 f5  	ld	a0, -0xb0(s0)
;                 let old = self.ptr;
8020bd36: 08 61        	ld	a0, 0x0(a0)
8020bd38: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                     if_zst!(mut self,
8020bd3c: 29 a0        	j	0x8020bd46 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E+0x76>
8020bd3e: 01 45        	li	a0, 0x0
;                         None
8020bd40: 23 38 a4 f6  	sd	a0, -0x90(s0)
;                     if is_empty!(self) {
8020bd44: 35 a8        	j	0x8020bd80 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E+0xb0>
8020bd46: 83 35 04 f5  	ld	a1, -0xb0(s0)
;                     if_zst!(mut self,
8020bd4a: 13 85 85 00  	addi	a0, a1, 0x8
8020bd4e: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self as _
8020bd52: 23 38 a4 fc  	sd	a0, -0x30(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020bd56: 88 61        	ld	a0, 0x0(a1)
8020bd58: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8020bd5c: 41 05        	addi	a0, a0, 0x10
8020bd5e: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8020bd62: 03 35 04 f9  	ld	a0, -0x70(s0)
8020bd66: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
8020bd68: 09 a0        	j	0x8020bd6a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E+0x9a>
8020bd6a: 13 05 84 f8  	addi	a0, s0, -0x78
;                         Some(next_unchecked!(self))
8020bd6e: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.as_ptr() }
8020bd72: 03 35 84 f8  	ld	a0, -0x78(s0)
8020bd76: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
8020bd7a: 23 38 a4 f6  	sd	a0, -0x90(s0)
;                     if is_empty!(self) {
8020bd7e: 09 a0        	j	0x8020bd80 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h13efce4129a86600E+0xb0>
;             }
8020bd80: 03 35 04 f7  	ld	a0, -0x90(s0)
8020bd84: aa 70        	ld	ra, 0xa8(sp)
8020bd86: 0a 74        	ld	s0, 0xa0(sp)
8020bd88: 4d 61        	addi	sp, sp, 0xb0
8020bd8a: 82 80        	ret

000000008020bd8c <_ZN2os5riscv8intr_get17hd55e7dd6427c9f77E>:
; pub fn intr_get() -> bool {
8020bd8c: 01 11        	addi	sp, sp, -0x20
8020bd8e: 06 ec        	sd	ra, 0x18(sp)
8020bd90: 22 e8        	sd	s0, 0x10(sp)
8020bd92: 00 10        	addi	s0, sp, 0x20
;     sstatus::read().sie()
8020bd94: 97 a0 ff ff  	auipc	ra, 0xffffa
8020bd98: e7 80 e0 9a  	jalr	-0x652(ra) <ekernel+0xffcb8742>
8020bd9c: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020bda0: 13 05 84 fe  	addi	a0, s0, -0x18
8020bda4: 97 a0 ff ff  	auipc	ra, 0xffffa
8020bda8: e7 80 20 9f  	jalr	-0x60e(ra) <ekernel+0xffcb8796>
8020bdac: e2 60        	ld	ra, 0x18(sp)
8020bdae: 42 64        	ld	s0, 0x10(sp)
; }
8020bdb0: 05 61        	addi	sp, sp, 0x20
8020bdb2: 82 80        	ret

000000008020bdb4 <_ZN2os5riscv8intr_off17h8d0625cb3ee9c045E>:
; pub fn intr_off() {
8020bdb4: 41 11        	addi	sp, sp, -0x10
8020bdb6: 06 e4        	sd	ra, 0x8(sp)
8020bdb8: 22 e0        	sd	s0, 0x0(sp)
8020bdba: 00 08        	addi	s0, sp, 0x10
;         sstatus::clear_sie();
8020bdbc: 97 a0 ff ff  	auipc	ra, 0xffffa
8020bdc0: e7 80 40 ac  	jalr	-0x53c(ra) <ekernel+0xffcb8880>
8020bdc4: a2 60        	ld	ra, 0x8(sp)
8020bdc6: 02 64        	ld	s0, 0x0(sp)
; }
8020bdc8: 41 01        	addi	sp, sp, 0x10
8020bdca: 82 80        	ret

000000008020bdcc <_ZN2os5riscv7intr_on17hda6afb9f396c98abE>:
; pub fn intr_on() {
8020bdcc: 41 11        	addi	sp, sp, -0x10
8020bdce: 06 e4        	sd	ra, 0x8(sp)
8020bdd0: 22 e0        	sd	s0, 0x0(sp)
8020bdd2: 00 08        	addi	s0, sp, 0x10
;         sstatus::set_sie();
8020bdd4: 97 a0 ff ff  	auipc	ra, 0xffffa
8020bdd8: e7 80 c0 a3  	jalr	-0x5c4(ra) <ekernel+0xffcb8810>
8020bddc: a2 60        	ld	ra, 0x8(sp)
8020bdde: 02 64        	ld	s0, 0x0(sp)
; }
8020bde0: 41 01        	addi	sp, sp, 0x10
8020bde2: 82 80        	ret

000000008020bde4 <_ZN2os5riscv4r_tp17h83d00e10394f4f69E>:
; pub fn r_tp() -> usize{
8020bde4: 01 11        	addi	sp, sp, -0x20
8020bde6: 06 ec        	sd	ra, 0x18(sp)
8020bde8: 22 e8        	sd	s0, 0x10(sp)
8020bdea: 00 10        	addi	s0, sp, 0x20
;         asm!("mv {0}, tp", out(reg) id);
8020bdec: 12 85        	mv	a0, tp
8020bdee: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         id
8020bdf2: 03 35 84 fe  	ld	a0, -0x18(s0)
8020bdf6: e2 60        	ld	ra, 0x18(sp)
8020bdf8: 42 64        	ld	s0, 0x10(sp)
; }
8020bdfa: 05 61        	addi	sp, sp, 0x20
8020bdfc: 82 80        	ret

000000008020bdfe <_ZN2os5riscv10sfence_vma17he9927d89586f2b80E>:
; pub fn sfence_vma(){
8020bdfe: 41 11        	addi	sp, sp, -0x10
8020be00: 06 e4        	sd	ra, 0x8(sp)
8020be02: 22 e0        	sd	s0, 0x0(sp)
8020be04: 00 08        	addi	s0, sp, 0x10
;     unsafe {asm!("sfence.vma zero,zero");}
8020be06: 73 00 00 12  	sfence.vma
8020be0a: a2 60        	ld	ra, 0x8(sp)
8020be0c: 02 64        	ld	s0, 0x0(sp)
; }
8020be0e: 41 01        	addi	sp, sp, 0x10
8020be10: 82 80        	ret

000000008020be12 <_ZN4core5slice3raw18from_raw_parts_mut17hacd7532ca9270deeE>:
; pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
8020be12: 1d 71        	addi	sp, sp, -0x60
8020be14: 86 ec        	sd	ra, 0x58(sp)
8020be16: a2 e8        	sd	s0, 0x50(sp)
8020be18: 80 10        	addi	s0, sp, 0x60
8020be1a: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020be1e: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020be22: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020be26: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         assert_unsafe_precondition!(
8020be2a: 09 a0        	j	0x8020be2c <_ZN4core5slice3raw18from_raw_parts_mut17hacd7532ca9270deeE+0x1a>
8020be2c: 83 36 84 fa  	ld	a3, -0x58(s0)
8020be30: 03 35 04 fb  	ld	a0, -0x50(s0)
8020be34: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
8020be36: b2 85        	mv	a1, a2
8020be38: 97 50 ff ff  	auipc	ra, 0xffff5
8020be3c: e7 80 80 77  	jalr	0x778(ra) <ekernel+0xffcb45b0>
8020be40: 09 a0        	j	0x8020be42 <_ZN4core5slice3raw18from_raw_parts_mut17hacd7532ca9270deeE+0x30>
8020be42: 03 35 84 fa  	ld	a0, -0x58(s0)
8020be46: 83 35 04 fb  	ld	a1, -0x50(s0)
;         self as _
8020be4a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8020be4e: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020be52: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020be56: 83 35 84 fc  	ld	a1, -0x38(s0)
8020be5a: 03 35 04 fd  	ld	a0, -0x30(s0)
8020be5e: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020be62: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020be66: 03 35 84 fb  	ld	a0, -0x48(s0)
8020be6a: 83 35 04 fc  	ld	a1, -0x40(s0)
8020be6e: e6 60        	ld	ra, 0x58(sp)
8020be70: 46 64        	ld	s0, 0x50(sp)
; }
8020be72: 25 61        	addi	sp, sp, 0x60
8020be74: 82 80        	ret

000000008020be76 <_ZN4core5slice3raw18from_raw_parts_mut17hea9fb0299d895b2cE>:
; pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
8020be76: 1d 71        	addi	sp, sp, -0x60
8020be78: 86 ec        	sd	ra, 0x58(sp)
8020be7a: a2 e8        	sd	s0, 0x50(sp)
8020be7c: 80 10        	addi	s0, sp, 0x60
8020be7e: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020be82: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020be86: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020be8a: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         assert_unsafe_precondition!(
8020be8e: 09 a0        	j	0x8020be90 <_ZN4core5slice3raw18from_raw_parts_mut17hea9fb0299d895b2cE+0x1a>
8020be90: 83 36 84 fa  	ld	a3, -0x58(s0)
8020be94: 03 35 04 fb  	ld	a0, -0x50(s0)
8020be98: 41 46        	li	a2, 0x10
;         assert_unsafe_precondition!(
8020be9a: b2 85        	mv	a1, a2
8020be9c: 97 50 ff ff  	auipc	ra, 0xffff5
8020bea0: e7 80 40 71  	jalr	0x714(ra) <ekernel+0xffcb45b0>
8020bea4: 09 a0        	j	0x8020bea6 <_ZN4core5slice3raw18from_raw_parts_mut17hea9fb0299d895b2cE+0x30>
8020bea6: 03 35 84 fa  	ld	a0, -0x58(s0)
8020beaa: 83 35 04 fb  	ld	a1, -0x50(s0)
;         self as _
8020beae: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8020beb2: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020beb6: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020beba: 83 35 84 fc  	ld	a1, -0x38(s0)
8020bebe: 03 35 04 fd  	ld	a0, -0x30(s0)
8020bec2: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020bec6: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020beca: 03 35 84 fb  	ld	a0, -0x48(s0)
8020bece: 83 35 04 fc  	ld	a1, -0x40(s0)
8020bed2: e6 60        	ld	ra, 0x58(sp)
8020bed4: 46 64        	ld	s0, 0x50(sp)
; }
8020bed6: 25 61        	addi	sp, sp, 0x60
8020bed8: 82 80        	ret

000000008020beda <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>:
;     fn into(self) -> U {
8020beda: 01 11        	addi	sp, sp, -0x20
8020bedc: 06 ec        	sd	ra, 0x18(sp)
8020bede: 22 e8        	sd	s0, 0x10(sp)
8020bee0: 00 10        	addi	s0, sp, 0x20
8020bee2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         U::from(self)
8020bee6: 97 00 00 00  	auipc	ra, 0x0
8020beea: e7 80 c0 2f  	jalr	0x2fc(ra) <_ZN68_$LT$os..vm..PhyAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h8292022a1d48cf9aE>
8020beee: e2 60        	ld	ra, 0x18(sp)
8020bef0: 42 64        	ld	s0, 0x10(sp)
;     }
8020bef2: 05 61        	addi	sp, sp, 0x20
8020bef4: 82 80        	ret

000000008020bef6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha90e1b523d38a347E>:
;     fn into(self) -> U {
8020bef6: 01 11        	addi	sp, sp, -0x20
8020bef8: 06 ec        	sd	ra, 0x18(sp)
8020befa: 22 e8        	sd	s0, 0x10(sp)
8020befc: 00 10        	addi	s0, sp, 0x20
8020befe: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         U::from(self)
8020bf02: 97 00 00 00  	auipc	ra, 0x0
8020bf06: e7 80 40 33  	jalr	0x334(ra) <_ZN68_$LT$os..vm..VirAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h39eb6211773199eeE>
8020bf0a: e2 60        	ld	ra, 0x18(sp)
8020bf0c: 42 64        	ld	s0, 0x10(sp)
;     }
8020bf0e: 05 61        	addi	sp, sp, 0x20
8020bf10: 82 80        	ret

000000008020bf12 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha9cb1c0b7f0c453aE>:
;     fn into(self) -> U {
8020bf12: 01 11        	addi	sp, sp, -0x20
8020bf14: 06 ec        	sd	ra, 0x18(sp)
8020bf16: 22 e8        	sd	s0, 0x10(sp)
8020bf18: 00 10        	addi	s0, sp, 0x20
8020bf1a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         U::from(self)
8020bf1e: 97 00 00 00  	auipc	ra, 0x0
8020bf22: e7 80 40 2e  	jalr	0x2e4(ra) <_ZN71_$LT$os..vm..PhyPageNum$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17hd1087542ba24b659E>
8020bf26: e2 60        	ld	ra, 0x18(sp)
8020bf28: 42 64        	ld	s0, 0x10(sp)
;     }
8020bf2a: 05 61        	addi	sp, sp, 0x20
8020bf2c: 82 80        	ret

000000008020bf2e <_ZN5alloc6string6String14into_boxed_str17h85b6a64970cc9101E>:
;     pub fn into_boxed_str(self) -> Box<str> {
8020bf2e: 39 71        	addi	sp, sp, -0x40
8020bf30: 06 fc        	sd	ra, 0x38(sp)
8020bf32: 22 f8        	sd	s0, 0x30(sp)
8020bf34: 80 00        	addi	s0, sp, 0x40
;         let slice = self.vec.into_boxed_slice();
8020bf36: 0c 69        	ld	a1, 0x10(a0)
8020bf38: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020bf3c: 0c 65        	ld	a1, 0x8(a0)
8020bf3e: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020bf42: 08 61        	ld	a0, 0x0(a0)
8020bf44: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020bf48: 13 05 84 fc  	addi	a0, s0, -0x38
8020bf4c: 97 90 00 00  	auipc	ra, 0x9
8020bf50: e7 80 c0 8e  	jalr	-0x714(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16into_boxed_slice17h78ed5adb613afcaaE>
8020bf54: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020bf58: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { from_boxed_utf8_unchecked(slice) }
8020bf5c: 97 30 00 00  	auipc	ra, 0x3
8020bf60: e7 80 80 33  	jalr	0x338(ra) <_ZN5alloc3str25from_boxed_utf8_unchecked17ha3c21bb2dea0779dE>
8020bf64: e2 70        	ld	ra, 0x38(sp)
8020bf66: 42 74        	ld	s0, 0x30(sp)
;     }
8020bf68: 21 61        	addi	sp, sp, 0x40
8020bf6a: 82 80        	ret

000000008020bf6c <_ZN5alloc6string6String3new17hd674d94b7964d8a7E>:
;     pub const fn new() -> String {
8020bf6c: 79 71        	addi	sp, sp, -0x30
8020bf6e: 06 f4        	sd	ra, 0x28(sp)
8020bf70: 22 f0        	sd	s0, 0x20(sp)
8020bf72: 00 18        	addi	s0, sp, 0x30
8020bf74: aa 85        	mv	a1, a0
8020bf76: 01 45        	li	a0, 0x0
;         Vec { buf: RawVec::NEW, len: 0 }
8020bf78: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020bf7c: 05 46        	li	a2, 0x1
8020bf7e: 23 30 c4 fe  	sd	a2, -0x20(s0)
8020bf82: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         String { vec: Vec::new() }
8020bf86: 03 35 84 fe  	ld	a0, -0x18(s0)
8020bf8a: 88 e9        	sd	a0, 0x10(a1)
8020bf8c: 03 35 04 fe  	ld	a0, -0x20(s0)
8020bf90: 88 e5        	sd	a0, 0x8(a1)
8020bf92: 03 35 84 fd  	ld	a0, -0x28(s0)
8020bf96: 88 e1        	sd	a0, 0x0(a1)
8020bf98: a2 70        	ld	ra, 0x28(sp)
8020bf9a: 02 74        	ld	s0, 0x20(sp)
;     }
8020bf9c: 45 61        	addi	sp, sp, 0x30
8020bf9e: 82 80        	ret

000000008020bfa0 <_ZN5alloc6string6String4push17h5ca00010072dd03eE>:
;     pub fn push(&mut self, ch: char) {
8020bfa0: 59 71        	addi	sp, sp, -0x70
8020bfa2: 86 f4        	sd	ra, 0x68(sp)
8020bfa4: a2 f0        	sd	s0, 0x60(sp)
8020bfa6: 80 18        	addi	s0, sp, 0x70
8020bfa8: 2a 86        	mv	a2, a0
8020bfaa: 23 3c c4 f8  	sd	a2, -0x68(s0)
8020bfae: 1b 85 05 00  	sext.w	a0, a1
8020bfb2: ae 86        	mv	a3, a1
8020bfb4: 23 30 d4 fa  	sd	a3, -0x60(s0)
8020bfb8: 23 38 c4 fa  	sd	a2, -0x50(s0)
8020bfbc: 23 2c b4 fa  	sw	a1, -0x48(s0)
;         len_utf8(self as u32)
8020bfc0: 23 2e b4 fa  	sw	a1, -0x44(s0)
8020bfc4: 93 05 00 08  	li	a1, 0x80
;     if code < MAX_ONE_B {
8020bfc8: 63 69 b5 00  	bltu	a0, a1, 0x8020bfda <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x3a>
8020bfcc: 09 a0        	j	0x8020bfce <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x2e>
8020bfce: 03 35 04 fa  	ld	a0, -0x60(s0)
;     } else if code < MAX_TWO_B {
8020bfd2: 1b 55 b5 00  	srliw	a0, a0, 0xb
8020bfd6: 0d c1        	beqz	a0, 0x8020bff8 <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x58>
8020bfd8: 11 a8        	j	0x8020bfec <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x4c>
8020bfda: 83 35 04 fa  	ld	a1, -0x60(s0)
8020bfde: 03 35 84 f9  	ld	a0, -0x68(s0)
;             1 => self.vec.push(ch as u8),
8020bfe2: 97 90 00 00  	auipc	ra, 0x9
8020bfe6: e7 80 40 b3  	jalr	-0x4cc(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h34bd5a272f7c1f69E>
8020bfea: 85 a0        	j	0x8020c04a <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0xaa>
8020bfec: 03 35 04 fa  	ld	a0, -0x60(s0)
;     } else if code < MAX_THREE_B {
8020bff0: 1b 55 05 01  	srliw	a0, a0, 0x10
8020bff4: 01 c5        	beqz	a0, 0x8020bffc <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x5c>
8020bff6: 11 a0        	j	0x8020bffa <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x5a>
;     } else if code < MAX_TWO_B {
8020bff8: 21 a0        	j	0x8020c000 <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x60>
;     } else if code < MAX_THREE_B {
8020bffa: 11 a0        	j	0x8020bffe <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x5e>
8020bffc: 09 a0        	j	0x8020bffe <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x5e>
;     } else if code < MAX_TWO_B {
8020bffe: 09 a0        	j	0x8020c000 <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0x60>
8020c000: 03 35 04 fa  	ld	a0, -0x60(s0)
8020c004: 81 45        	li	a1, 0x0
;             _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
8020c006: 23 26 b4 fa  	sw	a1, -0x54(s0)
8020c00a: 93 05 c4 fa  	addi	a1, s0, -0x54
8020c00e: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020c012: 11 46        	li	a2, 0x4
8020c014: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
8020c018: 97 50 ff ff  	auipc	ra, 0xffff5
8020c01c: e7 80 00 bd  	jalr	-0x430(ra) <ekernel+0xffcb3be8>
8020c020: 2a 86        	mv	a2, a0
8020c022: 03 35 84 f9  	ld	a0, -0x68(s0)
8020c026: 23 38 c4 f8  	sd	a2, -0x70(s0)
8020c02a: 2e 86        	mv	a2, a1
8020c02c: 83 35 04 f9  	ld	a1, -0x70(s0)
8020c030: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020c034: 23 3c c4 fc  	sd	a2, -0x28(s0)
;     unsafe { &mut *(v as *mut [u8] as *mut str) }
8020c038: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020c03c: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
8020c040: 97 90 00 00  	auipc	ra, 0x9
8020c044: e7 80 e0 87  	jalr	-0x782(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17h65e22f70a79c314aE>
8020c048: 09 a0        	j	0x8020c04a <_ZN5alloc6string6String4push17h5ca00010072dd03eE+0xaa>
8020c04a: a6 70        	ld	ra, 0x68(sp)
8020c04c: 06 74        	ld	s0, 0x60(sp)
;     }
8020c04e: 65 61        	addi	sp, sp, 0x70
8020c050: 82 80        	ret

000000008020c052 <_ZN5alloc6string6String6as_str17hf11a06c050b113a3E>:
;     pub fn as_str(&self) -> &str {
8020c052: 79 71        	addi	sp, sp, -0x30
8020c054: 06 f4        	sd	ra, 0x28(sp)
8020c056: 22 f0        	sd	s0, 0x20(sp)
8020c058: 00 18        	addi	s0, sp, 0x30
8020c05a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { str::from_utf8_unchecked(&self.vec) }
8020c05e: 97 90 00 00  	auipc	ra, 0x9
8020c062: e7 80 20 ee  	jalr	-0x11e(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h77e1ebbea2624a8dE>
8020c066: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020c06a: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020c06e: a2 70        	ld	ra, 0x28(sp)
8020c070: 02 74        	ld	s0, 0x20(sp)
;     }
8020c072: 45 61        	addi	sp, sp, 0x30
8020c074: 82 80        	ret

000000008020c076 <_ZN60_$LT$alloc..string..String$u20$as$u20$core..fmt..Display$GT$3fmt17h58d1a3c20f0f450aE>:
;     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8020c076: 39 71        	addi	sp, sp, -0x40
8020c078: 06 fc        	sd	ra, 0x38(sp)
8020c07a: 22 f8        	sd	s0, 0x30(sp)
8020c07c: 80 00        	addi	s0, sp, 0x40
8020c07e: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020c082: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020c086: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { str::from_utf8_unchecked(&self.vec) }
8020c08a: 97 90 00 00  	auipc	ra, 0x9
8020c08e: e7 80 60 eb  	jalr	-0x14a(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h77e1ebbea2624a8dE>
8020c092: 03 36 84 fc  	ld	a2, -0x38(s0)
8020c096: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020c09a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         fmt::Display::fmt(&**self, f)
8020c09e: 97 40 02 00  	auipc	ra, 0x24
8020c0a2: e7 80 40 ed  	jalr	-0x12c(ra) <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hd7ed1d762e2594f9E>
8020c0a6: e2 70        	ld	ra, 0x38(sp)
8020c0a8: 42 74        	ld	s0, 0x30(sp)
;     }
8020c0aa: 21 61        	addi	sp, sp, 0x40
8020c0ac: 82 80        	ret

000000008020c0ae <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17h86fbc5ca13ac7216E>:
;         .any(|p| pid == -1 || pid as usize == p.pid())
8020c0ae: 39 71        	addi	sp, sp, -0x40
8020c0b0: 06 fc        	sd	ra, 0x38(sp)
8020c0b2: 22 f8        	sd	s0, 0x30(sp)
8020c0b4: 80 00        	addi	s0, sp, 0x40
8020c0b6: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020c0ba: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020c0be: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020c0c2: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020c0c6: 08 61        	ld	a0, 0x0(a0)
8020c0c8: 08 61        	ld	a0, 0x0(a0)
8020c0ca: fd 55        	li	a1, -0x1
8020c0cc: 63 17 b5 00  	bne	a0, a1, 0x8020c0da <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17h86fbc5ca13ac7216E+0x2c>
8020c0d0: 09 a0        	j	0x8020c0d2 <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17h86fbc5ca13ac7216E+0x24>
8020c0d2: 05 45        	li	a0, 0x1
;         .any(|p| pid == -1 || pid as usize == p.pid())
8020c0d4: a3 0f a4 fc  	sb	a0, -0x21(s0)
8020c0d8: 15 a8        	j	0x8020c10c <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17h86fbc5ca13ac7216E+0x5e>
8020c0da: 03 35 84 fc  	ld	a0, -0x38(s0)
8020c0de: 83 35 04 fd  	ld	a1, -0x30(s0)
;         .any(|p| pid == -1 || pid as usize == p.pid())
8020c0e2: 8c 61        	ld	a1, 0x0(a1)
8020c0e4: 8c 61        	ld	a1, 0x0(a1)
8020c0e6: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020c0ea: 97 60 ff ff  	auipc	ra, 0xffff6
8020c0ee: e7 80 20 ce  	jalr	-0x31e(ra) <ekernel+0xffcb4dcc>
8020c0f2: 97 20 00 00  	auipc	ra, 0x2
8020c0f6: e7 80 00 f8  	jalr	-0x80(ra) <_ZN2os4task4task16TaskControlBlock3pid17h1ef377ec86e4a976E>
8020c0fa: aa 85        	mv	a1, a0
8020c0fc: 03 35 04 fc  	ld	a0, -0x40(s0)
8020c100: 2d 8d        	xor	a0, a0, a1
8020c102: 13 35 15 00  	seqz	a0, a0
8020c106: a3 0f a4 fc  	sb	a0, -0x21(s0)
8020c10a: 09 a0        	j	0x8020c10c <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17h86fbc5ca13ac7216E+0x5e>
8020c10c: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8020c110: e2 70        	ld	ra, 0x38(sp)
8020c112: 42 74        	ld	s0, 0x30(sp)
8020c114: 21 61        	addi	sp, sp, 0x40
8020c116: 82 80        	ret

000000008020c118 <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17hd38a4613e60e5eecE>:
;     let pair = inner.children.iter().enumerate().find(|(_,p)|{
8020c118: 1d 71        	addi	sp, sp, -0x60
8020c11a: 86 ec        	sd	ra, 0x58(sp)
8020c11c: a2 e8        	sd	s0, 0x50(sp)
8020c11e: 80 10        	addi	s0, sp, 0x60
8020c120: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020c124: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020c128: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020c12c: 13 85 85 00  	addi	a0, a1, 0x8
8020c130: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020c134: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { p.out_data.lock() }.is_zombie() && (pid == -1 ||pid as usize == p.pid())
8020c138: 88 65        	ld	a0, 0x8(a1)
8020c13a: 97 60 ff ff  	auipc	ra, 0xffff6
8020c13e: e7 80 20 c9  	jalr	-0x36e(ra) <ekernel+0xffcb4dcc>
8020c142: 97 70 00 00  	auipc	ra, 0x7
8020c146: e7 80 60 db  	jalr	-0x24a(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7cf5583f2d8e897eE>
8020c14a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020c14e: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020c152: 13 05 84 fc  	addi	a0, s0, -0x38
8020c156: 97 80 00 00  	auipc	ra, 0x8
8020c15a: e7 80 e0 a0  	jalr	-0x5f2(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd8605aecacba44f4E>
8020c15e: 97 20 00 00  	auipc	ra, 0x2
8020c162: e7 80 c0 d3  	jalr	-0x2c4(ra) <_ZN2os4task4task6TcbOut9is_zombie17h741bf29cf3981a20E>
8020c166: 01 ed        	bnez	a0, 0x8020c17e <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17hd38a4613e60e5eecE+0x66>
8020c168: 09 a0        	j	0x8020c16a <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17hd38a4613e60e5eecE+0x52>
8020c16a: 13 05 84 fc  	addi	a0, s0, -0x38
;         unsafe { p.out_data.lock() }.is_zombie() && (pid == -1 ||pid as usize == p.pid())
8020c16e: 97 c0 ff ff  	auipc	ra, 0xffffc
8020c172: e7 80 40 1c  	jalr	0x1c4(ra) <ekernel+0xffcbb332>
8020c176: 01 45        	li	a0, 0x0
8020c178: a3 03 a4 fc  	sb	a0, -0x39(s0)
8020c17c: 39 a8        	j	0x8020c19a <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17hd38a4613e60e5eecE+0x82>
8020c17e: 13 05 84 fc  	addi	a0, s0, -0x38
;         unsafe { p.out_data.lock() }.is_zombie() && (pid == -1 ||pid as usize == p.pid())
8020c182: 97 c0 ff ff  	auipc	ra, 0xffffc
8020c186: e7 80 00 1b  	jalr	0x1b0(ra) <ekernel+0xffcbb332>
8020c18a: 03 35 04 fb  	ld	a0, -0x50(s0)
8020c18e: 08 61        	ld	a0, 0x0(a0)
8020c190: 08 61        	ld	a0, 0x0(a0)
8020c192: fd 55        	li	a1, -0x1
8020c194: 63 09 b5 00  	beq	a0, a1, 0x8020c1a6 <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17hd38a4613e60e5eecE+0x8e>
8020c198: 19 a8        	j	0x8020c1ae <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17hd38a4613e60e5eecE+0x96>
;     });
8020c19a: 03 45 74 fc  	lbu	a0, -0x39(s0)
8020c19e: e6 60        	ld	ra, 0x58(sp)
8020c1a0: 46 64        	ld	s0, 0x50(sp)
8020c1a2: 25 61        	addi	sp, sp, 0x60
8020c1a4: 82 80        	ret
8020c1a6: 05 45        	li	a0, 0x1
;         unsafe { p.out_data.lock() }.is_zombie() && (pid == -1 ||pid as usize == p.pid())
8020c1a8: a3 03 a4 fc  	sb	a0, -0x39(s0)
8020c1ac: fd b7        	j	0x8020c19a <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17hd38a4613e60e5eecE+0x82>
8020c1ae: 03 35 84 fb  	ld	a0, -0x48(s0)
8020c1b2: 83 35 04 fb  	ld	a1, -0x50(s0)
;         unsafe { p.out_data.lock() }.is_zombie() && (pid == -1 ||pid as usize == p.pid())
8020c1b6: 8c 61        	ld	a1, 0x0(a1)
8020c1b8: 8c 61        	ld	a1, 0x0(a1)
8020c1ba: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020c1be: 08 61        	ld	a0, 0x0(a0)
8020c1c0: 97 60 ff ff  	auipc	ra, 0xffff6
8020c1c4: e7 80 c0 c0  	jalr	-0x3f4(ra) <ekernel+0xffcb4dcc>
8020c1c8: 97 20 00 00  	auipc	ra, 0x2
8020c1cc: e7 80 a0 ea  	jalr	-0x156(ra) <_ZN2os4task4task16TaskControlBlock3pid17h1ef377ec86e4a976E>
8020c1d0: aa 85        	mv	a1, a0
8020c1d2: 03 35 84 fa  	ld	a0, -0x58(s0)
8020c1d6: 2d 8d        	xor	a0, a0, a1
8020c1d8: 13 35 15 00  	seqz	a0, a0
8020c1dc: a3 03 a4 fc  	sb	a0, -0x39(s0)
8020c1e0: 6d bf        	j	0x8020c19a <_ZN2os7syscall7process11sys_waitpid28_$u7b$$u7b$closure$u7d$$u7d$17hd38a4613e60e5eecE+0x82>

000000008020c1e2 <_ZN68_$LT$os..vm..PhyAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h8292022a1d48cf9aE>:
;     fn from(value: usize) -> Self {
8020c1e2: 01 11        	addi	sp, sp, -0x20
8020c1e4: 06 ec        	sd	ra, 0x18(sp)
8020c1e6: 22 e8        	sd	s0, 0x10(sp)
8020c1e8: 00 10        	addi	s0, sp, 0x20
8020c1ea: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             Self(value&((1<<PA_WIDTH_SV39)-1))}
8020c1ee: 22 05        	slli	a0, a0, 0x8
8020c1f0: 21 81        	srli	a0, a0, 0x8
8020c1f2: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020c1f6: 03 35 04 fe  	ld	a0, -0x20(s0)
8020c1fa: e2 60        	ld	ra, 0x18(sp)
8020c1fc: 42 64        	ld	s0, 0x10(sp)
8020c1fe: 05 61        	addi	sp, sp, 0x20
8020c200: 82 80        	ret

000000008020c202 <_ZN71_$LT$os..vm..PhyPageNum$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17hd1087542ba24b659E>:
;     fn from(value: usize) -> Self {
8020c202: 01 11        	addi	sp, sp, -0x20
8020c204: 06 ec        	sd	ra, 0x18(sp)
8020c206: 22 e8        	sd	s0, 0x10(sp)
8020c208: 00 10        	addi	s0, sp, 0x20
8020c20a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self(value &((1<<PPN_SV39)-1))}
8020c20e: 52 05        	slli	a0, a0, 0x14
8020c210: 51 81        	srli	a0, a0, 0x14
8020c212: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020c216: 03 35 04 fe  	ld	a0, -0x20(s0)
8020c21a: e2 60        	ld	ra, 0x18(sp)
8020c21c: 42 64        	ld	s0, 0x10(sp)
8020c21e: 05 61        	addi	sp, sp, 0x20
8020c220: 82 80        	ret

000000008020c222 <_ZN2os2vm81_$LT$impl$u20$core..convert..From$LT$os..vm..PhyPageNum$GT$$u20$for$u20$usize$GT$4from17h6f9eb10db9fd1873E>:
;     fn from(value: PhyPageNum) -> Self {value.0}
8020c222: 01 11        	addi	sp, sp, -0x20
8020c224: 06 ec        	sd	ra, 0x18(sp)
8020c226: 22 e8        	sd	s0, 0x10(sp)
8020c228: 00 10        	addi	s0, sp, 0x20
8020c22a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020c22e: e2 60        	ld	ra, 0x18(sp)
8020c230: 42 64        	ld	s0, 0x10(sp)
8020c232: 05 61        	addi	sp, sp, 0x20
8020c234: 82 80        	ret

000000008020c236 <_ZN68_$LT$os..vm..VirAddr$u20$as$u20$core..convert..From$LT$usize$GT$$GT$4from17h39eb6211773199eeE>:
;     fn from(value: usize) -> Self {
8020c236: 01 11        	addi	sp, sp, -0x20
8020c238: 06 ec        	sd	ra, 0x18(sp)
8020c23a: 22 e8        	sd	s0, 0x10(sp)
8020c23c: 00 10        	addi	s0, sp, 0x20
8020c23e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self(value&((1<<VA_WIDTH_SV39)-1))}
8020c242: 66 05        	slli	a0, a0, 0x19
8020c244: 65 81        	srli	a0, a0, 0x19
8020c246: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020c24a: 03 35 04 fe  	ld	a0, -0x20(s0)
8020c24e: e2 60        	ld	ra, 0x18(sp)
8020c250: 42 64        	ld	s0, 0x10(sp)
8020c252: 05 61        	addi	sp, sp, 0x20
8020c254: 82 80        	ret

000000008020c256 <_ZN2os2vm81_$LT$impl$u20$core..convert..From$LT$os..vm..VirPageNum$GT$$u20$for$u20$usize$GT$4from17hcf507068f9c51afbE>:
;     fn from(value: VirPageNum) -> Self {value.0}
8020c256: 01 11        	addi	sp, sp, -0x20
8020c258: 06 ec        	sd	ra, 0x18(sp)
8020c25a: 22 e8        	sd	s0, 0x10(sp)
8020c25c: 00 10        	addi	s0, sp, 0x20
8020c25e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020c262: e2 60        	ld	ra, 0x18(sp)
8020c264: 42 64        	ld	s0, 0x10(sp)
8020c266: 05 61        	addi	sp, sp, 0x20
8020c268: 82 80        	ret

000000008020c26a <_ZN2os2vm7VirAddr10round_down17hffa07b1292ba75a2E>:
;     pub fn round_down(&self) -> VirPageNum{VirPageNum((self.0 & !(PGSZ - 1)))}
8020c26a: 01 11        	addi	sp, sp, -0x20
8020c26c: 06 ec        	sd	ra, 0x18(sp)
8020c26e: 22 e8        	sd	s0, 0x10(sp)
8020c270: 00 10        	addi	s0, sp, 0x20
8020c272: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020c276: 08 61        	ld	a0, 0x0(a0)
8020c278: fd 75        	lui	a1, 0xfffff
8020c27a: 6d 8d        	and	a0, a0, a1
8020c27c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020c280: 03 35 04 fe  	ld	a0, -0x20(s0)
8020c284: e2 60        	ld	ra, 0x18(sp)
8020c286: 42 64        	ld	s0, 0x10(sp)
8020c288: 05 61        	addi	sp, sp, 0x20
8020c28a: 82 80        	ret

000000008020c28c <_ZN2os2vm10PhyPageNum13get_pte_array17h9455776dfbd1eebfE>:
;     pub fn get_pte_array(&self) -> &'static mut [PhyPageNum] {
8020c28c: 79 71        	addi	sp, sp, -0x30
8020c28e: 06 f4        	sd	ra, 0x28(sp)
8020c290: 22 f0        	sd	s0, 0x20(sp)
8020c292: 00 18        	addi	s0, sp, 0x30
8020c294: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let pa :usize = self.clone().into();
8020c298: 97 10 00 00  	auipc	ra, 0x1
8020c29c: e7 80 e0 68  	jalr	0x68e(ra) <_ZN57_$LT$os..vm..PhyPageNum$u20$as$u20$core..clone..Clone$GT$5clone17h7eb991e43e797854E>

000000008020c2a0 <.Lpcrel_hi0>:
8020c2a0: 97 95 02 00  	auipc	a1, 0x29
8020c2a4: 93 85 05 e0  	addi	a1, a1, -0x200
8020c2a8: 97 a0 ff ff  	auipc	ra, 0xffffa
8020c2ac: e7 80 20 7e  	jalr	0x7e2(ra) <ekernel+0xffcb9a8a>
8020c2b0: 23 30 a4 fe  	sd	a0, -0x20(s0)

000000008020c2b4 <.Lpcrel_hi1>:
;         let pa :PhyAddr= pa.into();
8020c2b4: 97 95 02 00  	auipc	a1, 0x29
8020c2b8: 93 85 45 e0  	addi	a1, a1, -0x1fc
8020c2bc: 97 00 00 00  	auipc	ra, 0x0
8020c2c0: e7 80 e0 c1  	jalr	-0x3e2(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>
8020c2c4: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020c2c8: 93 05 00 20  	li	a1, 0x200
;             core::slice::from_raw_parts_mut(
8020c2cc: 97 00 00 00  	auipc	ra, 0x0
8020c2d0: e7 80 60 b4  	jalr	-0x4ba(ra) <_ZN4core5slice3raw18from_raw_parts_mut17hacd7532ca9270deeE>
8020c2d4: a2 70        	ld	ra, 0x28(sp)
8020c2d6: 02 74        	ld	s0, 0x20(sp)
;     }
8020c2d8: 45 61        	addi	sp, sp, 0x30
8020c2da: 82 80        	ret

000000008020c2dc <_ZN2os2vm10PhyPageNum15get_bytes_array17ha54148423947db22E>:
;     pub fn get_bytes_array(&self) -> &'static mut [u8]{
8020c2dc: 79 71        	addi	sp, sp, -0x30
8020c2de: 06 f4        	sd	ra, 0x28(sp)
8020c2e0: 22 f0        	sd	s0, 0x20(sp)
8020c2e2: 00 18        	addi	s0, sp, 0x30
8020c2e4: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let pa :usize = self.clone().into();
8020c2e8: 97 10 00 00  	auipc	ra, 0x1
8020c2ec: e7 80 e0 63  	jalr	0x63e(ra) <_ZN57_$LT$os..vm..PhyPageNum$u20$as$u20$core..clone..Clone$GT$5clone17h7eb991e43e797854E>

000000008020c2f0 <.Lpcrel_hi2>:
8020c2f0: 97 95 02 00  	auipc	a1, 0x29
8020c2f4: 93 85 05 de  	addi	a1, a1, -0x220
8020c2f8: 97 a0 ff ff  	auipc	ra, 0xffffa
8020c2fc: e7 80 20 79  	jalr	0x792(ra) <ekernel+0xffcb9a8a>
8020c300: 23 30 a4 fe  	sd	a0, -0x20(s0)

000000008020c304 <.Lpcrel_hi3>:
;         let pa :PhyAddr= pa.into();
8020c304: 97 95 02 00  	auipc	a1, 0x29
8020c308: 93 85 45 de  	addi	a1, a1, -0x21c
8020c30c: 97 00 00 00  	auipc	ra, 0x0
8020c310: e7 80 e0 bc  	jalr	-0x432(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0f56b8f9ab739503E>
8020c314: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020c318: 85 65        	lui	a1, 0x1
;             core::slice::from_raw_parts_mut(pa.0 as *mut u8, PGSZ)
8020c31a: 97 70 01 00  	auipc	ra, 0x17
8020c31e: e7 80 60 5f  	jalr	0x5f6(ra) <_ZN4core5slice3raw18from_raw_parts_mut17h0634ea8f918e83aaE>
8020c322: a2 70        	ld	ra, 0x28(sp)
8020c324: 02 74        	ld	s0, 0x20(sp)
;     }
8020c326: 45 61        	addi	sp, sp, 0x30
8020c328: 82 80        	ret

000000008020c32a <_ZN2os2vm10PhyPageNum4is_v17h59945fe29deff048E>:
;     pub fn is_v(&self) -> bool {
8020c32a: 01 11        	addi	sp, sp, -0x20
8020c32c: 06 ec        	sd	ra, 0x18(sp)
8020c32e: 22 e8        	sd	s0, 0x10(sp)
8020c330: 00 10        	addi	s0, sp, 0x20
8020c332: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0 & PTE_V != 0
8020c336: 08 61        	ld	a0, 0x0(a0)
8020c338: 05 89        	andi	a0, a0, 0x1
8020c33a: e2 60        	ld	ra, 0x18(sp)
8020c33c: 42 64        	ld	s0, 0x10(sp)
;     } 
8020c33e: 05 61        	addi	sp, sp, 0x20
8020c340: 82 80        	ret

000000008020c342 <_ZN2os2vm10PhyPageNum7as_satp17he170600e9364cd52E>:
;     pub fn as_satp(&self) -> usize{
8020c342: 79 71        	addi	sp, sp, -0x30
8020c344: 06 f4        	sd	ra, 0x28(sp)
8020c346: 22 f0        	sd	s0, 0x20(sp)
8020c348: 00 18        	addi	s0, sp, 0x30
8020c34a: a1 45        	li	a1, 0x8
;         let sv_39:usize =8;
8020c34c: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020c350: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let addr:usize = self.0;
8020c354: 08 61        	ld	a0, 0x0(a0)
8020c356: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020c35a: 81 45        	li	a1, 0x0
;         let mut bits:usize = 0;
8020c35c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         bits = ( sv_39 << 60) | (addr >> 12);
8020c360: 31 81        	srli	a0, a0, 0xc
8020c362: fd 55        	li	a1, -0x1
8020c364: fe 15        	slli	a1, a1, 0x3f
8020c366: 4d 8d        	or	a0, a0, a1
8020c368: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         bits
8020c36c: 03 35 84 fd  	ld	a0, -0x28(s0)
8020c370: a2 70        	ld	ra, 0x28(sp)
8020c372: 02 74        	ld	s0, 0x20(sp)
;     }
8020c374: 45 61        	addi	sp, sp, 0x30
8020c376: 82 80        	ret

000000008020c378 <_ZN2os2vm9PageTable3new17h82991c91070326d8E>:
;     pub fn new() -> Self{
8020c378: 19 71        	addi	sp, sp, -0x80
8020c37a: 86 fc        	sd	ra, 0x78(sp)
8020c37c: a2 f8        	sd	s0, 0x70(sp)
8020c37e: 00 01        	addi	s0, sp, 0x80
8020c380: 23 38 a4 f8  	sd	a0, -0x70(s0)

000000008020c384 <.Lpcrel_hi4>:
;         let pte: AllocerGuard = FRAME_ALLOC.page_alloc();
8020c384: 17 25 03 00  	auipc	a0, 0x32
8020c388: 13 05 c5 c7  	addi	a0, a0, -0x384
8020c38c: 97 80 ff ff  	auipc	ra, 0xffff8
8020c390: e7 80 a0 b2  	jalr	-0x4d6(ra) <ekernel+0xffcb6eb6>
8020c394: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020c398: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let page = pte.pages;
8020c39c: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020c3a0: 13 05 84 f9  	addi	a0, s0, -0x68
8020c3a4: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         let mut v = Vec::new();
8020c3a8: 97 80 00 00  	auipc	ra, 0x8
8020c3ac: e7 80 20 32  	jalr	0x322(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h7972205b75f93b38E>
8020c3b0: 03 35 04 f8  	ld	a0, -0x80(s0)
8020c3b4: 83 35 84 f8  	ld	a1, -0x78(s0)
;         v.push(pte);
8020c3b8: 97 90 00 00  	auipc	ra, 0x9
8020c3bc: e7 80 60 87  	jalr	-0x78a(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E>
;             pagetable: v,
8020c3c0: 03 35 84 fa  	ld	a0, -0x58(s0)
8020c3c4: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020c3c8: 03 35 04 fa  	ld	a0, -0x60(s0)
8020c3cc: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020c3d0: 03 35 84 f9  	ld	a0, -0x68(s0)
8020c3d4: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020c3d8: 13 05 84 fc  	addi	a0, s0, -0x38
;             data:Vec::new()
8020c3dc: 97 80 00 00  	auipc	ra, 0x8
8020c3e0: e7 80 60 32  	jalr	0x326(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h9761f4c138b1b01fE>
8020c3e4: 03 35 84 f8  	ld	a0, -0x78(s0)
8020c3e8: 83 35 04 f9  	ld	a1, -0x70(s0)
;         Self { 
8020c3ec: 88 f9        	sd	a0, 0x30(a1)
8020c3ee: 03 35 04 fc  	ld	a0, -0x40(s0)
8020c3f2: 88 e9        	sd	a0, 0x10(a1)
8020c3f4: 03 35 84 fb  	ld	a0, -0x48(s0)
8020c3f8: 88 e5        	sd	a0, 0x8(a1)
8020c3fa: 03 35 04 fb  	ld	a0, -0x50(s0)
8020c3fe: 88 e1        	sd	a0, 0x0(a1)
8020c400: 03 35 84 fd  	ld	a0, -0x28(s0)
8020c404: 88 f5        	sd	a0, 0x28(a1)
8020c406: 03 35 04 fd  	ld	a0, -0x30(s0)
8020c40a: 88 f1        	sd	a0, 0x20(a1)
8020c40c: 03 35 84 fc  	ld	a0, -0x38(s0)
8020c410: 88 ed        	sd	a0, 0x18(a1)
8020c412: e6 70        	ld	ra, 0x78(sp)
8020c414: 46 74        	ld	s0, 0x70(sp)
;     }
8020c416: 09 61        	addi	sp, sp, 0x80
8020c418: 82 80        	ret

000000008020c41a <_ZN2os2vm9PageTable6create17h8a678b1f2d671733E>:
;     pub fn create(root :usize) -> Self{
8020c41a: 1d 71        	addi	sp, sp, -0x60
8020c41c: 86 ec        	sd	ra, 0x58(sp)
8020c41e: a2 e8        	sd	s0, 0x50(sp)
8020c420: 80 10        	addi	s0, sp, 0x60
8020c422: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020c426: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020c42a: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020c42e: 13 05 04 fb  	addi	a0, s0, -0x50
;         let mut v : Vec<AllocerGuard> = Vec::new();
8020c432: 97 80 00 00  	auipc	ra, 0x8
8020c436: e7 80 80 29  	jalr	0x298(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h7972205b75f93b38E>
8020c43a: 83 35 04 fa  	ld	a1, -0x60(s0)
;             root:PhyPageNum(root), 
8020c43e: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020c442: 13 05 04 fd  	addi	a0, s0, -0x30
;             data: Vec::new()
8020c446: 97 80 00 00  	auipc	ra, 0x8
8020c44a: e7 80 c0 2b  	jalr	0x2bc(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h9761f4c138b1b01fE>
8020c44e: 83 35 84 fa  	ld	a1, -0x58(s0)
;         Self { 
8020c452: 03 35 84 fc  	ld	a0, -0x38(s0)
8020c456: 88 f9        	sd	a0, 0x30(a1)
8020c458: 03 35 04 fc  	ld	a0, -0x40(s0)
8020c45c: 88 e9        	sd	a0, 0x10(a1)
8020c45e: 03 35 84 fb  	ld	a0, -0x48(s0)
8020c462: 88 e5        	sd	a0, 0x8(a1)
8020c464: 03 35 04 fb  	ld	a0, -0x50(s0)
8020c468: 88 e1        	sd	a0, 0x0(a1)
8020c46a: 03 35 04 fe  	ld	a0, -0x20(s0)
8020c46e: 88 f5        	sd	a0, 0x28(a1)
8020c470: 03 35 84 fd  	ld	a0, -0x28(s0)
8020c474: 88 f1        	sd	a0, 0x20(a1)
8020c476: 03 35 04 fd  	ld	a0, -0x30(s0)
8020c47a: 88 ed        	sd	a0, 0x18(a1)
8020c47c: e6 60        	ld	ra, 0x58(sp)
8020c47e: 46 64        	ld	s0, 0x50(sp)
;     }
8020c480: 25 61        	addi	sp, sp, 0x60
8020c482: 82 80        	ret

000000008020c484 <_ZN2os2vm9PageTable9save_page17h1a9d9d87053129a1E>:
;     pub fn save_page(&mut self,page:AllocerGuard){
8020c484: 01 11        	addi	sp, sp, -0x20
8020c486: 06 ec        	sd	ra, 0x18(sp)
8020c488: 22 e8        	sd	s0, 0x10(sp)
8020c48a: 00 10        	addi	s0, sp, 0x20
8020c48c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020c490: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.pagetable.push(page);
8020c494: 97 80 00 00  	auipc	ra, 0x8
8020c498: e7 80 a0 79  	jalr	0x79a(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E>
8020c49c: e2 60        	ld	ra, 0x18(sp)
8020c49e: 42 64        	ld	s0, 0x10(sp)
;     }
8020c4a0: 05 61        	addi	sp, sp, 0x20
8020c4a2: 82 80        	ret

000000008020c4a4 <_ZN2os2vm9PageTable8mappages17h6ce27cbab819796cE>:
;     pub fn mappages(&mut self,va:VirAddr,pa:PhyAddr,size:usize,perm : usize) -> bool{
8020c4a4: 61 71        	addi	sp, sp, -0x1b0
8020c4a6: 06 f7        	sd	ra, 0x1a8(sp)
8020c4a8: 22 f3        	sd	s0, 0x1a0(sp)
8020c4aa: 00 1b        	addi	s0, sp, 0x1b0
8020c4ac: 23 30 e4 ec  	sd	a4, -0x140(s0)
8020c4b0: 23 34 d4 ec  	sd	a3, -0x138(s0)
8020c4b4: 23 38 c4 ec  	sd	a2, -0x130(s0)
8020c4b8: 23 3c a4 ec  	sd	a0, -0x128(s0)
8020c4bc: 23 30 b4 ee  	sd	a1, -0x120(s0)
8020c4c0: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020c4c4: 23 3c c4 f6  	sd	a2, -0x88(s0)
8020c4c8: 23 30 d4 f8  	sd	a3, -0x80(s0)
8020c4cc: 23 34 e4 f8  	sd	a4, -0x78(s0)
;         if (size == 0){
8020c4d0: 8d ea        	bnez	a3, 0x8020c502 <.Lpcrel_hi6+0x10>
8020c4d2: 09 a0        	j	0x8020c4d4 <.Lpcrel_hi5>

000000008020c4d4 <.Lpcrel_hi5>:
;             panic!("map error size = 0")
8020c4d4: 17 95 02 00  	auipc	a0, 0x29
8020c4d8: 93 05 45 c4  	addi	a1, a0, -0x3bc
8020c4dc: 13 05 84 ee  	addi	a0, s0, -0x118
8020c4e0: 23 3c a4 ea  	sd	a0, -0x148(s0)
8020c4e4: 05 46        	li	a2, 0x1
8020c4e6: 97 b0 ff ff  	auipc	ra, 0xffffb
8020c4ea: e7 80 e0 ec  	jalr	-0x132(ra) <ekernel+0xffcba3b4>
8020c4ee: 03 35 84 eb  	ld	a0, -0x148(s0)

000000008020c4f2 <.Lpcrel_hi6>:
8020c4f2: 97 95 02 00  	auipc	a1, 0x29
8020c4f6: 93 85 65 c3  	addi	a1, a1, -0x3ca
8020c4fa: 97 40 02 00  	auipc	ra, 0x24
8020c4fe: e7 80 e0 ca  	jalr	-0x352(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
8020c502: 13 05 04 ee  	addi	a0, s0, -0x120
;         let mut a: VirPageNum = va.round_down();
8020c506: 97 00 00 00  	auipc	ra, 0x0
8020c50a: e7 80 40 d6  	jalr	-0x29c(ra) <_ZN2os2vm7VirAddr10round_down17hffa07b1292ba75a2E>
8020c50e: aa 85        	mv	a1, a0
8020c510: 03 35 84 ec  	ld	a0, -0x138(s0)
8020c514: 2e 86        	mv	a2, a1
8020c516: 23 34 c4 ea  	sd	a2, -0x158(s0)
8020c51a: 23 38 b4 f8  	sd	a1, -0x70(s0)
;         let mut last:VirAddr = (va.0+size-1).into();
8020c51e: 83 35 04 ee  	ld	a1, -0x120(s0)
8020c522: 2e 95        	add	a0, a0, a1
8020c524: 23 38 a4 ea  	sd	a0, -0x150(s0)
8020c528: 63 6b b5 00  	bltu	a0, a1, 0x8020c53e <.Lpcrel_hi7>
8020c52c: 09 a0        	j	0x8020c52e <.Lpcrel_hi6+0x3c>
8020c52e: 03 35 04 eb  	ld	a0, -0x150(s0)
;         let mut last:VirAddr = (va.0+size-1).into();
8020c532: 93 05 f5 ff  	addi	a1, a0, -0x1
8020c536: 23 30 b4 ea  	sd	a1, -0x160(s0)
8020c53a: 41 c9        	beqz	a0, 0x8020c5ca <.Lpcrel_hi12>
8020c53c: 31 a8        	j	0x8020c558 <.Lpcrel_hi8+0x12>

000000008020c53e <.Lpcrel_hi7>:
8020c53e: 17 95 02 00  	auipc	a0, 0x29
8020c542: 13 05 25 c2  	addi	a0, a0, -0x3de

000000008020c546 <.Lpcrel_hi8>:
8020c546: 97 95 02 00  	auipc	a1, 0x29
8020c54a: 13 86 a5 bf  	addi	a2, a1, -0x406
8020c54e: f1 45        	li	a1, 0x1c
8020c550: 97 40 02 00  	auipc	ra, 0x24
8020c554: e7 80 80 cc  	jalr	-0x338(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020c558: 03 35 04 ea  	ld	a0, -0x160(s0)

000000008020c55c <.Lpcrel_hi9>:
;         let mut last:VirAddr = (va.0+size-1).into();
8020c55c: 97 95 02 00  	auipc	a1, 0x29
8020c560: 93 85 c5 c6  	addi	a1, a1, -0x394
8020c564: 97 00 00 00  	auipc	ra, 0x0
8020c568: e7 80 20 99  	jalr	-0x66e(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17ha90e1b523d38a347E>
8020c56c: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020c570: 13 05 84 f1  	addi	a0, s0, -0xe8
;         let mut last: VirPageNum = last.round_down();
8020c574: 97 00 00 00  	auipc	ra, 0x0
8020c578: e7 80 60 cf  	jalr	-0x30a(ra) <_ZN2os2vm7VirAddr10round_down17hffa07b1292ba75a2E>
8020c57c: aa 85        	mv	a1, a0
8020c57e: 03 35 84 ea  	ld	a0, -0x158(s0)
8020c582: 23 38 b4 e8  	sd	a1, -0x170(s0)
8020c586: 23 3c b4 f8  	sd	a1, -0x68(s0)

000000008020c58a <.Lpcrel_hi10>:
;         let mut a :usize = a.into();
8020c58a: 97 95 02 00  	auipc	a1, 0x29
8020c58e: 93 85 65 c5  	addi	a1, a1, -0x3aa
8020c592: 97 a0 ff ff  	auipc	ra, 0xffffa
8020c596: e7 80 c0 4d  	jalr	0x4dc(ra) <ekernel+0xffcb9a6e>
8020c59a: aa 85        	mv	a1, a0
8020c59c: 03 35 04 e9  	ld	a0, -0x170(s0)
8020c5a0: 23 30 b4 f2  	sd	a1, -0xe0(s0)

000000008020c5a4 <.Lpcrel_hi11>:
;         let mut last:usize = last.into();
8020c5a4: 97 95 02 00  	auipc	a1, 0x29
8020c5a8: 93 85 45 c5  	addi	a1, a1, -0x3ac
8020c5ac: 97 a0 ff ff  	auipc	ra, 0xffffa
8020c5b0: e7 80 20 4c  	jalr	0x4c2(ra) <ekernel+0xffcb9a6e>
8020c5b4: aa 85        	mv	a1, a0
8020c5b6: 03 35 04 ed  	ld	a0, -0x130(s0)
8020c5ba: 2e 86        	mv	a2, a1
8020c5bc: 23 3c c4 e8  	sd	a2, -0x168(s0)
8020c5c0: 23 30 b4 fa  	sd	a1, -0x60(s0)
;         let mut pa :usize = pa.0;
8020c5c4: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;         loop{
8020c5c8: 39 a8        	j	0x8020c5e6 <.Lpcrel_hi13+0x14>

000000008020c5ca <.Lpcrel_hi12>:
;         let mut last:VirAddr = (va.0+size-1).into();
8020c5ca: 17 95 02 00  	auipc	a0, 0x29
8020c5ce: 13 05 65 bd  	addi	a0, a0, -0x42a

000000008020c5d2 <.Lpcrel_hi13>:
8020c5d2: 97 95 02 00  	auipc	a1, 0x29
8020c5d6: 13 86 e5 ba  	addi	a2, a1, -0x452
8020c5da: 93 05 10 02  	li	a1, 0x21
8020c5de: 97 40 02 00  	auipc	ra, 0x24
8020c5e2: e7 80 a0 c3  	jalr	-0x3c6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020c5e6: 03 35 84 ed  	ld	a0, -0x128(s0)
;             let mut pgtbl_arry:&mut [PhyPageNum] = self.root.get_pte_array();
8020c5ea: 13 05 05 03  	addi	a0, a0, 0x30
8020c5ee: 97 00 00 00  	auipc	ra, 0x0
8020c5f2: e7 80 e0 c9  	jalr	-0x362(ra) <_ZN2os2vm10PhyPageNum13get_pte_array17h9455776dfbd1eebfE>
8020c5f6: aa 86        	mv	a3, a0
8020c5f8: 03 35 84 ed  	ld	a0, -0x128(s0)
8020c5fc: 2e 87        	mv	a4, a1
8020c5fe: 23 34 d4 fa  	sd	a3, -0x58(s0)
8020c602: 23 38 e4 fa  	sd	a4, -0x50(s0)
;             let mut pagetable:&mut [PhyPageNum] = self.walk(a, true,pgtbl_arry).unwrap();
8020c606: 83 35 04 f2  	ld	a1, -0xe0(s0)
8020c60a: 05 46        	li	a2, 0x1
8020c60c: 97 00 00 00  	auipc	ra, 0x0
8020c610: e7 80 e0 35  	jalr	0x35e(ra) <_ZN2os2vm9PageTable4walk17h891378441259572bE>
8020c614: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020c618: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         match self {
8020c61c: 03 35 04 fd  	ld	a0, -0x30(s0)
8020c620: 11 e9        	bnez	a0, 0x8020c634 <.Lpcrel_hi14+0x10>
8020c622: 09 a0        	j	0x8020c624 <.Lpcrel_hi14>

000000008020c624 <.Lpcrel_hi14>:
;             None => unwrap_failed(),
8020c624: 17 95 02 00  	auipc	a0, 0x29
8020c628: 13 05 c5 be  	addi	a0, a0, -0x414
8020c62c: 97 40 02 00  	auipc	ra, 0x24
8020c630: e7 80 c0 69  	jalr	0x69c(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020c634: 83 35 04 fd  	ld	a1, -0x30(s0)
8020c638: 23 38 b4 e6  	sd	a1, -0x190(s0)
8020c63c: 03 35 84 fd  	ld	a0, -0x28(s0)
8020c640: 23 3c a4 e6  	sd	a0, -0x188(s0)
8020c644: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020c648: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             let mut pagetable:&mut [PhyPageNum] = self.walk(a, true,pgtbl_arry).unwrap();
8020c64c: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020c650: 23 30 a4 fc  	sd	a0, -0x40(s0)
;             let idx = (a >> (12+0)) & 0x1ff;
8020c654: 03 35 04 f2  	ld	a0, -0xe0(s0)
8020c658: 23 30 a4 e8  	sd	a0, -0x180(s0)
8020c65c: 31 45        	li	a0, 0xc
8020c65e: 23 34 a4 e8  	sd	a0, -0x178(s0)
8020c662: 01 45        	li	a0, 0x0
8020c664: 11 e9        	bnez	a0, 0x8020c678 <.Lpcrel_hi15>
8020c666: 09 a0        	j	0x8020c668 <.Lpcrel_hi14+0x44>
8020c668: 03 35 84 e8  	ld	a0, -0x178(s0)
;             let idx = (a >> (12+0)) & 0x1ff;
8020c66c: 01 25        	sext.w	a0, a0
8020c66e: 93 05 00 04  	li	a1, 0x40
8020c672: 63 60 b5 02  	bltu	a0, a1, 0x8020c692 <.Lpcrel_hi16+0x12>
8020c676: 3d a8        	j	0x8020c6b4 <.Lpcrel_hi17>

000000008020c678 <.Lpcrel_hi15>:
8020c678: 17 95 02 00  	auipc	a0, 0x29
8020c67c: 13 05 85 ae  	addi	a0, a0, -0x518

000000008020c680 <.Lpcrel_hi16>:
8020c680: 97 95 02 00  	auipc	a1, 0x29
8020c684: 13 86 85 ba  	addi	a2, a1, -0x458
8020c688: f1 45        	li	a1, 0x1c
8020c68a: 97 40 02 00  	auipc	ra, 0x24
8020c68e: e7 80 e0 b8  	jalr	-0x472(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020c692: 83 35 84 e7  	ld	a1, -0x188(s0)
8020c696: 03 35 04 e8  	ld	a0, -0x180(s0)
8020c69a: 03 36 84 e8  	ld	a2, -0x178(s0)
;             let idx = (a >> (12+0)) & 0x1ff;
8020c69e: 33 55 c5 00  	srl	a0, a0, a2
8020c6a2: 13 75 f5 1f  	andi	a0, a0, 0x1ff
8020c6a6: 23 34 a4 e6  	sd	a0, -0x198(s0)
8020c6aa: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             let pte: PhyPageNum = pagetable[idx];
8020c6ae: 63 61 b5 02  	bltu	a0, a1, 0x8020c6d0 <.Lpcrel_hi18+0x14>
8020c6b2: 81 a0        	j	0x8020c6f2 <.Lpcrel_hi18+0x36>

000000008020c6b4 <.Lpcrel_hi17>:
;             let idx = (a >> (12+0)) & 0x1ff;
8020c6b4: 17 95 02 00  	auipc	a0, 0x29
8020c6b8: 13 05 c5 ba  	addi	a0, a0, -0x454

000000008020c6bc <.Lpcrel_hi18>:
8020c6bc: 97 95 02 00  	auipc	a1, 0x29
8020c6c0: 13 86 45 b8  	addi	a2, a1, -0x47c
8020c6c4: 93 05 40 02  	li	a1, 0x24
8020c6c8: 97 40 02 00  	auipc	ra, 0x24
8020c6cc: e7 80 00 b5  	jalr	-0x4b0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020c6d0: 03 35 04 e7  	ld	a0, -0x190(s0)
8020c6d4: 83 35 84 e6  	ld	a1, -0x198(s0)
;             let pte: PhyPageNum = pagetable[idx];
8020c6d8: 8e 05        	slli	a1, a1, 0x3
8020c6da: 2e 95        	add	a0, a0, a1
8020c6dc: 08 61        	ld	a0, 0x0(a0)
8020c6de: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8020c6e2: 13 05 04 f3  	addi	a0, s0, -0xd0
;             if (pte).is_v(){
8020c6e6: 97 00 00 00  	auipc	ra, 0x0
8020c6ea: e7 80 40 c4  	jalr	-0x3bc(ra) <_ZN2os2vm10PhyPageNum4is_v17h59945fe29deff048E>
8020c6ee: 21 e1        	bnez	a0, 0x8020c72e <.Lpcrel_hi20>
8020c6f0: 29 a8        	j	0x8020c70a <.Lpcrel_hi19+0x10>
8020c6f2: 83 35 84 e7  	ld	a1, -0x188(s0)
8020c6f6: 03 35 84 e6  	ld	a0, -0x198(s0)

000000008020c6fa <.Lpcrel_hi19>:
;             let pte: PhyPageNum = pagetable[idx];
8020c6fa: 17 96 02 00  	auipc	a2, 0x29
8020c6fe: 13 06 e6 b8  	addi	a2, a2, -0x472
8020c702: 97 40 02 00  	auipc	ra, 0x24
8020c706: e7 80 e0 ba  	jalr	-0x452(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8020c70a: 03 35 84 e6  	ld	a0, -0x198(s0)
8020c70e: 83 35 84 e7  	ld	a1, -0x188(s0)
8020c712: 83 36 04 ec  	ld	a3, -0x140(s0)
;             let pte_temp:PhyPageNum = PhyPageNum((((pa >>12 ) <<10) | perm | PTE_V)); //pa2pte
8020c716: 03 36 84 f2  	ld	a2, -0xd8(s0)
8020c71a: 31 82        	srli	a2, a2, 0xc
8020c71c: 2a 06        	slli	a2, a2, 0xa
8020c71e: 55 8e        	or	a2, a2, a3
8020c720: 13 66 16 00  	ori	a2, a2, 0x1
8020c724: 23 34 c4 f6  	sd	a2, -0x98(s0)
;             pagetable[idx] = pte_temp;
8020c728: 63 6a b5 02  	bltu	a0, a1, 0x8020c75c <.Lpcrel_hi21+0x10>
8020c72c: 81 a8        	j	0x8020c77c <.Lpcrel_hi21+0x30>

000000008020c72e <.Lpcrel_hi20>:
;                 panic!("mappages: remap")
8020c72e: 17 95 02 00  	auipc	a0, 0x29
8020c732: 93 05 a5 bc  	addi	a1, a0, -0x436
8020c736: 13 05 84 f3  	addi	a0, s0, -0xc8
8020c73a: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
8020c73e: 05 46        	li	a2, 0x1
8020c740: 97 b0 ff ff  	auipc	ra, 0xffffb
8020c744: e7 80 40 c7  	jalr	-0x38c(ra) <ekernel+0xffcba3b4>
8020c748: 03 35 04 e6  	ld	a0, -0x1a0(s0)

000000008020c74c <.Lpcrel_hi21>:
8020c74c: 97 95 02 00  	auipc	a1, 0x29
8020c750: 93 85 c5 bb  	addi	a1, a1, -0x444
8020c754: 97 40 02 00  	auipc	ra, 0x24
8020c758: e7 80 40 a5  	jalr	-0x5ac(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
8020c75c: 83 35 84 e9  	ld	a1, -0x168(s0)
8020c760: 03 35 04 e7  	ld	a0, -0x190(s0)
8020c764: 03 36 84 e6  	ld	a2, -0x198(s0)
;             pagetable[idx] = pte_temp;
8020c768: 0e 06        	slli	a2, a2, 0x3
8020c76a: 2a 96        	add	a2, a2, a0
8020c76c: 03 35 84 f6  	ld	a0, -0x98(s0)
8020c770: 08 e2        	sd	a0, 0x0(a2)
;             if a == last{
8020c772: 03 35 04 f2  	ld	a0, -0xe0(s0)
8020c776: 63 08 b5 02  	beq	a0, a1, 0x8020c7a6 <.Lpcrel_hi22+0x22>
8020c77a: 29 a8        	j	0x8020c794 <.Lpcrel_hi22+0x10>
8020c77c: 83 35 84 e7  	ld	a1, -0x188(s0)
8020c780: 03 35 84 e6  	ld	a0, -0x198(s0)

000000008020c784 <.Lpcrel_hi22>:
;             pagetable[idx] = pte_temp;
8020c784: 17 96 02 00  	auipc	a2, 0x29
8020c788: 13 06 c6 b1  	addi	a2, a2, -0x4e4
8020c78c: 97 40 02 00  	auipc	ra, 0x24
8020c790: e7 80 40 b2  	jalr	-0x4dc(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
;             a += PGSZ;
8020c794: 83 35 04 f2  	ld	a1, -0xe0(s0)
8020c798: 05 65        	lui	a0, 0x1
8020c79a: 2e 95        	add	a0, a0, a1
8020c79c: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
8020c7a0: 63 65 b5 02  	bltu	a0, a1, 0x8020c7ca <.Lpcrel_hi23>
8020c7a4: 31 a0        	j	0x8020c7b0 <.Lpcrel_hi22+0x2c>
8020c7a6: 05 45        	li	a0, 0x1
8020c7a8: ba 70        	ld	ra, 0x1a8(sp)
8020c7aa: 1a 74        	ld	s0, 0x1a0(sp)
;     }
8020c7ac: 5d 61        	addi	sp, sp, 0x1b0
8020c7ae: 82 80        	ret
8020c7b0: 03 35 84 e5  	ld	a0, -0x1a8(s0)
;             a += PGSZ;
8020c7b4: 23 30 a4 f2  	sd	a0, -0xe0(s0)
;             pa+= PGSZ;
8020c7b8: 83 35 84 f2  	ld	a1, -0xd8(s0)
8020c7bc: 05 65        	lui	a0, 0x1
8020c7be: 2e 95        	add	a0, a0, a1
8020c7c0: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8020c7c4: 63 6b b5 02  	bltu	a0, a1, 0x8020c7fa <.Lpcrel_hi25>
8020c7c8: 31 a8        	j	0x8020c7e4 <.Lpcrel_hi24+0x12>

000000008020c7ca <.Lpcrel_hi23>:
;             a += PGSZ;
8020c7ca: 17 95 02 00  	auipc	a0, 0x29
8020c7ce: 13 05 65 99  	addi	a0, a0, -0x66a

000000008020c7d2 <.Lpcrel_hi24>:
8020c7d2: 97 95 02 00  	auipc	a1, 0x29
8020c7d6: 13 86 65 ae  	addi	a2, a1, -0x51a
8020c7da: f1 45        	li	a1, 0x1c
8020c7dc: 97 40 02 00  	auipc	ra, 0x24
8020c7e0: e7 80 c0 a3  	jalr	-0x5c4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020c7e4: 83 35 84 e9  	ld	a1, -0x168(s0)
8020c7e8: 03 35 04 e5  	ld	a0, -0x1b0(s0)
;             pa+= PGSZ;
8020c7ec: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;             if(a==last){
8020c7f0: 03 35 04 f2  	ld	a0, -0xe0(s0)
8020c7f4: e3 09 b5 fa  	beq	a0, a1, 0x8020c7a6 <.Lpcrel_hi22+0x22>
8020c7f8: fd b3        	j	0x8020c5e6 <.Lpcrel_hi13+0x14>

000000008020c7fa <.Lpcrel_hi25>:
;             pa+= PGSZ;
8020c7fa: 17 95 02 00  	auipc	a0, 0x29
8020c7fe: 13 05 65 96  	addi	a0, a0, -0x69a

000000008020c802 <.Lpcrel_hi26>:
8020c802: 97 95 02 00  	auipc	a1, 0x29
8020c806: 13 86 e5 ac  	addi	a2, a1, -0x532
8020c80a: f1 45        	li	a1, 0x1c
8020c80c: 97 40 02 00  	auipc	ra, 0x24
8020c810: e7 80 c0 a0  	jalr	-0x5f4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020c814 <_ZN2os2vm9PageTable8umappage17h6dfa0208ecae262eE>:
;     pub fn umappage(&mut self,va:usize) -> Option<usize>{
8020c814: 71 71        	addi	sp, sp, -0xb0
8020c816: 06 f5        	sd	ra, 0xa8(sp)
8020c818: 22 f1        	sd	s0, 0xa0(sp)
8020c81a: 00 19        	addi	s0, sp, 0xb0
8020c81c: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020c820: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020c824: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020c828: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020c82c: 05 45        	li	a0, 0x1
8020c82e: 1a 15        	slli	a0, a0, 0x26
;             if va >MAXVA{
8020c830: 63 62 b5 04  	bltu	a0, a1, 0x8020c874 <_ZN2os2vm9PageTable8umappage17h6dfa0208ecae262eE+0x60>
8020c834: 09 a0        	j	0x8020c836 <_ZN2os2vm9PageTable8umappage17h6dfa0208ecae262eE+0x22>
8020c836: 03 35 04 f8  	ld	a0, -0x80(s0)
;                 let mut pgtbl_arry:&mut [PhyPageNum] = self.root.get_pte_array();
8020c83a: 13 05 05 03  	addi	a0, a0, 0x30
8020c83e: 97 00 00 00  	auipc	ra, 0x0
8020c842: e7 80 e0 a4  	jalr	-0x5b2(ra) <_ZN2os2vm10PhyPageNum13get_pte_array17h9455776dfbd1eebfE>
8020c846: aa 86        	mv	a3, a0
8020c848: 03 35 04 f8  	ld	a0, -0x80(s0)
8020c84c: 2e 87        	mv	a4, a1
8020c84e: 83 35 84 f7  	ld	a1, -0x88(s0)
8020c852: 23 30 d4 fc  	sd	a3, -0x40(s0)
8020c856: 23 34 e4 fc  	sd	a4, -0x38(s0)
8020c85a: 01 46        	li	a2, 0x0
;                 if let Some(pagetable) = self.walk(va, false, pgtbl_arry){
8020c85c: 97 00 00 00  	auipc	ra, 0x0
8020c860: e7 80 e0 10  	jalr	0x10e(ra) <_ZN2os2vm9PageTable4walk17h891378441259572bE>
8020c864: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020c868: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020c86c: 03 35 84 f9  	ld	a0, -0x68(s0)
8020c870: 11 e5        	bnez	a0, 0x8020c87c <_ZN2os2vm9PageTable8umappage17h6dfa0208ecae262eE+0x68>
8020c872: 25 a8        	j	0x8020c8aa <_ZN2os2vm9PageTable8umappage17h6dfa0208ecae262eE+0x96>
8020c874: 01 45        	li	a0, 0x0
;                 return None;
8020c876: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020c87a: 5d a0        	j	0x8020c920 <.Lpcrel_hi27+0x38>
8020c87c: 03 35 84 f7  	ld	a0, -0x88(s0)
;                 if let Some(pagetable) = self.walk(va, false, pgtbl_arry){
8020c880: 03 36 84 f9  	ld	a2, -0x68(s0)
8020c884: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8020c888: 83 35 04 fa  	ld	a1, -0x60(s0)
8020c88c: 23 34 b4 f6  	sd	a1, -0x98(s0)
8020c890: 23 38 c4 fc  	sd	a2, -0x30(s0)
8020c894: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                     let idx = (va >> (12)) & 0x1ff;
8020c898: 2e 15        	slli	a0, a0, 0x2b
8020c89a: 5d 91        	srli	a0, a0, 0x37
8020c89c: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020c8a0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;                     let mut pte: PhyPageNum = pagetable[idx];
8020c8a4: 63 67 b5 00  	bltu	a0, a1, 0x8020c8b2 <_ZN2os2vm9PageTable8umappage17h6dfa0208ecae262eE+0x9e>
8020c8a8: 25 a8        	j	0x8020c8e0 <_ZN2os2vm9PageTable8umappage17h6dfa0208ecae262eE+0xcc>
8020c8aa: 01 45        	li	a0, 0x0
;                     return None;
8020c8ac: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020c8b0: 85 a8        	j	0x8020c920 <.Lpcrel_hi27+0x38>
8020c8b2: 03 35 04 f6  	ld	a0, -0xa0(s0)
8020c8b6: 83 35 04 f7  	ld	a1, -0x90(s0)
;                     let mut pte: PhyPageNum = pagetable[idx];
8020c8ba: 8e 05        	slli	a1, a1, 0x3
8020c8bc: 2e 95        	add	a0, a0, a1
8020c8be: 08 61        	ld	a0, 0x0(a0)
8020c8c0: 23 34 a4 fa  	sd	a0, -0x58(s0)
;                     let addr: usize = ((pte.0 >>10)<<12);
8020c8c4: 03 35 84 fa  	ld	a0, -0x58(s0)
8020c8c8: 29 81        	srli	a0, a0, 0xa
8020c8ca: 32 05        	slli	a0, a0, 0xc
8020c8cc: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020c8d0: 13 05 84 fa  	addi	a0, s0, -0x58
;                     if (pte).is_v(){
8020c8d4: 97 00 00 00  	auipc	ra, 0x0
8020c8d8: e7 80 60 a5  	jalr	-0x5aa(ra) <_ZN2os2vm10PhyPageNum4is_v17h59945fe29deff048E>
8020c8dc: 15 e1        	bnez	a0, 0x8020c900 <.Lpcrel_hi27+0x18>
8020c8de: 29 a8        	j	0x8020c8f8 <.Lpcrel_hi27+0x10>
8020c8e0: 83 35 84 f6  	ld	a1, -0x98(s0)
8020c8e4: 03 35 04 f7  	ld	a0, -0x90(s0)

000000008020c8e8 <.Lpcrel_hi27>:
;                     let mut pte: PhyPageNum = pagetable[idx];
8020c8e8: 17 96 02 00  	auipc	a2, 0x29
8020c8ec: 13 06 86 a3  	addi	a2, a2, -0x5c8
8020c8f0: 97 40 02 00  	auipc	ra, 0x24
8020c8f4: e7 80 00 9c  	jalr	-0x640(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8020c8f8: 01 45        	li	a0, 0x0
;                         return None;
8020c8fa: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020c8fe: 0d a0        	j	0x8020c920 <.Lpcrel_hi27+0x38>
8020c900: 03 35 04 f7  	ld	a0, -0x90(s0)
8020c904: 83 35 84 f6  	ld	a1, -0x98(s0)
;                         pte.0=pte.0&(!PTE_V);
8020c908: 03 36 84 fa  	ld	a2, -0x58(s0)
8020c90c: 79 9a        	andi	a2, a2, -0x2
8020c90e: 23 34 c4 fa  	sd	a2, -0x58(s0)
;                         pagetable[idx]=pte;
8020c912: 03 36 84 fa  	ld	a2, -0x58(s0)
8020c916: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8020c91a: 63 6b b5 00  	bltu	a0, a1, 0x8020c930 <.Lpcrel_hi27+0x48>
8020c91e: 15 a8        	j	0x8020c952 <.Lpcrel_hi27+0x6a>
;     }
8020c920: 03 35 84 f8  	ld	a0, -0x78(s0)
8020c924: 83 35 04 f9  	ld	a1, -0x70(s0)
8020c928: aa 70        	ld	ra, 0xa8(sp)
8020c92a: 0a 74        	ld	s0, 0xa0(sp)
8020c92c: 4d 61        	addi	sp, sp, 0xb0
8020c92e: 82 80        	ret
8020c930: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020c934: 83 35 04 f6  	ld	a1, -0xa0(s0)
8020c938: 03 36 04 f7  	ld	a2, -0x90(s0)
;                         pagetable[idx]=pte;
8020c93c: 0e 06        	slli	a2, a2, 0x3
8020c93e: b2 95        	add	a1, a1, a2
8020c940: 88 e1        	sd	a0, 0x0(a1)
;                         return Some(pte.0);
8020c942: 03 35 84 fa  	ld	a0, -0x58(s0)
8020c946: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020c94a: 05 45        	li	a0, 0x1
8020c94c: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020c950: c1 bf        	j	0x8020c920 <.Lpcrel_hi27+0x38>
8020c952: 83 35 84 f6  	ld	a1, -0x98(s0)
8020c956: 03 35 04 f7  	ld	a0, -0x90(s0)

000000008020c95a <.Lpcrel_hi28>:
;                         pagetable[idx]=pte;
8020c95a: 17 96 02 00  	auipc	a2, 0x29
8020c95e: 13 06 e6 9d  	addi	a2, a2, -0x622
8020c962: 97 40 02 00  	auipc	ra, 0x24
8020c966: e7 80 e0 94  	jalr	-0x6b2(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008020c96a <_ZN2os2vm9PageTable4walk17h891378441259572bE>:
;     pub fn walk(&mut self,va:usize,alloc:bool,mut pgtbl_arry:&'static mut [PhyPageNum]) -> Option<&'static mut [PhyPageNum]> {
8020c96a: 65 71        	addi	sp, sp, -0x190
8020c96c: 06 e7        	sd	ra, 0x188(sp)
8020c96e: 22 e3        	sd	s0, 0x180(sp)
8020c970: 00 0b        	addi	s0, sp, 0x190
8020c972: 23 38 b4 ea  	sd	a1, -0x150(s0)
8020c976: 23 3c a4 ea  	sd	a0, -0x148(s0)
8020c97a: b2 87        	mv	a5, a2
8020c97c: 23 30 f4 ec  	sd	a5, -0x140(s0)
8020c980: 23 34 d4 ec  	sd	a3, -0x138(s0)
8020c984: 23 38 e4 ec  	sd	a4, -0x130(s0)
8020c988: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020c98c: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020c990: a3 0b c4 fa  	sb	a2, -0x49(s0)
;         let mut pte_save: &Vec<AllocerGuard> = &self.pagetable;
8020c994: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         if(va >= MAXVA){
8020c998: 13 d5 65 02  	srli	a0, a1, 0x26
8020c99c: 21 e9        	bnez	a0, 0x8020c9ec <.Lpcrel_hi29>
8020c99e: 09 a0        	j	0x8020c9a0 <_ZN2os2vm9PageTable4walk17h891378441259572bE+0x36>
8020c9a0: 03 35 84 eb  	ld	a0, -0x148(s0)
;         let mut pagetable: &mut [PhyPageNum] = self.root.get_pte_array();
8020c9a4: 13 05 05 03  	addi	a0, a0, 0x30
8020c9a8: 97 00 00 00  	auipc	ra, 0x0
8020c9ac: e7 80 40 8e  	jalr	-0x71c(ra) <_ZN2os2vm10PhyPageNum13get_pte_array17h9455776dfbd1eebfE>
8020c9b0: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020c9b4: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8020c9b8: 01 45        	li	a0, 0x0
;         let mut temp_store :Option<PhyPageNum> = None;
8020c9ba: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8020c9be: 05 45        	li	a0, 0x1
;         for level in (1..3).rev(){
8020c9c0: 23 2c a4 f2  	sw	a0, -0xc8(s0)
8020c9c4: 0d 45        	li	a0, 0x3
8020c9c6: 23 2e a4 f2  	sw	a0, -0xc4(s0)
8020c9ca: 83 25 c4 f3  	lw	a1, -0xc4(s0)
8020c9ce: 03 25 84 f3  	lw	a0, -0xc8(s0)
8020c9d2: 97 90 ff ff  	auipc	ra, 0xffff9
8020c9d6: e7 80 20 03  	jalr	0x32(ra) <ekernel+0xffcb8a04>
8020c9da: 97 70 00 00  	auipc	ra, 0x7
8020c9de: e7 80 e0 52  	jalr	0x52e(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf0772d4eae6f38d7E>
8020c9e2: 23 20 a4 f4  	sw	a0, -0xc0(s0)
8020c9e6: 23 22 b4 f4  	sw	a1, -0xbc(s0)
8020c9ea: 05 a8        	j	0x8020ca1a <.Lpcrel_hi30+0x10>

000000008020c9ec <.Lpcrel_hi29>:
;             panic!("va to big");
8020c9ec: 17 95 02 00  	auipc	a0, 0x29
8020c9f0: 93 05 c5 a2  	addi	a1, a0, -0x5d4
8020c9f4: 13 05 84 ee  	addi	a0, s0, -0x118
8020c9f8: 23 34 a4 ea  	sd	a0, -0x158(s0)
8020c9fc: 05 46        	li	a2, 0x1
8020c9fe: 97 b0 ff ff  	auipc	ra, 0xffffb
8020ca02: e7 80 60 9b  	jalr	-0x64a(ra) <ekernel+0xffcba3b4>
8020ca06: 03 35 84 ea  	ld	a0, -0x158(s0)

000000008020ca0a <.Lpcrel_hi30>:
8020ca0a: 97 95 02 00  	auipc	a1, 0x29
8020ca0e: 93 85 e5 a1  	addi	a1, a1, -0x5e2
8020ca12: 97 30 02 00  	auipc	ra, 0x23
8020ca16: e7 80 60 79  	jalr	0x796(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
8020ca1a: 13 05 04 f4  	addi	a0, s0, -0xc0
;         for level in (1..3).rev(){
8020ca1e: 97 70 00 00  	auipc	ra, 0x7
8020ca22: e7 80 20 50  	jalr	0x502(ra) <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hefc98f336cdb275aE>
8020ca26: 23 24 a4 f4  	sw	a0, -0xb8(s0)
8020ca2a: 23 26 b4 f4  	sw	a1, -0xb4(s0)
8020ca2e: 03 25 84 f4  	lw	a0, -0xb8(s0)
8020ca32: 39 ed        	bnez	a0, 0x8020ca90 <.Lpcrel_hi31+0x42>
8020ca34: 09 a0        	j	0x8020ca36 <.Lpcrel_hi30+0x2c>
;         pgtbl_arry = temp_store.unwrap().get_pte_array();
8020ca36: 83 35 84 f2  	ld	a1, -0xd8(s0)
8020ca3a: 03 35 04 f3  	ld	a0, -0xd0(s0)
8020ca3e: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020ca42: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
8020ca46: 03 35 84 fd  	ld	a0, -0x28(s0)
8020ca4a: 11 e9        	bnez	a0, 0x8020ca5e <.Lpcrel_hi31+0x10>
8020ca4c: 09 a0        	j	0x8020ca4e <.Lpcrel_hi31>

000000008020ca4e <.Lpcrel_hi31>:
;             None => unwrap_failed(),
8020ca4e: 17 95 02 00  	auipc	a0, 0x29
8020ca52: 13 05 25 90  	addi	a0, a0, -0x6fe
8020ca56: 97 40 02 00  	auipc	ra, 0x24
8020ca5a: e7 80 20 27  	jalr	0x272(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020ca5e: 03 35 04 fe  	ld	a0, -0x20(s0)
8020ca62: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         pgtbl_arry = temp_store.unwrap().get_pte_array();
8020ca66: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020ca6a: 13 05 84 f9  	addi	a0, s0, -0x68
8020ca6e: 97 00 00 00  	auipc	ra, 0x0
8020ca72: e7 80 e0 81  	jalr	-0x7e2(ra) <_ZN2os2vm10PhyPageNum13get_pte_array17h9455776dfbd1eebfE>
8020ca76: 23 34 a4 ec  	sd	a0, -0x138(s0)
8020ca7a: 23 38 b4 ec  	sd	a1, -0x130(s0)
;         Some(pgtbl_arry)
8020ca7e: 83 35 84 ec  	ld	a1, -0x138(s0)
8020ca82: 03 35 04 ed  	ld	a0, -0x130(s0)
8020ca86: 23 3c b4 ec  	sd	a1, -0x128(s0)
8020ca8a: 23 30 a4 ee  	sd	a0, -0x120(s0)
;     } 
8020ca8e: 39 a8        	j	0x8020caac <.Lpcrel_hi31+0x5e>
;         for level in (1..3).rev(){
8020ca90: 03 26 c4 f4  	lw	a2, -0xb4(s0)
8020ca94: 23 22 c4 fc  	sw	a2, -0x3c(s0)
;                 let idx  = (va >>(12+9*level)) & 0x1ff;
8020ca98: 13 15 36 00  	slli	a0, a2, 0x3
8020ca9c: b3 05 c5 00  	add	a1, a0, a2
8020caa0: 23 30 b4 ea  	sd	a1, -0x160(s0)
8020caa4: 31 9d        	addw	a0, a0, a2
8020caa6: 63 15 b5 02  	bne	a0, a1, 0x8020cad0 <.Lpcrel_hi32>
8020caaa: 09 a8        	j	0x8020cabc <.Lpcrel_hi31+0x6e>
;     } 
8020caac: 03 35 84 ed  	ld	a0, -0x128(s0)
8020cab0: 83 35 04 ee  	ld	a1, -0x120(s0)
8020cab4: ba 60        	ld	ra, 0x188(sp)
8020cab6: 1a 64        	ld	s0, 0x180(sp)
8020cab8: 59 61        	addi	sp, sp, 0x190
8020caba: 82 80        	ret
8020cabc: 83 35 04 ea  	ld	a1, -0x160(s0)
;                 let idx  = (va >>(12+9*level)) & 0x1ff;
8020cac0: 1b 85 c5 00  	addiw	a0, a1, 0xc
8020cac4: 23 3c a4 e8  	sd	a0, -0x168(s0)
8020cac8: 81 25        	sext.w	a1, a1
8020caca: 63 49 b5 02  	blt	a0, a1, 0x8020cafc <.Lpcrel_hi34>
8020cace: 39 a8        	j	0x8020caec <.Lpcrel_hi33+0x14>

000000008020cad0 <.Lpcrel_hi32>:
8020cad0: 17 95 02 00  	auipc	a0, 0x29
8020cad4: 13 05 05 8b  	addi	a0, a0, -0x750

000000008020cad8 <.Lpcrel_hi33>:
8020cad8: 97 95 02 00  	auipc	a1, 0x29
8020cadc: 13 86 05 89  	addi	a2, a1, -0x770
8020cae0: 93 05 10 02  	li	a1, 0x21
8020cae4: 97 30 02 00  	auipc	ra, 0x23
8020cae8: e7 80 40 73  	jalr	0x734(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020caec: 03 35 84 e9  	ld	a0, -0x168(s0)
;                 let idx  = (va >>(12+9*level)) & 0x1ff;
8020caf0: 01 25        	sext.w	a0, a0
8020caf2: 93 05 00 04  	li	a1, 0x40
8020caf6: 63 60 b5 02  	bltu	a0, a1, 0x8020cb16 <.Lpcrel_hi35+0x12>
8020cafa: 89 a0        	j	0x8020cb3c <.Lpcrel_hi36>

000000008020cafc <.Lpcrel_hi34>:
8020cafc: 17 85 02 00  	auipc	a0, 0x28
8020cb00: 13 05 45 66  	addi	a0, a0, 0x664

000000008020cb04 <.Lpcrel_hi35>:
8020cb04: 97 95 02 00  	auipc	a1, 0x29
8020cb08: 13 86 45 8a  	addi	a2, a1, -0x75c
8020cb0c: f1 45        	li	a1, 0x1c
8020cb0e: 97 30 02 00  	auipc	ra, 0x23
8020cb12: e7 80 a0 70  	jalr	0x70a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020cb16: 03 35 04 eb  	ld	a0, -0x150(s0)
8020cb1a: 83 35 84 e9  	ld	a1, -0x168(s0)
;                 let idx  = (va >>(12+9*level)) & 0x1ff;
8020cb1e: 33 55 b5 00  	srl	a0, a0, a1
8020cb22: 13 75 f5 1f  	andi	a0, a0, 0x1ff
8020cb26: 23 34 a4 e8  	sd	a0, -0x178(s0)
8020cb2a: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                 let mut pte: PhyPageNum = pagetable[idx];
8020cb2e: 83 35 04 f2  	ld	a1, -0xe0(s0)
8020cb32: 23 38 b4 e8  	sd	a1, -0x170(s0)
8020cb36: 63 61 b5 02  	bltu	a0, a1, 0x8020cb58 <.Lpcrel_hi37+0x14>
8020cb3a: 81 a0        	j	0x8020cb7a <.Lpcrel_hi37+0x36>

000000008020cb3c <.Lpcrel_hi36>:
;                 let idx  = (va >>(12+9*level)) & 0x1ff;
8020cb3c: 17 85 02 00  	auipc	a0, 0x28
8020cb40: 13 05 45 72  	addi	a0, a0, 0x724

000000008020cb44 <.Lpcrel_hi37>:
8020cb44: 97 95 02 00  	auipc	a1, 0x29
8020cb48: 13 86 c5 87  	addi	a2, a1, -0x784
8020cb4c: 93 05 40 02  	li	a1, 0x24
8020cb50: 97 30 02 00  	auipc	ra, 0x23
8020cb54: e7 80 80 6c  	jalr	0x6c8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020cb58: 83 35 84 e8  	ld	a1, -0x178(s0)
;                 let mut pte: PhyPageNum = pagetable[idx];
8020cb5c: 03 35 84 f1  	ld	a0, -0xe8(s0)
8020cb60: 8e 05        	slli	a1, a1, 0x3
8020cb62: 2e 95        	add	a0, a0, a1
8020cb64: 08 61        	ld	a0, 0x0(a0)
8020cb66: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020cb6a: 13 05 04 f5  	addi	a0, s0, -0xb0
;                 if unsafe{(pte).is_v()} {
8020cb6e: 97 f0 ff ff  	auipc	ra, 0xfffff
8020cb72: e7 80 c0 7b  	jalr	0x7bc(ra) <ekernel+0xffcbf32a>
8020cb76: 1d e1        	bnez	a0, 0x8020cb9c <.Lpcrel_hi38+0x1a>
8020cb78: 29 a8        	j	0x8020cb92 <.Lpcrel_hi38+0x10>
8020cb7a: 83 35 04 e9  	ld	a1, -0x170(s0)
8020cb7e: 03 35 84 e8  	ld	a0, -0x178(s0)

000000008020cb82 <.Lpcrel_hi38>:
;                 let mut pte: PhyPageNum = pagetable[idx];
8020cb82: 17 96 02 00  	auipc	a2, 0x29
8020cb86: 13 06 66 85  	addi	a2, a2, -0x7aa
8020cb8a: 97 30 02 00  	auipc	ra, 0x23
8020cb8e: e7 80 60 72  	jalr	0x726(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8020cb92: 03 35 04 ec  	ld	a0, -0x140(s0)
;                     if !alloc {
8020cb96: 05 89        	andi	a0, a0, 0x1
8020cb98: 21 ed        	bnez	a0, 0x8020cbf0 <.Lpcrel_hi39>
8020cb9a: b9 a0        	j	0x8020cbe8 <.Lpcrel_hi38+0x66>
;                         pagetable = PhyPageNum( ((pte.0 >> 10) <<12) ).get_pte_array();//pte2pa
8020cb9c: 03 35 04 f5  	ld	a0, -0xb0(s0)
8020cba0: 29 81        	srli	a0, a0, 0xa
8020cba2: 32 05        	slli	a0, a0, 0xc
8020cba4: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020cba8: 13 05 84 f5  	addi	a0, s0, -0xa8
8020cbac: 97 f0 ff ff  	auipc	ra, 0xfffff
8020cbb0: e7 80 00 6e  	jalr	0x6e0(ra) <ekernel+0xffcbf28c>
8020cbb4: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020cbb8: 23 30 b4 f2  	sd	a1, -0xe0(s0)
;                         temp_store = Some(PhyPageNum((pte.0 >> 10) << 12));
8020cbbc: 03 35 04 f5  	ld	a0, -0xb0(s0)
8020cbc0: 29 81        	srli	a0, a0, 0xa
8020cbc2: 32 05        	slli	a0, a0, 0xc
8020cbc4: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020cbc8: 03 35 04 f7  	ld	a0, -0x90(s0)
8020cbcc: 23 34 a4 f6  	sd	a0, -0x98(s0)
8020cbd0: 05 45        	li	a0, 0x1
8020cbd2: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8020cbd6: 83 35 04 f6  	ld	a1, -0xa0(s0)
8020cbda: 03 35 84 f6  	ld	a0, -0x98(s0)
8020cbde: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8020cbe2: 23 38 a4 f2  	sd	a0, -0xd0(s0)
;                 if unsafe{(pte).is_v()} {
8020cbe6: 15 bd        	j	0x8020ca1a <.Lpcrel_hi30+0x10>
8020cbe8: 01 45        	li	a0, 0x0
;                         return None;
8020cbea: 23 3c a4 ec  	sd	a0, -0x128(s0)
;     } 
8020cbee: 7d bd        	j	0x8020caac <.Lpcrel_hi31+0x5e>

000000008020cbf0 <.Lpcrel_hi39>:
;                         let frame: AllocerGuard = FRAME_ALLOC.page_alloc();
8020cbf0: 17 15 03 00  	auipc	a0, 0x31
8020cbf4: 13 05 05 41  	addi	a0, a0, 0x410
8020cbf8: 97 70 ff ff  	auipc	ra, 0xffff7
8020cbfc: e7 80 e0 2b  	jalr	0x2be(ra) <ekernel+0xffcb6eb6>
8020cc00: aa 85        	mv	a1, a0
8020cc02: 03 35 84 e8  	ld	a0, -0x178(s0)
8020cc06: 2e 86        	mv	a2, a1
8020cc08: 23 3c c4 e6  	sd	a2, -0x188(s0)
8020cc0c: 23 38 b4 fc  	sd	a1, -0x30(s0)
;                         let page: PhyPageNum = frame.pages;
8020cc10: 23 3c b4 f6  	sd	a1, -0x88(s0)
;                         let pte_temp: PhyPageNum= PhyPageNum((((page.0) >> 12)<< 10 ) | PTE_V);//pa2pte
8020cc14: 83 35 84 f7  	ld	a1, -0x88(s0)
8020cc18: b1 81        	srli	a1, a1, 0xc
8020cc1a: aa 05        	slli	a1, a1, 0xa
8020cc1c: 85 05        	addi	a1, a1, 0x1
8020cc1e: 23 30 b4 f8  	sd	a1, -0x80(s0)
;                         pagetable[idx] = pte_temp;
8020cc22: 83 35 04 f2  	ld	a1, -0xe0(s0)
8020cc26: 23 30 b4 e8  	sd	a1, -0x180(s0)
8020cc2a: 63 70 b5 06  	bgeu	a0, a1, 0x8020cc8a <.Lpcrel_hi39+0x9a>
8020cc2e: 09 a0        	j	0x8020cc30 <.Lpcrel_hi39+0x40>
8020cc30: 83 35 84 e8  	ld	a1, -0x178(s0)
;                         pagetable[idx] = pte_temp;
8020cc34: 03 35 84 f1  	ld	a0, -0xe8(s0)
8020cc38: 8e 05        	slli	a1, a1, 0x3
8020cc3a: aa 95        	add	a1, a1, a0
8020cc3c: 03 35 04 f8  	ld	a0, -0x80(s0)
8020cc40: 88 e1        	sd	a0, 0x0(a1)
;                         temp_store = Some(page);
8020cc42: 03 35 84 f7  	ld	a0, -0x88(s0)
8020cc46: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020cc4a: 05 45        	li	a0, 0x1
8020cc4c: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020cc50: 83 35 84 f8  	ld	a1, -0x78(s0)
8020cc54: 03 35 04 f9  	ld	a0, -0x70(s0)
8020cc58: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8020cc5c: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8020cc60: 13 05 84 f7  	addi	a0, s0, -0x88
;                         pagetable = page.get_pte_array();
8020cc64: 97 f0 ff ff  	auipc	ra, 0xfffff
8020cc68: e7 80 80 62  	jalr	0x628(ra) <ekernel+0xffcbf28c>
8020cc6c: aa 86        	mv	a3, a0
8020cc6e: 03 35 84 eb  	ld	a0, -0x148(s0)
8020cc72: 2e 86        	mv	a2, a1
8020cc74: 83 35 84 e7  	ld	a1, -0x188(s0)
8020cc78: 23 3c d4 f0  	sd	a3, -0xe8(s0)
8020cc7c: 23 30 c4 f2  	sd	a2, -0xe0(s0)
;                         self.pagetable.push(frame);      
8020cc80: 97 80 00 00  	auipc	ra, 0x8
8020cc84: e7 80 e0 fa  	jalr	-0x52(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E>
8020cc88: 49 bb        	j	0x8020ca1a <.Lpcrel_hi30+0x10>
8020cc8a: 83 35 04 e8  	ld	a1, -0x180(s0)
8020cc8e: 03 35 84 e8  	ld	a0, -0x178(s0)

000000008020cc92 <.Lpcrel_hi40>:
;                         pagetable[idx] = pte_temp;
8020cc92: 17 86 02 00  	auipc	a2, 0x28
8020cc96: 13 06 e6 75  	addi	a2, a2, 0x75e
8020cc9a: 97 30 02 00  	auipc	ra, 0x23
8020cc9e: e7 80 60 61  	jalr	0x616(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008020cca2 <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>:
;     pub fn walk_addr(&mut self,va:usize) -> Option<usize>{
8020cca2: 71 71        	addi	sp, sp, -0xb0
8020cca4: 06 f5        	sd	ra, 0xa8(sp)
8020cca6: 22 f1        	sd	s0, 0xa0(sp)
8020cca8: 00 19        	addi	s0, sp, 0xb0
8020ccaa: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020ccae: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020ccb2: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020ccb6: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020ccba: 05 45        	li	a0, 0x1
8020ccbc: 1a 15        	slli	a0, a0, 0x26
;             if va >MAXVA{
8020ccbe: 63 62 b5 04  	bltu	a0, a1, 0x8020cd02 <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E+0x60>
8020ccc2: 09 a0        	j	0x8020ccc4 <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E+0x22>
8020ccc4: 03 35 04 f8  	ld	a0, -0x80(s0)
;                 let mut pgtbl_arry:&mut [PhyPageNum] = self.root.get_pte_array();
8020ccc8: 13 05 05 03  	addi	a0, a0, 0x30
8020cccc: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ccd0: e7 80 00 5c  	jalr	0x5c0(ra) <ekernel+0xffcbf28c>
8020ccd4: aa 86        	mv	a3, a0
8020ccd6: 03 35 04 f8  	ld	a0, -0x80(s0)
8020ccda: 2e 87        	mv	a4, a1
8020ccdc: 83 35 84 f7  	ld	a1, -0x88(s0)
8020cce0: 23 30 d4 fc  	sd	a3, -0x40(s0)
8020cce4: 23 34 e4 fc  	sd	a4, -0x38(s0)
8020cce8: 01 46        	li	a2, 0x0
;                 if let Some(pagetable) = self.walk(va, false, pgtbl_arry){
8020ccea: 97 00 00 00  	auipc	ra, 0x0
8020ccee: e7 80 00 c8  	jalr	-0x380(ra) <_ZN2os2vm9PageTable4walk17h891378441259572bE>
8020ccf2: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020ccf6: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020ccfa: 03 35 84 f9  	ld	a0, -0x68(s0)
8020ccfe: 11 e5        	bnez	a0, 0x8020cd0a <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E+0x68>
8020cd00: 25 a8        	j	0x8020cd38 <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E+0x96>
8020cd02: 01 45        	li	a0, 0x0
;                 return None;
8020cd04: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020cd08: 69 a8        	j	0x8020cda2 <.Lpcrel_hi41+0x28>
8020cd0a: 03 35 84 f7  	ld	a0, -0x88(s0)
;                 if let Some(pagetable) = self.walk(va, false, pgtbl_arry){
8020cd0e: 03 36 84 f9  	ld	a2, -0x68(s0)
8020cd12: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8020cd16: 83 35 04 fa  	ld	a1, -0x60(s0)
8020cd1a: 23 34 b4 f6  	sd	a1, -0x98(s0)
8020cd1e: 23 38 c4 fc  	sd	a2, -0x30(s0)
8020cd22: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                     let idx = (va >> (12)) & 0x1ff;
8020cd26: 2e 15        	slli	a0, a0, 0x2b
8020cd28: 5d 91        	srli	a0, a0, 0x37
8020cd2a: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020cd2e: 23 30 a4 fe  	sd	a0, -0x20(s0)
;                     let pte: PhyPageNum = pagetable[idx];
8020cd32: 63 67 b5 00  	bltu	a0, a1, 0x8020cd40 <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E+0x9e>
8020cd36: 35 a8        	j	0x8020cd72 <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E+0xd0>
8020cd38: 01 45        	li	a0, 0x0
;                     return None;
8020cd3a: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020cd3e: 95 a0        	j	0x8020cda2 <.Lpcrel_hi41+0x28>
8020cd40: 03 35 04 f6  	ld	a0, -0xa0(s0)
8020cd44: 83 35 04 f7  	ld	a1, -0x90(s0)
;                     let pte: PhyPageNum = pagetable[idx];
8020cd48: 8e 05        	slli	a1, a1, 0x3
8020cd4a: 2e 95        	add	a0, a0, a1
8020cd4c: 08 61        	ld	a0, 0x0(a0)
8020cd4e: 23 34 a4 fa  	sd	a0, -0x58(s0)
;                     let addr: usize = ((pte.0 >>10)<<12);
8020cd52: 03 35 84 fa  	ld	a0, -0x58(s0)
8020cd56: 29 81        	srli	a0, a0, 0xa
8020cd58: 32 05        	slli	a0, a0, 0xc
8020cd5a: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020cd5e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020cd62: 13 05 84 fa  	addi	a0, s0, -0x58
;                     if (pte).is_v(){
8020cd66: 97 f0 ff ff  	auipc	ra, 0xfffff
8020cd6a: e7 80 40 5c  	jalr	0x5c4(ra) <ekernel+0xffcbf32a>
8020cd6e: 15 e1        	bnez	a0, 0x8020cd92 <.Lpcrel_hi41+0x18>
8020cd70: 29 a8        	j	0x8020cd8a <.Lpcrel_hi41+0x10>
8020cd72: 83 35 84 f6  	ld	a1, -0x98(s0)
8020cd76: 03 35 04 f7  	ld	a0, -0x90(s0)

000000008020cd7a <.Lpcrel_hi41>:
;                     let pte: PhyPageNum = pagetable[idx];
8020cd7a: 17 86 02 00  	auipc	a2, 0x28
8020cd7e: 13 06 66 6c  	addi	a2, a2, 0x6c6
8020cd82: 97 30 02 00  	auipc	ra, 0x23
8020cd86: e7 80 e0 52  	jalr	0x52e(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8020cd8a: 01 45        	li	a0, 0x0
;                         return None;
8020cd8c: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020cd90: 09 a8        	j	0x8020cda2 <.Lpcrel_hi41+0x28>
8020cd92: 03 35 84 f5  	ld	a0, -0xa8(s0)
;                         return Some(addr);
8020cd96: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020cd9a: 05 45        	li	a0, 0x1
8020cd9c: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020cda0: 09 a0        	j	0x8020cda2 <.Lpcrel_hi41+0x28>
;     }
8020cda2: 03 35 84 f8  	ld	a0, -0x78(s0)
8020cda6: 83 35 04 f9  	ld	a1, -0x70(s0)
8020cdaa: aa 70        	ld	ra, 0xa8(sp)
8020cdac: 0a 74        	ld	s0, 0xa0(sp)
8020cdae: 4d 61        	addi	sp, sp, 0xb0
8020cdb0: 82 80        	ret

000000008020cdb2 <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE>:
;     pub fn walk_perm(&mut self,va:usize) -> Option<usize>{
8020cdb2: 35 71        	addi	sp, sp, -0xa0
8020cdb4: 06 ed        	sd	ra, 0x98(sp)
8020cdb6: 22 e9        	sd	s0, 0x90(sp)
8020cdb8: 00 11        	addi	s0, sp, 0xa0
8020cdba: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020cdbe: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020cdc2: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020cdc6: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020cdca: 05 45        	li	a0, 0x1
8020cdcc: 1a 15        	slli	a0, a0, 0x26
;         if va >MAXVA{
8020cdce: 63 62 b5 04  	bltu	a0, a1, 0x8020ce12 <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE+0x60>
8020cdd2: 09 a0        	j	0x8020cdd4 <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE+0x22>
8020cdd4: 03 35 84 f8  	ld	a0, -0x78(s0)
;             let mut pgtbl_arry:&mut [PhyPageNum] = self.root.get_pte_array();
8020cdd8: 13 05 05 03  	addi	a0, a0, 0x30
8020cddc: 97 f0 ff ff  	auipc	ra, 0xfffff
8020cde0: e7 80 00 4b  	jalr	0x4b0(ra) <ekernel+0xffcbf28c>
8020cde4: aa 86        	mv	a3, a0
8020cde6: 03 35 84 f8  	ld	a0, -0x78(s0)
8020cdea: 2e 87        	mv	a4, a1
8020cdec: 83 35 04 f8  	ld	a1, -0x80(s0)
8020cdf0: 23 34 d4 fc  	sd	a3, -0x38(s0)
8020cdf4: 23 38 e4 fc  	sd	a4, -0x30(s0)
8020cdf8: 01 46        	li	a2, 0x0
;             if let Some(pagetable) = self.walk(va, false, pgtbl_arry){
8020cdfa: 97 00 00 00  	auipc	ra, 0x0
8020cdfe: e7 80 00 b7  	jalr	-0x490(ra) <_ZN2os2vm9PageTable4walk17h891378441259572bE>
8020ce02: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020ce06: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020ce0a: 03 35 04 fa  	ld	a0, -0x60(s0)
8020ce0e: 11 e5        	bnez	a0, 0x8020ce1a <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE+0x68>
8020ce10: 25 a8        	j	0x8020ce48 <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE+0x96>
8020ce12: 01 45        	li	a0, 0x0
;             return None;
8020ce14: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020ce18: 79 a0        	j	0x8020cea6 <.Lpcrel_hi42+0x2c>
8020ce1a: 03 35 04 f8  	ld	a0, -0x80(s0)
;             if let Some(pagetable) = self.walk(va, false, pgtbl_arry){
8020ce1e: 03 36 04 fa  	ld	a2, -0x60(s0)
8020ce22: 23 34 c4 f6  	sd	a2, -0x98(s0)
8020ce26: 83 35 84 fa  	ld	a1, -0x58(s0)
8020ce2a: 23 38 b4 f6  	sd	a1, -0x90(s0)
8020ce2e: 23 3c c4 fc  	sd	a2, -0x28(s0)
8020ce32: 23 30 b4 fe  	sd	a1, -0x20(s0)
;                 let idx = (va >> (12)) & 0x1ff;
8020ce36: 2e 15        	slli	a0, a0, 0x2b
8020ce38: 5d 91        	srli	a0, a0, 0x37
8020ce3a: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020ce3e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 let pte: PhyPageNum = pagetable[idx];
8020ce42: 63 67 b5 00  	bltu	a0, a1, 0x8020ce50 <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE+0x9e>
8020ce46: 35 a0        	j	0x8020ce72 <_ZN2os2vm9PageTable9walk_perm17h62a42c0819e7ebffE+0xc0>
8020ce48: 01 45        	li	a0, 0x0
;                 return None;
8020ce4a: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020ce4e: a1 a8        	j	0x8020cea6 <.Lpcrel_hi42+0x2c>
8020ce50: 03 35 84 f6  	ld	a0, -0x98(s0)
8020ce54: 83 35 84 f7  	ld	a1, -0x88(s0)
;                 let pte: PhyPageNum = pagetable[idx];
8020ce58: 8e 05        	slli	a1, a1, 0x3
8020ce5a: 2e 95        	add	a0, a0, a1
8020ce5c: 08 61        	ld	a0, 0x0(a0)
8020ce5e: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020ce62: 13 05 04 fb  	addi	a0, s0, -0x50
;                 if (pte).is_v(){
8020ce66: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ce6a: e7 80 40 4c  	jalr	0x4c4(ra) <ekernel+0xffcbf32a>
8020ce6e: 15 e1        	bnez	a0, 0x8020ce92 <.Lpcrel_hi42+0x18>
8020ce70: 29 a8        	j	0x8020ce8a <.Lpcrel_hi42+0x10>
8020ce72: 83 35 04 f7  	ld	a1, -0x90(s0)
8020ce76: 03 35 84 f7  	ld	a0, -0x88(s0)

000000008020ce7a <.Lpcrel_hi42>:
;                 let pte: PhyPageNum = pagetable[idx];
8020ce7a: 17 86 02 00  	auipc	a2, 0x28
8020ce7e: 13 06 e6 5d  	addi	a2, a2, 0x5de
8020ce82: 97 30 02 00  	auipc	ra, 0x23
8020ce86: e7 80 e0 42  	jalr	0x42e(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8020ce8a: 01 45        	li	a0, 0x0
;                     return None;
8020ce8c: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020ce90: 19 a8        	j	0x8020cea6 <.Lpcrel_hi42+0x2c>
;                     return Some(pte.0 & 1023);
8020ce92: 03 35 04 fb  	ld	a0, -0x50(s0)
8020ce96: 13 75 f5 3f  	andi	a0, a0, 0x3ff
8020ce9a: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020ce9e: 05 45        	li	a0, 0x1
8020cea0: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020cea4: 09 a0        	j	0x8020cea6 <.Lpcrel_hi42+0x2c>
;     }
8020cea6: 03 35 04 f9  	ld	a0, -0x70(s0)
8020ceaa: 83 35 84 f9  	ld	a1, -0x68(s0)
8020ceae: ea 60        	ld	ra, 0x98(sp)
8020ceb0: 4a 64        	ld	s0, 0x90(sp)
8020ceb2: 0d 61        	addi	sp, sp, 0xa0
8020ceb4: 82 80        	ret

000000008020ceb6 <_ZN2os2vm9PageTable7as_satp17hf9fd91e9244d86d8E>:
;     pub fn as_satp(&mut self) -> usize{
8020ceb6: 79 71        	addi	sp, sp, -0x30
8020ceb8: 06 f4        	sd	ra, 0x28(sp)
8020ceba: 22 f0        	sd	s0, 0x20(sp)
8020cebc: 00 18        	addi	s0, sp, 0x30
8020cebe: a1 45        	li	a1, 0x8
;         let sv_39:usize =8;
8020cec0: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020cec4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let addr:usize = self.root.0;
8020cec8: 08 79        	ld	a0, 0x30(a0)
8020ceca: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020cece: 81 45        	li	a1, 0x0
;         let mut bits:usize = 0;
8020ced0: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         bits = ( sv_39 << 60) | (addr >> 12);
8020ced4: 31 81        	srli	a0, a0, 0xc
8020ced6: fd 55        	li	a1, -0x1
8020ced8: fe 15        	slli	a1, a1, 0x3f
8020ceda: 4d 8d        	or	a0, a0, a1
8020cedc: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         bits
8020cee0: 03 35 84 fd  	ld	a0, -0x28(s0)
8020cee4: a2 70        	ld	ra, 0x28(sp)
8020cee6: 02 74        	ld	s0, 0x20(sp)
;     }
8020cee8: 45 61        	addi	sp, sp, 0x30
8020ceea: 82 80        	ret

000000008020ceec <_ZN2os2vm9PageTable15map_proc_stacks17h604d0f390a773662E>:
;     pub fn map_proc_stacks(&mut self){
8020ceec: 11 71        	addi	sp, sp, -0x100
8020ceee: 86 fd        	sd	ra, 0xf8(sp)
8020cef0: a2 f9        	sd	s0, 0xf0(sp)
8020cef2: 00 02        	addi	s0, sp, 0x100
8020cef4: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020cef8: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020cefc: 01 45        	li	a0, 0x0
;         for i in 0..NPROC{
8020cefe: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020cf02: 13 05 00 02  	li	a0, 0x20
8020cf06: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020cf0a: 03 35 84 f9  	ld	a0, -0x68(s0)
8020cf0e: 83 35 04 fa  	ld	a1, -0x60(s0)
8020cf12: 97 f0 01 00  	auipc	ra, 0x1f
8020cf16: e7 80 40 9a  	jalr	-0x65c(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb7ed3f92a62e2c8bE>
8020cf1a: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020cf1e: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020cf22: 09 a0        	j	0x8020cf24 <_ZN2os2vm9PageTable15map_proc_stacks17h604d0f390a773662E+0x38>
8020cf24: 13 05 84 fa  	addi	a0, s0, -0x58
;         for i in 0..NPROC{
8020cf28: 97 e0 01 00  	auipc	ra, 0x1e
8020cf2c: e7 80 e0 6c  	jalr	0x6ce(ra) <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h58a3e79438385681E>
8020cf30: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020cf34: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020cf38: 03 35 84 fb  	ld	a0, -0x48(s0)
8020cf3c: 11 e5        	bnez	a0, 0x8020cf48 <_ZN2os2vm9PageTable15map_proc_stacks17h604d0f390a773662E+0x5c>
8020cf3e: 09 a0        	j	0x8020cf40 <_ZN2os2vm9PageTable15map_proc_stacks17h604d0f390a773662E+0x54>
8020cf40: ee 70        	ld	ra, 0xf8(sp)
8020cf42: 4e 74        	ld	s0, 0xf0(sp)
;     }
8020cf44: 11 61        	addi	sp, sp, 0x100
8020cf46: 82 80        	ret
;         for i in 0..NPROC{
8020cf48: 03 35 04 fc  	ld	a0, -0x40(s0)
8020cf4c: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020cf50: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             let mut va:usize = kstack!(i);
8020cf54: 05 05        	addi	a0, a0, 0x1
8020cf56: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020cf5a: 01 c9        	beqz	a0, 0x8020cf6a <.Lpcrel_hi43>
8020cf5c: 09 a0        	j	0x8020cf5e <_ZN2os2vm9PageTable15map_proc_stacks17h604d0f390a773662E+0x72>
8020cf5e: 11 45        	li	a0, 0x4
8020cf60: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020cf64: 01 45        	li	a0, 0x0
;             let mut va:usize = kstack!(i);
8020cf66: 1d e9        	bnez	a0, 0x8020cf9c <.Lpcrel_hi45>
8020cf68: 31 a8        	j	0x8020cf84 <.Lpcrel_hi44+0x12>

000000008020cf6a <.Lpcrel_hi43>:
8020cf6a: 17 85 02 00  	auipc	a0, 0x28
8020cf6e: 13 05 65 1f  	addi	a0, a0, 0x1f6

000000008020cf72 <.Lpcrel_hi44>:
8020cf72: 97 85 02 00  	auipc	a1, 0x28
8020cf76: 13 86 e5 4f  	addi	a2, a1, 0x4fe
8020cf7a: f1 45        	li	a1, 0x1c
8020cf7c: 97 30 02 00  	auipc	ra, 0x23
8020cf80: e7 80 c0 29  	jalr	0x29c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020cf84: 03 35 84 f8  	ld	a0, -0x78(s0)
8020cf88: 83 35 84 f7  	ld	a1, -0x88(s0)
;             let mut va:usize = kstack!(i);
8020cf8c: 33 06 b5 02  	mul	a2, a0, a1
8020cf90: 23 38 c4 f6  	sd	a2, -0x90(s0)
8020cf94: 33 35 b5 02  	mulhu	a0, a0, a1
8020cf98: 1d e9        	bnez	a0, 0x8020cfce <.Lpcrel_hi47>
8020cf9a: 31 a8        	j	0x8020cfb6 <.Lpcrel_hi46+0x12>

000000008020cf9c <.Lpcrel_hi45>:
8020cf9c: 17 85 02 00  	auipc	a0, 0x28
8020cfa0: 13 05 45 1c  	addi	a0, a0, 0x1c4

000000008020cfa4 <.Lpcrel_hi46>:
8020cfa4: 97 85 02 00  	auipc	a1, 0x28
8020cfa8: 13 86 c5 4c  	addi	a2, a1, 0x4cc
8020cfac: f1 45        	li	a1, 0x1c
8020cfae: 97 30 02 00  	auipc	ra, 0x23
8020cfb2: e7 80 a0 26  	jalr	0x26a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020cfb6: 83 35 04 f7  	ld	a1, -0x90(s0)
;             let mut va:usize = kstack!(i);
8020cfba: 13 95 c5 00  	slli	a0, a1, 0xc
8020cfbe: 23 34 a4 f6  	sd	a0, -0x98(s0)
8020cfc2: 13 95 c5 00  	slli	a0, a1, 0xc
8020cfc6: 31 81        	srli	a0, a0, 0xc
8020cfc8: 63 1e b5 02  	bne	a0, a1, 0x8020d004 <.Lpcrel_hi49>
8020cfcc: 39 a8        	j	0x8020cfea <.Lpcrel_hi48+0x14>

000000008020cfce <.Lpcrel_hi47>:
8020cfce: 17 85 02 00  	auipc	a0, 0x28
8020cfd2: 13 05 25 3b  	addi	a0, a0, 0x3b2

000000008020cfd6 <.Lpcrel_hi48>:
8020cfd6: 97 85 02 00  	auipc	a1, 0x28
8020cfda: 13 86 a5 49  	addi	a2, a1, 0x49a
8020cfde: 93 05 10 02  	li	a1, 0x21
8020cfe2: 97 30 02 00  	auipc	ra, 0x23
8020cfe6: e7 80 60 23  	jalr	0x236(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020cfea: 83 35 84 f6  	ld	a1, -0x98(s0)
8020cfee: 37 05 00 02  	lui	a0, 0x2000
8020cff2: 7d 35        	addiw	a0, a0, -0x1
8020cff4: 36 05        	slli	a0, a0, 0xd
;             let mut va:usize = kstack!(i);
8020cff6: 33 06 b5 40  	sub	a2, a0, a1
8020cffa: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8020cffe: 63 66 b5 02  	bltu	a0, a1, 0x8020d02a <.Lpcrel_hi51>
8020d002: 39 a8        	j	0x8020d020 <.Lpcrel_hi50+0x14>

000000008020d004 <.Lpcrel_hi49>:
8020d004: 17 85 02 00  	auipc	a0, 0x28
8020d008: 13 05 c5 37  	addi	a0, a0, 0x37c

000000008020d00c <.Lpcrel_hi50>:
8020d00c: 97 85 02 00  	auipc	a1, 0x28
8020d010: 13 86 45 46  	addi	a2, a1, 0x464
8020d014: 93 05 10 02  	li	a1, 0x21
8020d018: 97 30 02 00  	auipc	ra, 0x23
8020d01c: e7 80 00 20  	jalr	0x200(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d020: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             let mut va:usize = kstack!(i);
8020d024: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             loop {
8020d028: 39 a8        	j	0x8020d046 <.Lpcrel_hi53>

000000008020d02a <.Lpcrel_hi51>:
;             let mut va:usize = kstack!(i);
8020d02a: 17 85 02 00  	auipc	a0, 0x28
8020d02e: 13 05 65 17  	addi	a0, a0, 0x176

000000008020d032 <.Lpcrel_hi52>:
8020d032: 97 85 02 00  	auipc	a1, 0x28
8020d036: 13 86 e5 43  	addi	a2, a1, 0x43e
8020d03a: 93 05 10 02  	li	a1, 0x21
8020d03e: 97 30 02 00  	auipc	ra, 0x23
8020d042: e7 80 a0 1d  	jalr	0x1da(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020d046 <.Lpcrel_hi53>:
;                 let gurd = FRAME_ALLOC.page_alloc();
8020d046: 17 15 03 00  	auipc	a0, 0x31
8020d04a: 13 05 a5 fb  	addi	a0, a0, -0x46
8020d04e: 97 70 ff ff  	auipc	ra, 0xffff7
8020d052: e7 80 80 e6  	jalr	-0x198(ra) <ekernel+0xffcb6eb6>
8020d056: aa 85        	mv	a1, a0
8020d058: 03 35 04 f9  	ld	a0, -0x70(s0)
8020d05c: 2e 86        	mv	a2, a1
8020d05e: 23 34 c4 f4  	sd	a2, -0xb8(s0)
8020d062: 23 30 b4 fe  	sd	a1, -0x20(s0)
;                 let pa = gurd.pages.0;
8020d066: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 self.save_page(gurd);
8020d06a: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d06e: e7 80 a0 41  	jalr	0x41a(ra) <ekernel+0xffcbf484>
8020d072: 03 35 04 f8  	ld	a0, -0x80(s0)
;                 if va >= kstack!(i)+ KERNEL_STACK_SIZE{
8020d076: 83 35 84 fc  	ld	a1, -0x38(s0)
8020d07a: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8020d07e: 05 05        	addi	a0, a0, 0x1
8020d080: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020d084: 01 c9        	beqz	a0, 0x8020d094 <.Lpcrel_hi54>
8020d086: 09 a0        	j	0x8020d088 <.Lpcrel_hi53+0x42>
8020d088: 11 45        	li	a0, 0x4
8020d08a: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8020d08e: 01 45        	li	a0, 0x0
;                 if va >= kstack!(i)+ KERNEL_STACK_SIZE{
8020d090: 1d e9        	bnez	a0, 0x8020d0c6 <.Lpcrel_hi56>
8020d092: 31 a8        	j	0x8020d0ae <.Lpcrel_hi55+0x12>

000000008020d094 <.Lpcrel_hi54>:
8020d094: 17 85 02 00  	auipc	a0, 0x28
8020d098: 13 05 c5 0c  	addi	a0, a0, 0xcc

000000008020d09c <.Lpcrel_hi55>:
8020d09c: 97 85 02 00  	auipc	a1, 0x28
8020d0a0: 13 86 c5 3e  	addi	a2, a1, 0x3ec
8020d0a4: f1 45        	li	a1, 0x1c
8020d0a6: 97 30 02 00  	auipc	ra, 0x23
8020d0aa: e7 80 20 17  	jalr	0x172(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d0ae: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020d0b2: 83 35 04 f4  	ld	a1, -0xc0(s0)
;                 if va >= kstack!(i)+ KERNEL_STACK_SIZE{
8020d0b6: 33 06 b5 02  	mul	a2, a0, a1
8020d0ba: 23 3c c4 f2  	sd	a2, -0xc8(s0)
8020d0be: 33 35 b5 02  	mulhu	a0, a0, a1
8020d0c2: 1d e9        	bnez	a0, 0x8020d0f8 <.Lpcrel_hi58>
8020d0c4: 31 a8        	j	0x8020d0e0 <.Lpcrel_hi57+0x12>

000000008020d0c6 <.Lpcrel_hi56>:
8020d0c6: 17 85 02 00  	auipc	a0, 0x28
8020d0ca: 13 05 a5 09  	addi	a0, a0, 0x9a

000000008020d0ce <.Lpcrel_hi57>:
8020d0ce: 97 85 02 00  	auipc	a1, 0x28
8020d0d2: 13 86 a5 3b  	addi	a2, a1, 0x3ba
8020d0d6: f1 45        	li	a1, 0x1c
8020d0d8: 97 30 02 00  	auipc	ra, 0x23
8020d0dc: e7 80 00 14  	jalr	0x140(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d0e0: 83 35 84 f3  	ld	a1, -0xc8(s0)
;                 if va >= kstack!(i)+ KERNEL_STACK_SIZE{
8020d0e4: 13 95 c5 00  	slli	a0, a1, 0xc
8020d0e8: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8020d0ec: 13 95 c5 00  	slli	a0, a1, 0xc
8020d0f0: 31 81        	srli	a0, a0, 0xc
8020d0f2: 63 1e b5 02  	bne	a0, a1, 0x8020d12e <.Lpcrel_hi60>
8020d0f6: 39 a8        	j	0x8020d114 <.Lpcrel_hi59+0x14>

000000008020d0f8 <.Lpcrel_hi58>:
8020d0f8: 17 85 02 00  	auipc	a0, 0x28
8020d0fc: 13 05 85 28  	addi	a0, a0, 0x288

000000008020d100 <.Lpcrel_hi59>:
8020d100: 97 85 02 00  	auipc	a1, 0x28
8020d104: 13 86 85 38  	addi	a2, a1, 0x388
8020d108: 93 05 10 02  	li	a1, 0x21
8020d10c: 97 30 02 00  	auipc	ra, 0x23
8020d110: e7 80 c0 10  	jalr	0x10c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d114: 83 35 04 f3  	ld	a1, -0xd0(s0)
8020d118: 37 05 00 02  	lui	a0, 0x2000
8020d11c: 7d 35        	addiw	a0, a0, -0x1
8020d11e: 36 05        	slli	a0, a0, 0xd
;                 if va >= kstack!(i)+ KERNEL_STACK_SIZE{
8020d120: 33 06 b5 40  	sub	a2, a0, a1
8020d124: 23 34 c4 f2  	sd	a2, -0xd8(s0)
8020d128: 63 6a b5 02  	bltu	a0, a1, 0x8020d15c <.Lpcrel_hi62>
8020d12c: 39 a8        	j	0x8020d14a <.Lpcrel_hi61+0x14>

000000008020d12e <.Lpcrel_hi60>:
8020d12e: 17 85 02 00  	auipc	a0, 0x28
8020d132: 13 05 25 25  	addi	a0, a0, 0x252

000000008020d136 <.Lpcrel_hi61>:
8020d136: 97 85 02 00  	auipc	a1, 0x28
8020d13a: 13 86 25 35  	addi	a2, a1, 0x352
8020d13e: 93 05 10 02  	li	a1, 0x21
8020d142: 97 30 02 00  	auipc	ra, 0x23
8020d146: e7 80 60 0d  	jalr	0xd6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d14a: 83 35 84 f2  	ld	a1, -0xd8(s0)
8020d14e: 0d 65        	lui	a0, 0x3
;                 if va >= kstack!(i)+ KERNEL_STACK_SIZE{
8020d150: 2e 95        	add	a0, a0, a1
8020d152: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8020d156: 63 68 b5 02  	bltu	a0, a1, 0x8020d186 <.Lpcrel_hi64>
8020d15a: 39 a8        	j	0x8020d178 <.Lpcrel_hi63+0x14>

000000008020d15c <.Lpcrel_hi62>:
8020d15c: 17 85 02 00  	auipc	a0, 0x28
8020d160: 13 05 45 04  	addi	a0, a0, 0x44

000000008020d164 <.Lpcrel_hi63>:
8020d164: 97 85 02 00  	auipc	a1, 0x28
8020d168: 13 86 45 32  	addi	a2, a1, 0x324
8020d16c: 93 05 10 02  	li	a1, 0x21
8020d170: 97 30 02 00  	auipc	ra, 0x23
8020d174: e7 80 80 0a  	jalr	0xa8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d178: 03 35 04 f5  	ld	a0, -0xb0(s0)
8020d17c: 83 35 04 f2  	ld	a1, -0xe0(s0)
;                 if va >= kstack!(i)+ KERNEL_STACK_SIZE{
8020d180: e3 72 b5 da  	bgeu	a0, a1, 0x8020cf24 <_ZN2os2vm9PageTable15map_proc_stacks17h604d0f390a773662E+0x38>
8020d184: 31 a8        	j	0x8020d1a0 <.Lpcrel_hi65+0x12>

000000008020d186 <.Lpcrel_hi64>:
8020d186: 17 85 02 00  	auipc	a0, 0x28
8020d18a: 13 05 a5 fd  	addi	a0, a0, -0x26

000000008020d18e <.Lpcrel_hi65>:
8020d18e: 97 85 02 00  	auipc	a1, 0x28
8020d192: 13 86 a5 2f  	addi	a2, a1, 0x2fa
8020d196: f1 45        	li	a1, 0x1c
8020d198: 97 30 02 00  	auipc	ra, 0x23
8020d19c: e7 80 00 08  	jalr	0x80(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;                     va.into(), 
8020d1a0: 03 35 84 fc  	ld	a0, -0x38(s0)

000000008020d1a4 <.Lpcrel_hi66>:
8020d1a4: 97 85 02 00  	auipc	a1, 0x28
8020d1a8: 93 85 c5 2f  	addi	a1, a1, 0x2fc
8020d1ac: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d1b0: e7 80 a0 d4  	jalr	-0x2b6(ra) <ekernel+0xffcbeef6>
8020d1b4: aa 85        	mv	a1, a0
8020d1b6: 03 35 84 f4  	ld	a0, -0xb8(s0)
8020d1ba: 23 34 b4 f0  	sd	a1, -0xf8(s0)

000000008020d1be <.Lpcrel_hi67>:
;                     pa.into(), 
8020d1be: 97 85 02 00  	auipc	a1, 0x28
8020d1c2: 93 85 a5 2f  	addi	a1, a1, 0x2fa
8020d1c6: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d1ca: e7 80 40 d1  	jalr	-0x2ec(ra) <ekernel+0xffcbeeda>
8020d1ce: 83 35 84 f0  	ld	a1, -0xf8(s0)
8020d1d2: 2a 86        	mv	a2, a0
8020d1d4: 03 35 04 f9  	ld	a0, -0x70(s0)
8020d1d8: 85 66        	lui	a3, 0x1
8020d1da: 23 38 d4 f0  	sd	a3, -0xf0(s0)
8020d1de: 39 47        	li	a4, 0xe
;                 self.mappages(
8020d1e0: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d1e4: e7 80 40 2c  	jalr	0x2c4(ra) <ekernel+0xffcbf4a4>
8020d1e8: 03 35 04 f1  	ld	a0, -0xf0(s0)
;                 va += PGSZ;
8020d1ec: 83 35 84 fc  	ld	a1, -0x38(s0)
8020d1f0: 2e 95        	add	a0, a0, a1
8020d1f2: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020d1f6: 63 68 b5 00  	bltu	a0, a1, 0x8020d206 <.Lpcrel_hi68>
8020d1fa: 09 a0        	j	0x8020d1fc <.Lpcrel_hi67+0x3e>
8020d1fc: 03 35 84 f1  	ld	a0, -0xe8(s0)
;                 va += PGSZ;
8020d200: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             loop {
8020d204: 89 b5        	j	0x8020d046 <.Lpcrel_hi53>

000000008020d206 <.Lpcrel_hi68>:
;                 va += PGSZ;
8020d206: 17 85 02 00  	auipc	a0, 0x28
8020d20a: 13 05 a5 f5  	addi	a0, a0, -0xa6

000000008020d20e <.Lpcrel_hi69>:
8020d20e: 97 85 02 00  	auipc	a1, 0x28
8020d212: 13 86 25 2c  	addi	a2, a1, 0x2c2
8020d216: f1 45        	li	a1, 0x1c
8020d218: 97 30 02 00  	auipc	ra, 0x23
8020d21c: e7 80 00 00  	jalr	ra <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020d220 <_ZN2os2vm9PageTable14translated_str17hd3ebdd22cc59e034E>:
;     pub fn translated_str(&mut self,ptr: *const u8) -> String{
8020d220: 71 71        	addi	sp, sp, -0xb0
8020d222: 06 f5        	sd	ra, 0xa8(sp)
8020d224: 22 f1        	sd	s0, 0xa0(sp)
8020d226: 00 19        	addi	s0, sp, 0xb0
8020d228: 23 30 c4 f8  	sd	a2, -0x80(s0)
8020d22c: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020d230: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020d234: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020d238: 23 30 c4 fc  	sd	a2, -0x40(s0)
8020d23c: 13 05 04 f9  	addi	a0, s0, -0x70
;         let mut string = String::new();
8020d240: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d244: e7 80 c0 d2  	jalr	-0x2d4(ra) <ekernel+0xffcbef6c>
8020d248: 03 35 84 f7  	ld	a0, -0x88(s0)
8020d24c: 83 35 04 f8  	ld	a1, -0x80(s0)
;         let mut va = ptr as usize;
8020d250: 2e 86        	mv	a2, a1
8020d252: 23 34 c4 f8  	sd	a2, -0x78(s0)
8020d256: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         let mut pa = self.walk_addr(va).unwrap() + va % PGSZ;
8020d25a: 97 00 00 00  	auipc	ra, 0x0
8020d25e: e7 80 80 a4  	jalr	-0x5b8(ra) <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>
8020d262: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020d266: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
8020d26a: 03 35 84 fd  	ld	a0, -0x28(s0)
8020d26e: 11 e9        	bnez	a0, 0x8020d282 <.Lpcrel_hi70+0x10>
8020d270: 09 a0        	j	0x8020d272 <.Lpcrel_hi70>

000000008020d272 <.Lpcrel_hi70>:
;             None => unwrap_failed(),
8020d272: 17 85 02 00  	auipc	a0, 0x28
8020d276: 13 05 65 27  	addi	a0, a0, 0x276
8020d27a: 97 40 02 00  	auipc	ra, 0x24
8020d27e: e7 80 e0 a4  	jalr	-0x5b2(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
8020d282: 03 35 84 f8  	ld	a0, -0x78(s0)
;             Some(val) => val,
8020d286: 83 35 04 fe  	ld	a1, -0x20(s0)
8020d28a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         let mut pa = self.walk_addr(va).unwrap() + va % PGSZ;
8020d28e: 52 15        	slli	a0, a0, 0x34
8020d290: 51 91        	srli	a0, a0, 0x34
8020d292: 2e 95        	add	a0, a0, a1
8020d294: 23 34 a4 f6  	sd	a0, -0x98(s0)
8020d298: 63 68 b5 00  	bltu	a0, a1, 0x8020d2a8 <.Lpcrel_hi71>
8020d29c: 09 a0        	j	0x8020d29e <.Lpcrel_hi70+0x2c>
8020d29e: 03 35 84 f6  	ld	a0, -0x98(s0)
;         let mut pa = self.walk_addr(va).unwrap() + va % PGSZ;
8020d2a2: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         loop{
8020d2a6: 31 a8        	j	0x8020d2c2 <.Lpcrel_hi72+0x12>

000000008020d2a8 <.Lpcrel_hi71>:
;         let mut pa = self.walk_addr(va).unwrap() + va % PGSZ;
8020d2a8: 17 85 02 00  	auipc	a0, 0x28
8020d2ac: 13 05 85 eb  	addi	a0, a0, -0x148

000000008020d2b0 <.Lpcrel_hi72>:
8020d2b0: 97 85 02 00  	auipc	a1, 0x28
8020d2b4: 13 86 05 25  	addi	a2, a1, 0x250
8020d2b8: f1 45        	li	a1, 0x1c
8020d2ba: 97 30 02 00  	auipc	ra, 0x23
8020d2be: e7 80 e0 f5  	jalr	-0xa2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;             let ch: u8 = *PhyPageNum(pa).get_mut();
8020d2c2: 03 35 84 fa  	ld	a0, -0x58(s0)
8020d2c6: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020d2ca: 13 05 04 fb  	addi	a0, s0, -0x50
8020d2ce: 97 a0 ff ff  	auipc	ra, 0xffffa
8020d2d2: e7 80 80 84  	jalr	-0x7b8(ra) <ekernel+0xffcb9b16>
8020d2d6: 03 45 05 00  	lbu	a0, 0x0(a0)
8020d2da: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8020d2de: a3 0b a4 fc  	sb	a0, -0x29(s0)
;             if ch == 0 {
8020d2e2: 0d e1        	bnez	a0, 0x8020d304 <.Lpcrel_hi72+0x54>
8020d2e4: 09 a0        	j	0x8020d2e6 <.Lpcrel_hi72+0x36>
8020d2e6: 83 35 04 f7  	ld	a1, -0x90(s0)
;         string
8020d2ea: 03 35 04 fa  	ld	a0, -0x60(s0)
8020d2ee: 88 e9        	sd	a0, 0x10(a1)
8020d2f0: 03 35 84 f9  	ld	a0, -0x68(s0)
8020d2f4: 88 e5        	sd	a0, 0x8(a1)
8020d2f6: 03 35 04 f9  	ld	a0, -0x70(s0)
8020d2fa: 88 e1        	sd	a0, 0x0(a1)
8020d2fc: aa 70        	ld	ra, 0xa8(sp)
8020d2fe: 0a 74        	ld	s0, 0xa0(sp)
;     }
8020d300: 4d 61        	addi	sp, sp, 0xb0
8020d302: 82 80        	ret
8020d304: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             if ch as char == '/'{
8020d308: 13 75 f5 0f  	andi	a0, a0, 0xff
8020d30c: 93 05 f0 02  	li	a1, 0x2f
8020d310: 63 1a b5 00  	bne	a0, a1, 0x8020d324 <.Lpcrel_hi72+0x74>
8020d314: 09 a0        	j	0x8020d316 <.Lpcrel_hi72+0x66>
;                 pa+=1;
8020d316: 03 35 84 fa  	ld	a0, -0x58(s0)
8020d31a: 05 05        	addi	a0, a0, 0x1
8020d31c: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020d320: 05 c9        	beqz	a0, 0x8020d350 <.Lpcrel_hi73>
8020d322: 15 a0        	j	0x8020d346 <.Lpcrel_hi72+0x96>
8020d324: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             string.push(ch as char);
8020d328: 93 75 f5 0f  	andi	a1, a0, 0xff
8020d32c: 13 05 04 f9  	addi	a0, s0, -0x70
8020d330: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d334: e7 80 00 c7  	jalr	-0x390(ra) <ekernel+0xffcbefa0>
;             pa += 1;
8020d338: 03 35 84 fa  	ld	a0, -0x58(s0)
8020d33c: 05 05        	addi	a0, a0, 0x1
8020d33e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020d342: 0d c9        	beqz	a0, 0x8020d374 <.Lpcrel_hi75>
8020d344: 1d a0        	j	0x8020d36a <.Lpcrel_hi74+0x12>
8020d346: 03 35 84 f5  	ld	a0, -0xa8(s0)
;                 pa+=1;
8020d34a: 23 34 a4 fa  	sd	a0, -0x58(s0)
; #![no_std]
8020d34e: 95 bf        	j	0x8020d2c2 <.Lpcrel_hi72+0x12>

000000008020d350 <.Lpcrel_hi73>:
;                 pa+=1;
8020d350: 17 85 02 00  	auipc	a0, 0x28
8020d354: 13 05 05 e1  	addi	a0, a0, -0x1f0

000000008020d358 <.Lpcrel_hi74>:
8020d358: 97 85 02 00  	auipc	a1, 0x28
8020d35c: 13 86 05 1c  	addi	a2, a1, 0x1c0
8020d360: f1 45        	li	a1, 0x1c
8020d362: 97 30 02 00  	auipc	ra, 0x23
8020d366: e7 80 60 eb  	jalr	-0x14a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d36a: 03 35 04 f5  	ld	a0, -0xb0(s0)
;             pa += 1;
8020d36e: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         loop{
8020d372: 81 bf        	j	0x8020d2c2 <.Lpcrel_hi72+0x12>

000000008020d374 <.Lpcrel_hi75>:
;             pa += 1;
8020d374: 17 85 02 00  	auipc	a0, 0x28
8020d378: 13 05 c5 de  	addi	a0, a0, -0x214

000000008020d37c <.Lpcrel_hi76>:
8020d37c: 97 85 02 00  	auipc	a1, 0x28
8020d380: 13 86 45 1b  	addi	a2, a1, 0x1b4
8020d384: f1 45        	li	a1, 0x1c
8020d386: 97 30 02 00  	auipc	ra, 0x23
8020d38a: e7 80 20 e9  	jalr	-0x16e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020d38e <_ZN2os2vm9PageTable22translated_byte_buffer17hbd89c5cdccd7203eE>:
;     pub fn translated_byte_buffer(&mut self,ptr: *const u8 ,len :usize) -> Vec<&'static mut [u8]>{
8020d38e: 2d 71        	addi	sp, sp, -0x120
8020d390: 06 ee        	sd	ra, 0x118(sp)
8020d392: 22 ea        	sd	s0, 0x110(sp)
8020d394: 00 12        	addi	s0, sp, 0x120
8020d396: 23 34 b4 f0  	sd	a1, -0xf8(s0)
8020d39a: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8020d39e: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020d3a2: 23 30 c4 f8  	sd	a2, -0x80(s0)
8020d3a6: 23 34 d4 f8  	sd	a3, -0x78(s0)
;         let mut start = ptr as usize;
8020d3aa: 23 30 c4 f2  	sd	a2, -0xe0(s0)
;         let end = start + len;
8020d3ae: 83 35 04 f2  	ld	a1, -0xe0(s0)
8020d3b2: 33 85 d5 00  	add	a0, a1, a3
8020d3b6: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020d3ba: 63 6e b5 00  	bltu	a0, a1, 0x8020d3d6 <.Lpcrel_hi77>
8020d3be: 09 a0        	j	0x8020d3c0 <_ZN2os2vm9PageTable22translated_byte_buffer17hbd89c5cdccd7203eE+0x32>
8020d3c0: 03 35 84 f1  	ld	a0, -0xe8(s0)
;         let end = start + len;
8020d3c4: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020d3c8: 13 05 84 f2  	addi	a0, s0, -0xd8
;         let mut v = Vec::new();
8020d3cc: 97 70 00 00  	auipc	ra, 0x7
8020d3d0: e7 80 20 35  	jalr	0x352(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17hc5a1186bf5f9f063E>
8020d3d4: 31 a8        	j	0x8020d3f0 <.Lpcrel_hi78+0x12>

000000008020d3d6 <.Lpcrel_hi77>:
;         let end = start + len;
8020d3d6: 17 85 02 00  	auipc	a0, 0x28
8020d3da: 13 05 a5 d8  	addi	a0, a0, -0x276

000000008020d3de <.Lpcrel_hi78>:
8020d3de: 97 85 02 00  	auipc	a1, 0x28
8020d3e2: 13 86 a5 16  	addi	a2, a1, 0x16a
8020d3e6: f1 45        	li	a1, 0x1c
8020d3e8: 97 30 02 00  	auipc	ra, 0x23
8020d3ec: e7 80 00 e3  	jalr	-0x1d0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d3f0: 83 35 84 f1  	ld	a1, -0xe8(s0)
;         while start < end {
8020d3f4: 03 35 04 f2  	ld	a0, -0xe0(s0)
8020d3f8: 63 62 b5 02  	bltu	a0, a1, 0x8020d41c <.Lpcrel_hi78+0x3e>
8020d3fc: 09 a0        	j	0x8020d3fe <.Lpcrel_hi78+0x20>
8020d3fe: 83 35 04 f1  	ld	a1, -0xf0(s0)
;         v
8020d402: 03 35 84 f3  	ld	a0, -0xc8(s0)
8020d406: 88 e9        	sd	a0, 0x10(a1)
8020d408: 03 35 04 f3  	ld	a0, -0xd0(s0)
8020d40c: 88 e5        	sd	a0, 0x8(a1)
8020d40e: 03 35 84 f2  	ld	a0, -0xd8(s0)
8020d412: 88 e1        	sd	a0, 0x0(a1)
8020d414: f2 60        	ld	ra, 0x118(sp)
8020d416: 52 64        	ld	s0, 0x110(sp)
;     }
8020d418: 15 61        	addi	sp, sp, 0x120
8020d41a: 82 80        	ret
;             let start_va = VirAddr(start).round_down();
8020d41c: 03 35 04 f2  	ld	a0, -0xe0(s0)
8020d420: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8020d424: 13 05 04 f4  	addi	a0, s0, -0xc0
8020d428: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d42c: e7 80 20 e4  	jalr	-0x1be(ra) <ekernel+0xffcbf26a>
8020d430: 23 3c a4 f8  	sd	a0, -0x68(s0)

000000008020d434 <.Lpcrel_hi79>:
;             let mut va:usize = start_va.into();
8020d434: 97 85 02 00  	auipc	a1, 0x28
8020d438: 93 85 c5 12  	addi	a1, a1, 0x12c
8020d43c: 97 90 ff ff  	auipc	ra, 0xffff9
8020d440: e7 80 20 63  	jalr	0x632(ra) <ekernel+0xffcb9a6e>
8020d444: aa 85        	mv	a1, a0
8020d446: 03 35 84 f0  	ld	a0, -0xf8(s0)
8020d44a: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;             let ppn = PhyPageNum(self.walk_addr(va).unwrap());
8020d44e: 83 35 84 f4  	ld	a1, -0xb8(s0)
8020d452: 97 00 00 00  	auipc	ra, 0x0
8020d456: e7 80 00 85  	jalr	-0x7b0(ra) <_ZN2os2vm9PageTable9walk_addr17h399a1fc919239ff0E>
8020d45a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020d45e: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
8020d462: 03 35 84 fd  	ld	a0, -0x28(s0)
8020d466: 11 e9        	bnez	a0, 0x8020d47a <.Lpcrel_hi80+0x10>
8020d468: 09 a0        	j	0x8020d46a <.Lpcrel_hi80>

000000008020d46a <.Lpcrel_hi80>:
;             None => unwrap_failed(),
8020d46a: 17 85 02 00  	auipc	a0, 0x28
8020d46e: 13 05 e5 10  	addi	a0, a0, 0x10e
8020d472: 97 40 02 00  	auipc	ra, 0x24
8020d476: e7 80 60 85  	jalr	-0x7aa(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020d47a: 03 35 04 fe  	ld	a0, -0x20(s0)
8020d47e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             let ppn = PhyPageNum(self.walk_addr(va).unwrap());
8020d482: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;             va = va+PGSZ;
8020d486: 83 35 84 f4  	ld	a1, -0xb8(s0)
8020d48a: 05 65        	lui	a0, 0x1
8020d48c: 2e 95        	add	a0, a0, a1
8020d48e: 23 30 a4 f0  	sd	a0, -0x100(s0)
8020d492: 63 6a b5 02  	bltu	a0, a1, 0x8020d4c6 <.Lpcrel_hi81>
8020d496: 09 a0        	j	0x8020d498 <.Lpcrel_hi80+0x2e>
8020d498: 83 35 84 f1  	ld	a1, -0xe8(s0)
8020d49c: 03 35 04 f0  	ld	a0, -0x100(s0)
;             va = va+PGSZ;
8020d4a0: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;             let mut end_va = va;
8020d4a4: 03 35 84 f4  	ld	a0, -0xb8(s0)
8020d4a8: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;             end_va = end_va.min(end);
8020d4ac: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020d4b0: 97 e0 01 00  	auipc	ra, 0x1e
8020d4b4: e7 80 80 d7  	jalr	-0x288(ra) <_ZN4core3cmp3Ord3min17h76f4b70afda50d90E>
8020d4b8: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;             if end_va & (PGSZ -1) == 0 {
8020d4bc: 03 55 84 f5  	lhu	a0, -0xa8(s0)
8020d4c0: 52 15        	slli	a0, a0, 0x34
8020d4c2: 19 cd        	beqz	a0, 0x8020d4e0 <.Lpcrel_hi82+0x12>
8020d4c4: 9d a8        	j	0x8020d53a <.Lpcrel_hi83+0x28>

000000008020d4c6 <.Lpcrel_hi81>:
;             va = va+PGSZ;
8020d4c6: 17 85 02 00  	auipc	a0, 0x28
8020d4ca: 13 05 a5 c9  	addi	a0, a0, -0x366

000000008020d4ce <.Lpcrel_hi82>:
8020d4ce: 97 85 02 00  	auipc	a1, 0x28
8020d4d2: 13 86 25 0c  	addi	a2, a1, 0xc2
8020d4d6: f1 45        	li	a1, 0x1c
8020d4d8: 97 30 02 00  	auipc	ra, 0x23
8020d4dc: e7 80 00 d4  	jalr	-0x2c0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d4e0: 13 05 04 f5  	addi	a0, s0, -0xb0
;                 v.push(&mut ppn.get_bytes_array()[(start &(PGSZ -1))..]);
8020d4e4: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d4e8: e7 80 80 df  	jalr	-0x208(ra) <ekernel+0xffcbf2dc>
8020d4ec: 23 38 a4 ee  	sd	a0, -0x110(s0)
8020d4f0: 2e 86        	mv	a2, a1
8020d4f2: 83 35 04 ef  	ld	a1, -0x110(s0)
8020d4f6: 03 35 04 f2  	ld	a0, -0xe0(s0)
8020d4fa: 52 15        	slli	a0, a0, 0x34
8020d4fc: 51 91        	srli	a0, a0, 0x34
8020d4fe: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8020d502: 03 35 04 f6  	ld	a0, -0xa0(s0)
8020d506: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020d50a: 23 34 c4 fc  	sd	a2, -0x38(s0)
8020d50e: 23 38 a4 fc  	sd	a0, -0x30(s0)

000000008020d512 <.Lpcrel_hi83>:
;         index.index_mut(self)
8020d512: 97 86 02 00  	auipc	a3, 0x28
8020d516: 93 86 66 09  	addi	a3, a3, 0x96
8020d51a: 97 80 ff ff  	auipc	ra, 0xffff8
8020d51e: e7 80 80 42  	jalr	0x428(ra) <ekernel+0xffcb8942>
8020d522: 23 3c a4 ee  	sd	a0, -0x108(s0)
8020d526: 2e 86        	mv	a2, a1
8020d528: 83 35 84 ef  	ld	a1, -0x108(s0)
8020d52c: 13 05 84 f2  	addi	a0, s0, -0xd8
;                 v.push(&mut ppn.get_bytes_array()[(start &(PGSZ -1))..]);
8020d530: 97 70 00 00  	auipc	ra, 0x7
8020d534: e7 80 00 4d  	jalr	0x4d0(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0aa21330a7850061E>
8020d538: bd a0        	j	0x8020d5a6 <.Lpcrel_hi84+0x28>
8020d53a: 13 05 04 f5  	addi	a0, s0, -0xb0
;                 v.push(&mut ppn.get_bytes_array()[(start & (PGSZ-1))..(end_va & (PGSZ-1))]);
8020d53e: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d542: e7 80 e0 d9  	jalr	-0x262(ra) <ekernel+0xffcbf2dc>
8020d546: 2a 86        	mv	a2, a0
8020d548: ae 86        	mv	a3, a1
8020d54a: 03 35 04 f2  	ld	a0, -0xe0(s0)
8020d54e: 85 65        	lui	a1, 0x1
8020d550: 1b 87 f5 ff  	addiw	a4, a1, -0x1
8020d554: b3 75 e5 00  	and	a1, a0, a4
8020d558: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020d55c: 79 8d        	and	a0, a0, a4
8020d55e: 23 34 b4 f6  	sd	a1, -0x98(s0)
8020d562: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020d566: 03 35 84 f6  	ld	a0, -0x98(s0)
8020d56a: 83 35 04 f7  	ld	a1, -0x90(s0)
8020d56e: 23 30 c4 fa  	sd	a2, -0x60(s0)
8020d572: 23 34 d4 fa  	sd	a3, -0x58(s0)
8020d576: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020d57a: 23 3c b4 fa  	sd	a1, -0x48(s0)

000000008020d57e <.Lpcrel_hi84>:
;         index.index_mut(self)
8020d57e: 17 87 02 00  	auipc	a4, 0x28
8020d582: 13 07 27 04  	addi	a4, a4, 0x42
8020d586: 97 20 01 00  	auipc	ra, 0x12
8020d58a: e7 80 00 e9  	jalr	-0x170(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h8a1a44c50b882f6fE>
8020d58e: 23 34 a4 ee  	sd	a0, -0x118(s0)
8020d592: 2e 86        	mv	a2, a1
8020d594: 83 35 84 ee  	ld	a1, -0x118(s0)
8020d598: 13 05 84 f2  	addi	a0, s0, -0xd8
;                 v.push(&mut ppn.get_bytes_array()[(start & (PGSZ-1))..(end_va & (PGSZ-1))]);
8020d59c: 97 70 00 00  	auipc	ra, 0x7
8020d5a0: e7 80 40 46  	jalr	0x464(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0aa21330a7850061E>
8020d5a4: 09 a0        	j	0x8020d5a6 <.Lpcrel_hi84+0x28>
;             start = end_va;
8020d5a6: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020d5aa: 23 30 a4 f2  	sd	a0, -0xe0(s0)
;         while start < end {
8020d5ae: 89 b5        	j	0x8020d3f0 <.Lpcrel_hi78+0x12>

000000008020d5b0 <_ZN2os2vm7kvmmake17h1c9cd26fdb2f776eE>:
; pub fn kvmmake(pagetable:&mut PageTable) ->&mut PageTable{
8020d5b0: 59 71        	addi	sp, sp, -0x70
8020d5b2: 86 f4        	sd	ra, 0x68(sp)
8020d5b4: a2 f0        	sd	s0, 0x60(sp)
8020d5b6: 80 18        	addi	s0, sp, 0x70
8020d5b8: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020d5bc: 23 34 a4 fe  	sd	a0, -0x18(s0)

000000008020d5c0 <.Lpcrel_hi85>:
;         MMIO.into(),
8020d5c0: 17 85 02 00  	auipc	a0, 0x28
8020d5c4: 93 05 85 01  	addi	a1, a0, 0x18
8020d5c8: 37 15 00 10  	lui	a0, 0x10001
8020d5cc: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020d5d0: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d5d4: e7 80 60 92  	jalr	-0x6da(ra) <ekernel+0xffcbeef6>
8020d5d8: aa 85        	mv	a1, a0
8020d5da: 03 35 04 fb  	ld	a0, -0x50(s0)
8020d5de: 23 3c b4 fa  	sd	a1, -0x48(s0)

000000008020d5e2 <.Lpcrel_hi86>:
;         MMIO.into(),
8020d5e2: 97 85 02 00  	auipc	a1, 0x28
8020d5e6: 93 85 e5 00  	addi	a1, a1, 0xe
8020d5ea: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d5ee: e7 80 00 8f  	jalr	-0x710(ra) <ekernel+0xffcbeeda>
8020d5f2: 83 35 84 fb  	ld	a1, -0x48(s0)
8020d5f6: 2a 86        	mv	a2, a0
8020d5f8: 03 35 04 fc  	ld	a0, -0x40(s0)
8020d5fc: 85 66        	lui	a3, 0x1
8020d5fe: 19 47        	li	a4, 0x6
;     pagetable.mappages(
8020d600: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d604: e7 80 40 ea  	jalr	-0x15c(ra) <ekernel+0xffcbf4a4>

000000008020d608 <.Lpcrel_hi87>:
;         KERNBASE.into(),
8020d608: 17 85 02 00  	auipc	a0, 0x28
8020d60c: 93 05 05 00  	mv	a1, a0
8020d610: 13 05 10 40  	li	a0, 0x401
8020d614: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020d618: 56 05        	slli	a0, a0, 0x15
8020d61a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020d61e: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d622: e7 80 80 8d  	jalr	-0x728(ra) <ekernel+0xffcbeef6>
8020d626: aa 85        	mv	a1, a0
8020d628: 03 35 84 fc  	ld	a0, -0x38(s0)
8020d62c: 23 38 b4 fc  	sd	a1, -0x30(s0)

000000008020d630 <.Lpcrel_hi88>:
;         KERNBASE.into(),
8020d630: 97 85 02 00  	auipc	a1, 0x28
8020d634: 93 85 05 ff  	addi	a1, a1, -0x10
8020d638: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d63c: e7 80 20 8a  	jalr	-0x75e(ra) <ekernel+0xffcbeeda>
8020d640: 83 35 84 fd  	ld	a1, -0x28(s0)
8020d644: 23 30 a4 fe  	sd	a0, -0x20(s0)

000000008020d648 <.Lpcrel_hi89>:
;         (etext as usize) - KERNBASE,
8020d648: 17 65 02 00  	auipc	a0, 0x26
8020d64c: 13 05 85 9b  	addi	a0, a0, -0x648
8020d650: 55 81        	srli	a0, a0, 0x15
8020d652: 63 68 b5 06  	bltu	a0, a1, 0x8020d6c2 <.Lpcrel_hi93>
8020d656: 09 a0        	j	0x8020d658 <.Lpcrel_hi89+0x10>
8020d658: 03 36 04 fe  	ld	a2, -0x20(s0)
8020d65c: 83 35 04 fd  	ld	a1, -0x30(s0)
8020d660: 03 35 04 fc  	ld	a0, -0x40(s0)

000000008020d664 <.Lpcrel_hi90>:
;     pagetable.mappages(
8020d664: 97 66 02 00  	auipc	a3, 0x26
8020d668: 93 86 c6 99  	addi	a3, a3, -0x664
8020d66c: 23 30 d4 fa  	sd	a3, -0x60(s0)
8020d670: 13 07 f0 bf  	li	a4, -0x401
8020d674: 56 07        	slli	a4, a4, 0x15
8020d676: ba 96        	add	a3, a3, a4
8020d678: 39 47        	li	a4, 0xe
8020d67a: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d67e: e7 80 a0 e2  	jalr	-0x1d6(ra) <ekernel+0xffcbf4a4>
8020d682: 03 35 04 fa  	ld	a0, -0x60(s0)

000000008020d686 <.Lpcrel_hi91>:
;         ((etext as usize)).into(),
8020d686: 97 85 02 00  	auipc	a1, 0x28
8020d68a: 93 85 a5 fc  	addi	a1, a1, -0x36
8020d68e: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d692: e7 80 80 86  	jalr	-0x798(ra) <ekernel+0xffcbeef6>
8020d696: aa 85        	mv	a1, a0
8020d698: 03 35 04 fa  	ld	a0, -0x60(s0)
8020d69c: 23 3c b4 f8  	sd	a1, -0x68(s0)

000000008020d6a0 <.Lpcrel_hi92>:
;         ((etext as usize)).into(),
8020d6a0: 97 85 02 00  	auipc	a1, 0x28
8020d6a4: 93 85 85 fc  	addi	a1, a1, -0x38
8020d6a8: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d6ac: e7 80 20 83  	jalr	-0x7ce(ra) <ekernel+0xffcbeeda>
8020d6b0: 83 35 04 fa  	ld	a1, -0x60(s0)
8020d6b4: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020d6b8: 45 45        	li	a0, 0x11
8020d6ba: 6e 05        	slli	a0, a0, 0x1b
;         PHYSTOP-(etext as usize), 
8020d6bc: 63 64 b5 0a  	bltu	a0, a1, 0x8020d764 <.Lpcrel_hi99>
8020d6c0: 39 a8        	j	0x8020d6de <.Lpcrel_hi94+0x14>

000000008020d6c2 <.Lpcrel_hi93>:
;         (etext as usize) - KERNBASE,
8020d6c2: 17 85 02 00  	auipc	a0, 0x28
8020d6c6: 13 05 e5 ad  	addi	a0, a0, -0x522

000000008020d6ca <.Lpcrel_hi94>:
8020d6ca: 97 85 02 00  	auipc	a1, 0x28
8020d6ce: 13 86 e5 f6  	addi	a2, a1, -0x92
8020d6d2: 93 05 10 02  	li	a1, 0x21
8020d6d6: 97 30 02 00  	auipc	ra, 0x23
8020d6da: e7 80 20 b4  	jalr	-0x4be(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020d6de: 03 35 04 fc  	ld	a0, -0x40(s0)
8020d6e2: 03 36 84 fa  	ld	a2, -0x58(s0)
8020d6e6: 83 35 84 f9  	ld	a1, -0x68(s0)

000000008020d6ea <.Lpcrel_hi95>:
;     pagetable.mappages(
8020d6ea: 97 66 02 00  	auipc	a3, 0x26
8020d6ee: 13 87 66 91  	addi	a4, a3, -0x6ea
8020d6f2: c5 46        	li	a3, 0x11
8020d6f4: ee 06        	slli	a3, a3, 0x1b
8020d6f6: 99 8e        	sub	a3, a3, a4
8020d6f8: 39 47        	li	a4, 0xe
8020d6fa: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d6fe: e7 80 a0 da  	jalr	-0x256(ra) <ekernel+0xffcbf4a4>

000000008020d702 <.Lpcrel_hi96>:
;         TRAMPOLINE.into(),
8020d702: 17 85 02 00  	auipc	a0, 0x28
8020d706: 93 05 65 f9  	addi	a1, a0, -0x6a
8020d70a: 37 05 00 04  	lui	a0, 0x4000
8020d70e: 7d 35        	addiw	a0, a0, -0x1
8020d710: 32 05        	slli	a0, a0, 0xc
8020d712: 97 e0 ff ff  	auipc	ra, 0xffffe
8020d716: e7 80 40 7e  	jalr	0x7e4(ra) <ekernel+0xffcbeef6>
8020d71a: 23 38 a4 f8  	sd	a0, -0x70(s0)

000000008020d71e <.Lpcrel_hi97>:
;         (trampoline as usize).into(), 
8020d71e: 17 55 02 00  	auipc	a0, 0x25
8020d722: 13 05 25 8e  	addi	a0, a0, -0x71e

000000008020d726 <.Lpcrel_hi98>:
8020d726: 97 85 02 00  	auipc	a1, 0x28
8020d72a: 93 85 a5 f8  	addi	a1, a1, -0x76
8020d72e: 97 e0 ff ff  	auipc	ra, 0xffffe
8020d732: e7 80 c0 7a  	jalr	0x7ac(ra) <ekernel+0xffcbeeda>
8020d736: 83 35 04 f9  	ld	a1, -0x70(s0)
8020d73a: 2a 86        	mv	a2, a0
8020d73c: 03 35 04 fc  	ld	a0, -0x40(s0)
8020d740: 85 66        	lui	a3, 0x1
8020d742: 29 47        	li	a4, 0xa
;     pagetable.mappages(
8020d744: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d748: e7 80 00 d6  	jalr	-0x2a0(ra) <ekernel+0xffcbf4a4>
8020d74c: 03 35 04 fc  	ld	a0, -0x40(s0)
;     pagetable.map_proc_stacks();
8020d750: 97 f0 ff ff  	auipc	ra, 0xfffff
8020d754: e7 80 c0 79  	jalr	0x79c(ra) <ekernel+0xffcbfeec>
8020d758: 03 35 04 fc  	ld	a0, -0x40(s0)
8020d75c: a6 70        	ld	ra, 0x68(sp)
8020d75e: 06 74        	ld	s0, 0x60(sp)
; }
8020d760: 65 61        	addi	sp, sp, 0x70
8020d762: 82 80        	ret

000000008020d764 <.Lpcrel_hi99>:
;         PHYSTOP-(etext as usize), 
8020d764: 17 85 02 00  	auipc	a0, 0x28
8020d768: 13 05 c5 a3  	addi	a0, a0, -0x5c4

000000008020d76c <.Lpcrel_hi100>:
8020d76c: 97 85 02 00  	auipc	a1, 0x28
8020d770: 13 86 45 f1  	addi	a2, a1, -0xec
8020d774: 93 05 10 02  	li	a1, 0x21
8020d778: 97 30 02 00  	auipc	ra, 0x23
8020d77c: e7 80 00 aa  	jalr	-0x560(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020d780 <_ZN2os2vm11kvminithart17h0ef27556ac175799E>:
; pub fn kvminithart(pagetable:usize){
8020d780: 01 11        	addi	sp, sp, -0x20
8020d782: 06 ec        	sd	ra, 0x18(sp)
8020d784: 22 e8        	sd	s0, 0x10(sp)
8020d786: 00 10        	addi	s0, sp, 0x20
8020d788: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         riscv::register::satp::write(pagetable);
8020d78c: 97 c0 00 00  	auipc	ra, 0xc
8020d790: e7 80 c0 e6  	jalr	-0x194(ra) <_ZN5riscv8register4satp5write17h852b701b47d7d045E>
;         sfence_vma();
8020d794: 97 e0 ff ff  	auipc	ra, 0xffffe
8020d798: e7 80 a0 66  	jalr	0x66a(ra) <ekernel+0xffcbedfe>
8020d79c: e2 60        	ld	ra, 0x18(sp)
8020d79e: 42 64        	ld	s0, 0x10(sp)
; }
8020d7a0: 05 61        	addi	sp, sp, 0x20
8020d7a2: 82 80        	ret

000000008020d7a4 <_ZN2os2vm12PageTableBit7set_bit17hc5b404c55f55040eE>:
;     pub fn set_bit(&self,pagetable_bit:usize) {
8020d7a4: 1d 71        	addi	sp, sp, -0x60
8020d7a6: 86 ec        	sd	ra, 0x58(sp)
8020d7a8: a2 e8        	sd	s0, 0x50(sp)
8020d7aa: 80 10        	addi	s0, sp, 0x60
8020d7ac: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020d7b0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020d7b4: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             let temp: &mut Option<usize> = self.pagetable
8020d7b8: 97 60 00 00  	auipc	ra, 0x6
8020d7bc: e7 80 e0 d9  	jalr	-0x262(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hfec48f6386574451E>
8020d7c0: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020d7c4: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020d7c8: 13 05 84 fb  	addi	a0, s0, -0x48
8020d7cc: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020d7d0: 97 60 00 00  	auipc	ra, 0x6
8020d7d4: e7 80 e0 f3  	jalr	-0xc2(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$4spin17h6cab3958c961163dE>
8020d7d8: 97 60 00 00  	auipc	ra, 0x6
8020d7dc: e7 80 20 f0  	jalr	-0xfe(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$7get_mut17h2e1034c82b975636E>
8020d7e0: aa 85        	mv	a1, a0
8020d7e2: 03 35 04 fa  	ld	a0, -0x60(s0)
8020d7e6: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020d7ea: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                             .get_mut();
8020d7ee: 97 b0 ff ff  	auipc	ra, 0xffffb
8020d7f2: e7 80 60 db  	jalr	-0x24a(ra) <ekernel+0xffcbb5a4>
8020d7f6: 03 35 84 fa  	ld	a0, -0x58(s0)
8020d7fa: 83 35 04 fb  	ld	a1, -0x50(s0)
;             *temp = (Some(pagetable_bit))
8020d7fe: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020d802: 05 45        	li	a0, 0x1
8020d804: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020d808: 03 36 84 fc  	ld	a2, -0x38(s0)
8020d80c: 03 35 04 fd  	ld	a0, -0x30(s0)
8020d810: 90 e1        	sd	a2, 0x0(a1)
8020d812: 88 e5        	sd	a0, 0x8(a1)
8020d814: e6 60        	ld	ra, 0x58(sp)
8020d816: 46 64        	ld	s0, 0x50(sp)
;     }
8020d818: 25 61        	addi	sp, sp, 0x60
8020d81a: 82 80        	ret

000000008020d81c <_ZN2os2vm12PageTableBit7get_bit17hbf79352923a4b3d1E>:
;     pub fn get_bit(&self) -> Option<usize>{
8020d81c: 5d 71        	addi	sp, sp, -0x50
8020d81e: 86 e4        	sd	ra, 0x48(sp)
8020d820: a2 e0        	sd	s0, 0x40(sp)
8020d822: 80 08        	addi	s0, sp, 0x50
8020d824: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {pagetable_bit = *(self.pagetable.lock().spin().get_mut());}
8020d828: 97 60 00 00  	auipc	ra, 0x6
8020d82c: e7 80 e0 d2  	jalr	-0x2d2(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hfec48f6386574451E>
8020d830: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020d834: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020d838: 13 05 84 fc  	addi	a0, s0, -0x38
8020d83c: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020d840: 97 60 00 00  	auipc	ra, 0x6
8020d844: e7 80 e0 ec  	jalr	-0x132(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$4spin17h6cab3958c961163dE>
8020d848: 97 60 00 00  	auipc	ra, 0x6
8020d84c: e7 80 20 e9  	jalr	-0x16e(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$7get_mut17h2e1034c82b975636E>
8020d850: aa 85        	mv	a1, a0
8020d852: 03 35 04 fb  	ld	a0, -0x50(s0)
8020d856: 90 61        	ld	a2, 0x0(a1)
8020d858: 23 3c c4 fa  	sd	a2, -0x48(s0)
8020d85c: 8c 65        	ld	a1, 0x8(a1)
8020d85e: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020d862: 23 30 c4 fe  	sd	a2, -0x20(s0)
8020d866: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020d86a: 97 b0 ff ff  	auipc	ra, 0xffffb
8020d86e: e7 80 a0 d3  	jalr	-0x2c6(ra) <ekernel+0xffcbb5a4>
8020d872: 03 35 84 fb  	ld	a0, -0x48(s0)
8020d876: 83 35 04 fc  	ld	a1, -0x40(s0)
8020d87a: a6 60        	ld	ra, 0x48(sp)
8020d87c: 06 64        	ld	s0, 0x40(sp)
;     }
8020d87e: 61 61        	addi	sp, sp, 0x50
8020d880: 82 80        	ret

000000008020d882 <_ZN2os2vm12PageTableBit9root_addr17hec786b844a4eebfeE>:
;     pub fn root_addr(&self) -> usize {
8020d882: 39 71        	addi	sp, sp, -0x40
8020d884: 06 fc        	sd	ra, 0x38(sp)
8020d886: 22 f8        	sd	s0, 0x30(sp)
8020d888: 80 00        	addi	s0, sp, 0x40
8020d88a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             *(self.root.lock())
8020d88e: 13 05 85 02  	addi	a0, a0, 0x28
8020d892: 97 50 00 00  	auipc	ra, 0x5
8020d896: e7 80 40 29  	jalr	0x294(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h1d8b62201a0e1676E>
8020d89a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020d89e: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020d8a2: 13 05 84 fd  	addi	a0, s0, -0x28
8020d8a6: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020d8aa: 97 60 00 00  	auipc	ra, 0x6
8020d8ae: e7 80 e0 29  	jalr	0x29e(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h934bd110e623f0daE>
8020d8b2: aa 85        	mv	a1, a0
8020d8b4: 03 35 84 fc  	ld	a0, -0x38(s0)
8020d8b8: 8c 61        	ld	a1, 0x0(a1)
8020d8ba: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     }
8020d8be: 97 b0 ff ff  	auipc	ra, 0xffffb
8020d8c2: e7 80 e0 8a  	jalr	-0x752(ra) <ekernel+0xffcbb16c>
8020d8c6: 03 35 04 fd  	ld	a0, -0x30(s0)
8020d8ca: e2 70        	ld	ra, 0x38(sp)
8020d8cc: 42 74        	ld	s0, 0x30(sp)
8020d8ce: 21 61        	addi	sp, sp, 0x40
8020d8d0: 82 80        	ret

000000008020d8d2 <_ZN2os2vm12PageTableBit8set_root17h8b785f0df9a77194E>:
;     pub fn set_root(&self,root:usize){
8020d8d2: 39 71        	addi	sp, sp, -0x40
8020d8d4: 06 fc        	sd	ra, 0x38(sp)
8020d8d6: 22 f8        	sd	s0, 0x30(sp)
8020d8d8: 80 00        	addi	s0, sp, 0x40
8020d8da: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020d8de: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020d8e2: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             *(self.root.lock()) = root
8020d8e6: 13 05 85 02  	addi	a0, a0, 0x28
8020d8ea: 97 50 00 00  	auipc	ra, 0x5
8020d8ee: e7 80 c0 23  	jalr	0x23c(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h1d8b62201a0e1676E>
8020d8f2: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020d8f6: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020d8fa: 13 05 04 fd  	addi	a0, s0, -0x30
8020d8fe: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020d902: 97 60 00 00  	auipc	ra, 0x6
8020d906: e7 80 e0 27  	jalr	0x27e(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h0e1f0ba44edcaacaE>
8020d90a: 83 35 04 fc  	ld	a1, -0x40(s0)
8020d90e: 2a 86        	mv	a2, a0
8020d910: 03 35 84 fc  	ld	a0, -0x38(s0)
8020d914: 0c e2        	sd	a1, 0x0(a2)
;     }
8020d916: 97 b0 ff ff  	auipc	ra, 0xffffb
8020d91a: e7 80 60 85  	jalr	-0x7aa(ra) <ekernel+0xffcbb16c>
8020d91e: e2 70        	ld	ra, 0x38(sp)
8020d920: 42 74        	ld	s0, 0x30(sp)
8020d922: 21 61        	addi	sp, sp, 0x40
8020d924: 82 80        	ret

000000008020d926 <_ZN57_$LT$os..vm..PhyPageNum$u20$as$u20$core..clone..Clone$GT$5clone17h7eb991e43e797854E>:
; #[derive(Clone,Copy,Ord,PartialEq, PartialOrd,Eq)]
8020d926: 01 11        	addi	sp, sp, -0x20
8020d928: 06 ec        	sd	ra, 0x18(sp)
8020d92a: 22 e8        	sd	s0, 0x10(sp)
8020d92c: 00 10        	addi	s0, sp, 0x20
8020d92e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020d932: 08 61        	ld	a0, 0x0(a0)
8020d934: e2 60        	ld	ra, 0x18(sp)
8020d936: 42 64        	ld	s0, 0x10(sp)
8020d938: 05 61        	addi	sp, sp, 0x20
8020d93a: 82 80        	ret

000000008020d93c <_ZN2os4task4task8TcbInner3new17h5b5467ea9e0592daE>:
;     pub fn new() -> Self {
8020d93c: 4d 71        	addi	sp, sp, -0x150
8020d93e: 86 e6        	sd	ra, 0x148(sp)
8020d940: a2 e2        	sd	s0, 0x140(sp)
8020d942: 80 0a        	addi	s0, sp, 0x150
8020d944: 23 34 a4 ec  	sd	a0, -0x138(s0)
8020d948: 13 05 04 ef  	addi	a0, s0, -0x110
;             name: String::new(),
8020d94c: 97 e0 ff ff  	auipc	ra, 0xffffe
8020d950: e7 80 00 62  	jalr	0x620(ra) <ekernel+0xffcbef6c>
8020d954: 01 45        	li	a0, 0x0
;             pagetable: None,
8020d956: 23 34 a4 f0  	sd	a0, -0xf8(s0)
;             trapframe: None,
8020d95a: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8020d95e: 13 05 00 03  	li	a0, 0x30
8020d962: a1 45        	li	a1, 0x8
;             files: vec![
8020d964: 97 d0 ff ff  	auipc	ra, 0xffffd
8020d968: e7 80 e0 11  	jalr	0x11e(ra) <ekernel+0xffcbda82>
8020d96c: 23 30 a4 ee  	sd	a0, -0x120(s0)
8020d970: 23 38 a4 ec  	sd	a0, -0x130(s0)
;                 Some(Arc::new(Stdin)),
8020d974: 97 40 ff ff  	auipc	ra, 0xffff4
8020d978: e7 80 60 f6  	jalr	-0x9a(ra) <ekernel+0xffcb48da>
8020d97c: 23 38 a4 f2  	sd	a0, -0xd0(s0)

000000008020d980 <.Lpcrel_hi0>:
8020d980: 17 85 02 00  	auipc	a0, 0x28
8020d984: 13 05 05 d8  	addi	a0, a0, -0x280
8020d988: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;                 Some(Arc::new(Stdout)),
8020d98c: 97 40 ff ff  	auipc	ra, 0xffff4
8020d990: e7 80 00 fd  	jalr	-0x30(ra) <ekernel+0xffcb495c>
8020d994: 23 30 a4 f4  	sd	a0, -0xc0(s0)

000000008020d998 <.Lpcrel_hi1>:
8020d998: 17 85 02 00  	auipc	a0, 0x28
8020d99c: 13 05 05 da  	addi	a0, a0, -0x260
8020d9a0: 23 3c a4 ec  	sd	a0, -0x128(s0)
8020d9a4: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;                 Some(Arc::new(Stdout)),
8020d9a8: 97 40 ff ff  	auipc	ra, 0xffff4
8020d9ac: e7 80 40 fb  	jalr	-0x4c(ra) <ekernel+0xffcb495c>
8020d9b0: 83 35 84 ed  	ld	a1, -0x128(s0)
8020d9b4: 2a 86        	mv	a2, a0
8020d9b6: 03 35 04 ee  	ld	a0, -0x120(s0)
8020d9ba: 23 38 c4 f4  	sd	a2, -0xb0(s0)
8020d9be: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;             files: vec![
8020d9c2: aa 85        	mv	a1, a0
8020d9c4: 23 34 b4 ee  	sd	a1, -0x118(s0)
8020d9c8: 1d 89        	andi	a0, a0, 0x7
8020d9ca: 61 ed        	bnez	a0, 0x8020daa2 <.Lpcrel_hi1+0x10a>
8020d9cc: 09 a0        	j	0x8020d9ce <.Lpcrel_hi1+0x36>
8020d9ce: 83 35 04 ed  	ld	a1, -0x130(s0)
;             files: vec![
8020d9d2: 03 36 04 f3  	ld	a2, -0xd0(s0)
8020d9d6: 03 35 84 f3  	ld	a0, -0xc8(s0)
8020d9da: 90 e1        	sd	a2, 0x0(a1)
8020d9dc: 88 e5        	sd	a0, 0x8(a1)
8020d9de: 03 36 04 f4  	ld	a2, -0xc0(s0)
8020d9e2: 03 35 84 f4  	ld	a0, -0xb8(s0)
8020d9e6: 90 e9        	sd	a2, 0x10(a1)
8020d9e8: 88 ed        	sd	a0, 0x18(a1)
8020d9ea: 03 36 04 f5  	ld	a2, -0xb0(s0)
8020d9ee: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020d9f2: 90 f1        	sd	a2, 0x20(a1)
8020d9f4: 88 f5        	sd	a0, 0x28(a1)
8020d9f6: 13 05 84 f1  	addi	a0, s0, -0xe8
8020d9fa: 0d 46        	li	a2, 0x3
8020d9fc: 97 70 ff ff  	auipc	ra, 0xffff7
8020da00: e7 80 e0 59  	jalr	0x59e(ra) <ekernel+0xffcb7f9a>
8020da04: 01 45        	li	a0, 0x0
8020da06: 23 30 a4 ec  	sd	a0, -0x140(s0)
;             parent: None,
8020da0a: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8020da0e: 13 05 84 f6  	addi	a0, s0, -0x98
;             children: Vec::new(),
8020da12: 97 70 00 00  	auipc	ra, 0x7
8020da16: e7 80 c0 c9  	jalr	-0x364(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h6bb32ecae2d2876aE>
8020da1a: 13 05 04 f8  	addi	a0, s0, -0x80
8020da1e: 23 3c a4 ea  	sd	a0, -0x148(s0)
;             context: Context::new(),
8020da22: 97 b0 00 00  	auipc	ra, 0xb
8020da26: e7 80 e0 70  	jalr	0x70e(ra) <_ZN2os3cpu7Context3new17h9262639ef1f31a56E>
8020da2a: 83 35 84 eb  	ld	a1, -0x148(s0)
8020da2e: 03 35 84 ec  	ld	a0, -0x138(s0)
8020da32: 03 36 04 ec  	ld	a2, -0x140(s0)
;         Self{
8020da36: 30 e5        	sd	a2, 0x48(a0)
8020da38: 03 36 04 f0  	ld	a2, -0x100(s0)
8020da3c: 10 e9        	sd	a2, 0x10(a0)
8020da3e: 03 36 84 ef  	ld	a2, -0x108(s0)
8020da42: 10 e5        	sd	a2, 0x8(a0)
8020da44: 03 36 04 ef  	ld	a2, -0x110(s0)
8020da48: 10 e1        	sd	a2, 0x0(a0)
8020da4a: 03 36 84 f0  	ld	a2, -0xf8(s0)
8020da4e: 30 e9        	sd	a2, 0x50(a0)
8020da50: 03 36 04 f1  	ld	a2, -0xf0(s0)
8020da54: 30 ed        	sd	a2, 0x58(a0)
8020da56: 03 36 84 f2  	ld	a2, -0xd8(s0)
8020da5a: 10 f5        	sd	a2, 0x28(a0)
8020da5c: 03 36 04 f2  	ld	a2, -0xe0(s0)
8020da60: 10 f1        	sd	a2, 0x20(a0)
8020da62: 03 36 84 f1  	ld	a2, -0xe8(s0)
8020da66: 10 ed        	sd	a2, 0x18(a0)
8020da68: 03 36 04 f6  	ld	a2, -0xa0(s0)
8020da6c: 30 f1        	sd	a2, 0x60(a0)
8020da6e: 03 36 84 f7  	ld	a2, -0x88(s0)
8020da72: 30 e1        	sd	a2, 0x40(a0)
8020da74: 03 36 04 f7  	ld	a2, -0x90(s0)
8020da78: 10 fd        	sd	a2, 0x38(a0)
8020da7a: 03 36 84 f6  	ld	a2, -0x98(s0)
8020da7e: 10 f9        	sd	a2, 0x30(a0)
8020da80: 13 05 85 06  	addi	a0, a0, 0x68
8020da84: 13 06 00 07  	li	a2, 0x70
8020da88: 97 40 02 00  	auipc	ra, 0x24
8020da8c: e7 80 60 1e  	jalr	0x1e6(ra) <memcpy>
8020da90: 83 35 84 ec  	ld	a1, -0x138(s0)
8020da94: 03 35 04 ec  	ld	a0, -0x140(s0)
8020da98: e8 ed        	sd	a0, 0xd8(a1)
8020da9a: b6 60        	ld	ra, 0x148(sp)
8020da9c: 16 64        	ld	s0, 0x140(sp)
;     }
8020da9e: 71 61        	addi	sp, sp, 0x150
8020daa0: 82 80        	ret
8020daa2: 83 35 84 ee  	ld	a1, -0x118(s0)

000000008020daa6 <.Lpcrel_hi2>:
;             files: vec![
8020daa6: 17 85 02 00  	auipc	a0, 0x28
8020daaa: 13 06 a5 cc  	addi	a2, a0, -0x336
8020daae: 21 45        	li	a0, 0x8
8020dab0: 97 30 02 00  	auipc	ra, 0x23
8020dab4: e7 80 c0 83  	jalr	-0x7c4(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>

000000008020dab8 <_ZN2os4task4task8TcbInner13set_pagetable17h20cafc186a23b867E>:
;     pub fn set_pagetable(&mut self , pagetable_ptr:Box<PageTable> ){
8020dab8: 79 71        	addi	sp, sp, -0x30
8020daba: 06 f4        	sd	ra, 0x28(sp)
8020dabc: 22 f0        	sd	s0, 0x20(sp)
8020dabe: 00 18        	addi	s0, sp, 0x30
8020dac0: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020dac4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.pagetable.replace(pagetable_ptr);
8020dac8: 13 05 05 05  	addi	a0, a0, 0x50
8020dacc: 97 70 ff ff  	auipc	ra, 0xffff7
8020dad0: e7 80 40 4a  	jalr	0x4a4(ra) <ekernel+0xffcb7f70>
8020dad4: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020dad8: 13 05 84 fd  	addi	a0, s0, -0x28
8020dadc: 97 b0 ff ff  	auipc	ra, 0xffffb
8020dae0: e7 80 20 b5  	jalr	-0x4ae(ra) <ekernel+0xffcbb62e>
8020dae4: a2 70        	ld	ra, 0x28(sp)
8020dae6: 02 74        	ld	s0, 0x20(sp)
;     }
8020dae8: 45 61        	addi	sp, sp, 0x30
8020daea: 82 80        	ret

000000008020daec <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>:
;     pub fn pagetable(&mut self) -> &mut Box<PageTable>{
8020daec: 1d 71        	addi	sp, sp, -0x60
8020daee: 86 ec        	sd	ra, 0x58(sp)
8020daf0: a2 e8        	sd	s0, 0x50(sp)
8020daf2: 80 10        	addi	s0, sp, 0x60
8020daf4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if let Some(ptr) = &mut self.pagetable{
8020daf8: 93 05 05 05  	addi	a1, a0, 0x50
8020dafc: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020db00: 28 69        	ld	a0, 0x50(a0)
8020db02: 11 c9        	beqz	a0, 0x8020db16 <.Lpcrel_hi3>
8020db04: 09 a0        	j	0x8020db06 <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E+0x1a>
8020db06: 03 35 84 fa  	ld	a0, -0x58(s0)
;         if let Some(ptr) = &mut self.pagetable{
8020db0a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020db0e: e6 60        	ld	ra, 0x58(sp)
8020db10: 46 64        	ld	s0, 0x50(sp)
;     }
8020db12: 25 61        	addi	sp, sp, 0x60
8020db14: 82 80        	ret

000000008020db16 <.Lpcrel_hi3>:
;             panic!("no pagetbale")
8020db16: 17 85 02 00  	auipc	a0, 0x28
8020db1a: 93 05 25 c8  	addi	a1, a0, -0x37e
8020db1e: 13 05 04 fb  	addi	a0, s0, -0x50
8020db22: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020db26: 05 46        	li	a2, 0x1
8020db28: 97 a0 ff ff  	auipc	ra, 0xffffa
8020db2c: e7 80 c0 88  	jalr	-0x774(ra) <ekernel+0xffcba3b4>
8020db30: 03 35 04 fa  	ld	a0, -0x60(s0)

000000008020db34 <.Lpcrel_hi4>:
8020db34: 97 85 02 00  	auipc	a1, 0x28
8020db38: 93 85 45 c7  	addi	a1, a1, -0x38c
8020db3c: 97 20 02 00  	auipc	ra, 0x22
8020db40: e7 80 c0 66  	jalr	0x66c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008020db44 <_ZN2os4task4task8TcbInner12set_fork_tfm17h7bd254a92126455eE>:
;     pub fn set_fork_tfm(&mut self,tfm:&'static mut TrapFrame){
8020db44: 79 71        	addi	sp, sp, -0x30
8020db46: 06 f4        	sd	ra, 0x28(sp)
8020db48: 22 f0        	sd	s0, 0x20(sp)
8020db4a: 00 18        	addi	s0, sp, 0x30
8020db4c: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020db50: aa 85        	mv	a1, a0
8020db52: 03 35 04 fd  	ld	a0, -0x30(s0)
8020db56: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020db5a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.trapframe = Some(tfm);
8020db5e: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020db62: 03 35 84 fd  	ld	a0, -0x28(s0)
8020db66: a8 ed        	sd	a0, 0x58(a1)
8020db68: a2 70        	ld	ra, 0x28(sp)
8020db6a: 02 74        	ld	s0, 0x20(sp)
;     }
8020db6c: 45 61        	addi	sp, sp, 0x30
8020db6e: 82 80        	ret

000000008020db70 <_ZN2os4task4task8TcbInner14pagetable_root17hdda1d96bc57d8e9eE>:
;     pub fn pagetable_root(&mut self) -> PhyPageNum {
8020db70: 79 71        	addi	sp, sp, -0x30
8020db72: 06 f4        	sd	ra, 0x28(sp)
8020db74: 22 f0        	sd	s0, 0x20(sp)
8020db76: 00 18        	addi	s0, sp, 0x30
8020db78: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.pagetable().root
8020db7c: 97 00 00 00  	auipc	ra, 0x0
8020db80: e7 80 00 f7  	jalr	-0x90(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
8020db84: 08 61        	ld	a0, 0x0(a0)
8020db86: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020db8a: aa 85        	mv	a1, a0
8020db8c: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020db90: 1d 89        	andi	a0, a0, 0x7
8020db92: 09 e9        	bnez	a0, 0x8020dba4 <_ZN2os4task4task8TcbInner14pagetable_root17hdda1d96bc57d8e9eE+0x34>
8020db94: 09 a0        	j	0x8020db96 <_ZN2os4task4task8TcbInner14pagetable_root17hdda1d96bc57d8e9eE+0x26>
8020db96: 03 35 04 fe  	ld	a0, -0x20(s0)
;         self.pagetable().root
8020db9a: 08 79        	ld	a0, 0x30(a0)
8020db9c: a2 70        	ld	ra, 0x28(sp)
8020db9e: 02 74        	ld	s0, 0x20(sp)
;     }
8020dba0: 45 61        	addi	sp, sp, 0x30
8020dba2: 82 80        	ret
8020dba4: 83 35 84 fd  	ld	a1, -0x28(s0)

000000008020dba8 <.Lpcrel_hi5>:
;         self.pagetable().root
8020dba8: 17 85 02 00  	auipc	a0, 0x28
8020dbac: 13 06 85 c1  	addi	a2, a0, -0x3e8
8020dbb0: 21 45        	li	a0, 0x8
8020dbb2: 97 20 02 00  	auipc	ra, 0x22
8020dbb6: e7 80 a0 73  	jalr	0x73a(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>

000000008020dbba <_ZN2os4task4task8TcbInner17new_set_trapframe17h1fa87b3ec228a064E>:
;     pub fn new_set_trapframe(&mut self,trapframe: AllocerGuard){
8020dbba: 5d 71        	addi	sp, sp, -0x50
8020dbbc: 86 e4        	sd	ra, 0x48(sp)
8020dbbe: a2 e0        	sd	s0, 0x40(sp)
8020dbc0: 80 08        	addi	s0, sp, 0x50
8020dbc2: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020dbc6: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020dbca: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020dbce: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         let pa = trapframe.pages;
8020dbd2: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.pagetable().save_page(trapframe);
8020dbd6: 97 00 00 00  	auipc	ra, 0x0
8020dbda: e7 80 60 f1  	jalr	-0xea(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
8020dbde: 83 35 84 fb  	ld	a1, -0x48(s0)
8020dbe2: 08 61        	ld	a0, 0x0(a0)
8020dbe4: 97 f0 ff ff  	auipc	ra, 0xfffff
8020dbe8: e7 80 00 8a  	jalr	-0x760(ra) <ekernel+0xffcbf484>
8020dbec: 13 05 84 fc  	addi	a0, s0, -0x38
;         let trapframe:&mut TrapFrame = pa.get_mut();
8020dbf0: 97 90 ff ff  	auipc	ra, 0xffff9
8020dbf4: e7 80 60 eb  	jalr	-0x14a(ra) <ekernel+0xffcb9aa6>
8020dbf8: 83 35 04 fc  	ld	a1, -0x40(s0)
8020dbfc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.trapframe = Some(trapframe)
8020dc00: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020dc04: 03 35 04 fd  	ld	a0, -0x30(s0)
8020dc08: a8 ed        	sd	a0, 0x58(a1)
8020dc0a: a6 60        	ld	ra, 0x48(sp)
8020dc0c: 06 64        	ld	s0, 0x40(sp)
;     }
8020dc0e: 61 61        	addi	sp, sp, 0x50
8020dc10: 82 80        	ret

000000008020dc12 <_ZN2os4task4task8TcbInner15trapframe_usize17h803ef656e295eac4E>:
;     pub fn trapframe_usize(&mut self) -> Option<usize> {
8020dc12: 39 71        	addi	sp, sp, -0x40
8020dc14: 06 fc        	sd	ra, 0x38(sp)
8020dc16: 22 f8        	sd	s0, 0x30(sp)
8020dc18: 80 00        	addi	s0, sp, 0x40
8020dc1a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             *self.trapframe.as_mut().unwrap() as *const _ as usize
8020dc1e: 13 05 85 05  	addi	a0, a0, 0x58
8020dc22: 97 70 ff ff  	auipc	ra, 0xffff7
8020dc26: e7 80 a0 1c  	jalr	0x1ca(ra) <ekernel+0xffcb7dec>
8020dc2a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
8020dc2e: 03 35 04 fe  	ld	a0, -0x20(s0)
8020dc32: 11 e9        	bnez	a0, 0x8020dc46 <.Lpcrel_hi6+0x10>
8020dc34: 09 a0        	j	0x8020dc36 <.Lpcrel_hi6>

000000008020dc36 <.Lpcrel_hi6>:
;             None => unwrap_failed(),
8020dc36: 17 85 02 00  	auipc	a0, 0x28
8020dc3a: 13 05 25 ba  	addi	a0, a0, -0x45e
8020dc3e: 97 30 02 00  	auipc	ra, 0x23
8020dc42: e7 80 a0 08  	jalr	0x8a(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020dc46: 03 35 04 fe  	ld	a0, -0x20(s0)
8020dc4a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             *self.trapframe.as_mut().unwrap() as *const _ as usize
8020dc4e: 08 61        	ld	a0, 0x0(a0)
8020dc50: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Some(addr)
8020dc54: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020dc58: 05 45        	li	a0, 0x1
8020dc5a: 23 30 a4 fc  	sd	a0, -0x40(s0)
;     }
8020dc5e: 03 35 04 fc  	ld	a0, -0x40(s0)
8020dc62: 83 35 84 fc  	ld	a1, -0x38(s0)
8020dc66: e2 70        	ld	ra, 0x38(sp)
8020dc68: 42 74        	ld	s0, 0x30(sp)
8020dc6a: 21 61        	addi	sp, sp, 0x40
8020dc6c: 82 80        	ret

000000008020dc6e <_ZN2os4task4task8TcbInner12set_new_file17h113fa964c72dc2ccE>:
;     pub fn set_new_file(&mut self,files: Vec<Option<Arc<dyn File + Send + Sync>>>){
8020dc6e: 19 71        	addi	sp, sp, -0x80
8020dc70: 86 fc        	sd	ra, 0x78(sp)
8020dc72: a2 f8        	sd	s0, 0x70(sp)
8020dc74: 00 01        	addi	s0, sp, 0x80
8020dc76: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020dc7a: aa 85        	mv	a1, a0
8020dc7c: 03 35 04 f9  	ld	a0, -0x70(s0)
8020dc80: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020dc84: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         for fd in files.iter() {
8020dc88: 97 70 00 00  	auipc	ra, 0x7
8020dc8c: e7 80 40 41  	jalr	0x414(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf8fbbdc63be4b5f8E>
8020dc90: 97 70 ff ff  	auipc	ra, 0xffff7
8020dc94: e7 80 40 fc  	jalr	-0x3c(ra) <ekernel+0xffcb7c54>
8020dc98: 97 e0 ff ff  	auipc	ra, 0xffffe
8020dc9c: e7 80 40 c5  	jalr	-0x3ac(ra) <ekernel+0xffcbe8ec>
8020dca0: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020dca4: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020dca8: 09 a0        	j	0x8020dcaa <_ZN2os4task4task8TcbInner12set_new_file17h113fa964c72dc2ccE+0x3c>
8020dcaa: 13 05 04 fa  	addi	a0, s0, -0x60
;         for fd in files.iter() {
8020dcae: 97 e0 ff ff  	auipc	ra, 0xffffe
8020dcb2: e7 80 20 ea  	jalr	-0x15e(ra) <ekernel+0xffcbeb50>
8020dcb6: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020dcba: 03 35 04 fb  	ld	a0, -0x50(s0)
8020dcbe: 01 ed        	bnez	a0, 0x8020dcd6 <_ZN2os4task4task8TcbInner12set_new_file17h113fa964c72dc2ccE+0x68>
8020dcc0: 09 a0        	j	0x8020dcc2 <_ZN2os4task4task8TcbInner12set_new_file17h113fa964c72dc2ccE+0x54>
8020dcc2: 03 35 04 f9  	ld	a0, -0x70(s0)
;     }
8020dcc6: 97 a0 ff ff  	auipc	ra, 0xffffa
8020dcca: e7 80 20 f3  	jalr	-0xce(ra) <ekernel+0xffcbabf8>
8020dcce: e6 70        	ld	ra, 0x78(sp)
8020dcd0: 46 74        	ld	s0, 0x70(sp)
8020dcd2: 09 61        	addi	sp, sp, 0x80
8020dcd4: 82 80        	ret
;         for fd in files.iter() {
8020dcd6: 03 35 04 fb  	ld	a0, -0x50(s0)
8020dcda: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020dcde: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             if let Some(file) = fd {
8020dce2: 08 61        	ld	a0, 0x0(a0)
8020dce4: 1d cd        	beqz	a0, 0x8020dd22 <_ZN2os4task4task8TcbInner12set_new_file17h113fa964c72dc2ccE+0xb4>
8020dce6: 09 a0        	j	0x8020dce8 <_ZN2os4task4task8TcbInner12set_new_file17h113fa964c72dc2ccE+0x7a>
8020dce8: 03 35 84 f8  	ld	a0, -0x78(s0)
8020dcec: 83 35 84 f9  	ld	a1, -0x68(s0)
;             if let Some(file) = fd {
8020dcf0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 self.files.push(Some(file.clone()));
8020dcf4: e1 05        	addi	a1, a1, 0x18
8020dcf6: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020dcfa: 97 40 ff ff  	auipc	ra, 0xffff4
8020dcfe: e7 80 80 f8  	jalr	-0x78(ra) <ekernel+0xffcb4c82>
8020dd02: 2a 86        	mv	a2, a0
8020dd04: 03 35 04 f8  	ld	a0, -0x80(s0)
8020dd08: 23 3c c4 fa  	sd	a2, -0x48(s0)
8020dd0c: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020dd10: 83 35 84 fb  	ld	a1, -0x48(s0)
8020dd14: 03 36 04 fc  	ld	a2, -0x40(s0)
8020dd18: 97 70 00 00  	auipc	ra, 0x7
8020dd1c: e7 80 40 e8  	jalr	-0x17c(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E>
8020dd20: 69 b7        	j	0x8020dcaa <_ZN2os4task4task8TcbInner12set_new_file17h113fa964c72dc2ccE+0x3c>
8020dd22: 03 35 84 f9  	ld	a0, -0x68(s0)
;                 self.files.push(None);
8020dd26: 61 05        	addi	a0, a0, 0x18
8020dd28: 81 45        	li	a1, 0x0
8020dd2a: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020dd2e: 83 35 84 fc  	ld	a1, -0x38(s0)
8020dd32: 03 36 04 fd  	ld	a2, -0x30(s0)
8020dd36: 97 70 00 00  	auipc	ra, 0x7
8020dd3a: e7 80 60 e6  	jalr	-0x19a(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E>
8020dd3e: b5 b7        	j	0x8020dcaa <_ZN2os4task4task8TcbInner12set_new_file17h113fa964c72dc2ccE+0x3c>

000000008020dd40 <_ZN2os4task4task8TcbInner4name17hafa6c31897b7d0a4E>:
;     pub fn name(&mut self) -> String{
8020dd40: 01 11        	addi	sp, sp, -0x20
8020dd42: 06 ec        	sd	ra, 0x18(sp)
8020dd44: 22 e8        	sd	s0, 0x10(sp)
8020dd46: 00 10        	addi	s0, sp, 0x20
8020dd48: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.name.clone()
8020dd4c: 97 10 02 00  	auipc	ra, 0x21
8020dd50: e7 80 20 ed  	jalr	-0x12e(ra) <_ZN60_$LT$alloc..string..String$u20$as$u20$core..clone..Clone$GT$5clone17h43b2a3c1a6b05605E>
8020dd54: e2 60        	ld	ra, 0x18(sp)
8020dd56: 42 64        	ld	s0, 0x10(sp)
;     }
8020dd58: 05 61        	addi	sp, sp, 0x20
8020dd5a: 82 80        	ret

000000008020dd5c <_ZN2os4task4task8TcbInner8map_trap17he47faea885136c11E>:
;     pub fn map_trap(&mut self){
8020dd5c: 59 71        	addi	sp, sp, -0x70
8020dd5e: 86 f4        	sd	ra, 0x68(sp)
8020dd60: a2 f0        	sd	s0, 0x60(sp)
8020dd62: 80 18        	addi	s0, sp, 0x70
8020dd64: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020dd68: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.pagetable().mappages(
8020dd6c: 97 00 00 00  	auipc	ra, 0x0
8020dd70: e7 80 00 d8  	jalr	-0x280(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
8020dd74: 08 61        	ld	a0, 0x0(a0)
8020dd76: 23 3c a4 fa  	sd	a0, -0x48(s0)

000000008020dd7a <.Lpcrel_hi7>:
;             TRAMPOLINE.into(), 
8020dd7a: 17 85 02 00  	auipc	a0, 0x28
8020dd7e: 93 05 65 a7  	addi	a1, a0, -0x58a
8020dd82: 37 05 00 04  	lui	a0, 0x4000
8020dd86: 7d 35        	addiw	a0, a0, -0x1
8020dd88: 32 05        	slli	a0, a0, 0xc
8020dd8a: 97 e0 ff ff  	auipc	ra, 0xffffe
8020dd8e: e7 80 c0 16  	jalr	0x16c(ra) <ekernel+0xffcbeef6>
8020dd92: 23 38 a4 fa  	sd	a0, -0x50(s0)

000000008020dd96 <.Lpcrel_hi8>:
;             (trampoline as usize).into(), 
8020dd96: 17 45 02 00  	auipc	a0, 0x24
8020dd9a: 13 05 a5 26  	addi	a0, a0, 0x26a

000000008020dd9e <.Lpcrel_hi9>:
8020dd9e: 97 85 02 00  	auipc	a1, 0x28
8020dda2: 93 85 a5 a6  	addi	a1, a1, -0x596
8020dda6: 97 e0 ff ff  	auipc	ra, 0xffffe
8020ddaa: e7 80 40 13  	jalr	0x134(ra) <ekernel+0xffcbeeda>
8020ddae: 83 35 04 fb  	ld	a1, -0x50(s0)
8020ddb2: 2a 86        	mv	a2, a0
8020ddb4: 03 35 84 fb  	ld	a0, -0x48(s0)
8020ddb8: 85 66        	lui	a3, 0x1
8020ddba: 29 47        	li	a4, 0xa
;         self.pagetable().mappages(
8020ddbc: 97 e0 ff ff  	auipc	ra, 0xffffe
8020ddc0: e7 80 80 6e  	jalr	0x6e8(ra) <ekernel+0xffcbf4a4>
8020ddc4: 03 35 04 fc  	ld	a0, -0x40(s0)
;         let pa = self.trapframe_usize().unwrap();
8020ddc8: 97 00 00 00  	auipc	ra, 0x0
8020ddcc: e7 80 a0 e4  	jalr	-0x1b6(ra) <_ZN2os4task4task8TcbInner15trapframe_usize17h803ef656e295eac4E>
8020ddd0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020ddd4: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
8020ddd8: 03 35 84 fd  	ld	a0, -0x28(s0)
8020dddc: 11 e9        	bnez	a0, 0x8020ddf0 <.Lpcrel_hi10+0x10>
8020ddde: 09 a0        	j	0x8020dde0 <.Lpcrel_hi10>

000000008020dde0 <.Lpcrel_hi10>:
;             None => unwrap_failed(),
8020dde0: 17 85 02 00  	auipc	a0, 0x28
8020dde4: 13 05 05 a4  	addi	a0, a0, -0x5c0
8020dde8: 97 30 02 00  	auipc	ra, 0x23
8020ddec: e7 80 00 ee  	jalr	-0x120(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
8020ddf0: 03 35 04 fc  	ld	a0, -0x40(s0)
;             Some(val) => val,
8020ddf4: 83 35 04 fe  	ld	a1, -0x20(s0)
8020ddf8: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020ddfc: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         let pa = self.trapframe_usize().unwrap();
8020de00: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pagetable().mappages(
8020de04: 97 00 00 00  	auipc	ra, 0x0
8020de08: e7 80 80 ce  	jalr	-0x318(ra) <_ZN2os4task4task8TcbInner9pagetable17h33b05438f075a002E>
8020de0c: 08 61        	ld	a0, 0x0(a0)
8020de0e: 23 34 a4 fa  	sd	a0, -0x58(s0)

000000008020de12 <.Lpcrel_hi11>:
;             TRAPFRAME.into()
8020de12: 17 85 02 00  	auipc	a0, 0x28
8020de16: 93 05 65 a2  	addi	a1, a0, -0x5da
8020de1a: 37 05 00 02  	lui	a0, 0x2000
8020de1e: 7d 35        	addiw	a0, a0, -0x1
8020de20: 36 05        	slli	a0, a0, 0xd
8020de22: 97 e0 ff ff  	auipc	ra, 0xffffe
8020de26: e7 80 40 0d  	jalr	0xd4(ra) <ekernel+0xffcbeef6>
8020de2a: aa 85        	mv	a1, a0
8020de2c: 03 35 84 f9  	ld	a0, -0x68(s0)
8020de30: 23 30 b4 fa  	sd	a1, -0x60(s0)

000000008020de34 <.Lpcrel_hi12>:
;             , pa.into(), 
8020de34: 97 85 02 00  	auipc	a1, 0x28
8020de38: 93 85 c5 a1  	addi	a1, a1, -0x5e4
8020de3c: 97 e0 ff ff  	auipc	ra, 0xffffe
8020de40: e7 80 e0 09  	jalr	0x9e(ra) <ekernel+0xffcbeeda>
8020de44: 83 35 04 fa  	ld	a1, -0x60(s0)
8020de48: 2a 86        	mv	a2, a0
8020de4a: 03 35 84 fa  	ld	a0, -0x58(s0)
8020de4e: 85 66        	lui	a3, 0x1
8020de50: 39 47        	li	a4, 0xe
;         self.pagetable().mappages(
8020de52: 97 e0 ff ff  	auipc	ra, 0xffffe
8020de56: e7 80 20 65  	jalr	0x652(ra) <ekernel+0xffcbf4a4>
8020de5a: a6 70        	ld	ra, 0x68(sp)
8020de5c: 06 74        	ld	s0, 0x60(sp)
;     }   
8020de5e: 65 61        	addi	sp, sp, 0x70
8020de60: 82 80        	ret

000000008020de62 <_ZN2os4task4task6TcbOut3new17hb1a42f39c3319627E>:
;     pub fn new() -> Self{
8020de62: 79 71        	addi	sp, sp, -0x30
8020de64: 06 f4        	sd	ra, 0x28(sp)
8020de66: 22 f0        	sd	s0, 0x20(sp)
8020de68: 00 18        	addi	s0, sp, 0x30
8020de6a: aa 85        	mv	a1, a0
8020de6c: 05 45        	li	a0, 0x1
;             state: State::Ready, 
8020de6e: a3 0f a4 fc  	sb	a0, -0x21(s0)
8020de72: 01 45        	li	a0, 0x0
;             pid: None 
8020de74: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         Self { 
8020de78: 03 46 f4 fd  	lbu	a2, -0x21(s0)
8020de7c: 23 82 c5 02  	sb	a2, 0x24(a1)
8020de80: 88 e9        	sd	a0, 0x10(a1)
8020de82: 88 ed        	sd	a0, 0x18(a1)
8020de84: 88 d1        	sw	a0, 0x20(a1)
8020de86: 03 36 04 fe  	ld	a2, -0x20(s0)
8020de8a: 03 35 84 fe  	ld	a0, -0x18(s0)
8020de8e: 90 e1        	sd	a2, 0x0(a1)
8020de90: 88 e5        	sd	a0, 0x8(a1)
8020de92: a2 70        	ld	ra, 0x28(sp)
8020de94: 02 74        	ld	s0, 0x20(sp)
;     }
8020de96: 45 61        	addi	sp, sp, 0x30
8020de98: 82 80        	ret

000000008020de9a <_ZN2os4task4task6TcbOut9is_zombie17h741bf29cf3981a20E>:
;     pub fn is_zombie(&self) -> bool{
8020de9a: 01 11        	addi	sp, sp, -0x20
8020de9c: 06 ec        	sd	ra, 0x18(sp)
8020de9e: 22 e8        	sd	s0, 0x10(sp)
8020dea0: 00 10        	addi	s0, sp, 0x20
8020dea2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.state == State::Zombie {
8020dea6: 13 05 45 02  	addi	a0, a0, 0x24

000000008020deaa <.Lpcrel_hi13>:
8020deaa: 97 85 02 00  	auipc	a1, 0x28
8020deae: 93 85 e5 9b  	addi	a1, a1, -0x642
8020deb2: 97 10 00 00  	auipc	ra, 0x1
8020deb6: e7 80 00 29  	jalr	0x290(ra) <_ZN62_$LT$os..task..task..State$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94f9b76a052415a1E>
8020deba: e2 60        	ld	ra, 0x18(sp)
8020debc: 42 64        	ld	s0, 0x10(sp)
;     }
8020debe: 05 61        	addi	sp, sp, 0x20
8020dec0: 82 80        	ret

000000008020dec2 <_ZN2os4task4task6TcbOut9set_state17hfcedb7c259177b86E>:
;     pub fn set_state(&mut self, state:State){
8020dec2: 01 11        	addi	sp, sp, -0x20
8020dec4: 06 ec        	sd	ra, 0x18(sp)
8020dec6: 22 e8        	sd	s0, 0x10(sp)
8020dec8: 00 10        	addi	s0, sp, 0x20
8020deca: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020dece: a3 07 b4 fe  	sb	a1, -0x11(s0)
;         self.state = state;
8020ded2: 23 02 b5 02  	sb	a1, 0x24(a0)
8020ded6: e2 60        	ld	ra, 0x18(sp)
8020ded8: 42 64        	ld	s0, 0x10(sp)
;     }
8020deda: 05 61        	addi	sp, sp, 0x20
8020dedc: 82 80        	ret

000000008020dede <_ZN2os4task4task6TcbOut7set_pid17h01fdba7de680339dE>:
;     pub fn set_pid(&mut self,pid: usize){
8020dede: 39 71        	addi	sp, sp, -0x40
8020dee0: 06 fc        	sd	ra, 0x38(sp)
8020dee2: 22 f8        	sd	s0, 0x30(sp)
8020dee4: 80 00        	addi	s0, sp, 0x40
8020dee6: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020deea: aa 85        	mv	a1, a0
8020deec: 03 35 84 fc  	ld	a0, -0x38(s0)
8020def0: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020def4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.pid = Some(pid);
8020def8: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020defc: 05 45        	li	a0, 0x1
8020defe: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020df02: 03 36 04 fd  	ld	a2, -0x30(s0)
8020df06: 03 35 84 fd  	ld	a0, -0x28(s0)
8020df0a: 90 e1        	sd	a2, 0x0(a1)
8020df0c: 88 e5        	sd	a0, 0x8(a1)
8020df0e: e2 70        	ld	ra, 0x38(sp)
8020df10: 42 74        	ld	s0, 0x30(sp)
;     }
8020df12: 21 61        	addi	sp, sp, 0x40
8020df14: 82 80        	ret

000000008020df16 <_ZN2os4task4task6TcbOut3pid17h7dc06450ab743349E>:
;     pub fn pid(&self) -> Option<usize> {
8020df16: 39 71        	addi	sp, sp, -0x40
8020df18: 06 fc        	sd	ra, 0x38(sp)
8020df1a: 22 f8        	sd	s0, 0x30(sp)
8020df1c: 80 00        	addi	s0, sp, 0x40
8020df1e: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020df22: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if let Some(i) = self.pid{
8020df26: 08 61        	ld	a0, 0x0(a0)
8020df28: 09 cd        	beqz	a0, 0x8020df42 <_ZN2os4task4task6TcbOut3pid17h7dc06450ab743349E+0x2c>
8020df2a: 09 a0        	j	0x8020df2c <_ZN2os4task4task6TcbOut3pid17h7dc06450ab743349E+0x16>
8020df2c: 03 35 84 fc  	ld	a0, -0x38(s0)
;         if let Some(i) = self.pid{
8020df30: 08 65        	ld	a0, 0x8(a0)
8020df32: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             Some(i)
8020df36: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020df3a: 05 45        	li	a0, 0x1
8020df3c: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if let Some(i) = self.pid{
8020df40: 29 a0        	j	0x8020df4a <_ZN2os4task4task6TcbOut3pid17h7dc06450ab743349E+0x34>
8020df42: 01 45        	li	a0, 0x0
;             None
8020df44: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if let Some(i) = self.pid{
8020df48: 09 a0        	j	0x8020df4a <_ZN2os4task4task6TcbOut3pid17h7dc06450ab743349E+0x34>
;     }
8020df4a: 03 35 04 fd  	ld	a0, -0x30(s0)
8020df4e: 83 35 84 fd  	ld	a1, -0x28(s0)
8020df52: e2 70        	ld	ra, 0x38(sp)
8020df54: 42 74        	ld	s0, 0x30(sp)
8020df56: 21 61        	addi	sp, sp, 0x40
8020df58: 82 80        	ret

000000008020df5a <_ZN2os4task4task16TaskControlBlock3new17he269136b58977472E>:
;     pub fn new(name:&'static str) -> Self{    
8020df5a: 13 01 01 d8  	addi	sp, sp, -0x280
8020df5e: 23 3c 11 26  	sd	ra, 0x278(sp)
8020df62: 23 38 81 26  	sd	s0, 0x270(sp)
8020df66: 00 05        	addi	s0, sp, 0x280
8020df68: 23 3c c4 d8  	sd	a2, -0x268(s0)
8020df6c: 23 38 b4 d8  	sd	a1, -0x270(s0)
8020df70: 23 30 a4 da  	sd	a0, -0x260(s0)
8020df74: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020df78: 23 34 c4 fe  	sd	a2, -0x18(s0)
8020df7c: 13 05 84 e9  	addi	a0, s0, -0x168
8020df80: 23 30 a4 d8  	sd	a0, -0x280(s0)
;             inner: unsafe { UPSafeCell::new(TcbInner::new()) },
8020df84: 97 00 00 00  	auipc	ra, 0x0
8020df88: e7 80 80 9b  	jalr	-0x648(ra) <_ZN2os4task4task8TcbInner3new17h5b5467ea9e0592daE>
8020df8c: 83 35 04 d8  	ld	a1, -0x280(s0)
8020df90: 13 05 04 db  	addi	a0, s0, -0x250
8020df94: 23 34 a4 da  	sd	a0, -0x258(s0)
8020df98: 97 70 ff ff  	auipc	ra, 0xffff7
8020df9c: e7 80 60 61  	jalr	0x616(ra) <ekernel+0xffcb85ae>
8020dfa0: 13 05 84 fb  	addi	a0, s0, -0x48
8020dfa4: 23 34 a4 d8  	sd	a0, -0x278(s0)
;             out_data: Spin::new(TcbOut::new(),name),
8020dfa8: 97 00 00 00  	auipc	ra, 0x0
8020dfac: e7 80 a0 eb  	jalr	-0x146(ra) <_ZN2os4task4task6TcbOut3new17hb1a42f39c3319627E>
8020dfb0: 83 35 84 d8  	ld	a1, -0x278(s0)
8020dfb4: 03 36 04 d9  	ld	a2, -0x270(s0)
8020dfb8: 83 36 84 d9  	ld	a3, -0x268(s0)
8020dfbc: 13 05 84 f7  	addi	a0, s0, -0x88
8020dfc0: 97 40 00 00  	auipc	ra, 0x4
8020dfc4: e7 80 80 52  	jalr	0x528(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$3new17h81ec4a51cd60edfdE>
8020dfc8: 03 35 04 da  	ld	a0, -0x260(s0)
8020dfcc: 83 35 84 da  	ld	a1, -0x258(s0)
;         Self{
8020dfd0: 03 36 04 fb  	ld	a2, -0x50(s0)
8020dfd4: 10 fd        	sd	a2, 0x38(a0)
8020dfd6: 03 36 84 fa  	ld	a2, -0x58(s0)
8020dfda: 10 f9        	sd	a2, 0x30(a0)
8020dfdc: 03 36 04 fa  	ld	a2, -0x60(s0)
8020dfe0: 10 f5        	sd	a2, 0x28(a0)
8020dfe2: 03 36 84 f9  	ld	a2, -0x68(s0)
8020dfe6: 10 f1        	sd	a2, 0x20(a0)
8020dfe8: 03 36 04 f9  	ld	a2, -0x70(s0)
8020dfec: 10 ed        	sd	a2, 0x18(a0)
8020dfee: 03 36 84 f8  	ld	a2, -0x78(s0)
8020dff2: 10 e9        	sd	a2, 0x10(a0)
8020dff4: 03 36 04 f8  	ld	a2, -0x80(s0)
8020dff8: 10 e5        	sd	a2, 0x8(a0)
8020dffa: 03 36 84 f7  	ld	a2, -0x88(s0)
8020dffe: 10 e1        	sd	a2, 0x0(a0)
8020e000: 13 05 05 04  	addi	a0, a0, 0x40
8020e004: 13 06 80 0e  	li	a2, 0xe8
8020e008: 97 40 02 00  	auipc	ra, 0x24
8020e00c: e7 80 60 c6  	jalr	-0x39a(ra) <memcpy>
8020e010: 83 30 81 27  	ld	ra, 0x278(sp)
8020e014: 03 34 01 27  	ld	s0, 0x270(sp)
;     }
8020e018: 13 01 01 28  	addi	sp, sp, 0x280
8020e01c: 82 80        	ret

000000008020e01e <_ZN2os4task4task16TaskControlBlock7set_pid17h5f5ee807281140cbE>:
;     pub fn set_pid(&self,pid:usize){
8020e01e: 39 71        	addi	sp, sp, -0x40
8020e020: 06 fc        	sd	ra, 0x38(sp)
8020e022: 22 f8        	sd	s0, 0x30(sp)
8020e024: 80 00        	addi	s0, sp, 0x40
8020e026: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020e02a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020e02e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { self.out_data.lock().set_pid(pid) };
8020e032: 97 50 00 00  	auipc	ra, 0x5
8020e036: e7 80 60 ec  	jalr	-0x13a(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7cf5583f2d8e897eE>
8020e03a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e03e: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020e042: 13 05 04 fd  	addi	a0, s0, -0x30
8020e046: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020e04a: 97 60 00 00  	auipc	ra, 0x6
8020e04e: e7 80 a0 bf  	jalr	-0x406(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hddcb379c916be380E>
8020e052: 83 35 04 fc  	ld	a1, -0x40(s0)
8020e056: 97 00 00 00  	auipc	ra, 0x0
8020e05a: e7 80 80 e8  	jalr	-0x178(ra) <_ZN2os4task4task6TcbOut7set_pid17h01fdba7de680339dE>
8020e05e: 03 35 84 fc  	ld	a0, -0x38(s0)
8020e062: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e066: e7 80 00 2d  	jalr	0x2d0(ra) <ekernel+0xffcbb332>
8020e06a: e2 70        	ld	ra, 0x38(sp)
8020e06c: 42 74        	ld	s0, 0x30(sp)
;     }
8020e06e: 21 61        	addi	sp, sp, 0x40
8020e070: 82 80        	ret

000000008020e072 <_ZN2os4task4task16TaskControlBlock3pid17h1ef377ec86e4a976E>:
;     pub fn pid(&self) -> usize {
8020e072: 5d 71        	addi	sp, sp, -0x50
8020e074: 86 e4        	sd	ra, 0x48(sp)
8020e076: a2 e0        	sd	s0, 0x40(sp)
8020e078: 80 08        	addi	s0, sp, 0x50
8020e07a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { self.out_data.lock().pid().unwrap() }
8020e07e: 97 50 00 00  	auipc	ra, 0x5
8020e082: e7 80 a0 e7  	jalr	-0x186(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7cf5583f2d8e897eE>
8020e086: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020e08a: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020e08e: 13 05 04 fc  	addi	a0, s0, -0x40
8020e092: 97 60 00 00  	auipc	ra, 0x6
8020e096: e7 80 20 ad  	jalr	-0x52e(ra) <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd8605aecacba44f4E>
8020e09a: 97 00 00 00  	auipc	ra, 0x0
8020e09e: e7 80 c0 e7  	jalr	-0x184(ra) <_ZN2os4task4task6TcbOut3pid17h7dc06450ab743349E>
8020e0a2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020e0a6: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
8020e0aa: 03 35 84 fd  	ld	a0, -0x28(s0)
8020e0ae: 11 e9        	bnez	a0, 0x8020e0c2 <.Lpcrel_hi14+0x10>
8020e0b0: 09 a0        	j	0x8020e0b2 <.Lpcrel_hi14>

000000008020e0b2 <.Lpcrel_hi14>:
;             None => unwrap_failed(),
8020e0b2: 17 75 02 00  	auipc	a0, 0x27
8020e0b6: 13 05 e5 7b  	addi	a0, a0, 0x7be
8020e0ba: 97 30 02 00  	auipc	ra, 0x23
8020e0be: e7 80 e0 c0  	jalr	-0x3f2(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020e0c2: 03 35 04 fe  	ld	a0, -0x20(s0)
8020e0c6: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020e0ca: 23 34 a4 fe  	sd	a0, -0x18(s0)
8020e0ce: 13 05 04 fc  	addi	a0, s0, -0x40
;     }
8020e0d2: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e0d6: e7 80 00 26  	jalr	0x260(ra) <ekernel+0xffcbb332>
8020e0da: 03 35 84 fb  	ld	a0, -0x48(s0)
8020e0de: a6 60        	ld	ra, 0x48(sp)
8020e0e0: 06 64        	ld	s0, 0x40(sp)
8020e0e2: 61 61        	addi	sp, sp, 0x50
8020e0e4: 82 80        	ret

000000008020e0e6 <_ZN2os4task4task16TaskControlBlock10set_kstack17ha40936679fb412ffE>:
;     pub fn set_kstack(&self){
8020e0e6: 1d 71        	addi	sp, sp, -0x60
8020e0e8: 86 ec        	sd	ra, 0x58(sp)
8020e0ea: a2 e8        	sd	s0, 0x50(sp)
8020e0ec: 80 10        	addi	s0, sp, 0x60
8020e0ee: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020e0f2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.inner_mut().kstack = kstack!(self.pid());
8020e0f6: 97 00 00 00  	auipc	ra, 0x0
8020e0fa: e7 80 c0 f7  	jalr	-0x84(ra) <_ZN2os4task4task16TaskControlBlock3pid17h1ef377ec86e4a976E>
8020e0fe: 05 05        	addi	a0, a0, 0x1
8020e100: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e104: 01 c9        	beqz	a0, 0x8020e114 <.Lpcrel_hi15>
8020e106: 09 a0        	j	0x8020e108 <_ZN2os4task4task16TaskControlBlock10set_kstack17ha40936679fb412ffE+0x22>
8020e108: 11 45        	li	a0, 0x4
8020e10a: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020e10e: 01 45        	li	a0, 0x0
;         self.inner_mut().kstack = kstack!(self.pid());
8020e110: 1d e9        	bnez	a0, 0x8020e146 <.Lpcrel_hi17>
8020e112: 31 a8        	j	0x8020e12e <.Lpcrel_hi16+0x12>

000000008020e114 <.Lpcrel_hi15>:
8020e114: 17 75 02 00  	auipc	a0, 0x27
8020e118: 13 05 c5 78  	addi	a0, a0, 0x78c

000000008020e11c <.Lpcrel_hi16>:
8020e11c: 97 75 02 00  	auipc	a1, 0x27
8020e120: 13 86 c5 76  	addi	a2, a1, 0x76c
8020e124: f1 45        	li	a1, 0x1c
8020e126: 97 20 02 00  	auipc	ra, 0x22
8020e12a: e7 80 20 0f  	jalr	0xf2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e12e: 03 35 04 fd  	ld	a0, -0x30(s0)
8020e132: 83 35 04 fc  	ld	a1, -0x40(s0)
;         self.inner_mut().kstack = kstack!(self.pid());
8020e136: 33 06 b5 02  	mul	a2, a0, a1
8020e13a: 23 3c c4 fa  	sd	a2, -0x48(s0)
8020e13e: 33 35 b5 02  	mulhu	a0, a0, a1
8020e142: 1d e9        	bnez	a0, 0x8020e178 <.Lpcrel_hi19>
8020e144: 31 a8        	j	0x8020e160 <.Lpcrel_hi18+0x12>

000000008020e146 <.Lpcrel_hi17>:
8020e146: 17 75 02 00  	auipc	a0, 0x27
8020e14a: 13 05 a5 75  	addi	a0, a0, 0x75a

000000008020e14e <.Lpcrel_hi18>:
8020e14e: 97 75 02 00  	auipc	a1, 0x27
8020e152: 13 86 a5 73  	addi	a2, a1, 0x73a
8020e156: f1 45        	li	a1, 0x1c
8020e158: 97 20 02 00  	auipc	ra, 0x22
8020e15c: e7 80 00 0c  	jalr	0xc0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e160: 83 35 84 fb  	ld	a1, -0x48(s0)
;         self.inner_mut().kstack = kstack!(self.pid());
8020e164: 13 95 c5 00  	slli	a0, a1, 0xc
8020e168: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020e16c: 13 95 c5 00  	slli	a0, a1, 0xc
8020e170: 31 81        	srli	a0, a0, 0xc
8020e172: 63 1e b5 02  	bne	a0, a1, 0x8020e1ae <.Lpcrel_hi21>
8020e176: 39 a8        	j	0x8020e194 <.Lpcrel_hi20+0x14>

000000008020e178 <.Lpcrel_hi19>:
8020e178: 17 75 02 00  	auipc	a0, 0x27
8020e17c: 13 05 85 74  	addi	a0, a0, 0x748

000000008020e180 <.Lpcrel_hi20>:
8020e180: 97 75 02 00  	auipc	a1, 0x27
8020e184: 13 86 85 70  	addi	a2, a1, 0x708
8020e188: 93 05 10 02  	li	a1, 0x21
8020e18c: 97 20 02 00  	auipc	ra, 0x22
8020e190: e7 80 c0 08  	jalr	0x8c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e194: 83 35 04 fb  	ld	a1, -0x50(s0)
8020e198: 37 05 00 02  	lui	a0, 0x2000
8020e19c: 7d 35        	addiw	a0, a0, -0x1
8020e19e: 36 05        	slli	a0, a0, 0xd
;         self.inner_mut().kstack = kstack!(self.pid());
8020e1a0: 33 06 b5 40  	sub	a2, a0, a1
8020e1a4: 23 34 c4 fa  	sd	a2, -0x58(s0)
8020e1a8: 63 61 b5 06  	bltu	a0, a1, 0x8020e20a <.Lpcrel_hi23>
8020e1ac: 39 a8        	j	0x8020e1ca <.Lpcrel_hi22+0x14>

000000008020e1ae <.Lpcrel_hi21>:
8020e1ae: 17 75 02 00  	auipc	a0, 0x27
8020e1b2: 13 05 25 71  	addi	a0, a0, 0x712

000000008020e1b6 <.Lpcrel_hi22>:
8020e1b6: 97 75 02 00  	auipc	a1, 0x27
8020e1ba: 13 86 25 6d  	addi	a2, a1, 0x6d2
8020e1be: 93 05 10 02  	li	a1, 0x21
8020e1c2: 97 20 02 00  	auipc	ra, 0x22
8020e1c6: e7 80 60 05  	jalr	0x56(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e1ca: 03 35 84 fc  	ld	a0, -0x38(s0)
;         self.inner_mut().kstack = kstack!(self.pid());
8020e1ce: 97 00 00 00  	auipc	ra, 0x0
8020e1d2: e7 80 80 05  	jalr	0x58(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e1d6: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020e1da: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020e1de: 13 05 84 fd  	addi	a0, s0, -0x28
8020e1e2: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020e1e6: 97 30 ff ff  	auipc	ra, 0xffff3
8020e1ea: e7 80 00 9b  	jalr	-0x650(ra) <ekernel+0xffcb3b96>
8020e1ee: 83 35 84 fa  	ld	a1, -0x58(s0)
8020e1f2: 2a 86        	mv	a2, a0
8020e1f4: 03 35 04 fa  	ld	a0, -0x60(s0)
8020e1f8: 2c e6        	sd	a1, 0x48(a2)
8020e1fa: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e1fe: e7 80 60 01  	jalr	0x16(ra) <ekernel+0xffcbb210>
8020e202: e6 60        	ld	ra, 0x58(sp)
8020e204: 46 64        	ld	s0, 0x50(sp)
;     }   
8020e206: 25 61        	addi	sp, sp, 0x60
8020e208: 82 80        	ret

000000008020e20a <.Lpcrel_hi23>:
;         self.inner_mut().kstack = kstack!(self.pid());
8020e20a: 17 75 02 00  	auipc	a0, 0x27
8020e20e: 13 05 65 6e  	addi	a0, a0, 0x6e6

000000008020e212 <.Lpcrel_hi24>:
8020e212: 97 75 02 00  	auipc	a1, 0x27
8020e216: 13 86 65 67  	addi	a2, a1, 0x676
8020e21a: 93 05 10 02  	li	a1, 0x21
8020e21e: 97 20 02 00  	auipc	ra, 0x22
8020e222: e7 80 a0 ff  	jalr	-0x6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020e226 <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>:
;     pub fn inner_mut(&self) -> RefMut<'_,TcbInner>{
8020e226: 01 11        	addi	sp, sp, -0x20
8020e228: 06 ec        	sd	ra, 0x18(sp)
8020e22a: 22 e8        	sd	s0, 0x10(sp)
8020e22c: 00 10        	addi	s0, sp, 0x20
8020e22e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.inner.exclusive_access()
8020e232: 13 05 05 04  	addi	a0, a0, 0x40
8020e236: 97 70 ff ff  	auipc	ra, 0xffff7
8020e23a: e7 80 00 3b  	jalr	0x3b0(ra) <ekernel+0xffcb85e6>
8020e23e: e2 60        	ld	ra, 0x18(sp)
8020e240: 42 64        	ld	s0, 0x10(sp)
;     }
8020e242: 05 61        	addi	sp, sp, 0x20
8020e244: 82 80        	ret

000000008020e246 <_ZN2os4task4task16TaskControlBlock13get_trapframe17h5eacf2fb51701e7bE>:
;     pub fn get_trapframe(&self) -> &mut TrapFrame{
8020e246: 5d 71        	addi	sp, sp, -0x50
8020e248: 86 e4        	sd	ra, 0x48(sp)
8020e24a: a2 e0        	sd	s0, 0x40(sp)
8020e24c: 80 08        	addi	s0, sp, 0x50
8020e24e: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             (*self.inner_mut().trapframe.as_mut().unwrap()) as *const _ as usize
8020e252: 97 00 00 00  	auipc	ra, 0x0
8020e256: e7 80 40 fd  	jalr	-0x2c(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e25a: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020e25e: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020e262: 13 05 84 fb  	addi	a0, s0, -0x48
8020e266: 97 30 ff ff  	auipc	ra, 0xffff3
8020e26a: e7 80 00 93  	jalr	-0x6d0(ra) <ekernel+0xffcb3b96>
8020e26e: 13 05 85 05  	addi	a0, a0, 0x58
8020e272: 97 70 ff ff  	auipc	ra, 0xffff7
8020e276: e7 80 a0 b7  	jalr	-0x486(ra) <ekernel+0xffcb7dec>
8020e27a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
8020e27e: 03 35 04 fe  	ld	a0, -0x20(s0)
8020e282: 11 e9        	bnez	a0, 0x8020e296 <.Lpcrel_hi25+0x10>
8020e284: 09 a0        	j	0x8020e286 <.Lpcrel_hi25>

000000008020e286 <.Lpcrel_hi25>:
;             None => unwrap_failed(),
8020e286: 17 75 02 00  	auipc	a0, 0x27
8020e28a: 13 05 25 69  	addi	a0, a0, 0x692
8020e28e: 97 30 02 00  	auipc	ra, 0x23
8020e292: e7 80 a0 a3  	jalr	-0x5c6(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020e296: 03 35 04 fe  	ld	a0, -0x20(s0)
8020e29a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             (*self.inner_mut().trapframe.as_mut().unwrap()) as *const _ as usize
8020e29e: 08 61        	ld	a0, 0x0(a0)
8020e2a0: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020e2a4: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020e2a8: 13 05 84 fb  	addi	a0, s0, -0x48
;         }; 
8020e2ac: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e2b0: e7 80 40 f6  	jalr	-0x9c(ra) <ekernel+0xffcbb210>
8020e2b4: 03 35 04 fb  	ld	a0, -0x50(s0)
;         PhyPageNum(ppn).get_mut()
8020e2b8: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020e2bc: 13 05 84 fc  	addi	a0, s0, -0x38
8020e2c0: 97 80 ff ff  	auipc	ra, 0xffff8
8020e2c4: e7 80 60 7e  	jalr	0x7e6(ra) <ekernel+0xffcb9aa6>
8020e2c8: a6 60        	ld	ra, 0x48(sp)
8020e2ca: 06 64        	ld	s0, 0x40(sp)
;     }
8020e2cc: 61 61        	addi	sp, sp, 0x50
8020e2ce: 82 80        	ret

000000008020e2d0 <_ZN2os4task4task16TaskControlBlock13set_pagetable17hf72fd52bbc6df0b4E>:
;     pub fn set_pagetable(&self, pagetable_ptr:Box<PageTable>){
8020e2d0: 39 71        	addi	sp, sp, -0x40
8020e2d2: 06 fc        	sd	ra, 0x38(sp)
8020e2d4: 22 f8        	sd	s0, 0x30(sp)
8020e2d6: 80 00        	addi	s0, sp, 0x40
8020e2d8: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020e2dc: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020e2e0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.inner_mut().set_pagetable(pagetable_ptr);
8020e2e4: 97 00 00 00  	auipc	ra, 0x0
8020e2e8: e7 80 20 f4  	jalr	-0xbe(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e2ec: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e2f0: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020e2f4: 13 05 04 fd  	addi	a0, s0, -0x30
8020e2f8: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020e2fc: 97 30 ff ff  	auipc	ra, 0xffff3
8020e300: e7 80 a0 89  	jalr	-0x766(ra) <ekernel+0xffcb3b96>
8020e304: 83 35 04 fc  	ld	a1, -0x40(s0)
8020e308: 97 f0 ff ff  	auipc	ra, 0xfffff
8020e30c: e7 80 00 7b  	jalr	0x7b0(ra) <ekernel+0xffcc0ab8>
8020e310: 03 35 84 fc  	ld	a0, -0x38(s0)
8020e314: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e318: e7 80 c0 ef  	jalr	-0x104(ra) <ekernel+0xffcbb210>
8020e31c: e2 70        	ld	ra, 0x38(sp)
8020e31e: 42 74        	ld	s0, 0x30(sp)
;     }
8020e320: 21 61        	addi	sp, sp, 0x40
8020e322: 82 80        	ret

000000008020e324 <_ZN2os4task4task16TaskControlBlock8map_trap17hbe225f60b81fcd0bE>:
;     pub fn map_trap(&self){
8020e324: 79 71        	addi	sp, sp, -0x30
8020e326: 06 f4        	sd	ra, 0x28(sp)
8020e328: 22 f0        	sd	s0, 0x20(sp)
8020e32a: 00 18        	addi	s0, sp, 0x30
8020e32c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.inner_mut().map_trap();
8020e330: 97 00 00 00  	auipc	ra, 0x0
8020e334: e7 80 60 ef  	jalr	-0x10a(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e338: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020e33c: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020e340: 13 05 84 fd  	addi	a0, s0, -0x28
8020e344: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e348: 97 30 ff ff  	auipc	ra, 0xffff3
8020e34c: e7 80 e0 84  	jalr	-0x7b2(ra) <ekernel+0xffcb3b96>
8020e350: 97 00 00 00  	auipc	ra, 0x0
8020e354: e7 80 c0 a0  	jalr	-0x5f4(ra) <_ZN2os4task4task8TcbInner8map_trap17he47faea885136c11E>
8020e358: 03 35 04 fd  	ld	a0, -0x30(s0)
8020e35c: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e360: e7 80 40 eb  	jalr	-0x14c(ra) <ekernel+0xffcbb210>
8020e364: a2 70        	ld	ra, 0x28(sp)
8020e366: 02 74        	ld	s0, 0x20(sp)
;     }
8020e368: 45 61        	addi	sp, sp, 0x30
8020e36a: 82 80        	ret

000000008020e36c <_ZN2os4task4task16TaskControlBlock14pagetable_root17h7d6796303b5a7f29E>:
;     pub fn pagetable_root(&self) -> PhyPageNum {
8020e36c: 39 71        	addi	sp, sp, -0x40
8020e36e: 06 fc        	sd	ra, 0x38(sp)
8020e370: 22 f8        	sd	s0, 0x30(sp)
8020e372: 80 00        	addi	s0, sp, 0x40
8020e374: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.inner_mut().pagetable_root()
8020e378: 97 00 00 00  	auipc	ra, 0x0
8020e37c: e7 80 e0 ea  	jalr	-0x152(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e380: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020e384: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020e388: 13 05 84 fd  	addi	a0, s0, -0x28
8020e38c: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020e390: 97 30 ff ff  	auipc	ra, 0xffff3
8020e394: e7 80 60 80  	jalr	-0x7fa(ra) <ekernel+0xffcb3b96>
8020e398: 97 f0 ff ff  	auipc	ra, 0xfffff
8020e39c: e7 80 80 7d  	jalr	0x7d8(ra) <ekernel+0xffcc0b70>
8020e3a0: aa 85        	mv	a1, a0
8020e3a2: 03 35 84 fc  	ld	a0, -0x38(s0)
8020e3a6: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     }
8020e3aa: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e3ae: e7 80 60 e6  	jalr	-0x19a(ra) <ekernel+0xffcbb210>
8020e3b2: 03 35 04 fd  	ld	a0, -0x30(s0)
8020e3b6: e2 70        	ld	ra, 0x38(sp)
8020e3b8: 42 74        	ld	s0, 0x30(sp)
8020e3ba: 21 61        	addi	sp, sp, 0x40
8020e3bc: 82 80        	ret

000000008020e3be <_ZN2os4task4task16TaskControlBlock17new_set_trapframe17h9c6c4d802d84035bE>:
;     pub fn new_set_trapframe(&self,gurd:AllocerGuard){
8020e3be: 39 71        	addi	sp, sp, -0x40
8020e3c0: 06 fc        	sd	ra, 0x38(sp)
8020e3c2: 22 f8        	sd	s0, 0x30(sp)
8020e3c4: 80 00        	addi	s0, sp, 0x40
8020e3c6: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020e3ca: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020e3ce: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.inner_mut().new_set_trapframe(gurd);
8020e3d2: 97 00 00 00  	auipc	ra, 0x0
8020e3d6: e7 80 40 e5  	jalr	-0x1ac(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e3da: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e3de: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020e3e2: 13 05 04 fd  	addi	a0, s0, -0x30
8020e3e6: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020e3ea: 97 20 ff ff  	auipc	ra, 0xffff2
8020e3ee: e7 80 c0 7a  	jalr	0x7ac(ra) <ekernel+0xffcb3b96>
8020e3f2: 83 35 04 fc  	ld	a1, -0x40(s0)
8020e3f6: 97 f0 ff ff  	auipc	ra, 0xfffff
8020e3fa: e7 80 40 7c  	jalr	0x7c4(ra) <ekernel+0xffcc0bba>
8020e3fe: 03 35 84 fc  	ld	a0, -0x38(s0)
8020e402: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e406: e7 80 e0 e0  	jalr	-0x1f2(ra) <ekernel+0xffcbb210>
8020e40a: e2 70        	ld	ra, 0x38(sp)
8020e40c: 42 74        	ld	s0, 0x30(sp)
;     }
8020e40e: 21 61        	addi	sp, sp, 0x40
8020e410: 82 80        	ret

000000008020e412 <_ZN2os4task4task16TaskControlBlock12set_fork_tfm17hbe555267342d1b45E>:
;     pub fn set_fork_tfm(&self,tfm:&'static mut TrapFrame ){
8020e412: 39 71        	addi	sp, sp, -0x40
8020e414: 06 fc        	sd	ra, 0x38(sp)
8020e416: 22 f8        	sd	s0, 0x30(sp)
8020e418: 80 00        	addi	s0, sp, 0x40
8020e41a: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020e41e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020e422: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.inner_mut().set_fork_tfm(tfm);
8020e426: 97 00 00 00  	auipc	ra, 0x0
8020e42a: e7 80 00 e0  	jalr	-0x200(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e42e: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e432: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020e436: 13 05 04 fd  	addi	a0, s0, -0x30
8020e43a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020e43e: 97 20 ff ff  	auipc	ra, 0xffff2
8020e442: e7 80 80 75  	jalr	0x758(ra) <ekernel+0xffcb3b96>
8020e446: 83 35 04 fc  	ld	a1, -0x40(s0)
8020e44a: 97 f0 ff ff  	auipc	ra, 0xfffff
8020e44e: e7 80 a0 6f  	jalr	0x6fa(ra) <ekernel+0xffcc0b44>
8020e452: 03 35 84 fc  	ld	a0, -0x38(s0)
8020e456: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e45a: e7 80 a0 db  	jalr	-0x246(ra) <ekernel+0xffcbb210>
8020e45e: e2 70        	ld	ra, 0x38(sp)
8020e460: 42 74        	ld	s0, 0x30(sp)
;     }
8020e462: 21 61        	addi	sp, sp, 0x40
8020e464: 82 80        	ret

000000008020e466 <_ZN2os4task4task16TaskControlBlock4name17h5380dd40b166d098E>:
;     pub fn name(&self) -> String {
8020e466: 39 71        	addi	sp, sp, -0x40
8020e468: 06 fc        	sd	ra, 0x38(sp)
8020e46a: 22 f8        	sd	s0, 0x30(sp)
8020e46c: 80 00        	addi	s0, sp, 0x40
8020e46e: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020e472: aa 85        	mv	a1, a0
8020e474: 03 35 04 fc  	ld	a0, -0x40(s0)
8020e478: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020e47c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.inner_mut().name()
8020e480: 97 00 00 00  	auipc	ra, 0x0
8020e484: e7 80 60 da  	jalr	-0x25a(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e488: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020e48c: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020e490: 13 05 84 fd  	addi	a0, s0, -0x28
8020e494: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e498: 97 20 ff ff  	auipc	ra, 0xffff2
8020e49c: e7 80 e0 6f  	jalr	0x6fe(ra) <ekernel+0xffcb3b96>
8020e4a0: aa 85        	mv	a1, a0
8020e4a2: 03 35 84 fc  	ld	a0, -0x38(s0)
8020e4a6: 97 00 00 00  	auipc	ra, 0x0
8020e4aa: e7 80 a0 89  	jalr	-0x766(ra) <_ZN2os4task4task8TcbInner4name17hafa6c31897b7d0a4E>
8020e4ae: 03 35 04 fd  	ld	a0, -0x30(s0)
;     }
8020e4b2: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e4b6: e7 80 e0 d5  	jalr	-0x2a2(ra) <ekernel+0xffcbb210>
8020e4ba: e2 70        	ld	ra, 0x38(sp)
8020e4bc: 42 74        	ld	s0, 0x30(sp)
8020e4be: 21 61        	addi	sp, sp, 0x40
8020e4c0: 82 80        	ret

000000008020e4c2 <_ZN2os4task4task16TaskControlBlock9set_state17h3bfcdec3627fd129E>:
;     pub fn set_state(&self,state:State){
8020e4c2: 39 71        	addi	sp, sp, -0x40
8020e4c4: 06 fc        	sd	ra, 0x38(sp)
8020e4c6: 22 f8        	sd	s0, 0x30(sp)
8020e4c8: 80 00        	addi	s0, sp, 0x40
8020e4ca: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020e4ce: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020e4d2: a3 07 b4 fe  	sb	a1, -0x11(s0)
;         unsafe { self.out_data.lock().set_state(state) };
8020e4d6: 97 50 00 00  	auipc	ra, 0x5
8020e4da: e7 80 20 a2  	jalr	-0x5de(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7cf5583f2d8e897eE>
8020e4de: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e4e2: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020e4e6: 13 05 04 fd  	addi	a0, s0, -0x30
8020e4ea: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020e4ee: 97 50 00 00  	auipc	ra, 0x5
8020e4f2: e7 80 60 75  	jalr	0x756(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hddcb379c916be380E>
8020e4f6: 83 35 04 fc  	ld	a1, -0x40(s0)
8020e4fa: 97 00 00 00  	auipc	ra, 0x0
8020e4fe: e7 80 80 9c  	jalr	-0x638(ra) <_ZN2os4task4task6TcbOut9set_state17hfcedb7c259177b86E>
8020e502: 03 35 84 fc  	ld	a0, -0x38(s0)
8020e506: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e50a: e7 80 c0 e2  	jalr	-0x1d4(ra) <ekernel+0xffcbb332>
8020e50e: e2 70        	ld	ra, 0x38(sp)
8020e510: 42 74        	ld	s0, 0x30(sp)
;     }
8020e512: 21 61        	addi	sp, sp, 0x40
8020e514: 82 80        	ret

000000008020e516 <_ZN2os4task4task16TaskControlBlock12set_new_file17h314810a303be1249E>:
;     pub fn set_new_file(&self,files:Vec<Option<Arc<dyn File + Send + Sync>>>){
8020e516: 39 71        	addi	sp, sp, -0x40
8020e518: 06 fc        	sd	ra, 0x38(sp)
8020e51a: 22 f8        	sd	s0, 0x30(sp)
8020e51c: 80 00        	addi	s0, sp, 0x40
8020e51e: 23 34 b4 fc  	sd	a1, -0x38(s0)
8020e522: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.inner_mut().set_new_file(files);
8020e526: 97 00 00 00  	auipc	ra, 0x0
8020e52a: e7 80 00 d0  	jalr	-0x300(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e52e: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020e532: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020e536: 13 05 84 fd  	addi	a0, s0, -0x28
8020e53a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e53e: 97 20 ff ff  	auipc	ra, 0xffff2
8020e542: e7 80 80 65  	jalr	0x658(ra) <ekernel+0xffcb3b96>
8020e546: 83 35 84 fc  	ld	a1, -0x38(s0)
8020e54a: 97 f0 ff ff  	auipc	ra, 0xfffff
8020e54e: e7 80 40 72  	jalr	0x724(ra) <ekernel+0xffcc0c6e>
8020e552: 03 35 04 fd  	ld	a0, -0x30(s0)
;         self.inner_mut().set_new_file(files);
8020e556: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e55a: e7 80 a0 cb  	jalr	-0x346(ra) <ekernel+0xffcbb210>
8020e55e: e2 70        	ld	ra, 0x38(sp)
8020e560: 42 74        	ld	s0, 0x30(sp)
;     }
8020e562: 21 61        	addi	sp, sp, 0x40
8020e564: 82 80        	ret

000000008020e566 <_ZN2os4task4task16TaskControlBlock8fork_tcb17h49e09df37b629ebbE>:
;     pub fn fork_tcb(
8020e566: 45 71        	addi	sp, sp, -0x1d0
8020e568: 86 e7        	sd	ra, 0x1c8(sp)
8020e56a: a2 e3        	sd	s0, 0x1c0(sp)
8020e56c: 80 0b        	addi	s0, sp, 0x1d0
8020e56e: 23 34 14 e7  	sd	a7, -0x198(s0)
8020e572: 23 30 04 e7  	sd	a6, -0x1a0(s0)
8020e576: 23 3c f4 e4  	sd	a5, -0x1a8(s0)
8020e57a: 23 38 e4 e2  	sd	a4, -0x1d0(s0)
8020e57e: 23 38 d4 e4  	sd	a3, -0x1b0(s0)
8020e582: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
8020e586: 23 30 b4 e4  	sd	a1, -0x1c0(s0)
8020e58a: 2a 87        	mv	a4, a0
8020e58c: 03 35 04 e3  	ld	a0, -0x1d0(s0)
8020e590: 23 3c e4 e6  	sd	a4, -0x188(s0)
8020e594: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020e598: 23 34 c4 fc  	sd	a2, -0x38(s0)
8020e59c: 23 38 d4 fc  	sd	a3, -0x30(s0)
8020e5a0: a3 0f f4 fc  	sb	a5, -0x21(s0)
;         let static_name = Box::leak(new_name.into_boxed_str());
8020e5a4: 97 e0 ff ff  	auipc	ra, 0xffffe
8020e5a8: e7 80 a0 98  	jalr	-0x676(ra) <ekernel+0xffcbef2e>
8020e5ac: 97 40 00 00  	auipc	ra, 0x4
8020e5b0: e7 80 a0 c7  	jalr	-0x386(ra) <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h62189f2a7ebe8634E>
8020e5b4: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8020e5b8: 2e 86        	mv	a2, a1
8020e5ba: 83 35 84 e3  	ld	a1, -0x1c8(s0)
8020e5be: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020e5c2: 23 34 c4 fe  	sd	a2, -0x18(s0)
8020e5c6: 13 05 84 e8  	addi	a0, s0, -0x178
8020e5ca: 23 30 a4 e8  	sd	a0, -0x180(s0)
;         let new_tcb = Self::new(static_name);
8020e5ce: 97 00 00 00  	auipc	ra, 0x0
8020e5d2: e7 80 c0 98  	jalr	-0x674(ra) <_ZN2os4task4task16TaskControlBlock3new17he269136b58977472E>
8020e5d6: 83 35 04 e4  	ld	a1, -0x1c0(s0)
8020e5da: 03 35 04 e8  	ld	a0, -0x180(s0)
;         new_tcb.set_pagetable(new_pgtbl_ptr);
8020e5de: 97 00 00 00  	auipc	ra, 0x0
8020e5e2: e7 80 20 cf  	jalr	-0x30e(ra) <_ZN2os4task4task16TaskControlBlock13set_pagetable17hf72fd52bbc6df0b4E>
8020e5e6: 83 35 84 e4  	ld	a1, -0x1b8(s0)
8020e5ea: 03 35 04 e8  	ld	a0, -0x180(s0)
;         new_tcb.set_pid(new_pid);
8020e5ee: 97 00 00 00  	auipc	ra, 0x0
8020e5f2: e7 80 00 a3  	jalr	-0x5d0(ra) <_ZN2os4task4task16TaskControlBlock7set_pid17h5f5ee807281140cbE>
8020e5f6: 03 35 04 e8  	ld	a0, -0x180(s0)
;         new_tcb.set_kstack();
8020e5fa: 97 00 00 00  	auipc	ra, 0x0
8020e5fe: e7 80 c0 ae  	jalr	-0x514(ra) <_ZN2os4task4task16TaskControlBlock10set_kstack17ha40936679fb412ffE>
8020e602: 83 35 04 e5  	ld	a1, -0x1b0(s0)
8020e606: 03 35 04 e8  	ld	a0, -0x180(s0)
;         new_tcb.set_fork_tfm(new_trapframe);
8020e60a: 97 00 00 00  	auipc	ra, 0x0
8020e60e: e7 80 80 e0  	jalr	-0x1f8(ra) <_ZN2os4task4task16TaskControlBlock12set_fork_tfm17hbe555267342d1b45E>
8020e612: 83 35 84 e5  	ld	a1, -0x1a8(s0)
8020e616: 03 35 04 e8  	ld	a0, -0x180(s0)
;         new_tcb.set_state(new_state);
8020e61a: 97 00 00 00  	auipc	ra, 0x0
8020e61e: e7 80 80 ea  	jalr	-0x158(ra) <_ZN2os4task4task16TaskControlBlock9set_state17h3bfcdec3627fd129E>
8020e622: 83 35 04 e6  	ld	a1, -0x1a0(s0)
8020e626: 03 35 04 e8  	ld	a0, -0x180(s0)
;         new_tcb.set_new_file(new_file);
8020e62a: 97 00 00 00  	auipc	ra, 0x0
8020e62e: e7 80 c0 ee  	jalr	-0x114(ra) <_ZN2os4task4task16TaskControlBlock12set_new_file17h314810a303be1249E>
8020e632: 03 35 04 e8  	ld	a0, -0x180(s0)
;         new_tcb.inner_mut().context = new_context;
8020e636: 97 00 00 00  	auipc	ra, 0x0
8020e63a: e7 80 00 bf  	jalr	-0x410(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e63e: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020e642: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020e646: 13 05 04 fb  	addi	a0, s0, -0x50
8020e64a: 23 38 a4 e6  	sd	a0, -0x190(s0)
8020e64e: 97 20 ff ff  	auipc	ra, 0xffff2
8020e652: e7 80 80 54  	jalr	0x548(ra) <ekernel+0xffcb3b96>
8020e656: 83 35 84 e6  	ld	a1, -0x198(s0)
8020e65a: 13 05 85 06  	addi	a0, a0, 0x68
8020e65e: 13 06 00 07  	li	a2, 0x70
8020e662: 97 30 02 00  	auipc	ra, 0x23
8020e666: e7 80 c0 60  	jalr	0x60c(ra) <memcpy>
8020e66a: 03 35 04 e7  	ld	a0, -0x190(s0)
;         new_tcb.inner_mut().context = new_context;
8020e66e: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e672: e7 80 20 ba  	jalr	-0x45e(ra) <ekernel+0xffcbb210>
8020e676: 03 35 84 e7  	ld	a0, -0x188(s0)
8020e67a: 83 35 04 e8  	ld	a1, -0x180(s0)
8020e67e: 13 06 80 12  	li	a2, 0x128
;         new_tcb
8020e682: 97 30 02 00  	auipc	ra, 0x23
8020e686: e7 80 c0 5e  	jalr	0x5ec(ra) <memcpy>
8020e68a: be 60        	ld	ra, 0x1c8(sp)
8020e68c: 1e 64        	ld	s0, 0x1c0(sp)
;     }
8020e68e: 79 61        	addi	sp, sp, 0x1d0
8020e690: 82 80        	ret

000000008020e692 <_ZN2os4task4task16TaskControlBlock4fork17hc04b4183a208e783E>:
;     pub fn fork(self: &Arc<TaskControlBlock>) -> Arc<TaskControlBlock>{
8020e692: 13 01 01 a0  	addi	sp, sp, -0x600
8020e696: 23 3c 11 5e  	sd	ra, 0x5f8(sp)
8020e69a: 23 38 81 5e  	sd	s0, 0x5f0(sp)
8020e69e: 13 04 01 60  	addi	s0, sp, 0x600
8020e6a2: 23 38 a4 ae  	sd	a0, -0x510(s0)
8020e6a6: 23 30 a4 f8  	sd	a0, -0x80(s0)

000000008020e6aa <.Lpcrel_hi26>:
;         let new_pid = unsafe {TASKMANGER.lock().alloc_pid().unwrap()};
8020e6aa: 17 95 02 00  	auipc	a0, 0x29
8020e6ae: 13 05 e5 c9  	addi	a0, a0, -0x362
8020e6b2: 97 a0 00 00  	auipc	ra, 0xa
8020e6b6: e7 80 80 22  	jalr	0x228(ra) <_ZN73_$LT$os..task..manager..TASKMANGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13a6a188e04fdd86E>
8020e6ba: 97 50 00 00  	auipc	ra, 0x5
8020e6be: e7 80 a0 ac  	jalr	-0x536(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17ha7c692bd7ee4f1cfE>
8020e6c2: 23 3c a4 ae  	sd	a0, -0x508(s0)
8020e6c6: 23 30 b4 b0  	sd	a1, -0x500(s0)
8020e6ca: 13 05 84 af  	addi	a0, s0, -0x508
8020e6ce: 97 50 00 00  	auipc	ra, 0x5
8020e6d2: e7 80 a0 4e  	jalr	0x4ea(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2f6946418d8b1239E>
8020e6d6: 97 a0 00 00  	auipc	ra, 0xa
8020e6da: e7 80 20 a2  	jalr	-0x5de(ra) <_ZN2os4task7manager11TaskManager9alloc_pid17h9007d27593a79ed1E>
8020e6de: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020e6e2: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         match self {
8020e6e6: 03 35 04 fd  	ld	a0, -0x30(s0)
8020e6ea: 11 e9        	bnez	a0, 0x8020e6fe <.Lpcrel_hi27+0x10>
8020e6ec: 09 a0        	j	0x8020e6ee <.Lpcrel_hi27>

000000008020e6ee <.Lpcrel_hi27>:
;             None => unwrap_failed(),
8020e6ee: 17 75 02 00  	auipc	a0, 0x27
8020e6f2: 13 05 25 24  	addi	a0, a0, 0x242
8020e6f6: 97 20 02 00  	auipc	ra, 0x22
8020e6fa: e7 80 20 5d  	jalr	0x5d2(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020e6fe: 03 35 84 fd  	ld	a0, -0x28(s0)
8020e702: 23 38 a4 ac  	sd	a0, -0x530(s0)
8020e706: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let new_pid = unsafe {TASKMANGER.lock().alloc_pid().unwrap()};
8020e70a: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020e70e: 13 05 84 af  	addi	a0, s0, -0x508
8020e712: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e716: e7 80 00 e1  	jalr	-0x1f0(ra) <ekernel+0xffcbb522>
8020e71a: 03 35 04 af  	ld	a0, -0x510(s0)
;         let mut new_pgtbl_ptr = Box::new(fork_cow(self.inner_mut().pagetable()));
8020e71e: 97 30 ff ff  	auipc	ra, 0xffff3
8020e722: e7 80 e0 6a  	jalr	0x6ae(ra) <ekernel+0xffcb4dcc>
8020e726: 97 00 00 00  	auipc	ra, 0x0
8020e72a: e7 80 00 b0  	jalr	-0x500(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e72e: 23 30 a4 b4  	sd	a0, -0x4c0(s0)
8020e732: 23 34 b4 b4  	sd	a1, -0x4b8(s0)
8020e736: 13 05 04 b4  	addi	a0, s0, -0x4c0
8020e73a: 23 3c a4 ac  	sd	a0, -0x528(s0)
8020e73e: 97 20 ff ff  	auipc	ra, 0xffff2
8020e742: e7 80 80 45  	jalr	0x458(ra) <ekernel+0xffcb3b96>
8020e746: 97 f0 ff ff  	auipc	ra, 0xfffff
8020e74a: e7 80 60 3a  	jalr	0x3a6(ra) <ekernel+0xffcc0aec>
8020e74e: aa 85        	mv	a1, a0
8020e750: 13 05 84 b0  	addi	a0, s0, -0x4f8
8020e754: 97 10 00 00  	auipc	ra, 0x1
8020e758: e7 80 20 95  	jalr	-0x6ae(ra) <_ZN2os4task4task8fork_cow17hbfa4228c329fffb0E>
8020e75c: 13 05 80 03  	li	a0, 0x38
8020e760: a1 45        	li	a1, 0x8
;         Box::new(x)
8020e762: 97 c0 ff ff  	auipc	ra, 0xffffc
8020e766: e7 80 00 32  	jalr	0x320(ra) <ekernel+0xffcbda82>
8020e76a: aa 85        	mv	a1, a0
8020e76c: 03 35 84 ad  	ld	a0, -0x528(s0)
8020e770: 23 34 b4 ae  	sd	a1, -0x518(s0)
8020e774: 2e 86        	mv	a2, a1
8020e776: 23 30 c4 ae  	sd	a2, -0x520(s0)
8020e77a: 03 36 84 b3  	ld	a2, -0x4c8(s0)
8020e77e: 90 f9        	sd	a2, 0x30(a1)
8020e780: 03 36 04 b3  	ld	a2, -0x4d0(s0)
8020e784: 90 f5        	sd	a2, 0x28(a1)
8020e786: 03 36 84 b2  	ld	a2, -0x4d8(s0)
8020e78a: 90 f1        	sd	a2, 0x20(a1)
8020e78c: 03 36 04 b2  	ld	a2, -0x4e0(s0)
8020e790: 90 ed        	sd	a2, 0x18(a1)
8020e792: 03 36 84 b1  	ld	a2, -0x4e8(s0)
8020e796: 90 e9        	sd	a2, 0x10(a1)
8020e798: 03 36 04 b1  	ld	a2, -0x4f0(s0)
8020e79c: 90 e5        	sd	a2, 0x8(a1)
8020e79e: 03 36 84 b0  	ld	a2, -0x4f8(s0)
8020e7a2: 90 e1        	sd	a2, 0x0(a1)
;         let mut new_pgtbl_ptr = Box::new(fork_cow(self.inner_mut().pagetable()));
8020e7a4: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020e7a8: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e7ac: e7 80 80 a6  	jalr	-0x598(ra) <ekernel+0xffcbb210>
8020e7b0: 03 35 84 ae  	ld	a0, -0x518(s0)
8020e7b4: b7 05 00 02  	lui	a1, 0x2000
8020e7b8: fd 35        	addiw	a1, a1, -0x1
8020e7ba: b6 05        	slli	a1, a1, 0xd
;         let new_trapframe:&mut TrapFrame = PhyPageNum(new_pgtbl_ptr.walk_addr(TRAPFRAME).unwrap()).get_mut();
8020e7bc: 97 e0 ff ff  	auipc	ra, 0xffffe
8020e7c0: e7 80 60 4e  	jalr	0x4e6(ra) <ekernel+0xffcbfca2>
8020e7c4: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020e7c8: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         match self {
8020e7cc: 03 35 84 fb  	ld	a0, -0x48(s0)
8020e7d0: 11 e9        	bnez	a0, 0x8020e7e4 <.Lpcrel_hi28+0x10>
8020e7d2: 09 a0        	j	0x8020e7d4 <.Lpcrel_hi28>

000000008020e7d4 <.Lpcrel_hi28>:
;             None => unwrap_failed(),
8020e7d4: 17 75 02 00  	auipc	a0, 0x27
8020e7d8: 13 05 45 17  	addi	a0, a0, 0x174
8020e7dc: 97 20 02 00  	auipc	ra, 0x22
8020e7e0: e7 80 c0 4e  	jalr	0x4ec(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8020e7e4: 03 35 04 fc  	ld	a0, -0x40(s0)
8020e7e8: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         let new_trapframe:&mut TrapFrame = PhyPageNum(new_pgtbl_ptr.walk_addr(TRAPFRAME).unwrap()).get_mut();
8020e7ec: 23 38 a4 b4  	sd	a0, -0x4b0(s0)
8020e7f0: 13 05 04 b5  	addi	a0, s0, -0x4b0
8020e7f4: 97 80 ff ff  	auipc	ra, 0xffff8
8020e7f8: e7 80 20 2b  	jalr	0x2b2(ra) <ekernel+0xffcb9aa6>
8020e7fc: aa 85        	mv	a1, a0
8020e7fe: 03 35 04 af  	ld	a0, -0x510(s0)
8020e802: 2e 86        	mv	a2, a1
8020e804: 23 30 c4 ac  	sd	a2, -0x540(s0)
8020e808: 23 3c b4 f8  	sd	a1, -0x68(s0)
;         let new_name = self.name();
8020e80c: 97 30 ff ff  	auipc	ra, 0xffff3
8020e810: e7 80 00 5c  	jalr	0x5c0(ra) <ekernel+0xffcb4dcc>
8020e814: aa 85        	mv	a1, a0
8020e816: 13 05 84 b5  	addi	a0, s0, -0x4a8
8020e81a: 97 00 00 00  	auipc	ra, 0x0
8020e81e: e7 80 c0 c4  	jalr	-0x3b4(ra) <_ZN2os4task4task16TaskControlBlock4name17h5380dd40b166d098E>
8020e822: 03 35 04 ad  	ld	a0, -0x530(s0)
8020e826: 85 45        	li	a1, 0x1
;         let new_state = State::Ready;
8020e828: a3 0b b4 b6  	sb	a1, -0x489(s0)
;         let new_kstack = kstack!(new_pid);
8020e82c: 05 05        	addi	a0, a0, 0x1
8020e82e: 23 34 a4 ac  	sd	a0, -0x538(s0)
8020e832: 01 c9        	beqz	a0, 0x8020e842 <.Lpcrel_hi29>
8020e834: 09 a0        	j	0x8020e836 <.Lpcrel_hi28+0x62>
8020e836: 11 45        	li	a0, 0x4
8020e838: 23 3c a4 aa  	sd	a0, -0x548(s0)
8020e83c: 01 45        	li	a0, 0x0
;         let new_kstack = kstack!(new_pid);
8020e83e: 1d e9        	bnez	a0, 0x8020e874 <.Lpcrel_hi31>
8020e840: 31 a8        	j	0x8020e85c <.Lpcrel_hi30+0x12>

000000008020e842 <.Lpcrel_hi29>:
8020e842: 17 75 02 00  	auipc	a0, 0x27
8020e846: 13 05 e5 05  	addi	a0, a0, 0x5e

000000008020e84a <.Lpcrel_hi30>:
8020e84a: 97 75 02 00  	auipc	a1, 0x27
8020e84e: 13 86 65 11  	addi	a2, a1, 0x116
8020e852: f1 45        	li	a1, 0x1c
8020e854: 97 20 02 00  	auipc	ra, 0x22
8020e858: e7 80 40 9c  	jalr	-0x63c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e85c: 03 35 84 ac  	ld	a0, -0x538(s0)
8020e860: 83 35 84 ab  	ld	a1, -0x548(s0)
;         let new_kstack = kstack!(new_pid);
8020e864: 33 06 b5 02  	mul	a2, a0, a1
8020e868: 23 38 c4 aa  	sd	a2, -0x550(s0)
8020e86c: 33 35 b5 02  	mulhu	a0, a0, a1
8020e870: 1d e9        	bnez	a0, 0x8020e8a6 <.Lpcrel_hi33>
8020e872: 31 a8        	j	0x8020e88e <.Lpcrel_hi32+0x12>

000000008020e874 <.Lpcrel_hi31>:
8020e874: 17 75 02 00  	auipc	a0, 0x27
8020e878: 13 05 c5 02  	addi	a0, a0, 0x2c

000000008020e87c <.Lpcrel_hi32>:
8020e87c: 97 75 02 00  	auipc	a1, 0x27
8020e880: 13 86 45 0e  	addi	a2, a1, 0xe4
8020e884: f1 45        	li	a1, 0x1c
8020e886: 97 20 02 00  	auipc	ra, 0x22
8020e88a: e7 80 20 99  	jalr	-0x66e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e88e: 83 35 04 ab  	ld	a1, -0x550(s0)
;         let new_kstack = kstack!(new_pid);
8020e892: 13 95 c5 00  	slli	a0, a1, 0xc
8020e896: 23 34 a4 aa  	sd	a0, -0x558(s0)
8020e89a: 13 95 c5 00  	slli	a0, a1, 0xc
8020e89e: 31 81        	srli	a0, a0, 0xc
8020e8a0: 63 1e b5 02  	bne	a0, a1, 0x8020e8dc <.Lpcrel_hi35>
8020e8a4: 39 a8        	j	0x8020e8c2 <.Lpcrel_hi34+0x14>

000000008020e8a6 <.Lpcrel_hi33>:
8020e8a6: 17 75 02 00  	auipc	a0, 0x27
8020e8aa: 13 05 a5 01  	addi	a0, a0, 0x1a

000000008020e8ae <.Lpcrel_hi34>:
8020e8ae: 97 75 02 00  	auipc	a1, 0x27
8020e8b2: 13 86 25 0b  	addi	a2, a1, 0xb2
8020e8b6: 93 05 10 02  	li	a1, 0x21
8020e8ba: 97 20 02 00  	auipc	ra, 0x22
8020e8be: e7 80 e0 95  	jalr	-0x6a2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e8c2: 83 35 84 aa  	ld	a1, -0x558(s0)
8020e8c6: 37 05 00 02  	lui	a0, 0x2000
8020e8ca: 7d 35        	addiw	a0, a0, -0x1
8020e8cc: 36 05        	slli	a0, a0, 0xd
;         let new_kstack = kstack!(new_pid);
8020e8ce: 33 06 b5 40  	sub	a2, a0, a1
8020e8d2: 23 30 c4 aa  	sd	a2, -0x560(s0)
8020e8d6: 63 66 b5 08  	bltu	a0, a1, 0x8020e962 <.Lpcrel_hi38>
8020e8da: 39 a8        	j	0x8020e8f8 <.Lpcrel_hi36+0x14>

000000008020e8dc <.Lpcrel_hi35>:
8020e8dc: 17 75 02 00  	auipc	a0, 0x27
8020e8e0: 13 05 45 fe  	addi	a0, a0, -0x1c

000000008020e8e4 <.Lpcrel_hi36>:
8020e8e4: 97 75 02 00  	auipc	a1, 0x27
8020e8e8: 13 86 c5 07  	addi	a2, a1, 0x7c
8020e8ec: 93 05 10 02  	li	a1, 0x21
8020e8f0: 97 20 02 00  	auipc	ra, 0x22
8020e8f4: e7 80 80 92  	jalr	-0x6d8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e8f8: 03 35 04 af  	ld	a0, -0x510(s0)
8020e8fc: 83 35 04 aa  	ld	a1, -0x560(s0)
;         let new_kstack = kstack!(new_pid);
8020e900: 23 30 b4 fa  	sd	a1, -0x60(s0)
;         let mut new_context  = self.inner_mut().context.clone();
8020e904: 97 30 ff ff  	auipc	ra, 0xffff3
8020e908: e7 80 80 4c  	jalr	0x4c8(ra) <ekernel+0xffcb4dcc>
8020e90c: 97 00 00 00  	auipc	ra, 0x0
8020e910: e7 80 a0 91  	jalr	-0x6e6(ra) <_ZN2os4task4task16TaskControlBlock9inner_mut17h3984b611acb559e8E>
8020e914: 23 34 a4 be  	sd	a0, -0x418(s0)
8020e918: 23 38 b4 be  	sd	a1, -0x410(s0)
8020e91c: 13 05 84 be  	addi	a0, s0, -0x418
8020e920: 23 38 a4 a8  	sd	a0, -0x570(s0)
8020e924: 97 20 ff ff  	auipc	ra, 0xffff2
8020e928: e7 80 00 25  	jalr	0x250(ra) <ekernel+0xffcb3b74>
8020e92c: 93 05 85 06  	addi	a1, a0, 0x68
8020e930: 13 05 84 b7  	addi	a0, s0, -0x488
8020e934: 97 b0 00 00  	auipc	ra, 0xb
8020e938: e7 80 20 c5  	jalr	-0x3ae(ra) <_ZN55_$LT$os..cpu..Context$u20$as$u20$core..clone..Clone$GT$5clone17he6a273ebed914050E>
8020e93c: 03 35 04 a9  	ld	a0, -0x570(s0)
8020e940: 97 a0 ff ff  	auipc	ra, 0xffffa
8020e944: e7 80 00 8d  	jalr	-0x730(ra) <ekernel+0xffcbb210>
8020e948: 03 35 04 ad  	ld	a0, -0x530(s0)

000000008020e94c <.Lpcrel_hi37>:
;         new_context.ra = usertarpret as usize;
8020e94c: 97 45 ff ff  	auipc	a1, 0xffff4
8020e950: 93 85 65 db  	addi	a1, a1, -0x24a
8020e954: 23 3c b4 b6  	sd	a1, -0x488(s0)
;         new_context.sp = kstack!(new_pid)+KERNEL_STACK_SIZE;
8020e958: 05 05        	addi	a0, a0, 0x1
8020e95a: 23 3c a4 a8  	sd	a0, -0x568(s0)
8020e95e: 15 c5        	beqz	a0, 0x8020e98a <.Lpcrel_hi40>
8020e960: 39 a8        	j	0x8020e97e <.Lpcrel_hi39+0x14>

000000008020e962 <.Lpcrel_hi38>:
;         let new_kstack = kstack!(new_pid);
8020e962: 17 75 02 00  	auipc	a0, 0x27
8020e966: 13 05 e5 f8  	addi	a0, a0, -0x72

000000008020e96a <.Lpcrel_hi39>:
8020e96a: 97 75 02 00  	auipc	a1, 0x27
8020e96e: 13 86 65 ff  	addi	a2, a1, -0xa
8020e972: 93 05 10 02  	li	a1, 0x21
8020e976: 97 20 02 00  	auipc	ra, 0x22
8020e97a: e7 80 20 8a  	jalr	-0x75e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e97e: 11 45        	li	a0, 0x4
8020e980: 23 34 a4 a8  	sd	a0, -0x578(s0)
8020e984: 01 45        	li	a0, 0x0
;         new_context.sp = kstack!(new_pid)+KERNEL_STACK_SIZE;
8020e986: 1d e9        	bnez	a0, 0x8020e9bc <.Lpcrel_hi42>
8020e988: 31 a8        	j	0x8020e9a4 <.Lpcrel_hi41+0x12>

000000008020e98a <.Lpcrel_hi40>:
8020e98a: 17 75 02 00  	auipc	a0, 0x27
8020e98e: 13 05 65 f1  	addi	a0, a0, -0xea

000000008020e992 <.Lpcrel_hi41>:
8020e992: 97 75 02 00  	auipc	a1, 0x27
8020e996: 13 86 65 fe  	addi	a2, a1, -0x1a
8020e99a: f1 45        	li	a1, 0x1c
8020e99c: 97 20 02 00  	auipc	ra, 0x22
8020e9a0: e7 80 c0 87  	jalr	-0x784(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e9a4: 03 35 84 a9  	ld	a0, -0x568(s0)
8020e9a8: 83 35 84 a8  	ld	a1, -0x578(s0)
;         new_context.sp = kstack!(new_pid)+KERNEL_STACK_SIZE;
8020e9ac: 33 06 b5 02  	mul	a2, a0, a1
8020e9b0: 23 30 c4 a8  	sd	a2, -0x580(s0)
8020e9b4: 33 35 b5 02  	mulhu	a0, a0, a1
8020e9b8: 1d e9        	bnez	a0, 0x8020e9ee <.Lpcrel_hi44>
8020e9ba: 31 a8        	j	0x8020e9d6 <.Lpcrel_hi43+0x12>

000000008020e9bc <.Lpcrel_hi42>:
8020e9bc: 17 75 02 00  	auipc	a0, 0x27
8020e9c0: 13 05 45 ee  	addi	a0, a0, -0x11c

000000008020e9c4 <.Lpcrel_hi43>:
8020e9c4: 97 75 02 00  	auipc	a1, 0x27
8020e9c8: 13 86 45 fb  	addi	a2, a1, -0x4c
8020e9cc: f1 45        	li	a1, 0x1c
8020e9ce: 97 20 02 00  	auipc	ra, 0x22
8020e9d2: e7 80 a0 84  	jalr	-0x7b6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020e9d6: 83 35 04 a8  	ld	a1, -0x580(s0)
;         new_context.sp = kstack!(new_pid)+KERNEL_STACK_SIZE;
8020e9da: 13 95 c5 00  	slli	a0, a1, 0xc
8020e9de: 23 3c a4 a6  	sd	a0, -0x588(s0)
8020e9e2: 13 95 c5 00  	slli	a0, a1, 0xc
8020e9e6: 31 81        	srli	a0, a0, 0xc
8020e9e8: 63 1e b5 02  	bne	a0, a1, 0x8020ea24 <.Lpcrel_hi46>
8020e9ec: 39 a8        	j	0x8020ea0a <.Lpcrel_hi45+0x14>

000000008020e9ee <.Lpcrel_hi44>:
8020e9ee: 17 75 02 00  	auipc	a0, 0x27
8020e9f2: 13 05 25 ed  	addi	a0, a0, -0x12e

000000008020e9f6 <.Lpcrel_hi45>:
8020e9f6: 97 75 02 00  	auipc	a1, 0x27
8020e9fa: 13 86 25 f8  	addi	a2, a1, -0x7e
8020e9fe: 93 05 10 02  	li	a1, 0x21
8020ea02: 97 20 02 00  	auipc	ra, 0x22
8020ea06: e7 80 60 81  	jalr	-0x7ea(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020ea0a: 83 35 84 a7  	ld	a1, -0x588(s0)
8020ea0e: 37 05 00 02  	lui	a0, 0x2000
8020ea12: 7d 35        	addiw	a0, a0, -0x1
8020ea14: 36 05        	slli	a0, a0, 0xd
;         new_context.sp = kstack!(new_pid)+KERNEL_STACK_SIZE;
8020ea16: 33 06 b5 40  	sub	a2, a0, a1
8020ea1a: 23 38 c4 a6  	sd	a2, -0x590(s0)
8020ea1e: 63 6a b5 02  	bltu	a0, a1, 0x8020ea52 <.Lpcrel_hi48>
8020ea22: 39 a8        	j	0x8020ea40 <.Lpcrel_hi47+0x14>

000000008020ea24 <.Lpcrel_hi46>:
8020ea24: 17 75 02 00  	auipc	a0, 0x27
8020ea28: 13 05 c5 e9  	addi	a0, a0, -0x164

000000008020ea2c <.Lpcrel_hi47>:
8020ea2c: 97 75 02 00  	auipc	a1, 0x27
8020ea30: 13 86 c5 f4  	addi	a2, a1, -0xb4
8020ea34: 93 05 10 02  	li	a1, 0x21
8020ea38: 97 10 02 00  	auipc	ra, 0x21
8020ea3c: e7 80 00 7e  	jalr	0x7e0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020ea40: 83 35 04 a7  	ld	a1, -0x590(s0)
8020ea44: 0d 65        	lui	a0, 0x3
;         new_context.sp = kstack!(new_pid)+KERNEL_STACK_SIZE;
8020ea46: 2e 95        	add	a0, a0, a1
8020ea48: 23 34 a4 a6  	sd	a0, -0x598(s0)
8020ea4c: 63 61 b5 08  	bltu	a0, a1, 0x8020eace <.Lpcrel_hi50>
8020ea50: 39 a8        	j	0x8020ea6e <.Lpcrel_hi49+0x14>

000000008020ea52 <.Lpcrel_hi48>:
8020ea52: 17 75 02 00  	auipc	a0, 0x27
8020ea56: 13 05 e5 e9  	addi	a0, a0, -0x162

000000008020ea5a <.Lpcrel_hi49>:
8020ea5a: 97 75 02 00  	auipc	a1, 0x27
8020ea5e: 13 86 e5 f1  	addi	a2, a1, -0xe2
8020ea62: 93 05 10 02  	li	a1, 0x21
8020ea66: 97 10 02 00  	auipc	ra, 0x21
8020ea6a: e7 80 20 7b  	jalr	0x7b2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020ea6e: 03 35 84 a6  	ld	a0, -0x598(s0)
;         new_context.sp = kstack!(new_pid)+KERNEL_STACK_SIZE;
8020ea72: 23 30 a4 b8  	sd	a0, -0x480(s0)
8020ea76: 13 05 84 bf  	addi	a0, s0, -0x408
;         let mut new_files:Vec<Option<Arc<dyn File + Send + Sync>>> = Vec::new();
8020ea7a: 97 60 00 00  	auipc	ra, 0x6
8020ea7e: e7 80 80 c1  	jalr	-0x3e8(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h44b02834067c845bE>
8020ea82: 03 35 04 af  	ld	a0, -0x510(s0)
;         for fd in self.inner_mut().files.iter(){
8020ea86: 97 30 ff ff  	auipc	ra, 0xffff3
8020ea8a: e7 80 60 34  	jalr	0x346(ra) <ekernel+0xffcb4dcc>
8020ea8e: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ea92: e7 80 80 79  	jalr	0x798(ra) <ekernel+0xffcc1226>
8020ea96: 23 38 a4 c0  	sd	a0, -0x3f0(s0)
8020ea9a: 23 3c b4 c0  	sd	a1, -0x3e8(s0)
8020ea9e: 13 05 04 c1  	addi	a0, s0, -0x3f0
8020eaa2: 97 20 ff ff  	auipc	ra, 0xffff2
8020eaa6: e7 80 20 0d  	jalr	0xd2(ra) <ekernel+0xffcb3b74>
8020eaaa: 61 05        	addi	a0, a0, 0x18
8020eaac: 97 60 00 00  	auipc	ra, 0x6
8020eab0: e7 80 00 5f  	jalr	0x5f0(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf8fbbdc63be4b5f8E>
8020eab4: 97 60 ff ff  	auipc	ra, 0xffff6
8020eab8: e7 80 00 1a  	jalr	0x1a0(ra) <ekernel+0xffcb7c54>
8020eabc: 97 d0 ff ff  	auipc	ra, 0xffffd
8020eac0: e7 80 00 e3  	jalr	-0x1d0(ra) <ekernel+0xffcbe8ec>
8020eac4: 23 30 a4 c2  	sd	a0, -0x3e0(s0)
8020eac8: 23 34 b4 c2  	sd	a1, -0x3d8(s0)
8020eacc: 31 a8        	j	0x8020eae8 <.Lpcrel_hi51+0x12>

000000008020eace <.Lpcrel_hi50>:
;         new_context.sp = kstack!(new_pid)+KERNEL_STACK_SIZE;
8020eace: 17 75 02 00  	auipc	a0, 0x27
8020ead2: 13 05 25 dd  	addi	a0, a0, -0x22e

000000008020ead6 <.Lpcrel_hi51>:
8020ead6: 97 75 02 00  	auipc	a1, 0x27
8020eada: 13 86 25 ea  	addi	a2, a1, -0x15e
8020eade: f1 45        	li	a1, 0x1c
8020eae0: 97 10 02 00  	auipc	ra, 0x21
8020eae4: e7 80 80 73  	jalr	0x738(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8020eae8: 13 05 04 c2  	addi	a0, s0, -0x3e0
;         for fd in self.inner_mut().files.iter(){
8020eaec: 97 d0 ff ff  	auipc	ra, 0xffffd
8020eaf0: e7 80 40 06  	jalr	0x64(ra) <ekernel+0xffcbeb50>
8020eaf4: 23 38 a4 c2  	sd	a0, -0x3d0(s0)
8020eaf8: 03 35 04 c3  	ld	a0, -0x3d0(s0)
8020eafc: 63 16 05 10  	bnez	a0, 0x8020ec08 <.Lpcrel_hi51+0x132>
8020eb00: 09 a0        	j	0x8020eb02 <.Lpcrel_hi51+0x2c>
8020eb02: 13 05 04 c1  	addi	a0, s0, -0x3f0
;         for fd in self.inner_mut().files.iter(){
8020eb06: 97 90 ff ff  	auipc	ra, 0xffff9
8020eb0a: e7 80 a0 70  	jalr	0x70a(ra) <ekernel+0xffcbb210>
;             new_files,
8020eb0e: 03 35 84 c0  	ld	a0, -0x3f8(s0)
8020eb12: 23 38 a4 d8  	sd	a0, -0x270(s0)
8020eb16: 03 35 04 c0  	ld	a0, -0x400(s0)
8020eb1a: 23 34 a4 d8  	sd	a0, -0x278(s0)
8020eb1e: 03 35 84 bf  	ld	a0, -0x408(s0)
8020eb22: 23 30 a4 d8  	sd	a0, -0x280(s0)
8020eb26: 13 05 84 d9  	addi	a0, s0, -0x268
8020eb2a: 23 3c a4 a2  	sd	a0, -0x5c8(s0)
8020eb2e: 93 05 84 b7  	addi	a1, s0, -0x488
8020eb32: 13 06 00 07  	li	a2, 0x70
;             new_context,
8020eb36: 97 30 02 00  	auipc	ra, 0x23
8020eb3a: e7 80 80 13  	jalr	0x138(ra) <memcpy>
8020eb3e: 83 35 04 ae  	ld	a1, -0x520(s0)
8020eb42: 03 36 04 ad  	ld	a2, -0x530(s0)
8020eb46: 83 36 04 ac  	ld	a3, -0x540(s0)
8020eb4a: 83 38 84 a3  	ld	a7, -0x5c8(s0)
;         let new_tcb = TaskControlBlock::fork_tcb(
8020eb4e: 83 47 74 b7  	lbu	a5, -0x489(s0)
8020eb52: 13 05 84 c5  	addi	a0, s0, -0x3a8
8020eb56: 23 30 a4 a4  	sd	a0, -0x5c0(s0)
8020eb5a: 13 07 84 b5  	addi	a4, s0, -0x4a8
8020eb5e: 13 08 04 d8  	addi	a6, s0, -0x280
8020eb62: 97 00 00 00  	auipc	ra, 0x0
8020eb66: e7 80 40 a0  	jalr	-0x5fc(ra) <_ZN2os4task4task16TaskControlBlock8fork_tcb17h49e09df37b629ebbE>
8020eb6a: 03 35 04 af  	ld	a0, -0x510(s0)
;         new_tcb.inner_mut().parent = Some(Arc::downgrade(self));
8020eb6e: 97 30 ff ff  	auipc	ra, 0xffff3
8020eb72: e7 80 00 e7  	jalr	-0x190(ra) <ekernel+0xffcb49de>
8020eb76: aa 85        	mv	a1, a0
8020eb78: 03 35 04 a4  	ld	a0, -0x5c0(s0)
8020eb7c: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
8020eb80: 97 f0 ff ff  	auipc	ra, 0xfffff
8020eb84: e7 80 60 6a  	jalr	0x6a6(ra) <ekernel+0xffcc1226>
8020eb88: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
8020eb8c: 23 3c b4 e0  	sd	a1, -0x1e8(s0)
8020eb90: 13 05 04 e1  	addi	a0, s0, -0x1f0
8020eb94: 23 38 a4 a4  	sd	a0, -0x5b0(s0)
8020eb98: 97 20 ff ff  	auipc	ra, 0xffff2
8020eb9c: e7 80 e0 ff  	jalr	-0x2(ra) <ekernel+0xffcb3b96>
8020eba0: 23 34 a4 a4  	sd	a0, -0x5b8(s0)
8020eba4: 13 05 05 06  	addi	a0, a0, 0x60
8020eba8: 97 90 ff ff  	auipc	ra, 0xffff9
8020ebac: e7 80 c0 e1  	jalr	-0x1e4(ra) <ekernel+0xffcba9c4>
8020ebb0: 03 36 84 a4  	ld	a2, -0x5b8(s0)
8020ebb4: 03 35 04 a5  	ld	a0, -0x5b0(s0)
8020ebb8: 83 35 84 e0  	ld	a1, -0x1f8(s0)
8020ebbc: 2c f2        	sd	a1, 0x60(a2)
8020ebbe: 97 90 ff ff  	auipc	ra, 0xffff9
8020ebc2: e7 80 20 65  	jalr	0x652(ra) <ekernel+0xffcbb210>
8020ebc6: 03 35 04 af  	ld	a0, -0x510(s0)
;         new_tcb.inner_mut().parent_root= self.inner_mut().pagetable().root.0;
8020ebca: 97 30 ff ff  	auipc	ra, 0xffff3
8020ebce: e7 80 20 20  	jalr	0x202(ra) <ekernel+0xffcb4dcc>
8020ebd2: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ebd6: e7 80 40 65  	jalr	0x654(ra) <ekernel+0xffcc1226>
8020ebda: 23 30 a4 e2  	sd	a0, -0x1e0(s0)
8020ebde: 23 34 b4 e2  	sd	a1, -0x1d8(s0)
8020ebe2: 13 05 04 e2  	addi	a0, s0, -0x1e0
8020ebe6: 97 20 ff ff  	auipc	ra, 0xffff2
8020ebea: e7 80 00 fb  	jalr	-0x50(ra) <ekernel+0xffcb3b96>
8020ebee: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ebf2: e7 80 e0 ef  	jalr	-0x102(ra) <ekernel+0xffcc0aec>
8020ebf6: 08 61        	ld	a0, 0x0(a0)
8020ebf8: 23 3c a4 a4  	sd	a0, -0x5a8(s0)
8020ebfc: aa 85        	mv	a1, a0
8020ebfe: 23 30 b4 a6  	sd	a1, -0x5a0(s0)
8020ec02: 1d 89        	andi	a0, a0, 0x7
8020ec04: 01 cd        	beqz	a0, 0x8020ec1c <.Lpcrel_hi51+0x146>
8020ec06: fd a8        	j	0x8020ed04 <.Lpcrel_hi51+0x22e>
;         for fd in self.inner_mut().files.iter(){
8020ec08: 03 35 04 c3  	ld	a0, -0x3d0(s0)
8020ec0c: 23 38 a4 a2  	sd	a0, -0x5d0(s0)
8020ec10: 23 34 a4 fa  	sd	a0, -0x58(s0)
;             if let Some(file) = fd {
8020ec14: 08 61        	ld	a0, 0x0(a0)
8020ec16: 63 12 05 10  	bnez	a0, 0x8020ed1a <.Lpcrel_hi52+0x12>
8020ec1a: 3d a2        	j	0x8020ed48 <.Lpcrel_hi52+0x40>
8020ec1c: 03 35 04 a6  	ld	a0, -0x5a0(s0)
;         new_tcb.inner_mut().parent_root= self.inner_mut().pagetable().root.0;
8020ec20: 08 79        	ld	a0, 0x30(a0)
8020ec22: 23 30 a4 a0  	sd	a0, -0x600(s0)
8020ec26: 13 05 84 c5  	addi	a0, s0, -0x3a8
8020ec2a: 23 38 a4 a0  	sd	a0, -0x5f0(s0)
8020ec2e: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ec32: e7 80 80 5f  	jalr	0x5f8(ra) <ekernel+0xffcc1226>
8020ec36: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
8020ec3a: 23 3c b4 e2  	sd	a1, -0x1c8(s0)
8020ec3e: 13 05 04 e3  	addi	a0, s0, -0x1d0
8020ec42: 23 34 a4 a0  	sd	a0, -0x5f8(s0)
8020ec46: 97 20 ff ff  	auipc	ra, 0xffff2
8020ec4a: e7 80 00 f5  	jalr	-0xb0(ra) <ekernel+0xffcb3b96>
8020ec4e: 83 35 04 a0  	ld	a1, -0x600(s0)
8020ec52: 2a 86        	mv	a2, a0
8020ec54: 03 35 84 a0  	ld	a0, -0x5f8(s0)
8020ec58: 6c ee        	sd	a1, 0xd8(a2)
8020ec5a: 97 90 ff ff  	auipc	ra, 0xffff9
8020ec5e: e7 80 60 5b  	jalr	0x5b6(ra) <ekernel+0xffcbb210>
8020ec62: 13 05 04 e2  	addi	a0, s0, -0x1e0
8020ec66: 97 90 ff ff  	auipc	ra, 0xffff9
8020ec6a: e7 80 a0 5a  	jalr	0x5aa(ra) <ekernel+0xffcbb210>
8020ec6e: 83 35 04 a1  	ld	a1, -0x5f0(s0)
8020ec72: 13 05 84 e4  	addi	a0, s0, -0x1b8
8020ec76: 23 3c a4 a0  	sd	a0, -0x5e8(s0)
8020ec7a: 13 06 80 12  	li	a2, 0x128
;         let new_tcb = Arc::new(new_tcb);
8020ec7e: 97 30 02 00  	auipc	ra, 0x23
8020ec82: e7 80 00 ff  	jalr	-0x10(ra) <memcpy>
8020ec86: 03 35 84 a1  	ld	a0, -0x5e8(s0)
8020ec8a: 97 30 ff ff  	auipc	ra, 0xffff3
8020ec8e: e7 80 e0 ad  	jalr	-0x522(ra) <ekernel+0xffcb4768>
8020ec92: aa 85        	mv	a1, a0
8020ec94: 03 35 04 af  	ld	a0, -0x510(s0)
8020ec98: 23 30 b4 e4  	sd	a1, -0x1c0(s0)
;         self.inner_mut().children.push(new_tcb.clone( ));
8020ec9c: 97 30 ff ff  	auipc	ra, 0xffff3
8020eca0: e7 80 00 13  	jalr	0x130(ra) <ekernel+0xffcb4dcc>
8020eca4: 97 f0 ff ff  	auipc	ra, 0xfffff
8020eca8: e7 80 20 58  	jalr	0x582(ra) <ekernel+0xffcc1226>
8020ecac: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020ecb0: 23 3c b4 f6  	sd	a1, -0x88(s0)
8020ecb4: 13 05 04 f7  	addi	a0, s0, -0x90
8020ecb8: 23 34 a4 a2  	sd	a0, -0x5d8(s0)
8020ecbc: 97 20 ff ff  	auipc	ra, 0xffff2
8020ecc0: e7 80 a0 ed  	jalr	-0x126(ra) <ekernel+0xffcb3b96>
8020ecc4: 13 05 05 03  	addi	a0, a0, 0x30
8020ecc8: 23 30 a4 a2  	sd	a0, -0x5e0(s0)
8020eccc: 13 05 04 e4  	addi	a0, s0, -0x1c0
8020ecd0: 97 30 ff ff  	auipc	ra, 0xffff3
8020ecd4: e7 80 60 05  	jalr	0x56(ra) <ekernel+0xffcb4d26>
8020ecd8: aa 85        	mv	a1, a0
8020ecda: 03 35 04 a2  	ld	a0, -0x5e0(s0)
8020ecde: 97 60 00 00  	auipc	ra, 0x6
8020ece2: e7 80 40 db  	jalr	-0x24c(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h116e33f5087cbefbE>
8020ece6: 03 35 84 a2  	ld	a0, -0x5d8(s0)
8020ecea: 97 90 ff ff  	auipc	ra, 0xffff9
8020ecee: e7 80 60 52  	jalr	0x526(ra) <ekernel+0xffcbb210>
;         new_tcb
8020ecf2: 03 35 04 e4  	ld	a0, -0x1c0(s0)
8020ecf6: 83 30 81 5f  	ld	ra, 0x5f8(sp)
8020ecfa: 03 34 01 5f  	ld	s0, 0x5f0(sp)
;     }
8020ecfe: 13 01 01 60  	addi	sp, sp, 0x600
8020ed02: 82 80        	ret
8020ed04: 83 35 84 a5  	ld	a1, -0x5a8(s0)

000000008020ed08 <.Lpcrel_hi52>:
;         new_tcb.inner_mut().parent_root= self.inner_mut().pagetable().root.0;
8020ed08: 17 75 02 00  	auipc	a0, 0x27
8020ed0c: 13 06 85 c8  	addi	a2, a0, -0x378
8020ed10: 21 45        	li	a0, 0x8
8020ed12: 97 10 02 00  	auipc	ra, 0x21
8020ed16: e7 80 a0 5d  	jalr	0x5da(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>
8020ed1a: 03 35 04 a3  	ld	a0, -0x5d0(s0)
;             if let Some(file) = fd {
8020ed1e: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 new_files.push(Some(file.clone()));
8020ed22: 97 30 ff ff  	auipc	ra, 0xffff3
8020ed26: e7 80 00 f6  	jalr	-0xa0(ra) <ekernel+0xffcb4c82>
8020ed2a: 23 3c a4 c2  	sd	a0, -0x3c8(s0)
8020ed2e: 23 30 b4 c4  	sd	a1, -0x3c0(s0)
8020ed32: 83 35 84 c3  	ld	a1, -0x3c8(s0)
8020ed36: 03 36 04 c4  	ld	a2, -0x3c0(s0)
8020ed3a: 13 05 84 bf  	addi	a0, s0, -0x408
8020ed3e: 97 60 00 00  	auipc	ra, 0x6
8020ed42: e7 80 e0 e5  	jalr	-0x1a2(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E>
8020ed46: 4d b3        	j	0x8020eae8 <.Lpcrel_hi51+0x12>
8020ed48: 01 45        	li	a0, 0x0
;                 new_files.push(None);
8020ed4a: 23 34 a4 c4  	sd	a0, -0x3b8(s0)
8020ed4e: 83 35 84 c4  	ld	a1, -0x3b8(s0)
8020ed52: 03 36 04 c5  	ld	a2, -0x3b0(s0)
8020ed56: 13 05 84 bf  	addi	a0, s0, -0x408
8020ed5a: 97 60 00 00  	auipc	ra, 0x6
8020ed5e: e7 80 20 e4  	jalr	-0x1be(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E>
8020ed62: 59 b3        	j	0x8020eae8 <.Lpcrel_hi51+0x12>

000000008020ed64 <_ZN2os4task4task16TaskControlBlock4exec17h6caf76ad6af7b1edE>:
;     pub fn exec(&self , elf_data:&[u8]){
8020ed64: 31 71        	addi	sp, sp, -0xc0
8020ed66: 06 fd        	sd	ra, 0xb8(sp)
8020ed68: 22 f9        	sd	s0, 0xb0(sp)
8020ed6a: 80 01        	addi	s0, sp, 0xc0
8020ed6c: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020ed70: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020ed74: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020ed78: 23 30 c4 fe  	sd	a2, -0x20(s0)
8020ed7c: 13 05 84 f5  	addi	a0, s0, -0xa8
;         let mut elf:(PageTable,usize) = parse_elf(elf_data);
8020ed80: 97 20 00 00  	auipc	ra, 0x2
8020ed84: e7 80 40 7d  	jalr	0x7d4(ra) <_ZN2os4task9parse_elf17h88a38259c1c1821dE>

000000008020ed88 <.Lpcrel_hi53>:
;         let gurd = FRAME_ALLOC.page_alloc();
8020ed88: 17 f5 02 00  	auipc	a0, 0x2f
8020ed8c: 13 05 85 27  	addi	a0, a0, 0x278
8020ed90: 97 50 ff ff  	auipc	ra, 0xffff5
8020ed94: e7 80 60 12  	jalr	0x126(ra) <ekernel+0xffcb6eb6>
8020ed98: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8020ed9c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.set_pagetable(Box::new(elf.0));
8020eda0: 03 35 84 f8  	ld	a0, -0x78(s0)
8020eda4: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020eda8: 03 35 04 f8  	ld	a0, -0x80(s0)
8020edac: 23 30 a4 fc  	sd	a0, -0x40(s0)
8020edb0: 03 35 84 f7  	ld	a0, -0x88(s0)
8020edb4: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020edb8: 03 35 04 f7  	ld	a0, -0x90(s0)
8020edbc: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020edc0: 03 35 84 f6  	ld	a0, -0x98(s0)
8020edc4: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020edc8: 03 35 04 f6  	ld	a0, -0xa0(s0)
8020edcc: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020edd0: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020edd4: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020edd8: 13 05 80 03  	li	a0, 0x38
8020eddc: a1 45        	li	a1, 0x8
;         Box::new(x)
8020edde: 97 c0 ff ff  	auipc	ra, 0xffffc
8020ede2: e7 80 40 ca  	jalr	-0x35c(ra) <ekernel+0xffcbda82>
8020ede6: aa 85        	mv	a1, a0
8020ede8: 03 35 04 f5  	ld	a0, -0xb0(s0)
8020edec: 03 36 84 fc  	ld	a2, -0x38(s0)
8020edf0: 90 f9        	sd	a2, 0x30(a1)
8020edf2: 03 36 04 fc  	ld	a2, -0x40(s0)
8020edf6: 90 f5        	sd	a2, 0x28(a1)
8020edf8: 03 36 84 fb  	ld	a2, -0x48(s0)
8020edfc: 90 f1        	sd	a2, 0x20(a1)
8020edfe: 03 36 04 fb  	ld	a2, -0x50(s0)
8020ee02: 90 ed        	sd	a2, 0x18(a1)
8020ee04: 03 36 84 fa  	ld	a2, -0x58(s0)
8020ee08: 90 e9        	sd	a2, 0x10(a1)
8020ee0a: 03 36 04 fa  	ld	a2, -0x60(s0)
8020ee0e: 90 e5        	sd	a2, 0x8(a1)
8020ee10: 03 36 84 f9  	ld	a2, -0x68(s0)
8020ee14: 90 e1        	sd	a2, 0x0(a1)
;         self.set_pagetable(Box::new(elf.0));
8020ee16: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ee1a: e7 80 a0 4b  	jalr	0x4ba(ra) <ekernel+0xffcc12d0>
8020ee1e: 83 35 84 f4  	ld	a1, -0xb8(s0)
8020ee22: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         self.new_set_trapframe(gurd);
8020ee26: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ee2a: e7 80 80 59  	jalr	0x598(ra) <ekernel+0xffcc13be>
8020ee2e: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         self.map_trap();
8020ee32: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ee36: e7 80 20 4f  	jalr	0x4f2(ra) <ekernel+0xffcc1324>
8020ee3a: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         self.set_epc(elf.1);
8020ee3e: 83 35 04 f9  	ld	a1, -0x70(s0)
8020ee42: 97 00 00 00  	auipc	ra, 0x0
8020ee46: e7 80 40 02  	jalr	0x24(ra) <_ZN2os4task4task16TaskControlBlock7set_epc17h6d83fa7612cd58d0E>
8020ee4a: 03 35 04 f5  	ld	a0, -0xb0(s0)
8020ee4e: b7 05 00 04  	lui	a1, 0x4000
8020ee52: f5 35        	addiw	a1, a1, -0x3
8020ee54: b2 05        	slli	a1, a1, 0xc
;         self.set_sp(USERSTACK_TOP);
8020ee56: 97 00 00 00  	auipc	ra, 0x0
8020ee5a: e7 80 a0 03  	jalr	0x3a(ra) <_ZN2os4task4task16TaskControlBlock6set_sp17h1ea17c7c53284715E>
8020ee5e: ea 70        	ld	ra, 0xb8(sp)
8020ee60: 4a 74        	ld	s0, 0xb0(sp)
;     }
8020ee62: 29 61        	addi	sp, sp, 0xc0
8020ee64: 82 80        	ret

000000008020ee66 <_ZN2os4task4task16TaskControlBlock7set_epc17h6d83fa7612cd58d0E>:
;     pub fn set_epc(&self,epc :usize){
8020ee66: 79 71        	addi	sp, sp, -0x30
8020ee68: 06 f4        	sd	ra, 0x28(sp)
8020ee6a: 22 f0        	sd	s0, 0x20(sp)
8020ee6c: 00 18        	addi	s0, sp, 0x30
8020ee6e: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020ee72: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020ee76: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.get_trapframe().epc = epc;
8020ee7a: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ee7e: e7 80 c0 3c  	jalr	0x3cc(ra) <ekernel+0xffcc1246>
8020ee82: 83 35 84 fd  	ld	a1, -0x28(s0)
8020ee86: 0c ed        	sd	a1, 0x18(a0)
8020ee88: a2 70        	ld	ra, 0x28(sp)
8020ee8a: 02 74        	ld	s0, 0x20(sp)
;     }
8020ee8c: 45 61        	addi	sp, sp, 0x30
8020ee8e: 82 80        	ret

000000008020ee90 <_ZN2os4task4task16TaskControlBlock6set_sp17h1ea17c7c53284715E>:
;     pub fn set_sp(&self,sp :usize){
8020ee90: 79 71        	addi	sp, sp, -0x30
8020ee92: 06 f4        	sd	ra, 0x28(sp)
8020ee94: 22 f0        	sd	s0, 0x20(sp)
8020ee96: 00 18        	addi	s0, sp, 0x30
8020ee98: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020ee9c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020eea0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.get_trapframe().sp = sp;
8020eea4: 97 f0 ff ff  	auipc	ra, 0xfffff
8020eea8: e7 80 20 3a  	jalr	0x3a2(ra) <ekernel+0xffcc1246>
8020eeac: 83 35 84 fd  	ld	a1, -0x28(s0)
8020eeb0: 0c f9        	sd	a1, 0x30(a0)
8020eeb2: a2 70        	ld	ra, 0x28(sp)
8020eeb4: 02 74        	ld	s0, 0x20(sp)
;     }
8020eeb6: 45 61        	addi	sp, sp, 0x30
8020eeb8: 82 80        	ret

000000008020eeba <_ZN2os4task4task16TaskControlBlock8alloc_fd17h8062426de727208eE>:
;     pub fn alloc_fd(&self) -> usize{
8020eeba: 71 71        	addi	sp, sp, -0xb0
8020eebc: 06 f5        	sd	ra, 0xa8(sp)
8020eebe: 22 f1        	sd	s0, 0xa0(sp)
8020eec0: 00 19        	addi	s0, sp, 0xb0
8020eec2: 23 34 a4 f6  	sd	a0, -0x98(s0)
8020eec6: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if let Some(fd) = (0..self.inner_mut().files.len()).find(|fd| self.inner_mut().files[*fd].is_none()){
8020eeca: 97 f0 ff ff  	auipc	ra, 0xfffff
8020eece: e7 80 c0 35  	jalr	0x35c(ra) <ekernel+0xffcc1226>
8020eed2: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020eed6: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020eeda: 13 05 84 f9  	addi	a0, s0, -0x68
8020eede: 97 20 ff ff  	auipc	ra, 0xffff2
8020eee2: e7 80 60 c9  	jalr	-0x36a(ra) <ekernel+0xffcb3b74>
8020eee6: 61 05        	addi	a0, a0, 0x18
8020eee8: 97 60 00 00  	auipc	ra, 0x6
8020eeec: e7 80 e0 a5  	jalr	-0x5a2(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hd9824eba35b2ddb8E>
8020eef0: aa 85        	mv	a1, a0
8020eef2: 03 35 84 f6  	ld	a0, -0x98(s0)
8020eef6: 01 46        	li	a2, 0x0
8020eef8: 23 34 c4 f8  	sd	a2, -0x78(s0)
8020eefc: 23 38 b4 f8  	sd	a1, -0x70(s0)
8020ef00: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020ef04: 83 35 84 fa  	ld	a1, -0x58(s0)
8020ef08: 13 05 84 f8  	addi	a0, s0, -0x78
8020ef0c: 97 70 ff ff  	auipc	ra, 0xffff7
8020ef10: e7 80 00 b2  	jalr	-0x4e0(ra) <ekernel+0xffcb8a2c>
8020ef14: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020ef18: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020ef1c: 03 35 84 f7  	ld	a0, -0x88(s0)
8020ef20: 09 c9        	beqz	a0, 0x8020ef32 <_ZN2os4task4task16TaskControlBlock8alloc_fd17h8062426de727208eE+0x78>
8020ef22: 09 a0        	j	0x8020ef24 <_ZN2os4task4task16TaskControlBlock8alloc_fd17h8062426de727208eE+0x6a>
8020ef24: 03 35 04 f8  	ld	a0, -0x80(s0)
8020ef28: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             fd
8020ef2c: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         if let Some(fd) = (0..self.inner_mut().files.len()).find(|fd| self.inner_mut().files[*fd].is_none()){
8020ef30: 41 a0        	j	0x8020efb0 <_ZN2os4task4task16TaskControlBlock8alloc_fd17h8062426de727208eE+0xf6>
8020ef32: 03 35 84 f6  	ld	a0, -0x98(s0)
;             self.inner_mut().files.push(None);
8020ef36: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ef3a: e7 80 00 2f  	jalr	0x2f0(ra) <ekernel+0xffcc1226>
8020ef3e: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020ef42: 23 3c b4 fa  	sd	a1, -0x48(s0)
8020ef46: 13 05 04 fb  	addi	a0, s0, -0x50
8020ef4a: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020ef4e: 97 20 ff ff  	auipc	ra, 0xffff2
8020ef52: e7 80 80 c4  	jalr	-0x3b8(ra) <ekernel+0xffcb3b96>
8020ef56: 61 05        	addi	a0, a0, 0x18
8020ef58: 81 45        	li	a1, 0x0
8020ef5a: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020ef5e: 83 35 04 fc  	ld	a1, -0x40(s0)
8020ef62: 03 36 84 fc  	ld	a2, -0x38(s0)
8020ef66: 97 60 00 00  	auipc	ra, 0x6
8020ef6a: e7 80 60 c3  	jalr	-0x3ca(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E>
8020ef6e: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020ef72: 97 90 ff ff  	auipc	ra, 0xffff9
8020ef76: e7 80 e0 29  	jalr	0x29e(ra) <ekernel+0xffcbb210>
8020ef7a: 03 35 84 f6  	ld	a0, -0x98(s0)
;             self.inner_mut().files.len()-1
8020ef7e: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ef82: e7 80 80 2a  	jalr	0x2a8(ra) <ekernel+0xffcc1226>
8020ef86: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020ef8a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020ef8e: 13 05 04 fd  	addi	a0, s0, -0x30
8020ef92: 97 20 ff ff  	auipc	ra, 0xffff2
8020ef96: e7 80 20 be  	jalr	-0x41e(ra) <ekernel+0xffcb3b74>
8020ef9a: 61 05        	addi	a0, a0, 0x18
8020ef9c: 97 60 00 00  	auipc	ra, 0x6
8020efa0: e7 80 a0 9a  	jalr	-0x656(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hd9824eba35b2ddb8E>
8020efa4: 93 05 f5 ff  	addi	a1, a0, -0x1
8020efa8: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8020efac: 0d c9        	beqz	a0, 0x8020efde <.Lpcrel_hi54>
8020efae: 29 a8        	j	0x8020efc8 <_ZN2os4task4task16TaskControlBlock8alloc_fd17h8062426de727208eE+0x10e>
8020efb0: 13 05 84 f9  	addi	a0, s0, -0x68
;     }
8020efb4: 97 90 ff ff  	auipc	ra, 0xffff9
8020efb8: e7 80 c0 25  	jalr	0x25c(ra) <ekernel+0xffcbb210>
8020efbc: 03 35 04 f7  	ld	a0, -0x90(s0)
8020efc0: aa 70        	ld	ra, 0xa8(sp)
8020efc2: 0a 74        	ld	s0, 0xa0(sp)
8020efc4: 4d 61        	addi	sp, sp, 0xb0
8020efc6: 82 80        	ret
8020efc8: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             self.inner_mut().files.len()-1
8020efcc: 23 38 a4 f6  	sd	a0, -0x90(s0)
8020efd0: 13 05 04 fd  	addi	a0, s0, -0x30
;         }}
8020efd4: 97 90 ff ff  	auipc	ra, 0xffff9
8020efd8: e7 80 c0 23  	jalr	0x23c(ra) <ekernel+0xffcbb210>
8020efdc: d1 bf        	j	0x8020efb0 <_ZN2os4task4task16TaskControlBlock8alloc_fd17h8062426de727208eE+0xf6>

000000008020efde <.Lpcrel_hi54>:
;             self.inner_mut().files.len()-1
8020efde: 17 75 02 00  	auipc	a0, 0x27
8020efe2: 13 05 25 91  	addi	a0, a0, -0x6ee

000000008020efe6 <.Lpcrel_hi55>:
8020efe6: 97 75 02 00  	auipc	a1, 0x27
8020efea: 13 86 25 9c  	addi	a2, a1, -0x63e
8020efee: 93 05 10 02  	li	a1, 0x21
8020eff2: 97 10 02 00  	auipc	ra, 0x21
8020eff6: e7 80 60 22  	jalr	0x226(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008020effa <_ZN2os4task4task16TaskControlBlock8yielding17hc4a42e6d7870a0eaE>:
;     pub fn yielding(&self){
8020effa: 1d 71        	addi	sp, sp, -0x60
8020effc: 86 ec        	sd	ra, 0x58(sp)
8020effe: a2 e8        	sd	s0, 0x50(sp)
8020f000: 80 10        	addi	s0, sp, 0x60
8020f002: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020f006: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let mut lock = unsafe { self.out_data.lock() };
8020f00a: 97 40 00 00  	auipc	ra, 0x4
8020f00e: e7 80 e0 ee  	jalr	-0x112(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7cf5583f2d8e897eE>
8020f012: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020f016: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020f01a: 05 45        	li	a0, 0x1
;         lock.state = State::Ready;
8020f01c: a3 07 a4 fc  	sb	a0, -0x31(s0)
8020f020: 13 05 84 fb  	addi	a0, s0, -0x48
8020f024: 97 50 00 00  	auipc	ra, 0x5
8020f028: e7 80 00 c2  	jalr	-0x3e0(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hddcb379c916be380E>
8020f02c: 2a 86        	mv	a2, a0
8020f02e: 03 35 84 fa  	ld	a0, -0x58(s0)
8020f032: 83 45 f4 fc  	lbu	a1, -0x31(s0)
8020f036: 23 02 b6 02  	sb	a1, 0x24(a2)
;         let mut inner = self.inner_mut();
8020f03a: 97 f0 ff ff  	auipc	ra, 0xfffff
8020f03e: e7 80 c0 1e  	jalr	0x1ec(ra) <ekernel+0xffcc1226>
8020f042: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020f046: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020f04a: 13 05 04 fd  	addi	a0, s0, -0x30
;         let ctx = &mut inner.context as *mut Context;
8020f04e: 97 20 ff ff  	auipc	ra, 0xffff2
8020f052: e7 80 80 b4  	jalr	-0x4b8(ra) <ekernel+0xffcb3b96>
8020f056: 13 05 85 06  	addi	a0, a0, 0x68
8020f05a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020f05e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         drop(lock);
8020f062: 03 35 84 fb  	ld	a0, -0x48(s0)
8020f066: 83 35 04 fc  	ld	a1, -0x40(s0)
8020f06a: 97 b0 00 00  	auipc	ra, 0xb
8020f06e: e7 80 e0 a1  	jalr	-0x5e2(ra) <_ZN4core3mem4drop17h4e97e8a503492b55E>
;         drop(inner);
8020f072: 03 35 04 fd  	ld	a0, -0x30(s0)
8020f076: 83 35 84 fd  	ld	a1, -0x28(s0)
8020f07a: 97 b0 00 00  	auipc	ra, 0xb
8020f07e: e7 80 a0 9e  	jalr	-0x616(ra) <_ZN4core3mem4drop17h48a990f70936f01fE>

000000008020f082 <.Lpcrel_hi56>:
;             CPUS.my_cpu().sched(ctx);
8020f082: 17 d5 33 00  	auipc	a0, 0x33d
8020f086: 13 05 e5 17  	addi	a0, a0, 0x17e
8020f08a: 97 a0 00 00  	auipc	ra, 0xa
8020f08e: e7 80 20 3b  	jalr	0x3b2(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
8020f092: 83 35 04 fb  	ld	a1, -0x50(s0)
8020f096: 97 a0 00 00  	auipc	ra, 0xa
8020f09a: e7 80 40 34  	jalr	0x344(ra) <_ZN2os3cpu3Cpu5sched17he977bf182f87d75bE>
8020f09e: e6 60        	ld	ra, 0x58(sp)
8020f0a0: 46 64        	ld	s0, 0x50(sp)
;     }
8020f0a2: 25 61        	addi	sp, sp, 0x60
8020f0a4: 82 80        	ret

000000008020f0a6 <_ZN2os4task4task8fork_cow17hbfa4228c329fffb0E>:
; pub fn fork_cow(pagetable_old :&mut Box<PageTable>) -> PageTable{
8020f0a6: 59 71        	addi	sp, sp, -0x70
8020f0a8: 86 f4        	sd	ra, 0x68(sp)
8020f0aa: a2 f0        	sd	s0, 0x60(sp)
8020f0ac: 80 18        	addi	s0, sp, 0x70
8020f0ae: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020f0b2: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020f0b6: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020f0ba: 13 05 04 fb  	addi	a0, s0, -0x50
8020f0be: 23 30 a4 fa  	sd	a0, -0x60(s0)
;     let mut pagetable_new = PageTable::new();
8020f0c2: 97 d0 ff ff  	auipc	ra, 0xffffd
8020f0c6: e7 80 60 2b  	jalr	0x2b6(ra) <ekernel+0xffcbf378>
8020f0ca: 83 35 84 f9  	ld	a1, -0x68(s0)
8020f0ce: 03 35 04 fa  	ld	a0, -0x60(s0)
;     copy_pagetable(&mut pagetable_new,pagetable_old);
8020f0d2: 8c 61        	ld	a1, 0x0(a1)
8020f0d4: 97 70 ff ff  	auipc	ra, 0xffff7
8020f0d8: e7 80 80 e4  	jalr	-0x1b8(ra) <ekernel+0xffcb8f1c>
8020f0dc: 83 35 84 f9  	ld	a1, -0x68(s0)
8020f0e0: 03 35 04 fa  	ld	a0, -0x60(s0)
;     map_stack(&mut pagetable_new,pagetable_old);
8020f0e4: 8c 61        	ld	a1, 0x0(a1)
8020f0e6: 97 70 ff ff  	auipc	ra, 0xffff7
8020f0ea: e7 80 60 23  	jalr	0x236(ra) <ekernel+0xffcb931c>
8020f0ee: 83 35 84 f9  	ld	a1, -0x68(s0)
8020f0f2: 03 35 04 fa  	ld	a0, -0x60(s0)
;     map_trapframe(&mut pagetable_new,pagetable_old);
8020f0f6: 8c 61        	ld	a1, 0x0(a1)
8020f0f8: 97 70 ff ff  	auipc	ra, 0xffff7
8020f0fc: e7 80 a0 11  	jalr	0x11a(ra) <ekernel+0xffcb9212>
8020f100: 03 35 04 fa  	ld	a0, -0x60(s0)
;     map_trampoline(&mut pagetable_new);
8020f104: 97 70 ff ff  	auipc	ra, 0xffff7
8020f108: e7 80 c0 0a  	jalr	0xac(ra) <ekernel+0xffcb91b0>
8020f10c: 83 35 84 fa  	ld	a1, -0x58(s0)
;     pagetable_new
8020f110: 03 35 04 fe  	ld	a0, -0x20(s0)
8020f114: 88 f9        	sd	a0, 0x30(a1)
8020f116: 03 35 84 fd  	ld	a0, -0x28(s0)
8020f11a: 88 f5        	sd	a0, 0x28(a1)
8020f11c: 03 35 04 fd  	ld	a0, -0x30(s0)
8020f120: 88 f1        	sd	a0, 0x20(a1)
8020f122: 03 35 84 fc  	ld	a0, -0x38(s0)
8020f126: 88 ed        	sd	a0, 0x18(a1)
8020f128: 03 35 04 fc  	ld	a0, -0x40(s0)
8020f12c: 88 e9        	sd	a0, 0x10(a1)
8020f12e: 03 35 84 fb  	ld	a0, -0x48(s0)
8020f132: 88 e5        	sd	a0, 0x8(a1)
8020f134: 03 35 04 fb  	ld	a0, -0x50(s0)
8020f138: 88 e1        	sd	a0, 0x0(a1)
8020f13a: a6 70        	ld	ra, 0x68(sp)
8020f13c: 06 74        	ld	s0, 0x60(sp)
; }
8020f13e: 65 61        	addi	sp, sp, 0x70
8020f140: 82 80        	ret

000000008020f142 <_ZN62_$LT$os..task..task..State$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94f9b76a052415a1E>:
; #[derive(PartialEq, Eq)]
8020f142: 79 71        	addi	sp, sp, -0x30
8020f144: 06 f4        	sd	ra, 0x28(sp)
8020f146: 22 f0        	sd	s0, 0x20(sp)
8020f148: 00 18        	addi	s0, sp, 0x30
8020f14a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8020f14e: 23 3c b4 fc  	sd	a1, -0x28(s0)
8020f152: 03 45 05 00  	lbu	a0, 0x0(a0)
8020f156: 23 30 a4 fe  	sd	a0, -0x20(s0)
8020f15a: 83 c5 05 00  	lbu	a1, 0x0(a1)
8020f15e: 23 34 b4 fe  	sd	a1, -0x18(s0)
8020f162: 2d 8d        	xor	a0, a0, a1
8020f164: 13 35 15 00  	seqz	a0, a0
8020f168: a2 70        	ld	ra, 0x28(sp)
8020f16a: 02 74        	ld	s0, 0x20(sp)
8020f16c: 45 61        	addi	sp, sp, 0x30
8020f16e: 82 80        	ret

000000008020f170 <_ZN4core3fmt5Write10write_char17he92c811c69abb2bbE>:
;     fn write_char(&mut self, c: char) -> Result {
8020f170: 1d 71        	addi	sp, sp, -0x60
8020f172: 86 ec        	sd	ra, 0x58(sp)
8020f174: a2 e8        	sd	s0, 0x50(sp)
8020f176: 80 10        	addi	s0, sp, 0x60
8020f178: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020f17c: aa 85        	mv	a1, a0
8020f17e: 03 35 04 fa  	ld	a0, -0x60(s0)
8020f182: 23 34 b4 fa  	sd	a1, -0x58(s0)
8020f186: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020f18a: 23 26 a4 fc  	sw	a0, -0x34(s0)
8020f18e: 81 45        	li	a1, 0x0
;         self.write_str(c.encode_utf8(&mut [0; 4]))
8020f190: 23 2e b4 fa  	sw	a1, -0x44(s0)
8020f194: 93 05 c4 fb  	addi	a1, s0, -0x44
8020f198: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020f19c: 11 46        	li	a2, 0x4
8020f19e: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
8020f1a2: 97 20 ff ff  	auipc	ra, 0xffff2
8020f1a6: e7 80 60 a4  	jalr	-0x5ba(ra) <ekernel+0xffcb3be8>
8020f1aa: 2a 86        	mv	a2, a0
8020f1ac: 03 35 84 fa  	ld	a0, -0x58(s0)
8020f1b0: 23 38 c4 fa  	sd	a2, -0x50(s0)
8020f1b4: 2e 86        	mv	a2, a1
8020f1b6: 83 35 04 fb  	ld	a1, -0x50(s0)
8020f1ba: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020f1be: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         self.write_str(c.encode_utf8(&mut [0; 4]))
8020f1c2: 97 90 00 00  	auipc	ra, 0x9
8020f1c6: e7 80 60 c4  	jalr	-0x3ba(ra) <_ZN56_$LT$os..console..Writer$u20$as$u20$core..fmt..Write$GT$9write_str17h9543bffeb07b99b9E>
8020f1ca: e6 60        	ld	ra, 0x58(sp)
8020f1cc: 46 64        	ld	s0, 0x50(sp)
;     }
8020f1ce: 25 61        	addi	sp, sp, 0x60
8020f1d0: 82 80        	ret

000000008020f1d2 <_ZN4core3fmt5Write9write_fmt17h39b1c762edfe0173E>:
;     fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
8020f1d2: 01 11        	addi	sp, sp, -0x20
8020f1d4: 06 ec        	sd	ra, 0x18(sp)
8020f1d6: 22 e8        	sd	s0, 0x10(sp)
8020f1d8: 00 10        	addi	s0, sp, 0x20
8020f1da: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spec_write_fmt(args)
8020f1de: 97 00 00 00  	auipc	ra, 0x0
8020f1e2: e7 80 00 01  	jalr	0x10(ra) <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h59f3e1bf5699492fE>
8020f1e6: e2 60        	ld	ra, 0x18(sp)
8020f1e8: 42 64        	ld	s0, 0x10(sp)
;     }
8020f1ea: 05 61        	addi	sp, sp, 0x20
8020f1ec: 82 80        	ret

000000008020f1ee <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h59f3e1bf5699492fE>:
;             fn spec_write_fmt(self, args: Arguments<'_>) -> Result {
8020f1ee: 19 71        	addi	sp, sp, -0x80
8020f1f0: 86 fc        	sd	ra, 0x78(sp)
8020f1f2: a2 f8        	sd	s0, 0x70(sp)
8020f1f4: 00 01        	addi	s0, sp, 0x80
8020f1f6: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020f1fa: aa 85        	mv	a1, a0
8020f1fc: 03 35 04 f8  	ld	a0, -0x80(s0)
8020f200: 23 34 b4 f8  	sd	a1, -0x78(s0)
8020f204: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 if let Some(s) = args.as_const_str() {
8020f208: 97 80 ff ff  	auipc	ra, 0xffff8
8020f20c: e7 80 40 fb  	jalr	-0x4c(ra) <ekernel+0xffcba1bc>
8020f210: 23 3c a4 f8  	sd	a0, -0x68(s0)
8020f214: 23 30 b4 fa  	sd	a1, -0x60(s0)
8020f218: 03 35 84 f9  	ld	a0, -0x68(s0)
8020f21c: 1d c1        	beqz	a0, 0x8020f242 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h59f3e1bf5699492fE+0x54>
8020f21e: 09 a0        	j	0x8020f220 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h59f3e1bf5699492fE+0x32>
8020f220: 03 35 84 f8  	ld	a0, -0x78(s0)
;                 if let Some(s) = args.as_const_str() {
8020f224: 83 35 84 f9  	ld	a1, -0x68(s0)
8020f228: 03 36 04 fa  	ld	a2, -0x60(s0)
8020f22c: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020f230: 23 34 c4 fe  	sd	a2, -0x18(s0)
;                     self.write_str(s)
8020f234: 97 90 00 00  	auipc	ra, 0x9
8020f238: e7 80 40 bd  	jalr	-0x42c(ra) <_ZN56_$LT$os..console..Writer$u20$as$u20$core..fmt..Write$GT$9write_str17h9543bffeb07b99b9E>
8020f23c: a3 0b a4 f8  	sb	a0, -0x69(s0)
8020f240: a1 a0        	j	0x8020f288 <.Lpcrel_hi0+0x1a>
8020f242: 03 35 84 f8  	ld	a0, -0x78(s0)
8020f246: 83 35 04 f8  	ld	a1, -0x80(s0)
;                     write(self, args)
8020f24a: 90 75        	ld	a2, 0x28(a1)
8020f24c: 23 38 c4 fc  	sd	a2, -0x30(s0)
8020f250: 90 71        	ld	a2, 0x20(a1)
8020f252: 23 34 c4 fc  	sd	a2, -0x38(s0)
8020f256: 90 6d        	ld	a2, 0x18(a1)
8020f258: 23 30 c4 fc  	sd	a2, -0x40(s0)
8020f25c: 90 69        	ld	a2, 0x10(a1)
8020f25e: 23 3c c4 fa  	sd	a2, -0x48(s0)
8020f262: 90 65        	ld	a2, 0x8(a1)
8020f264: 23 38 c4 fa  	sd	a2, -0x50(s0)
8020f268: 8c 61        	ld	a1, 0x0(a1)
8020f26a: 23 34 b4 fa  	sd	a1, -0x58(s0)

000000008020f26e <.Lpcrel_hi0>:
8020f26e: 97 65 02 00  	auipc	a1, 0x26
8020f272: 93 85 25 75  	addi	a1, a1, 0x752
8020f276: 13 06 84 fa  	addi	a2, s0, -0x58
8020f27a: 97 00 02 00  	auipc	ra, 0x20
8020f27e: e7 80 e0 1b  	jalr	0x1be(ra) <_ZN4core3fmt5write17hd0b37d6a687c8e0fE>
8020f282: a3 0b a4 f8  	sb	a0, -0x69(s0)
;                 if let Some(s) = args.as_const_str() {
8020f286: 09 a0        	j	0x8020f288 <.Lpcrel_hi0+0x1a>
;             }
8020f288: 03 45 74 f9  	lbu	a0, -0x69(s0)
8020f28c: e6 70        	ld	ra, 0x78(sp)
8020f28e: 46 74        	ld	s0, 0x70(sp)
8020f290: 09 61        	addi	sp, sp, 0x80
8020f292: 82 80        	ret

000000008020f294 <_ZN5alloc3str25from_boxed_utf8_unchecked17ha3c21bb2dea0779dE>:
; pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {
8020f294: 71 71        	addi	sp, sp, -0xb0
8020f296: 06 f5        	sd	ra, 0xa8(sp)
8020f298: 22 f1        	sd	s0, 0xa0(sp)
8020f29a: 00 19        	addi	s0, sp, 0xb0
;     pub const unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
8020f29c: 23 34 a4 fa  	sd	a0, -0x58(s0)
8020f2a0: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         ManuallyDrop { value }
8020f2a4: 23 3c a4 f6  	sd	a0, -0x88(s0)
8020f2a8: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020f2ac: 13 06 84 f7  	addi	a2, s0, -0x88
;         let ptr = addr_of_mut!(**b);
8020f2b0: 23 3c c4 fa  	sd	a2, -0x48(s0)
8020f2b4: 83 35 84 f7  	ld	a1, -0x88(s0)
8020f2b8: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8020f2bc: 03 35 04 f8  	ld	a0, -0x80(s0)
8020f2c0: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8020f2c4: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020f2c8: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
8020f2cc: 23 38 c4 fc  	sd	a2, -0x30(s0)
8020f2d0: 13 06 84 f8  	addi	a2, s0, -0x78
8020f2d4: 23 3c c4 fc  	sd	a2, -0x28(s0)
;     unsafe { Box::from_raw(Box::into_raw(v) as *mut str) }
8020f2d8: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020f2dc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
8020f2e0: 09 a0        	j	0x8020f2e2 <_ZN5alloc3str25from_boxed_utf8_unchecked17ha3c21bb2dea0779dE+0x4e>
8020f2e2: 03 35 04 f5  	ld	a0, -0xb0(s0)
;             assert_unsafe_precondition!(
8020f2e6: 97 10 ff ff  	auipc	ra, 0xffff1
8020f2ea: e7 80 e0 6f  	jalr	0x6fe(ra) <ekernel+0xffcb39e4>
8020f2ee: 09 a0        	j	0x8020f2f0 <_ZN5alloc3str25from_boxed_utf8_unchecked17ha3c21bb2dea0779dE+0x5c>
8020f2f0: 03 35 84 f5  	ld	a0, -0xa8(s0)
8020f2f4: 83 35 04 f5  	ld	a1, -0xb0(s0)
;             NonNull { pointer: ptr as _ }
8020f2f8: 23 3c b4 f8  	sd	a1, -0x68(s0)
8020f2fc: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { Unique { pointer: NonNull::new_unchecked(ptr), _marker: PhantomData } }
8020f300: 83 35 84 f9  	ld	a1, -0x68(s0)
8020f304: 03 35 04 fa  	ld	a0, -0x60(s0)
8020f308: 23 34 b4 f8  	sd	a1, -0x78(s0)
8020f30c: 23 38 a4 f8  	sd	a0, -0x70(s0)
;         Box(unsafe { Unique::new_unchecked(raw) }, alloc)
8020f310: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f314: 03 35 04 f9  	ld	a0, -0x70(s0)
8020f318: 23 34 b4 f6  	sd	a1, -0x98(s0)
8020f31c: 23 38 a4 f6  	sd	a0, -0x90(s0)
; }
8020f320: 03 35 84 f6  	ld	a0, -0x98(s0)
8020f324: 83 35 04 f7  	ld	a1, -0x90(s0)
8020f328: aa 70        	ld	ra, 0xa8(sp)
8020f32a: 0a 74        	ld	s0, 0xa0(sp)
8020f32c: 4d 61        	addi	sp, sp, 0xb0
8020f32e: 82 80        	ret

000000008020f330 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h12407fc33bda1e47E>:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
8020f330: 19 71        	addi	sp, sp, -0x80
8020f332: 86 fc        	sd	ra, 0x78(sp)
8020f334: a2 f8        	sd	s0, 0x70(sp)
8020f336: 00 01        	addi	s0, sp, 0x80
8020f338: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020f33c: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020f340: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f344: 09 a0        	j	0x8020f346 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h12407fc33bda1e47E+0x16>
8020f346: 03 35 04 f8  	ld	a0, -0x80(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f34a: 08 61        	ld	a0, 0x0(a0)
8020f34c: 19 e1        	bnez	a0, 0x8020f352 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h12407fc33bda1e47E+0x22>
8020f34e: 09 a0        	j	0x8020f350 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h12407fc33bda1e47E+0x20>
8020f350: 85 a0        	j	0x8020f3b0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h12407fc33bda1e47E+0x80>
8020f352: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f356: 03 35 04 f8  	ld	a0, -0x80(s0)
8020f35a: 21 46        	li	a2, 0x8
;     intrinsics::min_align_of::<T>()
8020f35c: 23 34 c4 fc  	sd	a2, -0x38(s0)
8020f360: c1 46        	li	a3, 0x10
;     intrinsics::size_of::<T>()
8020f362: 23 38 d4 fc  	sd	a3, -0x30(s0)
;                 let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
8020f366: 14 61        	ld	a3, 0x0(a0)
8020f368: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     uint_impl! {
8020f36c: 92 06        	slli	a3, a3, 0x4
8020f36e: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
8020f372: 23 3c d4 f8  	sd	a3, -0x68(s0)
8020f376: 23 38 c4 f8  	sd	a2, -0x70(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f37a: 08 65        	ld	a0, 0x8(a0)
8020f37c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020f380: 23 3c a4 fa  	sd	a0, -0x48(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f384: 03 35 84 fb  	ld	a0, -0x48(s0)
8020f388: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020f38c: 03 36 04 f9  	ld	a2, -0x70(s0)
8020f390: 03 35 84 f9  	ld	a0, -0x68(s0)
8020f394: 23 34 c4 fa  	sd	a2, -0x58(s0)
8020f398: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020f39c: 03 35 04 fb  	ld	a0, -0x50(s0)
8020f3a0: 88 e9        	sd	a0, 0x10(a1)
8020f3a2: 03 35 84 fa  	ld	a0, -0x58(s0)
8020f3a6: 88 e5        	sd	a0, 0x8(a1)
8020f3a8: 03 35 04 fa  	ld	a0, -0x60(s0)
8020f3ac: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f3ae: 31 a0        	j	0x8020f3ba <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h12407fc33bda1e47E+0x8a>
8020f3b0: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f3b4: 01 45        	li	a0, 0x0
;             None
8020f3b6: 88 e5        	sd	a0, 0x8(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f3b8: 09 a0        	j	0x8020f3ba <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h12407fc33bda1e47E+0x8a>
8020f3ba: e6 70        	ld	ra, 0x78(sp)
8020f3bc: 46 74        	ld	s0, 0x70(sp)
;     }
8020f3be: 09 61        	addi	sp, sp, 0x80
8020f3c0: 82 80        	ret

000000008020f3c2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h5d04944e220ce5f4E>:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
8020f3c2: 19 71        	addi	sp, sp, -0x80
8020f3c4: 86 fc        	sd	ra, 0x78(sp)
8020f3c6: a2 f8        	sd	s0, 0x70(sp)
8020f3c8: 00 01        	addi	s0, sp, 0x80
8020f3ca: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020f3ce: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020f3d2: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f3d6: 09 a0        	j	0x8020f3d8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h5d04944e220ce5f4E+0x16>
8020f3d8: 03 35 04 f8  	ld	a0, -0x80(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f3dc: 08 61        	ld	a0, 0x0(a0)
8020f3de: 19 e1        	bnez	a0, 0x8020f3e4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h5d04944e220ce5f4E+0x22>
8020f3e0: 09 a0        	j	0x8020f3e2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h5d04944e220ce5f4E+0x20>
8020f3e2: b1 a8        	j	0x8020f43e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h5d04944e220ce5f4E+0x7c>
8020f3e4: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f3e8: 03 35 04 f8  	ld	a0, -0x80(s0)
8020f3ec: 05 46        	li	a2, 0x1
;     intrinsics::min_align_of::<T>()
8020f3ee: 23 34 c4 fc  	sd	a2, -0x38(s0)
;     intrinsics::size_of::<T>()
8020f3f2: 23 38 c4 fc  	sd	a2, -0x30(s0)
;                 let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
8020f3f6: 14 61        	ld	a3, 0x0(a0)
8020f3f8: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     uint_impl! {
8020f3fc: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
8020f400: 23 3c d4 f8  	sd	a3, -0x68(s0)
8020f404: 23 38 c4 f8  	sd	a2, -0x70(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f408: 08 65        	ld	a0, 0x8(a0)
8020f40a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020f40e: 23 3c a4 fa  	sd	a0, -0x48(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f412: 03 35 84 fb  	ld	a0, -0x48(s0)
8020f416: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020f41a: 03 36 04 f9  	ld	a2, -0x70(s0)
8020f41e: 03 35 84 f9  	ld	a0, -0x68(s0)
8020f422: 23 34 c4 fa  	sd	a2, -0x58(s0)
8020f426: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020f42a: 03 35 04 fb  	ld	a0, -0x50(s0)
8020f42e: 88 e9        	sd	a0, 0x10(a1)
8020f430: 03 35 84 fa  	ld	a0, -0x58(s0)
8020f434: 88 e5        	sd	a0, 0x8(a1)
8020f436: 03 35 04 fa  	ld	a0, -0x60(s0)
8020f43a: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f43c: 31 a0        	j	0x8020f448 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h5d04944e220ce5f4E+0x86>
8020f43e: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f442: 01 45        	li	a0, 0x0
;             None
8020f444: 88 e5        	sd	a0, 0x8(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f446: 09 a0        	j	0x8020f448 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h5d04944e220ce5f4E+0x86>
8020f448: e6 70        	ld	ra, 0x78(sp)
8020f44a: 46 74        	ld	s0, 0x70(sp)
;     }
8020f44c: 09 61        	addi	sp, sp, 0x80
8020f44e: 82 80        	ret

000000008020f450 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h87d39b9df75b440aE>:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
8020f450: 19 71        	addi	sp, sp, -0x80
8020f452: 86 fc        	sd	ra, 0x78(sp)
8020f454: a2 f8        	sd	s0, 0x70(sp)
8020f456: 00 01        	addi	s0, sp, 0x80
8020f458: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020f45c: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020f460: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f464: 09 a0        	j	0x8020f466 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h87d39b9df75b440aE+0x16>
8020f466: 03 35 04 f8  	ld	a0, -0x80(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f46a: 08 61        	ld	a0, 0x0(a0)
8020f46c: 19 e1        	bnez	a0, 0x8020f472 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h87d39b9df75b440aE+0x22>
8020f46e: 09 a0        	j	0x8020f470 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h87d39b9df75b440aE+0x20>
8020f470: b9 a8        	j	0x8020f4ce <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h87d39b9df75b440aE+0x7e>
8020f472: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f476: 03 35 04 f8  	ld	a0, -0x80(s0)
8020f47a: 21 46        	li	a2, 0x8
;     intrinsics::min_align_of::<T>()
8020f47c: 23 34 c4 fc  	sd	a2, -0x38(s0)
;     intrinsics::size_of::<T>()
8020f480: 23 38 c4 fc  	sd	a2, -0x30(s0)
;                 let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
8020f484: 14 61        	ld	a3, 0x0(a0)
8020f486: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     uint_impl! {
8020f48a: 8e 06        	slli	a3, a3, 0x3
8020f48c: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
8020f490: 23 3c d4 f8  	sd	a3, -0x68(s0)
8020f494: 23 38 c4 f8  	sd	a2, -0x70(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f498: 08 65        	ld	a0, 0x8(a0)
8020f49a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020f49e: 23 3c a4 fa  	sd	a0, -0x48(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f4a2: 03 35 84 fb  	ld	a0, -0x48(s0)
8020f4a6: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020f4aa: 03 36 04 f9  	ld	a2, -0x70(s0)
8020f4ae: 03 35 84 f9  	ld	a0, -0x68(s0)
8020f4b2: 23 34 c4 fa  	sd	a2, -0x58(s0)
8020f4b6: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020f4ba: 03 35 04 fb  	ld	a0, -0x50(s0)
8020f4be: 88 e9        	sd	a0, 0x10(a1)
8020f4c0: 03 35 84 fa  	ld	a0, -0x58(s0)
8020f4c4: 88 e5        	sd	a0, 0x8(a1)
8020f4c6: 03 35 04 fa  	ld	a0, -0x60(s0)
8020f4ca: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f4cc: 31 a0        	j	0x8020f4d8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h87d39b9df75b440aE+0x88>
8020f4ce: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f4d2: 01 45        	li	a0, 0x0
;             None
8020f4d4: 88 e5        	sd	a0, 0x8(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f4d6: 09 a0        	j	0x8020f4d8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h87d39b9df75b440aE+0x88>
8020f4d8: e6 70        	ld	ra, 0x78(sp)
8020f4da: 46 74        	ld	s0, 0x70(sp)
;     }
8020f4dc: 09 61        	addi	sp, sp, 0x80
8020f4de: 82 80        	ret

000000008020f4e0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17ha26e7f61f3bdc5dbE>:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
8020f4e0: 19 71        	addi	sp, sp, -0x80
8020f4e2: 86 fc        	sd	ra, 0x78(sp)
8020f4e4: a2 f8        	sd	s0, 0x70(sp)
8020f4e6: 00 01        	addi	s0, sp, 0x80
8020f4e8: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020f4ec: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020f4f0: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f4f4: 09 a0        	j	0x8020f4f6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17ha26e7f61f3bdc5dbE+0x16>
8020f4f6: 03 35 04 f8  	ld	a0, -0x80(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f4fa: 08 61        	ld	a0, 0x0(a0)
8020f4fc: 19 e1        	bnez	a0, 0x8020f502 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17ha26e7f61f3bdc5dbE+0x22>
8020f4fe: 09 a0        	j	0x8020f500 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17ha26e7f61f3bdc5dbE+0x20>
8020f500: b9 a8        	j	0x8020f55e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17ha26e7f61f3bdc5dbE+0x7e>
8020f502: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f506: 03 35 04 f8  	ld	a0, -0x80(s0)
8020f50a: 21 46        	li	a2, 0x8
;     intrinsics::min_align_of::<T>()
8020f50c: 23 34 c4 fc  	sd	a2, -0x38(s0)
;     intrinsics::size_of::<T>()
8020f510: 23 38 c4 fc  	sd	a2, -0x30(s0)
;                 let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
8020f514: 14 61        	ld	a3, 0x0(a0)
8020f516: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     uint_impl! {
8020f51a: 8e 06        	slli	a3, a3, 0x3
8020f51c: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
8020f520: 23 3c d4 f8  	sd	a3, -0x68(s0)
8020f524: 23 38 c4 f8  	sd	a2, -0x70(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f528: 08 65        	ld	a0, 0x8(a0)
8020f52a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020f52e: 23 3c a4 fa  	sd	a0, -0x48(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f532: 03 35 84 fb  	ld	a0, -0x48(s0)
8020f536: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020f53a: 03 36 04 f9  	ld	a2, -0x70(s0)
8020f53e: 03 35 84 f9  	ld	a0, -0x68(s0)
8020f542: 23 34 c4 fa  	sd	a2, -0x58(s0)
8020f546: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020f54a: 03 35 04 fb  	ld	a0, -0x50(s0)
8020f54e: 88 e9        	sd	a0, 0x10(a1)
8020f550: 03 35 84 fa  	ld	a0, -0x58(s0)
8020f554: 88 e5        	sd	a0, 0x8(a1)
8020f556: 03 35 04 fa  	ld	a0, -0x60(s0)
8020f55a: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f55c: 31 a0        	j	0x8020f568 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17ha26e7f61f3bdc5dbE+0x88>
8020f55e: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f562: 01 45        	li	a0, 0x0
;             None
8020f564: 88 e5        	sd	a0, 0x8(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f566: 09 a0        	j	0x8020f568 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17ha26e7f61f3bdc5dbE+0x88>
8020f568: e6 70        	ld	ra, 0x78(sp)
8020f56a: 46 74        	ld	s0, 0x70(sp)
;     }
8020f56c: 09 61        	addi	sp, sp, 0x80
8020f56e: 82 80        	ret

000000008020f570 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hbb42d3bb87dc66aeE>:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
8020f570: 19 71        	addi	sp, sp, -0x80
8020f572: 86 fc        	sd	ra, 0x78(sp)
8020f574: a2 f8        	sd	s0, 0x70(sp)
8020f576: 00 01        	addi	s0, sp, 0x80
8020f578: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020f57c: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020f580: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f584: 09 a0        	j	0x8020f586 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hbb42d3bb87dc66aeE+0x16>
8020f586: 03 35 04 f8  	ld	a0, -0x80(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f58a: 08 61        	ld	a0, 0x0(a0)
8020f58c: 19 e1        	bnez	a0, 0x8020f592 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hbb42d3bb87dc66aeE+0x22>
8020f58e: 09 a0        	j	0x8020f590 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hbb42d3bb87dc66aeE+0x20>
8020f590: b9 a8        	j	0x8020f5ee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hbb42d3bb87dc66aeE+0x7e>
8020f592: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f596: 03 35 04 f8  	ld	a0, -0x80(s0)
8020f59a: 21 46        	li	a2, 0x8
;     intrinsics::min_align_of::<T>()
8020f59c: 23 34 c4 fc  	sd	a2, -0x38(s0)
;     intrinsics::size_of::<T>()
8020f5a0: 23 38 c4 fc  	sd	a2, -0x30(s0)
;                 let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
8020f5a4: 14 61        	ld	a3, 0x0(a0)
8020f5a6: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     uint_impl! {
8020f5aa: 8e 06        	slli	a3, a3, 0x3
8020f5ac: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
8020f5b0: 23 3c d4 f8  	sd	a3, -0x68(s0)
8020f5b4: 23 38 c4 f8  	sd	a2, -0x70(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f5b8: 08 65        	ld	a0, 0x8(a0)
8020f5ba: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020f5be: 23 3c a4 fa  	sd	a0, -0x48(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f5c2: 03 35 84 fb  	ld	a0, -0x48(s0)
8020f5c6: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020f5ca: 03 36 04 f9  	ld	a2, -0x70(s0)
8020f5ce: 03 35 84 f9  	ld	a0, -0x68(s0)
8020f5d2: 23 34 c4 fa  	sd	a2, -0x58(s0)
8020f5d6: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020f5da: 03 35 04 fb  	ld	a0, -0x50(s0)
8020f5de: 88 e9        	sd	a0, 0x10(a1)
8020f5e0: 03 35 84 fa  	ld	a0, -0x58(s0)
8020f5e4: 88 e5        	sd	a0, 0x8(a1)
8020f5e6: 03 35 04 fa  	ld	a0, -0x60(s0)
8020f5ea: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f5ec: 31 a0        	j	0x8020f5f8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hbb42d3bb87dc66aeE+0x88>
8020f5ee: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f5f2: 01 45        	li	a0, 0x0
;             None
8020f5f4: 88 e5        	sd	a0, 0x8(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f5f6: 09 a0        	j	0x8020f5f8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hbb42d3bb87dc66aeE+0x88>
8020f5f8: e6 70        	ld	ra, 0x78(sp)
8020f5fa: 46 74        	ld	s0, 0x70(sp)
;     }
8020f5fc: 09 61        	addi	sp, sp, 0x80
8020f5fe: 82 80        	ret

000000008020f600 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc050dfbb17da6580E>:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
8020f600: 19 71        	addi	sp, sp, -0x80
8020f602: 86 fc        	sd	ra, 0x78(sp)
8020f604: a2 f8        	sd	s0, 0x70(sp)
8020f606: 00 01        	addi	s0, sp, 0x80
8020f608: 23 30 b4 f8  	sd	a1, -0x80(s0)
8020f60c: 23 34 a4 f8  	sd	a0, -0x78(s0)
8020f610: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f614: 09 a0        	j	0x8020f616 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc050dfbb17da6580E+0x16>
8020f616: 03 35 04 f8  	ld	a0, -0x80(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f61a: 08 61        	ld	a0, 0x0(a0)
8020f61c: 19 e1        	bnez	a0, 0x8020f622 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc050dfbb17da6580E+0x22>
8020f61e: 09 a0        	j	0x8020f620 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc050dfbb17da6580E+0x20>
8020f620: 85 a0        	j	0x8020f680 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc050dfbb17da6580E+0x80>
8020f622: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f626: 03 35 04 f8  	ld	a0, -0x80(s0)
8020f62a: 21 46        	li	a2, 0x8
;     intrinsics::min_align_of::<T>()
8020f62c: 23 34 c4 fc  	sd	a2, -0x38(s0)
8020f630: c1 46        	li	a3, 0x10
;     intrinsics::size_of::<T>()
8020f632: 23 38 d4 fc  	sd	a3, -0x30(s0)
;                 let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
8020f636: 14 61        	ld	a3, 0x0(a0)
8020f638: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     uint_impl! {
8020f63c: 92 06        	slli	a3, a3, 0x4
8020f63e: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
8020f642: 23 3c d4 f8  	sd	a3, -0x68(s0)
8020f646: 23 38 c4 f8  	sd	a2, -0x70(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f64a: 08 65        	ld	a0, 0x8(a0)
8020f64c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020f650: 23 3c a4 fa  	sd	a0, -0x48(s0)
;                 Some((self.ptr.cast().into(), layout))
8020f654: 03 35 84 fb  	ld	a0, -0x48(s0)
8020f658: 23 30 a4 fa  	sd	a0, -0x60(s0)
8020f65c: 03 36 04 f9  	ld	a2, -0x70(s0)
8020f660: 03 35 84 f9  	ld	a0, -0x68(s0)
8020f664: 23 34 c4 fa  	sd	a2, -0x58(s0)
8020f668: 23 38 a4 fa  	sd	a0, -0x50(s0)
8020f66c: 03 35 04 fb  	ld	a0, -0x50(s0)
8020f670: 88 e9        	sd	a0, 0x10(a1)
8020f672: 03 35 84 fa  	ld	a0, -0x58(s0)
8020f676: 88 e5        	sd	a0, 0x8(a1)
8020f678: 03 35 04 fa  	ld	a0, -0x60(s0)
8020f67c: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f67e: 31 a0        	j	0x8020f68a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc050dfbb17da6580E+0x8a>
8020f680: 83 35 84 f8  	ld	a1, -0x78(s0)
8020f684: 01 45        	li	a0, 0x0
;             None
8020f686: 88 e5        	sd	a0, 0x8(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8020f688: 09 a0        	j	0x8020f68a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17hc050dfbb17da6580E+0x8a>
8020f68a: e6 70        	ld	ra, 0x78(sp)
8020f68c: 46 74        	ld	s0, 0x70(sp)
;     }
8020f68e: 09 61        	addi	sp, sp, 0x80
8020f690: 82 80        	ret

000000008020f692 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h09df1b2591a57833E>:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
8020f692: 13 01 01 d3  	addi	sp, sp, -0x2d0
8020f696: 23 34 11 2c  	sd	ra, 0x2c8(sp)
8020f69a: 23 30 81 2c  	sd	s0, 0x2c0(sp)
8020f69e: 80 0d        	addi	s0, sp, 0x2d0
8020f6a0: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
8020f6a4: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
8020f6a8: 23 34 a4 d6  	sd	a0, -0x298(s0)

000000008020f6ac <.Lpcrel_hi0>:
8020f6ac: 97 46 02 00  	auipc	a3, 0x24
8020f6b0: 93 86 46 be  	addi	a3, a3, -0x41c
8020f6b4: 9c 62        	ld	a5, 0x0(a3)
8020f6b6: 98 66        	ld	a4, 0x8(a3)
;     fn into(self) -> U {
8020f6b8: 23 38 f4 d6  	sd	a5, -0x290(s0)
8020f6bc: 23 3c e4 d6  	sd	a4, -0x288(s0)
8020f6c0: 9c 62        	ld	a5, 0x0(a3)
8020f6c2: 98 66        	ld	a4, 0x8(a3)
;     fn from(kind: TryReserveErrorKind) -> Self {
8020f6c4: 23 30 f4 d8  	sd	a5, -0x280(s0)
8020f6c8: 23 34 e4 d8  	sd	a4, -0x278(s0)
8020f6cc: 98 62        	ld	a4, 0x0(a3)
8020f6ce: 94 66        	ld	a3, 0x8(a3)
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
8020f6d0: 23 38 e4 d8  	sd	a4, -0x270(s0)
8020f6d4: 23 3c d4 d8  	sd	a3, -0x268(s0)
8020f6d8: a1 46        	li	a3, 0x8
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
8020f6da: 23 34 d4 da  	sd	a3, -0x258(s0)
;     fn max(self, other: Self) -> Self
8020f6de: 23 38 d4 da  	sd	a3, -0x250(s0)
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8020f6e2: 23 3c d4 da  	sd	a3, -0x248(s0)
8020f6e6: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020f6ea: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8020f6ee: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;         if T::IS_ZST {
8020f6f2: 09 a0        	j	0x8020f6f4 <.Lpcrel_hi0+0x48>
8020f6f4: 03 35 04 d6  	ld	a0, -0x2a0(s0)
8020f6f8: 83 35 84 d5  	ld	a1, -0x2a8(s0)
;     uint_impl! {
8020f6fc: aa 95        	add	a1, a1, a0
8020f6fe: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
8020f702: 33 b5 a5 00  	sltu	a0, a1, a0
8020f706: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8020f70a: a3 0f a4 f2  	sb	a0, -0xc1(s0)
8020f70e: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8020f712: a3 07 a4 f4  	sb	a0, -0xb1(s0)
8020f716: 03 45 f4 f4  	lbu	a0, -0xb1(s0)
8020f71a: 05 89        	andi	a0, a0, 0x1
8020f71c: 41 e5        	bnez	a0, 0x8020f7a4 <.Lpcrel_hi1>
8020f71e: 09 a0        	j	0x8020f720 <.Lpcrel_hi0+0x74>
8020f720: 83 35 84 d6  	ld	a1, -0x298(s0)
8020f724: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;     uint_impl! {
8020f728: 23 30 a4 e0  	sd	a0, -0x200(s0)
8020f72c: 05 45        	li	a0, 0x1
8020f72e: 23 3c a4 de  	sd	a0, -0x208(s0)
;             Some(v) => Ok(v),
8020f732: 03 35 04 e0  	ld	a0, -0x200(s0)
8020f736: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020f73a: 23 38 a4 de  	sd	a0, -0x210(s0)
8020f73e: 7d 55        	li	a0, -0x1
8020f740: 7e 15        	slli	a0, a0, 0x3f
8020f742: 05 05        	addi	a0, a0, 0x1
8020f744: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Ok(v) => ControlFlow::Continue(v),
8020f748: 03 36 04 df  	ld	a2, -0x210(s0)
8020f74c: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8020f750: 23 30 c4 de  	sd	a2, -0x220(s0)
8020f754: 23 3c a4 dc  	sd	a0, -0x228(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8020f758: 03 35 04 de  	ld	a0, -0x220(s0)
8020f75c: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         let cap = cmp::max(self.cap.0 * 2, required_cap);
8020f760: 8c 61        	ld	a1, 0x0(a1)
8020f762: 86 05        	slli	a1, a1, 0x1
8020f764: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
8020f768: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
8020f76c: 13 05 04 e2  	addi	a0, s0, -0x1e0
;     match compare(&v1, &v2) {
8020f770: 23 38 a4 ea  	sd	a0, -0x150(s0)
8020f774: 13 05 84 e2  	addi	a0, s0, -0x1d8
8020f778: 23 3c a4 ea  	sd	a0, -0x148(s0)
8020f77c: 03 35 04 eb  	ld	a0, -0x150(s0)
8020f780: 83 35 84 eb  	ld	a1, -0x148(s0)
8020f784: 97 80 ff ff  	auipc	ra, 0xffff8
8020f788: e7 80 20 00  	jalr	0x2(ra) <ekernel+0xffcba786>
8020f78c: a3 07 a4 ea  	sb	a0, -0x151(s0)
8020f790: 03 45 f4 ea  	lbu	a0, -0x151(s0)
8020f794: 05 25        	addiw	a0, a0, 0x1
8020f796: 13 75 f5 0f  	andi	a0, a0, 0xff
8020f79a: 89 45        	li	a1, 0x2
8020f79c: 63 66 b5 08  	bltu	a0, a1, 0x8020f828 <.Lpcrel_hi1+0x84>
8020f7a0: 09 a0        	j	0x8020f7a2 <.Lpcrel_hi0+0xf6>
8020f7a2: 41 a8        	j	0x8020f832 <.Lpcrel_hi1+0x8e>

000000008020f7a4 <.Lpcrel_hi1>:
;     uint_impl! {
8020f7a4: 17 45 02 00  	auipc	a0, 0x24
8020f7a8: 13 05 c5 ae  	addi	a0, a0, -0x514
8020f7ac: 10 61        	ld	a2, 0x0(a0)
8020f7ae: 0c 65        	ld	a1, 0x8(a0)
8020f7b0: 23 3c c4 de  	sd	a2, -0x208(s0)
8020f7b4: 23 30 b4 e0  	sd	a1, -0x200(s0)
;             None => Err(err),
8020f7b8: 0c 61        	ld	a1, 0x0(a0)
8020f7ba: 08 65        	ld	a0, 0x8(a0)
8020f7bc: 23 34 b4 de  	sd	a1, -0x218(s0)
8020f7c0: 23 38 a4 de  	sd	a0, -0x210(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
8020f7c4: 83 35 84 de  	ld	a1, -0x218(s0)
8020f7c8: 03 35 04 df  	ld	a0, -0x210(s0)
8020f7cc: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020f7d0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020f7d4: 23 3c b4 e8  	sd	a1, -0x168(s0)
8020f7d8: 23 30 a4 ea  	sd	a0, -0x160(s0)
8020f7dc: 83 35 84 e9  	ld	a1, -0x168(s0)
8020f7e0: 03 35 04 ea  	ld	a0, -0x160(s0)
8020f7e4: 23 3c b4 dc  	sd	a1, -0x228(s0)
8020f7e8: 23 30 a4 de  	sd	a0, -0x220(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8020f7ec: 83 35 84 dd  	ld	a1, -0x228(s0)
8020f7f0: 03 35 04 de  	ld	a0, -0x220(s0)
8020f7f4: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
8020f7f8: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;             Err(e) => Err(From::from(e)),
8020f7fc: 83 35 84 e0  	ld	a1, -0x1f8(s0)
8020f800: 03 35 04 e1  	ld	a0, -0x1f0(s0)
8020f804: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020f808: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
8020f80c: 23 30 b4 ec  	sd	a1, -0x140(s0)
8020f810: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
8020f814: 83 35 04 ec  	ld	a1, -0x140(s0)
8020f818: 03 35 84 ec  	ld	a0, -0x138(s0)
8020f81c: 23 34 b4 dc  	sd	a1, -0x238(s0)
8020f820: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
8020f824: 55 aa        	j	0x8020f9d8 <.Lpcrel_hi2+0x84>
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8020f826: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
8020f828: 03 35 84 e2  	ld	a0, -0x1d8(s0)
8020f82c: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
8020f830: 31 a0        	j	0x8020f83c <.Lpcrel_hi1+0x98>
;         Ordering::Greater => v1,
8020f832: 03 35 04 e2  	ld	a0, -0x1e0(s0)
8020f836: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
8020f83a: 09 a0        	j	0x8020f83c <.Lpcrel_hi1+0x98>
;         let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
8020f83c: 03 35 84 e1  	ld	a0, -0x1e8(s0)
8020f840: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8020f844: 21 45        	li	a0, 0x8
8020f846: 23 38 a4 ec  	sd	a0, -0x130(s0)
8020f84a: 13 05 04 ed  	addi	a0, s0, -0x130
;     match compare(&v1, &v2) {
8020f84e: 23 30 a4 ee  	sd	a0, -0x120(s0)
8020f852: 13 05 84 e3  	addi	a0, s0, -0x1c8
8020f856: 23 34 a4 ee  	sd	a0, -0x118(s0)
8020f85a: 03 35 04 ee  	ld	a0, -0x120(s0)
8020f85e: 83 35 84 ee  	ld	a1, -0x118(s0)
8020f862: 97 80 ff ff  	auipc	ra, 0xffff8
8020f866: e7 80 40 f2  	jalr	-0xdc(ra) <ekernel+0xffcba786>
8020f86a: a3 0f a4 ec  	sb	a0, -0x121(s0)
8020f86e: 03 45 f4 ed  	lbu	a0, -0x121(s0)
8020f872: 05 25        	addiw	a0, a0, 0x1
8020f874: 13 75 f5 0f  	andi	a0, a0, 0xff
8020f878: 89 45        	li	a1, 0x2
8020f87a: 63 64 b5 00  	bltu	a0, a1, 0x8020f882 <.Lpcrel_hi1+0xde>
8020f87e: 09 a0        	j	0x8020f880 <.Lpcrel_hi1+0xdc>
8020f880: 31 a0        	j	0x8020f88c <.Lpcrel_hi1+0xe8>
;         Ordering::Less | Ordering::Equal => v2,
8020f882: 03 35 84 e3  	ld	a0, -0x1c8(s0)
8020f886: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
8020f88a: 31 a0        	j	0x8020f896 <.Lpcrel_hi1+0xf2>
;         Ordering::Greater => v1,
8020f88c: 03 35 04 ed  	ld	a0, -0x130(s0)
8020f890: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
8020f894: 09 a0        	j	0x8020f896 <.Lpcrel_hi1+0xf2>
;         let new_layout = Layout::array::<T>(cap);
8020f896: 03 36 04 e3  	ld	a2, -0x1d0(s0)
8020f89a: 23 34 c4 f6  	sd	a2, -0x98(s0)
8020f89e: 85 45        	li	a1, 0x1
;     intrinsics::min_align_of::<T>()
8020f8a0: 23 38 b4 f6  	sd	a1, -0x90(s0)
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
8020f8a4: 2e 85        	mv	a0, a1
8020f8a6: 97 40 00 00  	auipc	ra, 0x4
8020f8aa: e7 80 e0 3f  	jalr	0x3fe(ra) <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E>
8020f8ae: 2a 86        	mv	a2, a0
8020f8b0: 23 3c c4 d2  	sd	a2, -0x2c8(s0)
8020f8b4: 2e 85        	mv	a0, a1
8020f8b6: 83 35 84 d6  	ld	a1, -0x298(s0)
8020f8ba: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
8020f8be: 23 3c c4 f6  	sd	a2, -0x88(s0)
8020f8c2: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020f8c6: 13 05 04 e7  	addi	a0, s0, -0x190
8020f8ca: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8020f8ce: 97 00 00 00  	auipc	ra, 0x0
8020f8d2: e7 80 40 af  	jalr	-0x50c(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h5d04944e220ce5f4E>
8020f8d6: 03 35 84 d6  	ld	a0, -0x298(s0)
8020f8da: 83 35 84 d3  	ld	a1, -0x2c8(s0)
8020f8de: 03 36 04 d4  	ld	a2, -0x2c0(s0)
8020f8e2: 83 36 84 d4  	ld	a3, -0x2b8(s0)
8020f8e6: 13 07 05 01  	addi	a4, a0, 0x10
8020f8ea: 13 05 84 e5  	addi	a0, s0, -0x1a8
8020f8ee: 97 a0 01 00  	auipc	ra, 0x1a
8020f8f2: e7 80 00 a9  	jalr	-0x570(ra) <_ZN5alloc7raw_vec11finish_grow17hbea6f7417b6e6d1fE>
;         match self {
8020f8f6: 03 35 84 e5  	ld	a0, -0x1a8(s0)
8020f8fa: 25 e9        	bnez	a0, 0x8020f96a <.Lpcrel_hi2+0x16>
8020f8fc: 09 a0        	j	0x8020f8fe <.Lpcrel_hi1+0x15a>
8020f8fe: 83 35 84 d6  	ld	a1, -0x298(s0)
;             Ok(v) => ControlFlow::Continue(v),
8020f902: 03 36 04 e6  	ld	a2, -0x1a0(s0)
8020f906: 03 35 84 e6  	ld	a0, -0x198(s0)
8020f90a: 23 34 c4 f8  	sd	a2, -0x78(s0)
8020f90e: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020f912: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
8020f916: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8020f91a: 01 45        	li	a0, 0x0
8020f91c: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8020f920: 03 36 84 e4  	ld	a2, -0x1b8(s0)
8020f924: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8020f928: 23 3c c4 f8  	sd	a2, -0x68(s0)
8020f92c: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { self.set_ptr_and_cap(ptr, cap) };
8020f930: 03 35 04 e3  	ld	a0, -0x1d0(s0)
8020f934: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020f938: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
8020f93c: 03 36 84 f0  	ld	a2, -0xf8(s0)
8020f940: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
8020f944: 03 36 04 f0  	ld	a2, -0x100(s0)
8020f948: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
8020f94a: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8020f94e: 03 35 04 f1  	ld	a0, -0xf0(s0)
8020f952: 88 e1        	sd	a0, 0x0(a1)

000000008020f954 <.Lpcrel_hi2>:
;         Ok(())
8020f954: 17 45 02 00  	auipc	a0, 0x24
8020f958: 13 05 c5 91  	addi	a0, a0, -0x6e4
8020f95c: 0c 61        	ld	a1, 0x0(a0)
8020f95e: 08 65        	ld	a0, 0x8(a0)
8020f960: 23 34 b4 dc  	sd	a1, -0x238(s0)
8020f964: 23 38 a4 dc  	sd	a0, -0x230(s0)
;     }
8020f968: a9 a8        	j	0x8020f9c2 <.Lpcrel_hi2+0x6e>
;             Err(e) => ControlFlow::Break(Err(e)),
8020f96a: 83 35 04 e6  	ld	a1, -0x1a0(s0)
8020f96e: 03 35 84 e6  	ld	a0, -0x198(s0)
8020f972: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020f976: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020f97a: 23 38 b4 ee  	sd	a1, -0x110(s0)
8020f97e: 23 3c a4 ee  	sd	a0, -0x108(s0)
8020f982: 83 35 04 ef  	ld	a1, -0x110(s0)
8020f986: 03 35 84 ef  	ld	a0, -0x108(s0)
8020f98a: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
8020f98e: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8020f992: 05 45        	li	a0, 0x1
8020f994: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8020f998: 83 35 84 e4  	ld	a1, -0x1b8(s0)
8020f99c: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8020f9a0: 23 34 b4 e8  	sd	a1, -0x178(s0)
8020f9a4: 23 38 a4 e8  	sd	a0, -0x170(s0)
;             Err(e) => Err(From::from(e)),
8020f9a8: 83 35 84 e8  	ld	a1, -0x178(s0)
8020f9ac: 03 35 04 e9  	ld	a0, -0x170(s0)
8020f9b0: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020f9b4: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020f9b8: 23 34 b4 dc  	sd	a1, -0x238(s0)
8020f9bc: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
8020f9c0: 21 a8        	j	0x8020f9d8 <.Lpcrel_hi2+0x84>
;     }
8020f9c2: 03 35 84 dc  	ld	a0, -0x238(s0)
8020f9c6: 83 35 04 dd  	ld	a1, -0x230(s0)
8020f9ca: 83 30 81 2c  	ld	ra, 0x2c8(sp)
8020f9ce: 03 34 01 2c  	ld	s0, 0x2c0(sp)
8020f9d2: 13 01 01 2d  	addi	sp, sp, 0x2d0
8020f9d6: 82 80        	ret
; #![no_std]
8020f9d8: ed b7        	j	0x8020f9c2 <.Lpcrel_hi2+0x6e>

000000008020f9da <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h2dd7b1c53ff812adE>:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
8020f9da: 13 01 01 d3  	addi	sp, sp, -0x2d0
8020f9de: 23 34 11 2c  	sd	ra, 0x2c8(sp)
8020f9e2: 23 30 81 2c  	sd	s0, 0x2c0(sp)
8020f9e6: 80 0d        	addi	s0, sp, 0x2d0
8020f9e8: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
8020f9ec: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
8020f9f0: 23 34 a4 d6  	sd	a0, -0x298(s0)

000000008020f9f4 <.Lpcrel_hi3>:
8020f9f4: 97 46 02 00  	auipc	a3, 0x24
8020f9f8: 93 86 c6 89  	addi	a3, a3, -0x764
8020f9fc: 9c 62        	ld	a5, 0x0(a3)
8020f9fe: 98 66        	ld	a4, 0x8(a3)
;     fn into(self) -> U {
8020fa00: 23 38 f4 d6  	sd	a5, -0x290(s0)
8020fa04: 23 3c e4 d6  	sd	a4, -0x288(s0)
8020fa08: 9c 62        	ld	a5, 0x0(a3)
8020fa0a: 98 66        	ld	a4, 0x8(a3)
;     fn from(kind: TryReserveErrorKind) -> Self {
8020fa0c: 23 30 f4 d8  	sd	a5, -0x280(s0)
8020fa10: 23 34 e4 d8  	sd	a4, -0x278(s0)
8020fa14: 98 62        	ld	a4, 0x0(a3)
8020fa16: 94 66        	ld	a3, 0x8(a3)
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
8020fa18: 23 38 e4 d8  	sd	a4, -0x270(s0)
8020fa1c: 23 3c d4 d8  	sd	a3, -0x268(s0)
8020fa20: 91 46        	li	a3, 0x4
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
8020fa22: 23 34 d4 da  	sd	a3, -0x258(s0)
;     fn max(self, other: Self) -> Self
8020fa26: 23 38 d4 da  	sd	a3, -0x250(s0)
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8020fa2a: 23 3c d4 da  	sd	a3, -0x248(s0)
8020fa2e: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020fa32: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8020fa36: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;         if T::IS_ZST {
8020fa3a: 09 a0        	j	0x8020fa3c <.Lpcrel_hi3+0x48>
8020fa3c: 03 35 04 d6  	ld	a0, -0x2a0(s0)
8020fa40: 83 35 84 d5  	ld	a1, -0x2a8(s0)
;     uint_impl! {
8020fa44: aa 95        	add	a1, a1, a0
8020fa46: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
8020fa4a: 33 b5 a5 00  	sltu	a0, a1, a0
8020fa4e: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8020fa52: a3 0f a4 f2  	sb	a0, -0xc1(s0)
8020fa56: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8020fa5a: a3 07 a4 f4  	sb	a0, -0xb1(s0)
8020fa5e: 03 45 f4 f4  	lbu	a0, -0xb1(s0)
8020fa62: 05 89        	andi	a0, a0, 0x1
8020fa64: 41 e5        	bnez	a0, 0x8020faec <.Lpcrel_hi4>
8020fa66: 09 a0        	j	0x8020fa68 <.Lpcrel_hi3+0x74>
8020fa68: 83 35 84 d6  	ld	a1, -0x298(s0)
8020fa6c: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;     uint_impl! {
8020fa70: 23 30 a4 e0  	sd	a0, -0x200(s0)
8020fa74: 05 45        	li	a0, 0x1
8020fa76: 23 3c a4 de  	sd	a0, -0x208(s0)
;             Some(v) => Ok(v),
8020fa7a: 03 35 04 e0  	ld	a0, -0x200(s0)
8020fa7e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020fa82: 23 38 a4 de  	sd	a0, -0x210(s0)
8020fa86: 7d 55        	li	a0, -0x1
8020fa88: 7e 15        	slli	a0, a0, 0x3f
8020fa8a: 05 05        	addi	a0, a0, 0x1
8020fa8c: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Ok(v) => ControlFlow::Continue(v),
8020fa90: 03 36 04 df  	ld	a2, -0x210(s0)
8020fa94: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8020fa98: 23 30 c4 de  	sd	a2, -0x220(s0)
8020fa9c: 23 3c a4 dc  	sd	a0, -0x228(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8020faa0: 03 35 04 de  	ld	a0, -0x220(s0)
8020faa4: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         let cap = cmp::max(self.cap.0 * 2, required_cap);
8020faa8: 8c 61        	ld	a1, 0x0(a1)
8020faaa: 86 05        	slli	a1, a1, 0x1
8020faac: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
8020fab0: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
8020fab4: 13 05 04 e2  	addi	a0, s0, -0x1e0
;     match compare(&v1, &v2) {
8020fab8: 23 38 a4 ea  	sd	a0, -0x150(s0)
8020fabc: 13 05 84 e2  	addi	a0, s0, -0x1d8
8020fac0: 23 3c a4 ea  	sd	a0, -0x148(s0)
8020fac4: 03 35 04 eb  	ld	a0, -0x150(s0)
8020fac8: 83 35 84 eb  	ld	a1, -0x148(s0)
8020facc: 97 80 ff ff  	auipc	ra, 0xffff8
8020fad0: e7 80 a0 cb  	jalr	-0x346(ra) <ekernel+0xffcba786>
8020fad4: a3 07 a4 ea  	sb	a0, -0x151(s0)
8020fad8: 03 45 f4 ea  	lbu	a0, -0x151(s0)
8020fadc: 05 25        	addiw	a0, a0, 0x1
8020fade: 13 75 f5 0f  	andi	a0, a0, 0xff
8020fae2: 89 45        	li	a1, 0x2
8020fae4: 63 66 b5 08  	bltu	a0, a1, 0x8020fb70 <.Lpcrel_hi4+0x84>
8020fae8: 09 a0        	j	0x8020faea <.Lpcrel_hi3+0xf6>
8020faea: 41 a8        	j	0x8020fb7a <.Lpcrel_hi4+0x8e>

000000008020faec <.Lpcrel_hi4>:
;     uint_impl! {
8020faec: 17 35 02 00  	auipc	a0, 0x23
8020faf0: 13 05 45 7a  	addi	a0, a0, 0x7a4
8020faf4: 10 61        	ld	a2, 0x0(a0)
8020faf6: 0c 65        	ld	a1, 0x8(a0)
8020faf8: 23 3c c4 de  	sd	a2, -0x208(s0)
8020fafc: 23 30 b4 e0  	sd	a1, -0x200(s0)
;             None => Err(err),
8020fb00: 0c 61        	ld	a1, 0x0(a0)
8020fb02: 08 65        	ld	a0, 0x8(a0)
8020fb04: 23 34 b4 de  	sd	a1, -0x218(s0)
8020fb08: 23 38 a4 de  	sd	a0, -0x210(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
8020fb0c: 83 35 84 de  	ld	a1, -0x218(s0)
8020fb10: 03 35 04 df  	ld	a0, -0x210(s0)
8020fb14: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020fb18: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020fb1c: 23 3c b4 e8  	sd	a1, -0x168(s0)
8020fb20: 23 30 a4 ea  	sd	a0, -0x160(s0)
8020fb24: 83 35 84 e9  	ld	a1, -0x168(s0)
8020fb28: 03 35 04 ea  	ld	a0, -0x160(s0)
8020fb2c: 23 3c b4 dc  	sd	a1, -0x228(s0)
8020fb30: 23 30 a4 de  	sd	a0, -0x220(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8020fb34: 83 35 84 dd  	ld	a1, -0x228(s0)
8020fb38: 03 35 04 de  	ld	a0, -0x220(s0)
8020fb3c: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
8020fb40: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;             Err(e) => Err(From::from(e)),
8020fb44: 83 35 84 e0  	ld	a1, -0x1f8(s0)
8020fb48: 03 35 04 e1  	ld	a0, -0x1f0(s0)
8020fb4c: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020fb50: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
8020fb54: 23 30 b4 ec  	sd	a1, -0x140(s0)
8020fb58: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
8020fb5c: 83 35 04 ec  	ld	a1, -0x140(s0)
8020fb60: 03 35 84 ec  	ld	a0, -0x138(s0)
8020fb64: 23 34 b4 dc  	sd	a1, -0x238(s0)
8020fb68: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
8020fb6c: 55 aa        	j	0x8020fd20 <.Lpcrel_hi5+0x84>
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8020fb6e: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
8020fb70: 03 35 84 e2  	ld	a0, -0x1d8(s0)
8020fb74: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
8020fb78: 31 a0        	j	0x8020fb84 <.Lpcrel_hi4+0x98>
;         Ordering::Greater => v1,
8020fb7a: 03 35 04 e2  	ld	a0, -0x1e0(s0)
8020fb7e: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
8020fb82: 09 a0        	j	0x8020fb84 <.Lpcrel_hi4+0x98>
;         let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
8020fb84: 03 35 84 e1  	ld	a0, -0x1e8(s0)
8020fb88: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8020fb8c: 11 45        	li	a0, 0x4
8020fb8e: 23 38 a4 ec  	sd	a0, -0x130(s0)
8020fb92: 13 05 04 ed  	addi	a0, s0, -0x130
;     match compare(&v1, &v2) {
8020fb96: 23 30 a4 ee  	sd	a0, -0x120(s0)
8020fb9a: 13 05 84 e3  	addi	a0, s0, -0x1c8
8020fb9e: 23 34 a4 ee  	sd	a0, -0x118(s0)
8020fba2: 03 35 04 ee  	ld	a0, -0x120(s0)
8020fba6: 83 35 84 ee  	ld	a1, -0x118(s0)
8020fbaa: 97 80 ff ff  	auipc	ra, 0xffff8
8020fbae: e7 80 c0 bd  	jalr	-0x424(ra) <ekernel+0xffcba786>
8020fbb2: a3 0f a4 ec  	sb	a0, -0x121(s0)
8020fbb6: 03 45 f4 ed  	lbu	a0, -0x121(s0)
8020fbba: 05 25        	addiw	a0, a0, 0x1
8020fbbc: 13 75 f5 0f  	andi	a0, a0, 0xff
8020fbc0: 89 45        	li	a1, 0x2
8020fbc2: 63 64 b5 00  	bltu	a0, a1, 0x8020fbca <.Lpcrel_hi4+0xde>
8020fbc6: 09 a0        	j	0x8020fbc8 <.Lpcrel_hi4+0xdc>
8020fbc8: 31 a0        	j	0x8020fbd4 <.Lpcrel_hi4+0xe8>
;         Ordering::Less | Ordering::Equal => v2,
8020fbca: 03 35 84 e3  	ld	a0, -0x1c8(s0)
8020fbce: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
8020fbd2: 31 a0        	j	0x8020fbde <.Lpcrel_hi4+0xf2>
;         Ordering::Greater => v1,
8020fbd4: 03 35 04 ed  	ld	a0, -0x130(s0)
8020fbd8: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
8020fbdc: 09 a0        	j	0x8020fbde <.Lpcrel_hi4+0xf2>
;         let new_layout = Layout::array::<T>(cap);
8020fbde: 03 36 04 e3  	ld	a2, -0x1d0(s0)
8020fbe2: 23 34 c4 f6  	sd	a2, -0x98(s0)
8020fbe6: a1 45        	li	a1, 0x8
;     intrinsics::min_align_of::<T>()
8020fbe8: 23 38 b4 f6  	sd	a1, -0x90(s0)
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
8020fbec: 2e 85        	mv	a0, a1
8020fbee: 97 40 00 00  	auipc	ra, 0x4
8020fbf2: e7 80 60 0b  	jalr	0xb6(ra) <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E>
8020fbf6: 2a 86        	mv	a2, a0
8020fbf8: 23 3c c4 d2  	sd	a2, -0x2c8(s0)
8020fbfc: 2e 85        	mv	a0, a1
8020fbfe: 83 35 84 d6  	ld	a1, -0x298(s0)
8020fc02: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
8020fc06: 23 3c c4 f6  	sd	a2, -0x88(s0)
8020fc0a: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020fc0e: 13 05 04 e7  	addi	a0, s0, -0x190
8020fc12: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8020fc16: 97 00 00 00  	auipc	ra, 0x0
8020fc1a: e7 80 a0 8c  	jalr	-0x736(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17ha26e7f61f3bdc5dbE>
8020fc1e: 03 35 84 d6  	ld	a0, -0x298(s0)
8020fc22: 83 35 84 d3  	ld	a1, -0x2c8(s0)
8020fc26: 03 36 04 d4  	ld	a2, -0x2c0(s0)
8020fc2a: 83 36 84 d4  	ld	a3, -0x2b8(s0)
8020fc2e: 13 07 05 01  	addi	a4, a0, 0x10
8020fc32: 13 05 84 e5  	addi	a0, s0, -0x1a8
8020fc36: 97 90 01 00  	auipc	ra, 0x19
8020fc3a: e7 80 80 74  	jalr	0x748(ra) <_ZN5alloc7raw_vec11finish_grow17hbea6f7417b6e6d1fE>
;         match self {
8020fc3e: 03 35 84 e5  	ld	a0, -0x1a8(s0)
8020fc42: 25 e9        	bnez	a0, 0x8020fcb2 <.Lpcrel_hi5+0x16>
8020fc44: 09 a0        	j	0x8020fc46 <.Lpcrel_hi4+0x15a>
8020fc46: 83 35 84 d6  	ld	a1, -0x298(s0)
;             Ok(v) => ControlFlow::Continue(v),
8020fc4a: 03 36 04 e6  	ld	a2, -0x1a0(s0)
8020fc4e: 03 35 84 e6  	ld	a0, -0x198(s0)
8020fc52: 23 34 c4 f8  	sd	a2, -0x78(s0)
8020fc56: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020fc5a: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
8020fc5e: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8020fc62: 01 45        	li	a0, 0x0
8020fc64: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8020fc68: 03 36 84 e4  	ld	a2, -0x1b8(s0)
8020fc6c: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8020fc70: 23 3c c4 f8  	sd	a2, -0x68(s0)
8020fc74: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { self.set_ptr_and_cap(ptr, cap) };
8020fc78: 03 35 04 e3  	ld	a0, -0x1d0(s0)
8020fc7c: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020fc80: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
8020fc84: 03 36 84 f0  	ld	a2, -0xf8(s0)
8020fc88: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
8020fc8c: 03 36 04 f0  	ld	a2, -0x100(s0)
8020fc90: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
8020fc92: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8020fc96: 03 35 04 f1  	ld	a0, -0xf0(s0)
8020fc9a: 88 e1        	sd	a0, 0x0(a1)

000000008020fc9c <.Lpcrel_hi5>:
;         Ok(())
8020fc9c: 17 35 02 00  	auipc	a0, 0x23
8020fca0: 13 05 45 5d  	addi	a0, a0, 0x5d4
8020fca4: 0c 61        	ld	a1, 0x0(a0)
8020fca6: 08 65        	ld	a0, 0x8(a0)
8020fca8: 23 34 b4 dc  	sd	a1, -0x238(s0)
8020fcac: 23 38 a4 dc  	sd	a0, -0x230(s0)
;     }
8020fcb0: a9 a8        	j	0x8020fd0a <.Lpcrel_hi5+0x6e>
;             Err(e) => ControlFlow::Break(Err(e)),
8020fcb2: 83 35 04 e6  	ld	a1, -0x1a0(s0)
8020fcb6: 03 35 84 e6  	ld	a0, -0x198(s0)
8020fcba: 23 38 b4 fa  	sd	a1, -0x50(s0)
8020fcbe: 23 3c a4 fa  	sd	a0, -0x48(s0)
8020fcc2: 23 38 b4 ee  	sd	a1, -0x110(s0)
8020fcc6: 23 3c a4 ee  	sd	a0, -0x108(s0)
8020fcca: 83 35 04 ef  	ld	a1, -0x110(s0)
8020fcce: 03 35 84 ef  	ld	a0, -0x108(s0)
8020fcd2: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
8020fcd6: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8020fcda: 05 45        	li	a0, 0x1
8020fcdc: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8020fce0: 83 35 84 e4  	ld	a1, -0x1b8(s0)
8020fce4: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8020fce8: 23 34 b4 e8  	sd	a1, -0x178(s0)
8020fcec: 23 38 a4 e8  	sd	a0, -0x170(s0)
;             Err(e) => Err(From::from(e)),
8020fcf0: 83 35 84 e8  	ld	a1, -0x178(s0)
8020fcf4: 03 35 04 e9  	ld	a0, -0x170(s0)
8020fcf8: 23 30 b4 fc  	sd	a1, -0x40(s0)
8020fcfc: 23 34 a4 fc  	sd	a0, -0x38(s0)
8020fd00: 23 34 b4 dc  	sd	a1, -0x238(s0)
8020fd04: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
8020fd08: 21 a8        	j	0x8020fd20 <.Lpcrel_hi5+0x84>
;     }
8020fd0a: 03 35 84 dc  	ld	a0, -0x238(s0)
8020fd0e: 83 35 04 dd  	ld	a1, -0x230(s0)
8020fd12: 83 30 81 2c  	ld	ra, 0x2c8(sp)
8020fd16: 03 34 01 2c  	ld	s0, 0x2c0(sp)
8020fd1a: 13 01 01 2d  	addi	sp, sp, 0x2d0
8020fd1e: 82 80        	ret
; #![no_std]
8020fd20: ed b7        	j	0x8020fd0a <.Lpcrel_hi5+0x6e>

000000008020fd22 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h4076e95ad41efe28E>:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
8020fd22: 13 01 01 d3  	addi	sp, sp, -0x2d0
8020fd26: 23 34 11 2c  	sd	ra, 0x2c8(sp)
8020fd2a: 23 30 81 2c  	sd	s0, 0x2c0(sp)
8020fd2e: 80 0d        	addi	s0, sp, 0x2d0
8020fd30: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
8020fd34: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
8020fd38: 23 34 a4 d6  	sd	a0, -0x298(s0)

000000008020fd3c <.Lpcrel_hi6>:
8020fd3c: 97 36 02 00  	auipc	a3, 0x23
8020fd40: 93 86 46 55  	addi	a3, a3, 0x554
8020fd44: 9c 62        	ld	a5, 0x0(a3)
8020fd46: 98 66        	ld	a4, 0x8(a3)
;     fn into(self) -> U {
8020fd48: 23 38 f4 d6  	sd	a5, -0x290(s0)
8020fd4c: 23 3c e4 d6  	sd	a4, -0x288(s0)
8020fd50: 9c 62        	ld	a5, 0x0(a3)
8020fd52: 98 66        	ld	a4, 0x8(a3)
;     fn from(kind: TryReserveErrorKind) -> Self {
8020fd54: 23 30 f4 d8  	sd	a5, -0x280(s0)
8020fd58: 23 34 e4 d8  	sd	a4, -0x278(s0)
8020fd5c: 98 62        	ld	a4, 0x0(a3)
8020fd5e: 94 66        	ld	a3, 0x8(a3)
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
8020fd60: 23 38 e4 d8  	sd	a4, -0x270(s0)
8020fd64: 23 3c d4 d8  	sd	a3, -0x268(s0)
8020fd68: 91 46        	li	a3, 0x4
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
8020fd6a: 23 34 d4 da  	sd	a3, -0x258(s0)
;     fn max(self, other: Self) -> Self
8020fd6e: 23 38 d4 da  	sd	a3, -0x250(s0)
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8020fd72: 23 3c d4 da  	sd	a3, -0x248(s0)
8020fd76: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8020fd7a: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8020fd7e: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;         if T::IS_ZST {
8020fd82: 09 a0        	j	0x8020fd84 <.Lpcrel_hi6+0x48>
8020fd84: 03 35 04 d6  	ld	a0, -0x2a0(s0)
8020fd88: 83 35 84 d5  	ld	a1, -0x2a8(s0)
;     uint_impl! {
8020fd8c: aa 95        	add	a1, a1, a0
8020fd8e: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
8020fd92: 33 b5 a5 00  	sltu	a0, a1, a0
8020fd96: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8020fd9a: a3 0f a4 f2  	sb	a0, -0xc1(s0)
8020fd9e: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8020fda2: a3 07 a4 f4  	sb	a0, -0xb1(s0)
8020fda6: 03 45 f4 f4  	lbu	a0, -0xb1(s0)
8020fdaa: 05 89        	andi	a0, a0, 0x1
8020fdac: 41 e5        	bnez	a0, 0x8020fe34 <.Lpcrel_hi7>
8020fdae: 09 a0        	j	0x8020fdb0 <.Lpcrel_hi6+0x74>
8020fdb0: 83 35 84 d6  	ld	a1, -0x298(s0)
8020fdb4: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;     uint_impl! {
8020fdb8: 23 30 a4 e0  	sd	a0, -0x200(s0)
8020fdbc: 05 45        	li	a0, 0x1
8020fdbe: 23 3c a4 de  	sd	a0, -0x208(s0)
;             Some(v) => Ok(v),
8020fdc2: 03 35 04 e0  	ld	a0, -0x200(s0)
8020fdc6: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8020fdca: 23 38 a4 de  	sd	a0, -0x210(s0)
8020fdce: 7d 55        	li	a0, -0x1
8020fdd0: 7e 15        	slli	a0, a0, 0x3f
8020fdd2: 05 05        	addi	a0, a0, 0x1
8020fdd4: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Ok(v) => ControlFlow::Continue(v),
8020fdd8: 03 36 04 df  	ld	a2, -0x210(s0)
8020fddc: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8020fde0: 23 30 c4 de  	sd	a2, -0x220(s0)
8020fde4: 23 3c a4 dc  	sd	a0, -0x228(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8020fde8: 03 35 04 de  	ld	a0, -0x220(s0)
8020fdec: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         let cap = cmp::max(self.cap.0 * 2, required_cap);
8020fdf0: 8c 61        	ld	a1, 0x0(a1)
8020fdf2: 86 05        	slli	a1, a1, 0x1
8020fdf4: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
8020fdf8: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
8020fdfc: 13 05 04 e2  	addi	a0, s0, -0x1e0
;     match compare(&v1, &v2) {
8020fe00: 23 38 a4 ea  	sd	a0, -0x150(s0)
8020fe04: 13 05 84 e2  	addi	a0, s0, -0x1d8
8020fe08: 23 3c a4 ea  	sd	a0, -0x148(s0)
8020fe0c: 03 35 04 eb  	ld	a0, -0x150(s0)
8020fe10: 83 35 84 eb  	ld	a1, -0x148(s0)
8020fe14: 97 80 ff ff  	auipc	ra, 0xffff8
8020fe18: e7 80 20 97  	jalr	-0x68e(ra) <ekernel+0xffcba786>
8020fe1c: a3 07 a4 ea  	sb	a0, -0x151(s0)
8020fe20: 03 45 f4 ea  	lbu	a0, -0x151(s0)
8020fe24: 05 25        	addiw	a0, a0, 0x1
8020fe26: 13 75 f5 0f  	andi	a0, a0, 0xff
8020fe2a: 89 45        	li	a1, 0x2
8020fe2c: 63 66 b5 08  	bltu	a0, a1, 0x8020feb8 <.Lpcrel_hi7+0x84>
8020fe30: 09 a0        	j	0x8020fe32 <.Lpcrel_hi6+0xf6>
8020fe32: 41 a8        	j	0x8020fec2 <.Lpcrel_hi7+0x8e>

000000008020fe34 <.Lpcrel_hi7>:
;     uint_impl! {
8020fe34: 17 35 02 00  	auipc	a0, 0x23
8020fe38: 13 05 c5 45  	addi	a0, a0, 0x45c
8020fe3c: 10 61        	ld	a2, 0x0(a0)
8020fe3e: 0c 65        	ld	a1, 0x8(a0)
8020fe40: 23 3c c4 de  	sd	a2, -0x208(s0)
8020fe44: 23 30 b4 e0  	sd	a1, -0x200(s0)
;             None => Err(err),
8020fe48: 0c 61        	ld	a1, 0x0(a0)
8020fe4a: 08 65        	ld	a0, 0x8(a0)
8020fe4c: 23 34 b4 de  	sd	a1, -0x218(s0)
8020fe50: 23 38 a4 de  	sd	a0, -0x210(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
8020fe54: 83 35 84 de  	ld	a1, -0x218(s0)
8020fe58: 03 35 04 df  	ld	a0, -0x210(s0)
8020fe5c: 23 38 b4 fc  	sd	a1, -0x30(s0)
8020fe60: 23 3c a4 fc  	sd	a0, -0x28(s0)
8020fe64: 23 3c b4 e8  	sd	a1, -0x168(s0)
8020fe68: 23 30 a4 ea  	sd	a0, -0x160(s0)
8020fe6c: 83 35 84 e9  	ld	a1, -0x168(s0)
8020fe70: 03 35 04 ea  	ld	a0, -0x160(s0)
8020fe74: 23 3c b4 dc  	sd	a1, -0x228(s0)
8020fe78: 23 30 a4 de  	sd	a0, -0x220(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8020fe7c: 83 35 84 dd  	ld	a1, -0x228(s0)
8020fe80: 03 35 04 de  	ld	a0, -0x220(s0)
8020fe84: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
8020fe88: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;             Err(e) => Err(From::from(e)),
8020fe8c: 83 35 84 e0  	ld	a1, -0x1f8(s0)
8020fe90: 03 35 04 e1  	ld	a0, -0x1f0(s0)
8020fe94: 23 30 b4 fe  	sd	a1, -0x20(s0)
8020fe98: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
8020fe9c: 23 30 b4 ec  	sd	a1, -0x140(s0)
8020fea0: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
8020fea4: 83 35 04 ec  	ld	a1, -0x140(s0)
8020fea8: 03 35 84 ec  	ld	a0, -0x138(s0)
8020feac: 23 34 b4 dc  	sd	a1, -0x238(s0)
8020feb0: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
8020feb4: 55 aa        	j	0x80210068 <.Lpcrel_hi8+0x84>
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8020feb6: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
8020feb8: 03 35 84 e2  	ld	a0, -0x1d8(s0)
8020febc: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
8020fec0: 31 a0        	j	0x8020fecc <.Lpcrel_hi7+0x98>
;         Ordering::Greater => v1,
8020fec2: 03 35 04 e2  	ld	a0, -0x1e0(s0)
8020fec6: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
8020feca: 09 a0        	j	0x8020fecc <.Lpcrel_hi7+0x98>
;         let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
8020fecc: 03 35 84 e1  	ld	a0, -0x1e8(s0)
8020fed0: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8020fed4: 11 45        	li	a0, 0x4
8020fed6: 23 38 a4 ec  	sd	a0, -0x130(s0)
8020feda: 13 05 04 ed  	addi	a0, s0, -0x130
;     match compare(&v1, &v2) {
8020fede: 23 30 a4 ee  	sd	a0, -0x120(s0)
8020fee2: 13 05 84 e3  	addi	a0, s0, -0x1c8
8020fee6: 23 34 a4 ee  	sd	a0, -0x118(s0)
8020feea: 03 35 04 ee  	ld	a0, -0x120(s0)
8020feee: 83 35 84 ee  	ld	a1, -0x118(s0)
8020fef2: 97 80 ff ff  	auipc	ra, 0xffff8
8020fef6: e7 80 40 89  	jalr	-0x76c(ra) <ekernel+0xffcba786>
8020fefa: a3 0f a4 ec  	sb	a0, -0x121(s0)
8020fefe: 03 45 f4 ed  	lbu	a0, -0x121(s0)
8020ff02: 05 25        	addiw	a0, a0, 0x1
8020ff04: 13 75 f5 0f  	andi	a0, a0, 0xff
8020ff08: 89 45        	li	a1, 0x2
8020ff0a: 63 64 b5 00  	bltu	a0, a1, 0x8020ff12 <.Lpcrel_hi7+0xde>
8020ff0e: 09 a0        	j	0x8020ff10 <.Lpcrel_hi7+0xdc>
8020ff10: 31 a0        	j	0x8020ff1c <.Lpcrel_hi7+0xe8>
;         Ordering::Less | Ordering::Equal => v2,
8020ff12: 03 35 84 e3  	ld	a0, -0x1c8(s0)
8020ff16: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
8020ff1a: 31 a0        	j	0x8020ff26 <.Lpcrel_hi7+0xf2>
;         Ordering::Greater => v1,
8020ff1c: 03 35 04 ed  	ld	a0, -0x130(s0)
8020ff20: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
8020ff24: 09 a0        	j	0x8020ff26 <.Lpcrel_hi7+0xf2>
;         let new_layout = Layout::array::<T>(cap);
8020ff26: 03 36 04 e3  	ld	a2, -0x1d0(s0)
8020ff2a: 23 34 c4 f6  	sd	a2, -0x98(s0)
8020ff2e: a1 45        	li	a1, 0x8
;     intrinsics::min_align_of::<T>()
8020ff30: 23 38 b4 f6  	sd	a1, -0x90(s0)
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
8020ff34: 2e 85        	mv	a0, a1
8020ff36: 97 40 00 00  	auipc	ra, 0x4
8020ff3a: e7 80 e0 d6  	jalr	-0x292(ra) <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E>
8020ff3e: 2a 86        	mv	a2, a0
8020ff40: 23 3c c4 d2  	sd	a2, -0x2c8(s0)
8020ff44: 2e 85        	mv	a0, a1
8020ff46: 83 35 84 d6  	ld	a1, -0x298(s0)
8020ff4a: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
8020ff4e: 23 3c c4 f6  	sd	a2, -0x88(s0)
8020ff52: 23 30 a4 f8  	sd	a0, -0x80(s0)
8020ff56: 13 05 04 e7  	addi	a0, s0, -0x190
8020ff5a: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8020ff5e: 97 f0 ff ff  	auipc	ra, 0xfffff
8020ff62: e7 80 20 4f  	jalr	0x4f2(ra) <ekernel+0xffcc2450>
8020ff66: 03 35 84 d6  	ld	a0, -0x298(s0)
8020ff6a: 83 35 84 d3  	ld	a1, -0x2c8(s0)
8020ff6e: 03 36 04 d4  	ld	a2, -0x2c0(s0)
8020ff72: 83 36 84 d4  	ld	a3, -0x2b8(s0)
8020ff76: 13 07 05 01  	addi	a4, a0, 0x10
8020ff7a: 13 05 84 e5  	addi	a0, s0, -0x1a8
8020ff7e: 97 90 01 00  	auipc	ra, 0x19
8020ff82: e7 80 00 40  	jalr	0x400(ra) <_ZN5alloc7raw_vec11finish_grow17hbea6f7417b6e6d1fE>
;         match self {
8020ff86: 03 35 84 e5  	ld	a0, -0x1a8(s0)
8020ff8a: 25 e9        	bnez	a0, 0x8020fffa <.Lpcrel_hi8+0x16>
8020ff8c: 09 a0        	j	0x8020ff8e <.Lpcrel_hi7+0x15a>
8020ff8e: 83 35 84 d6  	ld	a1, -0x298(s0)
;             Ok(v) => ControlFlow::Continue(v),
8020ff92: 03 36 04 e6  	ld	a2, -0x1a0(s0)
8020ff96: 03 35 84 e6  	ld	a0, -0x198(s0)
8020ff9a: 23 34 c4 f8  	sd	a2, -0x78(s0)
8020ff9e: 23 38 a4 f8  	sd	a0, -0x70(s0)
8020ffa2: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
8020ffa6: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8020ffaa: 01 45        	li	a0, 0x0
8020ffac: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8020ffb0: 03 36 84 e4  	ld	a2, -0x1b8(s0)
8020ffb4: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8020ffb8: 23 3c c4 f8  	sd	a2, -0x68(s0)
8020ffbc: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { self.set_ptr_and_cap(ptr, cap) };
8020ffc0: 03 35 04 e3  	ld	a0, -0x1d0(s0)
8020ffc4: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8020ffc8: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
8020ffcc: 03 36 84 f0  	ld	a2, -0xf8(s0)
8020ffd0: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
8020ffd4: 03 36 04 f0  	ld	a2, -0x100(s0)
8020ffd8: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
8020ffda: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8020ffde: 03 35 04 f1  	ld	a0, -0xf0(s0)
8020ffe2: 88 e1        	sd	a0, 0x0(a1)

000000008020ffe4 <.Lpcrel_hi8>:
;         Ok(())
8020ffe4: 17 35 02 00  	auipc	a0, 0x23
8020ffe8: 13 05 c5 28  	addi	a0, a0, 0x28c
8020ffec: 0c 61        	ld	a1, 0x0(a0)
8020ffee: 08 65        	ld	a0, 0x8(a0)
8020fff0: 23 34 b4 dc  	sd	a1, -0x238(s0)
8020fff4: 23 38 a4 dc  	sd	a0, -0x230(s0)
;     }
8020fff8: a9 a8        	j	0x80210052 <.Lpcrel_hi8+0x6e>
;             Err(e) => ControlFlow::Break(Err(e)),
8020fffa: 83 35 04 e6  	ld	a1, -0x1a0(s0)
8020fffe: 03 35 84 e6  	ld	a0, -0x198(s0)
80210002: 23 38 b4 fa  	sd	a1, -0x50(s0)
80210006: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021000a: 23 38 b4 ee  	sd	a1, -0x110(s0)
8021000e: 23 3c a4 ee  	sd	a0, -0x108(s0)
80210012: 83 35 04 ef  	ld	a1, -0x110(s0)
80210016: 03 35 84 ef  	ld	a0, -0x108(s0)
8021001a: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
8021001e: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80210022: 05 45        	li	a0, 0x1
80210024: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80210028: 83 35 84 e4  	ld	a1, -0x1b8(s0)
8021002c: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80210030: 23 34 b4 e8  	sd	a1, -0x178(s0)
80210034: 23 38 a4 e8  	sd	a0, -0x170(s0)
;             Err(e) => Err(From::from(e)),
80210038: 83 35 84 e8  	ld	a1, -0x178(s0)
8021003c: 03 35 04 e9  	ld	a0, -0x170(s0)
80210040: 23 30 b4 fc  	sd	a1, -0x40(s0)
80210044: 23 34 a4 fc  	sd	a0, -0x38(s0)
80210048: 23 34 b4 dc  	sd	a1, -0x238(s0)
8021004c: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
80210050: 21 a8        	j	0x80210068 <.Lpcrel_hi8+0x84>
;     }
80210052: 03 35 84 dc  	ld	a0, -0x238(s0)
80210056: 83 35 04 dd  	ld	a1, -0x230(s0)
8021005a: 83 30 81 2c  	ld	ra, 0x2c8(sp)
8021005e: 03 34 01 2c  	ld	s0, 0x2c0(sp)
80210062: 13 01 01 2d  	addi	sp, sp, 0x2d0
80210066: 82 80        	ret
; #![no_std]
80210068: ed b7        	j	0x80210052 <.Lpcrel_hi8+0x6e>

000000008021006a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h600005c20893afdbE>:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
8021006a: 13 01 01 d3  	addi	sp, sp, -0x2d0
8021006e: 23 34 11 2c  	sd	ra, 0x2c8(sp)
80210072: 23 30 81 2c  	sd	s0, 0x2c0(sp)
80210076: 80 0d        	addi	s0, sp, 0x2d0
80210078: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
8021007c: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
80210080: 23 34 a4 d6  	sd	a0, -0x298(s0)

0000000080210084 <.Lpcrel_hi9>:
80210084: 97 36 02 00  	auipc	a3, 0x23
80210088: 93 86 c6 20  	addi	a3, a3, 0x20c
8021008c: 9c 62        	ld	a5, 0x0(a3)
8021008e: 98 66        	ld	a4, 0x8(a3)
;     fn into(self) -> U {
80210090: 23 38 f4 d6  	sd	a5, -0x290(s0)
80210094: 23 3c e4 d6  	sd	a4, -0x288(s0)
80210098: 9c 62        	ld	a5, 0x0(a3)
8021009a: 98 66        	ld	a4, 0x8(a3)
;     fn from(kind: TryReserveErrorKind) -> Self {
8021009c: 23 30 f4 d8  	sd	a5, -0x280(s0)
802100a0: 23 34 e4 d8  	sd	a4, -0x278(s0)
802100a4: 98 62        	ld	a4, 0x0(a3)
802100a6: 94 66        	ld	a3, 0x8(a3)
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
802100a8: 23 38 e4 d8  	sd	a4, -0x270(s0)
802100ac: 23 3c d4 d8  	sd	a3, -0x268(s0)
802100b0: 91 46        	li	a3, 0x4
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
802100b2: 23 34 d4 da  	sd	a3, -0x258(s0)
;     fn max(self, other: Self) -> Self
802100b6: 23 38 d4 da  	sd	a3, -0x250(s0)
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
802100ba: 23 3c d4 da  	sd	a3, -0x248(s0)
802100be: 23 3c a4 f0  	sd	a0, -0xe8(s0)
802100c2: 23 30 b4 f2  	sd	a1, -0xe0(s0)
802100c6: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;         if T::IS_ZST {
802100ca: 09 a0        	j	0x802100cc <.Lpcrel_hi9+0x48>
802100cc: 03 35 04 d6  	ld	a0, -0x2a0(s0)
802100d0: 83 35 84 d5  	ld	a1, -0x2a8(s0)
;     uint_impl! {
802100d4: aa 95        	add	a1, a1, a0
802100d6: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
802100da: 33 b5 a5 00  	sltu	a0, a1, a0
802100de: 23 38 b4 f2  	sd	a1, -0xd0(s0)
802100e2: a3 0f a4 f2  	sb	a0, -0xc1(s0)
802100e6: 23 30 b4 f4  	sd	a1, -0xc0(s0)
802100ea: a3 07 a4 f4  	sb	a0, -0xb1(s0)
802100ee: 03 45 f4 f4  	lbu	a0, -0xb1(s0)
802100f2: 05 89        	andi	a0, a0, 0x1
802100f4: 41 e5        	bnez	a0, 0x8021017c <.Lpcrel_hi10>
802100f6: 09 a0        	j	0x802100f8 <.Lpcrel_hi9+0x74>
802100f8: 83 35 84 d6  	ld	a1, -0x298(s0)
802100fc: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;     uint_impl! {
80210100: 23 30 a4 e0  	sd	a0, -0x200(s0)
80210104: 05 45        	li	a0, 0x1
80210106: 23 3c a4 de  	sd	a0, -0x208(s0)
;             Some(v) => Ok(v),
8021010a: 03 35 04 e0  	ld	a0, -0x200(s0)
8021010e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80210112: 23 38 a4 de  	sd	a0, -0x210(s0)
80210116: 7d 55        	li	a0, -0x1
80210118: 7e 15        	slli	a0, a0, 0x3f
8021011a: 05 05        	addi	a0, a0, 0x1
8021011c: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Ok(v) => ControlFlow::Continue(v),
80210120: 03 36 04 df  	ld	a2, -0x210(s0)
80210124: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80210128: 23 30 c4 de  	sd	a2, -0x220(s0)
8021012c: 23 3c a4 dc  	sd	a0, -0x228(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80210130: 03 35 04 de  	ld	a0, -0x220(s0)
80210134: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         let cap = cmp::max(self.cap.0 * 2, required_cap);
80210138: 8c 61        	ld	a1, 0x0(a1)
8021013a: 86 05        	slli	a1, a1, 0x1
8021013c: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
80210140: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
80210144: 13 05 04 e2  	addi	a0, s0, -0x1e0
;     match compare(&v1, &v2) {
80210148: 23 38 a4 ea  	sd	a0, -0x150(s0)
8021014c: 13 05 84 e2  	addi	a0, s0, -0x1d8
80210150: 23 3c a4 ea  	sd	a0, -0x148(s0)
80210154: 03 35 04 eb  	ld	a0, -0x150(s0)
80210158: 83 35 84 eb  	ld	a1, -0x148(s0)
8021015c: 97 70 ff ff  	auipc	ra, 0xffff7
80210160: e7 80 a0 62  	jalr	0x62a(ra) <ekernel+0xffcba786>
80210164: a3 07 a4 ea  	sb	a0, -0x151(s0)
80210168: 03 45 f4 ea  	lbu	a0, -0x151(s0)
8021016c: 05 25        	addiw	a0, a0, 0x1
8021016e: 13 75 f5 0f  	andi	a0, a0, 0xff
80210172: 89 45        	li	a1, 0x2
80210174: 63 66 b5 08  	bltu	a0, a1, 0x80210200 <.Lpcrel_hi10+0x84>
80210178: 09 a0        	j	0x8021017a <.Lpcrel_hi9+0xf6>
8021017a: 41 a8        	j	0x8021020a <.Lpcrel_hi10+0x8e>

000000008021017c <.Lpcrel_hi10>:
;     uint_impl! {
8021017c: 17 35 02 00  	auipc	a0, 0x23
80210180: 13 05 45 11  	addi	a0, a0, 0x114
80210184: 10 61        	ld	a2, 0x0(a0)
80210186: 0c 65        	ld	a1, 0x8(a0)
80210188: 23 3c c4 de  	sd	a2, -0x208(s0)
8021018c: 23 30 b4 e0  	sd	a1, -0x200(s0)
;             None => Err(err),
80210190: 0c 61        	ld	a1, 0x0(a0)
80210192: 08 65        	ld	a0, 0x8(a0)
80210194: 23 34 b4 de  	sd	a1, -0x218(s0)
80210198: 23 38 a4 de  	sd	a0, -0x210(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
8021019c: 83 35 84 de  	ld	a1, -0x218(s0)
802101a0: 03 35 04 df  	ld	a0, -0x210(s0)
802101a4: 23 38 b4 fc  	sd	a1, -0x30(s0)
802101a8: 23 3c a4 fc  	sd	a0, -0x28(s0)
802101ac: 23 3c b4 e8  	sd	a1, -0x168(s0)
802101b0: 23 30 a4 ea  	sd	a0, -0x160(s0)
802101b4: 83 35 84 e9  	ld	a1, -0x168(s0)
802101b8: 03 35 04 ea  	ld	a0, -0x160(s0)
802101bc: 23 3c b4 dc  	sd	a1, -0x228(s0)
802101c0: 23 30 a4 de  	sd	a0, -0x220(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
802101c4: 83 35 84 dd  	ld	a1, -0x228(s0)
802101c8: 03 35 04 de  	ld	a0, -0x220(s0)
802101cc: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
802101d0: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;             Err(e) => Err(From::from(e)),
802101d4: 83 35 84 e0  	ld	a1, -0x1f8(s0)
802101d8: 03 35 04 e1  	ld	a0, -0x1f0(s0)
802101dc: 23 30 b4 fe  	sd	a1, -0x20(s0)
802101e0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
802101e4: 23 30 b4 ec  	sd	a1, -0x140(s0)
802101e8: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
802101ec: 83 35 04 ec  	ld	a1, -0x140(s0)
802101f0: 03 35 84 ec  	ld	a0, -0x138(s0)
802101f4: 23 34 b4 dc  	sd	a1, -0x238(s0)
802101f8: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
802101fc: 55 aa        	j	0x802103b0 <.Lpcrel_hi11+0x84>
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
802101fe: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
80210200: 03 35 84 e2  	ld	a0, -0x1d8(s0)
80210204: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
80210208: 31 a0        	j	0x80210214 <.Lpcrel_hi10+0x98>
;         Ordering::Greater => v1,
8021020a: 03 35 04 e2  	ld	a0, -0x1e0(s0)
8021020e: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
80210212: 09 a0        	j	0x80210214 <.Lpcrel_hi10+0x98>
;         let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
80210214: 03 35 84 e1  	ld	a0, -0x1e8(s0)
80210218: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8021021c: 11 45        	li	a0, 0x4
8021021e: 23 38 a4 ec  	sd	a0, -0x130(s0)
80210222: 13 05 04 ed  	addi	a0, s0, -0x130
;     match compare(&v1, &v2) {
80210226: 23 30 a4 ee  	sd	a0, -0x120(s0)
8021022a: 13 05 84 e3  	addi	a0, s0, -0x1c8
8021022e: 23 34 a4 ee  	sd	a0, -0x118(s0)
80210232: 03 35 04 ee  	ld	a0, -0x120(s0)
80210236: 83 35 84 ee  	ld	a1, -0x118(s0)
8021023a: 97 70 ff ff  	auipc	ra, 0xffff7
8021023e: e7 80 c0 54  	jalr	0x54c(ra) <ekernel+0xffcba786>
80210242: a3 0f a4 ec  	sb	a0, -0x121(s0)
80210246: 03 45 f4 ed  	lbu	a0, -0x121(s0)
8021024a: 05 25        	addiw	a0, a0, 0x1
8021024c: 13 75 f5 0f  	andi	a0, a0, 0xff
80210250: 89 45        	li	a1, 0x2
80210252: 63 64 b5 00  	bltu	a0, a1, 0x8021025a <.Lpcrel_hi10+0xde>
80210256: 09 a0        	j	0x80210258 <.Lpcrel_hi10+0xdc>
80210258: 31 a0        	j	0x80210264 <.Lpcrel_hi10+0xe8>
;         Ordering::Less | Ordering::Equal => v2,
8021025a: 03 35 84 e3  	ld	a0, -0x1c8(s0)
8021025e: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
80210262: 31 a0        	j	0x8021026e <.Lpcrel_hi10+0xf2>
;         Ordering::Greater => v1,
80210264: 03 35 04 ed  	ld	a0, -0x130(s0)
80210268: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
8021026c: 09 a0        	j	0x8021026e <.Lpcrel_hi10+0xf2>
;         let new_layout = Layout::array::<T>(cap);
8021026e: 03 36 04 e3  	ld	a2, -0x1d0(s0)
80210272: 23 34 c4 f6  	sd	a2, -0x98(s0)
80210276: a1 45        	li	a1, 0x8
;     intrinsics::min_align_of::<T>()
80210278: 23 38 b4 f6  	sd	a1, -0x90(s0)
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
8021027c: 2e 85        	mv	a0, a1
8021027e: 97 40 00 00  	auipc	ra, 0x4
80210282: e7 80 60 a2  	jalr	-0x5da(ra) <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E>
80210286: 2a 86        	mv	a2, a0
80210288: 23 3c c4 d2  	sd	a2, -0x2c8(s0)
8021028c: 2e 85        	mv	a0, a1
8021028e: 83 35 84 d6  	ld	a1, -0x298(s0)
80210292: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
80210296: 23 3c c4 f6  	sd	a2, -0x88(s0)
8021029a: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021029e: 13 05 04 e7  	addi	a0, s0, -0x190
802102a2: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
802102a6: 97 f0 ff ff  	auipc	ra, 0xfffff
802102aa: e7 80 a0 2c  	jalr	0x2ca(ra) <ekernel+0xffcc2570>
802102ae: 03 35 84 d6  	ld	a0, -0x298(s0)
802102b2: 83 35 84 d3  	ld	a1, -0x2c8(s0)
802102b6: 03 36 04 d4  	ld	a2, -0x2c0(s0)
802102ba: 83 36 84 d4  	ld	a3, -0x2b8(s0)
802102be: 13 07 05 01  	addi	a4, a0, 0x10
802102c2: 13 05 84 e5  	addi	a0, s0, -0x1a8
802102c6: 97 90 01 00  	auipc	ra, 0x19
802102ca: e7 80 80 0b  	jalr	0xb8(ra) <_ZN5alloc7raw_vec11finish_grow17hbea6f7417b6e6d1fE>
;         match self {
802102ce: 03 35 84 e5  	ld	a0, -0x1a8(s0)
802102d2: 25 e9        	bnez	a0, 0x80210342 <.Lpcrel_hi11+0x16>
802102d4: 09 a0        	j	0x802102d6 <.Lpcrel_hi10+0x15a>
802102d6: 83 35 84 d6  	ld	a1, -0x298(s0)
;             Ok(v) => ControlFlow::Continue(v),
802102da: 03 36 04 e6  	ld	a2, -0x1a0(s0)
802102de: 03 35 84 e6  	ld	a0, -0x198(s0)
802102e2: 23 34 c4 f8  	sd	a2, -0x78(s0)
802102e6: 23 38 a4 f8  	sd	a0, -0x70(s0)
802102ea: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
802102ee: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
802102f2: 01 45        	li	a0, 0x0
802102f4: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
802102f8: 03 36 84 e4  	ld	a2, -0x1b8(s0)
802102fc: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80210300: 23 3c c4 f8  	sd	a2, -0x68(s0)
80210304: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { self.set_ptr_and_cap(ptr, cap) };
80210308: 03 35 04 e3  	ld	a0, -0x1d0(s0)
8021030c: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80210310: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
80210314: 03 36 84 f0  	ld	a2, -0xf8(s0)
80210318: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
8021031c: 03 36 04 f0  	ld	a2, -0x100(s0)
80210320: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
80210322: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80210326: 03 35 04 f1  	ld	a0, -0xf0(s0)
8021032a: 88 e1        	sd	a0, 0x0(a1)

000000008021032c <.Lpcrel_hi11>:
;         Ok(())
8021032c: 17 35 02 00  	auipc	a0, 0x23
80210330: 13 05 45 f4  	addi	a0, a0, -0xbc
80210334: 0c 61        	ld	a1, 0x0(a0)
80210336: 08 65        	ld	a0, 0x8(a0)
80210338: 23 34 b4 dc  	sd	a1, -0x238(s0)
8021033c: 23 38 a4 dc  	sd	a0, -0x230(s0)
;     }
80210340: a9 a8        	j	0x8021039a <.Lpcrel_hi11+0x6e>
;             Err(e) => ControlFlow::Break(Err(e)),
80210342: 83 35 04 e6  	ld	a1, -0x1a0(s0)
80210346: 03 35 84 e6  	ld	a0, -0x198(s0)
8021034a: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021034e: 23 3c a4 fa  	sd	a0, -0x48(s0)
80210352: 23 38 b4 ee  	sd	a1, -0x110(s0)
80210356: 23 3c a4 ee  	sd	a0, -0x108(s0)
8021035a: 83 35 04 ef  	ld	a1, -0x110(s0)
8021035e: 03 35 84 ef  	ld	a0, -0x108(s0)
80210362: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
80210366: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8021036a: 05 45        	li	a0, 0x1
8021036c: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80210370: 83 35 84 e4  	ld	a1, -0x1b8(s0)
80210374: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80210378: 23 34 b4 e8  	sd	a1, -0x178(s0)
8021037c: 23 38 a4 e8  	sd	a0, -0x170(s0)
;             Err(e) => Err(From::from(e)),
80210380: 83 35 84 e8  	ld	a1, -0x178(s0)
80210384: 03 35 04 e9  	ld	a0, -0x170(s0)
80210388: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021038c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80210390: 23 34 b4 dc  	sd	a1, -0x238(s0)
80210394: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
80210398: 21 a8        	j	0x802103b0 <.Lpcrel_hi11+0x84>
;     }
8021039a: 03 35 84 dc  	ld	a0, -0x238(s0)
8021039e: 83 35 04 dd  	ld	a1, -0x230(s0)
802103a2: 83 30 81 2c  	ld	ra, 0x2c8(sp)
802103a6: 03 34 01 2c  	ld	s0, 0x2c0(sp)
802103aa: 13 01 01 2d  	addi	sp, sp, 0x2d0
802103ae: 82 80        	ret
; #![no_std]
802103b0: ed b7        	j	0x8021039a <.Lpcrel_hi11+0x6e>

00000000802103b2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h68878b470df98a2cE>:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
802103b2: 13 01 01 d3  	addi	sp, sp, -0x2d0
802103b6: 23 34 11 2c  	sd	ra, 0x2c8(sp)
802103ba: 23 30 81 2c  	sd	s0, 0x2c0(sp)
802103be: 80 0d        	addi	s0, sp, 0x2d0
802103c0: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
802103c4: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
802103c8: 23 34 a4 d6  	sd	a0, -0x298(s0)

00000000802103cc <.Lpcrel_hi12>:
802103cc: 97 36 02 00  	auipc	a3, 0x23
802103d0: 93 86 46 ec  	addi	a3, a3, -0x13c
802103d4: 9c 62        	ld	a5, 0x0(a3)
802103d6: 98 66        	ld	a4, 0x8(a3)
;     fn into(self) -> U {
802103d8: 23 38 f4 d6  	sd	a5, -0x290(s0)
802103dc: 23 3c e4 d6  	sd	a4, -0x288(s0)
802103e0: 9c 62        	ld	a5, 0x0(a3)
802103e2: 98 66        	ld	a4, 0x8(a3)
;     fn from(kind: TryReserveErrorKind) -> Self {
802103e4: 23 30 f4 d8  	sd	a5, -0x280(s0)
802103e8: 23 34 e4 d8  	sd	a4, -0x278(s0)
802103ec: 98 62        	ld	a4, 0x0(a3)
802103ee: 94 66        	ld	a3, 0x8(a3)
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
802103f0: 23 38 e4 d8  	sd	a4, -0x270(s0)
802103f4: 23 3c d4 d8  	sd	a3, -0x268(s0)
802103f8: 91 46        	li	a3, 0x4
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
802103fa: 23 34 d4 da  	sd	a3, -0x258(s0)
;     fn max(self, other: Self) -> Self
802103fe: 23 38 d4 da  	sd	a3, -0x250(s0)
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
80210402: 23 3c d4 da  	sd	a3, -0x248(s0)
80210406: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8021040a: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8021040e: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;         if T::IS_ZST {
80210412: 09 a0        	j	0x80210414 <.Lpcrel_hi12+0x48>
80210414: 03 35 04 d6  	ld	a0, -0x2a0(s0)
80210418: 83 35 84 d5  	ld	a1, -0x2a8(s0)
;     uint_impl! {
8021041c: aa 95        	add	a1, a1, a0
8021041e: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
80210422: 33 b5 a5 00  	sltu	a0, a1, a0
80210426: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8021042a: a3 0f a4 f2  	sb	a0, -0xc1(s0)
8021042e: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80210432: a3 07 a4 f4  	sb	a0, -0xb1(s0)
80210436: 03 45 f4 f4  	lbu	a0, -0xb1(s0)
8021043a: 05 89        	andi	a0, a0, 0x1
8021043c: 41 e5        	bnez	a0, 0x802104c4 <.Lpcrel_hi13>
8021043e: 09 a0        	j	0x80210440 <.Lpcrel_hi12+0x74>
80210440: 83 35 84 d6  	ld	a1, -0x298(s0)
80210444: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;     uint_impl! {
80210448: 23 30 a4 e0  	sd	a0, -0x200(s0)
8021044c: 05 45        	li	a0, 0x1
8021044e: 23 3c a4 de  	sd	a0, -0x208(s0)
;             Some(v) => Ok(v),
80210452: 03 35 04 e0  	ld	a0, -0x200(s0)
80210456: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021045a: 23 38 a4 de  	sd	a0, -0x210(s0)
8021045e: 7d 55        	li	a0, -0x1
80210460: 7e 15        	slli	a0, a0, 0x3f
80210462: 05 05        	addi	a0, a0, 0x1
80210464: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Ok(v) => ControlFlow::Continue(v),
80210468: 03 36 04 df  	ld	a2, -0x210(s0)
8021046c: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80210470: 23 30 c4 de  	sd	a2, -0x220(s0)
80210474: 23 3c a4 dc  	sd	a0, -0x228(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80210478: 03 35 04 de  	ld	a0, -0x220(s0)
8021047c: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         let cap = cmp::max(self.cap.0 * 2, required_cap);
80210480: 8c 61        	ld	a1, 0x0(a1)
80210482: 86 05        	slli	a1, a1, 0x1
80210484: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
80210488: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
8021048c: 13 05 04 e2  	addi	a0, s0, -0x1e0
;     match compare(&v1, &v2) {
80210490: 23 38 a4 ea  	sd	a0, -0x150(s0)
80210494: 13 05 84 e2  	addi	a0, s0, -0x1d8
80210498: 23 3c a4 ea  	sd	a0, -0x148(s0)
8021049c: 03 35 04 eb  	ld	a0, -0x150(s0)
802104a0: 83 35 84 eb  	ld	a1, -0x148(s0)
802104a4: 97 70 ff ff  	auipc	ra, 0xffff7
802104a8: e7 80 20 2e  	jalr	0x2e2(ra) <ekernel+0xffcba786>
802104ac: a3 07 a4 ea  	sb	a0, -0x151(s0)
802104b0: 03 45 f4 ea  	lbu	a0, -0x151(s0)
802104b4: 05 25        	addiw	a0, a0, 0x1
802104b6: 13 75 f5 0f  	andi	a0, a0, 0xff
802104ba: 89 45        	li	a1, 0x2
802104bc: 63 66 b5 08  	bltu	a0, a1, 0x80210548 <.Lpcrel_hi13+0x84>
802104c0: 09 a0        	j	0x802104c2 <.Lpcrel_hi12+0xf6>
802104c2: 41 a8        	j	0x80210552 <.Lpcrel_hi13+0x8e>

00000000802104c4 <.Lpcrel_hi13>:
;     uint_impl! {
802104c4: 17 35 02 00  	auipc	a0, 0x23
802104c8: 13 05 c5 dc  	addi	a0, a0, -0x234
802104cc: 10 61        	ld	a2, 0x0(a0)
802104ce: 0c 65        	ld	a1, 0x8(a0)
802104d0: 23 3c c4 de  	sd	a2, -0x208(s0)
802104d4: 23 30 b4 e0  	sd	a1, -0x200(s0)
;             None => Err(err),
802104d8: 0c 61        	ld	a1, 0x0(a0)
802104da: 08 65        	ld	a0, 0x8(a0)
802104dc: 23 34 b4 de  	sd	a1, -0x218(s0)
802104e0: 23 38 a4 de  	sd	a0, -0x210(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
802104e4: 83 35 84 de  	ld	a1, -0x218(s0)
802104e8: 03 35 04 df  	ld	a0, -0x210(s0)
802104ec: 23 38 b4 fc  	sd	a1, -0x30(s0)
802104f0: 23 3c a4 fc  	sd	a0, -0x28(s0)
802104f4: 23 3c b4 e8  	sd	a1, -0x168(s0)
802104f8: 23 30 a4 ea  	sd	a0, -0x160(s0)
802104fc: 83 35 84 e9  	ld	a1, -0x168(s0)
80210500: 03 35 04 ea  	ld	a0, -0x160(s0)
80210504: 23 3c b4 dc  	sd	a1, -0x228(s0)
80210508: 23 30 a4 de  	sd	a0, -0x220(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8021050c: 83 35 84 dd  	ld	a1, -0x228(s0)
80210510: 03 35 04 de  	ld	a0, -0x220(s0)
80210514: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
80210518: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;             Err(e) => Err(From::from(e)),
8021051c: 83 35 84 e0  	ld	a1, -0x1f8(s0)
80210520: 03 35 04 e1  	ld	a0, -0x1f0(s0)
80210524: 23 30 b4 fe  	sd	a1, -0x20(s0)
80210528: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
8021052c: 23 30 b4 ec  	sd	a1, -0x140(s0)
80210530: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
80210534: 83 35 04 ec  	ld	a1, -0x140(s0)
80210538: 03 35 84 ec  	ld	a0, -0x138(s0)
8021053c: 23 34 b4 dc  	sd	a1, -0x238(s0)
80210540: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
80210544: 55 aa        	j	0x802106f8 <.Lpcrel_hi14+0x84>
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80210546: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
80210548: 03 35 84 e2  	ld	a0, -0x1d8(s0)
8021054c: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
80210550: 31 a0        	j	0x8021055c <.Lpcrel_hi13+0x98>
;         Ordering::Greater => v1,
80210552: 03 35 04 e2  	ld	a0, -0x1e0(s0)
80210556: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
8021055a: 09 a0        	j	0x8021055c <.Lpcrel_hi13+0x98>
;         let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
8021055c: 03 35 84 e1  	ld	a0, -0x1e8(s0)
80210560: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
80210564: 11 45        	li	a0, 0x4
80210566: 23 38 a4 ec  	sd	a0, -0x130(s0)
8021056a: 13 05 04 ed  	addi	a0, s0, -0x130
;     match compare(&v1, &v2) {
8021056e: 23 30 a4 ee  	sd	a0, -0x120(s0)
80210572: 13 05 84 e3  	addi	a0, s0, -0x1c8
80210576: 23 34 a4 ee  	sd	a0, -0x118(s0)
8021057a: 03 35 04 ee  	ld	a0, -0x120(s0)
8021057e: 83 35 84 ee  	ld	a1, -0x118(s0)
80210582: 97 70 ff ff  	auipc	ra, 0xffff7
80210586: e7 80 40 20  	jalr	0x204(ra) <ekernel+0xffcba786>
8021058a: a3 0f a4 ec  	sb	a0, -0x121(s0)
8021058e: 03 45 f4 ed  	lbu	a0, -0x121(s0)
80210592: 05 25        	addiw	a0, a0, 0x1
80210594: 13 75 f5 0f  	andi	a0, a0, 0xff
80210598: 89 45        	li	a1, 0x2
8021059a: 63 64 b5 00  	bltu	a0, a1, 0x802105a2 <.Lpcrel_hi13+0xde>
8021059e: 09 a0        	j	0x802105a0 <.Lpcrel_hi13+0xdc>
802105a0: 31 a0        	j	0x802105ac <.Lpcrel_hi13+0xe8>
;         Ordering::Less | Ordering::Equal => v2,
802105a2: 03 35 84 e3  	ld	a0, -0x1c8(s0)
802105a6: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
802105aa: 31 a0        	j	0x802105b6 <.Lpcrel_hi13+0xf2>
;         Ordering::Greater => v1,
802105ac: 03 35 04 ed  	ld	a0, -0x130(s0)
802105b0: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
802105b4: 09 a0        	j	0x802105b6 <.Lpcrel_hi13+0xf2>
;         let new_layout = Layout::array::<T>(cap);
802105b6: 03 36 04 e3  	ld	a2, -0x1d0(s0)
802105ba: 23 34 c4 f6  	sd	a2, -0x98(s0)
802105be: a1 45        	li	a1, 0x8
;     intrinsics::min_align_of::<T>()
802105c0: 23 38 b4 f6  	sd	a1, -0x90(s0)
802105c4: 41 45        	li	a0, 0x10
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
802105c6: 97 30 00 00  	auipc	ra, 0x3
802105ca: e7 80 e0 6d  	jalr	0x6de(ra) <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E>
802105ce: 2a 86        	mv	a2, a0
802105d0: 23 3c c4 d2  	sd	a2, -0x2c8(s0)
802105d4: 2e 85        	mv	a0, a1
802105d6: 83 35 84 d6  	ld	a1, -0x298(s0)
802105da: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
802105de: 23 3c c4 f6  	sd	a2, -0x88(s0)
802105e2: 23 30 a4 f8  	sd	a0, -0x80(s0)
802105e6: 13 05 04 e7  	addi	a0, s0, -0x190
802105ea: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
802105ee: 97 f0 ff ff  	auipc	ra, 0xfffff
802105f2: e7 80 20 d4  	jalr	-0x2be(ra) <ekernel+0xffcc2330>
802105f6: 03 35 84 d6  	ld	a0, -0x298(s0)
802105fa: 83 35 84 d3  	ld	a1, -0x2c8(s0)
802105fe: 03 36 04 d4  	ld	a2, -0x2c0(s0)
80210602: 83 36 84 d4  	ld	a3, -0x2b8(s0)
80210606: 13 07 05 01  	addi	a4, a0, 0x10
8021060a: 13 05 84 e5  	addi	a0, s0, -0x1a8
8021060e: 97 90 01 00  	auipc	ra, 0x19
80210612: e7 80 00 d7  	jalr	-0x290(ra) <_ZN5alloc7raw_vec11finish_grow17hbea6f7417b6e6d1fE>
;         match self {
80210616: 03 35 84 e5  	ld	a0, -0x1a8(s0)
8021061a: 25 e9        	bnez	a0, 0x8021068a <.Lpcrel_hi14+0x16>
8021061c: 09 a0        	j	0x8021061e <.Lpcrel_hi13+0x15a>
8021061e: 83 35 84 d6  	ld	a1, -0x298(s0)
;             Ok(v) => ControlFlow::Continue(v),
80210622: 03 36 04 e6  	ld	a2, -0x1a0(s0)
80210626: 03 35 84 e6  	ld	a0, -0x198(s0)
8021062a: 23 34 c4 f8  	sd	a2, -0x78(s0)
8021062e: 23 38 a4 f8  	sd	a0, -0x70(s0)
80210632: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
80210636: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8021063a: 01 45        	li	a0, 0x0
8021063c: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80210640: 03 36 84 e4  	ld	a2, -0x1b8(s0)
80210644: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80210648: 23 3c c4 f8  	sd	a2, -0x68(s0)
8021064c: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { self.set_ptr_and_cap(ptr, cap) };
80210650: 03 35 04 e3  	ld	a0, -0x1d0(s0)
80210654: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80210658: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
8021065c: 03 36 84 f0  	ld	a2, -0xf8(s0)
80210660: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
80210664: 03 36 04 f0  	ld	a2, -0x100(s0)
80210668: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
8021066a: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8021066e: 03 35 04 f1  	ld	a0, -0xf0(s0)
80210672: 88 e1        	sd	a0, 0x0(a1)

0000000080210674 <.Lpcrel_hi14>:
;         Ok(())
80210674: 17 35 02 00  	auipc	a0, 0x23
80210678: 13 05 c5 bf  	addi	a0, a0, -0x404
8021067c: 0c 61        	ld	a1, 0x0(a0)
8021067e: 08 65        	ld	a0, 0x8(a0)
80210680: 23 34 b4 dc  	sd	a1, -0x238(s0)
80210684: 23 38 a4 dc  	sd	a0, -0x230(s0)
;     }
80210688: a9 a8        	j	0x802106e2 <.Lpcrel_hi14+0x6e>
;             Err(e) => ControlFlow::Break(Err(e)),
8021068a: 83 35 04 e6  	ld	a1, -0x1a0(s0)
8021068e: 03 35 84 e6  	ld	a0, -0x198(s0)
80210692: 23 38 b4 fa  	sd	a1, -0x50(s0)
80210696: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021069a: 23 38 b4 ee  	sd	a1, -0x110(s0)
8021069e: 23 3c a4 ee  	sd	a0, -0x108(s0)
802106a2: 83 35 04 ef  	ld	a1, -0x110(s0)
802106a6: 03 35 84 ef  	ld	a0, -0x108(s0)
802106aa: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
802106ae: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
802106b2: 05 45        	li	a0, 0x1
802106b4: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
802106b8: 83 35 84 e4  	ld	a1, -0x1b8(s0)
802106bc: 03 35 04 e5  	ld	a0, -0x1b0(s0)
802106c0: 23 34 b4 e8  	sd	a1, -0x178(s0)
802106c4: 23 38 a4 e8  	sd	a0, -0x170(s0)
;             Err(e) => Err(From::from(e)),
802106c8: 83 35 84 e8  	ld	a1, -0x178(s0)
802106cc: 03 35 04 e9  	ld	a0, -0x170(s0)
802106d0: 23 30 b4 fc  	sd	a1, -0x40(s0)
802106d4: 23 34 a4 fc  	sd	a0, -0x38(s0)
802106d8: 23 34 b4 dc  	sd	a1, -0x238(s0)
802106dc: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
802106e0: 21 a8        	j	0x802106f8 <.Lpcrel_hi14+0x84>
;     }
802106e2: 03 35 84 dc  	ld	a0, -0x238(s0)
802106e6: 83 35 04 dd  	ld	a1, -0x230(s0)
802106ea: 83 30 81 2c  	ld	ra, 0x2c8(sp)
802106ee: 03 34 01 2c  	ld	s0, 0x2c0(sp)
802106f2: 13 01 01 2d  	addi	sp, sp, 0x2d0
802106f6: 82 80        	ret
; #![no_std]
802106f8: ed b7        	j	0x802106e2 <.Lpcrel_hi14+0x6e>

00000000802106fa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17heb755c92f29a425aE>:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
802106fa: 13 01 01 d3  	addi	sp, sp, -0x2d0
802106fe: 23 34 11 2c  	sd	ra, 0x2c8(sp)
80210702: 23 30 81 2c  	sd	s0, 0x2c0(sp)
80210706: 80 0d        	addi	s0, sp, 0x2d0
80210708: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
8021070c: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
80210710: 23 34 a4 d6  	sd	a0, -0x298(s0)

0000000080210714 <.Lpcrel_hi15>:
80210714: 97 36 02 00  	auipc	a3, 0x23
80210718: 93 86 c6 b7  	addi	a3, a3, -0x484
8021071c: 9c 62        	ld	a5, 0x0(a3)
8021071e: 98 66        	ld	a4, 0x8(a3)
;     fn into(self) -> U {
80210720: 23 38 f4 d6  	sd	a5, -0x290(s0)
80210724: 23 3c e4 d6  	sd	a4, -0x288(s0)
80210728: 9c 62        	ld	a5, 0x0(a3)
8021072a: 98 66        	ld	a4, 0x8(a3)
;     fn from(kind: TryReserveErrorKind) -> Self {
8021072c: 23 30 f4 d8  	sd	a5, -0x280(s0)
80210730: 23 34 e4 d8  	sd	a4, -0x278(s0)
80210734: 98 62        	ld	a4, 0x0(a3)
80210736: 94 66        	ld	a3, 0x8(a3)
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
80210738: 23 38 e4 d8  	sd	a4, -0x270(s0)
8021073c: 23 3c d4 d8  	sd	a3, -0x268(s0)
80210740: 91 46        	li	a3, 0x4
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
80210742: 23 34 d4 da  	sd	a3, -0x258(s0)
;     fn max(self, other: Self) -> Self
80210746: 23 38 d4 da  	sd	a3, -0x250(s0)
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8021074a: 23 3c d4 da  	sd	a3, -0x248(s0)
8021074e: 23 3c a4 f0  	sd	a0, -0xe8(s0)
80210752: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80210756: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;         if T::IS_ZST {
8021075a: 09 a0        	j	0x8021075c <.Lpcrel_hi15+0x48>
8021075c: 03 35 04 d6  	ld	a0, -0x2a0(s0)
80210760: 83 35 84 d5  	ld	a1, -0x2a8(s0)
;     uint_impl! {
80210764: aa 95        	add	a1, a1, a0
80210766: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
8021076a: 33 b5 a5 00  	sltu	a0, a1, a0
8021076e: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80210772: a3 0f a4 f2  	sb	a0, -0xc1(s0)
80210776: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8021077a: a3 07 a4 f4  	sb	a0, -0xb1(s0)
8021077e: 03 45 f4 f4  	lbu	a0, -0xb1(s0)
80210782: 05 89        	andi	a0, a0, 0x1
80210784: 41 e5        	bnez	a0, 0x8021080c <.Lpcrel_hi16>
80210786: 09 a0        	j	0x80210788 <.Lpcrel_hi15+0x74>
80210788: 83 35 84 d6  	ld	a1, -0x298(s0)
8021078c: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;     uint_impl! {
80210790: 23 30 a4 e0  	sd	a0, -0x200(s0)
80210794: 05 45        	li	a0, 0x1
80210796: 23 3c a4 de  	sd	a0, -0x208(s0)
;             Some(v) => Ok(v),
8021079a: 03 35 04 e0  	ld	a0, -0x200(s0)
8021079e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802107a2: 23 38 a4 de  	sd	a0, -0x210(s0)
802107a6: 7d 55        	li	a0, -0x1
802107a8: 7e 15        	slli	a0, a0, 0x3f
802107aa: 05 05        	addi	a0, a0, 0x1
802107ac: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Ok(v) => ControlFlow::Continue(v),
802107b0: 03 36 04 df  	ld	a2, -0x210(s0)
802107b4: 23 3c c4 f4  	sd	a2, -0xa8(s0)
802107b8: 23 30 c4 de  	sd	a2, -0x220(s0)
802107bc: 23 3c a4 dc  	sd	a0, -0x228(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
802107c0: 03 35 04 de  	ld	a0, -0x220(s0)
802107c4: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         let cap = cmp::max(self.cap.0 * 2, required_cap);
802107c8: 8c 61        	ld	a1, 0x0(a1)
802107ca: 86 05        	slli	a1, a1, 0x1
802107cc: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
802107d0: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
802107d4: 13 05 04 e2  	addi	a0, s0, -0x1e0
;     match compare(&v1, &v2) {
802107d8: 23 38 a4 ea  	sd	a0, -0x150(s0)
802107dc: 13 05 84 e2  	addi	a0, s0, -0x1d8
802107e0: 23 3c a4 ea  	sd	a0, -0x148(s0)
802107e4: 03 35 04 eb  	ld	a0, -0x150(s0)
802107e8: 83 35 84 eb  	ld	a1, -0x148(s0)
802107ec: 97 70 ff ff  	auipc	ra, 0xffff7
802107f0: e7 80 a0 f9  	jalr	-0x66(ra) <ekernel+0xffcba786>
802107f4: a3 07 a4 ea  	sb	a0, -0x151(s0)
802107f8: 03 45 f4 ea  	lbu	a0, -0x151(s0)
802107fc: 05 25        	addiw	a0, a0, 0x1
802107fe: 13 75 f5 0f  	andi	a0, a0, 0xff
80210802: 89 45        	li	a1, 0x2
80210804: 63 66 b5 08  	bltu	a0, a1, 0x80210890 <.Lpcrel_hi16+0x84>
80210808: 09 a0        	j	0x8021080a <.Lpcrel_hi15+0xf6>
8021080a: 41 a8        	j	0x8021089a <.Lpcrel_hi16+0x8e>

000000008021080c <.Lpcrel_hi16>:
;     uint_impl! {
8021080c: 17 35 02 00  	auipc	a0, 0x23
80210810: 13 05 45 a8  	addi	a0, a0, -0x57c
80210814: 10 61        	ld	a2, 0x0(a0)
80210816: 0c 65        	ld	a1, 0x8(a0)
80210818: 23 3c c4 de  	sd	a2, -0x208(s0)
8021081c: 23 30 b4 e0  	sd	a1, -0x200(s0)
;             None => Err(err),
80210820: 0c 61        	ld	a1, 0x0(a0)
80210822: 08 65        	ld	a0, 0x8(a0)
80210824: 23 34 b4 de  	sd	a1, -0x218(s0)
80210828: 23 38 a4 de  	sd	a0, -0x210(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
8021082c: 83 35 84 de  	ld	a1, -0x218(s0)
80210830: 03 35 04 df  	ld	a0, -0x210(s0)
80210834: 23 38 b4 fc  	sd	a1, -0x30(s0)
80210838: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021083c: 23 3c b4 e8  	sd	a1, -0x168(s0)
80210840: 23 30 a4 ea  	sd	a0, -0x160(s0)
80210844: 83 35 84 e9  	ld	a1, -0x168(s0)
80210848: 03 35 04 ea  	ld	a0, -0x160(s0)
8021084c: 23 3c b4 dc  	sd	a1, -0x228(s0)
80210850: 23 30 a4 de  	sd	a0, -0x220(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80210854: 83 35 84 dd  	ld	a1, -0x228(s0)
80210858: 03 35 04 de  	ld	a0, -0x220(s0)
8021085c: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
80210860: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;             Err(e) => Err(From::from(e)),
80210864: 83 35 84 e0  	ld	a1, -0x1f8(s0)
80210868: 03 35 04 e1  	ld	a0, -0x1f0(s0)
8021086c: 23 30 b4 fe  	sd	a1, -0x20(s0)
80210870: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
80210874: 23 30 b4 ec  	sd	a1, -0x140(s0)
80210878: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
8021087c: 83 35 04 ec  	ld	a1, -0x140(s0)
80210880: 03 35 84 ec  	ld	a0, -0x138(s0)
80210884: 23 34 b4 dc  	sd	a1, -0x238(s0)
80210888: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
8021088c: 55 aa        	j	0x80210a40 <.Lpcrel_hi17+0x84>
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8021088e: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
80210890: 03 35 84 e2  	ld	a0, -0x1d8(s0)
80210894: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
80210898: 31 a0        	j	0x802108a4 <.Lpcrel_hi16+0x98>
;         Ordering::Greater => v1,
8021089a: 03 35 04 e2  	ld	a0, -0x1e0(s0)
8021089e: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
802108a2: 09 a0        	j	0x802108a4 <.Lpcrel_hi16+0x98>
;         let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
802108a4: 03 35 84 e1  	ld	a0, -0x1e8(s0)
802108a8: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
802108ac: 11 45        	li	a0, 0x4
802108ae: 23 38 a4 ec  	sd	a0, -0x130(s0)
802108b2: 13 05 04 ed  	addi	a0, s0, -0x130
;     match compare(&v1, &v2) {
802108b6: 23 30 a4 ee  	sd	a0, -0x120(s0)
802108ba: 13 05 84 e3  	addi	a0, s0, -0x1c8
802108be: 23 34 a4 ee  	sd	a0, -0x118(s0)
802108c2: 03 35 04 ee  	ld	a0, -0x120(s0)
802108c6: 83 35 84 ee  	ld	a1, -0x118(s0)
802108ca: 97 70 ff ff  	auipc	ra, 0xffff7
802108ce: e7 80 c0 eb  	jalr	-0x144(ra) <ekernel+0xffcba786>
802108d2: a3 0f a4 ec  	sb	a0, -0x121(s0)
802108d6: 03 45 f4 ed  	lbu	a0, -0x121(s0)
802108da: 05 25        	addiw	a0, a0, 0x1
802108dc: 13 75 f5 0f  	andi	a0, a0, 0xff
802108e0: 89 45        	li	a1, 0x2
802108e2: 63 64 b5 00  	bltu	a0, a1, 0x802108ea <.Lpcrel_hi16+0xde>
802108e6: 09 a0        	j	0x802108e8 <.Lpcrel_hi16+0xdc>
802108e8: 31 a0        	j	0x802108f4 <.Lpcrel_hi16+0xe8>
;         Ordering::Less | Ordering::Equal => v2,
802108ea: 03 35 84 e3  	ld	a0, -0x1c8(s0)
802108ee: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
802108f2: 31 a0        	j	0x802108fe <.Lpcrel_hi16+0xf2>
;         Ordering::Greater => v1,
802108f4: 03 35 04 ed  	ld	a0, -0x130(s0)
802108f8: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
802108fc: 09 a0        	j	0x802108fe <.Lpcrel_hi16+0xf2>
;         let new_layout = Layout::array::<T>(cap);
802108fe: 03 36 04 e3  	ld	a2, -0x1d0(s0)
80210902: 23 34 c4 f6  	sd	a2, -0x98(s0)
80210906: a1 45        	li	a1, 0x8
;     intrinsics::min_align_of::<T>()
80210908: 23 38 b4 f6  	sd	a1, -0x90(s0)
8021090c: 41 45        	li	a0, 0x10
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
8021090e: 97 30 00 00  	auipc	ra, 0x3
80210912: e7 80 60 39  	jalr	0x396(ra) <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E>
80210916: 2a 86        	mv	a2, a0
80210918: 23 3c c4 d2  	sd	a2, -0x2c8(s0)
8021091c: 2e 85        	mv	a0, a1
8021091e: 83 35 84 d6  	ld	a1, -0x298(s0)
80210922: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
80210926: 23 3c c4 f6  	sd	a2, -0x88(s0)
8021092a: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021092e: 13 05 04 e7  	addi	a0, s0, -0x190
80210932: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80210936: 97 f0 ff ff  	auipc	ra, 0xfffff
8021093a: e7 80 a0 cc  	jalr	-0x336(ra) <ekernel+0xffcc2600>
8021093e: 03 35 84 d6  	ld	a0, -0x298(s0)
80210942: 83 35 84 d3  	ld	a1, -0x2c8(s0)
80210946: 03 36 04 d4  	ld	a2, -0x2c0(s0)
8021094a: 83 36 84 d4  	ld	a3, -0x2b8(s0)
8021094e: 13 07 05 01  	addi	a4, a0, 0x10
80210952: 13 05 84 e5  	addi	a0, s0, -0x1a8
80210956: 97 90 01 00  	auipc	ra, 0x19
8021095a: e7 80 80 a2  	jalr	-0x5d8(ra) <_ZN5alloc7raw_vec11finish_grow17hbea6f7417b6e6d1fE>
;         match self {
8021095e: 03 35 84 e5  	ld	a0, -0x1a8(s0)
80210962: 25 e9        	bnez	a0, 0x802109d2 <.Lpcrel_hi17+0x16>
80210964: 09 a0        	j	0x80210966 <.Lpcrel_hi16+0x15a>
80210966: 83 35 84 d6  	ld	a1, -0x298(s0)
;             Ok(v) => ControlFlow::Continue(v),
8021096a: 03 36 04 e6  	ld	a2, -0x1a0(s0)
8021096e: 03 35 84 e6  	ld	a0, -0x198(s0)
80210972: 23 34 c4 f8  	sd	a2, -0x78(s0)
80210976: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021097a: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
8021097e: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80210982: 01 45        	li	a0, 0x0
80210984: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80210988: 03 36 84 e4  	ld	a2, -0x1b8(s0)
8021098c: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80210990: 23 3c c4 f8  	sd	a2, -0x68(s0)
80210994: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { self.set_ptr_and_cap(ptr, cap) };
80210998: 03 35 04 e3  	ld	a0, -0x1d0(s0)
8021099c: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
802109a0: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
802109a4: 03 36 84 f0  	ld	a2, -0xf8(s0)
802109a8: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
802109ac: 03 36 04 f0  	ld	a2, -0x100(s0)
802109b0: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
802109b2: 23 38 a4 f0  	sd	a0, -0xf0(s0)
802109b6: 03 35 04 f1  	ld	a0, -0xf0(s0)
802109ba: 88 e1        	sd	a0, 0x0(a1)

00000000802109bc <.Lpcrel_hi17>:
;         Ok(())
802109bc: 17 35 02 00  	auipc	a0, 0x23
802109c0: 13 05 45 8b  	addi	a0, a0, -0x74c
802109c4: 0c 61        	ld	a1, 0x0(a0)
802109c6: 08 65        	ld	a0, 0x8(a0)
802109c8: 23 34 b4 dc  	sd	a1, -0x238(s0)
802109cc: 23 38 a4 dc  	sd	a0, -0x230(s0)
;     }
802109d0: a9 a8        	j	0x80210a2a <.Lpcrel_hi17+0x6e>
;             Err(e) => ControlFlow::Break(Err(e)),
802109d2: 83 35 04 e6  	ld	a1, -0x1a0(s0)
802109d6: 03 35 84 e6  	ld	a0, -0x198(s0)
802109da: 23 38 b4 fa  	sd	a1, -0x50(s0)
802109de: 23 3c a4 fa  	sd	a0, -0x48(s0)
802109e2: 23 38 b4 ee  	sd	a1, -0x110(s0)
802109e6: 23 3c a4 ee  	sd	a0, -0x108(s0)
802109ea: 83 35 04 ef  	ld	a1, -0x110(s0)
802109ee: 03 35 84 ef  	ld	a0, -0x108(s0)
802109f2: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
802109f6: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
802109fa: 05 45        	li	a0, 0x1
802109fc: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80210a00: 83 35 84 e4  	ld	a1, -0x1b8(s0)
80210a04: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80210a08: 23 34 b4 e8  	sd	a1, -0x178(s0)
80210a0c: 23 38 a4 e8  	sd	a0, -0x170(s0)
;             Err(e) => Err(From::from(e)),
80210a10: 83 35 84 e8  	ld	a1, -0x178(s0)
80210a14: 03 35 04 e9  	ld	a0, -0x170(s0)
80210a18: 23 30 b4 fc  	sd	a1, -0x40(s0)
80210a1c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80210a20: 23 34 b4 dc  	sd	a1, -0x238(s0)
80210a24: 23 38 a4 dc  	sd	a0, -0x230(s0)
; #![no_std]
80210a28: 21 a8        	j	0x80210a40 <.Lpcrel_hi17+0x84>
;     }
80210a2a: 03 35 84 dc  	ld	a0, -0x238(s0)
80210a2e: 83 35 04 dd  	ld	a1, -0x230(s0)
80210a32: 83 30 81 2c  	ld	ra, 0x2c8(sp)
80210a36: 03 34 01 2c  	ld	s0, 0x2c0(sp)
80210a3a: 13 01 01 2d  	addi	sp, sp, 0x2d0
80210a3e: 82 80        	ret
; #![no_std]
80210a40: ed b7        	j	0x80210a2a <.Lpcrel_hi17+0x6e>

0000000080210a42 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h3bc3850ca17cff96E>:
;     pub fn reserve_for_push(&mut self, len: usize) {
80210a42: 01 11        	addi	sp, sp, -0x20
80210a44: 06 ec        	sd	ra, 0x18(sp)
80210a46: 22 e8        	sd	s0, 0x10(sp)
80210a48: 00 10        	addi	s0, sp, 0x20
80210a4a: 23 30 a4 fe  	sd	a0, -0x20(s0)
80210a4e: 23 34 b4 fe  	sd	a1, -0x18(s0)
80210a52: 05 46        	li	a2, 0x1
;         handle_reserve(self.grow_amortized(len, 1));
80210a54: 97 f0 ff ff  	auipc	ra, 0xfffff
80210a58: e7 80 60 61  	jalr	0x616(ra) <ekernel+0xffcc306a>
80210a5c: 97 90 01 00  	auipc	ra, 0x19
80210a60: e7 80 20 c9  	jalr	-0x36e(ra) <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E>
80210a64: e2 60        	ld	ra, 0x18(sp)
80210a66: 42 64        	ld	s0, 0x10(sp)
;     }
80210a68: 05 61        	addi	sp, sp, 0x20
80210a6a: 82 80        	ret

0000000080210a6c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17hba63f52838f4b1e5E>:
;     pub fn reserve_for_push(&mut self, len: usize) {
80210a6c: 01 11        	addi	sp, sp, -0x20
80210a6e: 06 ec        	sd	ra, 0x18(sp)
80210a70: 22 e8        	sd	s0, 0x10(sp)
80210a72: 00 10        	addi	s0, sp, 0x20
80210a74: 23 30 a4 fe  	sd	a0, -0x20(s0)
80210a78: 23 34 b4 fe  	sd	a1, -0x18(s0)
80210a7c: 05 46        	li	a2, 0x1
;         handle_reserve(self.grow_amortized(len, 1));
80210a7e: 97 f0 ff ff  	auipc	ra, 0xfffff
80210a82: e7 80 c0 f5  	jalr	-0xa4(ra) <ekernel+0xffcc29da>
80210a86: 97 90 01 00  	auipc	ra, 0x19
80210a8a: e7 80 80 c6  	jalr	-0x398(ra) <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E>
80210a8e: e2 60        	ld	ra, 0x18(sp)
80210a90: 42 64        	ld	s0, 0x10(sp)
;     }
80210a92: 05 61        	addi	sp, sp, 0x20
80210a94: 82 80        	ret

0000000080210a96 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17hc9c474dba7866ff7E>:
;     pub fn reserve_for_push(&mut self, len: usize) {
80210a96: 01 11        	addi	sp, sp, -0x20
80210a98: 06 ec        	sd	ra, 0x18(sp)
80210a9a: 22 e8        	sd	s0, 0x10(sp)
80210a9c: 00 10        	addi	s0, sp, 0x20
80210a9e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80210aa2: 23 34 b4 fe  	sd	a1, -0x18(s0)
80210aa6: 05 46        	li	a2, 0x1
;         handle_reserve(self.grow_amortized(len, 1));
80210aa8: 97 00 00 00  	auipc	ra, 0x0
80210aac: e7 80 20 c5  	jalr	-0x3ae(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17heb755c92f29a425aE>
80210ab0: 97 90 01 00  	auipc	ra, 0x19
80210ab4: e7 80 e0 c3  	jalr	-0x3c2(ra) <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E>
80210ab8: e2 60        	ld	ra, 0x18(sp)
80210aba: 42 64        	ld	s0, 0x10(sp)
;     }
80210abc: 05 61        	addi	sp, sp, 0x20
80210abe: 82 80        	ret

0000000080210ac0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17hf3289f0dfa94bb8bE>:
;     pub fn reserve_for_push(&mut self, len: usize) {
80210ac0: 01 11        	addi	sp, sp, -0x20
80210ac2: 06 ec        	sd	ra, 0x18(sp)
80210ac4: 22 e8        	sd	s0, 0x10(sp)
80210ac6: 00 10        	addi	s0, sp, 0x20
80210ac8: 23 30 a4 fe  	sd	a0, -0x20(s0)
80210acc: 23 34 b4 fe  	sd	a1, -0x18(s0)
80210ad0: 05 46        	li	a2, 0x1
;         handle_reserve(self.grow_amortized(len, 1));
80210ad2: 97 f0 ff ff  	auipc	ra, 0xfffff
80210ad6: e7 80 00 25  	jalr	0x250(ra) <ekernel+0xffcc2d22>
80210ada: 97 90 01 00  	auipc	ra, 0x19
80210ade: e7 80 40 c1  	jalr	-0x3ec(ra) <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E>
80210ae2: e2 60        	ld	ra, 0x18(sp)
80210ae4: 42 64        	ld	s0, 0x10(sp)
;     }
80210ae6: 05 61        	addi	sp, sp, 0x20
80210ae8: 82 80        	ret

0000000080210aea <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17hf60b2d1701ce606dE>:
;     pub fn reserve_for_push(&mut self, len: usize) {
80210aea: 01 11        	addi	sp, sp, -0x20
80210aec: 06 ec        	sd	ra, 0x18(sp)
80210aee: 22 e8        	sd	s0, 0x10(sp)
80210af0: 00 10        	addi	s0, sp, 0x20
80210af2: 23 30 a4 fe  	sd	a0, -0x20(s0)
80210af6: 23 34 b4 fe  	sd	a1, -0x18(s0)
80210afa: 05 46        	li	a2, 0x1
;         handle_reserve(self.grow_amortized(len, 1));
80210afc: 97 f0 ff ff  	auipc	ra, 0xfffff
80210b00: e7 80 60 b9  	jalr	-0x46a(ra) <ekernel+0xffcc2692>
80210b04: 97 90 01 00  	auipc	ra, 0x19
80210b08: e7 80 a0 be  	jalr	-0x416(ra) <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E>
80210b0c: e2 60        	ld	ra, 0x18(sp)
80210b0e: 42 64        	ld	s0, 0x10(sp)
;     }
80210b10: 05 61        	addi	sp, sp, 0x20
80210b12: 82 80        	ret

0000000080210b14 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17hf8fde4953b7e933cE>:
;     pub fn reserve_for_push(&mut self, len: usize) {
80210b14: 01 11        	addi	sp, sp, -0x20
80210b16: 06 ec        	sd	ra, 0x18(sp)
80210b18: 22 e8        	sd	s0, 0x10(sp)
80210b1a: 00 10        	addi	s0, sp, 0x20
80210b1c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80210b20: 23 34 b4 fe  	sd	a1, -0x18(s0)
80210b24: 05 46        	li	a2, 0x1
;         handle_reserve(self.grow_amortized(len, 1));
80210b26: 97 00 00 00  	auipc	ra, 0x0
80210b2a: e7 80 c0 88  	jalr	-0x774(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h68878b470df98a2cE>
80210b2e: 97 90 01 00  	auipc	ra, 0x19
80210b32: e7 80 00 bc  	jalr	-0x440(ra) <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E>
80210b36: e2 60        	ld	ra, 0x18(sp)
80210b38: 42 64        	ld	s0, 0x10(sp)
;     }
80210b3a: 05 61        	addi	sp, sp, 0x20
80210b3c: 82 80        	ret

0000000080210b3e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hd99479896e6bd5a5E>:
;     pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, alloc: A) -> Self {
80210b3e: 1d 71        	addi	sp, sp, -0x60
80210b40: 86 ec        	sd	ra, 0x58(sp)
80210b42: a2 e8        	sd	s0, 0x50(sp)
80210b44: 80 10        	addi	s0, sp, 0x60
80210b46: 23 30 b4 fa  	sd	a1, -0x60(s0)
80210b4a: 23 34 a4 fa  	sd	a0, -0x58(s0)
80210b4e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80210b52: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         let cap = if T::IS_ZST { Cap::ZERO } else { unsafe { Cap(capacity) } };
80210b56: 09 a0        	j	0x80210b58 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hd99479896e6bd5a5E+0x1a>
80210b58: 03 35 04 fa  	ld	a0, -0x60(s0)
;         let cap = if T::IS_ZST { Cap::ZERO } else { unsafe { Cap(capacity) } };
80210b5c: 23 30 a4 fc  	sd	a0, -0x40(s0)
80210b60: 09 a0        	j	0x80210b62 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hd99479896e6bd5a5E+0x24>
;             assert_unsafe_precondition!(
80210b62: 09 a0        	j	0x80210b64 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hd99479896e6bd5a5E+0x26>
80210b64: 03 35 84 fa  	ld	a0, -0x58(s0)
;             assert_unsafe_precondition!(
80210b68: 97 00 ff ff  	auipc	ra, 0xffff0
80210b6c: e7 80 c0 e7  	jalr	-0x184(ra) <ekernel+0xffcb39e4>
80210b70: 09 a0        	j	0x80210b72 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hd99479896e6bd5a5E+0x34>
80210b72: 03 35 84 fa  	ld	a0, -0x58(s0)
;             NonNull { pointer: ptr as _ }
80210b76: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { Unique { pointer: NonNull::new_unchecked(ptr), _marker: PhantomData } }
80210b7a: 03 35 04 fd  	ld	a0, -0x30(s0)
80210b7e: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap, alloc }
80210b82: 03 35 04 fc  	ld	a0, -0x40(s0)
80210b86: 83 35 84 fc  	ld	a1, -0x38(s0)
80210b8a: 23 3c b4 fa  	sd	a1, -0x48(s0)
80210b8e: 23 38 a4 fa  	sd	a0, -0x50(s0)
;     }
80210b92: 03 35 04 fb  	ld	a0, -0x50(s0)
80210b96: 83 35 84 fb  	ld	a1, -0x48(s0)
80210b9a: e6 60        	ld	ra, 0x58(sp)
80210b9c: 46 64        	ld	s0, 0x50(sp)
80210b9e: 25 61        	addi	sp, sp, 0x60
80210ba0: 82 80        	ret

0000000080210ba2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hed15dec1547ccf0cE>:
;     pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, alloc: A) -> Self {
80210ba2: 1d 71        	addi	sp, sp, -0x60
80210ba4: 86 ec        	sd	ra, 0x58(sp)
80210ba6: a2 e8        	sd	s0, 0x50(sp)
80210ba8: 80 10        	addi	s0, sp, 0x60
80210baa: 23 30 b4 fa  	sd	a1, -0x60(s0)
80210bae: 23 34 a4 fa  	sd	a0, -0x58(s0)
80210bb2: 23 3c a4 fc  	sd	a0, -0x28(s0)
80210bb6: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         let cap = if T::IS_ZST { Cap::ZERO } else { unsafe { Cap(capacity) } };
80210bba: 09 a0        	j	0x80210bbc <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hed15dec1547ccf0cE+0x1a>
80210bbc: 03 35 04 fa  	ld	a0, -0x60(s0)
;         let cap = if T::IS_ZST { Cap::ZERO } else { unsafe { Cap(capacity) } };
80210bc0: 23 30 a4 fc  	sd	a0, -0x40(s0)
80210bc4: 09 a0        	j	0x80210bc6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hed15dec1547ccf0cE+0x24>
;             assert_unsafe_precondition!(
80210bc6: 09 a0        	j	0x80210bc8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hed15dec1547ccf0cE+0x26>
80210bc8: 03 35 84 fa  	ld	a0, -0x58(s0)
;             assert_unsafe_precondition!(
80210bcc: 97 00 ff ff  	auipc	ra, 0xffff0
80210bd0: e7 80 80 e1  	jalr	-0x1e8(ra) <ekernel+0xffcb39e4>
80210bd4: 09 a0        	j	0x80210bd6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17hed15dec1547ccf0cE+0x34>
80210bd6: 03 35 84 fa  	ld	a0, -0x58(s0)
;             NonNull { pointer: ptr as _ }
80210bda: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { Unique { pointer: NonNull::new_unchecked(ptr), _marker: PhantomData } }
80210bde: 03 35 04 fd  	ld	a0, -0x30(s0)
80210be2: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap, alloc }
80210be6: 03 35 04 fc  	ld	a0, -0x40(s0)
80210bea: 83 35 84 fc  	ld	a1, -0x38(s0)
80210bee: 23 3c b4 fa  	sd	a1, -0x48(s0)
80210bf2: 23 38 a4 fa  	sd	a0, -0x50(s0)
;     }
80210bf6: 03 35 04 fb  	ld	a0, -0x50(s0)
80210bfa: 83 35 84 fb  	ld	a1, -0x48(s0)
80210bfe: e6 60        	ld	ra, 0x58(sp)
80210c00: 46 64        	ld	s0, 0x50(sp)
80210c02: 25 61        	addi	sp, sp, 0x60
80210c04: 82 80        	ret

0000000080210c06 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6shrink17h03b89f36af95a476E>:
;     fn shrink(&mut self, cap: usize) -> Result<(), TryReserveError> {
80210c06: 13 01 01 dd  	addi	sp, sp, -0x230
80210c0a: 23 34 11 22  	sd	ra, 0x228(sp)
80210c0e: 23 30 81 22  	sd	s0, 0x220(sp)
80210c12: 00 1c        	addi	s0, sp, 0x230
80210c14: 23 30 b4 de  	sd	a1, -0x220(s0)
80210c18: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Err(e) => Err(op(e)),
80210c1c: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80210c20: 23 38 b4 f2  	sd	a1, -0xd0(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80210c24: 09 a0        	j	0x80210c26 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6shrink17h03b89f36af95a476E+0x20>
80210c26: 03 35 84 de  	ld	a0, -0x218(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80210c2a: 08 61        	ld	a0, 0x0(a0)
80210c2c: 23 34 a4 e0  	sd	a0, -0x1f8(s0)
80210c30: 09 a0        	j	0x80210c32 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6shrink17h03b89f36af95a476E+0x2c>
80210c32: 83 35 04 de  	ld	a1, -0x220(s0)
;         assert!(cap <= self.capacity(), "Tried to shrink to a larger capacity");
80210c36: 03 35 84 e0  	ld	a0, -0x1f8(s0)
80210c3a: 63 7d b5 04  	bgeu	a0, a1, 0x80210c94 <.Lpcrel_hi21+0x14>
80210c3e: 09 a0        	j	0x80210c40 <.Lpcrel_hi18>

0000000080210c40 <.Lpcrel_hi18>:
80210c40: 17 55 02 00  	auipc	a0, 0x25
80210c44: 93 05 85 dd  	addi	a1, a0, -0x228
80210c48: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80210c4c: 05 45        	li	a0, 0x1
80210c4e: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;         Arguments { pieces, fmt: None, args: &[] }
80210c52: 23 38 b4 e0  	sd	a1, -0x1f0(s0)
80210c56: 23 3c a4 e0  	sd	a0, -0x1e8(s0)

0000000080210c5a <.Lpcrel_hi19>:
80210c5a: 17 25 02 00  	auipc	a0, 0x22
80210c5e: 13 05 65 63  	addi	a0, a0, 0x636
80210c62: 0c 61        	ld	a1, 0x0(a0)
80210c64: 08 65        	ld	a0, 0x8(a0)
80210c66: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
80210c6a: 23 3c a4 e2  	sd	a0, -0x1c8(s0)

0000000080210c6e <.Lpcrel_hi20>:
80210c6e: 17 55 02 00  	auipc	a0, 0x25
80210c72: 13 05 a5 db  	addi	a0, a0, -0x246
80210c76: 23 30 a4 e2  	sd	a0, -0x1e0(s0)
80210c7a: 01 45        	li	a0, 0x0
80210c7c: 23 34 a4 e2  	sd	a0, -0x1d8(s0)

0000000080210c80 <.Lpcrel_hi21>:
;         assert!(cap <= self.capacity(), "Tried to shrink to a larger capacity");
80210c80: 17 55 02 00  	auipc	a0, 0x25
80210c84: 93 05 05 e2  	addi	a1, a0, -0x1e0
80210c88: 13 05 04 e1  	addi	a0, s0, -0x1f0
80210c8c: 97 f0 01 00  	auipc	ra, 0x1f
80210c90: e7 80 c0 51  	jalr	0x51c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80210c94: 83 35 84 de  	ld	a1, -0x218(s0)
80210c98: 13 05 04 e5  	addi	a0, s0, -0x1b0
;         let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };
80210c9c: 97 e0 ff ff  	auipc	ra, 0xffffe
80210ca0: e7 80 60 72  	jalr	0x726(ra) <ekernel+0xffcc23c2>
80210ca4: 03 35 84 e5  	ld	a0, -0x1a8(s0)
80210ca8: 05 c9        	beqz	a0, 0x80210cd8 <.Lpcrel_hi22>
80210caa: 09 a0        	j	0x80210cac <.Lpcrel_hi21+0x2c>
80210cac: 03 35 04 de  	ld	a0, -0x220(s0)
;         let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };
80210cb0: 83 35 04 e5  	ld	a1, -0x1b0(s0)
80210cb4: 23 3c b4 dc  	sd	a1, -0x228(s0)
80210cb8: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80210cbc: 03 36 84 e5  	ld	a2, -0x1a8(s0)
80210cc0: 83 35 04 e6  	ld	a1, -0x1a0(s0)
80210cc4: 23 38 c4 f4  	sd	a2, -0xb0(s0)
80210cc8: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80210ccc: 23 30 c4 e4  	sd	a2, -0x1c0(s0)
80210cd0: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
;         if cap == 0 {
80210cd4: 09 cd        	beqz	a0, 0x80210cee <.Lpcrel_hi22+0x16>
80210cd6: 3d a8        	j	0x80210d14 <.Lpcrel_hi22+0x3c>

0000000080210cd8 <.Lpcrel_hi22>:
;         let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };
80210cd8: 17 25 02 00  	auipc	a0, 0x22
80210cdc: 13 05 85 59  	addi	a0, a0, 0x598
80210ce0: 0c 61        	ld	a1, 0x0(a0)
80210ce2: 08 65        	ld	a0, 0x8(a0)
80210ce4: 23 3c b4 de  	sd	a1, -0x208(s0)
80210ce8: 23 30 a4 e0  	sd	a0, -0x200(s0)
; #![no_std]
80210cec: c1 aa        	j	0x80210ebc <.Lpcrel_hi23+0x112>
80210cee: 83 35 84 dd  	ld	a1, -0x228(s0)
80210cf2: 03 35 84 de  	ld	a0, -0x218(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) };
80210cf6: 41 05        	addi	a0, a0, 0x10
80210cf8: 03 36 04 e4  	ld	a2, -0x1c0(s0)
80210cfc: 83 36 84 e4  	ld	a3, -0x1b8(s0)
80210d00: 97 a0 ff ff  	auipc	ra, 0xffffa
80210d04: e7 80 40 07  	jalr	0x74(ra) <ekernel+0xffcbdd74>
80210d08: 05 45        	li	a0, 0x1
;     intrinsics::min_align_of::<T>()
80210d0a: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;     unsafe { mem::transmute(addr) }
80210d0e: 23 34 a4 f6  	sd	a0, -0x98(s0)
;             assert_unsafe_precondition!(
80210d12: bd a0        	j	0x80210d80 <.Lpcrel_hi22+0xa8>
80210d14: 83 35 84 dd  	ld	a1, -0x228(s0)
80210d18: 03 35 84 de  	ld	a0, -0x218(s0)
80210d1c: 83 36 04 de  	ld	a3, -0x220(s0)
80210d20: 05 46        	li	a2, 0x1
;     intrinsics::size_of::<T>()
80210d22: 23 38 c4 f6  	sd	a2, -0x90(s0)
;     uint_impl! {
80210d26: 23 3c d4 f6  	sd	a3, -0x88(s0)
80210d2a: 13 06 04 e4  	addi	a2, s0, -0x1c0
;                 let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());
80210d2e: 23 30 c4 f8  	sd	a2, -0x80(s0)
;         self.align.as_usize()
80210d32: 03 36 04 e4  	ld	a2, -0x1c0(s0)
80210d36: 23 34 c4 f8  	sd	a2, -0x78(s0)
;         self.0 as usize
80210d3a: 23 3c c4 ec  	sd	a2, -0x128(s0)
80210d3e: 03 36 84 ed  	ld	a2, -0x128(s0)
80210d42: 23 38 c4 f8  	sd	a2, -0x70(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80210d46: 23 3c d4 e6  	sd	a3, -0x188(s0)
80210d4a: 23 38 c4 e6  	sd	a2, -0x190(s0)
;                 self.alloc
80210d4e: 41 05        	addi	a0, a0, 0x10
;                     .shrink(ptr, layout, new_layout)
80210d50: 03 36 04 e4  	ld	a2, -0x1c0(s0)
80210d54: 83 36 84 e4  	ld	a3, -0x1b8(s0)
80210d58: 03 37 04 e7  	ld	a4, -0x190(s0)
80210d5c: 83 37 84 e7  	ld	a5, -0x188(s0)
;                 self.alloc
80210d60: 97 a0 ff ff  	auipc	ra, 0xffffa
80210d64: e7 80 c0 08  	jalr	0x8c(ra) <ekernel+0xffcbddec>
80210d68: 23 38 a4 ea  	sd	a0, -0x150(s0)
80210d6c: 23 3c b4 ea  	sd	a1, -0x148(s0)
80210d70: 13 05 04 e7  	addi	a0, s0, -0x190
;                     .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?
80210d74: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         match self {
80210d78: 03 35 04 eb  	ld	a0, -0x150(s0)
80210d7c: 31 e1        	bnez	a0, 0x80210dc0 <.Lpcrel_hi23+0x16>
80210d7e: 4d a8        	j	0x80210e30 <.Lpcrel_hi23+0x86>
80210d80: 05 45        	li	a0, 0x1
;             assert_unsafe_precondition!(
80210d82: 97 00 ff ff  	auipc	ra, 0xffff0
80210d86: e7 80 20 c6  	jalr	-0x39e(ra) <ekernel+0xffcb39e4>
80210d8a: 09 a0        	j	0x80210d8c <.Lpcrel_hi22+0xb4>
80210d8c: 83 35 84 de  	ld	a1, -0x218(s0)
80210d90: 05 45        	li	a0, 0x1
;             NonNull { pointer: ptr as _ }
80210d92: 23 38 a4 ec  	sd	a0, -0x130(s0)
;         Unique { pointer: NonNull::dangling(), _marker: PhantomData }
80210d96: 03 35 04 ed  	ld	a0, -0x130(s0)
80210d9a: 23 34 a4 e6  	sd	a0, -0x198(s0)
;             self.ptr = Unique::dangling();
80210d9e: 03 35 84 e6  	ld	a0, -0x198(s0)
80210da2: 88 e5        	sd	a0, 0x8(a1)
80210da4: 01 45        	li	a0, 0x0
;             self.cap = Cap::ZERO;
80210da6: 88 e1        	sd	a0, 0x0(a1)
;         if cap == 0 {
80210da8: 09 a0        	j	0x80210daa <.Lpcrel_hi23>

0000000080210daa <.Lpcrel_hi23>:
;         Ok(())
80210daa: 17 25 02 00  	auipc	a0, 0x22
80210dae: 13 05 65 4c  	addi	a0, a0, 0x4c6
80210db2: 0c 61        	ld	a1, 0x0(a0)
80210db4: 08 65        	ld	a0, 0x8(a0)
80210db6: 23 3c b4 de  	sd	a1, -0x208(s0)
80210dba: 23 30 a4 e0  	sd	a0, -0x200(s0)
;     }
80210dbe: fd a8        	j	0x80210ebc <.Lpcrel_hi23+0x112>
80210dc0: 83 35 84 de  	ld	a1, -0x218(s0)
80210dc4: 03 35 04 de  	ld	a0, -0x220(s0)
;             Ok(t) => Ok(t),
80210dc8: 83 36 04 eb  	ld	a3, -0x150(s0)
80210dcc: 03 36 84 eb  	ld	a2, -0x148(s0)
80210dd0: 23 30 d4 fa  	sd	a3, -0x60(s0)
80210dd4: 23 34 c4 fa  	sd	a2, -0x58(s0)
80210dd8: 23 30 d4 ea  	sd	a3, -0x160(s0)
80210ddc: 23 34 c4 ea  	sd	a2, -0x158(s0)
80210de0: 01 46        	li	a2, 0x0
80210de2: 23 3c c4 e8  	sd	a2, -0x168(s0)
;             Ok(v) => ControlFlow::Continue(v),
80210de6: 03 37 04 ea  	ld	a4, -0x160(s0)
80210dea: 83 36 84 ea  	ld	a3, -0x158(s0)
80210dee: 23 38 e4 fa  	sd	a4, -0x50(s0)
80210df2: 23 3c d4 fa  	sd	a3, -0x48(s0)
80210df6: 23 34 e4 e8  	sd	a4, -0x178(s0)
80210dfa: 23 38 d4 e8  	sd	a3, -0x170(s0)
80210dfe: 23 30 c4 e8  	sd	a2, -0x180(s0)
;                 self.alloc
80210e02: 03 36 84 e8  	ld	a2, -0x178(s0)
80210e06: 83 36 04 e9  	ld	a3, -0x170(s0)
80210e0a: 23 30 c4 fc  	sd	a2, -0x40(s0)
80210e0e: 23 34 d4 fc  	sd	a3, -0x38(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80210e12: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
80210e16: 03 36 84 f0  	ld	a2, -0xf8(s0)
80210e1a: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
80210e1e: 03 36 04 f0  	ld	a2, -0x100(s0)
80210e22: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
80210e24: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80210e28: 03 35 04 f1  	ld	a0, -0xf0(s0)
80210e2c: 88 e1        	sd	a0, 0x0(a1)
;         if cap == 0 {
80210e2e: b5 bf        	j	0x80210daa <.Lpcrel_hi23>
;                     .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?
80210e30: 83 35 04 e7  	ld	a1, -0x190(s0)
80210e34: 03 35 84 e7  	ld	a0, -0x188(s0)
80210e38: 23 30 b4 ee  	sd	a1, -0x120(s0)
80210e3c: 23 34 a4 ee  	sd	a0, -0x118(s0)
;             Err(e) => Err(op(e)),
80210e40: 83 35 04 ee  	ld	a1, -0x120(s0)
80210e44: 03 35 84 ee  	ld	a0, -0x118(s0)
80210e48: 23 30 b4 ea  	sd	a1, -0x160(s0)
80210e4c: 23 34 a4 ea  	sd	a0, -0x158(s0)
80210e50: 05 45        	li	a0, 0x1
80210e52: 23 3c a4 e8  	sd	a0, -0x168(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
80210e56: 03 36 04 ea  	ld	a2, -0x160(s0)
80210e5a: 83 35 84 ea  	ld	a1, -0x158(s0)
80210e5e: 23 38 c4 fc  	sd	a2, -0x30(s0)
80210e62: 23 3c b4 fc  	sd	a1, -0x28(s0)
80210e66: 23 38 c4 ee  	sd	a2, -0x110(s0)
80210e6a: 23 3c b4 ee  	sd	a1, -0x108(s0)
80210e6e: 03 36 04 ef  	ld	a2, -0x110(s0)
80210e72: 83 35 84 ef  	ld	a1, -0x108(s0)
80210e76: 23 34 c4 e8  	sd	a2, -0x178(s0)
80210e7a: 23 38 b4 e8  	sd	a1, -0x170(s0)
80210e7e: 23 30 a4 e8  	sd	a0, -0x180(s0)
;                     .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?
80210e82: 83 35 84 e8  	ld	a1, -0x178(s0)
80210e86: 03 35 04 e9  	ld	a0, -0x170(s0)
80210e8a: 23 30 b4 ec  	sd	a1, -0x140(s0)
80210e8e: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
80210e92: 83 35 04 ec  	ld	a1, -0x140(s0)
80210e96: 03 35 84 ec  	ld	a0, -0x138(s0)
80210e9a: 23 30 b4 fe  	sd	a1, -0x20(s0)
80210e9e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
80210ea2: 23 3c b4 f0  	sd	a1, -0xe8(s0)
80210ea6: 23 30 a4 f2  	sd	a0, -0xe0(s0)
;             Err(e) => Err(From::from(e)),
80210eaa: 83 35 84 f1  	ld	a1, -0xe8(s0)
80210eae: 03 35 04 f2  	ld	a0, -0xe0(s0)
80210eb2: 23 3c b4 de  	sd	a1, -0x208(s0)
80210eb6: 23 30 a4 e0  	sd	a0, -0x200(s0)
; #![no_std]
80210eba: 09 a0        	j	0x80210ebc <.Lpcrel_hi23+0x112>
;     }
80210ebc: 03 35 84 df  	ld	a0, -0x208(s0)
80210ec0: 83 35 04 e0  	ld	a1, -0x200(s0)
80210ec4: 83 30 81 22  	ld	ra, 0x228(sp)
80210ec8: 03 34 01 22  	ld	s0, 0x220(sp)
80210ecc: 13 01 01 23  	addi	sp, sp, 0x230
80210ed0: 82 80        	ret

0000000080210ed2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h1c67f92f96442532E>:
;         fn do_reserve_and_handle<T, A: Allocator>(
80210ed2: 79 71        	addi	sp, sp, -0x30
80210ed4: 06 f4        	sd	ra, 0x28(sp)
80210ed6: 22 f0        	sd	s0, 0x20(sp)
80210ed8: 00 18        	addi	s0, sp, 0x30
80210eda: 23 3c a4 fc  	sd	a0, -0x28(s0)
80210ede: 23 30 b4 fe  	sd	a1, -0x20(s0)
80210ee2: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             handle_reserve(slf.grow_amortized(len, additional));
80210ee6: 97 e0 ff ff  	auipc	ra, 0xffffe
80210eea: e7 80 c0 7a  	jalr	0x7ac(ra) <ekernel+0xffcc2692>
80210eee: 97 90 01 00  	auipc	ra, 0x19
80210ef2: e7 80 00 80  	jalr	-0x800(ra) <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E>
80210ef6: a2 70        	ld	ra, 0x28(sp)
80210ef8: 02 74        	ld	s0, 0x20(sp)
;         }
80210efa: 45 61        	addi	sp, sp, 0x30
80210efc: 82 80        	ret

0000000080210efe <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8into_box17hc2f37044df9314d7E>:
;     pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>], A> {
80210efe: 51 71        	addi	sp, sp, -0xf0
80210f00: 86 f5        	sd	ra, 0xe8(sp)
80210f02: a2 f1        	sd	s0, 0xe0(sp)
80210f04: 80 19        	addi	s0, sp, 0xf0
80210f06: 23 34 a4 f8  	sd	a0, -0x78(s0)
80210f0a: 23 38 b4 f8  	sd	a1, -0x70(s0)
80210f0e: 23 3c c4 f8  	sd	a2, -0x68(s0)
;         ManuallyDrop { value }
80210f12: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80210f16: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80210f1a: 13 05 84 f3  	addi	a0, s0, -0xc8
;             let slice = ptr::slice_from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);
80210f1e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80210f22: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.ptr.as_ptr()
80210f26: 83 35 04 f4  	ld	a1, -0xc0(s0)
80210f2a: 23 3c b4 fa  	sd	a1, -0x48(s0)
;             let slice = ptr::slice_from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);
80210f2e: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self as _
80210f32: 23 34 b4 fc  	sd	a1, -0x38(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80210f36: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80210f3a: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80210f3e: 03 36 84 f5  	ld	a2, -0xa8(s0)
80210f42: 83 35 04 f6  	ld	a1, -0xa0(s0)
80210f46: 23 34 c4 f4  	sd	a2, -0xb8(s0)
80210f4a: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80210f4e: 03 36 84 f4  	ld	a2, -0xb8(s0)
80210f52: 23 3c c4 f0  	sd	a2, -0xe8(s0)
80210f56: 83 35 04 f5  	ld	a1, -0xb0(s0)
80210f5a: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80210f5e: 23 38 c4 fc  	sd	a2, -0x30(s0)
80210f62: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             Box::from_raw_in(slice, ptr::read(&me.alloc))
80210f66: 23 30 a4 fe  	sd	a0, -0x20(s0)
80210f6a: 13 05 84 f4  	addi	a0, s0, -0xb8
80210f6e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
80210f72: 09 a0        	j	0x80210f74 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8into_box17hc2f37044df9314d7E+0x76>
80210f74: 03 35 84 f1  	ld	a0, -0xe8(s0)
;             assert_unsafe_precondition!(
80210f78: 97 00 ff ff  	auipc	ra, 0xffff0
80210f7c: e7 80 c0 a6  	jalr	-0x594(ra) <ekernel+0xffcb39e4>
80210f80: 09 a0        	j	0x80210f82 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8into_box17hc2f37044df9314d7E+0x84>
80210f82: 03 35 04 f2  	ld	a0, -0xe0(s0)
80210f86: 83 35 84 f1  	ld	a1, -0xe8(s0)
;             NonNull { pointer: ptr as _ }
80210f8a: 23 3c b4 f6  	sd	a1, -0x88(s0)
80210f8e: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         unsafe { Unique { pointer: NonNull::new_unchecked(ptr), _marker: PhantomData } }
80210f92: 83 35 84 f7  	ld	a1, -0x88(s0)
80210f96: 03 35 04 f8  	ld	a0, -0x80(s0)
80210f9a: 23 34 b4 f6  	sd	a1, -0x98(s0)
80210f9e: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         Box(unsafe { Unique::new_unchecked(raw) }, alloc)
80210fa2: 83 35 84 f6  	ld	a1, -0x98(s0)
80210fa6: 03 35 04 f7  	ld	a0, -0x90(s0)
80210faa: 23 34 b4 f2  	sd	a1, -0xd8(s0)
80210fae: 23 38 a4 f2  	sd	a0, -0xd0(s0)
;     }
80210fb2: 03 35 84 f2  	ld	a0, -0xd8(s0)
80210fb6: 83 35 04 f3  	ld	a1, -0xd0(s0)
80210fba: ae 70        	ld	ra, 0xe8(sp)
80210fbc: 0e 74        	ld	s0, 0xe0(sp)
80210fbe: 6d 61        	addi	sp, sp, 0xf0
80210fc0: 82 80        	ret

0000000080210fc2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17haf66b2647e334777E>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
80210fc2: 01 11        	addi	sp, sp, -0x20
80210fc4: 06 ec        	sd	ra, 0x18(sp)
80210fc6: 22 e8        	sd	s0, 0x10(sp)
80210fc8: 00 10        	addi	s0, sp, 0x20
80210fca: 23 30 a4 fe  	sd	a0, -0x20(s0)
80210fce: 23 34 b4 fe  	sd	a1, -0x18(s0)
80210fd2: 08 61        	ld	a0, 0x0(a0)
80210fd4: 97 50 00 00  	auipc	ra, 0x5
80210fd8: e7 80 a0 77  	jalr	0x77a(ra) <_ZN71_$LT$riscv..register..scause..Interrupt$u20$as$u20$core..fmt..Debug$GT$3fmt17h18a57191a583a360E>
80210fdc: e2 60        	ld	ra, 0x18(sp)
80210fde: 42 64        	ld	s0, 0x10(sp)
80210fe0: 05 61        	addi	sp, sp, 0x20
80210fe2: 82 80        	ret

0000000080210fe4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hde27a4de4259e997E>:
80210fe4: 01 11        	addi	sp, sp, -0x20
80210fe6: 06 ec        	sd	ra, 0x18(sp)
80210fe8: 22 e8        	sd	s0, 0x10(sp)
80210fea: 00 10        	addi	s0, sp, 0x20
80210fec: 23 30 a4 fe  	sd	a0, -0x20(s0)
80210ff0: 23 34 b4 fe  	sd	a1, -0x18(s0)
80210ff4: 08 61        	ld	a0, 0x0(a0)
80210ff6: 97 50 00 00  	auipc	ra, 0x5
80210ffa: e7 80 60 5b  	jalr	0x5b6(ra) <_ZN71_$LT$riscv..register..scause..Exception$u20$as$u20$core..fmt..Debug$GT$3fmt17h449f58996bbf4995E>
80210ffe: e2 60        	ld	ra, 0x18(sp)
80211000: 42 64        	ld	s0, 0x10(sp)
80211002: 05 61        	addi	sp, sp, 0x20
80211004: 82 80        	ret

0000000080211006 <__switch>:
80211006: 23 30 15 00  	sd	ra, 0x0(a0)
8021100a: 23 34 25 00  	sd	sp, 0x8(a0)
8021100e: 00 e9        	sd	s0, 0x10(a0)
80211010: 04 ed        	sd	s1, 0x18(a0)
80211012: 23 30 25 03  	sd	s2, 0x20(a0)
80211016: 23 34 35 03  	sd	s3, 0x28(a0)
8021101a: 23 38 45 03  	sd	s4, 0x30(a0)
8021101e: 23 3c 55 03  	sd	s5, 0x38(a0)
80211022: 23 30 65 05  	sd	s6, 0x40(a0)
80211026: 23 34 75 05  	sd	s7, 0x48(a0)
8021102a: 23 38 85 05  	sd	s8, 0x50(a0)
8021102e: 23 3c 95 05  	sd	s9, 0x58(a0)
80211032: 23 30 a5 07  	sd	s10, 0x60(a0)
80211036: 23 34 b5 07  	sd	s11, 0x68(a0)
8021103a: 83 b0 05 00  	ld	ra, 0x0(a1)
8021103e: 03 b1 85 00  	ld	sp, 0x8(a1)
80211042: 80 69        	ld	s0, 0x10(a1)
80211044: 84 6d        	ld	s1, 0x18(a1)
80211046: 03 b9 05 02  	ld	s2, 0x20(a1)
8021104a: 83 b9 85 02  	ld	s3, 0x28(a1)
8021104e: 03 ba 05 03  	ld	s4, 0x30(a1)
80211052: 83 ba 85 03  	ld	s5, 0x38(a1)
80211056: 03 bb 05 04  	ld	s6, 0x40(a1)
8021105a: 83 bb 85 04  	ld	s7, 0x48(a1)
8021105e: 03 bc 05 05  	ld	s8, 0x50(a1)
80211062: 83 bc 85 05  	ld	s9, 0x58(a1)
80211066: 03 bd 05 06  	ld	s10, 0x60(a1)
8021106a: 83 bd 85 06  	ld	s11, 0x68(a1)
8021106e: 82 80        	ret

0000000080211070 <scheduler>:
; pub fn scheduler() -> ! {
80211070: 4d 71        	addi	sp, sp, -0x150
80211072: 86 e6        	sd	ra, 0x148(sp)
80211074: a2 e2        	sd	s0, 0x140(sp)
80211076: 80 0a        	addi	s0, sp, 0x150
80211078: 01 45        	li	a0, 0x0
;     let cpu = unsafe { CPUS.my_cpu() };
8021107a: 23 0b a4 fa  	sb	a0, -0x4a(s0)
8021107e: a3 0a a4 fa  	sb	a0, -0x4b(s0)
80211082: a3 0b a4 fa  	sb	a0, -0x49(s0)

0000000080211086 <.Lpcrel_hi0>:
80211086: 17 b5 33 00  	auipc	a0, 0x33b
8021108a: 13 05 a5 17  	addi	a0, a0, 0x17a
8021108e: 97 80 00 00  	auipc	ra, 0x8
80211092: e7 80 e0 3a  	jalr	0x3ae(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80211096: aa 85        	mv	a1, a0
80211098: 23 30 b4 ee  	sd	a1, -0x120(s0)
8021109c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     loop {
802110a0: 09 a0        	j	0x802110a2 <.Lpcrel_hi0+0x1c>
;         intr_on();
802110a2: 97 b0 ff ff  	auipc	ra, 0xffffb
802110a6: e7 80 a0 d2  	jalr	-0x2d6(ra) <ekernel+0xffcbedcc>

00000000802110aa <.Lpcrel_hi1>:
;         let mut lock_task_manger = unsafe { TASKMANGER.lock() };
802110aa: 17 65 02 00  	auipc	a0, 0x26
802110ae: 13 05 e5 29  	addi	a0, a0, 0x29e
802110b2: 97 80 00 00  	auipc	ra, 0x8
802110b6: e7 80 80 82  	jalr	-0x7d8(ra) <_ZN73_$LT$os..task..manager..TASKMANGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13a6a188e04fdd86E>
802110ba: 97 20 00 00  	auipc	ra, 0x2
802110be: e7 80 a0 0c  	jalr	0xca(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17ha7c692bd7ee4f1cfE>
802110c2: 23 34 a4 ee  	sd	a0, -0x118(s0)
802110c6: 23 38 b4 ee  	sd	a1, -0x110(s0)
802110ca: 05 45        	li	a0, 0x1
802110cc: 23 3c a4 ec  	sd	a0, -0x128(s0)
802110d0: 23 0b a4 fa  	sb	a0, -0x4a(s0)
802110d4: 13 05 84 ee  	addi	a0, s0, -0x118
;         if let Some(task) = lock_task_manger.pop_front(){
802110d8: 97 30 00 00  	auipc	ra, 0x3
802110dc: e7 80 00 ae  	jalr	-0x520(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2f6946418d8b1239E>
802110e0: 97 70 00 00  	auipc	ra, 0x7
802110e4: e7 80 80 fd  	jalr	-0x28(ra) <_ZN2os4task7manager11TaskManager9pop_front17hfe30849929e17ce2E>
802110e8: aa 85        	mv	a1, a0
802110ea: 03 35 84 ed  	ld	a0, -0x128(s0)
802110ee: 23 3c b4 ee  	sd	a1, -0x108(s0)
802110f2: a3 0b a4 fa  	sb	a0, -0x49(s0)
802110f6: 03 35 84 ef  	ld	a0, -0x108(s0)
802110fa: 0d c9        	beqz	a0, 0x8021112c <.Lpcrel_hi1+0x82>
802110fc: 09 a0        	j	0x802110fe <.Lpcrel_hi1+0x54>
802110fe: 03 35 04 ee  	ld	a0, -0x120(s0)
80211102: 81 45        	li	a1, 0x0
;         if let Some(task) = lock_task_manger.pop_front(){
80211104: a3 0b b4 fa  	sb	a1, -0x49(s0)
80211108: 83 35 84 ef  	ld	a1, -0x108(s0)
8021110c: 23 30 b4 f0  	sd	a1, -0x100(s0)
;             let mut old_task = cpu.task.take();
80211110: 21 05        	addi	a0, a0, 0x8
80211112: 97 40 ff ff  	auipc	ra, 0xffff4
80211116: e7 80 a0 c7  	jalr	-0x386(ra) <ekernel+0xffcb7d8c>
8021111a: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8021111e: 05 45        	li	a0, 0x1
80211120: a3 0a a4 fa  	sb	a0, -0x4b(s0)
;             match old_task{
80211124: 03 35 84 f0  	ld	a0, -0xf8(s0)
80211128: 01 c9        	beqz	a0, 0x80211138 <.Lpcrel_hi1+0x8e>
8021112a: 89 aa        	j	0x8021127c <.Lpcrel_hi3+0x38>
;     }
8021112c: 03 45 64 fb  	lbu	a0, -0x4a(s0)
80211130: 05 89        	andi	a0, a0, 0x1
80211132: 63 1d 05 1a  	bnez	a0, 0x802112ec <.Lpcrel_hi4+0x4a>
80211136: 65 a2        	j	0x802112de <.Lpcrel_hi4+0x3c>
80211138: 13 05 04 f0  	addi	a0, s0, -0x100
8021113c: 23 3c a4 ea  	sd	a0, -0x148(s0)
;             let mut out_data = unsafe {task.out_data.lock()};
80211140: 97 10 ff ff  	auipc	ra, 0xffff1
80211144: e7 80 c0 c8  	jalr	-0x374(ra) <ekernel+0xffcb4dcc>
80211148: 97 20 00 00  	auipc	ra, 0x2
8021114c: e7 80 00 db  	jalr	-0x250(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7cf5583f2d8e897eE>
80211150: 2a 86        	mv	a2, a0
80211152: 03 35 84 eb  	ld	a0, -0x148(s0)
80211156: 23 38 c4 f0  	sd	a2, -0xf0(s0)
8021115a: 23 3c b4 f0  	sd	a1, -0xe8(s0)
;             let inner = task.inner_mut();
8021115e: 97 10 ff ff  	auipc	ra, 0xffff1
80211162: e7 80 e0 c6  	jalr	-0x392(ra) <ekernel+0xffcb4dcc>
80211166: 97 d0 ff ff  	auipc	ra, 0xffffd
8021116a: e7 80 00 0c  	jalr	0xc0(ra) <ekernel+0xffcc1226>
8021116e: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80211172: 23 34 b4 f2  	sd	a1, -0xd8(s0)
80211176: 01 45        	li	a0, 0x0
80211178: 23 38 a4 ec  	sd	a0, -0x130(s0)
;             out_data.state = State::Run;
8021117c: a3 0b a4 f2  	sb	a0, -0xc9(s0)
80211180: 13 05 04 f1  	addi	a0, s0, -0xf0
80211184: 97 30 00 00  	auipc	ra, 0x3
80211188: e7 80 00 ac  	jalr	-0x540(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hddcb379c916be380E>
8021118c: aa 85        	mv	a1, a0
8021118e: 03 45 74 f3  	lbu	a0, -0xc9(s0)
80211192: 23 82 a5 02  	sb	a0, 0x24(a1)
80211196: 13 05 04 f2  	addi	a0, s0, -0xe0
8021119a: 23 30 a4 ec  	sd	a0, -0x140(s0)
;             let next_context = &inner.context as *const Context;
8021119e: 97 00 ff ff  	auipc	ra, 0xffff0
802111a2: e7 80 60 9d  	jalr	-0x62a(ra) <ekernel+0xffcb3b74>
802111a6: aa 85        	mv	a1, a0
802111a8: 03 35 04 ec  	ld	a0, -0x140(s0)
802111ac: 93 85 85 06  	addi	a1, a1, 0x68
802111b0: 23 34 b4 ec  	sd	a1, -0x138(s0)
802111b4: 23 30 b4 fc  	sd	a1, -0x40(s0)
;             let dbug_context = inner.context.clone();
802111b8: 97 00 ff ff  	auipc	ra, 0xffff0
802111bc: e7 80 c0 9b  	jalr	-0x644(ra) <ekernel+0xffcb3b74>
802111c0: 93 05 85 06  	addi	a1, a0, 0x68
802111c4: 13 05 84 f3  	addi	a0, s0, -0xc8
802111c8: 97 80 00 00  	auipc	ra, 0x8
802111cc: e7 80 e0 3b  	jalr	0x3be(ra) <_ZN55_$LT$os..cpu..Context$u20$as$u20$core..clone..Clone$GT$5clone17he6a273ebed914050E>
;             drop(out_data);
802111d0: 03 35 04 f1  	ld	a0, -0xf0(s0)
802111d4: 83 35 84 f1  	ld	a1, -0xe8(s0)
802111d8: 97 90 00 00  	auipc	ra, 0x9
802111dc: e7 80 00 8b  	jalr	-0x750(ra) <_ZN4core3mem4drop17h4e97e8a503492b55E>
;             drop(inner);
802111e0: 03 35 04 f2  	ld	a0, -0xe0(s0)
802111e4: 83 35 84 f2  	ld	a1, -0xd8(s0)
802111e8: 97 90 00 00  	auipc	ra, 0x9
802111ec: e7 80 c0 87  	jalr	-0x784(ra) <_ZN4core3mem4drop17h48a990f70936f01fE>
802111f0: 03 35 04 ee  	ld	a0, -0x120(s0)
;             cpu.task = Some(task);
802111f4: 83 35 04 f0  	ld	a1, -0x100(s0)
802111f8: 23 34 b4 fa  	sd	a1, -0x58(s0)
802111fc: 21 05        	addi	a0, a0, 0x8
802111fe: 97 60 ff ff  	auipc	ra, 0xffff6
80211202: e7 80 c0 76  	jalr	0x76c(ra) <ekernel+0xffcba96a>
80211206: 03 36 04 ee  	ld	a2, -0x120(s0)
8021120a: 03 35 04 ed  	ld	a0, -0x130(s0)
8021120e: 83 35 84 fa  	ld	a1, -0x58(s0)
80211212: 0c e6        	sd	a1, 0x8(a2)
;             Spin::unlock(lock_task_manger);
80211214: 23 0b a4 fa  	sb	a0, -0x4a(s0)
80211218: 03 35 84 ee  	ld	a0, -0x118(s0)
8021121c: 83 35 04 ef  	ld	a1, -0x110(s0)
80211220: 97 20 00 00  	auipc	ra, 0x2
80211224: e7 80 c0 47  	jalr	0x47c(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$6unlock17ha667e6d35e7989a4E>

0000000080211228 <.Lpcrel_hi2>:
;             let proc = CPUS.my_proc().unwrap();
80211228: 17 b5 33 00  	auipc	a0, 0x33b
8021122c: 13 05 85 fd  	addi	a0, a0, -0x28
80211230: 97 80 00 00  	auipc	ra, 0x8
80211234: e7 80 c0 26  	jalr	0x26c(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80211238: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
8021123c: 03 35 04 fe  	ld	a0, -0x20(s0)
80211240: 11 e9        	bnez	a0, 0x80211254 <.Lpcrel_hi3+0x10>
80211242: 09 a0        	j	0x80211244 <.Lpcrel_hi3>

0000000080211244 <.Lpcrel_hi3>:
;             None => unwrap_failed(),
80211244: 17 55 02 00  	auipc	a0, 0x25
80211248: 13 05 c5 8e  	addi	a0, a0, -0x714
8021124c: 97 00 02 00  	auipc	ra, 0x20
80211250: e7 80 c0 a7  	jalr	-0x584(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
80211254: 83 35 84 ec  	ld	a1, -0x138(s0)
80211258: 03 35 04 ee  	ld	a0, -0x120(s0)
;             Some(val) => val,
8021125c: 03 36 04 fe  	ld	a2, -0x20(s0)
80211260: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             let proc = CPUS.my_proc().unwrap();
80211264: 23 34 c4 fc  	sd	a2, -0x38(s0)
;             unsafe { __switch(&mut cpu.context as *mut Context, next_context) };
80211268: 41 05        	addi	a0, a0, 0x10
8021126a: 97 00 00 00  	auipc	ra, 0x0
8021126e: e7 80 c0 d9  	jalr	-0x264(ra) <__switch>
;         }
80211272: 03 45 54 fb  	lbu	a0, -0x4b(s0)
80211276: 05 89        	andi	a0, a0, 0x1
80211278: 21 ed        	bnez	a0, 0x802112d0 <.Lpcrel_hi4+0x2e>
8021127a: b9 a0        	j	0x802112c8 <.Lpcrel_hi4+0x26>
8021127c: 13 05 84 ee  	addi	a0, s0, -0x118
;                     lock_task_manger.add_task(old_task.unwrap());
80211280: 97 30 00 00  	auipc	ra, 0x3
80211284: e7 80 80 93  	jalr	-0x6c8(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2f6946418d8b1239E>
80211288: 23 38 a4 ea  	sd	a0, -0x150(s0)
8021128c: 01 45        	li	a0, 0x0
8021128e: a3 0a a4 fa  	sb	a0, -0x4b(s0)
80211292: 03 35 84 f0  	ld	a0, -0xf8(s0)
80211296: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         match self {
8021129a: 03 35 04 fd  	ld	a0, -0x30(s0)
8021129e: 11 e9        	bnez	a0, 0x802112b2 <.Lpcrel_hi4+0x10>
802112a0: 09 a0        	j	0x802112a2 <.Lpcrel_hi4>

00000000802112a2 <.Lpcrel_hi4>:
;             None => unwrap_failed(),
802112a2: 17 55 02 00  	auipc	a0, 0x25
802112a6: 13 05 65 87  	addi	a0, a0, -0x78a
802112aa: 97 00 02 00  	auipc	ra, 0x20
802112ae: e7 80 e0 a1  	jalr	-0x5e2(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
802112b2: 03 35 04 eb  	ld	a0, -0x150(s0)
;             Some(val) => val,
802112b6: 83 35 04 fd  	ld	a1, -0x30(s0)
802112ba: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                     lock_task_manger.add_task(old_task.unwrap());
802112be: 97 70 00 00  	auipc	ra, 0x7
802112c2: e7 80 a0 dd  	jalr	-0x226(ra) <_ZN2os4task7manager11TaskManager8add_task17hcc122bf2f11e487eE>
802112c6: 8d bd        	j	0x80211138 <.Lpcrel_hi1+0x8e>
802112c8: 01 45        	li	a0, 0x0
;         }
802112ca: a3 0a a4 fa  	sb	a0, -0x4b(s0)
;         if let Some(task) = lock_task_manger.pop_front(){
802112ce: b9 bd        	j	0x8021112c <.Lpcrel_hi1+0x82>
802112d0: 13 05 84 f0  	addi	a0, s0, -0xf8
;         }
802112d4: 97 60 ff ff  	auipc	ra, 0xffff6
802112d8: e7 80 60 69  	jalr	0x696(ra) <ekernel+0xffcba96a>
802112dc: f5 b7        	j	0x802112c8 <.Lpcrel_hi4+0x26>
802112de: 01 45        	li	a0, 0x0
;     }
802112e0: 23 0b a4 fa  	sb	a0, -0x4a(s0)
802112e4: 03 35 84 ef  	ld	a0, -0x108(s0)
802112e8: 09 e9        	bnez	a0, 0x802112fa <.Lpcrel_hi4+0x58>
802112ea: 29 a8        	j	0x80211304 <.Lpcrel_hi4+0x62>
802112ec: 13 05 84 ee  	addi	a0, s0, -0x118
;     }
802112f0: 97 70 ff ff  	auipc	ra, 0xffff7
802112f4: e7 80 20 23  	jalr	0x232(ra) <ekernel+0xffcbb522>
802112f8: dd b7        	j	0x802112de <.Lpcrel_hi4+0x3c>
802112fa: 03 45 74 fb  	lbu	a0, -0x49(s0)
802112fe: 05 89        	andi	a0, a0, 0x1
80211300: 11 e5        	bnez	a0, 0x8021130c <.Lpcrel_hi4+0x6a>
80211302: 09 a0        	j	0x80211304 <.Lpcrel_hi4+0x62>
80211304: 01 45        	li	a0, 0x0
;     }
80211306: a3 0b a4 fa  	sb	a0, -0x49(s0)
;     loop {
8021130a: 61 bb        	j	0x802110a2 <.Lpcrel_hi0+0x1c>
8021130c: 13 05 84 ef  	addi	a0, s0, -0x108
;     }
80211310: 97 70 ff ff  	auipc	ra, 0xffff7
80211314: e7 80 00 05  	jalr	0x50(ra) <ekernel+0xffcbb360>
80211318: f5 b7        	j	0x80211304 <.Lpcrel_hi4+0x62>

000000008021131a <_ZN2os4task4exit17hb1cac5637418cca8E>:
; pub fn exit(exit_code:i32){
8021131a: 0d 71        	addi	sp, sp, -0x160
8021131c: 86 ee        	sd	ra, 0x158(sp)
8021131e: a2 ea        	sd	s0, 0x150(sp)
80211320: 80 12        	addi	s0, sp, 0x160
80211322: 23 2a a4 ee  	sw	a0, -0x10c(s0)

0000000080211326 <.Lpcrel_hi5>:
;     let c = unsafe { CPUS.my_cpu() };
80211326: 17 b5 33 00  	auipc	a0, 0x33b
8021132a: 13 05 a5 ed  	addi	a0, a0, -0x126
8021132e: 23 30 a4 ee  	sd	a0, -0x120(s0)
80211332: 97 80 00 00  	auipc	ra, 0x8
80211336: e7 80 a0 10  	jalr	0x10a(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
8021133a: aa 85        	mv	a1, a0
8021133c: 03 35 04 ee  	ld	a0, -0x120(s0)
80211340: 2e 86        	mv	a2, a1
80211342: 23 34 c4 ee  	sd	a2, -0x118(s0)
80211346: 23 34 b4 fa  	sd	a1, -0x58(s0)
;     let task = CPUS.take_task().unwrap();
8021134a: 97 80 00 00  	auipc	ra, 0x8
8021134e: e7 80 60 1a  	jalr	0x1a6(ra) <_ZN2os3cpu4Cpus9take_task17h0bcd533be6ae7cb5E>
80211352: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80211356: 03 35 04 fe  	ld	a0, -0x20(s0)
8021135a: 11 e9        	bnez	a0, 0x8021136e <.Lpcrel_hi6+0x10>
8021135c: 09 a0        	j	0x8021135e <.Lpcrel_hi6>

000000008021135e <.Lpcrel_hi6>:
;             None => unwrap_failed(),
8021135e: 17 45 02 00  	auipc	a0, 0x24
80211362: 13 05 a5 7e  	addi	a0, a0, 0x7ea
80211366: 97 00 02 00  	auipc	ra, 0x20
8021136a: e7 80 20 96  	jalr	-0x69e(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8021136e: 03 35 04 fe  	ld	a0, -0x20(s0)
80211372: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let task = CPUS.take_task().unwrap();
80211376: 23 3c a4 ee  	sd	a0, -0x108(s0)
8021137a: 13 05 84 ef  	addi	a0, s0, -0x108
;     let pid = task.pid();
8021137e: 97 10 ff ff  	auipc	ra, 0xffff1
80211382: e7 80 e0 a4  	jalr	-0x5b2(ra) <ekernel+0xffcb4dcc>
80211386: 97 d0 ff ff  	auipc	ra, 0xffffd
8021138a: e7 80 c0 ce  	jalr	-0x314(ra) <ekernel+0xffcc1072>
8021138e: 23 38 a4 fa  	sd	a0, -0x50(s0)
;     if pid == 0 {
80211392: 3d e1        	bnez	a0, 0x802113f8 <.Lpcrel_hi8+0x36>
80211394: 09 a0        	j	0x80211396 <.Lpcrel_hi6+0x38>
80211396: 93 05 44 ef  	addi	a1, s0, -0x10c
8021139a: 23 38 b4 fc  	sd	a1, -0x30(s0)

000000008021139e <.Lpcrel_hi7>:
;         Self::new(x, Display::fmt)
8021139e: 17 05 02 00  	auipc	a0, 0x20
802113a2: 13 05 e5 cb  	addi	a0, a0, -0x342
802113a6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
802113aa: 23 30 b4 fc  	sd	a1, -0x40(s0)
802113ae: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     }
802113b2: 83 35 04 fc  	ld	a1, -0x40(s0)
802113b6: 03 35 84 fc  	ld	a0, -0x38(s0)
;         println!("[kernel]:init exit with exit code {} ... ",exit_code);
802113ba: 23 38 b4 f2  	sd	a1, -0xd0(s0)
802113be: 23 3c a4 f2  	sd	a0, -0xc8(s0)

00000000802113c2 <.Lpcrel_hi8>:
802113c2: 17 45 02 00  	auipc	a0, 0x24
802113c6: 93 05 65 7c  	addi	a1, a0, 0x7c6
802113ca: 13 05 04 f0  	addi	a0, s0, -0x100
802113ce: 23 3c a4 ec  	sd	a0, -0x128(s0)
802113d2: 09 46        	li	a2, 0x2
802113d4: 93 06 04 f3  	addi	a3, s0, -0xd0
802113d8: 05 47        	li	a4, 0x1
802113da: 97 60 ff ff  	auipc	ra, 0xffff6
802113de: e7 80 e0 f0  	jalr	-0xf2(ra) <ekernel+0xffcba2e8>
802113e2: 03 35 84 ed  	ld	a0, -0x128(s0)
802113e6: 97 70 00 00  	auipc	ra, 0x7
802113ea: e7 80 60 aa  	jalr	-0x55a(ra) <_ZN2os7console5print17h042fcde166d682deE>
;         if exit_code != 0{
802113ee: 03 25 44 ef  	lw	a0, -0x10c(s0)
802113f2: 63 1d 05 14  	bnez	a0, 0x8021154c <.Lpcrel_hi11+0x10>
802113f6: 09 a0        	j	0x802113f8 <.Lpcrel_hi8+0x36>
802113f8: 13 05 84 ef  	addi	a0, s0, -0x108
802113fc: 23 38 a4 ea  	sd	a0, -0x150(s0)
;     let mut out_data = unsafe { task.out_data.lock() };
80211400: 97 10 ff ff  	auipc	ra, 0xffff1
80211404: e7 80 c0 9c  	jalr	-0x634(ra) <ekernel+0xffcb4dcc>
80211408: 97 20 00 00  	auipc	ra, 0x2
8021140c: e7 80 00 af  	jalr	-0x510(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7cf5583f2d8e897eE>
80211410: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80211414: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80211418: 0d 45        	li	a0, 0x3
;     out_data.state = State::Zombie;
8021141a: a3 0b a4 f4  	sb	a0, -0xa9(s0)
8021141e: 13 05 04 f4  	addi	a0, s0, -0xc0
80211422: 23 30 a4 ea  	sd	a0, -0x160(s0)
80211426: 97 30 00 00  	auipc	ra, 0x3
8021142a: e7 80 e0 81  	jalr	-0x7e2(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hddcb379c916be380E>
8021142e: 2a 86        	mv	a2, a0
80211430: 03 35 04 ea  	ld	a0, -0x160(s0)
80211434: 83 45 74 f5  	lbu	a1, -0xa9(s0)
80211438: 23 02 b6 02  	sb	a1, 0x24(a2)
;     out_data.xstate = exit_code;
8021143c: 83 25 44 ef  	lw	a1, -0x10c(s0)
80211440: 23 34 b4 ea  	sd	a1, -0x158(s0)
80211444: 97 30 00 00  	auipc	ra, 0x3
80211448: e7 80 00 80  	jalr	-0x800(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hddcb379c916be380E>
8021144c: 83 35 84 ea  	ld	a1, -0x158(s0)
80211450: 2a 86        	mv	a2, a0
80211452: 03 35 04 eb  	ld	a0, -0x150(s0)
80211456: 0c d2        	sw	a1, 0x20(a2)
;     let mut inner = task.inner_mut();
80211458: 97 10 ff ff  	auipc	ra, 0xffff1
8021145c: e7 80 40 97  	jalr	-0x68c(ra) <ekernel+0xffcb4dcc>
80211460: 97 d0 ff ff  	auipc	ra, 0xffffd
80211464: e7 80 60 dc  	jalr	-0x23a(ra) <ekernel+0xffcc1226>
80211468: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8021146c: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80211470: 13 05 84 f5  	addi	a0, s0, -0xa8
80211474: 23 3c a4 ea  	sd	a0, -0x148(s0)
;     let mut ctx = &mut inner.context as *mut Context;
80211478: 97 f0 fe ff  	auipc	ra, 0xfffef
8021147c: e7 80 e0 71  	jalr	0x71e(ra) <ekernel+0xffcb3b96>
80211480: aa 85        	mv	a1, a0
80211482: 03 35 84 eb  	ld	a0, -0x148(s0)
80211486: 93 85 85 06  	addi	a1, a1, 0x68
8021148a: 23 34 b4 ec  	sd	a1, -0x138(s0)
8021148e: 23 3c b4 fa  	sd	a1, -0x48(s0)
;     inner.children.clear();
80211492: 97 f0 fe ff  	auipc	ra, 0xfffef
80211496: e7 80 40 70  	jalr	0x704(ra) <ekernel+0xffcb3b96>
8021149a: 13 05 05 03  	addi	a0, a0, 0x30
8021149e: 97 40 00 00  	auipc	ra, 0x4
802114a2: e7 80 80 89  	jalr	-0x768(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$5clear17hdf00531693ebdccfE>
;     drop(inner);
802114a6: 03 35 84 f5  	ld	a0, -0xa8(s0)
802114aa: 83 35 04 f6  	ld	a1, -0xa0(s0)
802114ae: 97 80 00 00  	auipc	ra, 0x8
802114b2: e7 80 60 5b  	jalr	0x5b6(ra) <_ZN4core3mem4drop17h48a990f70936f01fE>
;     drop(out_data);
802114b6: 03 35 04 f4  	ld	a0, -0xc0(s0)
802114ba: 83 35 84 f4  	ld	a1, -0xb8(s0)
802114be: 97 80 00 00  	auipc	ra, 0x8
802114c2: e7 80 a0 5c  	jalr	0x5ca(ra) <_ZN4core3mem4drop17h4e97e8a503492b55E>

00000000802114c6 <.Lpcrel_hi9>:
;     unsafe { TASKMANGER.lock().free_task(task) }
802114c6: 17 65 02 00  	auipc	a0, 0x26
802114ca: 13 05 25 e8  	addi	a0, a0, -0x17e
802114ce: 97 70 00 00  	auipc	ra, 0x7
802114d2: e7 80 c0 40  	jalr	0x40c(ra) <_ZN73_$LT$os..task..manager..TASKMANGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13a6a188e04fdd86E>
802114d6: 97 20 00 00  	auipc	ra, 0x2
802114da: e7 80 e0 ca  	jalr	-0x352(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17ha7c692bd7ee4f1cfE>
802114de: 23 34 a4 f6  	sd	a0, -0x98(s0)
802114e2: 23 38 b4 f6  	sd	a1, -0x90(s0)
802114e6: 13 05 84 f6  	addi	a0, s0, -0x98
802114ea: 23 30 a4 ec  	sd	a0, -0x140(s0)
802114ee: 97 20 00 00  	auipc	ra, 0x2
802114f2: e7 80 a0 6c  	jalr	0x6ca(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2f6946418d8b1239E>
802114f6: 83 35 84 ef  	ld	a1, -0x108(s0)
802114fa: 97 70 00 00  	auipc	ra, 0x7
802114fe: e7 80 a0 bd  	jalr	-0x426(ra) <_ZN2os4task7manager11TaskManager9free_task17h91934d4f1e9489f3E>
80211502: 03 35 04 ec  	ld	a0, -0x140(s0)
80211506: 97 70 ff ff  	auipc	ra, 0xffff7
8021150a: e7 80 c0 01  	jalr	0x1c(ra) <ekernel+0xffcbb522>
8021150e: 03 35 84 ee  	ld	a0, -0x118(s0)
80211512: 83 35 84 ec  	ld	a1, -0x138(s0)
;     unsafe { c.sched(ctx) };
80211516: 97 80 00 00  	auipc	ra, 0x8
8021151a: e7 80 40 ec  	jalr	-0x13c(ra) <_ZN2os3cpu3Cpu5sched17he977bf182f87d75bE>

000000008021151e <.Lpcrel_hi10>:
;     panic!("this proc shuld be exit")
8021151e: 17 45 02 00  	auipc	a0, 0x24
80211522: 93 05 25 6a  	addi	a1, a0, 0x6a2
80211526: 13 05 84 f7  	addi	a0, s0, -0x88
8021152a: 23 38 a4 ec  	sd	a0, -0x130(s0)
8021152e: 05 46        	li	a2, 0x1
80211530: 97 60 ff ff  	auipc	ra, 0xffff6
80211534: e7 80 40 e8  	jalr	-0x17c(ra) <ekernel+0xffcba3b4>
80211538: 03 35 04 ed  	ld	a0, -0x130(s0)

000000008021153c <.Lpcrel_hi11>:
8021153c: 97 45 02 00  	auipc	a1, 0x24
80211540: 93 85 45 69  	addi	a1, a1, 0x694
80211544: 97 f0 01 00  	auipc	ra, 0x1f
80211548: e7 80 40 c6  	jalr	-0x39c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
;             shutdown();
8021154c: 97 90 ff ff  	auipc	ra, 0xffff9
80211550: e7 80 60 42  	jalr	0x426(ra) <ekernel+0xffcbd972>

0000000080211554 <_ZN2os4task9parse_elf17h88a38259c1c1821dE>:
; pub fn parse_elf(elf_data:&[u8]) -> (PageTable,usize){
80211554: 13 01 01 cd  	addi	sp, sp, -0x330
80211558: 23 34 11 32  	sd	ra, 0x328(sp)
8021155c: 23 30 81 32  	sd	s0, 0x320(sp)
80211560: 00 1e        	addi	s0, sp, 0x330
80211562: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
80211566: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
8021156a: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
8021156e: 23 34 b4 f2  	sd	a1, -0xd8(s0)
80211572: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80211576: 13 05 04 d6  	addi	a0, s0, -0x2a0
;     let mut pagetable = PageTable::new();
8021157a: 97 b0 ff ff  	auipc	ra, 0xffffb
8021157e: e7 80 e0 df  	jalr	-0x202(ra) <ekernel+0xffcbf378>
80211582: 83 35 04 d5  	ld	a1, -0x2b0(s0)
80211586: 03 36 84 d5  	ld	a2, -0x2a8(s0)
8021158a: 13 05 04 dc  	addi	a0, s0, -0x240
;     let elf = xmas_elf::ElfFile::new(elf_data).unwrap();
8021158e: 97 d0 01 00  	auipc	ra, 0x1d
80211592: e7 80 00 a9  	jalr	-0x570(ra) <_ZN8xmas_elf7ElfFile3new17h553277ee79c5e940E>
;         match self {
80211596: 03 35 04 dc  	ld	a0, -0x240(s0)
8021159a: 89 45        	li	a1, 0x2
8021159c: 63 1f b5 02  	bne	a0, a1, 0x802115da <.Lpcrel_hi14+0x18>
802115a0: 09 a0        	j	0x802115a2 <_ZN2os4task9parse_elf17h88a38259c1c1821dE+0x4e>
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
802115a2: 83 35 84 dc  	ld	a1, -0x238(s0)
802115a6: 03 35 04 dd  	ld	a0, -0x230(s0)
802115aa: 23 30 b4 fe  	sd	a1, -0x20(s0)
802115ae: 23 34 a4 fe  	sd	a0, -0x18(s0)

00000000802115b2 <.Lpcrel_hi12>:
802115b2: 17 45 02 00  	auipc	a0, 0x24
802115b6: 13 05 65 50  	addi	a0, a0, 0x506

00000000802115ba <.Lpcrel_hi13>:
802115ba: 97 45 02 00  	auipc	a1, 0x24
802115be: 93 86 e5 52  	addi	a3, a1, 0x52e

00000000802115c2 <.Lpcrel_hi14>:
802115c2: 97 45 02 00  	auipc	a1, 0x24
802115c6: 13 87 65 62  	addi	a4, a1, 0x626
802115ca: 93 05 b0 02  	li	a1, 0x2b
802115ce: 13 06 04 fe  	addi	a2, s0, -0x20
802115d2: 97 f0 01 00  	auipc	ra, 0x1f
802115d6: e7 80 c0 74  	jalr	0x74c(ra) <_ZN4core6result13unwrap_failed17hd7dd91774099986cE>
;             Ok(t) => t,
802115da: 03 35 04 de  	ld	a0, -0x220(s0)
802115de: 23 3c a4 da  	sd	a0, -0x248(s0)
802115e2: 03 35 84 dd  	ld	a0, -0x228(s0)
802115e6: 23 38 a4 da  	sd	a0, -0x250(s0)
802115ea: 03 35 04 dd  	ld	a0, -0x230(s0)
802115ee: 23 34 a4 da  	sd	a0, -0x258(s0)
802115f2: 03 35 84 dc  	ld	a0, -0x238(s0)
802115f6: 23 30 a4 da  	sd	a0, -0x260(s0)
802115fa: 03 35 04 dc  	ld	a0, -0x240(s0)
802115fe: 23 3c a4 d8  	sd	a0, -0x268(s0)
;     let elf_header = elf.header;
80211602: 03 35 84 da  	ld	a0, -0x258(s0)
80211606: 23 3c a4 de  	sd	a0, -0x208(s0)
8021160a: 03 35 04 da  	ld	a0, -0x260(s0)
8021160e: 23 38 a4 de  	sd	a0, -0x210(s0)
80211612: 03 35 84 d9  	ld	a0, -0x268(s0)
80211616: 23 34 a4 de  	sd	a0, -0x218(s0)
;     let magic = elf.header.pt1.magic;
8021161a: 83 36 84 da  	ld	a3, -0x258(s0)
8021161e: 03 c5 06 00  	lbu	a0, 0x0(a3)
80211622: 83 c5 16 00  	lbu	a1, 0x1(a3)
80211626: 03 c6 26 00  	lbu	a2, 0x2(a3)
8021162a: 83 c6 36 00  	lbu	a3, 0x3(a3)
8021162e: a3 03 d4 e0  	sb	a3, -0x1f9(s0)
80211632: 23 03 c4 e0  	sb	a2, -0x1fa(s0)
80211636: a3 02 b4 e0  	sb	a1, -0x1fb(s0)
8021163a: 23 02 a4 e0  	sb	a0, -0x1fc(s0)
8021163e: 13 05 44 e0  	addi	a0, s0, -0x1fc
;     assert_eq!(magic,[0x7f,0x45,0x4c,0x46],"not elf!!");
80211642: 23 34 a4 e0  	sd	a0, -0x1f8(s0)

0000000080211646 <.Lpcrel_hi15>:
80211646: 17 25 02 00  	auipc	a0, 0x22
8021164a: 13 05 25 17  	addi	a0, a0, 0x172
8021164e: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
80211652: 03 35 84 e0  	ld	a0, -0x1f8(s0)
80211656: 23 3c a4 d2  	sd	a0, -0x2c8(s0)
8021165a: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8021165e: 83 35 04 e1  	ld	a1, -0x1f0(s0)
80211662: 23 30 b4 d4  	sd	a1, -0x2c0(s0)
80211666: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8021166a: 97 d0 01 00  	auipc	ra, 0x1d
8021166e: e7 80 80 86  	jalr	-0x798(ra) <_ZN4core5array8equality103_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$U$u3b$$u20$N$u5d$$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$2eq17h756c2887ce260762E>
80211672: 25 e9        	bnez	a0, 0x802116e2 <.Lpcrel_hi17+0x14>
80211674: 09 a0        	j	0x80211676 <.Lpcrel_hi15+0x30>
80211676: 01 45        	li	a0, 0x0
;     assert_eq!(magic,[0x7f,0x45,0x4c,0x46],"not elf!!");
80211678: a3 0f a4 e0  	sb	a0, -0x1e1(s0)

000000008021167c <.Lpcrel_hi16>:
8021167c: 17 45 02 00  	auipc	a0, 0x24
80211680: 93 05 45 59  	addi	a1, a0, 0x594
80211684: 13 05 04 e5  	addi	a0, s0, -0x1b0
80211688: 05 46        	li	a2, 0x1
8021168a: 97 60 ff ff  	auipc	ra, 0xffff6
8021168e: e7 80 a0 d2  	jalr	-0x2d6(ra) <ekernel+0xffcba3b4>
80211692: 83 35 84 d3  	ld	a1, -0x2c8(s0)
80211696: 03 36 04 d4  	ld	a2, -0x2c0(s0)
8021169a: 03 35 84 e7  	ld	a0, -0x188(s0)
8021169e: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
802116a2: 03 35 04 e7  	ld	a0, -0x190(s0)
802116a6: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
802116aa: 03 35 84 e6  	ld	a0, -0x198(s0)
802116ae: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
802116b2: 03 35 04 e6  	ld	a0, -0x1a0(s0)
802116b6: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
802116ba: 03 35 84 e5  	ld	a0, -0x1a8(s0)
802116be: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
802116c2: 03 35 04 e5  	ld	a0, -0x1b0(s0)
802116c6: 23 30 a4 e2  	sd	a0, -0x1e0(s0)
802116ca: 03 45 f4 e1  	lbu	a0, -0x1e1(s0)

00000000802116ce <.Lpcrel_hi17>:
802116ce: 97 46 02 00  	auipc	a3, 0x24
802116d2: 13 87 26 55  	addi	a4, a3, 0x552
802116d6: 93 06 04 e2  	addi	a3, s0, -0x1e0
802116da: 97 40 00 00  	auipc	ra, 0x4
802116de: e7 80 a0 e5  	jalr	-0x1a6(ra) <_ZN4core9panicking13assert_failed17h31f18e82d71868b9E>
802116e2: 13 05 84 de  	addi	a0, s0, -0x218
;     let ph_count = elf_header.pt2.ph_count();
802116e6: 97 c0 01 00  	auipc	ra, 0x1c
802116ea: e7 80 20 5a  	jalr	0x5a2(ra) <_ZN8xmas_elf6header9HeaderPt28ph_count17hd37dd8189c08ff03E>
802116ee: 23 16 a4 f4  	sh	a0, -0xb4(s0)
802116f2: 81 45        	li	a1, 0x0
;     for i in 0..ph_count{
802116f4: 23 12 b4 e8  	sh	a1, -0x17c(s0)
802116f8: 23 13 a4 e8  	sh	a0, -0x17a(s0)
802116fc: 83 15 64 e8  	lh	a1, -0x17a(s0)
80211700: 03 15 44 e8  	lh	a0, -0x17c(s0)
80211704: 97 40 ff ff  	auipc	ra, 0xffff4
80211708: e7 80 60 4a  	jalr	0x4a6(ra) <ekernel+0xffcb8baa>
8021170c: 23 14 a4 e8  	sh	a0, -0x178(s0)
80211710: 23 15 b4 e8  	sh	a1, -0x176(s0)
80211714: 09 a0        	j	0x80211716 <.Lpcrel_hi17+0x48>
80211716: 13 05 84 e8  	addi	a0, s0, -0x178
;     for i in 0..ph_count{
8021171a: 97 40 ff ff  	auipc	ra, 0xffff4
8021171e: e7 80 20 2b  	jalr	0x2b2(ra) <ekernel+0xffcb89cc>
80211722: 23 16 a4 e8  	sh	a0, -0x174(s0)
80211726: 23 17 b4 e8  	sh	a1, -0x172(s0)
8021172a: 03 55 c4 e8  	lhu	a0, -0x174(s0)
8021172e: 4d e1        	bnez	a0, 0x802117d0 <.Lpcrel_hi17+0x102>
80211730: 09 a0        	j	0x80211732 <.Lpcrel_hi17+0x64>
80211732: 37 05 00 04  	lui	a0, 0x4000
80211736: 9b 05 b5 ff  	addiw	a1, a0, -0x5
8021173a: b2 05        	slli	a1, a1, 0xc
8021173c: 75 35        	addiw	a0, a0, -0x3
8021173e: 13 16 c5 00  	slli	a2, a0, 0xc
80211742: 13 05 04 d6  	addi	a0, s0, -0x2a0
;     map_user_stack(&mut pagetable, USERSTACK, USERSTACK_TOP);
80211746: 97 00 00 00  	auipc	ra, 0x0
8021174a: e7 80 60 77  	jalr	0x776(ra) <_ZN2os4task14map_user_stack17h14381de0081c05a6E>
;     (pagetable,elf_header.pt2.entry_point() as usize)
8021174e: 03 35 04 d9  	ld	a0, -0x270(s0)
80211752: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80211756: 03 35 84 d8  	ld	a0, -0x278(s0)
8021175a: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8021175e: 03 35 04 d8  	ld	a0, -0x280(s0)
80211762: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80211766: 03 35 84 d7  	ld	a0, -0x288(s0)
8021176a: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8021176e: 03 35 04 d7  	ld	a0, -0x290(s0)
80211772: 23 30 a4 f0  	sd	a0, -0x100(s0)
80211776: 03 35 84 d6  	ld	a0, -0x298(s0)
8021177a: 23 3c a4 ee  	sd	a0, -0x108(s0)
8021177e: 03 35 04 d6  	ld	a0, -0x2a0(s0)
80211782: 23 38 a4 ee  	sd	a0, -0x110(s0)
80211786: 13 05 84 de  	addi	a0, s0, -0x218
8021178a: 97 c0 01 00  	auipc	ra, 0x1c
8021178e: e7 80 40 42  	jalr	0x424(ra) <_ZN8xmas_elf6header9HeaderPt211entry_point17h8769ecfa5c515708E>
80211792: 83 35 84 d4  	ld	a1, -0x2b8(s0)
80211796: 03 36 04 f2  	ld	a2, -0xe0(s0)
8021179a: 90 f9        	sd	a2, 0x30(a1)
8021179c: 03 36 84 f1  	ld	a2, -0xe8(s0)
802117a0: 90 f5        	sd	a2, 0x28(a1)
802117a2: 03 36 04 f1  	ld	a2, -0xf0(s0)
802117a6: 90 f1        	sd	a2, 0x20(a1)
802117a8: 03 36 84 f0  	ld	a2, -0xf8(s0)
802117ac: 90 ed        	sd	a2, 0x18(a1)
802117ae: 03 36 04 f0  	ld	a2, -0x100(s0)
802117b2: 90 e9        	sd	a2, 0x10(a1)
802117b4: 03 36 84 ef  	ld	a2, -0x108(s0)
802117b8: 90 e5        	sd	a2, 0x8(a1)
802117ba: 03 36 04 ef  	ld	a2, -0x110(s0)
802117be: 90 e1        	sd	a2, 0x0(a1)
802117c0: 88 fd        	sd	a0, 0x38(a1)
802117c2: 83 30 81 32  	ld	ra, 0x328(sp)
802117c6: 03 34 01 32  	ld	s0, 0x320(sp)
; }
802117ca: 13 01 01 33  	addi	sp, sp, 0x330
802117ce: 82 80        	ret
;     for i in 0..ph_count{
802117d0: 03 16 e4 e8  	lh	a2, -0x172(s0)
802117d4: 23 17 c4 f4  	sh	a2, -0xb2(s0)
802117d8: 13 05 04 ea  	addi	a0, s0, -0x160
802117dc: 93 05 84 d9  	addi	a1, s0, -0x268
;         let ph = elf.program_header(i).unwrap();
802117e0: 97 d0 01 00  	auipc	ra, 0x1d
802117e4: e7 80 40 90  	jalr	-0x6fc(ra) <_ZN8xmas_elf7ElfFile14program_header17h983bd7c8c7596623E>
;         match self {
802117e8: 03 35 04 ea  	ld	a0, -0x160(s0)
802117ec: 15 cd        	beqz	a0, 0x80211828 <.Lpcrel_hi20+0x18>
802117ee: 09 a0        	j	0x802117f0 <.Lpcrel_hi17+0x122>
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
802117f0: 83 35 84 ea  	ld	a1, -0x158(s0)
802117f4: 03 35 04 eb  	ld	a0, -0x150(s0)
802117f8: 23 30 b4 fc  	sd	a1, -0x40(s0)
802117fc: 23 34 a4 fc  	sd	a0, -0x38(s0)

0000000080211800 <.Lpcrel_hi18>:
80211800: 17 45 02 00  	auipc	a0, 0x24
80211804: 13 05 85 2b  	addi	a0, a0, 0x2b8

0000000080211808 <.Lpcrel_hi19>:
80211808: 97 45 02 00  	auipc	a1, 0x24
8021180c: 93 86 05 2e  	addi	a3, a1, 0x2e0

0000000080211810 <.Lpcrel_hi20>:
80211810: 97 45 02 00  	auipc	a1, 0x24
80211814: 13 87 85 42  	addi	a4, a1, 0x428
80211818: 93 05 b0 02  	li	a1, 0x2b
8021181c: 13 06 04 fc  	addi	a2, s0, -0x40
80211820: 97 f0 01 00  	auipc	ra, 0x1f
80211824: e7 80 e0 4f  	jalr	0x4fe(ra) <_ZN4core6result13unwrap_failed17hd7dd91774099986cE>
;             Ok(t) => t,
80211828: 83 35 84 ea  	ld	a1, -0x158(s0)
8021182c: 03 35 04 eb  	ld	a0, -0x150(s0)
80211830: 23 38 b4 fc  	sd	a1, -0x30(s0)
80211834: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let ph = elf.program_header(i).unwrap();
80211838: 23 38 b4 e8  	sd	a1, -0x170(s0)
8021183c: 23 3c a4 e8  	sd	a0, -0x168(s0)
80211840: 13 05 04 ec  	addi	a0, s0, -0x140
80211844: 93 05 04 e9  	addi	a1, s0, -0x170
;         if ph.get_type().unwrap() == xmas_elf::program::Type::Load{
80211848: 97 d0 01 00  	auipc	ra, 0x1d
8021184c: e7 80 80 c4  	jalr	-0x3b8(ra) <_ZN8xmas_elf7program13ProgramHeader8get_type17h2445591a8c7dbe32E>
;         match self {
80211850: 03 35 04 ec  	ld	a0, -0x140(s0)
80211854: 15 cd        	beqz	a0, 0x80211890 <.Lpcrel_hi23+0x18>
80211856: 09 a0        	j	0x80211858 <.Lpcrel_hi20+0x48>
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
80211858: 83 35 04 ec  	ld	a1, -0x140(s0)
8021185c: 03 35 84 ec  	ld	a0, -0x138(s0)
80211860: 23 34 b4 fa  	sd	a1, -0x58(s0)
80211864: 23 38 a4 fa  	sd	a0, -0x50(s0)

0000000080211868 <.Lpcrel_hi21>:
80211868: 17 45 02 00  	auipc	a0, 0x24
8021186c: 13 05 05 25  	addi	a0, a0, 0x250

0000000080211870 <.Lpcrel_hi22>:
80211870: 97 45 02 00  	auipc	a1, 0x24
80211874: 93 86 85 27  	addi	a3, a1, 0x278

0000000080211878 <.Lpcrel_hi23>:
80211878: 97 45 02 00  	auipc	a1, 0x24
8021187c: 13 87 85 3d  	addi	a4, a1, 0x3d8
80211880: 93 05 b0 02  	li	a1, 0x2b
80211884: 13 06 84 fa  	addi	a2, s0, -0x58
80211888: 97 f0 01 00  	auipc	ra, 0x1f
8021188c: e7 80 60 49  	jalr	0x496(ra) <_ZN4core6result13unwrap_failed17hd7dd91774099986cE>
;             Ok(t) => t,
80211890: 83 25 84 ec  	lw	a1, -0x138(s0)
80211894: 03 25 c4 ec  	lw	a0, -0x134(s0)
80211898: 23 2c b4 fa  	sw	a1, -0x48(s0)
8021189c: 23 2e a4 fa  	sw	a0, -0x44(s0)
;         if ph.get_type().unwrap() == xmas_elf::program::Type::Load{
802118a0: 23 2c b4 ea  	sw	a1, -0x148(s0)
802118a4: 23 2e a4 ea  	sw	a0, -0x144(s0)

00000000802118a8 <.Lpcrel_hi24>:
802118a8: 17 25 02 00  	auipc	a0, 0x22
802118ac: 93 05 85 b4  	addi	a1, a0, -0x4b8
802118b0: 13 05 84 eb  	addi	a0, s0, -0x148
802118b4: 97 10 00 00  	auipc	ra, 0x1
802118b8: e7 80 a0 85  	jalr	-0x7a6(ra) <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E>
802118bc: e3 0d 05 e4  	beqz	a0, 0x80211716 <.Lpcrel_hi17+0x48>
802118c0: 09 a0        	j	0x802118c2 <.Lpcrel_hi24+0x1a>
802118c2: 13 05 04 e9  	addi	a0, s0, -0x170
802118c6: 23 34 a4 d2  	sd	a0, -0x2d8(s0)
;             let start_va = ph.virtual_addr() as usize;
802118ca: 97 d0 01 00  	auipc	ra, 0x1d
802118ce: e7 80 00 f9  	jalr	-0x70(ra) <_ZN8xmas_elf7program13ProgramHeader12virtual_addr17h6f651e4be22ac28dE>
802118d2: aa 85        	mv	a1, a0
802118d4: 03 35 84 d2  	ld	a0, -0x2d8(s0)
802118d8: 2e 86        	mv	a2, a1
802118da: 23 30 c4 d2  	sd	a2, -0x2e0(s0)
802118de: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;             let mem_sz = ph.mem_size() as usize; 
802118e2: 97 d0 01 00  	auipc	ra, 0x1d
802118e6: e7 80 80 ee  	jalr	-0x118(ra) <_ZN8xmas_elf7program13ProgramHeader8mem_size17h6acfb5bc2d9f5ac3E>
802118ea: aa 85        	mv	a1, a0
802118ec: 03 35 84 d2  	ld	a0, -0x2d8(s0)
802118f0: 2e 86        	mv	a2, a1
802118f2: 23 38 c4 d2  	sd	a2, -0x2d0(s0)
802118f6: 23 3c b4 f4  	sd	a1, -0xa8(s0)
802118fa: c1 45        	li	a1, 0x10
;             let mut map_perm = PTE_U;
802118fc: 23 38 b4 ec  	sd	a1, -0x130(s0)
;             let ph_flags = ph.flags();
80211900: 97 d0 01 00  	auipc	ra, 0x1d
80211904: e7 80 20 fa  	jalr	-0x5e(ra) <_ZN8xmas_elf7program13ProgramHeader5flags17h5a7366a46d585ab5E>
80211908: 23 2e a4 ec  	sw	a0, -0x124(s0)
8021190c: 13 05 c4 ed  	addi	a0, s0, -0x124
;             if ph_flags.is_read() {
80211910: 97 d0 01 00  	auipc	ra, 0x1d
80211914: e7 80 80 c0  	jalr	-0x3f8(ra) <_ZN8xmas_elf7program5Flags7is_read17h1c8d1c518bdc6d4aE>
80211918: 11 e9        	bnez	a0, 0x8021192c <.Lpcrel_hi24+0x84>
8021191a: 09 a0        	j	0x8021191c <.Lpcrel_hi24+0x74>
8021191c: 13 05 c4 ed  	addi	a0, s0, -0x124
;             if ph_flags.is_execute(){
80211920: 97 d0 01 00  	auipc	ra, 0x1d
80211924: e7 80 20 bc  	jalr	-0x43e(ra) <_ZN8xmas_elf7program5Flags10is_execute17h3dea0ef687c0b621E>
80211928: 0d e1        	bnez	a0, 0x8021194a <.Lpcrel_hi24+0xa2>
8021192a: 01 a8        	j	0x8021193a <.Lpcrel_hi24+0x92>
;                 map_perm |= PTE_R;
8021192c: 03 35 04 ed  	ld	a0, -0x130(s0)
80211930: 13 65 25 00  	ori	a0, a0, 0x2
80211934: 23 38 a4 ec  	sd	a0, -0x130(s0)
;             if ph_flags.is_read() {
80211938: d5 b7        	j	0x8021191c <.Lpcrel_hi24+0x74>
8021193a: 13 05 c4 ed  	addi	a0, s0, -0x124
;             if ph_flags.is_write() {
8021193e: 97 d0 01 00  	auipc	ra, 0x1d
80211942: e7 80 e0 bb  	jalr	-0x442(ra) <_ZN8xmas_elf7program5Flags8is_write17hc539e70bf4c89eafE>
80211946: 49 e5        	bnez	a0, 0x802119d0 <.Lpcrel_hi24+0x128>
80211948: 01 a8        	j	0x80211958 <.Lpcrel_hi24+0xb0>
;                 map_perm |= PTE_X
8021194a: 03 35 04 ed  	ld	a0, -0x130(s0)
8021194e: 13 65 85 00  	ori	a0, a0, 0x8
80211952: 23 38 a4 ec  	sd	a0, -0x130(s0)
;             if ph_flags.is_execute(){
80211956: d5 b7        	j	0x8021193a <.Lpcrel_hi24+0x92>
80211958: 03 36 04 d3  	ld	a2, -0x2d0(s0)
8021195c: 03 35 04 d2  	ld	a0, -0x2e0(s0)
80211960: fd 75        	lui	a1, 0xfffff
;             let start_va = start_va & !(PGSZ-1);
80211962: e9 8d        	and	a1, a1, a0
80211964: 23 34 b4 ce  	sd	a1, -0x318(s0)
80211968: 23 30 b4 f6  	sd	a1, -0xa0(s0)
;             map_data(&mut pagetable, start_va,mem_sz,map_perm);
8021196c: 83 36 04 ed  	ld	a3, -0x130(s0)
80211970: 13 05 04 d6  	addi	a0, s0, -0x2a0
80211974: 97 00 00 00  	auipc	ra, 0x0
80211978: e7 80 40 38  	jalr	0x384(ra) <_ZN2os4task8map_data17hd11d0fb9c4477289E>
;             copy_data(&mut pagetable, start_va, &elf.input[ph.offset() as usize..(ph.offset()+ph.file_size()) as usize]);
8021197c: 03 35 04 db  	ld	a0, -0x250(s0)
80211980: 23 38 a4 ce  	sd	a0, -0x310(s0)
80211984: 03 35 84 db  	ld	a0, -0x248(s0)
80211988: 23 3c a4 ce  	sd	a0, -0x308(s0)
8021198c: 13 05 04 e9  	addi	a0, s0, -0x170
80211990: 23 34 a4 d0  	sd	a0, -0x2f8(s0)
80211994: 97 d0 01 00  	auipc	ra, 0x1d
80211998: e7 80 e0 e7  	jalr	-0x182(ra) <_ZN8xmas_elf7program13ProgramHeader6offset17h76f321c8305c1d9cE>
8021199c: aa 85        	mv	a1, a0
8021199e: 03 35 84 d0  	ld	a0, -0x2f8(s0)
802119a2: 23 30 b4 d0  	sd	a1, -0x300(s0)
802119a6: 97 d0 01 00  	auipc	ra, 0x1d
802119aa: e7 80 c0 e6  	jalr	-0x194(ra) <_ZN8xmas_elf7program13ProgramHeader6offset17h76f321c8305c1d9cE>
802119ae: aa 85        	mv	a1, a0
802119b0: 03 35 84 d0  	ld	a0, -0x2f8(s0)
802119b4: 23 38 b4 d0  	sd	a1, -0x2f0(s0)
802119b8: 97 d0 01 00  	auipc	ra, 0x1d
802119bc: e7 80 a0 dc  	jalr	-0x236(ra) <_ZN8xmas_elf7program13ProgramHeader9file_size17hb5be7498b03aa39cE>
802119c0: 83 35 04 d1  	ld	a1, -0x2f0(s0)
802119c4: 2e 95        	add	a0, a0, a1
802119c6: 23 3c a4 d0  	sd	a0, -0x2e8(s0)
802119ca: 63 67 b5 0c  	bltu	a0, a1, 0x80211a98 <.Lpcrel_hi27>
802119ce: 01 a8        	j	0x802119de <.Lpcrel_hi24+0x136>
;                 map_perm |= PTE_W
802119d0: 03 35 04 ed  	ld	a0, -0x130(s0)
802119d4: 13 65 45 00  	ori	a0, a0, 0x4
802119d8: 23 38 a4 ec  	sd	a0, -0x130(s0)
;             if ph_flags.is_write() {
802119dc: b5 bf        	j	0x80211958 <.Lpcrel_hi24+0xb0>
802119de: 03 36 84 cf  	ld	a2, -0x308(s0)
802119e2: 83 36 04 cf  	ld	a3, -0x310(s0)
802119e6: 03 35 84 d1  	ld	a0, -0x2e8(s0)
802119ea: 83 35 04 d0  	ld	a1, -0x300(s0)
;             copy_data(&mut pagetable, start_va, &elf.input[ph.offset() as usize..(ph.offset()+ph.file_size()) as usize]);
802119ee: 23 30 b4 ee  	sd	a1, -0x120(s0)
802119f2: 23 34 a4 ee  	sd	a0, -0x118(s0)
802119f6: 83 35 04 ee  	ld	a1, -0x120(s0)
802119fa: 23 3c b4 cc  	sd	a1, -0x328(s0)
802119fe: 03 35 84 ee  	ld	a0, -0x118(s0)
80211a02: 23 30 a4 ce  	sd	a0, -0x320(s0)
80211a06: 23 34 d4 f6  	sd	a3, -0x98(s0)
80211a0a: 23 38 c4 f6  	sd	a2, -0x90(s0)
80211a0e: 23 3c b4 f6  	sd	a1, -0x88(s0)
80211a12: 23 30 a4 f8  	sd	a0, -0x80(s0)
80211a16: 23 34 b4 f8  	sd	a1, -0x78(s0)
80211a1a: 23 38 a4 f8  	sd	a0, -0x70(s0)
80211a1e: 23 3c d4 f8  	sd	a3, -0x68(s0)
80211a22: 23 30 c4 fa  	sd	a2, -0x60(s0)
;         if self.start > self.end {
80211a26: 63 6a b5 00  	bltu	a0, a1, 0x80211a3a <.Lpcrel_hi24+0x192>
80211a2a: 09 a0        	j	0x80211a2c <.Lpcrel_hi24+0x184>
80211a2c: 03 35 84 cf  	ld	a0, -0x308(s0)
80211a30: 83 35 04 ce  	ld	a1, -0x320(s0)
;         } else if self.end > slice.len() {
80211a34: 63 6f b5 00  	bltu	a0, a1, 0x80211a52 <.Lpcrel_hi25+0x10>
80211a38: 0d a8        	j	0x80211a6a <.Lpcrel_hi26+0x10>
80211a3a: 83 35 04 ce  	ld	a1, -0x320(s0)
80211a3e: 03 35 84 cd  	ld	a0, -0x328(s0)

0000000080211a42 <.Lpcrel_hi25>:
;             slice_index_order_fail(self.start, self.end);
80211a42: 17 46 02 00  	auipc	a2, 0x24
80211a46: 13 06 e6 25  	addi	a2, a2, 0x25e
80211a4a: 97 00 02 00  	auipc	ra, 0x20
80211a4e: e7 80 a0 c9  	jalr	-0x366(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
80211a52: 83 35 84 cf  	ld	a1, -0x308(s0)
80211a56: 03 35 04 ce  	ld	a0, -0x320(s0)

0000000080211a5a <.Lpcrel_hi26>:
;             slice_end_index_len_fail(self.end, slice.len());
80211a5a: 17 46 02 00  	auipc	a2, 0x24
80211a5e: 13 06 66 24  	addi	a2, a2, 0x246
80211a62: 97 00 02 00  	auipc	ra, 0x20
80211a66: e7 80 e0 c3  	jalr	-0x3c2(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
80211a6a: 83 36 84 cf  	ld	a3, -0x308(s0)
80211a6e: 03 36 04 cf  	ld	a2, -0x310(s0)
80211a72: 83 35 04 ce  	ld	a1, -0x320(s0)
80211a76: 03 35 84 cd  	ld	a0, -0x328(s0)
;         unsafe { &*self.get_unchecked(slice) }
80211a7a: 97 d0 01 00  	auipc	ra, 0x1d
80211a7e: e7 80 60 ea  	jalr	-0x15a(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E>
80211a82: 2a 86        	mv	a2, a0
80211a84: ae 86        	mv	a3, a1
80211a86: 83 35 84 ce  	ld	a1, -0x318(s0)
80211a8a: 13 05 04 d6  	addi	a0, s0, -0x2a0
;             copy_data(&mut pagetable, start_va, &elf.input[ph.offset() as usize..(ph.offset()+ph.file_size()) as usize]);
80211a8e: 97 00 00 00  	auipc	ra, 0x0
80211a92: e7 80 40 02  	jalr	0x24(ra) <_ZN2os4task9copy_data17h4cf51862c422fa5bE>
80211a96: 41 b1        	j	0x80211716 <.Lpcrel_hi17+0x48>

0000000080211a98 <.Lpcrel_hi27>:
80211a98: 17 45 02 00  	auipc	a0, 0x24
80211a9c: 13 05 85 1e  	addi	a0, a0, 0x1e8

0000000080211aa0 <.Lpcrel_hi28>:
80211aa0: 97 45 02 00  	auipc	a1, 0x24
80211aa4: 13 86 85 1c  	addi	a2, a1, 0x1c8
80211aa8: f1 45        	li	a1, 0x1c
80211aaa: 97 e0 01 00  	auipc	ra, 0x1e
80211aae: e7 80 e0 76  	jalr	0x76e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080211ab2 <_ZN2os4task9copy_data17h4cf51862c422fa5bE>:
; pub fn copy_data(pagetable:&mut PageTable ,start_va:usize,data:&[u8]){
80211ab2: 0d 71        	addi	sp, sp, -0x160
80211ab4: 86 ee        	sd	ra, 0x158(sp)
80211ab6: a2 ea        	sd	s0, 0x150(sp)
80211ab8: 80 12        	addi	s0, sp, 0x160
80211aba: 23 38 d4 ee  	sd	a3, -0x110(s0)
80211abe: 23 3c c4 ee  	sd	a2, -0x108(s0)
80211ac2: 23 30 a4 f0  	sd	a0, -0x100(s0)
80211ac6: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80211aca: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80211ace: 23 34 c4 f4  	sd	a2, -0xb8(s0)
80211ad2: 23 38 d4 f4  	sd	a3, -0xb0(s0)
80211ad6: 01 45        	li	a0, 0x0
;     let mut start = 0;
80211ad8: 23 34 a4 f0  	sd	a0, -0xf8(s0)
;     let mut current_va = start_va;
80211adc: 23 38 b4 f0  	sd	a1, -0xf0(s0)
;     let len = data.len();
80211ae0: 23 3c d4 f4  	sd	a3, -0xa8(s0)
80211ae4: 09 a0        	j	0x80211ae6 <_ZN2os4task9copy_data17h4cf51862c422fa5bE+0x34>
;         let src = &data[start..len.min(start+PGSZ)];
80211ae6: 83 35 84 f0  	ld	a1, -0xf8(s0)
80211aea: 23 30 b4 ee  	sd	a1, -0x120(s0)
80211aee: 05 65        	lui	a0, 0x1
80211af0: 2e 95        	add	a0, a0, a1
80211af2: 23 34 a4 ee  	sd	a0, -0x118(s0)
80211af6: 63 6d b5 16  	bltu	a0, a1, 0x80211c70 <.Lpcrel_hi34>
80211afa: 09 a0        	j	0x80211afc <_ZN2os4task9copy_data17h4cf51862c422fa5bE+0x4a>
80211afc: 03 35 04 ef  	ld	a0, -0x110(s0)
80211b00: 83 35 84 ee  	ld	a1, -0x118(s0)
;         let src = &data[start..len.min(start+PGSZ)];
80211b04: 97 90 01 00  	auipc	ra, 0x19
80211b08: e7 80 40 72  	jalr	0x724(ra) <_ZN4core3cmp3Ord3min17h76f4b70afda50d90E>
80211b0c: 83 35 04 ee  	ld	a1, -0x120(s0)
80211b10: 83 36 84 ef  	ld	a3, -0x108(s0)
80211b14: 03 36 04 ef  	ld	a2, -0x110(s0)
80211b18: 23 3c b4 f0  	sd	a1, -0xe8(s0)
80211b1c: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80211b20: 83 35 84 f1  	ld	a1, -0xe8(s0)
80211b24: 23 38 b4 ec  	sd	a1, -0x130(s0)
80211b28: 03 35 04 f2  	ld	a0, -0xe0(s0)
80211b2c: 23 3c a4 ec  	sd	a0, -0x128(s0)
80211b30: 23 30 d4 f8  	sd	a3, -0x80(s0)
80211b34: 23 34 c4 f8  	sd	a2, -0x78(s0)
80211b38: 23 38 b4 f8  	sd	a1, -0x70(s0)
80211b3c: 23 3c a4 f8  	sd	a0, -0x68(s0)
80211b40: 23 30 b4 fa  	sd	a1, -0x60(s0)
80211b44: 23 34 a4 fa  	sd	a0, -0x58(s0)
80211b48: 23 38 d4 fa  	sd	a3, -0x50(s0)
80211b4c: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         if self.start > self.end {
80211b50: 63 6a b5 00  	bltu	a0, a1, 0x80211b64 <_ZN2os4task9copy_data17h4cf51862c422fa5bE+0xb2>
80211b54: 09 a0        	j	0x80211b56 <_ZN2os4task9copy_data17h4cf51862c422fa5bE+0xa4>
80211b56: 03 35 04 ef  	ld	a0, -0x110(s0)
80211b5a: 83 35 84 ed  	ld	a1, -0x128(s0)
;         } else if self.end > slice.len() {
80211b5e: 63 6f b5 00  	bltu	a0, a1, 0x80211b7c <.Lpcrel_hi29+0x10>
80211b62: 0d a8        	j	0x80211b94 <.Lpcrel_hi30+0x10>
80211b64: 83 35 84 ed  	ld	a1, -0x128(s0)
80211b68: 03 35 04 ed  	ld	a0, -0x130(s0)

0000000080211b6c <.Lpcrel_hi29>:
;             slice_index_order_fail(self.start, self.end);
80211b6c: 17 46 02 00  	auipc	a2, 0x24
80211b70: 13 06 46 16  	addi	a2, a2, 0x164
80211b74: 97 00 02 00  	auipc	ra, 0x20
80211b78: e7 80 00 b7  	jalr	-0x490(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
80211b7c: 83 35 04 ef  	ld	a1, -0x110(s0)
80211b80: 03 35 84 ed  	ld	a0, -0x128(s0)

0000000080211b84 <.Lpcrel_hi30>:
;             slice_end_index_len_fail(self.end, slice.len());
80211b84: 17 46 02 00  	auipc	a2, 0x24
80211b88: 13 06 c6 14  	addi	a2, a2, 0x14c
80211b8c: 97 00 02 00  	auipc	ra, 0x20
80211b90: e7 80 40 b1  	jalr	-0x4ec(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
80211b94: 83 36 04 ef  	ld	a3, -0x110(s0)
80211b98: 03 36 84 ef  	ld	a2, -0x108(s0)
80211b9c: 83 35 84 ed  	ld	a1, -0x128(s0)
80211ba0: 03 35 04 ed  	ld	a0, -0x130(s0)
;         unsafe { &*self.get_unchecked(slice) }
80211ba4: 97 d0 01 00  	auipc	ra, 0x1d
80211ba8: e7 80 c0 d7  	jalr	-0x284(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E>
80211bac: 2a 86        	mv	a2, a0
80211bae: 03 35 04 f0  	ld	a0, -0x100(s0)
;         let src = &data[start..len.min(start+PGSZ)];
80211bb2: b2 86        	mv	a3, a2
80211bb4: 23 30 d4 ec  	sd	a3, -0x140(s0)
80211bb8: ae 86        	mv	a3, a1
80211bba: 23 34 d4 ec  	sd	a3, -0x138(s0)
80211bbe: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80211bc2: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         let dst = &mut PhyPageNum(pagetable.walk_addr(current_va).unwrap()).get_bytes_array()[..src.len()];
80211bc6: 83 35 04 f1  	ld	a1, -0xf0(s0)
80211bca: 97 b0 ff ff  	auipc	ra, 0xffffb
80211bce: e7 80 80 0d  	jalr	0xd8(ra) <ekernel+0xffcbfca2>
80211bd2: 23 3c a4 fc  	sd	a0, -0x28(s0)
80211bd6: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
80211bda: 03 35 84 fd  	ld	a0, -0x28(s0)
80211bde: 11 e9        	bnez	a0, 0x80211bf2 <.Lpcrel_hi31+0x10>
80211be0: 09 a0        	j	0x80211be2 <.Lpcrel_hi31>

0000000080211be2 <.Lpcrel_hi31>:
;             None => unwrap_failed(),
80211be2: 17 45 02 00  	auipc	a0, 0x24
80211be6: 13 05 65 10  	addi	a0, a0, 0x106
80211bea: 97 f0 01 00  	auipc	ra, 0x1f
80211bee: e7 80 e0 0d  	jalr	0xde(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80211bf2: 03 35 04 fe  	ld	a0, -0x20(s0)
80211bf6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         let dst = &mut PhyPageNum(pagetable.walk_addr(current_va).unwrap()).get_bytes_array()[..src.len()];
80211bfa: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80211bfe: 13 05 84 f2  	addi	a0, s0, -0xd8
80211c02: 97 a0 ff ff  	auipc	ra, 0xffffa
80211c06: e7 80 a0 6d  	jalr	0x6da(ra) <ekernel+0xffcbf2dc>
80211c0a: 2a 86        	mv	a2, a0
80211c0c: 03 35 84 ec  	ld	a0, -0x138(s0)
80211c10: 23 38 c4 ea  	sd	a2, -0x150(s0)
80211c14: 2e 86        	mv	a2, a1
80211c16: 83 35 04 eb  	ld	a1, -0x150(s0)
80211c1a: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80211c1e: 03 35 04 f3  	ld	a0, -0xd0(s0)
80211c22: 23 30 b4 fc  	sd	a1, -0x40(s0)
80211c26: 23 34 c4 fc  	sd	a2, -0x38(s0)
80211c2a: 23 38 a4 fc  	sd	a0, -0x30(s0)

0000000080211c2e <.Lpcrel_hi32>:
;         index.index_mut(self)
80211c2e: 97 46 02 00  	auipc	a3, 0x24
80211c32: 93 86 26 0d  	addi	a3, a3, 0xd2
80211c36: 97 e0 00 00  	auipc	ra, 0xe
80211c3a: e7 80 80 86  	jalr	-0x798(ra) <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17heb9ac2db82c6e38cE>
80211c3e: 03 36 04 ec  	ld	a2, -0x140(s0)
80211c42: 83 36 84 ec  	ld	a3, -0x138(s0)
;         let dst = &mut PhyPageNum(pagetable.walk_addr(current_va).unwrap()).get_bytes_array()[..src.len()];
80211c46: 23 38 a4 f6  	sd	a0, -0x90(s0)
80211c4a: 23 3c b4 f6  	sd	a1, -0x88(s0)

0000000080211c4e <.Lpcrel_hi33>:
;         dst.copy_from_slice(src);
80211c4e: 17 47 02 00  	auipc	a4, 0x24
80211c52: 13 07 a7 0c  	addi	a4, a4, 0xca
80211c56: 97 b0 00 00  	auipc	ra, 0xb
80211c5a: e7 80 c0 5a  	jalr	0x5ac(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h96dd97b40ac35cabE>
;         start += PGSZ;
80211c5e: 83 35 84 f0  	ld	a1, -0xf8(s0)
80211c62: 05 65        	lui	a0, 0x1
80211c64: 2e 95        	add	a0, a0, a1
80211c66: 23 3c a4 ea  	sd	a0, -0x148(s0)
80211c6a: 63 6b b5 02  	bltu	a0, a1, 0x80211ca0 <.Lpcrel_hi36>
80211c6e: 31 a8        	j	0x80211c8a <.Lpcrel_hi35+0x12>

0000000080211c70 <.Lpcrel_hi34>:
;         let src = &data[start..len.min(start+PGSZ)];
80211c70: 17 45 02 00  	auipc	a0, 0x24
80211c74: 13 05 05 01  	addi	a0, a0, 0x10

0000000080211c78 <.Lpcrel_hi35>:
80211c78: 97 45 02 00  	auipc	a1, 0x24
80211c7c: 13 86 05 04  	addi	a2, a1, 0x40
80211c80: f1 45        	li	a1, 0x1c
80211c82: 97 e0 01 00  	auipc	ra, 0x1e
80211c86: e7 80 60 59  	jalr	0x596(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80211c8a: 83 35 04 ef  	ld	a1, -0x110(s0)
80211c8e: 03 35 84 eb  	ld	a0, -0x148(s0)
;         start += PGSZ;
80211c92: 23 34 a4 f0  	sd	a0, -0xf8(s0)
;         if start >= len{
80211c96: 03 35 84 f0  	ld	a0, -0xf8(s0)
80211c9a: 63 79 b5 02  	bgeu	a0, a1, 0x80211ccc <.Lpcrel_hi37+0x24>
80211c9e: 31 a8        	j	0x80211cba <.Lpcrel_hi37+0x12>

0000000080211ca0 <.Lpcrel_hi36>:
;         start += PGSZ;
80211ca0: 17 45 02 00  	auipc	a0, 0x24
80211ca4: 13 05 05 fe  	addi	a0, a0, -0x20

0000000080211ca8 <.Lpcrel_hi37>:
80211ca8: 97 45 02 00  	auipc	a1, 0x24
80211cac: 13 86 85 08  	addi	a2, a1, 0x88
80211cb0: f1 45        	li	a1, 0x1c
80211cb2: 97 e0 01 00  	auipc	ra, 0x1e
80211cb6: e7 80 60 56  	jalr	0x566(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;         current_va += PGSZ;
80211cba: 83 35 04 f1  	ld	a1, -0xf0(s0)
80211cbe: 05 65        	lui	a0, 0x1
80211cc0: 2e 95        	add	a0, a0, a1
80211cc2: 23 34 a4 ea  	sd	a0, -0x158(s0)
80211cc6: 63 6c b5 00  	bltu	a0, a1, 0x80211cde <.Lpcrel_hi38>
80211cca: 29 a0        	j	0x80211cd4 <.Lpcrel_hi37+0x2c>
80211ccc: f6 60        	ld	ra, 0x158(sp)
80211cce: 56 64        	ld	s0, 0x150(sp)
; }
80211cd0: 35 61        	addi	sp, sp, 0x160
80211cd2: 82 80        	ret
80211cd4: 03 35 84 ea  	ld	a0, -0x158(s0)
;         current_va += PGSZ;
80211cd8: 23 38 a4 f0  	sd	a0, -0xf0(s0)
;     loop {
80211cdc: 29 b5        	j	0x80211ae6 <_ZN2os4task9copy_data17h4cf51862c422fa5bE+0x34>

0000000080211cde <.Lpcrel_hi38>:
;         current_va += PGSZ;
80211cde: 17 45 02 00  	auipc	a0, 0x24
80211ce2: 13 05 25 fa  	addi	a0, a0, -0x5e

0000000080211ce6 <.Lpcrel_hi39>:
80211ce6: 97 45 02 00  	auipc	a1, 0x24
80211cea: 13 86 25 06  	addi	a2, a1, 0x62
80211cee: f1 45        	li	a1, 0x1c
80211cf0: 97 e0 01 00  	auipc	ra, 0x1e
80211cf4: e7 80 80 52  	jalr	0x528(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080211cf8 <_ZN2os4task8map_data17hd11d0fb9c4477289E>:
; pub fn map_data(pagetable:&mut PageTable,va:usize,sz:usize,prem:usize){
80211cf8: 71 71        	addi	sp, sp, -0xb0
80211cfa: 06 f5        	sd	ra, 0xa8(sp)
80211cfc: 22 f1        	sd	s0, 0xa0(sp)
80211cfe: 00 19        	addi	s0, sp, 0xb0
80211d00: 23 38 d4 f8  	sd	a3, -0x70(s0)
80211d04: 23 3c a4 f8  	sd	a0, -0x68(s0)
80211d08: 23 38 a4 fa  	sd	a0, -0x50(s0)
80211d0c: 23 3c b4 fa  	sd	a1, -0x48(s0)
80211d10: 23 30 c4 fc  	sd	a2, -0x40(s0)
80211d14: 23 34 d4 fc  	sd	a3, -0x38(s0)
;     let mut va = va;
80211d18: 23 34 b4 fa  	sd	a1, -0x58(s0)
;     let end = (((va+sz) + PGSZ -1 ) / PGSZ) * PGSZ;
80211d1c: 83 35 84 fa  	ld	a1, -0x58(s0)
80211d20: 33 85 c5 00  	add	a0, a1, a2
80211d24: 23 30 a4 fa  	sd	a0, -0x60(s0)
80211d28: 63 6c b5 00  	bltu	a0, a1, 0x80211d40 <.Lpcrel_hi40>
80211d2c: 09 a0        	j	0x80211d2e <_ZN2os4task8map_data17hd11d0fb9c4477289E+0x36>
80211d2e: 83 35 04 fa  	ld	a1, -0x60(s0)
80211d32: 05 65        	lui	a0, 0x1
;     let end = (((va+sz) + PGSZ -1 ) / PGSZ) * PGSZ;
80211d34: 2e 95        	add	a0, a0, a1
80211d36: 23 34 a4 f8  	sd	a0, -0x78(s0)
80211d3a: 63 68 b5 02  	bltu	a0, a1, 0x80211d6a <.Lpcrel_hi42>
80211d3e: 31 a8        	j	0x80211d5a <.Lpcrel_hi41+0x12>

0000000080211d40 <.Lpcrel_hi40>:
80211d40: 17 45 02 00  	auipc	a0, 0x24
80211d44: 13 05 05 f4  	addi	a0, a0, -0xc0

0000000080211d48 <.Lpcrel_hi41>:
80211d48: 97 45 02 00  	auipc	a1, 0x24
80211d4c: 13 86 85 01  	addi	a2, a1, 0x18
80211d50: f1 45        	li	a1, 0x1c
80211d52: 97 e0 01 00  	auipc	ra, 0x1e
80211d56: e7 80 60 4c  	jalr	0x4c6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80211d5a: 03 35 84 f8  	ld	a0, -0x78(s0)
;     let end = (((va+sz) + PGSZ -1 ) / PGSZ) * PGSZ;
80211d5e: 93 05 f5 ff  	addi	a1, a0, -0x1
80211d62: 23 30 b4 f8  	sd	a1, -0x80(s0)
80211d66: 05 c9        	beqz	a0, 0x80211d96 <.Lpcrel_hi44>
80211d68: 31 a8        	j	0x80211d84 <.Lpcrel_hi43+0x12>

0000000080211d6a <.Lpcrel_hi42>:
80211d6a: 17 45 02 00  	auipc	a0, 0x24
80211d6e: 13 05 65 f1  	addi	a0, a0, -0xea

0000000080211d72 <.Lpcrel_hi43>:
80211d72: 97 45 02 00  	auipc	a1, 0x24
80211d76: 13 86 e5 fe  	addi	a2, a1, -0x12
80211d7a: f1 45        	li	a1, 0x1c
80211d7c: 97 e0 01 00  	auipc	ra, 0x1e
80211d80: e7 80 c0 49  	jalr	0x49c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80211d84: 03 35 04 f8  	ld	a0, -0x80(s0)
80211d88: fd 75        	lui	a1, 0xfffff
;     let end = (((va+sz) + PGSZ -1 ) / PGSZ) * PGSZ;
80211d8a: 6d 8d        	and	a0, a0, a1
80211d8c: 23 3c a4 f6  	sd	a0, -0x88(s0)
80211d90: 01 45        	li	a0, 0x0
80211d92: 0d e5        	bnez	a0, 0x80211dbc <.Lpcrel_hi46>
80211d94: 39 a8        	j	0x80211db2 <.Lpcrel_hi45+0x14>

0000000080211d96 <.Lpcrel_hi44>:
80211d96: 17 45 02 00  	auipc	a0, 0x24
80211d9a: 13 05 a5 ff  	addi	a0, a0, -0x6

0000000080211d9e <.Lpcrel_hi45>:
80211d9e: 97 45 02 00  	auipc	a1, 0x24
80211da2: 13 86 a5 fd  	addi	a2, a1, -0x26
80211da6: 93 05 10 02  	li	a1, 0x21
80211daa: 97 e0 01 00  	auipc	ra, 0x1e
80211dae: e7 80 e0 46  	jalr	0x46e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80211db2: 03 35 84 f7  	ld	a0, -0x88(s0)
;     let end = (((va+sz) + PGSZ -1 ) / PGSZ) * PGSZ;
80211db6: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     loop {
80211dba: 39 a8        	j	0x80211dd8 <.Lpcrel_hi47+0x14>

0000000080211dbc <.Lpcrel_hi46>:
;     let end = (((va+sz) + PGSZ -1 ) / PGSZ) * PGSZ;
80211dbc: 17 45 02 00  	auipc	a0, 0x24
80211dc0: 13 05 45 01  	addi	a0, a0, 0x14

0000000080211dc4 <.Lpcrel_hi47>:
80211dc4: 97 45 02 00  	auipc	a1, 0x24
80211dc8: 13 86 45 ff  	addi	a2, a1, -0xc
80211dcc: 93 05 10 02  	li	a1, 0x21
80211dd0: 97 e0 01 00  	auipc	ra, 0x1e
80211dd4: e7 80 80 44  	jalr	0x448(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80211dd8: 83 35 84 f7  	ld	a1, -0x88(s0)
;         if va >= end{
80211ddc: 03 35 84 fa  	ld	a0, -0x58(s0)
80211de0: 63 70 b5 0a  	bgeu	a0, a1, 0x80211e80 <.Lpcrel_hi50+0x40>
80211de4: 09 a0        	j	0x80211de6 <.Lpcrel_hi48>

0000000080211de6 <.Lpcrel_hi48>:
;         let gurd = FRAME_ALLOC.page_alloc();
80211de6: 17 c5 02 00  	auipc	a0, 0x2c
80211dea: 13 05 a5 21  	addi	a0, a0, 0x21a
80211dee: 97 20 ff ff  	auipc	ra, 0xffff2
80211df2: e7 80 80 0c  	jalr	0xc8(ra) <ekernel+0xffcb6eb6>
80211df6: aa 85        	mv	a1, a0
80211df8: 03 35 84 f9  	ld	a0, -0x68(s0)
80211dfc: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80211e00: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let pa = gurd.pages.0;
80211e04: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         pagetable.save_page(gurd);
80211e08: 97 a0 ff ff  	auipc	ra, 0xffffa
80211e0c: e7 80 c0 67  	jalr	0x67c(ra) <ekernel+0xffcbf484>
80211e10: 03 35 84 f9  	ld	a0, -0x68(s0)
;         pagetable.data.push(va);
80211e14: 61 05        	addi	a0, a0, 0x18
80211e16: 83 35 84 fa  	ld	a1, -0x58(s0)
80211e1a: 97 30 00 00  	auipc	ra, 0x3
80211e1e: e7 80 80 e9  	jalr	-0x168(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE>
;             va.into(), 
80211e22: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080211e26 <.Lpcrel_hi49>:
80211e26: 97 45 02 00  	auipc	a1, 0x24
80211e2a: 93 85 25 fd  	addi	a1, a1, -0x2e
80211e2e: 97 a0 ff ff  	auipc	ra, 0xffffa
80211e32: e7 80 80 0c  	jalr	0xc8(ra) <ekernel+0xffcbeef6>
80211e36: aa 85        	mv	a1, a0
80211e38: 03 35 84 f5  	ld	a0, -0xa8(s0)
80211e3c: 23 30 b4 f6  	sd	a1, -0xa0(s0)

0000000080211e40 <.Lpcrel_hi50>:
;             pa.into(), 
80211e40: 97 45 02 00  	auipc	a1, 0x24
80211e44: 93 85 05 fd  	addi	a1, a1, -0x30
80211e48: 97 a0 ff ff  	auipc	ra, 0xffffa
80211e4c: e7 80 20 09  	jalr	0x92(ra) <ekernel+0xffcbeeda>
80211e50: 83 35 04 f6  	ld	a1, -0xa0(s0)
80211e54: 03 37 04 f9  	ld	a4, -0x70(s0)
80211e58: 2a 86        	mv	a2, a0
80211e5a: 03 35 84 f9  	ld	a0, -0x68(s0)
80211e5e: 85 66        	lui	a3, 0x1
80211e60: 23 34 d4 f6  	sd	a3, -0x98(s0)
;         pagetable.mappages(
80211e64: 97 a0 ff ff  	auipc	ra, 0xffffa
80211e68: e7 80 00 64  	jalr	0x640(ra) <ekernel+0xffcbf4a4>
80211e6c: 03 35 84 f6  	ld	a0, -0x98(s0)
;         va += PGSZ;
80211e70: 83 35 84 fa  	ld	a1, -0x58(s0)
80211e74: 2e 95        	add	a0, a0, a1
80211e76: 23 38 a4 f6  	sd	a0, -0x90(s0)
80211e7a: 63 64 b5 02  	bltu	a0, a1, 0x80211ea2 <.Lpcrel_hi51>
80211e7e: 29 a8        	j	0x80211e98 <.Lpcrel_hi50+0x58>
80211e80: 03 35 84 f9  	ld	a0, -0x68(s0)
;     let size = pagetable.pagetable.len();
80211e84: 97 30 00 00  	auipc	ra, 0x3
80211e88: e7 80 c0 aa  	jalr	-0x554(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h219b7ac031b797a2E>
80211e8c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80211e90: aa 70        	ld	ra, 0xa8(sp)
80211e92: 0a 74        	ld	s0, 0xa0(sp)
; }
80211e94: 4d 61        	addi	sp, sp, 0xb0
80211e96: 82 80        	ret
80211e98: 03 35 04 f7  	ld	a0, -0x90(s0)
;         va += PGSZ;
80211e9c: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     loop {
80211ea0: 25 bf        	j	0x80211dd8 <.Lpcrel_hi47+0x14>

0000000080211ea2 <.Lpcrel_hi51>:
;         va += PGSZ;
80211ea2: 17 45 02 00  	auipc	a0, 0x24
80211ea6: 13 05 e5 dd  	addi	a0, a0, -0x222

0000000080211eaa <.Lpcrel_hi52>:
80211eaa: 97 45 02 00  	auipc	a1, 0x24
80211eae: 13 86 e5 f7  	addi	a2, a1, -0x82
80211eb2: f1 45        	li	a1, 0x1c
80211eb4: 97 e0 01 00  	auipc	ra, 0x1e
80211eb8: e7 80 40 36  	jalr	0x364(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080211ebc <_ZN2os4task14map_user_stack17h14381de0081c05a6E>:
; pub fn map_user_stack(pagetable:&mut PageTable,va:usize,top:usize){
80211ebc: 59 71        	addi	sp, sp, -0x70
80211ebe: 86 f4        	sd	ra, 0x68(sp)
80211ec0: a2 f0        	sd	s0, 0x60(sp)
80211ec2: 80 18        	addi	s0, sp, 0x70
80211ec4: 23 38 c4 fa  	sd	a2, -0x50(s0)
80211ec8: 23 3c a4 fa  	sd	a0, -0x48(s0)
80211ecc: 23 34 a4 fc  	sd	a0, -0x38(s0)
80211ed0: 23 38 b4 fc  	sd	a1, -0x30(s0)
80211ed4: 23 3c c4 fc  	sd	a2, -0x28(s0)
;     let mut va = va;
80211ed8: 23 30 b4 fc  	sd	a1, -0x40(s0)
;     loop {
80211edc: 09 a0        	j	0x80211ede <_ZN2os4task14map_user_stack17h14381de0081c05a6E+0x22>
80211ede: 83 35 04 fb  	ld	a1, -0x50(s0)
;         if va >= top {
80211ee2: 03 35 04 fc  	ld	a0, -0x40(s0)
80211ee6: 63 76 b5 08  	bgeu	a0, a1, 0x80211f72 <.Lpcrel_hi55+0x3e>
80211eea: 09 a0        	j	0x80211eec <.Lpcrel_hi53>

0000000080211eec <.Lpcrel_hi53>:
;         let gurd = FRAME_ALLOC.page_alloc();
80211eec: 17 c5 02 00  	auipc	a0, 0x2c
80211ef0: 13 05 45 11  	addi	a0, a0, 0x114
80211ef4: 97 20 ff ff  	auipc	ra, 0xffff2
80211ef8: e7 80 20 fc  	jalr	-0x3e(ra) <ekernel+0xffcb6eb6>
80211efc: aa 85        	mv	a1, a0
80211efe: 03 35 84 fb  	ld	a0, -0x48(s0)
80211f02: 23 38 b4 f8  	sd	a1, -0x70(s0)
80211f06: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         let pa = gurd.pages.0;
80211f0a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         pagetable.save_page(gurd);
80211f0e: 97 a0 ff ff  	auipc	ra, 0xffffa
80211f12: e7 80 60 57  	jalr	0x576(ra) <ekernel+0xffcbf484>
;             va.into(), 
80211f16: 03 35 04 fc  	ld	a0, -0x40(s0)

0000000080211f1a <.Lpcrel_hi54>:
80211f1a: 97 45 02 00  	auipc	a1, 0x24
80211f1e: 93 85 65 f2  	addi	a1, a1, -0xda
80211f22: 97 a0 ff ff  	auipc	ra, 0xffffa
80211f26: e7 80 40 fd  	jalr	-0x2c(ra) <ekernel+0xffcbeef6>
80211f2a: aa 85        	mv	a1, a0
80211f2c: 03 35 04 f9  	ld	a0, -0x70(s0)
80211f30: 23 3c b4 f8  	sd	a1, -0x68(s0)

0000000080211f34 <.Lpcrel_hi55>:
;             pa.into(), 
80211f34: 97 45 02 00  	auipc	a1, 0x24
80211f38: 93 85 45 f2  	addi	a1, a1, -0xdc
80211f3c: 97 a0 ff ff  	auipc	ra, 0xffffa
80211f40: e7 80 e0 f9  	jalr	-0x62(ra) <ekernel+0xffcbeeda>
80211f44: 83 35 84 f9  	ld	a1, -0x68(s0)
80211f48: 2a 86        	mv	a2, a0
80211f4a: 03 35 84 fb  	ld	a0, -0x48(s0)
80211f4e: 85 66        	lui	a3, 0x1
80211f50: 23 30 d4 fa  	sd	a3, -0x60(s0)
80211f54: 59 47        	li	a4, 0x16
;         pagetable.mappages(
80211f56: 97 a0 ff ff  	auipc	ra, 0xffffa
80211f5a: e7 80 e0 54  	jalr	0x54e(ra) <ekernel+0xffcbf4a4>
80211f5e: 03 35 04 fa  	ld	a0, -0x60(s0)
;         va += PGSZ;
80211f62: 83 35 04 fc  	ld	a1, -0x40(s0)
80211f66: 2e 95        	add	a0, a0, a1
80211f68: 23 34 a4 fa  	sd	a0, -0x58(s0)
80211f6c: 63 6c b5 00  	bltu	a0, a1, 0x80211f84 <.Lpcrel_hi56>
80211f70: 29 a0        	j	0x80211f7a <.Lpcrel_hi55+0x46>
80211f72: a6 70        	ld	ra, 0x68(sp)
80211f74: 06 74        	ld	s0, 0x60(sp)
; }
80211f76: 65 61        	addi	sp, sp, 0x70
80211f78: 82 80        	ret
80211f7a: 03 35 84 fa  	ld	a0, -0x58(s0)
;         va += PGSZ;
80211f7e: 23 30 a4 fc  	sd	a0, -0x40(s0)
;     loop {
80211f82: b1 bf        	j	0x80211ede <_ZN2os4task14map_user_stack17h14381de0081c05a6E+0x22>

0000000080211f84 <.Lpcrel_hi56>:
;         va += PGSZ;
80211f84: 17 45 02 00  	auipc	a0, 0x24
80211f88: 13 05 c5 cf  	addi	a0, a0, -0x304

0000000080211f8c <.Lpcrel_hi57>:
80211f8c: 97 45 02 00  	auipc	a1, 0x24
80211f90: 13 86 45 ee  	addi	a2, a1, -0x11c
80211f94: f1 45        	li	a1, 0x1c
80211f96: 97 e0 01 00  	auipc	ra, 0x1e
80211f9a: e7 80 20 28  	jalr	0x282(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080211f9e <_ZN2os4task19map_user_stack_fork17hf98f1e081e054c88E>:
; pub fn map_user_stack_fork(pagetable_old:&mut PageTable,pagetable_new:&mut PageTable,va:usize,top:usize){
80211f9e: 31 71        	addi	sp, sp, -0xc0
80211fa0: 06 fd        	sd	ra, 0xb8(sp)
80211fa2: 22 f9        	sd	s0, 0xb0(sp)
80211fa4: 80 01        	addi	s0, sp, 0xc0
80211fa6: 23 3c d4 f6  	sd	a3, -0x88(s0)
80211faa: 23 30 b4 f8  	sd	a1, -0x80(s0)
80211fae: 23 34 a4 f8  	sd	a0, -0x78(s0)
80211fb2: 23 34 a4 fa  	sd	a0, -0x58(s0)
80211fb6: 23 38 b4 fa  	sd	a1, -0x50(s0)
80211fba: 23 3c c4 fa  	sd	a2, -0x48(s0)
80211fbe: 23 30 d4 fc  	sd	a3, -0x40(s0)
;     let mut va = va;
80211fc2: 23 38 c4 f8  	sd	a2, -0x70(s0)
;     loop {
80211fc6: 09 a0        	j	0x80211fc8 <_ZN2os4task19map_user_stack_fork17hf98f1e081e054c88E+0x2a>
80211fc8: 83 35 84 f7  	ld	a1, -0x88(s0)
;         if va >= top {
80211fcc: 03 35 04 f9  	ld	a0, -0x70(s0)
80211fd0: 63 79 b5 10  	bgeu	a0, a1, 0x802120e2 <.Lpcrel_hi62+0x3e>
80211fd4: 09 a0        	j	0x80211fd6 <.Lpcrel_hi58>

0000000080211fd6 <.Lpcrel_hi58>:
;         let gurd = FRAME_ALLOC.page_alloc();
80211fd6: 17 c5 02 00  	auipc	a0, 0x2c
80211fda: 13 05 a5 02  	addi	a0, a0, 0x2a
80211fde: 97 20 ff ff  	auipc	ra, 0xffff2
80211fe2: e7 80 80 ed  	jalr	-0x128(ra) <ekernel+0xffcb6eb6>
80211fe6: aa 85        	mv	a1, a0
80211fe8: 03 35 84 f8  	ld	a0, -0x78(s0)
80211fec: 2e 86        	mv	a2, a1
80211fee: 23 38 c4 f6  	sd	a2, -0x90(s0)
80211ff2: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         let pa = gurd.pages.0;
80211ff6: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         let old_src = PhyPageNum(pagetable_old.walk_addr(va).unwrap());
80211ffa: 83 35 04 f9  	ld	a1, -0x70(s0)
80211ffe: 97 b0 ff ff  	auipc	ra, 0xffffb
80212002: e7 80 40 ca  	jalr	-0x35c(ra) <ekernel+0xffcbfca2>
80212006: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021200a: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
8021200e: 03 35 84 fd  	ld	a0, -0x28(s0)
80212012: 11 e9        	bnez	a0, 0x80212026 <.Lpcrel_hi59+0x10>
80212014: 09 a0        	j	0x80212016 <.Lpcrel_hi59>

0000000080212016 <.Lpcrel_hi59>:
;             None => unwrap_failed(),
80212016: 17 45 02 00  	auipc	a0, 0x24
8021201a: 13 05 25 e7  	addi	a0, a0, -0x18e
8021201e: 97 f0 01 00  	auipc	ra, 0x1f
80212022: e7 80 a0 ca  	jalr	-0x356(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
80212026: 03 35 04 f7  	ld	a0, -0x90(s0)
;             Some(val) => val,
8021202a: 83 35 04 fe  	ld	a1, -0x20(s0)
8021202e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         let old_src = PhyPageNum(pagetable_old.walk_addr(va).unwrap());
80212032: 23 3c b4 f8  	sd	a1, -0x68(s0)
;         let new_dst = PhyPageNum(pa);
80212036: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021203a: 13 05 04 fa  	addi	a0, s0, -0x60
;         new_dst.get_bytes_array()
8021203e: 97 a0 ff ff  	auipc	ra, 0xffffa
80212042: e7 80 e0 29  	jalr	0x29e(ra) <ekernel+0xffcbf2dc>
80212046: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8021204a: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8021204e: 13 05 84 f9  	addi	a0, s0, -0x68
;             .copy_from_slice(old_src.get_bytes_array());
80212052: 97 a0 ff ff  	auipc	ra, 0xffffa
80212056: e7 80 a0 28  	jalr	0x28a(ra) <ekernel+0xffcbf2dc>
8021205a: 2a 86        	mv	a2, a0
8021205c: 03 35 84 f4  	ld	a0, -0xb8(s0)
80212060: ae 86        	mv	a3, a1
80212062: 83 35 04 f5  	ld	a1, -0xb0(s0)

0000000080212066 <.Lpcrel_hi60>:
;         new_dst.get_bytes_array()
80212066: 17 47 02 00  	auipc	a4, 0x24
8021206a: 13 07 a7 e3  	addi	a4, a4, -0x1c6
8021206e: 97 b0 00 00  	auipc	ra, 0xb
80212072: e7 80 40 19  	jalr	0x194(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h96dd97b40ac35cabE>
80212076: 83 35 04 f7  	ld	a1, -0x90(s0)
8021207a: 03 35 04 f8  	ld	a0, -0x80(s0)
;         pagetable_new.save_page(gurd);
8021207e: 97 a0 ff ff  	auipc	ra, 0xffffa
80212082: e7 80 60 40  	jalr	0x406(ra) <ekernel+0xffcbf484>
;             va.into(), 
80212086: 03 35 04 f9  	ld	a0, -0x70(s0)

000000008021208a <.Lpcrel_hi61>:
8021208a: 97 45 02 00  	auipc	a1, 0x24
8021208e: 93 85 e5 e2  	addi	a1, a1, -0x1d2
80212092: 97 a0 ff ff  	auipc	ra, 0xffffa
80212096: e7 80 40 e6  	jalr	-0x19c(ra) <ekernel+0xffcbeef6>
8021209a: aa 85        	mv	a1, a0
8021209c: 03 35 04 f7  	ld	a0, -0x90(s0)
802120a0: 23 3c b4 f4  	sd	a1, -0xa8(s0)

00000000802120a4 <.Lpcrel_hi62>:
;             pa.into(), 
802120a4: 97 45 02 00  	auipc	a1, 0x24
802120a8: 93 85 c5 e2  	addi	a1, a1, -0x1d4
802120ac: 97 a0 ff ff  	auipc	ra, 0xffffa
802120b0: e7 80 e0 e2  	jalr	-0x1d2(ra) <ekernel+0xffcbeeda>
802120b4: 83 35 84 f5  	ld	a1, -0xa8(s0)
802120b8: 2a 86        	mv	a2, a0
802120ba: 03 35 04 f8  	ld	a0, -0x80(s0)
802120be: 85 66        	lui	a3, 0x1
802120c0: 23 30 d4 f6  	sd	a3, -0xa0(s0)
802120c4: 59 47        	li	a4, 0x16
;         pagetable_new.mappages(
802120c6: 97 a0 ff ff  	auipc	ra, 0xffffa
802120ca: e7 80 e0 3d  	jalr	0x3de(ra) <ekernel+0xffcbf4a4>
802120ce: 03 35 04 f6  	ld	a0, -0xa0(s0)
;         va += PGSZ;
802120d2: 83 35 04 f9  	ld	a1, -0x70(s0)
802120d6: 2e 95        	add	a0, a0, a1
802120d8: 23 34 a4 f6  	sd	a0, -0x98(s0)
802120dc: 63 6c b5 00  	bltu	a0, a1, 0x802120f4 <.Lpcrel_hi63>
802120e0: 29 a0        	j	0x802120ea <.Lpcrel_hi62+0x46>
802120e2: ea 70        	ld	ra, 0xb8(sp)
802120e4: 4a 74        	ld	s0, 0xb0(sp)
; }
802120e6: 29 61        	addi	sp, sp, 0xc0
802120e8: 82 80        	ret
802120ea: 03 35 84 f6  	ld	a0, -0x98(s0)
;         va += PGSZ;
802120ee: 23 38 a4 f8  	sd	a0, -0x70(s0)
;     loop {
802120f2: d9 bd        	j	0x80211fc8 <_ZN2os4task19map_user_stack_fork17hf98f1e081e054c88E+0x2a>

00000000802120f4 <.Lpcrel_hi63>:
;         va += PGSZ;
802120f4: 17 45 02 00  	auipc	a0, 0x24
802120f8: 13 05 c5 b8  	addi	a0, a0, -0x474

00000000802120fc <.Lpcrel_hi64>:
802120fc: 97 45 02 00  	auipc	a1, 0x24
80212100: 13 86 c5 de  	addi	a2, a1, -0x214
80212104: f1 45        	li	a1, 0x1c
80212106: 97 e0 01 00  	auipc	ra, 0x1e
8021210a: e7 80 20 11  	jalr	0x112(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021210e <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E>:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021210e: 19 71        	addi	sp, sp, -0x80
80212110: 86 fc        	sd	ra, 0x78(sp)
80212112: a2 f8        	sd	s0, 0x70(sp)
80212114: 00 01        	addi	s0, sp, 0x80
80212116: 23 34 b4 f8  	sd	a1, -0x78(s0)
8021211a: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021211e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80212122: 23 3c b4 fa  	sd	a1, -0x48(s0)
80212126: 03 65 05 00  	lwu	a0, 0x0(a0)
8021212a: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021212e: 83 e5 05 00  	lwu	a1, 0x0(a1)
80212132: 23 34 b4 fc  	sd	a1, -0x38(s0)
80212136: 63 07 b5 00  	beq	a0, a1, 0x80212144 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x36>
8021213a: 09 a0        	j	0x8021213c <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x2e>
8021213c: 01 45        	li	a0, 0x0
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021213e: a3 0f a4 f8  	sb	a0, -0x61(s0)
80212142: 0d a8        	j	0x80212174 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x66>
80212144: 03 35 84 f8  	ld	a0, -0x78(s0)
80212148: 83 35 04 f9  	ld	a1, -0x70(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021214c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80212150: 23 34 a4 fa  	sd	a0, -0x58(s0)
80212154: 03 35 04 fa  	ld	a0, -0x60(s0)
80212158: 03 65 05 00  	lwu	a0, 0x0(a0)
8021215c: 23 30 a4 f8  	sd	a0, -0x80(s0)
80212160: a5 45        	li	a1, 0x9
80212162: 63 03 b5 02  	beq	a0, a1, 0x80212188 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x7a>
80212166: 09 a0        	j	0x80212168 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x5a>
80212168: 03 35 04 f8  	ld	a0, -0x80(s0)
8021216c: a9 45        	li	a1, 0xa
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021216e: 63 04 b5 02  	beq	a0, a1, 0x80212196 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x88>
80212172: 39 a0        	j	0x80212180 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x72>
80212174: 03 45 f4 f9  	lbu	a0, -0x61(s0)
80212178: e6 70        	ld	ra, 0x78(sp)
8021217a: 46 74        	ld	s0, 0x70(sp)
8021217c: 09 61        	addi	sp, sp, 0x80
8021217e: 82 80        	ret
80212180: 05 45        	li	a0, 0x1
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
80212182: a3 0f a4 f8  	sb	a0, -0x61(s0)
80212186: fd b7        	j	0x80212174 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x66>
80212188: 03 35 84 fa  	ld	a0, -0x58(s0)
8021218c: 08 41        	lw	a0, 0x0(a0)
8021218e: a5 45        	li	a1, 0x9
80212190: 63 0a b5 00  	beq	a0, a1, 0x802121a4 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x96>
80212194: f5 b7        	j	0x80212180 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x72>
80212196: 03 35 84 fa  	ld	a0, -0x58(s0)
8021219a: 08 41        	lw	a0, 0x0(a0)
8021219c: a9 45        	li	a1, 0xa
8021219e: 63 07 b5 02  	beq	a0, a1, 0x802121cc <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0xbe>
802121a2: f9 bf        	j	0x80212180 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x72>
;     OsSpecific(u32),
802121a4: 03 35 04 fa  	ld	a0, -0x60(s0)
802121a8: 93 05 45 00  	addi	a1, a0, 0x4
802121ac: 23 38 b4 fc  	sd	a1, -0x30(s0)
802121b0: 83 35 84 fa  	ld	a1, -0x58(s0)
802121b4: 13 86 45 00  	addi	a2, a1, 0x4
802121b8: 23 3c c4 fc  	sd	a2, -0x28(s0)
802121bc: 48 41        	lw	a0, 0x4(a0)
802121be: cc 41        	lw	a1, 0x4(a1)
802121c0: 2d 8d        	xor	a0, a0, a1
802121c2: 13 35 15 00  	seqz	a0, a0
802121c6: a3 0f a4 f8  	sb	a0, -0x61(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
802121ca: 6d b7        	j	0x80212174 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x66>
;     ProcessorSpecific(u32),
802121cc: 03 35 04 fa  	ld	a0, -0x60(s0)
802121d0: 93 05 45 00  	addi	a1, a0, 0x4
802121d4: 23 30 b4 fe  	sd	a1, -0x20(s0)
802121d8: 83 35 84 fa  	ld	a1, -0x58(s0)
802121dc: 13 86 45 00  	addi	a2, a1, 0x4
802121e0: 23 34 c4 fe  	sd	a2, -0x18(s0)
802121e4: 48 41        	lw	a0, 0x4(a0)
802121e6: cc 41        	lw	a1, 0x4(a1)
802121e8: 2d 8d        	xor	a0, a0, a1
802121ea: 13 35 15 00  	seqz	a0, a0
802121ee: a3 0f a4 f8  	sb	a0, -0x61(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
802121f2: 49 b7        	j	0x80212174 <_ZN64_$LT$xmas_elf..program..Type$u20$as$u20$core..cmp..PartialEq$GT$2eq17hbaa7c76d9b643f44E+0x66>

00000000802121f4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17he02cf9b043a20bcaE>:
;             const fn precondition_check($($name:$ty),*) {
802121f4: 01 11        	addi	sp, sp, -0x20
802121f6: 06 ec        	sd	ra, 0x18(sp)
802121f8: 22 e8        	sd	s0, 0x10(sp)
802121fa: 00 10        	addi	s0, sp, 0x20
802121fc: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212200: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => runtime_ptr_ge(this, origin)
80212204: 63 7d b5 00  	bgeu	a0, a1, 0x8021221e <.Lpcrel_hi0+0x14>
80212208: 09 a0        	j	0x8021220a <.Lpcrel_hi0>

000000008021220a <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
8021220a: 17 45 02 00  	auipc	a0, 0x24
8021220e: 13 05 65 cf  	addi	a0, a0, -0x30a
80212212: 93 05 70 04  	li	a1, 0x47
80212216: 97 e0 01 00  	auipc	ra, 0x1e
8021221a: e7 80 a0 02  	jalr	0x2a(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8021221e: e2 60        	ld	ra, 0x18(sp)
80212220: 42 64        	ld	s0, 0x10(sp)
;             }
80212222: 05 61        	addi	sp, sp, 0x20
80212224: 82 80        	ret

0000000080212226 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h62189f2a7ebe8634E>:
;     pub fn leak<'a>(b: Self) -> &'a mut T
80212226: 59 71        	addi	sp, sp, -0x70
80212228: 86 f4        	sd	ra, 0x68(sp)
8021222a: a2 f0        	sd	s0, 0x60(sp)
8021222c: 80 18        	addi	s0, sp, 0x70
8021222e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80212232: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         ManuallyDrop { value }
80212236: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021223a: 23 34 b4 fa  	sd	a1, -0x58(s0)
8021223e: 13 06 04 fa  	addi	a2, s0, -0x60
;         let ptr = addr_of_mut!(**b);
80212242: 23 34 c4 fc  	sd	a2, -0x38(s0)
80212246: 83 35 04 fa  	ld	a1, -0x60(s0)
8021224a: 03 35 84 fa  	ld	a0, -0x58(s0)
8021224e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80212252: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
80212256: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021225a: 13 06 04 fb  	addi	a2, s0, -0x50
8021225e: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         (ptr, alloc)
80212262: 23 38 b4 f8  	sd	a1, -0x70(s0)
80212266: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         Self::into_raw_with_allocator(b).0
8021226a: 03 35 04 f9  	ld	a0, -0x70(s0)
8021226e: 83 35 84 f9  	ld	a1, -0x68(s0)
80212272: a6 70        	ld	ra, 0x68(sp)
80212274: 06 74        	ld	s0, 0x60(sp)
;     }
80212276: 65 61        	addi	sp, sp, 0x70
80212278: 82 80        	ret

000000008021227a <_ZN5alloc5boxed70Box$LT$$u5b$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$u5d$$C$A$GT$11assume_init17h529b87f92d0aac7fE>:
;     pub unsafe fn assume_init(self) -> Box<[T], A> {
8021227a: 71 71        	addi	sp, sp, -0xb0
8021227c: 06 f5        	sd	ra, 0xa8(sp)
8021227e: 22 f1        	sd	s0, 0xa0(sp)
80212280: 00 19        	addi	s0, sp, 0xb0
80212282: 23 30 a4 fa  	sd	a0, -0x60(s0)
80212286: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         ManuallyDrop { value }
8021228a: 23 38 a4 f6  	sd	a0, -0x90(s0)
8021228e: 23 3c b4 f6  	sd	a1, -0x88(s0)
80212292: 13 06 04 f7  	addi	a2, s0, -0x90
;         let ptr = addr_of_mut!(**b);
80212296: 23 3c c4 fa  	sd	a2, -0x48(s0)
8021229a: 83 35 04 f7  	ld	a1, -0x90(s0)
8021229e: 23 38 b4 f4  	sd	a1, -0xb0(s0)
802122a2: 03 35 84 f7  	ld	a0, -0x88(s0)
802122a6: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802122aa: 23 30 b4 fc  	sd	a1, -0x40(s0)
802122ae: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
802122b2: 23 38 c4 fc  	sd	a2, -0x30(s0)
802122b6: 13 06 04 f8  	addi	a2, s0, -0x80
802122ba: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         unsafe { Box::from_raw_in(raw as *mut [T], alloc) }
802122be: 23 30 b4 fe  	sd	a1, -0x20(s0)
802122c2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
802122c6: 09 a0        	j	0x802122c8 <_ZN5alloc5boxed70Box$LT$$u5b$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$u5d$$C$A$GT$11assume_init17h529b87f92d0aac7fE+0x4e>
802122c8: 03 35 04 f5  	ld	a0, -0xb0(s0)
;             assert_unsafe_precondition!(
802122cc: 97 e0 fe ff  	auipc	ra, 0xfffee
802122d0: e7 80 80 71  	jalr	0x718(ra) <ekernel+0xffcb39e4>
802122d4: 09 a0        	j	0x802122d6 <_ZN5alloc5boxed70Box$LT$$u5b$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$u5d$$C$A$GT$11assume_init17h529b87f92d0aac7fE+0x5c>
802122d6: 03 35 84 f5  	ld	a0, -0xa8(s0)
802122da: 83 35 04 f5  	ld	a1, -0xb0(s0)
;             NonNull { pointer: ptr as _ }
802122de: 23 38 b4 f8  	sd	a1, -0x70(s0)
802122e2: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         unsafe { Unique { pointer: NonNull::new_unchecked(ptr), _marker: PhantomData } }
802122e6: 83 35 04 f9  	ld	a1, -0x70(s0)
802122ea: 03 35 84 f9  	ld	a0, -0x68(s0)
802122ee: 23 30 b4 f8  	sd	a1, -0x80(s0)
802122f2: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         Box(unsafe { Unique::new_unchecked(raw) }, alloc)
802122f6: 83 35 04 f8  	ld	a1, -0x80(s0)
802122fa: 03 35 84 f8  	ld	a0, -0x78(s0)
802122fe: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80212302: 23 34 a4 f6  	sd	a0, -0x98(s0)
;     }
80212306: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021230a: 83 35 84 f6  	ld	a1, -0x98(s0)
8021230e: aa 70        	ld	ra, 0xa8(sp)
80212310: 0a 74        	ld	s0, 0xa0(sp)
80212312: 4d 61        	addi	sp, sp, 0xb0
80212314: 82 80        	ret

0000000080212316 <_ZN2os4sync4spin13Spin$LT$T$GT$3new17h09cc844b3bb4925eE>:
;     pub const fn new(value: T , name: &'static str) -> Self {
80212316: 15 71        	addi	sp, sp, -0xe0
80212318: 86 ed        	sd	ra, 0xd8(sp)
8021231a: a2 e9        	sd	s0, 0xd0(sp)
8021231c: 80 11        	addi	s0, sp, 0xe0
8021231e: 23 34 d4 f4  	sd	a3, -0xb8(s0)
80212322: 23 30 c4 f4  	sd	a2, -0xc0(s0)
80212326: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8021232a: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021232e: 23 3c c4 fa  	sd	a2, -0x48(s0)
80212332: 23 30 d4 fc  	sd	a3, -0x40(s0)
80212336: 01 45        	li	a0, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80212338: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
8021233c: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80212340: 23 34 a4 fe  	sd	a0, -0x18(s0)
80212344: 03 35 84 fe  	ld	a0, -0x18(s0)
80212348: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021234c: 03 35 04 fe  	ld	a0, -0x20(s0)
;             locked:AtomicPtr::new(ptr::null_mut()),
80212350: 97 50 00 00  	auipc	ra, 0x5
80212354: e7 80 40 15  	jalr	0x154(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$3new17h0a9812749ab5c07bE>
80212358: 83 35 84 f2  	ld	a1, -0xd8(s0)
8021235c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80212360: 03 35 84 fc  	ld	a0, -0x38(s0)
80212364: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80212368: 13 05 04 f6  	addi	a0, s0, -0xa0
8021236c: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80212370: 13 06 80 05  	li	a2, 0x58
80212374: 23 3c c4 f2  	sd	a2, -0xc8(s0)
;         UnsafeCell { value }
80212378: 97 00 02 00  	auipc	ra, 0x20
8021237c: e7 80 60 8f  	jalr	-0x70a(ra) <memcpy>
80212380: 83 35 04 f3  	ld	a1, -0xd0(s0)
80212384: 03 36 84 f3  	ld	a2, -0xc8(s0)
80212388: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         Spin{
8021238c: 83 36 84 f5  	ld	a3, -0xa8(s0)
80212390: 14 e9        	sd	a3, 0x10(a0)
80212392: 61 05        	addi	a0, a0, 0x18
80212394: 97 00 02 00  	auipc	ra, 0x20
80212398: e7 80 a0 8d  	jalr	-0x726(ra) <memcpy>
8021239c: 03 36 04 f4  	ld	a2, -0xc0(s0)
802123a0: 83 36 84 f4  	ld	a3, -0xb8(s0)
802123a4: 03 35 04 f5  	ld	a0, -0xb0(s0)
802123a8: 10 e1        	sd	a2, 0x0(a0)
802123aa: 14 e5        	sd	a3, 0x8(a0)
802123ac: ee 60        	ld	ra, 0xd8(sp)
802123ae: 4e 64        	ld	s0, 0xd0(sp)
;     }
802123b0: 2d 61        	addi	sp, sp, 0xe0
802123b2: 82 80        	ret

00000000802123b4 <_ZN2os4sync4spin13Spin$LT$T$GT$3new17h20e481d7e278418eE>:
;     pub const fn new(value: T , name: &'static str) -> Self {
802123b4: 55 71        	addi	sp, sp, -0xd0
802123b6: 86 e5        	sd	ra, 0xc8(sp)
802123b8: a2 e1        	sd	s0, 0xc0(sp)
802123ba: 80 09        	addi	s0, sp, 0xd0
802123bc: 23 38 d4 f4  	sd	a3, -0xb0(s0)
802123c0: 23 34 c4 f4  	sd	a2, -0xb8(s0)
802123c4: 23 38 b4 f2  	sd	a1, -0xd0(s0)
802123c8: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802123cc: 23 3c c4 fa  	sd	a2, -0x48(s0)
802123d0: 23 30 d4 fc  	sd	a3, -0x40(s0)
802123d4: 01 45        	li	a0, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
802123d6: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
802123da: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802123de: 23 34 a4 fe  	sd	a0, -0x18(s0)
802123e2: 03 35 84 fe  	ld	a0, -0x18(s0)
802123e6: 23 30 a4 fe  	sd	a0, -0x20(s0)
802123ea: 03 35 04 fe  	ld	a0, -0x20(s0)
;             locked:AtomicPtr::new(ptr::null_mut()),
802123ee: 97 50 00 00  	auipc	ra, 0x5
802123f2: e7 80 60 0b  	jalr	0xb6(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$3new17h0a9812749ab5c07bE>
802123f6: 83 35 04 f3  	ld	a1, -0xd0(s0)
802123fa: 23 34 a4 fc  	sd	a0, -0x38(s0)
802123fe: 03 35 84 fc  	ld	a0, -0x38(s0)
80212402: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80212406: 13 05 84 f6  	addi	a0, s0, -0x98
8021240a: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8021240e: 13 06 00 05  	li	a2, 0x50
80212412: 23 30 c4 f4  	sd	a2, -0xc0(s0)
;         UnsafeCell { value }
80212416: 97 00 02 00  	auipc	ra, 0x20
8021241a: e7 80 80 85  	jalr	-0x7a8(ra) <memcpy>
8021241e: 83 35 84 f3  	ld	a1, -0xc8(s0)
80212422: 03 36 04 f4  	ld	a2, -0xc0(s0)
80212426: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         Spin{
8021242a: 83 36 04 f6  	ld	a3, -0xa0(s0)
8021242e: 14 e9        	sd	a3, 0x10(a0)
80212430: 61 05        	addi	a0, a0, 0x18
80212432: 97 00 02 00  	auipc	ra, 0x20
80212436: e7 80 c0 83  	jalr	-0x7c4(ra) <memcpy>
8021243a: 03 36 84 f4  	ld	a2, -0xb8(s0)
8021243e: 83 36 04 f5  	ld	a3, -0xb0(s0)
80212442: 03 35 84 f5  	ld	a0, -0xa8(s0)
80212446: 10 e1        	sd	a2, 0x0(a0)
80212448: 14 e5        	sd	a3, 0x8(a0)
8021244a: ae 60        	ld	ra, 0xc8(sp)
8021244c: 0e 64        	ld	s0, 0xc0(sp)
;     }
8021244e: 69 61        	addi	sp, sp, 0xd0
80212450: 82 80        	ret

0000000080212452 <_ZN2os4sync4spin13Spin$LT$T$GT$3new17h321ce8a1ce25db96E>:
;     pub const fn new(value: T , name: &'static str) -> Self {
80212452: 75 71        	addi	sp, sp, -0x90
80212454: 06 e5        	sd	ra, 0x88(sp)
80212456: 22 e1        	sd	s0, 0x80(sp)
80212458: 00 09        	addi	s0, sp, 0x90
8021245a: 23 34 d4 f8  	sd	a3, -0x78(s0)
8021245e: 23 30 c4 f8  	sd	a2, -0x80(s0)
80212462: 23 3c b4 f6  	sd	a1, -0x88(s0)
80212466: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021246a: 23 3c c4 fa  	sd	a2, -0x48(s0)
8021246e: 23 30 d4 fc  	sd	a3, -0x40(s0)
80212472: 01 45        	li	a0, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80212474: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
80212478: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8021247c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80212480: 03 35 84 fe  	ld	a0, -0x18(s0)
80212484: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212488: 03 35 04 fe  	ld	a0, -0x20(s0)
;             locked:AtomicPtr::new(ptr::null_mut()),
8021248c: 97 50 00 00  	auipc	ra, 0x5
80212490: e7 80 80 01  	jalr	0x18(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$3new17h0a9812749ab5c07bE>
80212494: 83 35 84 f7  	ld	a1, -0x88(s0)
80212498: 03 36 04 f8  	ld	a2, -0x80(s0)
8021249c: 83 36 84 f8  	ld	a3, -0x78(s0)
802124a0: 2a 87        	mv	a4, a0
802124a2: 03 35 04 f9  	ld	a0, -0x70(s0)
802124a6: 23 34 e4 fc  	sd	a4, -0x38(s0)
802124aa: 03 37 84 fc  	ld	a4, -0x38(s0)
802124ae: 23 3c e4 f8  	sd	a4, -0x68(s0)
;         UnsafeCell { value }
802124b2: 98 69        	ld	a4, 0x10(a1)
802124b4: 23 38 e4 fa  	sd	a4, -0x50(s0)
802124b8: 98 65        	ld	a4, 0x8(a1)
802124ba: 23 34 e4 fa  	sd	a4, -0x58(s0)
802124be: 8c 61        	ld	a1, 0x0(a1)
802124c0: 23 30 b4 fa  	sd	a1, -0x60(s0)
;         Spin{
802124c4: 83 35 84 f9  	ld	a1, -0x68(s0)
802124c8: 0c e9        	sd	a1, 0x10(a0)
802124ca: 83 35 04 fb  	ld	a1, -0x50(s0)
802124ce: 0c f5        	sd	a1, 0x28(a0)
802124d0: 83 35 84 fa  	ld	a1, -0x58(s0)
802124d4: 0c f1        	sd	a1, 0x20(a0)
802124d6: 83 35 04 fa  	ld	a1, -0x60(s0)
802124da: 0c ed        	sd	a1, 0x18(a0)
802124dc: 10 e1        	sd	a2, 0x0(a0)
802124de: 14 e5        	sd	a3, 0x8(a0)
802124e0: aa 60        	ld	ra, 0x88(sp)
802124e2: 0a 64        	ld	s0, 0x80(sp)
;     }
802124e4: 49 61        	addi	sp, sp, 0x90
802124e6: 82 80        	ret

00000000802124e8 <_ZN2os4sync4spin13Spin$LT$T$GT$3new17h81ec4a51cd60edfdE>:
;     pub const fn new(value: T , name: &'static str) -> Self {
802124e8: 35 71        	addi	sp, sp, -0xa0
802124ea: 06 ed        	sd	ra, 0x98(sp)
802124ec: 22 e9        	sd	s0, 0x90(sp)
802124ee: 00 11        	addi	s0, sp, 0xa0
802124f0: 23 3c d4 f6  	sd	a3, -0x88(s0)
802124f4: 23 38 c4 f6  	sd	a2, -0x90(s0)
802124f8: 23 34 b4 f6  	sd	a1, -0x98(s0)
802124fc: 23 30 a4 f8  	sd	a0, -0x80(s0)
80212500: 23 3c c4 fa  	sd	a2, -0x48(s0)
80212504: 23 30 d4 fc  	sd	a3, -0x40(s0)
80212508: 01 45        	li	a0, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
8021250a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
8021250e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80212512: 23 34 a4 fe  	sd	a0, -0x18(s0)
80212516: 03 35 84 fe  	ld	a0, -0x18(s0)
8021251a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021251e: 03 35 04 fe  	ld	a0, -0x20(s0)
;             locked:AtomicPtr::new(ptr::null_mut()),
80212522: 97 50 00 00  	auipc	ra, 0x5
80212526: e7 80 20 f8  	jalr	-0x7e(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$3new17h0a9812749ab5c07bE>
8021252a: 83 35 84 f6  	ld	a1, -0x98(s0)
8021252e: 03 36 04 f7  	ld	a2, -0x90(s0)
80212532: 83 36 84 f7  	ld	a3, -0x88(s0)
80212536: 2a 87        	mv	a4, a0
80212538: 03 35 04 f8  	ld	a0, -0x80(s0)
8021253c: 23 34 e4 fc  	sd	a4, -0x38(s0)
80212540: 03 37 84 fc  	ld	a4, -0x38(s0)
80212544: 23 34 e4 f8  	sd	a4, -0x78(s0)
;         UnsafeCell { value }
80212548: 98 71        	ld	a4, 0x20(a1)
8021254a: 23 38 e4 fa  	sd	a4, -0x50(s0)
8021254e: 98 6d        	ld	a4, 0x18(a1)
80212550: 23 34 e4 fa  	sd	a4, -0x58(s0)
80212554: 98 69        	ld	a4, 0x10(a1)
80212556: 23 30 e4 fa  	sd	a4, -0x60(s0)
8021255a: 98 65        	ld	a4, 0x8(a1)
8021255c: 23 3c e4 f8  	sd	a4, -0x68(s0)
80212560: 8c 61        	ld	a1, 0x0(a1)
80212562: 23 38 b4 f8  	sd	a1, -0x70(s0)
;         Spin{
80212566: 83 35 84 f8  	ld	a1, -0x78(s0)
8021256a: 0c e9        	sd	a1, 0x10(a0)
8021256c: 83 35 04 fb  	ld	a1, -0x50(s0)
80212570: 0c fd        	sd	a1, 0x38(a0)
80212572: 83 35 84 fa  	ld	a1, -0x58(s0)
80212576: 0c f9        	sd	a1, 0x30(a0)
80212578: 83 35 04 fa  	ld	a1, -0x60(s0)
8021257c: 0c f5        	sd	a1, 0x28(a0)
8021257e: 83 35 84 f9  	ld	a1, -0x68(s0)
80212582: 0c f1        	sd	a1, 0x20(a0)
80212584: 83 35 04 f9  	ld	a1, -0x70(s0)
80212588: 0c ed        	sd	a1, 0x18(a0)
8021258a: 10 e1        	sd	a2, 0x0(a0)
8021258c: 14 e5        	sd	a3, 0x8(a0)
8021258e: ea 60        	ld	ra, 0x98(sp)
80212590: 4a 64        	ld	s0, 0x90(sp)
;     }
80212592: 0d 61        	addi	sp, sp, 0xa0
80212594: 82 80        	ret

0000000080212596 <_ZN2os4sync4spin13Spin$LT$T$GT$3new17hb5a716ea1a6ae597E>:
;     pub const fn new(value: T , name: &'static str) -> Self {
80212596: 71 71        	addi	sp, sp, -0xb0
80212598: 06 f5        	sd	ra, 0xa8(sp)
8021259a: 22 f1        	sd	s0, 0xa0(sp)
8021259c: 00 19        	addi	s0, sp, 0xb0
8021259e: 23 38 e4 f6  	sd	a4, -0x90(s0)
802125a2: 23 34 d4 f6  	sd	a3, -0x98(s0)
802125a6: 23 30 c4 f6  	sd	a2, -0xa0(s0)
802125aa: 23 3c b4 f4  	sd	a1, -0xa8(s0)
802125ae: 23 3c a4 f6  	sd	a0, -0x88(s0)
802125b2: 23 34 b4 f8  	sd	a1, -0x78(s0)
802125b6: 23 38 c4 f8  	sd	a2, -0x70(s0)
802125ba: 23 3c d4 f8  	sd	a3, -0x68(s0)
802125be: 23 30 e4 fa  	sd	a4, -0x60(s0)
802125c2: 01 45        	li	a0, 0x0
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
802125c4: 23 38 a4 fa  	sd	a0, -0x50(s0)
;     data_pointer: *mut (),
802125c8: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802125cc: 23 34 a4 fc  	sd	a0, -0x38(s0)
802125d0: 03 35 84 fc  	ld	a0, -0x38(s0)
802125d4: 23 30 a4 fc  	sd	a0, -0x40(s0)
802125d8: 03 35 04 fc  	ld	a0, -0x40(s0)
;             locked:AtomicPtr::new(ptr::null_mut()),
802125dc: 97 50 00 00  	auipc	ra, 0x5
802125e0: e7 80 80 ec  	jalr	-0x138(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$3new17h0a9812749ab5c07bE>
802125e4: 83 35 84 f5  	ld	a1, -0xa8(s0)
802125e8: 03 36 04 f6  	ld	a2, -0xa0(s0)
802125ec: 83 36 84 f6  	ld	a3, -0x98(s0)
802125f0: 03 37 04 f7  	ld	a4, -0x90(s0)
802125f4: aa 87        	mv	a5, a0
802125f6: 03 35 84 f7  	ld	a0, -0x88(s0)
802125fa: 23 34 f4 fa  	sd	a5, -0x58(s0)
802125fe: 83 37 84 fa  	ld	a5, -0x58(s0)
80212602: 23 30 f4 f8  	sd	a5, -0x80(s0)
80212606: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021260a: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         UnsafeCell { value }
8021260e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80212612: 23 3c c4 fc  	sd	a2, -0x28(s0)
;     }
80212616: 03 36 04 fd  	ld	a2, -0x30(s0)
8021261a: 83 35 84 fd  	ld	a1, -0x28(s0)
;         Spin{
8021261e: 83 37 04 f8  	ld	a5, -0x80(s0)
80212622: 1c e9        	sd	a5, 0x10(a0)
80212624: 10 ed        	sd	a2, 0x18(a0)
80212626: 0c f1        	sd	a1, 0x20(a0)
80212628: 14 e1        	sd	a3, 0x0(a0)
8021262a: 18 e5        	sd	a4, 0x8(a0)
8021262c: aa 70        	ld	ra, 0xa8(sp)
8021262e: 0a 74        	ld	s0, 0xa0(sp)
;     }
80212630: 4d 61        	addi	sp, sp, 0xb0
80212632: 82 80        	ret

0000000080212634 <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17h054667692faf7914E>:
;     pub fn holding(&self) -> bool {
80212634: 39 71        	addi	sp, sp, -0x40
80212636: 06 fc        	sd	ra, 0x38(sp)
80212638: 22 f8        	sd	s0, 0x30(sp)
8021263a: 80 00        	addi	s0, sp, 0x40
8021263c: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
80212640: 41 05        	addi	a0, a0, 0x10
80212642: 81 45        	li	a1, 0x0
80212644: a3 07 b4 fc  	sb	a1, -0x31(s0)
80212648: 83 45 f4 fc  	lbu	a1, -0x31(s0)
8021264c: 97 50 00 00  	auipc	ra, 0x5
80212650: e7 80 c0 e7  	jalr	-0x184(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
80212654: 23 30 a4 fc  	sd	a0, -0x40(s0)

0000000080212658 <.Lpcrel_hi0>:
80212658: 17 a5 33 00  	auipc	a0, 0x33a
8021265c: 13 05 85 ba  	addi	a0, a0, -0x458
80212660: 97 70 00 00  	auipc	ra, 0x7
80212664: e7 80 c0 dd  	jalr	-0x224(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80212668: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021266c: 13 05 04 fc  	addi	a0, s0, -0x40
80212670: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212674: 13 05 04 fd  	addi	a0, s0, -0x30
80212678: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
8021267c: 03 35 04 fc  	ld	a0, -0x40(s0)
80212680: 83 35 04 fd  	ld	a1, -0x30(s0)
80212684: 2d 8d        	xor	a0, a0, a1
80212686: 13 35 15 00  	seqz	a0, a0
8021268a: e2 70        	ld	ra, 0x38(sp)
8021268c: 42 74        	ld	s0, 0x30(sp)
;     }
8021268e: 21 61        	addi	sp, sp, 0x40
80212690: 82 80        	ret

0000000080212692 <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17h31874421ac861297E>:
;     pub fn holding(&self) -> bool {
80212692: 39 71        	addi	sp, sp, -0x40
80212694: 06 fc        	sd	ra, 0x38(sp)
80212696: 22 f8        	sd	s0, 0x30(sp)
80212698: 80 00        	addi	s0, sp, 0x40
8021269a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
8021269e: 41 05        	addi	a0, a0, 0x10
802126a0: 81 45        	li	a1, 0x0
802126a2: a3 07 b4 fc  	sb	a1, -0x31(s0)
802126a6: 83 45 f4 fc  	lbu	a1, -0x31(s0)
802126aa: 97 50 00 00  	auipc	ra, 0x5
802126ae: e7 80 e0 e1  	jalr	-0x1e2(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
802126b2: 23 30 a4 fc  	sd	a0, -0x40(s0)

00000000802126b6 <.Lpcrel_hi1>:
802126b6: 17 a5 33 00  	auipc	a0, 0x33a
802126ba: 13 05 a5 b4  	addi	a0, a0, -0x4b6
802126be: 97 70 00 00  	auipc	ra, 0x7
802126c2: e7 80 e0 d7  	jalr	-0x282(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
802126c6: 23 38 a4 fc  	sd	a0, -0x30(s0)
802126ca: 13 05 04 fc  	addi	a0, s0, -0x40
802126ce: 23 30 a4 fe  	sd	a0, -0x20(s0)
802126d2: 13 05 04 fd  	addi	a0, s0, -0x30
802126d6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
802126da: 03 35 04 fc  	ld	a0, -0x40(s0)
802126de: 83 35 04 fd  	ld	a1, -0x30(s0)
802126e2: 2d 8d        	xor	a0, a0, a1
802126e4: 13 35 15 00  	seqz	a0, a0
802126e8: e2 70        	ld	ra, 0x38(sp)
802126ea: 42 74        	ld	s0, 0x30(sp)
;     }
802126ec: 21 61        	addi	sp, sp, 0x40
802126ee: 82 80        	ret

00000000802126f0 <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17h7062402dd0bd2c4dE>:
;     pub fn holding(&self) -> bool {
802126f0: 39 71        	addi	sp, sp, -0x40
802126f2: 06 fc        	sd	ra, 0x38(sp)
802126f4: 22 f8        	sd	s0, 0x30(sp)
802126f6: 80 00        	addi	s0, sp, 0x40
802126f8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
802126fc: 41 05        	addi	a0, a0, 0x10
802126fe: 81 45        	li	a1, 0x0
80212700: a3 07 b4 fc  	sb	a1, -0x31(s0)
80212704: 83 45 f4 fc  	lbu	a1, -0x31(s0)
80212708: 97 50 00 00  	auipc	ra, 0x5
8021270c: e7 80 00 dc  	jalr	-0x240(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
80212710: 23 30 a4 fc  	sd	a0, -0x40(s0)

0000000080212714 <.Lpcrel_hi2>:
80212714: 17 a5 33 00  	auipc	a0, 0x33a
80212718: 13 05 c5 ae  	addi	a0, a0, -0x514
8021271c: 97 70 00 00  	auipc	ra, 0x7
80212720: e7 80 00 d2  	jalr	-0x2e0(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80212724: 23 38 a4 fc  	sd	a0, -0x30(s0)
80212728: 13 05 04 fc  	addi	a0, s0, -0x40
8021272c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212730: 13 05 04 fd  	addi	a0, s0, -0x30
80212734: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
80212738: 03 35 04 fc  	ld	a0, -0x40(s0)
8021273c: 83 35 04 fd  	ld	a1, -0x30(s0)
80212740: 2d 8d        	xor	a0, a0, a1
80212742: 13 35 15 00  	seqz	a0, a0
80212746: e2 70        	ld	ra, 0x38(sp)
80212748: 42 74        	ld	s0, 0x30(sp)
;     }
8021274a: 21 61        	addi	sp, sp, 0x40
8021274c: 82 80        	ret

000000008021274e <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17h7b2b201482cf4ec5E>:
;     pub fn holding(&self) -> bool {
8021274e: 39 71        	addi	sp, sp, -0x40
80212750: 06 fc        	sd	ra, 0x38(sp)
80212752: 22 f8        	sd	s0, 0x30(sp)
80212754: 80 00        	addi	s0, sp, 0x40
80212756: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
8021275a: 41 05        	addi	a0, a0, 0x10
8021275c: 81 45        	li	a1, 0x0
8021275e: a3 07 b4 fc  	sb	a1, -0x31(s0)
80212762: 83 45 f4 fc  	lbu	a1, -0x31(s0)
80212766: 97 50 00 00  	auipc	ra, 0x5
8021276a: e7 80 20 d6  	jalr	-0x29e(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
8021276e: 23 30 a4 fc  	sd	a0, -0x40(s0)

0000000080212772 <.Lpcrel_hi3>:
80212772: 17 a5 33 00  	auipc	a0, 0x33a
80212776: 13 05 e5 a8  	addi	a0, a0, -0x572
8021277a: 97 70 00 00  	auipc	ra, 0x7
8021277e: e7 80 20 cc  	jalr	-0x33e(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80212782: 23 38 a4 fc  	sd	a0, -0x30(s0)
80212786: 13 05 04 fc  	addi	a0, s0, -0x40
8021278a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021278e: 13 05 04 fd  	addi	a0, s0, -0x30
80212792: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
80212796: 03 35 04 fc  	ld	a0, -0x40(s0)
8021279a: 83 35 04 fd  	ld	a1, -0x30(s0)
8021279e: 2d 8d        	xor	a0, a0, a1
802127a0: 13 35 15 00  	seqz	a0, a0
802127a4: e2 70        	ld	ra, 0x38(sp)
802127a6: 42 74        	ld	s0, 0x30(sp)
;     }
802127a8: 21 61        	addi	sp, sp, 0x40
802127aa: 82 80        	ret

00000000802127ac <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17h94f8f9bf17267d7aE>:
;     pub fn holding(&self) -> bool {
802127ac: 39 71        	addi	sp, sp, -0x40
802127ae: 06 fc        	sd	ra, 0x38(sp)
802127b0: 22 f8        	sd	s0, 0x30(sp)
802127b2: 80 00        	addi	s0, sp, 0x40
802127b4: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
802127b8: 41 05        	addi	a0, a0, 0x10
802127ba: 81 45        	li	a1, 0x0
802127bc: a3 07 b4 fc  	sb	a1, -0x31(s0)
802127c0: 83 45 f4 fc  	lbu	a1, -0x31(s0)
802127c4: 97 50 00 00  	auipc	ra, 0x5
802127c8: e7 80 40 d0  	jalr	-0x2fc(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
802127cc: 23 30 a4 fc  	sd	a0, -0x40(s0)

00000000802127d0 <.Lpcrel_hi4>:
802127d0: 17 a5 33 00  	auipc	a0, 0x33a
802127d4: 13 05 05 a3  	addi	a0, a0, -0x5d0
802127d8: 97 70 00 00  	auipc	ra, 0x7
802127dc: e7 80 40 c6  	jalr	-0x39c(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
802127e0: 23 38 a4 fc  	sd	a0, -0x30(s0)
802127e4: 13 05 04 fc  	addi	a0, s0, -0x40
802127e8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802127ec: 13 05 04 fd  	addi	a0, s0, -0x30
802127f0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
802127f4: 03 35 04 fc  	ld	a0, -0x40(s0)
802127f8: 83 35 04 fd  	ld	a1, -0x30(s0)
802127fc: 2d 8d        	xor	a0, a0, a1
802127fe: 13 35 15 00  	seqz	a0, a0
80212802: e2 70        	ld	ra, 0x38(sp)
80212804: 42 74        	ld	s0, 0x30(sp)
;     }
80212806: 21 61        	addi	sp, sp, 0x40
80212808: 82 80        	ret

000000008021280a <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17hbbe76ed62abbcbe0E>:
;     pub fn holding(&self) -> bool {
8021280a: 39 71        	addi	sp, sp, -0x40
8021280c: 06 fc        	sd	ra, 0x38(sp)
8021280e: 22 f8        	sd	s0, 0x30(sp)
80212810: 80 00        	addi	s0, sp, 0x40
80212812: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
80212816: 41 05        	addi	a0, a0, 0x10
80212818: 81 45        	li	a1, 0x0
8021281a: a3 07 b4 fc  	sb	a1, -0x31(s0)
8021281e: 83 45 f4 fc  	lbu	a1, -0x31(s0)
80212822: 97 50 00 00  	auipc	ra, 0x5
80212826: e7 80 60 ca  	jalr	-0x35a(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
8021282a: 23 30 a4 fc  	sd	a0, -0x40(s0)

000000008021282e <.Lpcrel_hi5>:
8021282e: 17 a5 33 00  	auipc	a0, 0x33a
80212832: 13 05 25 9d  	addi	a0, a0, -0x62e
80212836: 97 70 00 00  	auipc	ra, 0x7
8021283a: e7 80 60 c0  	jalr	-0x3fa(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
8021283e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80212842: 13 05 04 fc  	addi	a0, s0, -0x40
80212846: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021284a: 13 05 04 fd  	addi	a0, s0, -0x30
8021284e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
80212852: 03 35 04 fc  	ld	a0, -0x40(s0)
80212856: 83 35 04 fd  	ld	a1, -0x30(s0)
8021285a: 2d 8d        	xor	a0, a0, a1
8021285c: 13 35 15 00  	seqz	a0, a0
80212860: e2 70        	ld	ra, 0x38(sp)
80212862: 42 74        	ld	s0, 0x30(sp)
;     }
80212864: 21 61        	addi	sp, sp, 0x40
80212866: 82 80        	ret

0000000080212868 <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17hcc2d8695b5099e70E>:
;     pub fn holding(&self) -> bool {
80212868: 39 71        	addi	sp, sp, -0x40
8021286a: 06 fc        	sd	ra, 0x38(sp)
8021286c: 22 f8        	sd	s0, 0x30(sp)
8021286e: 80 00        	addi	s0, sp, 0x40
80212870: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
80212874: 41 05        	addi	a0, a0, 0x10
80212876: 81 45        	li	a1, 0x0
80212878: a3 07 b4 fc  	sb	a1, -0x31(s0)
8021287c: 83 45 f4 fc  	lbu	a1, -0x31(s0)
80212880: 97 50 00 00  	auipc	ra, 0x5
80212884: e7 80 80 c4  	jalr	-0x3b8(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
80212888: 23 30 a4 fc  	sd	a0, -0x40(s0)

000000008021288c <.Lpcrel_hi6>:
8021288c: 17 a5 33 00  	auipc	a0, 0x33a
80212890: 13 05 45 97  	addi	a0, a0, -0x68c
80212894: 97 70 00 00  	auipc	ra, 0x7
80212898: e7 80 80 ba  	jalr	-0x458(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
8021289c: 23 38 a4 fc  	sd	a0, -0x30(s0)
802128a0: 13 05 04 fc  	addi	a0, s0, -0x40
802128a4: 23 30 a4 fe  	sd	a0, -0x20(s0)
802128a8: 13 05 04 fd  	addi	a0, s0, -0x30
802128ac: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
802128b0: 03 35 04 fc  	ld	a0, -0x40(s0)
802128b4: 83 35 04 fd  	ld	a1, -0x30(s0)
802128b8: 2d 8d        	xor	a0, a0, a1
802128ba: 13 35 15 00  	seqz	a0, a0
802128be: e2 70        	ld	ra, 0x38(sp)
802128c0: 42 74        	ld	s0, 0x30(sp)
;     }
802128c2: 21 61        	addi	sp, sp, 0x40
802128c4: 82 80        	ret

00000000802128c6 <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17he5252a703dd2ebe5E>:
;     pub fn holding(&self) -> bool {
802128c6: 39 71        	addi	sp, sp, -0x40
802128c8: 06 fc        	sd	ra, 0x38(sp)
802128ca: 22 f8        	sd	s0, 0x30(sp)
802128cc: 80 00        	addi	s0, sp, 0x40
802128ce: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
802128d2: 41 05        	addi	a0, a0, 0x10
802128d4: 81 45        	li	a1, 0x0
802128d6: a3 07 b4 fc  	sb	a1, -0x31(s0)
802128da: 83 45 f4 fc  	lbu	a1, -0x31(s0)
802128de: 97 50 00 00  	auipc	ra, 0x5
802128e2: e7 80 a0 be  	jalr	-0x416(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
802128e6: 23 30 a4 fc  	sd	a0, -0x40(s0)

00000000802128ea <.Lpcrel_hi7>:
802128ea: 17 a5 33 00  	auipc	a0, 0x33a
802128ee: 13 05 65 91  	addi	a0, a0, -0x6ea
802128f2: 97 70 00 00  	auipc	ra, 0x7
802128f6: e7 80 a0 b4  	jalr	-0x4b6(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
802128fa: 23 38 a4 fc  	sd	a0, -0x30(s0)
802128fe: 13 05 04 fc  	addi	a0, s0, -0x40
80212902: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212906: 13 05 04 fd  	addi	a0, s0, -0x30
8021290a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
8021290e: 03 35 04 fc  	ld	a0, -0x40(s0)
80212912: 83 35 04 fd  	ld	a1, -0x30(s0)
80212916: 2d 8d        	xor	a0, a0, a1
80212918: 13 35 15 00  	seqz	a0, a0
8021291c: e2 70        	ld	ra, 0x38(sp)
8021291e: 42 74        	ld	s0, 0x30(sp)
;     }
80212920: 21 61        	addi	sp, sp, 0x40
80212922: 82 80        	ret

0000000080212924 <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17hf7686b434e31c6b4E>:
;     pub fn holding(&self) -> bool {
80212924: 39 71        	addi	sp, sp, -0x40
80212926: 06 fc        	sd	ra, 0x38(sp)
80212928: 22 f8        	sd	s0, 0x30(sp)
8021292a: 80 00        	addi	s0, sp, 0x40
8021292c: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
80212930: 41 05        	addi	a0, a0, 0x10
80212932: 81 45        	li	a1, 0x0
80212934: a3 07 b4 fc  	sb	a1, -0x31(s0)
80212938: 83 45 f4 fc  	lbu	a1, -0x31(s0)
8021293c: 97 50 00 00  	auipc	ra, 0x5
80212940: e7 80 c0 b8  	jalr	-0x474(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
80212944: 23 30 a4 fc  	sd	a0, -0x40(s0)

0000000080212948 <.Lpcrel_hi8>:
80212948: 17 a5 33 00  	auipc	a0, 0x33a
8021294c: 13 05 85 8b  	addi	a0, a0, -0x748
80212950: 97 70 00 00  	auipc	ra, 0x7
80212954: e7 80 c0 ae  	jalr	-0x514(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80212958: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021295c: 13 05 04 fc  	addi	a0, s0, -0x40
80212960: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212964: 13 05 04 fd  	addi	a0, s0, -0x30
80212968: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
8021296c: 03 35 04 fc  	ld	a0, -0x40(s0)
80212970: 83 35 04 fd  	ld	a1, -0x30(s0)
80212974: 2d 8d        	xor	a0, a0, a1
80212976: 13 35 15 00  	seqz	a0, a0
8021297a: e2 70        	ld	ra, 0x38(sp)
8021297c: 42 74        	ld	s0, 0x30(sp)
;     }
8021297e: 21 61        	addi	sp, sp, 0x40
80212980: 82 80        	ret

0000000080212982 <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17hfe30dad27cd64c2fE>:
;     pub fn holding(&self) -> bool {
80212982: 39 71        	addi	sp, sp, -0x40
80212984: 06 fc        	sd	ra, 0x38(sp)
80212986: 22 f8        	sd	s0, 0x30(sp)
80212988: 80 00        	addi	s0, sp, 0x40
8021298a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe {self.locked.load(atomic::Ordering::Relaxed) == CPUS.my_cpu()}
8021298e: 41 05        	addi	a0, a0, 0x10
80212990: 81 45        	li	a1, 0x0
80212992: a3 07 b4 fc  	sb	a1, -0x31(s0)
80212996: 83 45 f4 fc  	lbu	a1, -0x31(s0)
8021299a: 97 50 00 00  	auipc	ra, 0x5
8021299e: e7 80 e0 b2  	jalr	-0x4d2(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>
802129a2: 23 30 a4 fc  	sd	a0, -0x40(s0)

00000000802129a6 <.Lpcrel_hi9>:
802129a6: 17 a5 33 00  	auipc	a0, 0x33a
802129aa: 13 05 a5 85  	addi	a0, a0, -0x7a6
802129ae: 97 70 00 00  	auipc	ra, 0x7
802129b2: e7 80 e0 a8  	jalr	-0x572(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
802129b6: 23 38 a4 fc  	sd	a0, -0x30(s0)
802129ba: 13 05 04 fc  	addi	a0, s0, -0x40
802129be: 23 30 a4 fe  	sd	a0, -0x20(s0)
802129c2: 13 05 04 fd  	addi	a0, s0, -0x30
802129c6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self == *other
802129ca: 03 35 04 fc  	ld	a0, -0x40(s0)
802129ce: 83 35 04 fd  	ld	a1, -0x30(s0)
802129d2: 2d 8d        	xor	a0, a0, a1
802129d4: 13 35 15 00  	seqz	a0, a0
802129d8: e2 70        	ld	ra, 0x38(sp)
802129da: 42 74        	ld	s0, 0x30(sp)
;     }
802129dc: 21 61        	addi	sp, sp, 0x40
802129de: 82 80        	ret

00000000802129e0 <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h01fab7e1d49e87e4E>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
802129e0: 11 71        	addi	sp, sp, -0x100
802129e2: 86 fd        	sd	ra, 0xf8(sp)
802129e4: a2 f9        	sd	s0, 0xf0(sp)
802129e6: 00 02        	addi	s0, sp, 0x100
802129e8: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802129ec: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
802129f0: 97 90 ff ff  	auipc	ra, 0xffff9
802129f4: e7 80 40 3c  	jalr	0x3c4(ra) <ekernel+0xffcbedb4>

00000000802129f8 <.Lpcrel_hi10>:
;         let _intr_lock = CPUS.intr_lock();
802129f8: 17 a5 33 00  	auipc	a0, 0x33a
802129fc: 13 05 85 80  	addi	a0, a0, -0x7f8
80212a00: 97 70 00 00  	auipc	ra, 0x7
80212a04: e7 80 40 b4  	jalr	-0x4bc(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
80212a08: aa 85        	mv	a1, a0
80212a0a: 03 35 84 f2  	ld	a0, -0xd8(s0)
80212a0e: 2e 86        	mv	a2, a1
80212a10: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80212a14: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212a18: 97 00 00 00  	auipc	ra, 0x0
80212a1c: e7 80 20 df  	jalr	-0x20e(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17hbbe76ed62abbcbe0E>
80212a20: 41 e1        	bnez	a0, 0x80212aa0 <.Lpcrel_hi11+0x50>
80212a22: 09 a0        	j	0x80212a24 <.Lpcrel_hi10+0x2c>
80212a24: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212a28: 41 05        	addi	a0, a0, 0x10
80212a2a: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80212a2e: 01 45        	li	a0, 0x0
80212a30: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80212a34: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
80212a38: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80212a3c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80212a40: 03 35 84 fe  	ld	a0, -0x18(s0)
80212a44: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212a48: 03 35 04 fe  	ld	a0, -0x20(s0)
80212a4c: 23 3c a4 f0  	sd	a0, -0xe8(s0)

0000000080212a50 <.Lpcrel_hi11>:
;                 CPUS.my_cpu(),
80212a50: 17 95 33 00  	auipc	a0, 0x339
80212a54: 13 05 05 7b  	addi	a0, a0, 0x7b0
80212a58: 97 70 00 00  	auipc	ra, 0x7
80212a5c: e7 80 40 9e  	jalr	-0x61c(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80212a60: 83 36 04 f1  	ld	a3, -0xf0(s0)
80212a64: 83 35 84 f1  	ld	a1, -0xe8(s0)
80212a68: 2a 86        	mv	a2, a0
80212a6a: 03 35 04 f2  	ld	a0, -0xe0(s0)
80212a6e: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
80212a70: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
80212a74: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212a78: 03 47 f4 f9  	lbu	a4, -0x61(s0)
80212a7c: 83 46 e4 f9  	lbu	a3, -0x62(s0)
80212a80: 97 50 00 00  	auipc	ra, 0x5
80212a84: e7 80 40 9f  	jalr	-0x60c(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
80212a88: 23 34 a4 f8  	sd	a0, -0x78(s0)
80212a8c: 23 38 b4 f8  	sd	a1, -0x70(s0)
80212a90: 13 05 84 f8  	addi	a0, s0, -0x78
80212a94: 97 f0 fe ff  	auipc	ra, 0xfffef
80212a98: e7 80 a0 85  	jalr	-0x7a6(ra) <ekernel+0xffcb42ee>
80212a9c: 51 e1        	bnez	a0, 0x80212b20 <.Lpcrel_hi14+0x30>
80212a9e: 8d a0        	j	0x80212b00 <.Lpcrel_hi14+0x10>
80212aa0: 83 35 84 f2  	ld	a1, -0xd8(s0)
80212aa4: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080212aa8 <.Lpcrel_hi12>:
;         Self::new(x, Display::fmt)
80212aa8: 17 95 00 00  	auipc	a0, 0x9
80212aac: 13 05 c5 09  	addi	a0, a0, 0x9c
80212ab0: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80212ab4: 23 38 b4 fa  	sd	a1, -0x50(s0)
80212ab8: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80212abc: 83 35 04 fb  	ld	a1, -0x50(s0)
80212ac0: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212ac4: 23 3c b4 f6  	sd	a1, -0x88(s0)
80212ac8: 23 30 a4 f8  	sd	a0, -0x80(s0)

0000000080212acc <.Lpcrel_hi13>:
80212acc: 17 35 02 00  	auipc	a0, 0x23
80212ad0: 93 05 c5 47  	addi	a1, a0, 0x47c
80212ad4: 13 05 84 f4  	addi	a0, s0, -0xb8
80212ad8: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80212adc: 93 06 84 f7  	addi	a3, s0, -0x88
80212ae0: 05 47        	li	a4, 0x1
80212ae2: 3a 86        	mv	a2, a4
80212ae4: 97 50 ff ff  	auipc	ra, 0xffff5
80212ae8: e7 80 40 80  	jalr	-0x7fc(ra) <ekernel+0xffcba2e8>
80212aec: 03 35 84 f0  	ld	a0, -0xf8(s0)

0000000080212af0 <.Lpcrel_hi14>:
80212af0: 97 35 02 00  	auipc	a1, 0x23
80212af4: 93 85 85 46  	addi	a1, a1, 0x468
80212af8: 97 d0 01 00  	auipc	ra, 0x1d
80212afc: e7 80 00 6b  	jalr	0x6b0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80212b00: 03 35 04 f3  	ld	a0, -0xd0(s0)
80212b04: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
80212b08: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80212b0c: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
80212b10: 03 35 84 f3  	ld	a0, -0xc8(s0)
80212b14: 83 35 04 f4  	ld	a1, -0xc0(s0)
80212b18: ee 70        	ld	ra, 0xf8(sp)
80212b1a: 4e 74        	ld	s0, 0xf0(sp)
80212b1c: 11 61        	addi	sp, sp, 0x100
80212b1e: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80212b20: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
80212b24: 01 b7        	j	0x80212a24 <.Lpcrel_hi10+0x2c>

0000000080212b26 <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h1d8b62201a0e1676E>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
80212b26: 11 71        	addi	sp, sp, -0x100
80212b28: 86 fd        	sd	ra, 0xf8(sp)
80212b2a: a2 f9        	sd	s0, 0xf0(sp)
80212b2c: 00 02        	addi	s0, sp, 0x100
80212b2e: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80212b32: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
80212b36: 97 90 ff ff  	auipc	ra, 0xffff9
80212b3a: e7 80 e0 27  	jalr	0x27e(ra) <ekernel+0xffcbedb4>

0000000080212b3e <.Lpcrel_hi15>:
;         let _intr_lock = CPUS.intr_lock();
80212b3e: 17 95 33 00  	auipc	a0, 0x339
80212b42: 13 05 25 6c  	addi	a0, a0, 0x6c2
80212b46: 97 70 00 00  	auipc	ra, 0x7
80212b4a: e7 80 e0 9f  	jalr	-0x602(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
80212b4e: aa 85        	mv	a1, a0
80212b50: 03 35 84 f2  	ld	a0, -0xd8(s0)
80212b54: 2e 86        	mv	a2, a1
80212b56: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80212b5a: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212b5e: 97 00 00 00  	auipc	ra, 0x0
80212b62: e7 80 80 d6  	jalr	-0x298(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17he5252a703dd2ebe5E>
80212b66: 41 e1        	bnez	a0, 0x80212be6 <.Lpcrel_hi16+0x50>
80212b68: 09 a0        	j	0x80212b6a <.Lpcrel_hi15+0x2c>
80212b6a: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212b6e: 41 05        	addi	a0, a0, 0x10
80212b70: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80212b74: 01 45        	li	a0, 0x0
80212b76: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80212b7a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
80212b7e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80212b82: 23 34 a4 fe  	sd	a0, -0x18(s0)
80212b86: 03 35 84 fe  	ld	a0, -0x18(s0)
80212b8a: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212b8e: 03 35 04 fe  	ld	a0, -0x20(s0)
80212b92: 23 3c a4 f0  	sd	a0, -0xe8(s0)

0000000080212b96 <.Lpcrel_hi16>:
;                 CPUS.my_cpu(),
80212b96: 17 95 33 00  	auipc	a0, 0x339
80212b9a: 13 05 a5 66  	addi	a0, a0, 0x66a
80212b9e: 97 70 00 00  	auipc	ra, 0x7
80212ba2: e7 80 e0 89  	jalr	-0x762(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80212ba6: 83 36 04 f1  	ld	a3, -0xf0(s0)
80212baa: 83 35 84 f1  	ld	a1, -0xe8(s0)
80212bae: 2a 86        	mv	a2, a0
80212bb0: 03 35 04 f2  	ld	a0, -0xe0(s0)
80212bb4: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
80212bb6: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
80212bba: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212bbe: 03 47 f4 f9  	lbu	a4, -0x61(s0)
80212bc2: 83 46 e4 f9  	lbu	a3, -0x62(s0)
80212bc6: 97 50 00 00  	auipc	ra, 0x5
80212bca: e7 80 e0 8a  	jalr	-0x752(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
80212bce: 23 34 a4 f8  	sd	a0, -0x78(s0)
80212bd2: 23 38 b4 f8  	sd	a1, -0x70(s0)
80212bd6: 13 05 84 f8  	addi	a0, s0, -0x78
80212bda: 97 e0 fe ff  	auipc	ra, 0xfffee
80212bde: e7 80 40 71  	jalr	0x714(ra) <ekernel+0xffcb42ee>
80212be2: 51 e1        	bnez	a0, 0x80212c66 <.Lpcrel_hi19+0x30>
80212be4: 8d a0        	j	0x80212c46 <.Lpcrel_hi19+0x10>
80212be6: 83 35 84 f2  	ld	a1, -0xd8(s0)
80212bea: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080212bee <.Lpcrel_hi17>:
;         Self::new(x, Display::fmt)
80212bee: 17 95 00 00  	auipc	a0, 0x9
80212bf2: 13 05 65 f5  	addi	a0, a0, -0xaa
80212bf6: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80212bfa: 23 38 b4 fa  	sd	a1, -0x50(s0)
80212bfe: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80212c02: 83 35 04 fb  	ld	a1, -0x50(s0)
80212c06: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212c0a: 23 3c b4 f6  	sd	a1, -0x88(s0)
80212c0e: 23 30 a4 f8  	sd	a0, -0x80(s0)

0000000080212c12 <.Lpcrel_hi18>:
80212c12: 17 35 02 00  	auipc	a0, 0x23
80212c16: 93 05 65 33  	addi	a1, a0, 0x336
80212c1a: 13 05 84 f4  	addi	a0, s0, -0xb8
80212c1e: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80212c22: 93 06 84 f7  	addi	a3, s0, -0x88
80212c26: 05 47        	li	a4, 0x1
80212c28: 3a 86        	mv	a2, a4
80212c2a: 97 40 ff ff  	auipc	ra, 0xffff4
80212c2e: e7 80 e0 6b  	jalr	0x6be(ra) <ekernel+0xffcba2e8>
80212c32: 03 35 84 f0  	ld	a0, -0xf8(s0)

0000000080212c36 <.Lpcrel_hi19>:
80212c36: 97 35 02 00  	auipc	a1, 0x23
80212c3a: 93 85 25 32  	addi	a1, a1, 0x322
80212c3e: 97 d0 01 00  	auipc	ra, 0x1d
80212c42: e7 80 a0 56  	jalr	0x56a(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80212c46: 03 35 04 f3  	ld	a0, -0xd0(s0)
80212c4a: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
80212c4e: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80212c52: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
80212c56: 03 35 84 f3  	ld	a0, -0xc8(s0)
80212c5a: 83 35 04 f4  	ld	a1, -0xc0(s0)
80212c5e: ee 70        	ld	ra, 0xf8(sp)
80212c60: 4e 74        	ld	s0, 0xf0(sp)
80212c62: 11 61        	addi	sp, sp, 0x100
80212c64: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80212c66: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
80212c6a: 01 b7        	j	0x80212b6a <.Lpcrel_hi15+0x2c>

0000000080212c6c <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h45ef2d4cb8ea66e1E>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
80212c6c: 11 71        	addi	sp, sp, -0x100
80212c6e: 86 fd        	sd	ra, 0xf8(sp)
80212c70: a2 f9        	sd	s0, 0xf0(sp)
80212c72: 00 02        	addi	s0, sp, 0x100
80212c74: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80212c78: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
80212c7c: 97 90 ff ff  	auipc	ra, 0xffff9
80212c80: e7 80 80 13  	jalr	0x138(ra) <ekernel+0xffcbedb4>

0000000080212c84 <.Lpcrel_hi20>:
;         let _intr_lock = CPUS.intr_lock();
80212c84: 17 95 33 00  	auipc	a0, 0x339
80212c88: 13 05 c5 57  	addi	a0, a0, 0x57c
80212c8c: 97 70 00 00  	auipc	ra, 0x7
80212c90: e7 80 80 8b  	jalr	-0x748(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
80212c94: aa 85        	mv	a1, a0
80212c96: 03 35 84 f2  	ld	a0, -0xd8(s0)
80212c9a: 2e 86        	mv	a2, a1
80212c9c: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80212ca0: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212ca4: 97 00 00 00  	auipc	ra, 0x0
80212ca8: e7 80 00 99  	jalr	-0x670(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17h054667692faf7914E>
80212cac: 41 e1        	bnez	a0, 0x80212d2c <.Lpcrel_hi21+0x50>
80212cae: 09 a0        	j	0x80212cb0 <.Lpcrel_hi20+0x2c>
80212cb0: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212cb4: 41 05        	addi	a0, a0, 0x10
80212cb6: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80212cba: 01 45        	li	a0, 0x0
80212cbc: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80212cc0: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
80212cc4: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80212cc8: 23 34 a4 fe  	sd	a0, -0x18(s0)
80212ccc: 03 35 84 fe  	ld	a0, -0x18(s0)
80212cd0: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212cd4: 03 35 04 fe  	ld	a0, -0x20(s0)
80212cd8: 23 3c a4 f0  	sd	a0, -0xe8(s0)

0000000080212cdc <.Lpcrel_hi21>:
;                 CPUS.my_cpu(),
80212cdc: 17 95 33 00  	auipc	a0, 0x339
80212ce0: 13 05 45 52  	addi	a0, a0, 0x524
80212ce4: 97 60 00 00  	auipc	ra, 0x6
80212ce8: e7 80 80 75  	jalr	0x758(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80212cec: 83 36 04 f1  	ld	a3, -0xf0(s0)
80212cf0: 83 35 84 f1  	ld	a1, -0xe8(s0)
80212cf4: 2a 86        	mv	a2, a0
80212cf6: 03 35 04 f2  	ld	a0, -0xe0(s0)
80212cfa: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
80212cfc: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
80212d00: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212d04: 03 47 f4 f9  	lbu	a4, -0x61(s0)
80212d08: 83 46 e4 f9  	lbu	a3, -0x62(s0)
80212d0c: 97 40 00 00  	auipc	ra, 0x4
80212d10: e7 80 80 76  	jalr	0x768(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
80212d14: 23 34 a4 f8  	sd	a0, -0x78(s0)
80212d18: 23 38 b4 f8  	sd	a1, -0x70(s0)
80212d1c: 13 05 84 f8  	addi	a0, s0, -0x78
80212d20: 97 e0 fe ff  	auipc	ra, 0xfffee
80212d24: e7 80 e0 5c  	jalr	0x5ce(ra) <ekernel+0xffcb42ee>
80212d28: 51 e1        	bnez	a0, 0x80212dac <.Lpcrel_hi24+0x30>
80212d2a: 8d a0        	j	0x80212d8c <.Lpcrel_hi24+0x10>
80212d2c: 83 35 84 f2  	ld	a1, -0xd8(s0)
80212d30: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080212d34 <.Lpcrel_hi22>:
;         Self::new(x, Display::fmt)
80212d34: 17 95 00 00  	auipc	a0, 0x9
80212d38: 13 05 05 e1  	addi	a0, a0, -0x1f0
80212d3c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80212d40: 23 38 b4 fa  	sd	a1, -0x50(s0)
80212d44: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80212d48: 83 35 04 fb  	ld	a1, -0x50(s0)
80212d4c: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212d50: 23 3c b4 f6  	sd	a1, -0x88(s0)
80212d54: 23 30 a4 f8  	sd	a0, -0x80(s0)

0000000080212d58 <.Lpcrel_hi23>:
80212d58: 17 35 02 00  	auipc	a0, 0x23
80212d5c: 93 05 05 1f  	addi	a1, a0, 0x1f0
80212d60: 13 05 84 f4  	addi	a0, s0, -0xb8
80212d64: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80212d68: 93 06 84 f7  	addi	a3, s0, -0x88
80212d6c: 05 47        	li	a4, 0x1
80212d6e: 3a 86        	mv	a2, a4
80212d70: 97 40 ff ff  	auipc	ra, 0xffff4
80212d74: e7 80 80 57  	jalr	0x578(ra) <ekernel+0xffcba2e8>
80212d78: 03 35 84 f0  	ld	a0, -0xf8(s0)

0000000080212d7c <.Lpcrel_hi24>:
80212d7c: 97 35 02 00  	auipc	a1, 0x23
80212d80: 93 85 c5 1d  	addi	a1, a1, 0x1dc
80212d84: 97 d0 01 00  	auipc	ra, 0x1d
80212d88: e7 80 40 42  	jalr	0x424(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80212d8c: 03 35 04 f3  	ld	a0, -0xd0(s0)
80212d90: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
80212d94: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80212d98: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
80212d9c: 03 35 84 f3  	ld	a0, -0xc8(s0)
80212da0: 83 35 04 f4  	ld	a1, -0xc0(s0)
80212da4: ee 70        	ld	ra, 0xf8(sp)
80212da6: 4e 74        	ld	s0, 0xf0(sp)
80212da8: 11 61        	addi	sp, sp, 0x100
80212daa: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80212dac: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
80212db0: 01 b7        	j	0x80212cb0 <.Lpcrel_hi20+0x2c>

0000000080212db2 <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7ceba851bd71b53fE>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
80212db2: 11 71        	addi	sp, sp, -0x100
80212db4: 86 fd        	sd	ra, 0xf8(sp)
80212db6: a2 f9        	sd	s0, 0xf0(sp)
80212db8: 00 02        	addi	s0, sp, 0x100
80212dba: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80212dbe: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
80212dc2: 97 90 ff ff  	auipc	ra, 0xffff9
80212dc6: e7 80 20 ff  	jalr	-0xe(ra) <ekernel+0xffcbedb4>

0000000080212dca <.Lpcrel_hi25>:
;         let _intr_lock = CPUS.intr_lock();
80212dca: 17 95 33 00  	auipc	a0, 0x339
80212dce: 13 05 65 43  	addi	a0, a0, 0x436
80212dd2: 97 60 00 00  	auipc	ra, 0x6
80212dd6: e7 80 20 77  	jalr	0x772(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
80212dda: aa 85        	mv	a1, a0
80212ddc: 03 35 84 f2  	ld	a0, -0xd8(s0)
80212de0: 2e 86        	mv	a2, a1
80212de2: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80212de6: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212dea: 97 00 00 00  	auipc	ra, 0x0
80212dee: e7 80 e0 a7  	jalr	-0x582(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17hcc2d8695b5099e70E>
80212df2: 41 e1        	bnez	a0, 0x80212e72 <.Lpcrel_hi26+0x50>
80212df4: 09 a0        	j	0x80212df6 <.Lpcrel_hi25+0x2c>
80212df6: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212dfa: 41 05        	addi	a0, a0, 0x10
80212dfc: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80212e00: 01 45        	li	a0, 0x0
80212e02: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80212e06: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
80212e0a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80212e0e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80212e12: 03 35 84 fe  	ld	a0, -0x18(s0)
80212e16: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212e1a: 03 35 04 fe  	ld	a0, -0x20(s0)
80212e1e: 23 3c a4 f0  	sd	a0, -0xe8(s0)

0000000080212e22 <.Lpcrel_hi26>:
;                 CPUS.my_cpu(),
80212e22: 17 95 33 00  	auipc	a0, 0x339
80212e26: 13 05 e5 3d  	addi	a0, a0, 0x3de
80212e2a: 97 60 00 00  	auipc	ra, 0x6
80212e2e: e7 80 20 61  	jalr	0x612(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80212e32: 83 36 04 f1  	ld	a3, -0xf0(s0)
80212e36: 83 35 84 f1  	ld	a1, -0xe8(s0)
80212e3a: 2a 86        	mv	a2, a0
80212e3c: 03 35 04 f2  	ld	a0, -0xe0(s0)
80212e40: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
80212e42: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
80212e46: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212e4a: 03 47 f4 f9  	lbu	a4, -0x61(s0)
80212e4e: 83 46 e4 f9  	lbu	a3, -0x62(s0)
80212e52: 97 40 00 00  	auipc	ra, 0x4
80212e56: e7 80 20 62  	jalr	0x622(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
80212e5a: 23 34 a4 f8  	sd	a0, -0x78(s0)
80212e5e: 23 38 b4 f8  	sd	a1, -0x70(s0)
80212e62: 13 05 84 f8  	addi	a0, s0, -0x78
80212e66: 97 e0 fe ff  	auipc	ra, 0xfffee
80212e6a: e7 80 80 48  	jalr	0x488(ra) <ekernel+0xffcb42ee>
80212e6e: 51 e1        	bnez	a0, 0x80212ef2 <.Lpcrel_hi29+0x30>
80212e70: 8d a0        	j	0x80212ed2 <.Lpcrel_hi29+0x10>
80212e72: 83 35 84 f2  	ld	a1, -0xd8(s0)
80212e76: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080212e7a <.Lpcrel_hi27>:
;         Self::new(x, Display::fmt)
80212e7a: 17 95 00 00  	auipc	a0, 0x9
80212e7e: 13 05 a5 cc  	addi	a0, a0, -0x336
80212e82: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80212e86: 23 38 b4 fa  	sd	a1, -0x50(s0)
80212e8a: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80212e8e: 83 35 04 fb  	ld	a1, -0x50(s0)
80212e92: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212e96: 23 3c b4 f6  	sd	a1, -0x88(s0)
80212e9a: 23 30 a4 f8  	sd	a0, -0x80(s0)

0000000080212e9e <.Lpcrel_hi28>:
80212e9e: 17 35 02 00  	auipc	a0, 0x23
80212ea2: 93 05 a5 0a  	addi	a1, a0, 0xaa
80212ea6: 13 05 84 f4  	addi	a0, s0, -0xb8
80212eaa: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80212eae: 93 06 84 f7  	addi	a3, s0, -0x88
80212eb2: 05 47        	li	a4, 0x1
80212eb4: 3a 86        	mv	a2, a4
80212eb6: 97 40 ff ff  	auipc	ra, 0xffff4
80212eba: e7 80 20 43  	jalr	0x432(ra) <ekernel+0xffcba2e8>
80212ebe: 03 35 84 f0  	ld	a0, -0xf8(s0)

0000000080212ec2 <.Lpcrel_hi29>:
80212ec2: 97 35 02 00  	auipc	a1, 0x23
80212ec6: 93 85 65 09  	addi	a1, a1, 0x96
80212eca: 97 d0 01 00  	auipc	ra, 0x1d
80212ece: e7 80 e0 2d  	jalr	0x2de(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80212ed2: 03 35 04 f3  	ld	a0, -0xd0(s0)
80212ed6: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
80212eda: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80212ede: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
80212ee2: 03 35 84 f3  	ld	a0, -0xc8(s0)
80212ee6: 83 35 04 f4  	ld	a1, -0xc0(s0)
80212eea: ee 70        	ld	ra, 0xf8(sp)
80212eec: 4e 74        	ld	s0, 0xf0(sp)
80212eee: 11 61        	addi	sp, sp, 0x100
80212ef0: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80212ef2: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
80212ef6: 01 b7        	j	0x80212df6 <.Lpcrel_hi25+0x2c>

0000000080212ef8 <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17h7cf5583f2d8e897eE>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
80212ef8: 11 71        	addi	sp, sp, -0x100
80212efa: 86 fd        	sd	ra, 0xf8(sp)
80212efc: a2 f9        	sd	s0, 0xf0(sp)
80212efe: 00 02        	addi	s0, sp, 0x100
80212f00: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80212f04: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
80212f08: 97 90 ff ff  	auipc	ra, 0xffff9
80212f0c: e7 80 c0 ea  	jalr	-0x154(ra) <ekernel+0xffcbedb4>

0000000080212f10 <.Lpcrel_hi30>:
;         let _intr_lock = CPUS.intr_lock();
80212f10: 17 95 33 00  	auipc	a0, 0x339
80212f14: 13 05 05 2f  	addi	a0, a0, 0x2f0
80212f18: 97 60 00 00  	auipc	ra, 0x6
80212f1c: e7 80 c0 62  	jalr	0x62c(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
80212f20: aa 85        	mv	a1, a0
80212f22: 03 35 84 f2  	ld	a0, -0xd8(s0)
80212f26: 2e 86        	mv	a2, a1
80212f28: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80212f2c: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212f30: 97 f0 ff ff  	auipc	ra, 0xfffff
80212f34: e7 80 00 7c  	jalr	0x7c0(ra) <ekernel+0xffcc56f0>
80212f38: 41 e1        	bnez	a0, 0x80212fb8 <.Lpcrel_hi31+0x50>
80212f3a: 09 a0        	j	0x80212f3c <.Lpcrel_hi30+0x2c>
80212f3c: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212f40: 41 05        	addi	a0, a0, 0x10
80212f42: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80212f46: 01 45        	li	a0, 0x0
80212f48: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80212f4c: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
80212f50: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80212f54: 23 34 a4 fe  	sd	a0, -0x18(s0)
80212f58: 03 35 84 fe  	ld	a0, -0x18(s0)
80212f5c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80212f60: 03 35 04 fe  	ld	a0, -0x20(s0)
80212f64: 23 3c a4 f0  	sd	a0, -0xe8(s0)

0000000080212f68 <.Lpcrel_hi31>:
;                 CPUS.my_cpu(),
80212f68: 17 95 33 00  	auipc	a0, 0x339
80212f6c: 13 05 85 29  	addi	a0, a0, 0x298
80212f70: 97 60 00 00  	auipc	ra, 0x6
80212f74: e7 80 c0 4c  	jalr	0x4cc(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80212f78: 83 36 04 f1  	ld	a3, -0xf0(s0)
80212f7c: 83 35 84 f1  	ld	a1, -0xe8(s0)
80212f80: 2a 86        	mv	a2, a0
80212f82: 03 35 04 f2  	ld	a0, -0xe0(s0)
80212f86: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
80212f88: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
80212f8c: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80212f90: 03 47 f4 f9  	lbu	a4, -0x61(s0)
80212f94: 83 46 e4 f9  	lbu	a3, -0x62(s0)
80212f98: 97 40 00 00  	auipc	ra, 0x4
80212f9c: e7 80 c0 4d  	jalr	0x4dc(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
80212fa0: 23 34 a4 f8  	sd	a0, -0x78(s0)
80212fa4: 23 38 b4 f8  	sd	a1, -0x70(s0)
80212fa8: 13 05 84 f8  	addi	a0, s0, -0x78
80212fac: 97 e0 fe ff  	auipc	ra, 0xfffee
80212fb0: e7 80 20 34  	jalr	0x342(ra) <ekernel+0xffcb42ee>
80212fb4: 51 e1        	bnez	a0, 0x80213038 <.Lpcrel_hi34+0x30>
80212fb6: 8d a0        	j	0x80213018 <.Lpcrel_hi34+0x10>
80212fb8: 83 35 84 f2  	ld	a1, -0xd8(s0)
80212fbc: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080212fc0 <.Lpcrel_hi32>:
;         Self::new(x, Display::fmt)
80212fc0: 17 95 00 00  	auipc	a0, 0x9
80212fc4: 13 05 45 b8  	addi	a0, a0, -0x47c
80212fc8: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80212fcc: 23 38 b4 fa  	sd	a1, -0x50(s0)
80212fd0: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80212fd4: 83 35 04 fb  	ld	a1, -0x50(s0)
80212fd8: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80212fdc: 23 3c b4 f6  	sd	a1, -0x88(s0)
80212fe0: 23 30 a4 f8  	sd	a0, -0x80(s0)

0000000080212fe4 <.Lpcrel_hi33>:
80212fe4: 17 35 02 00  	auipc	a0, 0x23
80212fe8: 93 05 45 f6  	addi	a1, a0, -0x9c
80212fec: 13 05 84 f4  	addi	a0, s0, -0xb8
80212ff0: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80212ff4: 93 06 84 f7  	addi	a3, s0, -0x88
80212ff8: 05 47        	li	a4, 0x1
80212ffa: 3a 86        	mv	a2, a4
80212ffc: 97 40 ff ff  	auipc	ra, 0xffff4
80213000: e7 80 c0 2e  	jalr	0x2ec(ra) <ekernel+0xffcba2e8>
80213004: 03 35 84 f0  	ld	a0, -0xf8(s0)

0000000080213008 <.Lpcrel_hi34>:
80213008: 97 35 02 00  	auipc	a1, 0x23
8021300c: 93 85 05 f5  	addi	a1, a1, -0xb0
80213010: 97 d0 01 00  	auipc	ra, 0x1d
80213014: e7 80 80 19  	jalr	0x198(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80213018: 03 35 04 f3  	ld	a0, -0xd0(s0)
8021301c: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
80213020: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80213024: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
80213028: 03 35 84 f3  	ld	a0, -0xc8(s0)
8021302c: 83 35 04 f4  	ld	a1, -0xc0(s0)
80213030: ee 70        	ld	ra, 0xf8(sp)
80213032: 4e 74        	ld	s0, 0xf0(sp)
80213034: 11 61        	addi	sp, sp, 0x100
80213036: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80213038: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
8021303c: 01 b7        	j	0x80212f3c <.Lpcrel_hi30+0x2c>

000000008021303e <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17ha2117664f4fe9433E>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
8021303e: 11 71        	addi	sp, sp, -0x100
80213040: 86 fd        	sd	ra, 0xf8(sp)
80213042: a2 f9        	sd	s0, 0xf0(sp)
80213044: 00 02        	addi	s0, sp, 0x100
80213046: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8021304a: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
8021304e: 97 90 ff ff  	auipc	ra, 0xffff9
80213052: e7 80 60 d6  	jalr	-0x29a(ra) <ekernel+0xffcbedb4>

0000000080213056 <.Lpcrel_hi35>:
;         let _intr_lock = CPUS.intr_lock();
80213056: 17 95 33 00  	auipc	a0, 0x339
8021305a: 13 05 a5 1a  	addi	a0, a0, 0x1aa
8021305e: 97 60 00 00  	auipc	ra, 0x6
80213062: e7 80 60 4e  	jalr	0x4e6(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
80213066: aa 85        	mv	a1, a0
80213068: 03 35 84 f2  	ld	a0, -0xd8(s0)
8021306c: 2e 86        	mv	a2, a1
8021306e: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80213072: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80213076: 97 00 00 00  	auipc	ra, 0x0
8021307a: e7 80 c0 90  	jalr	-0x6f4(ra) <_ZN2os4sync4spin13Spin$LT$T$GT$7holding17hfe30dad27cd64c2fE>
8021307e: 41 e1        	bnez	a0, 0x802130fe <.Lpcrel_hi36+0x50>
80213080: 09 a0        	j	0x80213082 <.Lpcrel_hi35+0x2c>
80213082: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80213086: 41 05        	addi	a0, a0, 0x10
80213088: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8021308c: 01 45        	li	a0, 0x0
8021308e: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80213092: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
80213096: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8021309a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021309e: 03 35 84 fe  	ld	a0, -0x18(s0)
802130a2: 23 30 a4 fe  	sd	a0, -0x20(s0)
802130a6: 03 35 04 fe  	ld	a0, -0x20(s0)
802130aa: 23 3c a4 f0  	sd	a0, -0xe8(s0)

00000000802130ae <.Lpcrel_hi36>:
;                 CPUS.my_cpu(),
802130ae: 17 95 33 00  	auipc	a0, 0x339
802130b2: 13 05 25 15  	addi	a0, a0, 0x152
802130b6: 97 60 00 00  	auipc	ra, 0x6
802130ba: e7 80 60 38  	jalr	0x386(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
802130be: 83 36 04 f1  	ld	a3, -0xf0(s0)
802130c2: 83 35 84 f1  	ld	a1, -0xe8(s0)
802130c6: 2a 86        	mv	a2, a0
802130c8: 03 35 04 f2  	ld	a0, -0xe0(s0)
802130cc: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
802130ce: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
802130d2: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
802130d6: 03 47 f4 f9  	lbu	a4, -0x61(s0)
802130da: 83 46 e4 f9  	lbu	a3, -0x62(s0)
802130de: 97 40 00 00  	auipc	ra, 0x4
802130e2: e7 80 60 39  	jalr	0x396(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
802130e6: 23 34 a4 f8  	sd	a0, -0x78(s0)
802130ea: 23 38 b4 f8  	sd	a1, -0x70(s0)
802130ee: 13 05 84 f8  	addi	a0, s0, -0x78
802130f2: 97 e0 fe ff  	auipc	ra, 0xfffee
802130f6: e7 80 c0 1f  	jalr	0x1fc(ra) <ekernel+0xffcb42ee>
802130fa: 51 e1        	bnez	a0, 0x8021317e <.Lpcrel_hi39+0x30>
802130fc: 8d a0        	j	0x8021315e <.Lpcrel_hi39+0x10>
802130fe: 83 35 84 f2  	ld	a1, -0xd8(s0)
80213102: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080213106 <.Lpcrel_hi37>:
;         Self::new(x, Display::fmt)
80213106: 17 95 00 00  	auipc	a0, 0x9
8021310a: 13 05 e5 a3  	addi	a0, a0, -0x5c2
8021310e: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80213112: 23 38 b4 fa  	sd	a1, -0x50(s0)
80213116: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
8021311a: 83 35 04 fb  	ld	a1, -0x50(s0)
8021311e: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80213122: 23 3c b4 f6  	sd	a1, -0x88(s0)
80213126: 23 30 a4 f8  	sd	a0, -0x80(s0)

000000008021312a <.Lpcrel_hi38>:
8021312a: 17 35 02 00  	auipc	a0, 0x23
8021312e: 93 05 e5 e1  	addi	a1, a0, -0x1e2
80213132: 13 05 84 f4  	addi	a0, s0, -0xb8
80213136: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8021313a: 93 06 84 f7  	addi	a3, s0, -0x88
8021313e: 05 47        	li	a4, 0x1
80213140: 3a 86        	mv	a2, a4
80213142: 97 40 ff ff  	auipc	ra, 0xffff4
80213146: e7 80 60 1a  	jalr	0x1a6(ra) <ekernel+0xffcba2e8>
8021314a: 03 35 84 f0  	ld	a0, -0xf8(s0)

000000008021314e <.Lpcrel_hi39>:
8021314e: 97 35 02 00  	auipc	a1, 0x23
80213152: 93 85 a5 e0  	addi	a1, a1, -0x1f6
80213156: 97 d0 01 00  	auipc	ra, 0x1d
8021315a: e7 80 20 05  	jalr	0x52(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
8021315e: 03 35 04 f3  	ld	a0, -0xd0(s0)
80213162: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
80213166: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021316a: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
8021316e: 03 35 84 f3  	ld	a0, -0xc8(s0)
80213172: 83 35 04 f4  	ld	a1, -0xc0(s0)
80213176: ee 70        	ld	ra, 0xf8(sp)
80213178: 4e 74        	ld	s0, 0xf0(sp)
8021317a: 11 61        	addi	sp, sp, 0x100
8021317c: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
8021317e: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
80213182: 01 b7        	j	0x80213082 <.Lpcrel_hi35+0x2c>

0000000080213184 <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17ha7c692bd7ee4f1cfE>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
80213184: 11 71        	addi	sp, sp, -0x100
80213186: 86 fd        	sd	ra, 0xf8(sp)
80213188: a2 f9        	sd	s0, 0xf0(sp)
8021318a: 00 02        	addi	s0, sp, 0x100
8021318c: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80213190: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
80213194: 97 90 ff ff  	auipc	ra, 0xffff9
80213198: e7 80 00 c2  	jalr	-0x3e0(ra) <ekernel+0xffcbedb4>

000000008021319c <.Lpcrel_hi40>:
;         let _intr_lock = CPUS.intr_lock();
8021319c: 17 95 33 00  	auipc	a0, 0x339
802131a0: 13 05 45 06  	addi	a0, a0, 0x64
802131a4: 97 60 00 00  	auipc	ra, 0x6
802131a8: e7 80 00 3a  	jalr	0x3a0(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
802131ac: aa 85        	mv	a1, a0
802131ae: 03 35 84 f2  	ld	a0, -0xd8(s0)
802131b2: 2e 86        	mv	a2, a1
802131b4: 23 38 c4 f2  	sd	a2, -0xd0(s0)
802131b8: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
802131bc: 97 f0 ff ff  	auipc	ra, 0xfffff
802131c0: e7 80 60 4d  	jalr	0x4d6(ra) <ekernel+0xffcc5692>
802131c4: 41 e1        	bnez	a0, 0x80213244 <.Lpcrel_hi41+0x50>
802131c6: 09 a0        	j	0x802131c8 <.Lpcrel_hi40+0x2c>
802131c8: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
802131cc: 41 05        	addi	a0, a0, 0x10
802131ce: 23 30 a4 f2  	sd	a0, -0xe0(s0)
802131d2: 01 45        	li	a0, 0x0
802131d4: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
802131d8: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
802131dc: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802131e0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802131e4: 03 35 84 fe  	ld	a0, -0x18(s0)
802131e8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802131ec: 03 35 04 fe  	ld	a0, -0x20(s0)
802131f0: 23 3c a4 f0  	sd	a0, -0xe8(s0)

00000000802131f4 <.Lpcrel_hi41>:
;                 CPUS.my_cpu(),
802131f4: 17 95 33 00  	auipc	a0, 0x339
802131f8: 13 05 c5 00  	addi	a0, a0, 0xc
802131fc: 97 60 00 00  	auipc	ra, 0x6
80213200: e7 80 00 24  	jalr	0x240(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80213204: 83 36 04 f1  	ld	a3, -0xf0(s0)
80213208: 83 35 84 f1  	ld	a1, -0xe8(s0)
8021320c: 2a 86        	mv	a2, a0
8021320e: 03 35 04 f2  	ld	a0, -0xe0(s0)
80213212: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
80213214: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
80213218: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
8021321c: 03 47 f4 f9  	lbu	a4, -0x61(s0)
80213220: 83 46 e4 f9  	lbu	a3, -0x62(s0)
80213224: 97 40 00 00  	auipc	ra, 0x4
80213228: e7 80 00 25  	jalr	0x250(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
8021322c: 23 34 a4 f8  	sd	a0, -0x78(s0)
80213230: 23 38 b4 f8  	sd	a1, -0x70(s0)
80213234: 13 05 84 f8  	addi	a0, s0, -0x78
80213238: 97 e0 fe ff  	auipc	ra, 0xfffee
8021323c: e7 80 60 0b  	jalr	0xb6(ra) <ekernel+0xffcb42ee>
80213240: 51 e1        	bnez	a0, 0x802132c4 <.Lpcrel_hi44+0x30>
80213242: 8d a0        	j	0x802132a4 <.Lpcrel_hi44+0x10>
80213244: 83 35 84 f2  	ld	a1, -0xd8(s0)
80213248: 23 30 b4 fc  	sd	a1, -0x40(s0)

000000008021324c <.Lpcrel_hi42>:
;         Self::new(x, Display::fmt)
8021324c: 17 95 00 00  	auipc	a0, 0x9
80213250: 13 05 85 8f  	addi	a0, a0, -0x708
80213254: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80213258: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021325c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80213260: 83 35 04 fb  	ld	a1, -0x50(s0)
80213264: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80213268: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021326c: 23 30 a4 f8  	sd	a0, -0x80(s0)

0000000080213270 <.Lpcrel_hi43>:
80213270: 17 35 02 00  	auipc	a0, 0x23
80213274: 93 05 85 cd  	addi	a1, a0, -0x328
80213278: 13 05 84 f4  	addi	a0, s0, -0xb8
8021327c: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80213280: 93 06 84 f7  	addi	a3, s0, -0x88
80213284: 05 47        	li	a4, 0x1
80213286: 3a 86        	mv	a2, a4
80213288: 97 40 ff ff  	auipc	ra, 0xffff4
8021328c: e7 80 00 06  	jalr	0x60(ra) <ekernel+0xffcba2e8>
80213290: 03 35 84 f0  	ld	a0, -0xf8(s0)

0000000080213294 <.Lpcrel_hi44>:
80213294: 97 35 02 00  	auipc	a1, 0x23
80213298: 93 85 45 cc  	addi	a1, a1, -0x33c
8021329c: 97 d0 01 00  	auipc	ra, 0x1d
802132a0: e7 80 c0 f0  	jalr	-0xf4(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
802132a4: 03 35 04 f3  	ld	a0, -0xd0(s0)
802132a8: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
802132ac: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802132b0: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
802132b4: 03 35 84 f3  	ld	a0, -0xc8(s0)
802132b8: 83 35 04 f4  	ld	a1, -0xc0(s0)
802132bc: ee 70        	ld	ra, 0xf8(sp)
802132be: 4e 74        	ld	s0, 0xf0(sp)
802132c0: 11 61        	addi	sp, sp, 0x100
802132c2: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
802132c4: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
802132c8: 01 b7        	j	0x802131c8 <.Lpcrel_hi40+0x2c>

00000000802132ca <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hbbb08997d044d342E>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
802132ca: 11 71        	addi	sp, sp, -0x100
802132cc: 86 fd        	sd	ra, 0xf8(sp)
802132ce: a2 f9        	sd	s0, 0xf0(sp)
802132d0: 00 02        	addi	s0, sp, 0x100
802132d2: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802132d6: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
802132da: 97 90 ff ff  	auipc	ra, 0xffff9
802132de: e7 80 a0 ad  	jalr	-0x526(ra) <ekernel+0xffcbedb4>

00000000802132e2 <.Lpcrel_hi45>:
;         let _intr_lock = CPUS.intr_lock();
802132e2: 17 95 33 00  	auipc	a0, 0x339
802132e6: 13 05 e5 f1  	addi	a0, a0, -0xe2
802132ea: 97 60 00 00  	auipc	ra, 0x6
802132ee: e7 80 a0 25  	jalr	0x25a(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
802132f2: aa 85        	mv	a1, a0
802132f4: 03 35 84 f2  	ld	a0, -0xd8(s0)
802132f8: 2e 86        	mv	a2, a1
802132fa: 23 38 c4 f2  	sd	a2, -0xd0(s0)
802132fe: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80213302: 97 f0 ff ff  	auipc	ra, 0xfffff
80213306: e7 80 c0 44  	jalr	0x44c(ra) <ekernel+0xffcc574e>
8021330a: 41 e1        	bnez	a0, 0x8021338a <.Lpcrel_hi46+0x50>
8021330c: 09 a0        	j	0x8021330e <.Lpcrel_hi45+0x2c>
8021330e: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80213312: 41 05        	addi	a0, a0, 0x10
80213314: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80213318: 01 45        	li	a0, 0x0
8021331a: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
8021331e: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
80213322: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80213326: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021332a: 03 35 84 fe  	ld	a0, -0x18(s0)
8021332e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80213332: 03 35 04 fe  	ld	a0, -0x20(s0)
80213336: 23 3c a4 f0  	sd	a0, -0xe8(s0)

000000008021333a <.Lpcrel_hi46>:
;                 CPUS.my_cpu(),
8021333a: 17 95 33 00  	auipc	a0, 0x339
8021333e: 13 05 65 ec  	addi	a0, a0, -0x13a
80213342: 97 60 00 00  	auipc	ra, 0x6
80213346: e7 80 a0 0f  	jalr	0xfa(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
8021334a: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021334e: 83 35 84 f1  	ld	a1, -0xe8(s0)
80213352: 2a 86        	mv	a2, a0
80213354: 03 35 04 f2  	ld	a0, -0xe0(s0)
80213358: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
8021335a: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
8021335e: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80213362: 03 47 f4 f9  	lbu	a4, -0x61(s0)
80213366: 83 46 e4 f9  	lbu	a3, -0x62(s0)
8021336a: 97 40 00 00  	auipc	ra, 0x4
8021336e: e7 80 a0 10  	jalr	0x10a(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
80213372: 23 34 a4 f8  	sd	a0, -0x78(s0)
80213376: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021337a: 13 05 84 f8  	addi	a0, s0, -0x78
8021337e: 97 e0 fe ff  	auipc	ra, 0xfffee
80213382: e7 80 00 f7  	jalr	-0x90(ra) <ekernel+0xffcb42ee>
80213386: 51 e1        	bnez	a0, 0x8021340a <.Lpcrel_hi49+0x30>
80213388: 8d a0        	j	0x802133ea <.Lpcrel_hi49+0x10>
8021338a: 83 35 84 f2  	ld	a1, -0xd8(s0)
8021338e: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080213392 <.Lpcrel_hi47>:
;         Self::new(x, Display::fmt)
80213392: 17 85 00 00  	auipc	a0, 0x8
80213396: 13 05 25 7b  	addi	a0, a0, 0x7b2
8021339a: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8021339e: 23 38 b4 fa  	sd	a1, -0x50(s0)
802133a2: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
802133a6: 83 35 04 fb  	ld	a1, -0x50(s0)
802133aa: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
802133ae: 23 3c b4 f6  	sd	a1, -0x88(s0)
802133b2: 23 30 a4 f8  	sd	a0, -0x80(s0)

00000000802133b6 <.Lpcrel_hi48>:
802133b6: 17 35 02 00  	auipc	a0, 0x23
802133ba: 93 05 25 b9  	addi	a1, a0, -0x46e
802133be: 13 05 84 f4  	addi	a0, s0, -0xb8
802133c2: 23 34 a4 f0  	sd	a0, -0xf8(s0)
802133c6: 93 06 84 f7  	addi	a3, s0, -0x88
802133ca: 05 47        	li	a4, 0x1
802133cc: 3a 86        	mv	a2, a4
802133ce: 97 40 ff ff  	auipc	ra, 0xffff4
802133d2: e7 80 a0 f1  	jalr	-0xe6(ra) <ekernel+0xffcba2e8>
802133d6: 03 35 84 f0  	ld	a0, -0xf8(s0)

00000000802133da <.Lpcrel_hi49>:
802133da: 97 35 02 00  	auipc	a1, 0x23
802133de: 93 85 e5 b7  	addi	a1, a1, -0x482
802133e2: 97 d0 01 00  	auipc	ra, 0x1d
802133e6: e7 80 60 dc  	jalr	-0x23a(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
802133ea: 03 35 04 f3  	ld	a0, -0xd0(s0)
802133ee: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
802133f2: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802133f6: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
802133fa: 03 35 84 f3  	ld	a0, -0xc8(s0)
802133fe: 83 35 04 f4  	ld	a1, -0xc0(s0)
80213402: ee 70        	ld	ra, 0xf8(sp)
80213404: 4e 74        	ld	s0, 0xf0(sp)
80213406: 11 61        	addi	sp, sp, 0x100
80213408: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
8021340a: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
8021340e: 01 b7        	j	0x8021330e <.Lpcrel_hi45+0x2c>

0000000080213410 <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hceadecca40d8a426E>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
80213410: 11 71        	addi	sp, sp, -0x100
80213412: 86 fd        	sd	ra, 0xf8(sp)
80213414: a2 f9        	sd	s0, 0xf0(sp)
80213416: 00 02        	addi	s0, sp, 0x100
80213418: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8021341c: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
80213420: 97 90 ff ff  	auipc	ra, 0xffff9
80213424: e7 80 40 99  	jalr	-0x66c(ra) <ekernel+0xffcbedb4>

0000000080213428 <.Lpcrel_hi50>:
;         let _intr_lock = CPUS.intr_lock();
80213428: 17 95 33 00  	auipc	a0, 0x339
8021342c: 13 05 85 dd  	addi	a0, a0, -0x228
80213430: 97 60 00 00  	auipc	ra, 0x6
80213434: e7 80 40 11  	jalr	0x114(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
80213438: aa 85        	mv	a1, a0
8021343a: 03 35 84 f2  	ld	a0, -0xd8(s0)
8021343e: 2e 86        	mv	a2, a1
80213440: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80213444: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
80213448: 97 f0 ff ff  	auipc	ra, 0xfffff
8021344c: e7 80 c0 4d  	jalr	0x4dc(ra) <ekernel+0xffcc5924>
80213450: 41 e1        	bnez	a0, 0x802134d0 <.Lpcrel_hi51+0x50>
80213452: 09 a0        	j	0x80213454 <.Lpcrel_hi50+0x2c>
80213454: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
80213458: 41 05        	addi	a0, a0, 0x10
8021345a: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8021345e: 01 45        	li	a0, 0x0
80213460: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
80213464: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
80213468: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8021346c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213470: 03 35 84 fe  	ld	a0, -0x18(s0)
80213474: 23 30 a4 fe  	sd	a0, -0x20(s0)
80213478: 03 35 04 fe  	ld	a0, -0x20(s0)
8021347c: 23 3c a4 f0  	sd	a0, -0xe8(s0)

0000000080213480 <.Lpcrel_hi51>:
;                 CPUS.my_cpu(),
80213480: 17 95 33 00  	auipc	a0, 0x339
80213484: 13 05 05 d8  	addi	a0, a0, -0x280
80213488: 97 60 00 00  	auipc	ra, 0x6
8021348c: e7 80 40 fb  	jalr	-0x4c(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80213490: 83 36 04 f1  	ld	a3, -0xf0(s0)
80213494: 83 35 84 f1  	ld	a1, -0xe8(s0)
80213498: 2a 86        	mv	a2, a0
8021349a: 03 35 04 f2  	ld	a0, -0xe0(s0)
8021349e: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
802134a0: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
802134a4: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
802134a8: 03 47 f4 f9  	lbu	a4, -0x61(s0)
802134ac: 83 46 e4 f9  	lbu	a3, -0x62(s0)
802134b0: 97 40 00 00  	auipc	ra, 0x4
802134b4: e7 80 40 fc  	jalr	-0x3c(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
802134b8: 23 34 a4 f8  	sd	a0, -0x78(s0)
802134bc: 23 38 b4 f8  	sd	a1, -0x70(s0)
802134c0: 13 05 84 f8  	addi	a0, s0, -0x78
802134c4: 97 e0 fe ff  	auipc	ra, 0xfffee
802134c8: e7 80 a0 e2  	jalr	-0x1d6(ra) <ekernel+0xffcb42ee>
802134cc: 51 e1        	bnez	a0, 0x80213550 <.Lpcrel_hi54+0x30>
802134ce: 8d a0        	j	0x80213530 <.Lpcrel_hi54+0x10>
802134d0: 83 35 84 f2  	ld	a1, -0xd8(s0)
802134d4: 23 30 b4 fc  	sd	a1, -0x40(s0)

00000000802134d8 <.Lpcrel_hi52>:
;         Self::new(x, Display::fmt)
802134d8: 17 85 00 00  	auipc	a0, 0x8
802134dc: 13 05 c5 66  	addi	a0, a0, 0x66c
802134e0: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
802134e4: 23 38 b4 fa  	sd	a1, -0x50(s0)
802134e8: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
802134ec: 83 35 04 fb  	ld	a1, -0x50(s0)
802134f0: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
802134f4: 23 3c b4 f6  	sd	a1, -0x88(s0)
802134f8: 23 30 a4 f8  	sd	a0, -0x80(s0)

00000000802134fc <.Lpcrel_hi53>:
802134fc: 17 35 02 00  	auipc	a0, 0x23
80213500: 93 05 c5 a4  	addi	a1, a0, -0x5b4
80213504: 13 05 84 f4  	addi	a0, s0, -0xb8
80213508: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8021350c: 93 06 84 f7  	addi	a3, s0, -0x88
80213510: 05 47        	li	a4, 0x1
80213512: 3a 86        	mv	a2, a4
80213514: 97 40 ff ff  	auipc	ra, 0xffff4
80213518: e7 80 40 dd  	jalr	-0x22c(ra) <ekernel+0xffcba2e8>
8021351c: 03 35 84 f0  	ld	a0, -0xf8(s0)

0000000080213520 <.Lpcrel_hi54>:
80213520: 97 35 02 00  	auipc	a1, 0x23
80213524: 93 85 85 a3  	addi	a1, a1, -0x5c8
80213528: 97 d0 01 00  	auipc	ra, 0x1d
8021352c: e7 80 00 c8  	jalr	-0x380(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80213530: 03 35 04 f3  	ld	a0, -0xd0(s0)
80213534: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
80213538: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021353c: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
80213540: 03 35 84 f3  	ld	a0, -0xc8(s0)
80213544: 83 35 04 f4  	ld	a1, -0xc0(s0)
80213548: ee 70        	ld	ra, 0xf8(sp)
8021354a: 4e 74        	ld	s0, 0xf0(sp)
8021354c: 11 61        	addi	sp, sp, 0x100
8021354e: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80213550: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
80213554: 01 b7        	j	0x80213454 <.Lpcrel_hi50+0x2c>

0000000080213556 <_ZN2os4sync4spin13Spin$LT$T$GT$4lock17hfec48f6386574451E>:
;     pub unsafe fn lock(&self)->SpinGuard<'_ ,T>{
80213556: 11 71        	addi	sp, sp, -0x100
80213558: 86 fd        	sd	ra, 0xf8(sp)
8021355a: a2 f9        	sd	s0, 0xf0(sp)
8021355c: 00 02        	addi	s0, sp, 0x100
8021355e: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80213562: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         intr_off();
80213566: 97 90 ff ff  	auipc	ra, 0xffff9
8021356a: e7 80 e0 84  	jalr	-0x7b2(ra) <ekernel+0xffcbedb4>

000000008021356e <.Lpcrel_hi55>:
;         let _intr_lock = CPUS.intr_lock();
8021356e: 17 95 33 00  	auipc	a0, 0x339
80213572: 13 05 25 c9  	addi	a0, a0, -0x36e
80213576: 97 60 00 00  	auipc	ra, 0x6
8021357a: e7 80 e0 fc  	jalr	-0x32(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
8021357e: aa 85        	mv	a1, a0
80213580: 03 35 84 f2  	ld	a0, -0xd8(s0)
80213584: 2e 86        	mv	a2, a1
80213586: 23 38 c4 f2  	sd	a2, -0xd0(s0)
8021358a: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
8021358e: 97 f0 ff ff  	auipc	ra, 0xfffff
80213592: e7 80 e0 21  	jalr	0x21e(ra) <ekernel+0xffcc57ac>
80213596: 41 e1        	bnez	a0, 0x80213616 <.Lpcrel_hi56+0x50>
80213598: 09 a0        	j	0x8021359a <.Lpcrel_hi55+0x2c>
8021359a: 03 35 84 f2  	ld	a0, -0xd8(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
8021359e: 41 05        	addi	a0, a0, 0x10
802135a0: 23 30 a4 f2  	sd	a0, -0xe0(s0)
802135a4: 01 45        	li	a0, 0x0
802135a6: 23 38 a4 f0  	sd	a0, -0xf0(s0)
; pub const fn without_provenance_mut<T>(addr: usize) -> *mut T {
802135aa: 23 38 a4 fc  	sd	a0, -0x30(s0)
;     data_pointer: *mut (),
802135ae: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802135b2: 23 34 a4 fe  	sd	a0, -0x18(s0)
802135b6: 03 35 84 fe  	ld	a0, -0x18(s0)
802135ba: 23 30 a4 fe  	sd	a0, -0x20(s0)
802135be: 03 35 04 fe  	ld	a0, -0x20(s0)
802135c2: 23 3c a4 f0  	sd	a0, -0xe8(s0)

00000000802135c6 <.Lpcrel_hi56>:
;                 CPUS.my_cpu(),
802135c6: 17 95 33 00  	auipc	a0, 0x339
802135ca: 13 05 a5 c3  	addi	a0, a0, -0x3c6
802135ce: 97 60 00 00  	auipc	ra, 0x6
802135d2: e7 80 e0 e6  	jalr	-0x192(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
802135d6: 83 36 04 f1  	ld	a3, -0xf0(s0)
802135da: 83 35 84 f1  	ld	a1, -0xe8(s0)
802135de: 2a 86        	mv	a2, a0
802135e0: 03 35 04 f2  	ld	a0, -0xe0(s0)
802135e4: 09 47        	li	a4, 0x2
;                 atomic::Ordering::Acquire,
802135e6: 23 0f e4 f8  	sb	a4, -0x62(s0)
;                 atomic::Ordering::Relaxed
802135ea: a3 0f d4 f8  	sb	a3, -0x61(s0)
;             if !self.locked.compare_exchange(ptr::null_mut(), 
802135ee: 03 47 f4 f9  	lbu	a4, -0x61(s0)
802135f2: 83 46 e4 f9  	lbu	a3, -0x62(s0)
802135f6: 97 40 00 00  	auipc	ra, 0x4
802135fa: e7 80 e0 e7  	jalr	-0x182(ra) <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>
802135fe: 23 34 a4 f8  	sd	a0, -0x78(s0)
80213602: 23 38 b4 f8  	sd	a1, -0x70(s0)
80213606: 13 05 84 f8  	addi	a0, s0, -0x78
8021360a: 97 e0 fe ff  	auipc	ra, 0xfffee
8021360e: e7 80 40 ce  	jalr	-0x31c(ra) <ekernel+0xffcb42ee>
80213612: 51 e1        	bnez	a0, 0x80213696 <.Lpcrel_hi59+0x30>
80213614: 8d a0        	j	0x80213676 <.Lpcrel_hi59+0x10>
80213616: 83 35 84 f2  	ld	a1, -0xd8(s0)
8021361a: 23 30 b4 fc  	sd	a1, -0x40(s0)

000000008021361e <.Lpcrel_hi57>:
;         Self::new(x, Display::fmt)
8021361e: 17 85 00 00  	auipc	a0, 0x8
80213622: 13 05 65 52  	addi	a0, a0, 0x526
80213626: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8021362a: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021362e: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80213632: 83 35 04 fb  	ld	a1, -0x50(s0)
80213636: 03 35 84 fb  	ld	a0, -0x48(s0)
;         assert!(!self.holding(), "acquire {}", self.name);
8021363a: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021363e: 23 30 a4 f8  	sd	a0, -0x80(s0)

0000000080213642 <.Lpcrel_hi58>:
80213642: 17 35 02 00  	auipc	a0, 0x23
80213646: 93 05 65 90  	addi	a1, a0, -0x6fa
8021364a: 13 05 84 f4  	addi	a0, s0, -0xb8
8021364e: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80213652: 93 06 84 f7  	addi	a3, s0, -0x88
80213656: 05 47        	li	a4, 0x1
80213658: 3a 86        	mv	a2, a4
8021365a: 97 40 ff ff  	auipc	ra, 0xffff4
8021365e: e7 80 e0 c8  	jalr	-0x372(ra) <ekernel+0xffcba2e8>
80213662: 03 35 84 f0  	ld	a0, -0xf8(s0)

0000000080213666 <.Lpcrel_hi59>:
80213666: 97 35 02 00  	auipc	a1, 0x23
8021366a: 93 85 25 8f  	addi	a1, a1, -0x70e
8021366e: 97 d0 01 00  	auipc	ra, 0x1d
80213672: e7 80 a0 b3  	jalr	-0x4c6(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80213676: 03 35 04 f3  	ld	a0, -0xd0(s0)
8021367a: 83 35 84 f2  	ld	a1, -0xd8(s0)
;                 break SpinGuard{
8021367e: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80213682: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;     }
80213686: 03 35 84 f3  	ld	a0, -0xc8(s0)
8021368a: 83 35 04 f4  	ld	a1, -0xc0(s0)
8021368e: ee 70        	ld	ra, 0xf8(sp)
80213690: 4e 74        	ld	s0, 0xf0(sp)
80213692: 11 61        	addi	sp, sp, 0x100
80213694: 82 80        	ret
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80213696: 0f 00 00 01  	fence	w, 0
;             core::hint::spin_loop()
8021369a: 01 b7        	j	0x8021359a <.Lpcrel_hi55+0x2c>

000000008021369c <_ZN2os4sync4spin13Spin$LT$T$GT$6unlock17ha667e6d35e7989a4E>:
;     pub fn unlock(guard: SpinGuard<'_, T>) -> &'_ Spin<T> {
8021369c: 79 71        	addi	sp, sp, -0x30
8021369e: 06 f4        	sd	ra, 0x28(sp)
802136a0: 22 f0        	sd	s0, 0x20(sp)
802136a2: 00 18        	addi	s0, sp, 0x30
802136a4: 23 30 a4 fe  	sd	a0, -0x20(s0)
802136a8: 23 34 b4 fe  	sd	a1, -0x18(s0)
802136ac: 13 05 04 fe  	addi	a0, s0, -0x20
802136b0: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         guard.spin()
802136b4: 97 00 00 00  	auipc	ra, 0x0
802136b8: e7 80 00 07  	jalr	0x70(ra) <_ZN2os4sync4spin18SpinGuard$LT$T$GT$4spin17h764677a2474902c1E>
802136bc: aa 85        	mv	a1, a0
802136be: 03 35 04 fd  	ld	a0, -0x30(s0)
802136c2: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     }
802136c6: 97 50 ff ff  	auipc	ra, 0xffff5
802136ca: e7 80 c0 e5  	jalr	-0x1a4(ra) <ekernel+0xffcbb522>
802136ce: 03 35 84 fd  	ld	a0, -0x28(s0)
802136d2: a2 70        	ld	ra, 0x28(sp)
802136d4: 02 74        	ld	s0, 0x20(sp)
802136d6: 45 61        	addi	sp, sp, 0x30
802136d8: 82 80        	ret

00000000802136da <_ZN2os4sync4spin13Spin$LT$T$GT$7get_mut17h2e1034c82b975636E>:
;     pub unsafe fn get_mut(&self) -> &mut T {
802136da: 01 11        	addi	sp, sp, -0x20
802136dc: 06 ec        	sd	ra, 0x18(sp)
802136de: 22 e8        	sd	s0, 0x10(sp)
802136e0: 00 10        	addi	s0, sp, 0x20
802136e2: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         &mut *self.data.get()
802136e6: 61 05        	addi	a0, a0, 0x18
802136e8: 23 34 a4 fe  	sd	a0, -0x18(s0)
802136ec: e2 60        	ld	ra, 0x18(sp)
802136ee: 42 64        	ld	s0, 0x10(sp)
;     }
802136f0: 05 61        	addi	sp, sp, 0x20
802136f2: 82 80        	ret

00000000802136f4 <_ZN2os4sync4spin13Spin$LT$T$GT$7get_mut17h37216b961e9bcf51E>:
;     pub unsafe fn get_mut(&self) -> &mut T {
802136f4: 01 11        	addi	sp, sp, -0x20
802136f6: 06 ec        	sd	ra, 0x18(sp)
802136f8: 22 e8        	sd	s0, 0x10(sp)
802136fa: 00 10        	addi	s0, sp, 0x20
802136fc: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         &mut *self.data.get()
80213700: 61 05        	addi	a0, a0, 0x18
80213702: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213706: e2 60        	ld	ra, 0x18(sp)
80213708: 42 64        	ld	s0, 0x10(sp)
;     }
8021370a: 05 61        	addi	sp, sp, 0x20
8021370c: 82 80        	ret

000000008021370e <_ZN2os4sync4spin18SpinGuard$LT$T$GT$4spin17h6cab3958c961163dE>:
;     pub fn spin(&self) -> &'a Spin<T> {
8021370e: 01 11        	addi	sp, sp, -0x20
80213710: 06 ec        	sd	ra, 0x18(sp)
80213712: 22 e8        	sd	s0, 0x10(sp)
80213714: 00 10        	addi	s0, sp, 0x20
80213716: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spin
8021371a: 08 61        	ld	a0, 0x0(a0)
8021371c: e2 60        	ld	ra, 0x18(sp)
8021371e: 42 64        	ld	s0, 0x10(sp)
;     }
80213720: 05 61        	addi	sp, sp, 0x20
80213722: 82 80        	ret

0000000080213724 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$4spin17h764677a2474902c1E>:
;     pub fn spin(&self) -> &'a Spin<T> {
80213724: 01 11        	addi	sp, sp, -0x20
80213726: 06 ec        	sd	ra, 0x18(sp)
80213728: 22 e8        	sd	s0, 0x10(sp)
8021372a: 00 10        	addi	s0, sp, 0x20
8021372c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spin
80213730: 08 61        	ld	a0, 0x0(a0)
80213732: e2 60        	ld	ra, 0x18(sp)
80213734: 42 64        	ld	s0, 0x10(sp)
;     }
80213736: 05 61        	addi	sp, sp, 0x20
80213738: 82 80        	ret

000000008021373a <_ZN2os4sync4spin18SpinGuard$LT$T$GT$4spin17hbcd908470b84edc0E>:
;     pub fn spin(&self) -> &'a Spin<T> {
8021373a: 01 11        	addi	sp, sp, -0x20
8021373c: 06 ec        	sd	ra, 0x18(sp)
8021373e: 22 e8        	sd	s0, 0x10(sp)
80213740: 00 10        	addi	s0, sp, 0x20
80213742: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spin
80213746: 08 61        	ld	a0, 0x0(a0)
80213748: e2 60        	ld	ra, 0x18(sp)
8021374a: 42 64        	ld	s0, 0x10(sp)
;     }
8021374c: 05 61        	addi	sp, sp, 0x20
8021374e: 82 80        	ret

0000000080213750 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h0d38aff749ab5af0E>:
;     pub fn holding(&self) -> bool {
80213750: 1d 71        	addi	sp, sp, -0x60
80213752: 86 ec        	sd	ra, 0x58(sp)
80213754: a2 e8        	sd	s0, 0x50(sp)
80213756: 80 10        	addi	s0, sp, 0x60
80213758: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021375c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
80213760: 97 80 ff ff  	auipc	ra, 0xffff8
80213764: e7 80 c0 62  	jalr	0x62c(ra) <ekernel+0xffcbed8c>
80213768: 09 ed        	bnez	a0, 0x80213782 <.Lpcrel_hi60>
8021376a: 09 a0        	j	0x8021376c <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h0d38aff749ab5af0E+0x1c>
8021376c: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
80213770: 08 61        	ld	a0, 0x0(a0)
80213772: 97 f0 ff ff  	auipc	ra, 0xfffff
80213776: e7 80 40 15  	jalr	0x154(ra) <ekernel+0xffcc58c6>
8021377a: e6 60        	ld	ra, 0x58(sp)
8021377c: 46 64        	ld	s0, 0x50(sp)
;     }
8021377e: 25 61        	addi	sp, sp, 0x60
80213780: 82 80        	ret

0000000080213782 <.Lpcrel_hi60>:
;         assert!(!intr_get(), "interrupts enabled");
80213782: 17 35 02 00  	auipc	a0, 0x23
80213786: 93 05 65 80  	addi	a1, a0, -0x7fa
8021378a: 13 05 84 fb  	addi	a0, s0, -0x48
8021378e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80213792: 05 46        	li	a2, 0x1
80213794: 97 40 ff ff  	auipc	ra, 0xffff4
80213798: e7 80 00 c2  	jalr	-0x3e0(ra) <ekernel+0xffcba3b4>
8021379c: 03 35 84 fa  	ld	a0, -0x58(s0)

00000000802137a0 <.Lpcrel_hi61>:
802137a0: 97 25 02 00  	auipc	a1, 0x22
802137a4: 93 85 85 7f  	addi	a1, a1, 0x7f8
802137a8: 97 d0 01 00  	auipc	ra, 0x1d
802137ac: e7 80 00 a0  	jalr	-0x600(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802137b0 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h1ce0e32824c23021E>:
;     pub fn holding(&self) -> bool {
802137b0: 1d 71        	addi	sp, sp, -0x60
802137b2: 86 ec        	sd	ra, 0x58(sp)
802137b4: a2 e8        	sd	s0, 0x50(sp)
802137b6: 80 10        	addi	s0, sp, 0x60
802137b8: 23 38 a4 fa  	sd	a0, -0x50(s0)
802137bc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
802137c0: 97 80 ff ff  	auipc	ra, 0xffff8
802137c4: e7 80 c0 5c  	jalr	0x5cc(ra) <ekernel+0xffcbed8c>
802137c8: 09 ed        	bnez	a0, 0x802137e2 <.Lpcrel_hi62>
802137ca: 09 a0        	j	0x802137cc <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h1ce0e32824c23021E+0x1c>
802137cc: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
802137d0: 08 61        	ld	a0, 0x0(a0)
802137d2: 97 f0 ff ff  	auipc	ra, 0xfffff
802137d6: e7 80 20 e6  	jalr	-0x19e(ra) <ekernel+0xffcc5634>
802137da: e6 60        	ld	ra, 0x58(sp)
802137dc: 46 64        	ld	s0, 0x50(sp)
;     }
802137de: 25 61        	addi	sp, sp, 0x60
802137e0: 82 80        	ret

00000000802137e2 <.Lpcrel_hi62>:
;         assert!(!intr_get(), "interrupts enabled");
802137e2: 17 25 02 00  	auipc	a0, 0x22
802137e6: 93 05 65 7a  	addi	a1, a0, 0x7a6
802137ea: 13 05 84 fb  	addi	a0, s0, -0x48
802137ee: 23 34 a4 fa  	sd	a0, -0x58(s0)
802137f2: 05 46        	li	a2, 0x1
802137f4: 97 40 ff ff  	auipc	ra, 0xffff4
802137f8: e7 80 00 bc  	jalr	-0x440(ra) <ekernel+0xffcba3b4>
802137fc: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080213800 <.Lpcrel_hi63>:
80213800: 97 25 02 00  	auipc	a1, 0x22
80213804: 93 85 85 79  	addi	a1, a1, 0x798
80213808: 97 d0 01 00  	auipc	ra, 0x1d
8021380c: e7 80 00 9a  	jalr	-0x660(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080213810 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h76795623b6983813E>:
;     pub fn holding(&self) -> bool {
80213810: 1d 71        	addi	sp, sp, -0x60
80213812: 86 ec        	sd	ra, 0x58(sp)
80213814: a2 e8        	sd	s0, 0x50(sp)
80213816: 80 10        	addi	s0, sp, 0x60
80213818: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021381c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
80213820: 97 80 ff ff  	auipc	ra, 0xffff8
80213824: e7 80 c0 56  	jalr	0x56c(ra) <ekernel+0xffcbed8c>
80213828: 09 ed        	bnez	a0, 0x80213842 <.Lpcrel_hi64>
8021382a: 09 a0        	j	0x8021382c <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h76795623b6983813E+0x1c>
8021382c: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
80213830: 08 61        	ld	a0, 0x0(a0)
80213832: 97 f0 ff ff  	auipc	ra, 0xfffff
80213836: e7 80 00 e6  	jalr	-0x1a0(ra) <ekernel+0xffcc5692>
8021383a: e6 60        	ld	ra, 0x58(sp)
8021383c: 46 64        	ld	s0, 0x50(sp)
;     }
8021383e: 25 61        	addi	sp, sp, 0x60
80213840: 82 80        	ret

0000000080213842 <.Lpcrel_hi64>:
;         assert!(!intr_get(), "interrupts enabled");
80213842: 17 25 02 00  	auipc	a0, 0x22
80213846: 93 05 65 74  	addi	a1, a0, 0x746
8021384a: 13 05 84 fb  	addi	a0, s0, -0x48
8021384e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80213852: 05 46        	li	a2, 0x1
80213854: 97 40 ff ff  	auipc	ra, 0xffff4
80213858: e7 80 00 b6  	jalr	-0x4a0(ra) <ekernel+0xffcba3b4>
8021385c: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080213860 <.Lpcrel_hi65>:
80213860: 97 25 02 00  	auipc	a1, 0x22
80213864: 93 85 85 73  	addi	a1, a1, 0x738
80213868: 97 d0 01 00  	auipc	ra, 0x1d
8021386c: e7 80 00 94  	jalr	-0x6c0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080213870 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h8460a60971567558E>:
;     pub fn holding(&self) -> bool {
80213870: 1d 71        	addi	sp, sp, -0x60
80213872: 86 ec        	sd	ra, 0x58(sp)
80213874: a2 e8        	sd	s0, 0x50(sp)
80213876: 80 10        	addi	s0, sp, 0x60
80213878: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021387c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
80213880: 97 80 ff ff  	auipc	ra, 0xffff8
80213884: e7 80 c0 50  	jalr	0x50c(ra) <ekernel+0xffcbed8c>
80213888: 09 ed        	bnez	a0, 0x802138a2 <.Lpcrel_hi66>
8021388a: 09 a0        	j	0x8021388c <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h8460a60971567558E+0x1c>
8021388c: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
80213890: 08 61        	ld	a0, 0x0(a0)
80213892: 97 f0 ff ff  	auipc	ra, 0xfffff
80213896: e7 80 a0 f1  	jalr	-0xe6(ra) <ekernel+0xffcc57ac>
8021389a: e6 60        	ld	ra, 0x58(sp)
8021389c: 46 64        	ld	s0, 0x50(sp)
;     }
8021389e: 25 61        	addi	sp, sp, 0x60
802138a0: 82 80        	ret

00000000802138a2 <.Lpcrel_hi66>:
;         assert!(!intr_get(), "interrupts enabled");
802138a2: 17 25 02 00  	auipc	a0, 0x22
802138a6: 93 05 65 6e  	addi	a1, a0, 0x6e6
802138aa: 13 05 84 fb  	addi	a0, s0, -0x48
802138ae: 23 34 a4 fa  	sd	a0, -0x58(s0)
802138b2: 05 46        	li	a2, 0x1
802138b4: 97 40 ff ff  	auipc	ra, 0xffff4
802138b8: e7 80 00 b0  	jalr	-0x500(ra) <ekernel+0xffcba3b4>
802138bc: 03 35 84 fa  	ld	a0, -0x58(s0)

00000000802138c0 <.Lpcrel_hi67>:
802138c0: 97 25 02 00  	auipc	a1, 0x22
802138c4: 93 85 85 6d  	addi	a1, a1, 0x6d8
802138c8: 97 d0 01 00  	auipc	ra, 0x1d
802138cc: e7 80 00 8e  	jalr	-0x720(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802138d0 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h99943c48b817664dE>:
;     pub fn holding(&self) -> bool {
802138d0: 1d 71        	addi	sp, sp, -0x60
802138d2: 86 ec        	sd	ra, 0x58(sp)
802138d4: a2 e8        	sd	s0, 0x50(sp)
802138d6: 80 10        	addi	s0, sp, 0x60
802138d8: 23 38 a4 fa  	sd	a0, -0x50(s0)
802138dc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
802138e0: 97 80 ff ff  	auipc	ra, 0xffff8
802138e4: e7 80 c0 4a  	jalr	0x4ac(ra) <ekernel+0xffcbed8c>
802138e8: 09 ed        	bnez	a0, 0x80213902 <.Lpcrel_hi68>
802138ea: 09 a0        	j	0x802138ec <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17h99943c48b817664dE+0x1c>
802138ec: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
802138f0: 08 61        	ld	a0, 0x0(a0)
802138f2: 97 f0 ff ff  	auipc	ra, 0xfffff
802138f6: e7 80 80 f1  	jalr	-0xe8(ra) <ekernel+0xffcc580a>
802138fa: e6 60        	ld	ra, 0x58(sp)
802138fc: 46 64        	ld	s0, 0x50(sp)
;     }
802138fe: 25 61        	addi	sp, sp, 0x60
80213900: 82 80        	ret

0000000080213902 <.Lpcrel_hi68>:
;         assert!(!intr_get(), "interrupts enabled");
80213902: 17 25 02 00  	auipc	a0, 0x22
80213906: 93 05 65 68  	addi	a1, a0, 0x686
8021390a: 13 05 84 fb  	addi	a0, s0, -0x48
8021390e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80213912: 05 46        	li	a2, 0x1
80213914: 97 40 ff ff  	auipc	ra, 0xffff4
80213918: e7 80 00 aa  	jalr	-0x560(ra) <ekernel+0xffcba3b4>
8021391c: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080213920 <.Lpcrel_hi69>:
80213920: 97 25 02 00  	auipc	a1, 0x22
80213924: 93 85 85 67  	addi	a1, a1, 0x678
80213928: 97 d0 01 00  	auipc	ra, 0x1d
8021392c: e7 80 00 88  	jalr	-0x780(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080213930 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17ha48e7fa2bf3416f6E>:
;     pub fn holding(&self) -> bool {
80213930: 1d 71        	addi	sp, sp, -0x60
80213932: 86 ec        	sd	ra, 0x58(sp)
80213934: a2 e8        	sd	s0, 0x50(sp)
80213936: 80 10        	addi	s0, sp, 0x60
80213938: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021393c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
80213940: 97 80 ff ff  	auipc	ra, 0xffff8
80213944: e7 80 c0 44  	jalr	0x44c(ra) <ekernel+0xffcbed8c>
80213948: 09 ed        	bnez	a0, 0x80213962 <.Lpcrel_hi70>
8021394a: 09 a0        	j	0x8021394c <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17ha48e7fa2bf3416f6E+0x1c>
8021394c: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
80213950: 08 61        	ld	a0, 0x0(a0)
80213952: 97 f0 ff ff  	auipc	ra, 0xfffff
80213956: e7 80 20 fd  	jalr	-0x2e(ra) <ekernel+0xffcc5924>
8021395a: e6 60        	ld	ra, 0x58(sp)
8021395c: 46 64        	ld	s0, 0x50(sp)
;     }
8021395e: 25 61        	addi	sp, sp, 0x60
80213960: 82 80        	ret

0000000080213962 <.Lpcrel_hi70>:
;         assert!(!intr_get(), "interrupts enabled");
80213962: 17 25 02 00  	auipc	a0, 0x22
80213966: 93 05 65 62  	addi	a1, a0, 0x626
8021396a: 13 05 84 fb  	addi	a0, s0, -0x48
8021396e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80213972: 05 46        	li	a2, 0x1
80213974: 97 40 ff ff  	auipc	ra, 0xffff4
80213978: e7 80 00 a4  	jalr	-0x5c0(ra) <ekernel+0xffcba3b4>
8021397c: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080213980 <.Lpcrel_hi71>:
80213980: 97 25 02 00  	auipc	a1, 0x22
80213984: 93 85 85 61  	addi	a1, a1, 0x618
80213988: 97 d0 01 00  	auipc	ra, 0x1d
8021398c: e7 80 00 82  	jalr	-0x7e0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080213990 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17hc95cede140248586E>:
;     pub fn holding(&self) -> bool {
80213990: 1d 71        	addi	sp, sp, -0x60
80213992: 86 ec        	sd	ra, 0x58(sp)
80213994: a2 e8        	sd	s0, 0x50(sp)
80213996: 80 10        	addi	s0, sp, 0x60
80213998: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021399c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
802139a0: 97 80 ff ff  	auipc	ra, 0xffff8
802139a4: e7 80 c0 3e  	jalr	0x3ec(ra) <ekernel+0xffcbed8c>
802139a8: 09 ed        	bnez	a0, 0x802139c2 <.Lpcrel_hi72>
802139aa: 09 a0        	j	0x802139ac <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17hc95cede140248586E+0x1c>
802139ac: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
802139b0: 08 61        	ld	a0, 0x0(a0)
802139b2: 97 f0 ff ff  	auipc	ra, 0xfffff
802139b6: e7 80 00 fd  	jalr	-0x30(ra) <ekernel+0xffcc5982>
802139ba: e6 60        	ld	ra, 0x58(sp)
802139bc: 46 64        	ld	s0, 0x50(sp)
;     }
802139be: 25 61        	addi	sp, sp, 0x60
802139c0: 82 80        	ret

00000000802139c2 <.Lpcrel_hi72>:
;         assert!(!intr_get(), "interrupts enabled");
802139c2: 17 25 02 00  	auipc	a0, 0x22
802139c6: 93 05 65 5c  	addi	a1, a0, 0x5c6
802139ca: 13 05 84 fb  	addi	a0, s0, -0x48
802139ce: 23 34 a4 fa  	sd	a0, -0x58(s0)
802139d2: 05 46        	li	a2, 0x1
802139d4: 97 40 ff ff  	auipc	ra, 0xffff4
802139d8: e7 80 00 9e  	jalr	-0x620(ra) <ekernel+0xffcba3b4>
802139dc: 03 35 84 fa  	ld	a0, -0x58(s0)

00000000802139e0 <.Lpcrel_hi73>:
802139e0: 97 25 02 00  	auipc	a1, 0x22
802139e4: 93 85 85 5b  	addi	a1, a1, 0x5b8
802139e8: 97 c0 01 00  	auipc	ra, 0x1c
802139ec: e7 80 00 7c  	jalr	0x7c0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802139f0 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17heb32da5b46e9869cE>:
;     pub fn holding(&self) -> bool {
802139f0: 1d 71        	addi	sp, sp, -0x60
802139f2: 86 ec        	sd	ra, 0x58(sp)
802139f4: a2 e8        	sd	s0, 0x50(sp)
802139f6: 80 10        	addi	s0, sp, 0x60
802139f8: 23 38 a4 fa  	sd	a0, -0x50(s0)
802139fc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
80213a00: 97 80 ff ff  	auipc	ra, 0xffff8
80213a04: e7 80 c0 38  	jalr	0x38c(ra) <ekernel+0xffcbed8c>
80213a08: 09 ed        	bnez	a0, 0x80213a22 <.Lpcrel_hi74>
80213a0a: 09 a0        	j	0x80213a0c <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17heb32da5b46e9869cE+0x1c>
80213a0c: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
80213a10: 08 61        	ld	a0, 0x0(a0)
80213a12: 97 f0 ff ff  	auipc	ra, 0xfffff
80213a16: e7 80 e0 cd  	jalr	-0x322(ra) <ekernel+0xffcc56f0>
80213a1a: e6 60        	ld	ra, 0x58(sp)
80213a1c: 46 64        	ld	s0, 0x50(sp)
;     }
80213a1e: 25 61        	addi	sp, sp, 0x60
80213a20: 82 80        	ret

0000000080213a22 <.Lpcrel_hi74>:
;         assert!(!intr_get(), "interrupts enabled");
80213a22: 17 25 02 00  	auipc	a0, 0x22
80213a26: 93 05 65 56  	addi	a1, a0, 0x566
80213a2a: 13 05 84 fb  	addi	a0, s0, -0x48
80213a2e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80213a32: 05 46        	li	a2, 0x1
80213a34: 97 40 ff ff  	auipc	ra, 0xffff4
80213a38: e7 80 00 98  	jalr	-0x680(ra) <ekernel+0xffcba3b4>
80213a3c: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080213a40 <.Lpcrel_hi75>:
80213a40: 97 25 02 00  	auipc	a1, 0x22
80213a44: 93 85 85 55  	addi	a1, a1, 0x558
80213a48: 97 c0 01 00  	auipc	ra, 0x1c
80213a4c: e7 80 00 76  	jalr	0x760(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080213a50 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17hec37ec12198c12e0E>:
;     pub fn holding(&self) -> bool {
80213a50: 1d 71        	addi	sp, sp, -0x60
80213a52: 86 ec        	sd	ra, 0x58(sp)
80213a54: a2 e8        	sd	s0, 0x50(sp)
80213a56: 80 10        	addi	s0, sp, 0x60
80213a58: 23 38 a4 fa  	sd	a0, -0x50(s0)
80213a5c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
80213a60: 97 80 ff ff  	auipc	ra, 0xffff8
80213a64: e7 80 c0 32  	jalr	0x32c(ra) <ekernel+0xffcbed8c>
80213a68: 09 ed        	bnez	a0, 0x80213a82 <.Lpcrel_hi76>
80213a6a: 09 a0        	j	0x80213a6c <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17hec37ec12198c12e0E+0x1c>
80213a6c: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
80213a70: 08 61        	ld	a0, 0x0(a0)
80213a72: 97 f0 ff ff  	auipc	ra, 0xfffff
80213a76: e7 80 60 df  	jalr	-0x20a(ra) <ekernel+0xffcc5868>
80213a7a: e6 60        	ld	ra, 0x58(sp)
80213a7c: 46 64        	ld	s0, 0x50(sp)
;     }
80213a7e: 25 61        	addi	sp, sp, 0x60
80213a80: 82 80        	ret

0000000080213a82 <.Lpcrel_hi76>:
;         assert!(!intr_get(), "interrupts enabled");
80213a82: 17 25 02 00  	auipc	a0, 0x22
80213a86: 93 05 65 50  	addi	a1, a0, 0x506
80213a8a: 13 05 84 fb  	addi	a0, s0, -0x48
80213a8e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80213a92: 05 46        	li	a2, 0x1
80213a94: 97 40 ff ff  	auipc	ra, 0xffff4
80213a98: e7 80 00 92  	jalr	-0x6e0(ra) <ekernel+0xffcba3b4>
80213a9c: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080213aa0 <.Lpcrel_hi77>:
80213aa0: 97 25 02 00  	auipc	a1, 0x22
80213aa4: 93 85 85 4f  	addi	a1, a1, 0x4f8
80213aa8: 97 c0 01 00  	auipc	ra, 0x1c
80213aac: e7 80 00 70  	jalr	0x700(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080213ab0 <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17hf6229c873a249607E>:
;     pub fn holding(&self) -> bool {
80213ab0: 1d 71        	addi	sp, sp, -0x60
80213ab2: 86 ec        	sd	ra, 0x58(sp)
80213ab4: a2 e8        	sd	s0, 0x50(sp)
80213ab6: 80 10        	addi	s0, sp, 0x60
80213ab8: 23 38 a4 fa  	sd	a0, -0x50(s0)
80213abc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert!(!intr_get(), "interrupts enabled");
80213ac0: 97 80 ff ff  	auipc	ra, 0xffff8
80213ac4: e7 80 c0 2c  	jalr	0x2cc(ra) <ekernel+0xffcbed8c>
80213ac8: 09 ed        	bnez	a0, 0x80213ae2 <.Lpcrel_hi78>
80213aca: 09 a0        	j	0x80213acc <_ZN2os4sync4spin18SpinGuard$LT$T$GT$7holding17hf6229c873a249607E+0x1c>
80213acc: 03 35 04 fb  	ld	a0, -0x50(s0)
;         self.spin.holding() 
80213ad0: 08 61        	ld	a0, 0x0(a0)
80213ad2: 97 f0 ff ff  	auipc	ra, 0xfffff
80213ad6: e7 80 c0 c7  	jalr	-0x384(ra) <ekernel+0xffcc574e>
80213ada: e6 60        	ld	ra, 0x58(sp)
80213adc: 46 64        	ld	s0, 0x50(sp)
;     }
80213ade: 25 61        	addi	sp, sp, 0x60
80213ae0: 82 80        	ret

0000000080213ae2 <.Lpcrel_hi78>:
;         assert!(!intr_get(), "interrupts enabled");
80213ae2: 17 25 02 00  	auipc	a0, 0x22
80213ae6: 93 05 65 4a  	addi	a1, a0, 0x4a6
80213aea: 13 05 84 fb  	addi	a0, s0, -0x48
80213aee: 23 34 a4 fa  	sd	a0, -0x58(s0)
80213af2: 05 46        	li	a2, 0x1
80213af4: 97 40 ff ff  	auipc	ra, 0xffff4
80213af8: e7 80 00 8c  	jalr	-0x740(ra) <ekernel+0xffcba3b4>
80213afc: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080213b00 <.Lpcrel_hi79>:
80213b00: 97 25 02 00  	auipc	a1, 0x22
80213b04: 93 85 85 49  	addi	a1, a1, 0x498
80213b08: 97 c0 01 00  	auipc	ra, 0x1c
80213b0c: e7 80 00 6a  	jalr	0x6a0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080213b10 <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1a38979bb7aaaaf9E>:
;     fn deref(&self) -> &Self::Target {
80213b10: 01 11        	addi	sp, sp, -0x20
80213b12: 06 ec        	sd	ra, 0x18(sp)
80213b14: 22 e8        	sd	s0, 0x10(sp)
80213b16: 00 10        	addi	s0, sp, 0x20
80213b18: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &*self.spin.data.get() }
80213b1c: 08 61        	ld	a0, 0x0(a0)
80213b1e: 61 05        	addi	a0, a0, 0x18
80213b20: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213b24: e2 60        	ld	ra, 0x18(sp)
80213b26: 42 64        	ld	s0, 0x10(sp)
;     }
80213b28: 05 61        	addi	sp, sp, 0x20
80213b2a: 82 80        	ret

0000000080213b2c <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1d874e7b942e1a66E>:
;     fn deref(&self) -> &Self::Target {
80213b2c: 01 11        	addi	sp, sp, -0x20
80213b2e: 06 ec        	sd	ra, 0x18(sp)
80213b30: 22 e8        	sd	s0, 0x10(sp)
80213b32: 00 10        	addi	s0, sp, 0x20
80213b34: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &*self.spin.data.get() }
80213b38: 08 61        	ld	a0, 0x0(a0)
80213b3a: 61 05        	addi	a0, a0, 0x18
80213b3c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213b40: e2 60        	ld	ra, 0x18(sp)
80213b42: 42 64        	ld	s0, 0x10(sp)
;     }
80213b44: 05 61        	addi	sp, sp, 0x20
80213b46: 82 80        	ret

0000000080213b48 <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h934bd110e623f0daE>:
;     fn deref(&self) -> &Self::Target {
80213b48: 01 11        	addi	sp, sp, -0x20
80213b4a: 06 ec        	sd	ra, 0x18(sp)
80213b4c: 22 e8        	sd	s0, 0x10(sp)
80213b4e: 00 10        	addi	s0, sp, 0x20
80213b50: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &*self.spin.data.get() }
80213b54: 08 61        	ld	a0, 0x0(a0)
80213b56: 61 05        	addi	a0, a0, 0x18
80213b58: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213b5c: e2 60        	ld	ra, 0x18(sp)
80213b5e: 42 64        	ld	s0, 0x10(sp)
;     }
80213b60: 05 61        	addi	sp, sp, 0x20
80213b62: 82 80        	ret

0000000080213b64 <_ZN78_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd8605aecacba44f4E>:
;     fn deref(&self) -> &Self::Target {
80213b64: 01 11        	addi	sp, sp, -0x20
80213b66: 06 ec        	sd	ra, 0x18(sp)
80213b68: 22 e8        	sd	s0, 0x10(sp)
80213b6a: 00 10        	addi	s0, sp, 0x20
80213b6c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &*self.spin.data.get() }
80213b70: 08 61        	ld	a0, 0x0(a0)
80213b72: 61 05        	addi	a0, a0, 0x18
80213b74: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213b78: e2 60        	ld	ra, 0x18(sp)
80213b7a: 42 64        	ld	s0, 0x10(sp)
;     }
80213b7c: 05 61        	addi	sp, sp, 0x20
80213b7e: 82 80        	ret

0000000080213b80 <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h0e1f0ba44edcaacaE>:
;     fn deref_mut(&mut self) -> &mut Self::Target {
80213b80: 01 11        	addi	sp, sp, -0x20
80213b82: 06 ec        	sd	ra, 0x18(sp)
80213b84: 22 e8        	sd	s0, 0x10(sp)
80213b86: 00 10        	addi	s0, sp, 0x20
80213b88: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.spin.data.get() }
80213b8c: 08 61        	ld	a0, 0x0(a0)
80213b8e: 61 05        	addi	a0, a0, 0x18
80213b90: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213b94: e2 60        	ld	ra, 0x18(sp)
80213b96: 42 64        	ld	s0, 0x10(sp)
;     }
80213b98: 05 61        	addi	sp, sp, 0x20
80213b9a: 82 80        	ret

0000000080213b9c <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h246a2a73a4ae178aE>:
;     fn deref_mut(&mut self) -> &mut Self::Target {
80213b9c: 01 11        	addi	sp, sp, -0x20
80213b9e: 06 ec        	sd	ra, 0x18(sp)
80213ba0: 22 e8        	sd	s0, 0x10(sp)
80213ba2: 00 10        	addi	s0, sp, 0x20
80213ba4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.spin.data.get() }
80213ba8: 08 61        	ld	a0, 0x0(a0)
80213baa: 61 05        	addi	a0, a0, 0x18
80213bac: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213bb0: e2 60        	ld	ra, 0x18(sp)
80213bb2: 42 64        	ld	s0, 0x10(sp)
;     }
80213bb4: 05 61        	addi	sp, sp, 0x20
80213bb6: 82 80        	ret

0000000080213bb8 <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h2f6946418d8b1239E>:
;     fn deref_mut(&mut self) -> &mut Self::Target {
80213bb8: 01 11        	addi	sp, sp, -0x20
80213bba: 06 ec        	sd	ra, 0x18(sp)
80213bbc: 22 e8        	sd	s0, 0x10(sp)
80213bbe: 00 10        	addi	s0, sp, 0x20
80213bc0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.spin.data.get() }
80213bc4: 08 61        	ld	a0, 0x0(a0)
80213bc6: 61 05        	addi	a0, a0, 0x18
80213bc8: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213bcc: e2 60        	ld	ra, 0x18(sp)
80213bce: 42 64        	ld	s0, 0x10(sp)
;     }
80213bd0: 05 61        	addi	sp, sp, 0x20
80213bd2: 82 80        	ret

0000000080213bd4 <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h308bf63ab4d702c3E>:
;     fn deref_mut(&mut self) -> &mut Self::Target {
80213bd4: 01 11        	addi	sp, sp, -0x20
80213bd6: 06 ec        	sd	ra, 0x18(sp)
80213bd8: 22 e8        	sd	s0, 0x10(sp)
80213bda: 00 10        	addi	s0, sp, 0x20
80213bdc: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.spin.data.get() }
80213be0: 08 61        	ld	a0, 0x0(a0)
80213be2: 61 05        	addi	a0, a0, 0x18
80213be4: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213be8: e2 60        	ld	ra, 0x18(sp)
80213bea: 42 64        	ld	s0, 0x10(sp)
;     }
80213bec: 05 61        	addi	sp, sp, 0x20
80213bee: 82 80        	ret

0000000080213bf0 <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h41a7dc396ae95469E>:
;     fn deref_mut(&mut self) -> &mut Self::Target {
80213bf0: 01 11        	addi	sp, sp, -0x20
80213bf2: 06 ec        	sd	ra, 0x18(sp)
80213bf4: 22 e8        	sd	s0, 0x10(sp)
80213bf6: 00 10        	addi	s0, sp, 0x20
80213bf8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.spin.data.get() }
80213bfc: 08 61        	ld	a0, 0x0(a0)
80213bfe: 61 05        	addi	a0, a0, 0x18
80213c00: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213c04: e2 60        	ld	ra, 0x18(sp)
80213c06: 42 64        	ld	s0, 0x10(sp)
;     }
80213c08: 05 61        	addi	sp, sp, 0x20
80213c0a: 82 80        	ret

0000000080213c0c <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7468fcc28aa012ddE>:
;     fn deref_mut(&mut self) -> &mut Self::Target {
80213c0c: 01 11        	addi	sp, sp, -0x20
80213c0e: 06 ec        	sd	ra, 0x18(sp)
80213c10: 22 e8        	sd	s0, 0x10(sp)
80213c12: 00 10        	addi	s0, sp, 0x20
80213c14: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.spin.data.get() }
80213c18: 08 61        	ld	a0, 0x0(a0)
80213c1a: 61 05        	addi	a0, a0, 0x18
80213c1c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213c20: e2 60        	ld	ra, 0x18(sp)
80213c22: 42 64        	ld	s0, 0x10(sp)
;     }
80213c24: 05 61        	addi	sp, sp, 0x20
80213c26: 82 80        	ret

0000000080213c28 <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h772605f4d74af4efE>:
;     fn deref_mut(&mut self) -> &mut Self::Target {
80213c28: 01 11        	addi	sp, sp, -0x20
80213c2a: 06 ec        	sd	ra, 0x18(sp)
80213c2c: 22 e8        	sd	s0, 0x10(sp)
80213c2e: 00 10        	addi	s0, sp, 0x20
80213c30: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.spin.data.get() }
80213c34: 08 61        	ld	a0, 0x0(a0)
80213c36: 61 05        	addi	a0, a0, 0x18
80213c38: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213c3c: e2 60        	ld	ra, 0x18(sp)
80213c3e: 42 64        	ld	s0, 0x10(sp)
;     }
80213c40: 05 61        	addi	sp, sp, 0x20
80213c42: 82 80        	ret

0000000080213c44 <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hddcb379c916be380E>:
;     fn deref_mut(&mut self) -> &mut Self::Target {
80213c44: 01 11        	addi	sp, sp, -0x20
80213c46: 06 ec        	sd	ra, 0x18(sp)
80213c48: 22 e8        	sd	s0, 0x10(sp)
80213c4a: 00 10        	addi	s0, sp, 0x20
80213c4c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.spin.data.get() }
80213c50: 08 61        	ld	a0, 0x0(a0)
80213c52: 61 05        	addi	a0, a0, 0x18
80213c54: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213c58: e2 60        	ld	ra, 0x18(sp)
80213c5a: 42 64        	ld	s0, 0x10(sp)
;     }
80213c5c: 05 61        	addi	sp, sp, 0x20
80213c5e: 82 80        	ret

0000000080213c60 <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hff3525feedbc61beE>:
;     fn deref_mut(&mut self) -> &mut Self::Target {
80213c60: 01 11        	addi	sp, sp, -0x20
80213c62: 06 ec        	sd	ra, 0x18(sp)
80213c64: 22 e8        	sd	s0, 0x10(sp)
80213c66: 00 10        	addi	s0, sp, 0x20
80213c68: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.spin.data.get() }
80213c6c: 08 61        	ld	a0, 0x0(a0)
80213c6e: 61 05        	addi	a0, a0, 0x18
80213c70: 23 34 a4 fe  	sd	a0, -0x18(s0)
80213c74: e2 60        	ld	ra, 0x18(sp)
80213c76: 42 64        	ld	s0, 0x10(sp)
;     }
80213c78: 05 61        	addi	sp, sp, 0x20
80213c7a: 82 80        	ret

0000000080213c7c <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17hf24a76158b220961E>:
;     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
80213c7c: 79 71        	addi	sp, sp, -0x30
80213c7e: 06 f4        	sd	ra, 0x28(sp)
80213c80: 22 f0        	sd	s0, 0x20(sp)
80213c82: 00 18        	addi	s0, sp, 0x30
80213c84: 23 30 a4 fe  	sd	a0, -0x20(s0)
80213c88: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80213c8c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80213c90: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     }
80213c94: 03 35 04 fd  	ld	a0, -0x30(s0)
80213c98: 83 35 84 fd  	ld	a1, -0x28(s0)
80213c9c: a2 70        	ld	ra, 0x28(sp)
80213c9e: 02 74        	ld	s0, 0x20(sp)
80213ca0: 45 61        	addi	sp, sp, 0x30
80213ca2: 82 80        	ret

0000000080213ca4 <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E>:
;         const fn inner(
80213ca4: 75 71        	addi	sp, sp, -0x90
80213ca6: 06 e5        	sd	ra, 0x88(sp)
80213ca8: 22 e1        	sd	s0, 0x80(sp)
80213caa: 00 09        	addi	s0, sp, 0x90
80213cac: 23 30 c4 f8  	sd	a2, -0x80(s0)
80213cb0: 23 34 b4 f8  	sd	a1, -0x78(s0)
80213cb4: 23 38 a4 f8  	sd	a0, -0x70(s0)
80213cb8: 23 34 a4 fc  	sd	a0, -0x38(s0)
80213cbc: 23 38 b4 fc  	sd	a1, -0x30(s0)
80213cc0: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
80213cc4: 1d ed        	bnez	a0, 0x80213d02 <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E+0x5e>
80213cc6: 09 a0        	j	0x80213cc8 <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E+0x24>
80213cc8: 03 35 84 f8  	ld	a0, -0x78(s0)
80213ccc: 83 35 04 f9  	ld	a1, -0x70(s0)
80213cd0: 03 36 04 f8  	ld	a2, -0x80(s0)
;     uint_impl! {
80213cd4: b3 85 c5 02  	mul	a1, a1, a2
80213cd8: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         self.0 as usize
80213cdc: 23 30 a4 fc  	sd	a0, -0x40(s0)
80213ce0: 03 35 04 fc  	ld	a0, -0x40(s0)
80213ce4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80213ce8: 23 38 b4 fa  	sd	a1, -0x50(s0)
80213cec: 23 34 a4 fa  	sd	a0, -0x58(s0)
;             unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }
80213cf0: 83 35 84 fa  	ld	a1, -0x58(s0)
80213cf4: 03 35 04 fb  	ld	a0, -0x50(s0)
80213cf8: 23 3c b4 f8  	sd	a1, -0x68(s0)
80213cfc: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         }
80213d00: a5 a0        	j	0x80213d68 <.Lpcrel_hi2+0x16>
80213d02: 03 35 04 f9  	ld	a0, -0x70(s0)
80213d06: 83 35 84 f8  	ld	a1, -0x78(s0)
;         self.0 as usize
80213d0a: 23 3c b4 fa  	sd	a1, -0x48(s0)
80213d0e: 03 36 84 fb  	ld	a2, -0x48(s0)
80213d12: fd 55        	li	a1, -0x1
80213d14: fe 15        	slli	a1, a1, 0x3f
;         isize::MAX as usize - (align.as_usize() - 1)
80213d16: 91 8d        	sub	a1, a1, a2
80213d18: 23 3c b4 f6  	sd	a1, -0x88(s0)
;             if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
80213d1c: 09 cd        	beqz	a0, 0x80213d36 <.Lpcrel_hi0>
80213d1e: 09 a0        	j	0x80213d20 <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E+0x7c>
80213d20: 83 35 04 f8  	ld	a1, -0x80(s0)
80213d24: 03 35 84 f7  	ld	a0, -0x88(s0)
80213d28: 03 36 04 f9  	ld	a2, -0x70(s0)
;             if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
80213d2c: 33 55 c5 02  	divu	a0, a0, a2
80213d30: 63 61 b5 02  	bltu	a0, a1, 0x80213d52 <.Lpcrel_hi2>
80213d34: 31 a8        	j	0x80213d50 <.Lpcrel_hi1+0x12>

0000000080213d36 <.Lpcrel_hi0>:
80213d36: 17 25 02 00  	auipc	a0, 0x22
80213d3a: 13 05 a5 30  	addi	a0, a0, 0x30a

0000000080213d3e <.Lpcrel_hi1>:
80213d3e: 97 25 02 00  	auipc	a1, 0x22
80213d42: 13 86 a5 2e  	addi	a2, a1, 0x2ea
80213d46: e5 45        	li	a1, 0x19
80213d48: 97 c0 01 00  	auipc	ra, 0x1c
80213d4c: e7 80 00 4d  	jalr	0x4d0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
; #![no_std]
80213d50: a5 bf        	j	0x80213cc8 <_ZN4core5alloc6layout6Layout5array5inner17h73a4db995b66ce83E+0x24>

0000000080213d52 <.Lpcrel_hi2>:
;                 return Err(LayoutError);
80213d52: 17 f5 01 00  	auipc	a0, 0x1f
80213d56: 13 05 e5 53  	addi	a0, a0, 0x53e
80213d5a: 0c 61        	ld	a1, 0x0(a0)
80213d5c: 08 65        	ld	a0, 0x8(a0)
80213d5e: 23 3c b4 f8  	sd	a1, -0x68(s0)
80213d62: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         }
80213d66: 09 a0        	j	0x80213d68 <.Lpcrel_hi2+0x16>
80213d68: 03 35 84 f9  	ld	a0, -0x68(s0)
80213d6c: 83 35 04 fa  	ld	a1, -0x60(s0)
80213d70: aa 60        	ld	ra, 0x88(sp)
80213d72: 0a 64        	ld	s0, 0x80(sp)
80213d74: 49 61        	addi	sp, sp, 0x90
80213d76: 82 80        	ret

0000000080213d78 <_ZN4core5alloc6layout6Layout8dangling17h5bb4677f0568c5b0E>:
;     pub const fn dangling(&self) -> NonNull<u8> {
80213d78: 5d 71        	addi	sp, sp, -0x50
80213d7a: 86 e4        	sd	ra, 0x48(sp)
80213d7c: a2 e0        	sd	s0, 0x40(sp)
80213d7e: 80 08        	addi	s0, sp, 0x50
80213d80: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.align.as_usize()
80213d84: 08 61        	ld	a0, 0x0(a0)
80213d86: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.0 as usize
80213d8a: 23 34 a4 fc  	sd	a0, -0x38(s0)
80213d8e: 03 35 84 fc  	ld	a0, -0x38(s0)
80213d92: 23 3c a4 fa  	sd	a0, -0x48(s0)
80213d96: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     unsafe { mem::transmute(addr) }
80213d9a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
80213d9e: 09 a0        	j	0x80213da0 <_ZN4core5alloc6layout6Layout8dangling17h5bb4677f0568c5b0E+0x28>
80213da0: 03 35 84 fb  	ld	a0, -0x48(s0)
;             assert_unsafe_precondition!(
80213da4: 97 d0 fe ff  	auipc	ra, 0xfffed
80213da8: e7 80 00 c4  	jalr	-0x3c0(ra) <ekernel+0xffcb39e4>
80213dac: 09 a0        	j	0x80213dae <_ZN4core5alloc6layout6Layout8dangling17h5bb4677f0568c5b0E+0x36>
80213dae: 03 35 84 fb  	ld	a0, -0x48(s0)
;             NonNull { pointer: ptr as _ }
80213db2: 23 30 a4 fc  	sd	a0, -0x40(s0)
;     }
80213db6: 03 35 04 fc  	ld	a0, -0x40(s0)
80213dba: a6 60        	ld	ra, 0x48(sp)
80213dbc: 06 64        	ld	s0, 0x40(sp)
80213dbe: 61 61        	addi	sp, sp, 0x50
80213dc0: 82 80        	ret

0000000080213dc2 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17hd6c3372e63ca354cE>:
; #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
80213dc2: 5d 71        	addi	sp, sp, -0x50
80213dc4: 86 e4        	sd	ra, 0x48(sp)
80213dc6: a2 e0        	sd	s0, 0x40(sp)
80213dc8: 80 08        	addi	s0, sp, 0x50
80213dca: 23 38 b4 fc  	sd	a1, -0x30(s0)
80213dce: aa 85        	mv	a1, a0
80213dd0: 03 35 04 fd  	ld	a0, -0x30(s0)
80213dd4: 23 30 b4 fe  	sd	a1, -0x20(s0)
80213dd8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     size: usize,
80213ddc: 93 87 85 00  	addi	a5, a1, 0x8
;     align: Alignment,
80213de0: 23 3c b4 fc  	sd	a1, -0x28(s0)

0000000080213de4 <.Lpcrel_hi3>:
; #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
80213de4: 97 25 02 00  	auipc	a1, 0x22
80213de8: 93 85 45 2a  	addi	a1, a1, 0x2a4
80213dec: 0a 86        	mv	a2, sp
80213dee: 0c ea        	sd	a1, 0x10(a2)
80213df0: 93 05 84 fd  	addi	a1, s0, -0x28
80213df4: 0c e6        	sd	a1, 0x8(a2)
80213df6: 95 45        	li	a1, 0x5
80213df8: 0c e2        	sd	a1, 0x0(a2)

0000000080213dfa <.Lpcrel_hi4>:
80213dfa: 97 25 02 00  	auipc	a1, 0x22
80213dfe: 93 85 f5 25  	addi	a1, a1, 0x25f

0000000080213e02 <.Lpcrel_hi5>:
80213e02: 17 06 02 00  	auipc	a2, 0x20
80213e06: 93 06 26 9c  	addi	a3, a2, -0x63e

0000000080213e0a <.Lpcrel_hi6>:
80213e0a: 17 26 02 00  	auipc	a2, 0x22
80213e0e: 13 08 66 25  	addi	a6, a2, 0x256

0000000080213e12 <.Lpcrel_hi7>:
80213e12: 17 26 02 00  	auipc	a2, 0x22
80213e16: 93 08 e6 26  	addi	a7, a2, 0x26e
80213e1a: 19 46        	li	a2, 0x6
80213e1c: 11 47        	li	a4, 0x4
80213e1e: 97 c0 01 00  	auipc	ra, 0x1c
80213e22: e7 80 00 c2  	jalr	-0x3e0(ra) <_ZN4core3fmt9Formatter26debug_struct_field2_finish17hcbf4a098f012dba6E>
80213e26: a6 60        	ld	ra, 0x48(sp)
80213e28: 06 64        	ld	s0, 0x40(sp)
80213e2a: 61 61        	addi	sp, sp, 0x50
80213e2c: 82 80        	ret

0000000080213e2e <_ZN64_$LT$core..str..error..Utf8Error$u20$as$u20$core..fmt..Debug$GT$3fmt17hf71d21ae633d90f4E>:
; #[derive(Copy, Eq, PartialEq, Clone, Debug)]
80213e2e: 5d 71        	addi	sp, sp, -0x50
80213e30: 86 e4        	sd	ra, 0x48(sp)
80213e32: a2 e0        	sd	s0, 0x40(sp)
80213e34: 80 08        	addi	s0, sp, 0x50
80213e36: 23 38 b4 fc  	sd	a1, -0x30(s0)
80213e3a: aa 87        	mv	a5, a0
80213e3c: 03 35 04 fd  	ld	a0, -0x30(s0)
80213e40: 23 30 f4 fe  	sd	a5, -0x20(s0)
80213e44: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     pub(super) error_len: Option<u8>,
80213e48: 93 85 87 00  	addi	a1, a5, 0x8
80213e4c: 23 3c b4 fc  	sd	a1, -0x28(s0)

0000000080213e50 <.Lpcrel_hi0>:
; #[derive(Copy, Eq, PartialEq, Clone, Debug)]
80213e50: 97 25 02 00  	auipc	a1, 0x22
80213e54: 13 86 05 2a  	addi	a2, a1, 0x2a0
80213e58: 8a 85        	mv	a1, sp
80213e5a: 90 e9        	sd	a2, 0x10(a1)
80213e5c: 13 06 84 fd  	addi	a2, s0, -0x28
80213e60: 90 e5        	sd	a2, 0x8(a1)
80213e62: 25 46        	li	a2, 0x9
80213e64: 90 e1        	sd	a2, 0x0(a1)

0000000080213e66 <.Lpcrel_hi1>:
80213e66: 97 25 02 00  	auipc	a1, 0x22
80213e6a: 93 85 25 24  	addi	a1, a1, 0x242

0000000080213e6e <.Lpcrel_hi2>:
80213e6e: 97 26 02 00  	auipc	a3, 0x22
80213e72: 93 86 36 24  	addi	a3, a3, 0x243

0000000080213e76 <.Lpcrel_hi3>:
80213e76: 17 27 02 00  	auipc	a4, 0x22
80213e7a: 13 08 a7 24  	addi	a6, a4, 0x24a

0000000080213e7e <.Lpcrel_hi4>:
80213e7e: 17 27 02 00  	auipc	a4, 0x22
80213e82: 93 08 27 26  	addi	a7, a4, 0x262
80213e86: 2d 47        	li	a4, 0xb
80213e88: 97 c0 01 00  	auipc	ra, 0x1c
80213e8c: e7 80 60 bb  	jalr	-0x44a(ra) <_ZN4core3fmt9Formatter26debug_struct_field2_finish17hcbf4a098f012dba6E>
80213e90: a6 60        	ld	ra, 0x48(sp)
80213e92: 06 64        	ld	s0, 0x40(sp)
80213e94: 61 61        	addi	sp, sp, 0x50
80213e96: 82 80        	ret

0000000080213e98 <_ZN4core3ptr13read_volatile18precondition_check17h0d89a123e64e7f92E>:
;             const fn precondition_check($($name:$ty),*) {
80213e98: 01 11        	addi	sp, sp, -0x20
80213e9a: 06 ec        	sd	ra, 0x18(sp)
80213e9c: 22 e8        	sd	s0, 0x10(sp)
80213e9e: 00 10        	addi	s0, sp, 0x20
80213ea0: 23 30 a4 fe  	sd	a0, -0x20(s0)
80213ea4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => is_aligned_and_not_null(addr, align)
80213ea8: 97 60 00 00  	auipc	ra, 0x6
80213eac: e7 80 80 9f  	jalr	-0x608(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>
80213eb0: 01 ed        	bnez	a0, 0x80213ec8 <.Lpcrel_hi0+0x14>
80213eb2: 09 a0        	j	0x80213eb4 <.Lpcrel_hi0>

0000000080213eb4 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
80213eb4: 17 25 02 00  	auipc	a0, 0x22
80213eb8: 13 05 c5 25  	addi	a0, a0, 0x25c
80213ebc: 93 05 e0 06  	li	a1, 0x6e
80213ec0: 97 c0 01 00  	auipc	ra, 0x1c
80213ec4: e7 80 00 38  	jalr	0x380(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80213ec8: e2 60        	ld	ra, 0x18(sp)
80213eca: 42 64        	ld	s0, 0x10(sp)
;             }
80213ecc: 05 61        	addi	sp, sp, 0x20
80213ece: 82 80        	ret

0000000080213ed0 <_ZN4core3ptr14write_volatile18precondition_check17h38850d7be0fa672bE>:
;             const fn precondition_check($($name:$ty),*) {
80213ed0: 01 11        	addi	sp, sp, -0x20
80213ed2: 06 ec        	sd	ra, 0x18(sp)
80213ed4: 22 e8        	sd	s0, 0x10(sp)
80213ed6: 00 10        	addi	s0, sp, 0x20
80213ed8: 23 30 a4 fe  	sd	a0, -0x20(s0)
80213edc: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => is_aligned_and_not_null(addr, align)
80213ee0: 97 60 00 00  	auipc	ra, 0x6
80213ee4: e7 80 00 9c  	jalr	-0x640(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>
80213ee8: 01 ed        	bnez	a0, 0x80213f00 <.Lpcrel_hi1+0x14>
80213eea: 09 a0        	j	0x80213eec <.Lpcrel_hi1>

0000000080213eec <.Lpcrel_hi1>:
;                     ::core::panicking::panic_nounwind(
80213eec: 17 25 02 00  	auipc	a0, 0x22
80213ef0: 13 05 25 29  	addi	a0, a0, 0x292
80213ef4: 93 05 f0 06  	li	a1, 0x6f
80213ef8: 97 c0 01 00  	auipc	ra, 0x1c
80213efc: e7 80 80 34  	jalr	0x348(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80213f00: e2 60        	ld	ra, 0x18(sp)
80213f02: 42 64        	ld	s0, 0x10(sp)
;             }
80213f04: 05 61        	addi	sp, sp, 0x20
80213f06: 82 80        	ret

0000000080213f08 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hf0772d4eae6f38d7E>:
;     fn into_iter(self) -> I {
80213f08: 01 11        	addi	sp, sp, -0x20
80213f0a: 06 ec        	sd	ra, 0x18(sp)
80213f0c: 22 e8        	sd	s0, 0x10(sp)
80213f0e: 00 10        	addi	s0, sp, 0x20
80213f10: 23 24 a4 fe  	sw	a0, -0x18(s0)
80213f14: 23 26 b4 fe  	sw	a1, -0x14(s0)
80213f18: e2 60        	ld	ra, 0x18(sp)
80213f1a: 42 64        	ld	s0, 0x10(sp)
;     }
80213f1c: 05 61        	addi	sp, sp, 0x20
80213f1e: 82 80        	ret

0000000080213f20 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hefc98f336cdb275aE>:
;     fn next(&mut self) -> Option<<I as Iterator>::Item> {
80213f20: 01 11        	addi	sp, sp, -0x20
80213f22: 06 ec        	sd	ra, 0x18(sp)
80213f24: 22 e8        	sd	s0, 0x10(sp)
80213f26: 00 10        	addi	s0, sp, 0x20
80213f28: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.iter.next_back()
80213f2c: 97 20 ff ff  	auipc	ra, 0xffff2
80213f30: e7 80 c0 ab  	jalr	-0x544(ra) <ekernel+0xffcb89e8>
80213f34: e2 60        	ld	ra, 0x18(sp)
80213f36: 42 64        	ld	s0, 0x10(sp)
;     }
80213f38: 05 61        	addi	sp, sp, 0x20
80213f3a: 82 80        	ret

0000000080213f3c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b6d23a51786f3b1E>:
;     pub const unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
80213f3c: 79 71        	addi	sp, sp, -0x30
80213f3e: 06 f4        	sd	ra, 0x28(sp)
80213f40: 22 f0        	sd	s0, 0x20(sp)
80213f42: 00 18        	addi	s0, sp, 0x30
80213f44: 23 38 a4 fc  	sd	a0, -0x30(s0)
80213f48: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             const_eval_select((self as *mut u8,), const_impl, runtime_impl)
80213f4c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.is_null() { None } else { unsafe { Some(&mut *self) } }
80213f50: 11 e5        	bnez	a0, 0x80213f5c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b6d23a51786f3b1E+0x20>
80213f52: 09 a0        	j	0x80213f54 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b6d23a51786f3b1E+0x18>
80213f54: 01 45        	li	a0, 0x0
;         if self.is_null() { None } else { unsafe { Some(&mut *self) } }
80213f56: 23 3c a4 fc  	sd	a0, -0x28(s0)
80213f5a: 31 a0        	j	0x80213f66 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b6d23a51786f3b1E+0x2a>
80213f5c: 03 35 04 fd  	ld	a0, -0x30(s0)
;         if self.is_null() { None } else { unsafe { Some(&mut *self) } }
80213f60: 23 3c a4 fc  	sd	a0, -0x28(s0)
80213f64: 09 a0        	j	0x80213f66 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b6d23a51786f3b1E+0x2a>
;     }
80213f66: 03 35 84 fd  	ld	a0, -0x28(s0)
80213f6a: a2 70        	ld	ra, 0x28(sp)
80213f6c: 02 74        	ld	s0, 0x20(sp)
80213f6e: 45 61        	addi	sp, sp, 0x30
80213f70: 82 80        	ret

0000000080213f72 <_ZN2os4task4task16TaskControlBlock8alloc_fd28_$u7b$$u7b$closure$u7d$$u7d$17h471fb20bd7ecf6c1E>:
;         if let Some(fd) = (0..self.inner_mut().files.len()).find(|fd| self.inner_mut().files[*fd].is_none()){
80213f72: 5d 71        	addi	sp, sp, -0x50
80213f74: 86 e4        	sd	ra, 0x48(sp)
80213f76: a2 e0        	sd	s0, 0x40(sp)
80213f78: 80 08        	addi	s0, sp, 0x50
80213f7a: 23 3c b4 fa  	sd	a1, -0x48(s0)
80213f7e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80213f82: 23 34 b4 fe  	sd	a1, -0x18(s0)
80213f86: 08 61        	ld	a0, 0x0(a0)
80213f88: 97 a0 ff ff  	auipc	ra, 0xffffa
80213f8c: e7 80 e0 29  	jalr	0x29e(ra) <ekernel+0xffcc1226>
80213f90: 23 38 a4 fc  	sd	a0, -0x30(s0)
80213f94: 23 3c b4 fc  	sd	a1, -0x28(s0)
80213f98: 13 05 04 fd  	addi	a0, s0, -0x30
80213f9c: 23 30 a4 fc  	sd	a0, -0x40(s0)
80213fa0: 97 d0 fe ff  	auipc	ra, 0xfffed
80213fa4: e7 80 40 bd  	jalr	-0x42c(ra) <ekernel+0xffcb3b74>
80213fa8: 83 35 84 fb  	ld	a1, -0x48(s0)
80213fac: 61 05        	addi	a0, a0, 0x18
80213fae: 8c 61        	ld	a1, 0x0(a1)

0000000080213fb0 <.Lpcrel_hi0>:
80213fb0: 17 26 02 00  	auipc	a2, 0x22
80213fb4: 13 06 06 24  	addi	a2, a2, 0x240
80213fb8: 97 10 00 00  	auipc	ra, 0x1
80213fbc: e7 80 40 2b  	jalr	0x2b4(ra) <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb1c532d49f4f97deE>
80213fc0: 97 10 ff ff  	auipc	ra, 0xffff1
80213fc4: e7 80 c0 f7  	jalr	-0x84(ra) <ekernel+0xffcb7f3c>
80213fc8: aa 85        	mv	a1, a0
80213fca: 03 35 04 fc  	ld	a0, -0x40(s0)
80213fce: 23 34 b4 fc  	sd	a1, -0x38(s0)
80213fd2: 97 40 ff ff  	auipc	ra, 0xffff4
80213fd6: e7 80 e0 23  	jalr	0x23e(ra) <ekernel+0xffcbb210>
80213fda: 03 35 84 fc  	ld	a0, -0x38(s0)
80213fde: a6 60        	ld	ra, 0x48(sp)
80213fe0: 06 64        	ld	s0, 0x40(sp)
80213fe2: 61 61        	addi	sp, sp, 0x50
80213fe4: 82 80        	ret

0000000080213fe6 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h66194cd169e8451fE>:
;     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
80213fe6: 1d 71        	addi	sp, sp, -0x60
80213fe8: 86 ec        	sd	ra, 0x58(sp)
80213fea: a2 e8        	sd	s0, 0x50(sp)
80213fec: 80 10        	addi	s0, sp, 0x60
80213fee: 81 46        	li	a3, 0x0
; pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
80213ff0: a3 0f d4 fa  	sb	a3, -0x41(s0)
80213ff4: 23 30 b4 fc  	sd	a1, -0x40(s0)
80213ff8: 23 34 c4 fc  	sd	a2, -0x38(s0)
80213ffc: 23 38 a4 fc  	sd	a0, -0x30(s0)
80214000: 93 05 04 fc  	addi	a1, s0, -0x40
;         let size = layout.size();
80214004: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         self.size
80214008: 83 35 84 fc  	ld	a1, -0x38(s0)
8021400c: 23 34 b4 fa  	sd	a1, -0x58(s0)
80214010: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         let ptr = unsafe { self.alloc(layout) };
80214014: 83 35 04 fc  	ld	a1, -0x40(s0)
80214018: 03 36 84 fc  	ld	a2, -0x38(s0)
8021401c: 97 90 01 00  	auipc	ra, 0x19
80214020: e7 80 60 85  	jalr	-0x7aa(ra) <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hba892e8a7ee7ae28E>
80214024: aa 85        	mv	a1, a0
80214026: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021402a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if !ptr.is_null() {
8021402e: 19 e1        	bnez	a0, 0x80214034 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h66194cd169e8451fE+0x4e>
80214030: 09 a0        	j	0x80214032 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h66194cd169e8451fE+0x4c>
80214032: 11 a0        	j	0x80214036 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h66194cd169e8451fE+0x50>
;         assert_unsafe_precondition!(
80214034: 39 a0        	j	0x80214042 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h66194cd169e8451fE+0x5c>
80214036: 03 35 04 fb  	ld	a0, -0x50(s0)
8021403a: e6 60        	ld	ra, 0x58(sp)
8021403c: 46 64        	ld	s0, 0x50(sp)
;     }
8021403e: 25 61        	addi	sp, sp, 0x60
80214040: 82 80        	ret
80214042: 03 35 04 fb  	ld	a0, -0x50(s0)
80214046: 85 45        	li	a1, 0x1
;         assert_unsafe_precondition!(
80214048: 97 50 00 00  	auipc	ra, 0x5
8021404c: e7 80 20 6c  	jalr	0x6c2(ra) <_ZN4core10intrinsics11write_bytes18precondition_check17h6427b827b73579cfE>
80214050: 09 a0        	j	0x80214052 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h66194cd169e8451fE+0x6c>
80214052: 03 36 84 fa  	ld	a2, -0x58(s0)
80214056: 03 35 04 fb  	ld	a0, -0x50(s0)
8021405a: 81 45        	li	a1, 0x0
;         write_bytes(dst, val, count)
8021405c: 97 e0 01 00  	auipc	ra, 0x1e
80214060: e7 80 20 e3  	jalr	-0x1ce(ra) <memset>
;         if !ptr.is_null() {
80214064: c9 bf        	j	0x80214036 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h66194cd169e8451fE+0x50>

0000000080214066 <_ZN4core5alloc6global11GlobalAlloc7realloc17h340ff7356c1e5e95E>:
;     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
80214066: 31 71        	addi	sp, sp, -0xc0
80214068: 06 fd        	sd	ra, 0xb8(sp)
8021406a: 22 f9        	sd	s0, 0xb0(sp)
8021406c: 80 01        	addi	s0, sp, 0xc0
8021406e: 23 38 e4 f4  	sd	a4, -0xb0(s0)
80214072: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80214076: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021407a: 23 38 c4 f6  	sd	a2, -0x90(s0)
8021407e: 23 3c d4 f6  	sd	a3, -0x88(s0)
80214082: 23 3c a4 f8  	sd	a0, -0x68(s0)
80214086: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021408a: 23 34 e4 fa  	sd	a4, -0x58(s0)
8021408e: 93 05 04 f7  	addi	a1, s0, -0x90
;         let new_layout = unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
80214092: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         self.align.as_usize()
80214096: 83 35 04 f7  	ld	a1, -0x90(s0)
8021409a: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         self.0 as usize
8021409e: 23 38 b4 f8  	sd	a1, -0x70(s0)
802140a2: 83 35 04 f9  	ld	a1, -0x70(s0)
802140a6: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
802140aa: 23 34 e4 f8  	sd	a4, -0x78(s0)
802140ae: 23 30 b4 f8  	sd	a1, -0x80(s0)
;         let new_ptr = unsafe { self.alloc(new_layout) };
802140b2: 83 35 04 f8  	ld	a1, -0x80(s0)
802140b6: 03 36 84 f8  	ld	a2, -0x78(s0)
802140ba: 97 80 01 00  	auipc	ra, 0x18
802140be: e7 80 80 7b  	jalr	0x7b8(ra) <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hba892e8a7ee7ae28E>
802140c2: aa 85        	mv	a1, a0
802140c4: 23 34 b4 f6  	sd	a1, -0x98(s0)
802140c8: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if !new_ptr.is_null() {
802140cc: 19 e1        	bnez	a0, 0x802140d2 <_ZN4core5alloc6global11GlobalAlloc7realloc17h340ff7356c1e5e95E+0x6c>
802140ce: 09 a0        	j	0x802140d0 <_ZN4core5alloc6global11GlobalAlloc7realloc17h340ff7356c1e5e95E+0x6a>
802140d0: 0d a8        	j	0x80214102 <_ZN4core5alloc6global11GlobalAlloc7realloc17h340ff7356c1e5e95E+0x9c>
802140d2: 83 35 04 f5  	ld	a1, -0xb0(s0)
802140d6: 03 35 84 f5  	ld	a0, -0xa8(s0)
;                 ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
802140da: 23 38 a4 fc  	sd	a0, -0x30(s0)
802140de: 13 05 04 f7  	addi	a0, s0, -0x90
802140e2: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.size
802140e6: 03 35 84 f7  	ld	a0, -0x88(s0)
802140ea: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         min_by(self, other, Ord::cmp)
802140ee: 97 80 00 00  	auipc	ra, 0x8
802140f2: e7 80 60 ad  	jalr	-0x52a(ra) <_ZN4core3cmp6min_by17he5cced12f8d11c78E>
802140f6: aa 85        	mv	a1, a0
802140f8: 23 34 b4 f4  	sd	a1, -0xb8(s0)
802140fc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     assert_unsafe_precondition!(
80214100: 39 a0        	j	0x8021410e <_ZN4core5alloc6global11GlobalAlloc7realloc17h340ff7356c1e5e95E+0xa8>
80214102: 03 35 84 f6  	ld	a0, -0x98(s0)
80214106: ea 70        	ld	ra, 0xb8(sp)
80214108: 4a 74        	ld	s0, 0xb0(sp)
;     }
8021410a: 29 61        	addi	sp, sp, 0xc0
8021410c: 82 80        	ret
8021410e: 03 37 84 f4  	ld	a4, -0xb8(s0)
80214112: 83 35 84 f6  	ld	a1, -0x98(s0)
80214116: 03 35 84 f5  	ld	a0, -0xa8(s0)
8021411a: 85 46        	li	a3, 0x1
;     assert_unsafe_precondition!(
8021411c: 36 86        	mv	a2, a3
8021411e: 97 50 00 00  	auipc	ra, 0x5
80214122: e7 80 e0 6e  	jalr	0x6ee(ra) <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h279b2b08ed81b702E>
80214126: 09 a0        	j	0x80214128 <_ZN4core5alloc6global11GlobalAlloc7realloc17h340ff7356c1e5e95E+0xc2>
80214128: 83 35 84 f5  	ld	a1, -0xa8(s0)
8021412c: 03 36 84 f4  	ld	a2, -0xb8(s0)
80214130: 03 35 84 f6  	ld	a0, -0x98(s0)
;     unsafe { copy_nonoverlapping(src, dst, count) }
80214134: 97 e0 01 00  	auipc	ra, 0x1e
80214138: e7 80 a0 b3  	jalr	-0x4c6(ra) <memcpy>
8021413c: 83 35 84 f5  	ld	a1, -0xa8(s0)
80214140: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                 self.dealloc(ptr, layout);
80214144: 03 36 04 f7  	ld	a2, -0x90(s0)
80214148: 83 36 84 f7  	ld	a3, -0x88(s0)
8021414c: 97 90 01 00  	auipc	ra, 0x19
80214150: e7 80 80 83  	jalr	-0x7c8(ra) <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h70a0674c9280ca80E>
;         if !new_ptr.is_null() {
80214154: 7d b7        	j	0x80214102 <_ZN4core5alloc6global11GlobalAlloc7realloc17h340ff7356c1e5e95E+0x9c>

0000000080214156 <_ZN83_$LT$os..filesystem..fs..VirtIOBlock$u20$as$u20$easy_fs..block_dev..BlockDevice$GT$10read_block17h8b2f66b88cbdc1bcE>:
;     fn read_block(&self,block_id:usize,buf:&mut [u8]) {
80214156: 1d 71        	addi	sp, sp, -0x60
80214158: 86 ec        	sd	ra, 0x58(sp)
8021415a: a2 e8        	sd	s0, 0x50(sp)
8021415c: 80 10        	addi	s0, sp, 0x60
8021415e: 23 38 d4 fa  	sd	a3, -0x50(s0)
80214162: 23 34 c4 fa  	sd	a2, -0x58(s0)
80214166: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021416a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021416e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80214172: 23 30 c4 fe  	sd	a2, -0x20(s0)
80214176: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             self.0
8021417a: 97 f0 ff ff  	auipc	ra, 0xfffff
8021417e: e7 80 40 ec  	jalr	-0x13c(ra) <ekernel+0xffcc603e>
80214182: 23 30 a4 fc  	sd	a0, -0x40(s0)
80214186: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021418a: 13 05 04 fc  	addi	a0, s0, -0x40
8021418e: 23 3c a4 fa  	sd	a0, -0x48(s0)
80214192: 97 00 00 00  	auipc	ra, 0x0
80214196: e7 80 e0 a5  	jalr	-0x5a2(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h41a7dc396ae95469E>
8021419a: 83 35 04 fa  	ld	a1, -0x60(s0)
8021419e: 03 36 84 fa  	ld	a2, -0x58(s0)
802141a2: 83 36 04 fb  	ld	a3, -0x50(s0)
802141a6: 97 20 00 00  	auipc	ra, 0x2
802141aa: e7 80 00 6d  	jalr	0x6d0(ra) <_ZN14virtio_drivers3blk18VirtIOBlk$LT$H$GT$10read_block17he9edee33b433deaaE>

00000000802141ae <.Lpcrel_hi0>:
802141ae: 97 25 02 00  	auipc	a1, 0x22
802141b2: 93 85 a5 0a  	addi	a1, a1, 0xaa

00000000802141b6 <.Lpcrel_hi1>:
802141b6: 17 26 02 00  	auipc	a2, 0x22
802141ba: 93 06 26 0d  	addi	a3, a2, 0xd2
802141be: 71 46        	li	a2, 0x1c
802141c0: 97 d0 fe ff  	auipc	ra, 0xfffed
802141c4: e7 80 20 0d  	jalr	0xd2(ra) <ekernel+0xffcb4292>
802141c8: 03 35 84 fb  	ld	a0, -0x48(s0)
;                 .expect("Error when reading VirtIOblk");
802141cc: 97 40 ff ff  	auipc	ra, 0xffff4
802141d0: e7 80 e0 8e  	jalr	-0x712(ra) <ekernel+0xffcbaaba>
802141d4: e6 60        	ld	ra, 0x58(sp)
802141d6: 46 64        	ld	s0, 0x50(sp)
;     }
802141d8: 25 61        	addi	sp, sp, 0x60
802141da: 82 80        	ret

00000000802141dc <_ZN83_$LT$os..filesystem..fs..VirtIOBlock$u20$as$u20$easy_fs..block_dev..BlockDevice$GT$11write_block17h23d783868c3e928fE>:
;     fn write_block(&self,block_id:usize,buf:&[u8]) {
802141dc: 1d 71        	addi	sp, sp, -0x60
802141de: 86 ec        	sd	ra, 0x58(sp)
802141e0: a2 e8        	sd	s0, 0x50(sp)
802141e2: 80 10        	addi	s0, sp, 0x60
802141e4: 23 38 d4 fa  	sd	a3, -0x50(s0)
802141e8: 23 34 c4 fa  	sd	a2, -0x58(s0)
802141ec: 23 30 b4 fa  	sd	a1, -0x60(s0)
802141f0: 23 38 a4 fc  	sd	a0, -0x30(s0)
802141f4: 23 3c b4 fc  	sd	a1, -0x28(s0)
802141f8: 23 30 c4 fe  	sd	a2, -0x20(s0)
802141fc: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             self.0
80214200: 97 f0 ff ff  	auipc	ra, 0xfffff
80214204: e7 80 e0 e3  	jalr	-0x1c2(ra) <ekernel+0xffcc603e>
80214208: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021420c: 23 34 b4 fc  	sd	a1, -0x38(s0)
80214210: 13 05 04 fc  	addi	a0, s0, -0x40
80214214: 23 3c a4 fa  	sd	a0, -0x48(s0)
80214218: 97 00 00 00  	auipc	ra, 0x0
8021421c: e7 80 80 9d  	jalr	-0x628(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h41a7dc396ae95469E>
80214220: 83 35 04 fa  	ld	a1, -0x60(s0)
80214224: 03 36 84 fa  	ld	a2, -0x58(s0)
80214228: 83 36 04 fb  	ld	a3, -0x50(s0)
8021422c: 97 30 00 00  	auipc	ra, 0x3
80214230: e7 80 40 87  	jalr	-0x78c(ra) <_ZN14virtio_drivers3blk18VirtIOBlk$LT$H$GT$11write_block17heacd1fc041e80079E>

0000000080214234 <.Lpcrel_hi2>:
80214234: 97 25 02 00  	auipc	a1, 0x22
80214238: 93 85 c5 06  	addi	a1, a1, 0x6c

000000008021423c <.Lpcrel_hi3>:
8021423c: 17 26 02 00  	auipc	a2, 0x22
80214240: 93 06 46 08  	addi	a3, a2, 0x84
80214244: 69 46        	li	a2, 0x1a
80214246: 97 d0 fe ff  	auipc	ra, 0xfffed
8021424a: e7 80 c0 04  	jalr	0x4c(ra) <ekernel+0xffcb4292>
8021424e: 03 35 84 fb  	ld	a0, -0x48(s0)
;                 .expect("Error when write VirtIOBlk");
80214252: 97 40 ff ff  	auipc	ra, 0xffff4
80214256: e7 80 80 86  	jalr	-0x798(ra) <ekernel+0xffcbaaba>
8021425a: e6 60        	ld	ra, 0x58(sp)
8021425c: 46 64        	ld	s0, 0x50(sp)
;     }
8021425e: 25 61        	addi	sp, sp, 0x60
80214260: 82 80        	ret

0000000080214262 <_ZN2os10filesystem2fs11VirtIOBlock3new17h78528803e2fd46ceE>:
;     pub fn new() ->Self {
80214262: 29 71        	addi	sp, sp, -0x140
80214264: 06 fe        	sd	ra, 0x138(sp)
80214266: 22 fa        	sd	s0, 0x130(sp)
80214268: 80 02        	addi	s0, sp, 0x140
8021426a: 23 3c a4 ec  	sd	a0, -0x128(s0)
8021426e: 13 05 84 f9  	addi	a0, s0, -0x68
80214272: b7 15 00 10  	lui	a1, 0x10001
;                 Spin::new(VirtIOBlk::<VirtioHal>
80214276: 97 30 00 00  	auipc	ra, 0x3
8021427a: e7 80 00 a6  	jalr	-0x5a0(ra) <_ZN14virtio_drivers3blk18VirtIOBlk$LT$H$GT$3new17h37271ceb280a3f18E>
;         match self {
8021427e: 03 35 84 f9  	ld	a0, -0x68(s0)
80214282: 15 e9        	bnez	a0, 0x802142b6 <.Lpcrel_hi6+0x18>
80214284: 09 a0        	j	0x80214286 <_ZN2os10filesystem2fs11VirtIOBlock3new17h78528803e2fd46ceE+0x24>
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
80214286: 03 45 04 fa  	lbu	a0, -0x60(s0)
8021428a: a3 07 a4 fe  	sb	a0, -0x11(s0)

000000008021428e <.Lpcrel_hi4>:
8021428e: 17 25 02 00  	auipc	a0, 0x22
80214292: 13 05 a5 f7  	addi	a0, a0, -0x86

0000000080214296 <.Lpcrel_hi5>:
80214296: 97 25 02 00  	auipc	a1, 0x22
8021429a: 93 86 25 fa  	addi	a3, a1, -0x5e

000000008021429e <.Lpcrel_hi6>:
8021429e: 97 25 02 00  	auipc	a1, 0x22
802142a2: 13 87 a5 03  	addi	a4, a1, 0x3a
802142a6: 93 05 b0 02  	li	a1, 0x2b
802142aa: 13 06 f4 fe  	addi	a2, s0, -0x11
802142ae: 97 d0 01 00  	auipc	ra, 0x1d
802142b2: e7 80 00 a7  	jalr	-0x590(ra) <_ZN4core6result13unwrap_failed17hd7dd91774099986cE>
802142b6: 13 05 84 f4  	addi	a0, s0, -0xb8
802142ba: 23 34 a4 ec  	sd	a0, -0x138(s0)
802142be: 93 05 84 f9  	addi	a1, s0, -0x68
802142c2: 13 06 00 05  	li	a2, 0x50
;             Ok(t) => t,
802142c6: 97 e0 01 00  	auipc	ra, 0x1e
802142ca: e7 80 80 9a  	jalr	-0x658(ra) <memcpy>
802142ce: 83 35 84 ec  	ld	a1, -0x138(s0)

00000000802142d2 <.Lpcrel_hi7>:
;                 Spin::new(VirtIOBlk::<VirtioHal>
802142d2: 17 f5 01 00  	auipc	a0, 0x1f
802142d6: 13 06 e5 0b  	addi	a2, a0, 0xbe
802142da: 13 05 04 ee  	addi	a0, s0, -0x120
802142de: 23 38 a4 ec  	sd	a0, -0x130(s0)
802142e2: a1 46        	li	a3, 0x8
802142e4: 97 e0 ff ff  	auipc	ra, 0xffffe
802142e8: e7 80 00 0d  	jalr	0xd0(ra) <ekernel+0xffcc53b4>
802142ec: 03 35 84 ed  	ld	a0, -0x128(s0)
802142f0: 83 35 04 ed  	ld	a1, -0x130(s0)
802142f4: 13 06 80 06  	li	a2, 0x68
;             Self(
802142f8: 97 e0 01 00  	auipc	ra, 0x1e
802142fc: e7 80 60 97  	jalr	-0x68a(ra) <memcpy>
80214300: f2 70        	ld	ra, 0x138(sp)
80214302: 52 74        	ld	s0, 0x130(sp)
;     }
80214304: 31 61        	addi	sp, sp, 0x140
80214306: 82 80        	ret

0000000080214308 <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$9dma_alloc17h3aa675f7f8c7bd22E>:
;     fn dma_alloc(pages: usize) -> usize {
80214308: 75 71        	addi	sp, sp, -0x90
8021430a: 06 e5        	sd	ra, 0x88(sp)
8021430c: 22 e1        	sd	s0, 0x80(sp)
8021430e: 00 09        	addi	s0, sp, 0x90
80214310: 23 3c a4 fc  	sd	a0, -0x28(s0)
80214314: 81 45        	li	a1, 0x0
;         let mut addr_base:usize = 0;
80214316: 23 38 b4 f8  	sd	a1, -0x70(s0)
;         for i in 0..pages {
8021431a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021431e: 23 30 a4 fa  	sd	a0, -0x60(s0)
80214322: 03 35 84 f9  	ld	a0, -0x68(s0)
80214326: 83 35 04 fa  	ld	a1, -0x60(s0)
8021432a: 97 70 01 00  	auipc	ra, 0x17
8021432e: e7 80 c0 58  	jalr	0x58c(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb7ed3f92a62e2c8bE>
80214332: 23 34 a4 fa  	sd	a0, -0x58(s0)
80214336: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021433a: 09 a0        	j	0x8021433c <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$9dma_alloc17h3aa675f7f8c7bd22E+0x34>
8021433c: 13 05 84 fa  	addi	a0, s0, -0x58
;         for i in 0..pages {
80214340: 97 70 01 00  	auipc	ra, 0x17
80214344: e7 80 60 2b  	jalr	0x2b6(ra) <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h58a3e79438385681E>
80214348: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021434c: 23 30 b4 fc  	sd	a1, -0x40(s0)
80214350: 03 35 84 fb  	ld	a0, -0x48(s0)
80214354: 01 e9        	bnez	a0, 0x80214364 <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$9dma_alloc17h3aa675f7f8c7bd22E+0x5c>
80214356: 09 a0        	j	0x80214358 <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$9dma_alloc17h3aa675f7f8c7bd22E+0x50>
;         addr_base
80214358: 03 35 04 f9  	ld	a0, -0x70(s0)
8021435c: aa 60        	ld	ra, 0x88(sp)
8021435e: 0a 64        	ld	s0, 0x80(sp)
;     }
80214360: 49 61        	addi	sp, sp, 0x90
80214362: 82 80        	ret
;         for i in 0..pages {
80214364: 03 35 04 fc  	ld	a0, -0x40(s0)
80214368: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021436c: 23 30 a4 fe  	sd	a0, -0x20(s0)

0000000080214370 <.Lpcrel_hi8>:
;             gurd = FRAME_ALLOC.page_alloc();
80214370: 17 a5 02 00  	auipc	a0, 0x2a
80214374: 13 05 05 c9  	addi	a0, a0, -0x370
80214378: 97 00 ff ff  	auipc	ra, 0xffff0
8021437c: e7 80 e0 b3  	jalr	-0x4c2(ra) <ekernel+0xffcb6eb6>
80214380: aa 85        	mv	a1, a0
80214382: 03 35 04 f8  	ld	a0, -0x80(s0)
80214386: 2e 86        	mv	a2, a1
80214388: 23 34 c4 f8  	sd	a2, -0x78(s0)
8021438c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             if i == 0 {
80214390: 19 e5        	bnez	a0, 0x8021439e <.Lpcrel_hi9>
80214392: 09 a0        	j	0x80214394 <.Lpcrel_hi8+0x24>
80214394: 03 35 84 f8  	ld	a0, -0x78(s0)
;                 addr_base = gurd.pages.0;
80214398: 23 38 a4 f8  	sd	a0, -0x70(s0)
;             if i == 0 {
8021439c: 09 a0        	j	0x8021439e <.Lpcrel_hi9>

000000008021439e <.Lpcrel_hi9>:
;                 QUEUE_FRAMES.lock().push(gurd);
8021439e: 17 25 02 00  	auipc	a0, 0x22
802143a2: 13 05 a5 02  	addi	a0, a0, 0x2a
802143a6: 97 00 00 00  	auipc	ra, 0x0
802143aa: e7 80 c0 20  	jalr	0x20c(ra) <_ZN76_$LT$os..filesystem..fs..QUEUE_FRAMES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8798fe84c968e64eE>
802143ae: 97 f0 ff ff  	auipc	ra, 0xfffff
802143b2: e7 80 40 a0  	jalr	-0x5fc(ra) <ekernel+0xffcc5db2>
802143b6: 23 34 a4 fc  	sd	a0, -0x38(s0)
802143ba: 23 38 b4 fc  	sd	a1, -0x30(s0)
802143be: 13 05 84 fc  	addi	a0, s0, -0x38
802143c2: 23 3c a4 f6  	sd	a0, -0x88(s0)
802143c6: 97 00 00 00  	auipc	ra, 0x0
802143ca: e7 80 20 86  	jalr	-0x79e(ra) <_ZN81_$LT$os..sync..spin..SpinGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h772605f4d74af4efE>
802143ce: 83 35 84 f8  	ld	a1, -0x78(s0)
802143d2: 97 10 00 00  	auipc	ra, 0x1
802143d6: e7 80 c0 85  	jalr	-0x7a4(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E>
802143da: 03 35 84 f7  	ld	a0, -0x88(s0)
802143de: 97 30 ff ff  	auipc	ra, 0xffff3
802143e2: e7 80 80 5b  	jalr	0x5b8(ra) <ekernel+0xffcba996>
802143e6: 99 bf        	j	0x8021433c <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$9dma_alloc17h3aa675f7f8c7bd22E+0x34>

00000000802143e8 <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$11dma_dealloc17hed7c28653e7496eaE>:
;     fn dma_dealloc(paddr: usize, pages: usize) -> i32 {
802143e8: 35 71        	addi	sp, sp, -0xa0
802143ea: 06 ed        	sd	ra, 0x98(sp)
802143ec: 22 e9        	sd	s0, 0x90(sp)
802143ee: 00 11        	addi	s0, sp, 0xa0
802143f0: 23 30 a4 fe  	sd	a0, -0x20(s0)
802143f4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         let mut pa = paddr;
802143f8: 23 3c a4 f6  	sd	a0, -0x88(s0)
802143fc: 01 45        	li	a0, 0x0
;         for _  in 0..pages {
802143fe: 23 30 a4 f8  	sd	a0, -0x80(s0)
80214402: 23 34 b4 f8  	sd	a1, -0x78(s0)
80214406: 03 35 04 f8  	ld	a0, -0x80(s0)
8021440a: 83 35 84 f8  	ld	a1, -0x78(s0)
8021440e: 97 70 01 00  	auipc	ra, 0x17
80214412: e7 80 80 4a  	jalr	0x4a8(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb7ed3f92a62e2c8bE>
80214416: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021441a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021441e: 09 a0        	j	0x80214420 <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$11dma_dealloc17hed7c28653e7496eaE+0x38>
80214420: 13 05 04 f9  	addi	a0, s0, -0x70
;         for _  in 0..pages {
80214424: 97 70 01 00  	auipc	ra, 0x17
80214428: e7 80 20 1d  	jalr	0x1d2(ra) <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h58a3e79438385681E>
8021442c: 23 30 a4 fa  	sd	a0, -0x60(s0)
80214430: 23 34 b4 fa  	sd	a1, -0x58(s0)
80214434: 03 35 04 fa  	ld	a0, -0x60(s0)
80214438: 19 e5        	bnez	a0, 0x80214446 <.Lpcrel_hi10>
8021443a: 09 a0        	j	0x8021443c <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$11dma_dealloc17hed7c28653e7496eaE+0x54>
8021443c: 01 45        	li	a0, 0x0
8021443e: ea 60        	ld	ra, 0x98(sp)
80214440: 4a 64        	ld	s0, 0x90(sp)
;     }
80214442: 0d 61        	addi	sp, sp, 0xa0
80214444: 82 80        	ret

0000000080214446 <.Lpcrel_hi10>:
;             println!("dealloc !!!!!");
80214446: 17 25 02 00  	auipc	a0, 0x22
8021444a: 93 05 a5 eb  	addi	a1, a0, -0x146
8021444e: 13 05 04 fb  	addi	a0, s0, -0x50
80214452: 23 34 a4 f6  	sd	a0, -0x98(s0)
80214456: 05 46        	li	a2, 0x1
80214458: 97 30 ff ff  	auipc	ra, 0xffff3
8021445c: e7 80 c0 f5  	jalr	-0xa4(ra) <ekernel+0xffcba3b4>
80214460: 03 35 84 f6  	ld	a0, -0x98(s0)
80214464: 97 40 00 00  	auipc	ra, 0x4
80214468: e7 80 80 a2  	jalr	-0x5d8(ra) <_ZN2os7console5print17h042fcde166d682deE>
;             FRAME_ALLOC.page_dealloc(pa.into());
8021446c: 03 35 84 f7  	ld	a0, -0x88(s0)

0000000080214470 <.Lpcrel_hi11>:
80214470: 97 25 02 00  	auipc	a1, 0x22
80214474: 93 85 05 ea  	addi	a1, a1, -0x160
80214478: 97 80 ff ff  	auipc	ra, 0xffff8
8021447c: e7 80 a0 a9  	jalr	-0x566(ra) <ekernel+0xffcbef12>
80214480: aa 85        	mv	a1, a0

0000000080214482 <.Lpcrel_hi12>:
80214482: 17 a5 02 00  	auipc	a0, 0x2a
80214486: 13 05 e5 b7  	addi	a0, a0, -0x482
8021448a: 97 00 ff ff  	auipc	ra, 0xffff0
8021448e: e7 80 40 ad  	jalr	-0x52c(ra) <ekernel+0xffcb6f5e>
;             pa += PGSZ;
80214492: 83 35 84 f7  	ld	a1, -0x88(s0)
80214496: 05 65        	lui	a0, 0x1
80214498: 2e 95        	add	a0, a0, a1
8021449a: 23 38 a4 f6  	sd	a0, -0x90(s0)
8021449e: 63 68 b5 00  	bltu	a0, a1, 0x802144ae <.Lpcrel_hi13>
802144a2: 09 a0        	j	0x802144a4 <.Lpcrel_hi12+0x22>
802144a4: 03 35 04 f7  	ld	a0, -0x90(s0)
;             pa += PGSZ;
802144a8: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         for _  in 0..pages {
802144ac: 95 bf        	j	0x80214420 <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$11dma_dealloc17hed7c28653e7496eaE+0x38>

00000000802144ae <.Lpcrel_hi13>:
;             pa += PGSZ;
802144ae: 17 25 02 00  	auipc	a0, 0x22
802144b2: 13 05 25 e9  	addi	a0, a0, -0x16e

00000000802144b6 <.Lpcrel_hi14>:
802144b6: 97 25 02 00  	auipc	a1, 0x22
802144ba: 13 86 25 e7  	addi	a2, a1, -0x18e
802144be: f1 45        	li	a1, 0x1c
802144c0: 97 c0 01 00  	auipc	ra, 0x1c
802144c4: e7 80 80 d5  	jalr	-0x2a8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802144c8 <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$12phys_to_virt17h62299b7cc2b7ac1cE>:
;     fn phys_to_virt(paddr: usize) -> usize {
802144c8: 01 11        	addi	sp, sp, -0x20
802144ca: 06 ec        	sd	ra, 0x18(sp)
802144cc: 22 e8        	sd	s0, 0x10(sp)
802144ce: 00 10        	addi	s0, sp, 0x20
802144d0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802144d4: e2 60        	ld	ra, 0x18(sp)
802144d6: 42 64        	ld	s0, 0x10(sp)
;     }
802144d8: 05 61        	addi	sp, sp, 0x20
802144da: 82 80        	ret

00000000802144dc <_ZN74_$LT$os..filesystem..fs..VirtioHal$u20$as$u20$virtio_drivers..hal..Hal$GT$12virt_to_phys17h9045b5e528be51b9E>:
;     fn virt_to_phys(vaddr: usize) -> usize {
802144dc: 55 71        	addi	sp, sp, -0xd0
802144de: 86 e5        	sd	ra, 0xc8(sp)
802144e0: a2 e1        	sd	s0, 0xc0(sp)
802144e2: 80 09        	addi	s0, sp, 0xd0
802144e4: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802144e8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let offset = vaddr % PGSZ;
802144ec: 52 15        	slli	a0, a0, 0x34
802144ee: 51 91        	srli	a0, a0, 0x34
802144f0: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802144f4: 23 30 a4 fe  	sd	a0, -0x20(s0)

00000000802144f8 <.Lpcrel_hi15>:
;         let mut pagetable = PageTable::create(PGTBIT.root_addr());
802144f8: 17 25 03 00  	auipc	a0, 0x32
802144fc: 13 05 05 96  	addi	a0, a0, -0x6a0
80214500: 97 90 ff ff  	auipc	ra, 0xffff9
80214504: e7 80 20 38  	jalr	0x382(ra) <ekernel+0xffcc0882>
80214508: aa 85        	mv	a1, a0
8021450a: 13 05 04 f6  	addi	a0, s0, -0xa0
8021450e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80214512: 97 80 ff ff  	auipc	ra, 0xffff8
80214516: e7 80 80 f0  	jalr	-0xf8(ra) <ekernel+0xffcbf41a>
8021451a: 03 35 04 f5  	ld	a0, -0xb0(s0)
8021451e: 83 35 84 f5  	ld	a1, -0xa8(s0)
;         if let Some(pa) = pagetable.walk_addr(vaddr){
80214522: 97 80 ff ff  	auipc	ra, 0xffff8
80214526: e7 80 00 78  	jalr	0x780(ra) <ekernel+0xffcbfca2>
8021452a: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021452e: 23 30 b4 fa  	sd	a1, -0x60(s0)
80214532: 03 35 84 f9  	ld	a0, -0x68(s0)
80214536: 11 cd        	beqz	a0, 0x80214552 <.Lpcrel_hi16>
80214538: 09 a0        	j	0x8021453a <.Lpcrel_hi15+0x42>
8021453a: 03 35 84 f4  	ld	a0, -0xb8(s0)
;         if let Some(pa) = pagetable.walk_addr(vaddr){
8021453e: 83 35 04 fa  	ld	a1, -0x60(s0)
80214542: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             (pa + offset)
80214546: 2e 95        	add	a0, a0, a1
80214548: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8021454c: 63 66 b5 04  	bltu	a0, a1, 0x80214598 <.Lpcrel_hi18>
80214550: 05 a8        	j	0x80214580 <.Lpcrel_hi17+0x10>

0000000080214552 <.Lpcrel_hi16>:
;             panic!("this addr is not map or can't use")   
80214552: 17 25 02 00  	auipc	a0, 0x22
80214556: 93 05 e5 e4  	addi	a1, a0, -0x1b2
8021455a: 13 05 84 fa  	addi	a0, s0, -0x58
8021455e: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80214562: 05 46        	li	a2, 0x1
80214564: 97 30 ff ff  	auipc	ra, 0xffff3
80214568: e7 80 00 e5  	jalr	-0x1b0(ra) <ekernel+0xffcba3b4>
8021456c: 03 35 84 f3  	ld	a0, -0xc8(s0)

0000000080214570 <.Lpcrel_hi17>:
80214570: 97 25 02 00  	auipc	a1, 0x22
80214574: 93 85 05 e4  	addi	a1, a1, -0x1c0
80214578: 97 c0 01 00  	auipc	ra, 0x1c
8021457c: e7 80 00 c3  	jalr	-0x3d0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
80214580: 13 05 04 f6  	addi	a0, s0, -0xa0
;     }
80214584: 97 30 ff ff  	auipc	ra, 0xffff3
80214588: e7 80 80 78  	jalr	0x788(ra) <ekernel+0xffcbad0c>
8021458c: 03 35 04 f4  	ld	a0, -0xc0(s0)
80214590: ae 60        	ld	ra, 0xc8(sp)
80214592: 0e 64        	ld	s0, 0xc0(sp)
80214594: 69 61        	addi	sp, sp, 0xd0
80214596: 82 80        	ret

0000000080214598 <.Lpcrel_hi18>:
;             (pa + offset)
80214598: 17 25 02 00  	auipc	a0, 0x22
8021459c: 13 05 85 da  	addi	a0, a0, -0x258

00000000802145a0 <.Lpcrel_hi19>:
802145a0: 97 25 02 00  	auipc	a1, 0x22
802145a4: 13 86 05 dc  	addi	a2, a1, -0x240
802145a8: f1 45        	li	a1, 0x1c
802145aa: 97 c0 01 00  	auipc	ra, 0x1c
802145ae: e7 80 e0 c6  	jalr	-0x392(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802145b2 <_ZN76_$LT$os..filesystem..fs..QUEUE_FRAMES$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8798fe84c968e64eE>:
;             fn deref(&self) -> &$T {
802145b2: 01 11        	addi	sp, sp, -0x20
802145b4: 06 ec        	sd	ra, 0x18(sp)
802145b6: 22 e8        	sd	s0, 0x10(sp)
802145b8: 00 10        	addi	s0, sp, 0x20
802145ba: 23 30 a4 fe  	sd	a0, -0x20(s0)

00000000802145be <.Lpcrel_hi20>:
802145be: 17 85 33 00  	auipc	a0, 0x338
802145c2: 13 05 25 b9  	addi	a0, a0, -0x46e
802145c6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0.call_once(builder)
802145ca: 97 50 00 00  	auipc	ra, 0x5
802145ce: e7 80 00 87  	jalr	-0x790(ra) <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E>
802145d2: e2 60        	ld	ra, 0x18(sp)
802145d4: 42 64        	ld	s0, 0x10(sp)
;             }
802145d6: 05 61        	addi	sp, sp, 0x20
802145d8: 82 80        	ret

00000000802145da <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hf368d80a107e4e56E>:
;     fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {
802145da: 71 71        	addi	sp, sp, -0xb0
802145dc: 06 f5        	sd	ra, 0xa8(sp)
802145de: 22 f1        	sd	s0, 0xa0(sp)
802145e0: 00 19        	addi	s0, sp, 0xb0
802145e2: 23 38 b4 f4  	sd	a1, -0xb0(s0)
802145e6: aa 85        	mv	a1, a0
802145e8: 03 35 04 f5  	ld	a0, -0xb0(s0)
802145ec: 23 30 b4 f6  	sd	a1, -0xa0(s0)
802145f0: 23 34 a4 f6  	sd	a0, -0x98(s0)
802145f4: 13 05 04 f7  	addi	a0, s0, -0x90
802145f8: 23 38 c4 f6  	sd	a2, -0x90(s0)
802145fc: 23 3c b4 f6  	sd	a1, -0x88(s0)
80214600: 93 05 84 f6  	addi	a1, s0, -0x98
;         let slice = iterator.as_slice();
80214604: 23 30 b4 f8  	sd	a1, -0x80(s0)
80214608: 23 30 b4 fc  	sd	a1, -0x40(s0)
;                 unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
8021460c: 83 35 84 f6  	ld	a1, -0x98(s0)
80214610: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80214614: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.pointer as *mut T
80214618: 23 38 b4 fc  	sd	a1, -0x30(s0)
;                 unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
8021461c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80214620: 03 35 04 f7  	ld	a0, -0x90(s0)
80214624: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { self.pointer.sub_ptr(subtracted.pointer) }
80214628: 97 70 00 00  	auipc	ra, 0x7
8021462c: e7 80 c0 70  	jalr	0x70c(ra) <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h575eaee47adf15e6E>
80214630: aa 85        	mv	a1, a0
80214632: 03 35 84 f5  	ld	a0, -0xa8(s0)
80214636: 23 3c b4 f8  	sd	a1, -0x68(s0)
;         assert_unsafe_precondition!(
8021463a: 83 36 84 f9  	ld	a3, -0x68(s0)
8021463e: 05 46        	li	a2, 0x1
80214640: b2 85        	mv	a1, a2
80214642: 97 d0 fe ff  	auipc	ra, 0xfffed
80214646: e7 80 c0 eb  	jalr	-0x144(ra) <ekernel+0xffcb44fe>
8021464a: 83 35 84 f5  	ld	a1, -0xa8(s0)
8021464e: 03 35 04 f6  	ld	a0, -0xa0(s0)
;         self as _
80214652: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80214656: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021465a: 83 35 84 f9  	ld	a1, -0x68(s0)
8021465e: 23 3c b4 fa  	sd	a1, -0x48(s0)
80214662: 03 36 04 fb  	ld	a2, -0x50(s0)
80214666: 83 35 84 fb  	ld	a1, -0x48(s0)
8021466a: 23 30 c4 fa  	sd	a2, -0x60(s0)
8021466e: 23 34 b4 fa  	sd	a1, -0x58(s0)
80214672: 83 35 04 fa  	ld	a1, -0x60(s0)
80214676: 03 36 84 fa  	ld	a2, -0x58(s0)
;         self.make_slice()
8021467a: 23 34 b4 f8  	sd	a1, -0x78(s0)
8021467e: 23 38 c4 f8  	sd	a2, -0x70(s0)
;         unsafe { self.append_elements(slice) };
80214682: 97 00 00 00  	auipc	ra, 0x0
80214686: e7 80 40 11  	jalr	0x114(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h16d4094d1c7bc2d1E>
8021468a: aa 70        	ld	ra, 0xa8(sp)
8021468c: 0a 74        	ld	s0, 0xa0(sp)
;     }
8021468e: 4d 61        	addi	sp, sp, 0xb0
80214690: 82 80        	ret

0000000080214692 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h44b02834067c845bE>:
;     pub const fn new() -> Self {
80214692: 41 11        	addi	sp, sp, -0x10
80214694: 06 e4        	sd	ra, 0x8(sp)
80214696: 22 e0        	sd	s0, 0x0(sp)
80214698: 00 08        	addi	s0, sp, 0x10
8021469a: aa 85        	mv	a1, a0
8021469c: 01 45        	li	a0, 0x0
;         Vec { buf: RawVec::NEW, len: 0 }
8021469e: 88 e1        	sd	a0, 0x0(a1)
802146a0: 21 46        	li	a2, 0x8
802146a2: 90 e5        	sd	a2, 0x8(a1)
802146a4: 88 e9        	sd	a0, 0x10(a1)
802146a6: a2 60        	ld	ra, 0x8(sp)
802146a8: 02 64        	ld	s0, 0x0(sp)
;     }
802146aa: 41 01        	addi	sp, sp, 0x10
802146ac: 82 80        	ret

00000000802146ae <_ZN5alloc3vec12Vec$LT$T$GT$3new17h6bb32ecae2d2876aE>:
;     pub const fn new() -> Self {
802146ae: 41 11        	addi	sp, sp, -0x10
802146b0: 06 e4        	sd	ra, 0x8(sp)
802146b2: 22 e0        	sd	s0, 0x0(sp)
802146b4: 00 08        	addi	s0, sp, 0x10
802146b6: aa 85        	mv	a1, a0
802146b8: 01 45        	li	a0, 0x0
;         Vec { buf: RawVec::NEW, len: 0 }
802146ba: 88 e1        	sd	a0, 0x0(a1)
802146bc: 21 46        	li	a2, 0x8
802146be: 90 e5        	sd	a2, 0x8(a1)
802146c0: 88 e9        	sd	a0, 0x10(a1)
802146c2: a2 60        	ld	ra, 0x8(sp)
802146c4: 02 64        	ld	s0, 0x0(sp)
;     }
802146c6: 41 01        	addi	sp, sp, 0x10
802146c8: 82 80        	ret

00000000802146ca <_ZN5alloc3vec12Vec$LT$T$GT$3new17h7972205b75f93b38E>:
;     pub const fn new() -> Self {
802146ca: 41 11        	addi	sp, sp, -0x10
802146cc: 06 e4        	sd	ra, 0x8(sp)
802146ce: 22 e0        	sd	s0, 0x0(sp)
802146d0: 00 08        	addi	s0, sp, 0x10
802146d2: aa 85        	mv	a1, a0
802146d4: 01 45        	li	a0, 0x0
;         Vec { buf: RawVec::NEW, len: 0 }
802146d6: 88 e1        	sd	a0, 0x0(a1)
802146d8: 21 46        	li	a2, 0x8
802146da: 90 e5        	sd	a2, 0x8(a1)
802146dc: 88 e9        	sd	a0, 0x10(a1)
802146de: a2 60        	ld	ra, 0x8(sp)
802146e0: 02 64        	ld	s0, 0x0(sp)
;     }
802146e2: 41 01        	addi	sp, sp, 0x10
802146e4: 82 80        	ret

00000000802146e6 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h9152f91d68d0aab1E>:
;     pub const fn new() -> Self {
802146e6: 41 11        	addi	sp, sp, -0x10
802146e8: 06 e4        	sd	ra, 0x8(sp)
802146ea: 22 e0        	sd	s0, 0x0(sp)
802146ec: 00 08        	addi	s0, sp, 0x10
802146ee: aa 85        	mv	a1, a0
802146f0: 01 45        	li	a0, 0x0
;         Vec { buf: RawVec::NEW, len: 0 }
802146f2: 88 e1        	sd	a0, 0x0(a1)
802146f4: 05 46        	li	a2, 0x1
802146f6: 90 e5        	sd	a2, 0x8(a1)
802146f8: 88 e9        	sd	a0, 0x10(a1)
802146fa: a2 60        	ld	ra, 0x8(sp)
802146fc: 02 64        	ld	s0, 0x0(sp)
;     }
802146fe: 41 01        	addi	sp, sp, 0x10
80214700: 82 80        	ret

0000000080214702 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h9761f4c138b1b01fE>:
;     pub const fn new() -> Self {
80214702: 41 11        	addi	sp, sp, -0x10
80214704: 06 e4        	sd	ra, 0x8(sp)
80214706: 22 e0        	sd	s0, 0x0(sp)
80214708: 00 08        	addi	s0, sp, 0x10
8021470a: aa 85        	mv	a1, a0
8021470c: 01 45        	li	a0, 0x0
;         Vec { buf: RawVec::NEW, len: 0 }
8021470e: 88 e1        	sd	a0, 0x0(a1)
80214710: 21 46        	li	a2, 0x8
80214712: 90 e5        	sd	a2, 0x8(a1)
80214714: 88 e9        	sd	a0, 0x10(a1)
80214716: a2 60        	ld	ra, 0x8(sp)
80214718: 02 64        	ld	s0, 0x0(sp)
;     }
8021471a: 41 01        	addi	sp, sp, 0x10
8021471c: 82 80        	ret

000000008021471e <_ZN5alloc3vec12Vec$LT$T$GT$3new17hc5a1186bf5f9f063E>:
;     pub const fn new() -> Self {
8021471e: 41 11        	addi	sp, sp, -0x10
80214720: 06 e4        	sd	ra, 0x8(sp)
80214722: 22 e0        	sd	s0, 0x0(sp)
80214724: 00 08        	addi	s0, sp, 0x10
80214726: aa 85        	mv	a1, a0
80214728: 01 45        	li	a0, 0x0
;         Vec { buf: RawVec::NEW, len: 0 }
8021472a: 88 e1        	sd	a0, 0x0(a1)
8021472c: 21 46        	li	a2, 0x8
8021472e: 90 e5        	sd	a2, 0x8(a1)
80214730: 88 e9        	sd	a0, 0x10(a1)
80214732: a2 60        	ld	ra, 0x8(sp)
80214734: 02 64        	ld	s0, 0x0(sp)
;     }
80214736: 41 01        	addi	sp, sp, 0x10
80214738: 82 80        	ret

000000008021473a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$13shrink_to_fit17h3795acd3638b1067E>:
;     pub fn shrink_to_fit(&mut self) {
8021473a: 39 71        	addi	sp, sp, -0x40
8021473c: 06 fc        	sd	ra, 0x38(sp)
8021473e: 22 f8        	sd	s0, 0x30(sp)
80214740: 80 00        	addi	s0, sp, 0x40
80214742: 23 30 a4 fc  	sd	a0, -0x40(s0)
80214746: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.buf.capacity()
8021474a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8021474e: 09 a0        	j	0x80214750 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$13shrink_to_fit17h3795acd3638b1067E+0x16>
80214750: 03 35 04 fc  	ld	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214754: 08 61        	ld	a0, 0x0(a0)
80214756: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021475a: 09 a0        	j	0x8021475c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$13shrink_to_fit17h3795acd3638b1067E+0x22>
8021475c: 03 35 04 fc  	ld	a0, -0x40(s0)
;         if self.capacity() > self.len {
80214760: 08 69        	ld	a0, 0x10(a0)
80214762: 83 35 84 fc  	ld	a1, -0x38(s0)
80214766: 63 64 b5 00  	bltu	a0, a1, 0x8021476e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$13shrink_to_fit17h3795acd3638b1067E+0x34>
8021476a: 09 a0        	j	0x8021476c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$13shrink_to_fit17h3795acd3638b1067E+0x32>
8021476c: 0d a0        	j	0x8021478e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$13shrink_to_fit17h3795acd3638b1067E+0x54>
8021476e: 03 35 04 fc  	ld	a0, -0x40(s0)
;             self.buf.shrink_to_fit(self.len);
80214772: 23 30 a4 fe  	sd	a0, -0x20(s0)
80214776: 0c 69        	ld	a1, 0x10(a0)
80214778: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         handle_reserve(self.shrink(cap));
8021477c: 97 c0 ff ff  	auipc	ra, 0xffffc
80214780: e7 80 a0 48  	jalr	0x48a(ra) <ekernel+0xffcc3c06>
80214784: 97 50 01 00  	auipc	ra, 0x15
80214788: e7 80 a0 f6  	jalr	-0x96(ra) <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E>
;         if self.capacity() > self.len {
8021478c: 09 a0        	j	0x8021478e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$13shrink_to_fit17h3795acd3638b1067E+0x54>
8021478e: e2 70        	ld	ra, 0x38(sp)
80214790: 42 74        	ld	s0, 0x30(sp)
;     }
80214792: 21 61        	addi	sp, sp, 0x40
80214794: 82 80        	ret

0000000080214796 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h16d4094d1c7bc2d1E>:
;     unsafe fn append_elements(&mut self, other: *const [T]) {
80214796: 19 71        	addi	sp, sp, -0x80
80214798: 86 fc        	sd	ra, 0x78(sp)
8021479a: a2 f8        	sd	s0, 0x70(sp)
8021479c: 00 01        	addi	s0, sp, 0x80
8021479e: 23 30 c4 f8  	sd	a2, -0x80(s0)
802147a2: 2e 86        	mv	a2, a1
802147a4: 83 35 04 f8  	ld	a1, -0x80(s0)
802147a8: 23 34 c4 f8  	sd	a2, -0x78(s0)
802147ac: 23 38 a4 f8  	sd	a0, -0x70(s0)
802147b0: 23 30 a4 fa  	sd	a0, -0x60(s0)
802147b4: 23 34 c4 fa  	sd	a2, -0x58(s0)
802147b8: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         let count = unsafe { (*other).len() };
802147bc: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         self.reserve(count);
802147c0: 97 00 00 00  	auipc	ra, 0x0
802147c4: e7 80 a0 68  	jalr	0x68a(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h607af7ccfddf6c03E>
802147c8: 03 36 84 f8  	ld	a2, -0x78(s0)
802147cc: 03 35 04 f9  	ld	a0, -0x70(s0)
;         self.len
802147d0: 0c 69        	ld	a1, 0x10(a0)
802147d2: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
802147d6: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         self.buf.ptr()
802147da: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.ptr.as_ptr()
802147de: 08 65        	ld	a0, 0x8(a0)
802147e0: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.pointer as *mut T
802147e4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
802147e8: 2e 95        	add	a0, a0, a1
802147ea: 23 3c a4 f8  	sd	a0, -0x68(s0)
802147ee: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     assert_unsafe_precondition!(
802147f2: 09 a0        	j	0x802147f4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h16d4094d1c7bc2d1E+0x5e>
802147f4: 03 37 04 f8  	ld	a4, -0x80(s0)
802147f8: 83 35 84 f9  	ld	a1, -0x68(s0)
802147fc: 03 35 84 f8  	ld	a0, -0x78(s0)
80214800: 85 46        	li	a3, 0x1
;     assert_unsafe_precondition!(
80214802: 36 86        	mv	a2, a3
80214804: 97 50 00 00  	auipc	ra, 0x5
80214808: e7 80 80 00  	jalr	0x8(ra) <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h279b2b08ed81b702E>
8021480c: 09 a0        	j	0x8021480e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h16d4094d1c7bc2d1E+0x78>
8021480e: 03 36 04 f8  	ld	a2, -0x80(s0)
80214812: 83 35 84 f8  	ld	a1, -0x78(s0)
80214816: 03 35 84 f9  	ld	a0, -0x68(s0)
;     unsafe { copy_nonoverlapping(src, dst, count) }
8021481a: 97 d0 01 00  	auipc	ra, 0x1d
8021481e: e7 80 40 45  	jalr	0x454(ra) <memcpy>
80214822: 03 36 04 f8  	ld	a2, -0x80(s0)
80214826: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.len += count;
8021482a: 88 69        	ld	a0, 0x10(a1)
8021482c: 32 95        	add	a0, a0, a2
8021482e: 88 e9        	sd	a0, 0x10(a1)
80214830: e6 70        	ld	ra, 0x78(sp)
80214832: 46 74        	ld	s0, 0x70(sp)
;     }
80214834: 09 61        	addi	sp, sp, 0x80
80214836: 82 80        	ret

0000000080214838 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16into_boxed_slice17h78ed5adb613afcaaE>:
;     pub fn into_boxed_slice(mut self) -> Box<[T], A> {
80214838: 19 71        	addi	sp, sp, -0x80
8021483a: 86 fc        	sd	ra, 0x78(sp)
8021483c: a2 f8        	sd	s0, 0x70(sp)
8021483e: 00 01        	addi	s0, sp, 0x80
80214840: 23 30 a4 f8  	sd	a0, -0x80(s0)
;             self.shrink_to_fit();
80214844: 97 00 00 00  	auipc	ra, 0x0
80214848: e7 80 60 ef  	jalr	-0x10a(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$13shrink_to_fit17h3795acd3638b1067E>
8021484c: 03 35 04 f8  	ld	a0, -0x80(s0)
;             let me = ManuallyDrop::new(self);
80214850: 0c 69        	ld	a1, 0x10(a0)
80214852: 23 38 b4 fa  	sd	a1, -0x50(s0)
80214856: 0c 65        	ld	a1, 0x8(a0)
80214858: 23 34 b4 fa  	sd	a1, -0x58(s0)
8021485c: 08 61        	ld	a0, 0x0(a0)
8021485e: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         ManuallyDrop { value }
80214862: 03 35 04 fb  	ld	a0, -0x50(s0)
80214866: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021486a: 03 35 84 fa  	ld	a0, -0x58(s0)
8021486e: 23 38 a4 f8  	sd	a0, -0x70(s0)
80214872: 03 35 04 fa  	ld	a0, -0x60(s0)
80214876: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021487a: 13 06 84 f8  	addi	a2, s0, -0x78
;             let buf = ptr::read(&me.buf);
8021487e: 23 3c c4 fa  	sd	a2, -0x48(s0)
80214882: 23 30 c4 fc  	sd	a2, -0x40(s0)
;         crate::intrinsics::read_via_copy(src)
80214886: 03 35 84 f8  	ld	a0, -0x78(s0)
8021488a: 83 35 04 f9  	ld	a1, -0x70(s0)
8021488e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80214892: 23 38 b4 fc  	sd	a1, -0x30(s0)
;             let len = me.len();
80214896: 23 3c c4 fc  	sd	a2, -0x28(s0)
8021489a: 23 30 c4 fe  	sd	a2, -0x20(s0)
;         self.len
8021489e: 03 36 84 f9  	ld	a2, -0x68(s0)
802148a2: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             buf.into_box(len).assume_init()
802148a6: 97 c0 ff ff  	auipc	ra, 0xffffc
802148aa: e7 80 80 65  	jalr	0x658(ra) <ekernel+0xffcc3efe>
802148ae: 97 e0 ff ff  	auipc	ra, 0xffffe
802148b2: e7 80 c0 9c  	jalr	-0x634(ra) <ekernel+0xffcc527a>
802148b6: e6 70        	ld	ra, 0x78(sp)
802148b8: 46 74        	ld	s0, 0x70(sp)
;     }
802148ba: 09 61        	addi	sp, sp, 0x80
802148bc: 82 80        	ret

00000000802148be <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17h65e22f70a79c314aE>:
;     pub fn extend_from_slice(&mut self, other: &[T]) {
802148be: 19 71        	addi	sp, sp, -0x80
802148c0: 86 fc        	sd	ra, 0x78(sp)
802148c2: a2 f8        	sd	s0, 0x70(sp)
802148c4: 00 01        	addi	s0, sp, 0x80
802148c6: 23 30 c4 f8  	sd	a2, -0x80(s0)
802148ca: 23 34 b4 f8  	sd	a1, -0x78(s0)
802148ce: 23 38 a4 f8  	sd	a0, -0x70(s0)
802148d2: 23 34 a4 fc  	sd	a0, -0x38(s0)
802148d6: 23 38 b4 fc  	sd	a1, -0x30(s0)
802148da: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         let len = slice.len();
802148de: 23 30 c4 fe  	sd	a2, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
802148e2: 23 38 b4 fa  	sd	a1, -0x50(s0)
802148e6: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
802148ea: 23 34 b4 fa  	sd	a1, -0x58(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
802148ee: 09 a0        	j	0x802148f0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17h65e22f70a79c314aE+0x32>
802148f0: 03 35 84 f8  	ld	a0, -0x78(s0)
802148f4: 83 35 04 f8  	ld	a1, -0x80(s0)
;         self.pointer as *mut T
802148f8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
802148fc: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
802148fe: 23 30 a4 fc  	sd	a0, -0x40(s0)
80214902: 09 a0        	j	0x80214904 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17h65e22f70a79c314aE+0x46>
80214904: 03 35 04 f9  	ld	a0, -0x70(s0)
;             Self { ptr, end_or_len, _marker: PhantomData }
80214908: 83 35 04 fc  	ld	a1, -0x40(s0)
8021490c: 03 36 84 fa  	ld	a2, -0x58(s0)
80214910: 23 3c c4 f8  	sd	a2, -0x68(s0)
80214914: 23 30 b4 fa  	sd	a1, -0x60(s0)
;         self.spec_extend(other.iter())
80214918: 83 35 84 f9  	ld	a1, -0x68(s0)
8021491c: 03 36 04 fa  	ld	a2, -0x60(s0)
80214920: 97 00 00 00  	auipc	ra, 0x0
80214924: e7 80 a0 cb  	jalr	-0x346(ra) <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hf368d80a107e4e56E>
80214928: e6 70        	ld	ra, 0x78(sp)
8021492a: 46 74        	ld	s0, 0x70(sp)
;     }
8021492c: 09 61        	addi	sp, sp, 0x80
8021492e: 82 80        	ret

0000000080214930 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h219b7ac031b797a2E>:
;     pub fn len(&self) -> usize {
80214930: 01 11        	addi	sp, sp, -0x20
80214932: 06 ec        	sd	ra, 0x18(sp)
80214934: 22 e8        	sd	s0, 0x10(sp)
80214936: 00 10        	addi	s0, sp, 0x20
80214938: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.len
8021493c: 08 69        	ld	a0, 0x10(a0)
8021493e: e2 60        	ld	ra, 0x18(sp)
80214940: 42 64        	ld	s0, 0x10(sp)
;     }
80214942: 05 61        	addi	sp, sp, 0x20
80214944: 82 80        	ret

0000000080214946 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17hd9824eba35b2ddb8E>:
;     pub fn len(&self) -> usize {
80214946: 01 11        	addi	sp, sp, -0x20
80214948: 06 ec        	sd	ra, 0x18(sp)
8021494a: 22 e8        	sd	s0, 0x10(sp)
8021494c: 00 10        	addi	s0, sp, 0x20
8021494e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.len
80214952: 08 69        	ld	a0, 0x10(a0)
80214954: e2 60        	ld	ra, 0x18(sp)
80214956: 42 64        	ld	s0, 0x10(sp)
;     }
80214958: 05 61        	addi	sp, sp, 0x20
8021495a: 82 80        	ret

000000008021495c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE>:
;     pub fn pop(&mut self) -> Option<T> {
8021495c: 19 71        	addi	sp, sp, -0x80
8021495e: 86 fc        	sd	ra, 0x78(sp)
80214960: a2 f8        	sd	s0, 0x70(sp)
80214962: 00 01        	addi	s0, sp, 0x80
80214964: 23 38 a4 f8  	sd	a0, -0x70(s0)
80214968: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         if self.len == 0 {
8021496c: 08 69        	ld	a0, 0x10(a0)
8021496e: 11 e5        	bnez	a0, 0x8021497a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE+0x1e>
80214970: 09 a0        	j	0x80214972 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE+0x16>
80214972: 01 45        	li	a0, 0x0
;             None
80214974: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         if self.len == 0 {
80214978: 21 a8        	j	0x80214990 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE+0x34>
8021497a: 03 35 04 f9  	ld	a0, -0x70(s0)
;                 self.len -= 1;
8021497e: 0c 69        	ld	a1, 0x10(a0)
80214980: fd 15        	addi	a1, a1, -0x1
80214982: 0c e9        	sd	a1, 0x10(a0)
;                 core::hint::assert_unchecked(self.len < self.capacity());
80214984: 0c 69        	ld	a1, 0x10(a0)
80214986: 23 34 b4 f8  	sd	a1, -0x78(s0)
;         self.buf.capacity()
8021498a: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8021498e: 09 a8        	j	0x802149a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE+0x44>
;     }
80214990: 03 35 84 f9  	ld	a0, -0x68(s0)
80214994: 83 35 04 fa  	ld	a1, -0x60(s0)
80214998: e6 70        	ld	ra, 0x78(sp)
8021499a: 46 74        	ld	s0, 0x70(sp)
8021499c: 09 61        	addi	sp, sp, 0x80
8021499e: 82 80        	ret
802149a0: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802149a4: 08 61        	ld	a0, 0x0(a0)
802149a6: 23 34 a4 fa  	sd	a0, -0x58(s0)
802149aa: 09 a0        	j	0x802149ac <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE+0x50>
802149ac: 03 35 84 f8  	ld	a0, -0x78(s0)
;                 core::hint::assert_unchecked(self.len < self.capacity());
802149b0: 83 35 84 fa  	ld	a1, -0x58(s0)
802149b4: 33 35 b5 00  	sltu	a0, a0, a1
802149b8: 23 30 a4 f8  	sd	a0, -0x80(s0)
802149bc: a3 03 a4 fc  	sb	a0, -0x39(s0)
;         intrinsics::assert_unsafe_precondition!(
802149c0: 09 a0        	j	0x802149c2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE+0x66>
802149c2: 03 35 04 f8  	ld	a0, -0x80(s0)
;         intrinsics::assert_unsafe_precondition!(
802149c6: 05 89        	andi	a0, a0, 0x1
802149c8: 97 60 ff ff  	auipc	ra, 0xffff6
802149cc: e7 80 80 f1  	jalr	-0xe8(ra) <ekernel+0xffcbd8e0>
802149d0: 09 a0        	j	0x802149d2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE+0x76>
802149d2: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.buf.ptr()
802149d6: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.ptr.as_ptr()
802149da: 88 65        	ld	a0, 0x8(a1)
802149dc: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.pointer as *mut T
802149e0: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.len
802149e4: 8c 69        	ld	a1, 0x10(a1)
802149e6: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
802149ea: 8e 05        	slli	a1, a1, 0x3
802149ec: 2e 95        	add	a0, a0, a1
802149ee: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         crate::intrinsics::read_via_copy(src)
802149f2: 08 61        	ld	a0, 0x0(a0)
;                 Some(ptr::read(self.as_ptr().add(self.len())))
802149f4: 23 30 a4 fa  	sd	a0, -0x60(s0)
802149f8: 05 45        	li	a0, 0x1
802149fa: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         if self.len == 0 {
802149fe: 49 bf        	j	0x80214990 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3pop17h62ab83eaa26b353cE+0x34>

0000000080214a00 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0aa21330a7850061E>:
;     pub fn push(&mut self, value: T) {
80214a00: 19 71        	addi	sp, sp, -0x80
80214a02: 86 fc        	sd	ra, 0x78(sp)
80214a04: a2 f8        	sd	s0, 0x70(sp)
80214a06: 00 01        	addi	s0, sp, 0x80
80214a08: 23 30 c4 f8  	sd	a2, -0x80(s0)
80214a0c: 23 34 b4 f8  	sd	a1, -0x78(s0)
80214a10: 23 38 a4 f8  	sd	a0, -0x70(s0)
80214a14: 23 34 a4 fa  	sd	a0, -0x58(s0)
80214a18: 23 38 b4 fa  	sd	a1, -0x50(s0)
80214a1c: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         if self.len == self.buf.capacity() {
80214a20: 0c 69        	ld	a1, 0x10(a0)
80214a22: 23 3c b4 f8  	sd	a1, -0x68(s0)
80214a26: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214a2a: 09 a0        	j	0x80214a2c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0aa21330a7850061E+0x2c>
80214a2c: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214a30: 08 61        	ld	a0, 0x0(a0)
80214a32: 23 30 a4 fa  	sd	a0, -0x60(s0)
80214a36: 09 a0        	j	0x80214a38 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0aa21330a7850061E+0x38>
80214a38: 03 35 84 f9  	ld	a0, -0x68(s0)
;         if self.len == self.buf.capacity() {
80214a3c: 83 35 04 fa  	ld	a1, -0x60(s0)
80214a40: 63 04 b5 00  	beq	a0, a1, 0x80214a48 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0aa21330a7850061E+0x48>
80214a44: 09 a0        	j	0x80214a46 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0aa21330a7850061E+0x46>
80214a46: 09 a8        	j	0x80214a58 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0aa21330a7850061E+0x58>
80214a48: 03 35 04 f9  	ld	a0, -0x70(s0)
;             self.buf.reserve_for_push(self.len);
80214a4c: 0c 69        	ld	a1, 0x10(a0)
80214a4e: 97 c0 ff ff  	auipc	ra, 0xffffc
80214a52: e7 80 60 0c  	jalr	0xc6(ra) <ekernel+0xffcc3b14>
;         if self.len == self.buf.capacity() {
80214a56: 09 a0        	j	0x80214a58 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0aa21330a7850061E+0x58>
80214a58: 83 35 04 f9  	ld	a1, -0x70(s0)
80214a5c: 03 35 04 f8  	ld	a0, -0x80(s0)
80214a60: 83 36 84 f8  	ld	a3, -0x78(s0)
;         self.buf.ptr()
80214a64: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.ptr.as_ptr()
80214a68: 90 65        	ld	a2, 0x8(a1)
80214a6a: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         self.pointer as *mut T
80214a6e: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             let end = self.as_mut_ptr().add(self.len);
80214a72: 98 69        	ld	a4, 0x10(a1)
80214a74: 23 30 e4 fe  	sd	a4, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80214a78: 12 07        	slli	a4, a4, 0x4
80214a7a: 3a 96        	add	a2, a2, a4
80214a7c: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80214a80: 14 e2        	sd	a3, 0x0(a2)
80214a82: 08 e6        	sd	a0, 0x8(a2)
;             self.len += 1;
80214a84: 88 69        	ld	a0, 0x10(a1)
80214a86: 05 05        	addi	a0, a0, 0x1
80214a88: 88 e9        	sd	a0, 0x10(a1)
80214a8a: e6 70        	ld	ra, 0x78(sp)
80214a8c: 46 74        	ld	s0, 0x70(sp)
;     }
80214a8e: 09 61        	addi	sp, sp, 0x80
80214a90: 82 80        	ret

0000000080214a92 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h116e33f5087cbefbE>:
;     pub fn push(&mut self, value: T) {
80214a92: 59 71        	addi	sp, sp, -0x70
80214a94: 86 f4        	sd	ra, 0x68(sp)
80214a96: a2 f0        	sd	s0, 0x60(sp)
80214a98: 80 18        	addi	s0, sp, 0x70
80214a9a: 23 38 b4 f8  	sd	a1, -0x70(s0)
80214a9e: 23 3c a4 f8  	sd	a0, -0x68(s0)
80214aa2: 23 38 a4 fa  	sd	a0, -0x50(s0)
80214aa6: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         if self.len == self.buf.capacity() {
80214aaa: 0c 69        	ld	a1, 0x10(a0)
80214aac: 23 30 b4 fa  	sd	a1, -0x60(s0)
80214ab0: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214ab4: 09 a0        	j	0x80214ab6 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h116e33f5087cbefbE+0x24>
80214ab6: 03 35 84 f9  	ld	a0, -0x68(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214aba: 08 61        	ld	a0, 0x0(a0)
80214abc: 23 34 a4 fa  	sd	a0, -0x58(s0)
80214ac0: 09 a0        	j	0x80214ac2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h116e33f5087cbefbE+0x30>
80214ac2: 03 35 04 fa  	ld	a0, -0x60(s0)
;         if self.len == self.buf.capacity() {
80214ac6: 83 35 84 fa  	ld	a1, -0x58(s0)
80214aca: 63 04 b5 00  	beq	a0, a1, 0x80214ad2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h116e33f5087cbefbE+0x40>
80214ace: 09 a0        	j	0x80214ad0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h116e33f5087cbefbE+0x3e>
80214ad0: 09 a8        	j	0x80214ae2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h116e33f5087cbefbE+0x50>
80214ad2: 03 35 84 f9  	ld	a0, -0x68(s0)
;             self.buf.reserve_for_push(self.len);
80214ad6: 0c 69        	ld	a1, 0x10(a0)
80214ad8: 97 c0 ff ff  	auipc	ra, 0xffffc
80214adc: e7 80 a0 f6  	jalr	-0x96(ra) <ekernel+0xffcc3a42>
;         if self.len == self.buf.capacity() {
80214ae0: 09 a0        	j	0x80214ae2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h116e33f5087cbefbE+0x50>
80214ae2: 83 35 84 f9  	ld	a1, -0x68(s0)
80214ae6: 03 35 04 f9  	ld	a0, -0x70(s0)
;         self.buf.ptr()
80214aea: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.ptr.as_ptr()
80214aee: 90 65        	ld	a2, 0x8(a1)
80214af0: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         self.pointer as *mut T
80214af4: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             let end = self.as_mut_ptr().add(self.len);
80214af8: 94 69        	ld	a3, 0x10(a1)
80214afa: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80214afe: 8e 06        	slli	a3, a3, 0x3
80214b00: 36 96        	add	a2, a2, a3
80214b02: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80214b06: 08 e2        	sd	a0, 0x0(a2)
;             self.len += 1;
80214b08: 88 69        	ld	a0, 0x10(a1)
80214b0a: 05 05        	addi	a0, a0, 0x1
80214b0c: 88 e9        	sd	a0, 0x10(a1)
80214b0e: a6 70        	ld	ra, 0x68(sp)
80214b10: 06 74        	ld	s0, 0x60(sp)
;     }
80214b12: 65 61        	addi	sp, sp, 0x70
80214b14: 82 80        	ret

0000000080214b16 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h34bd5a272f7c1f69E>:
;     pub fn push(&mut self, value: T) {
80214b16: 59 71        	addi	sp, sp, -0x70
80214b18: 86 f4        	sd	ra, 0x68(sp)
80214b1a: a2 f0        	sd	s0, 0x60(sp)
80214b1c: 80 18        	addi	s0, sp, 0x70
80214b1e: 23 38 a4 f8  	sd	a0, -0x70(s0)
80214b22: 2e 86        	mv	a2, a1
80214b24: 23 3c c4 f8  	sd	a2, -0x68(s0)
80214b28: 23 38 a4 fa  	sd	a0, -0x50(s0)
80214b2c: a3 0f b4 fa  	sb	a1, -0x41(s0)
;         if self.len == self.buf.capacity() {
80214b30: 0c 69        	ld	a1, 0x10(a0)
80214b32: 23 30 b4 fa  	sd	a1, -0x60(s0)
80214b36: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214b3a: 09 a0        	j	0x80214b3c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h34bd5a272f7c1f69E+0x26>
80214b3c: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214b40: 08 61        	ld	a0, 0x0(a0)
80214b42: 23 34 a4 fa  	sd	a0, -0x58(s0)
80214b46: 09 a0        	j	0x80214b48 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h34bd5a272f7c1f69E+0x32>
80214b48: 03 35 04 fa  	ld	a0, -0x60(s0)
;         if self.len == self.buf.capacity() {
80214b4c: 83 35 84 fa  	ld	a1, -0x58(s0)
80214b50: 63 04 b5 00  	beq	a0, a1, 0x80214b58 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h34bd5a272f7c1f69E+0x42>
80214b54: 09 a0        	j	0x80214b56 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h34bd5a272f7c1f69E+0x40>
80214b56: 09 a8        	j	0x80214b68 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h34bd5a272f7c1f69E+0x52>
80214b58: 03 35 04 f9  	ld	a0, -0x70(s0)
;             self.buf.reserve_for_push(self.len);
80214b5c: 0c 69        	ld	a1, 0x10(a0)
80214b5e: 97 c0 ff ff  	auipc	ra, 0xffffc
80214b62: e7 80 c0 f8  	jalr	-0x74(ra) <ekernel+0xffcc3aea>
;         if self.len == self.buf.capacity() {
80214b66: 09 a0        	j	0x80214b68 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h34bd5a272f7c1f69E+0x52>
80214b68: 83 35 04 f9  	ld	a1, -0x70(s0)
80214b6c: 03 35 84 f9  	ld	a0, -0x68(s0)
;         self.buf.ptr()
80214b70: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.ptr.as_ptr()
80214b74: 90 65        	ld	a2, 0x8(a1)
80214b76: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         self.pointer as *mut T
80214b7a: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             let end = self.as_mut_ptr().add(self.len);
80214b7e: 94 69        	ld	a3, 0x10(a1)
80214b80: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80214b84: 36 96        	add	a2, a2, a3
80214b86: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80214b8a: 23 00 a6 00  	sb	a0, 0x0(a2)
;             self.len += 1;
80214b8e: 88 69        	ld	a0, 0x10(a1)
80214b90: 05 05        	addi	a0, a0, 0x1
80214b92: 88 e9        	sd	a0, 0x10(a1)
80214b94: a6 70        	ld	ra, 0x68(sp)
80214b96: 06 74        	ld	s0, 0x60(sp)
;     }
80214b98: 65 61        	addi	sp, sp, 0x70
80214b9a: 82 80        	ret

0000000080214b9c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E>:
;     pub fn push(&mut self, value: T) {
80214b9c: 19 71        	addi	sp, sp, -0x80
80214b9e: 86 fc        	sd	ra, 0x78(sp)
80214ba0: a2 f8        	sd	s0, 0x70(sp)
80214ba2: 00 01        	addi	s0, sp, 0x80
80214ba4: 23 30 c4 f8  	sd	a2, -0x80(s0)
80214ba8: 23 34 b4 f8  	sd	a1, -0x78(s0)
80214bac: 23 38 a4 f8  	sd	a0, -0x70(s0)
80214bb0: 23 34 a4 fa  	sd	a0, -0x58(s0)
80214bb4: 23 38 b4 fa  	sd	a1, -0x50(s0)
80214bb8: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         if self.len == self.buf.capacity() {
80214bbc: 0c 69        	ld	a1, 0x10(a0)
80214bbe: 23 3c b4 f8  	sd	a1, -0x68(s0)
80214bc2: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214bc6: 09 a0        	j	0x80214bc8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E+0x2c>
80214bc8: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214bcc: 08 61        	ld	a0, 0x0(a0)
80214bce: 23 30 a4 fa  	sd	a0, -0x60(s0)
80214bd2: 09 a0        	j	0x80214bd4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E+0x38>
80214bd4: 03 35 84 f9  	ld	a0, -0x68(s0)
;         if self.len == self.buf.capacity() {
80214bd8: 83 35 04 fa  	ld	a1, -0x60(s0)
80214bdc: 63 04 b5 00  	beq	a0, a1, 0x80214be4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E+0x48>
80214be0: 09 a0        	j	0x80214be2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E+0x46>
80214be2: 09 a8        	j	0x80214bf4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E+0x58>
80214be4: 03 35 04 f9  	ld	a0, -0x70(s0)
;             self.buf.reserve_for_push(self.len);
80214be8: 0c 69        	ld	a1, 0x10(a0)
80214bea: 97 c0 ff ff  	auipc	ra, 0xffffc
80214bee: e7 80 c0 ea  	jalr	-0x154(ra) <ekernel+0xffcc3a96>
;         if self.len == self.buf.capacity() {
80214bf2: 09 a0        	j	0x80214bf4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h36cc687af6c7d394E+0x58>
80214bf4: 83 35 04 f9  	ld	a1, -0x70(s0)
80214bf8: 03 35 04 f8  	ld	a0, -0x80(s0)
80214bfc: 83 36 84 f8  	ld	a3, -0x78(s0)
;         self.buf.ptr()
80214c00: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.ptr.as_ptr()
80214c04: 90 65        	ld	a2, 0x8(a1)
80214c06: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         self.pointer as *mut T
80214c0a: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             let end = self.as_mut_ptr().add(self.len);
80214c0e: 98 69        	ld	a4, 0x10(a1)
80214c10: 23 30 e4 fe  	sd	a4, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80214c14: 12 07        	slli	a4, a4, 0x4
80214c16: 3a 96        	add	a2, a2, a4
80214c18: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80214c1c: 14 e2        	sd	a3, 0x0(a2)
80214c1e: 08 e6        	sd	a0, 0x8(a2)
;             self.len += 1;
80214c20: 88 69        	ld	a0, 0x10(a1)
80214c22: 05 05        	addi	a0, a0, 0x1
80214c24: 88 e9        	sd	a0, 0x10(a1)
80214c26: e6 70        	ld	ra, 0x78(sp)
80214c28: 46 74        	ld	s0, 0x70(sp)
;     }
80214c2a: 09 61        	addi	sp, sp, 0x80
80214c2c: 82 80        	ret

0000000080214c2e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E>:
;     pub fn push(&mut self, value: T) {
80214c2e: 59 71        	addi	sp, sp, -0x70
80214c30: 86 f4        	sd	ra, 0x68(sp)
80214c32: a2 f0        	sd	s0, 0x60(sp)
80214c34: 80 18        	addi	s0, sp, 0x70
80214c36: 23 38 b4 f8  	sd	a1, -0x70(s0)
80214c3a: 23 3c a4 f8  	sd	a0, -0x68(s0)
80214c3e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80214c42: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         if self.len == self.buf.capacity() {
80214c46: 0c 69        	ld	a1, 0x10(a0)
80214c48: 23 30 b4 fa  	sd	a1, -0x60(s0)
80214c4c: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214c50: 09 a0        	j	0x80214c52 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E+0x24>
80214c52: 03 35 84 f9  	ld	a0, -0x68(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214c56: 08 61        	ld	a0, 0x0(a0)
80214c58: 23 34 a4 fa  	sd	a0, -0x58(s0)
80214c5c: 09 a0        	j	0x80214c5e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E+0x30>
80214c5e: 03 35 04 fa  	ld	a0, -0x60(s0)
;         if self.len == self.buf.capacity() {
80214c62: 83 35 84 fa  	ld	a1, -0x58(s0)
80214c66: 63 04 b5 00  	beq	a0, a1, 0x80214c6e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E+0x40>
80214c6a: 09 a0        	j	0x80214c6c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E+0x3e>
80214c6c: 09 a8        	j	0x80214c7e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E+0x50>
80214c6e: 03 35 84 f9  	ld	a0, -0x68(s0)
;             self.buf.reserve_for_push(self.len);
80214c72: 0c 69        	ld	a1, 0x10(a0)
80214c74: 97 c0 ff ff  	auipc	ra, 0xffffc
80214c78: e7 80 80 df  	jalr	-0x208(ra) <ekernel+0xffcc3a6c>
;         if self.len == self.buf.capacity() {
80214c7c: 09 a0        	j	0x80214c7e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h6ae77efa16590d83E+0x50>
80214c7e: 83 35 84 f9  	ld	a1, -0x68(s0)
80214c82: 03 35 04 f9  	ld	a0, -0x70(s0)
;         self.buf.ptr()
80214c86: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.ptr.as_ptr()
80214c8a: 90 65        	ld	a2, 0x8(a1)
80214c8c: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         self.pointer as *mut T
80214c90: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             let end = self.as_mut_ptr().add(self.len);
80214c94: 94 69        	ld	a3, 0x10(a1)
80214c96: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80214c9a: 8e 06        	slli	a3, a3, 0x3
80214c9c: 36 96        	add	a2, a2, a3
80214c9e: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80214ca2: 08 e2        	sd	a0, 0x0(a2)
;             self.len += 1;
80214ca4: 88 69        	ld	a0, 0x10(a1)
80214ca6: 05 05        	addi	a0, a0, 0x1
80214ca8: 88 e9        	sd	a0, 0x10(a1)
80214caa: a6 70        	ld	ra, 0x68(sp)
80214cac: 06 74        	ld	s0, 0x60(sp)
;     }
80214cae: 65 61        	addi	sp, sp, 0x70
80214cb0: 82 80        	ret

0000000080214cb2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE>:
;     pub fn push(&mut self, value: T) {
80214cb2: 59 71        	addi	sp, sp, -0x70
80214cb4: 86 f4        	sd	ra, 0x68(sp)
80214cb6: a2 f0        	sd	s0, 0x60(sp)
80214cb8: 80 18        	addi	s0, sp, 0x70
80214cba: 23 38 b4 f8  	sd	a1, -0x70(s0)
80214cbe: 23 3c a4 f8  	sd	a0, -0x68(s0)
80214cc2: 23 38 a4 fa  	sd	a0, -0x50(s0)
80214cc6: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         if self.len == self.buf.capacity() {
80214cca: 0c 69        	ld	a1, 0x10(a0)
80214ccc: 23 30 b4 fa  	sd	a1, -0x60(s0)
80214cd0: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214cd4: 09 a0        	j	0x80214cd6 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE+0x24>
80214cd6: 03 35 84 f9  	ld	a0, -0x68(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214cda: 08 61        	ld	a0, 0x0(a0)
80214cdc: 23 34 a4 fa  	sd	a0, -0x58(s0)
80214ce0: 09 a0        	j	0x80214ce2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE+0x30>
80214ce2: 03 35 04 fa  	ld	a0, -0x60(s0)
;         if self.len == self.buf.capacity() {
80214ce6: 83 35 84 fa  	ld	a1, -0x58(s0)
80214cea: 63 04 b5 00  	beq	a0, a1, 0x80214cf2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE+0x40>
80214cee: 09 a0        	j	0x80214cf0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE+0x3e>
80214cf0: 09 a8        	j	0x80214d02 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE+0x50>
80214cf2: 03 35 84 f9  	ld	a0, -0x68(s0)
;             self.buf.reserve_for_push(self.len);
80214cf6: 0c 69        	ld	a1, 0x10(a0)
80214cf8: 97 c0 ff ff  	auipc	ra, 0xffffc
80214cfc: e7 80 80 dc  	jalr	-0x238(ra) <ekernel+0xffcc3ac0>
;         if self.len == self.buf.capacity() {
80214d00: 09 a0        	j	0x80214d02 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17ha4557cb90f379b4fE+0x50>
80214d02: 83 35 84 f9  	ld	a1, -0x68(s0)
80214d06: 03 35 04 f9  	ld	a0, -0x70(s0)
;         self.buf.ptr()
80214d0a: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.ptr.as_ptr()
80214d0e: 90 65        	ld	a2, 0x8(a1)
80214d10: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         self.pointer as *mut T
80214d14: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             let end = self.as_mut_ptr().add(self.len);
80214d18: 94 69        	ld	a3, 0x10(a1)
80214d1a: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80214d1e: 8e 06        	slli	a3, a3, 0x3
80214d20: 36 96        	add	a2, a2, a3
80214d22: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80214d26: 08 e2        	sd	a0, 0x0(a2)
;             self.len += 1;
80214d28: 88 69        	ld	a0, 0x10(a1)
80214d2a: 05 05        	addi	a0, a0, 0x1
80214d2c: 88 e9        	sd	a0, 0x10(a1)
80214d2e: a6 70        	ld	ra, 0x68(sp)
80214d30: 06 74        	ld	s0, 0x60(sp)
;     }
80214d32: 65 61        	addi	sp, sp, 0x70
80214d34: 82 80        	ret

0000000080214d36 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$5clear17hdf00531693ebdccfE>:
;     pub fn clear(&mut self) {
80214d36: 79 71        	addi	sp, sp, -0x30
80214d38: 06 f4        	sd	ra, 0x28(sp)
80214d3a: 22 f0        	sd	s0, 0x20(sp)
80214d3c: 00 18        	addi	s0, sp, 0x30
80214d3e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80214d42: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self
80214d46: 97 00 00 00  	auipc	ra, 0x0
80214d4a: e7 80 e0 43  	jalr	0x43e(ra) <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h858cfa3d60fa7b1fE>
80214d4e: 83 36 04 fd  	ld	a3, -0x30(s0)
;         let elems: *mut [T] = self.as_mut_slice();
80214d52: 23 30 a4 fe  	sd	a0, -0x20(s0)
80214d56: 23 34 b4 fe  	sd	a1, -0x18(s0)
80214d5a: 01 46        	li	a2, 0x0
;             self.len = 0;
80214d5c: 90 ea        	sd	a2, 0x10(a3)
;             ptr::drop_in_place(elems);
80214d5e: 97 30 ff ff  	auipc	ra, 0xffff3
80214d62: e7 80 20 7f  	jalr	0x7f2(ra) <ekernel+0xffcbb550>
80214d66: a2 70        	ld	ra, 0x28(sp)
80214d68: 02 74        	ld	s0, 0x20(sp)
;     }
80214d6a: 45 61        	addi	sp, sp, 0x30
80214d6c: 82 80        	ret

0000000080214d6e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove17haf8db81a47f2fed3E>:
;     pub fn remove(&mut self, index: usize) -> T {
80214d6e: 31 71        	addi	sp, sp, -0xc0
80214d70: 06 fd        	sd	ra, 0xb8(sp)
80214d72: 22 f9        	sd	s0, 0xb0(sp)
80214d74: 80 01        	addi	s0, sp, 0xc0
80214d76: 23 34 c4 f6  	sd	a2, -0x98(s0)
80214d7a: 23 38 b4 f6  	sd	a1, -0x90(s0)
80214d7e: 23 3c a4 f6  	sd	a0, -0x88(s0)
80214d82: 05 46        	li	a2, 0x1
;     pub const unsafe fn add(self, count: usize) -> Self
80214d84: 23 34 c4 f8  	sd	a2, -0x78(s0)
80214d88: 23 38 a4 f8  	sd	a0, -0x70(s0)
80214d8c: 23 3c b4 f8  	sd	a1, -0x68(s0)
;         self.len
80214d90: 08 69        	ld	a0, 0x10(a0)
80214d92: 23 30 a4 f8  	sd	a0, -0x80(s0)
80214d96: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         if index >= len {
80214d9a: 63 fb a5 04  	bgeu	a1, a0, 0x80214df0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove17haf8db81a47f2fed3E+0x82>
80214d9e: 09 a0        	j	0x80214da0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove17haf8db81a47f2fed3E+0x32>
80214da0: 83 35 04 f8  	ld	a1, -0x80(s0)
80214da4: 03 35 04 f7  	ld	a0, -0x90(s0)
80214da8: 03 36 84 f7  	ld	a2, -0x88(s0)
;         self.buf.ptr()
80214dac: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         self.ptr.as_ptr()
80214db0: 10 66        	ld	a2, 0x8(a2)
80214db2: 23 38 c4 fa  	sd	a2, -0x50(s0)
;         self.pointer as *mut T
80214db6: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         unsafe { intrinsics::offset(self, count) }
80214dba: 93 16 35 00  	slli	a3, a0, 0x3
80214dbe: 36 96        	add	a2, a2, a3
80214dc0: 23 34 c4 f4  	sd	a2, -0xb8(s0)
80214dc4: 23 30 c4 fc  	sd	a2, -0x40(s0)
;                 ret = ptr::read(ptr);
80214dc8: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         crate::intrinsics::read_via_copy(src)
80214dcc: 14 62        	ld	a3, 0x0(a2)
80214dce: 23 38 d4 f4  	sd	a3, -0xb0(s0)
80214dd2: 23 38 d4 fc  	sd	a3, -0x30(s0)
;         unsafe { intrinsics::offset(self, count) }
80214dd6: 21 06        	addi	a2, a2, 0x8
80214dd8: 23 3c c4 f4  	sd	a2, -0xa8(s0)
;                 ptr::copy(ptr.add(1), ptr, len - index - 1);
80214ddc: 23 3c c4 fc  	sd	a2, -0x28(s0)
80214de0: 13 45 f5 ff  	not	a0, a0
80214de4: 2e 95        	add	a0, a0, a1
80214de6: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80214dea: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80214dee: 19 a8        	j	0x80214e04 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove17haf8db81a47f2fed3E+0x96>
80214df0: 03 36 84 f6  	ld	a2, -0x98(s0)
80214df4: 83 35 04 f8  	ld	a1, -0x80(s0)
80214df8: 03 35 04 f7  	ld	a0, -0x90(s0)
;             assert_failed(index, len);
80214dfc: 97 a0 01 00  	auipc	ra, 0x1a
80214e00: e7 80 20 ea  	jalr	-0x15e(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove13assert_failed17h6abd3d52231cda7aE>
80214e04: 83 35 84 f4  	ld	a1, -0xb8(s0)
80214e08: 03 35 84 f5  	ld	a0, -0xa8(s0)
80214e0c: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
80214e0e: 97 50 00 00  	auipc	ra, 0x5
80214e12: e7 80 00 ba  	jalr	-0x460(ra) <_ZN4core10intrinsics4copy18precondition_check17h37064f4ff43119e9E>
80214e16: 09 a0        	j	0x80214e18 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove17haf8db81a47f2fed3E+0xaa>
80214e18: 83 35 84 f5  	ld	a1, -0xa8(s0)
80214e1c: 03 35 84 f4  	ld	a0, -0xb8(s0)
80214e20: 03 36 04 f6  	ld	a2, -0xa0(s0)
;         copy(src, dst, count)
80214e24: 0e 06        	slli	a2, a2, 0x3
80214e26: 97 d0 01 00  	auipc	ra, 0x1d
80214e2a: e7 80 00 06  	jalr	0x60(ra) <memmove>
80214e2e: 83 35 04 f8  	ld	a1, -0x80(s0)
80214e32: 03 36 84 f7  	ld	a2, -0x88(s0)
80214e36: 03 35 04 f5  	ld	a0, -0xb0(s0)
;             self.set_len(len - 1);
80214e3a: fd 15        	addi	a1, a1, -0x1
80214e3c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.len = new_len;
80214e40: 0c ea        	sd	a1, 0x10(a2)
80214e42: ea 70        	ld	ra, 0xb8(sp)
80214e44: 4a 74        	ld	s0, 0xb0(sp)
;     }
80214e46: 29 61        	addi	sp, sp, 0xc0
80214e48: 82 80        	ret

0000000080214e4a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h607af7ccfddf6c03E>:
;     pub fn reserve(&mut self, additional: usize) {
80214e4a: 5d 71        	addi	sp, sp, -0x50
80214e4c: 86 e4        	sd	ra, 0x48(sp)
80214e4e: a2 e0        	sd	s0, 0x40(sp)
80214e50: 80 08        	addi	s0, sp, 0x50
80214e52: 23 38 b4 fa  	sd	a1, -0x50(s0)
80214e56: 23 3c a4 fa  	sd	a0, -0x48(s0)
80214e5a: 23 38 a4 fc  	sd	a0, -0x30(s0)
80214e5e: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         self.buf.reserve(self.len, additional);
80214e62: 23 30 a4 fe  	sd	a0, -0x20(s0)
80214e66: 08 69        	ld	a0, 0x10(a0)
80214e68: 23 30 a4 fc  	sd	a0, -0x40(s0)
80214e6c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214e70: 09 a0        	j	0x80214e72 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h607af7ccfddf6c03E+0x28>
80214e72: 03 35 84 fb  	ld	a0, -0x48(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80214e76: 08 61        	ld	a0, 0x0(a0)
80214e78: 23 34 a4 fc  	sd	a0, -0x38(s0)
80214e7c: 09 a0        	j	0x80214e7e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h607af7ccfddf6c03E+0x34>
80214e7e: 83 35 04 fb  	ld	a1, -0x50(s0)
80214e82: 03 36 04 fc  	ld	a2, -0x40(s0)
;     uint_impl! {
80214e86: 03 35 84 fc  	ld	a0, -0x38(s0)
80214e8a: 11 8d        	sub	a0, a0, a2
;         if self.needs_to_grow(len, additional) {
80214e8c: 63 67 b5 00  	bltu	a0, a1, 0x80214e9a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h607af7ccfddf6c03E+0x50>
80214e90: 09 a0        	j	0x80214e92 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h607af7ccfddf6c03E+0x48>
80214e92: a6 60        	ld	ra, 0x48(sp)
80214e94: 06 64        	ld	s0, 0x40(sp)
;     }
80214e96: 61 61        	addi	sp, sp, 0x50
80214e98: 82 80        	ret
80214e9a: 03 36 04 fb  	ld	a2, -0x50(s0)
80214e9e: 83 35 04 fc  	ld	a1, -0x40(s0)
80214ea2: 03 35 84 fb  	ld	a0, -0x48(s0)
;             do_reserve_and_handle(self, len, additional);
80214ea6: 97 c0 ff ff  	auipc	ra, 0xffffc
80214eaa: e7 80 c0 02  	jalr	0x2c(ra) <ekernel+0xffcc3ed2>
80214eae: d5 b7        	j	0x80214e92 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h607af7ccfddf6c03E+0x48>

0000000080214eb0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hb1e4d923a4a7dc1eE>:
;     pub fn as_slice(&self) -> &[T] {
80214eb0: 01 11        	addi	sp, sp, -0x20
80214eb2: 06 ec        	sd	ra, 0x18(sp)
80214eb4: 22 e8        	sd	s0, 0x10(sp)
80214eb6: 00 10        	addi	s0, sp, 0x20
80214eb8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self
80214ebc: 97 00 00 00  	auipc	ra, 0x0
80214ec0: e7 80 40 08  	jalr	0x84(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h77e1ebbea2624a8dE>
80214ec4: e2 60        	ld	ra, 0x18(sp)
80214ec6: 42 64        	ld	s0, 0x10(sp)
;     }
80214ec8: 05 61        	addi	sp, sp, 0x20
80214eca: 82 80        	ret

0000000080214ecc <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h74acfaeb179f7557E>:
;     fn deref(&self) -> &[T] {
80214ecc: 59 71        	addi	sp, sp, -0x70
80214ece: 86 f4        	sd	ra, 0x68(sp)
80214ed0: a2 f0        	sd	s0, 0x60(sp)
80214ed2: 80 18        	addi	s0, sp, 0x70
80214ed4: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
80214ed8: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
80214edc: 0c 65        	ld	a1, 0x8(a0)
80214ede: 23 38 b4 f8  	sd	a1, -0x70(s0)
80214ee2: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
80214ee6: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
80214eea: 08 69        	ld	a0, 0x10(a0)
80214eec: 23 3c a4 f8  	sd	a0, -0x68(s0)
80214ef0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80214ef4: 09 a0        	j	0x80214ef6 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h74acfaeb179f7557E+0x2a>
80214ef6: 83 36 84 f9  	ld	a3, -0x68(s0)
80214efa: 03 35 04 f9  	ld	a0, -0x70(s0)
80214efe: c1 45        	li	a1, 0x10
80214f00: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
80214f02: 97 c0 fe ff  	auipc	ra, 0xfffec
80214f06: e7 80 c0 5f  	jalr	0x5fc(ra) <ekernel+0xffcb44fe>
80214f0a: 09 a0        	j	0x80214f0c <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h74acfaeb179f7557E+0x40>
80214f0c: 03 35 84 f9  	ld	a0, -0x68(s0)
80214f10: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self as _
80214f14: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80214f18: 23 38 b4 fa  	sd	a1, -0x50(s0)
80214f1c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80214f20: 83 35 04 fb  	ld	a1, -0x50(s0)
80214f24: 03 35 84 fb  	ld	a0, -0x48(s0)
80214f28: 23 30 b4 fa  	sd	a1, -0x60(s0)
80214f2c: 23 34 a4 fa  	sd	a0, -0x58(s0)
80214f30: 03 35 04 fa  	ld	a0, -0x60(s0)
80214f34: 83 35 84 fa  	ld	a1, -0x58(s0)
80214f38: a6 70        	ld	ra, 0x68(sp)
80214f3a: 06 74        	ld	s0, 0x60(sp)
;     }
80214f3c: 65 61        	addi	sp, sp, 0x70
80214f3e: 82 80        	ret

0000000080214f40 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h77e1ebbea2624a8dE>:
;     fn deref(&self) -> &[T] {
80214f40: 59 71        	addi	sp, sp, -0x70
80214f42: 86 f4        	sd	ra, 0x68(sp)
80214f44: a2 f0        	sd	s0, 0x60(sp)
80214f46: 80 18        	addi	s0, sp, 0x70
80214f48: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
80214f4c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
80214f50: 0c 65        	ld	a1, 0x8(a0)
80214f52: 23 38 b4 f8  	sd	a1, -0x70(s0)
80214f56: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
80214f5a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
80214f5e: 08 69        	ld	a0, 0x10(a0)
80214f60: 23 3c a4 f8  	sd	a0, -0x68(s0)
80214f64: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80214f68: 09 a0        	j	0x80214f6a <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h77e1ebbea2624a8dE+0x2a>
80214f6a: 83 36 84 f9  	ld	a3, -0x68(s0)
80214f6e: 03 35 04 f9  	ld	a0, -0x70(s0)
80214f72: 05 46        	li	a2, 0x1
;         assert_unsafe_precondition!(
80214f74: b2 85        	mv	a1, a2
80214f76: 97 c0 fe ff  	auipc	ra, 0xfffec
80214f7a: e7 80 80 58  	jalr	0x588(ra) <ekernel+0xffcb44fe>
80214f7e: 09 a0        	j	0x80214f80 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h77e1ebbea2624a8dE+0x40>
80214f80: 03 35 84 f9  	ld	a0, -0x68(s0)
80214f84: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self as _
80214f88: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80214f8c: 23 38 b4 fa  	sd	a1, -0x50(s0)
80214f90: 23 3c a4 fa  	sd	a0, -0x48(s0)
80214f94: 83 35 04 fb  	ld	a1, -0x50(s0)
80214f98: 03 35 84 fb  	ld	a0, -0x48(s0)
80214f9c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80214fa0: 23 34 a4 fa  	sd	a0, -0x58(s0)
80214fa4: 03 35 04 fa  	ld	a0, -0x60(s0)
80214fa8: 83 35 84 fa  	ld	a1, -0x58(s0)
80214fac: a6 70        	ld	ra, 0x68(sp)
80214fae: 06 74        	ld	s0, 0x60(sp)
;     }
80214fb0: 65 61        	addi	sp, sp, 0x70
80214fb2: 82 80        	ret

0000000080214fb4 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h85c6f64a20f56b2fE>:
;     fn deref(&self) -> &[T] {
80214fb4: 59 71        	addi	sp, sp, -0x70
80214fb6: 86 f4        	sd	ra, 0x68(sp)
80214fb8: a2 f0        	sd	s0, 0x60(sp)
80214fba: 80 18        	addi	s0, sp, 0x70
80214fbc: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
80214fc0: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
80214fc4: 0c 65        	ld	a1, 0x8(a0)
80214fc6: 23 38 b4 f8  	sd	a1, -0x70(s0)
80214fca: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
80214fce: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
80214fd2: 08 69        	ld	a0, 0x10(a0)
80214fd4: 23 3c a4 f8  	sd	a0, -0x68(s0)
80214fd8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80214fdc: 09 a0        	j	0x80214fde <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h85c6f64a20f56b2fE+0x2a>
80214fde: 83 36 84 f9  	ld	a3, -0x68(s0)
80214fe2: 03 35 04 f9  	ld	a0, -0x70(s0)
80214fe6: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
80214fe8: b2 85        	mv	a1, a2
80214fea: 97 c0 fe ff  	auipc	ra, 0xfffec
80214fee: e7 80 40 51  	jalr	0x514(ra) <ekernel+0xffcb44fe>
80214ff2: 09 a0        	j	0x80214ff4 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h85c6f64a20f56b2fE+0x40>
80214ff4: 03 35 84 f9  	ld	a0, -0x68(s0)
80214ff8: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self as _
80214ffc: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80215000: 23 38 b4 fa  	sd	a1, -0x50(s0)
80215004: 23 3c a4 fa  	sd	a0, -0x48(s0)
80215008: 83 35 04 fb  	ld	a1, -0x50(s0)
8021500c: 03 35 84 fb  	ld	a0, -0x48(s0)
80215010: 23 30 b4 fa  	sd	a1, -0x60(s0)
80215014: 23 34 a4 fa  	sd	a0, -0x58(s0)
80215018: 03 35 04 fa  	ld	a0, -0x60(s0)
8021501c: 83 35 84 fa  	ld	a1, -0x58(s0)
80215020: a6 70        	ld	ra, 0x68(sp)
80215022: 06 74        	ld	s0, 0x60(sp)
;     }
80215024: 65 61        	addi	sp, sp, 0x70
80215026: 82 80        	ret

0000000080215028 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf4f75d0324e5c103E>:
;     fn deref(&self) -> &[T] {
80215028: 59 71        	addi	sp, sp, -0x70
8021502a: 86 f4        	sd	ra, 0x68(sp)
8021502c: a2 f0        	sd	s0, 0x60(sp)
8021502e: 80 18        	addi	s0, sp, 0x70
80215030: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
80215034: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
80215038: 0c 65        	ld	a1, 0x8(a0)
8021503a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021503e: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
80215042: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
80215046: 08 69        	ld	a0, 0x10(a0)
80215048: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021504c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80215050: 09 a0        	j	0x80215052 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf4f75d0324e5c103E+0x2a>
80215052: 83 36 84 f9  	ld	a3, -0x68(s0)
80215056: 03 35 04 f9  	ld	a0, -0x70(s0)
8021505a: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
8021505c: b2 85        	mv	a1, a2
8021505e: 97 c0 fe ff  	auipc	ra, 0xfffec
80215062: e7 80 00 4a  	jalr	0x4a0(ra) <ekernel+0xffcb44fe>
80215066: 09 a0        	j	0x80215068 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf4f75d0324e5c103E+0x40>
80215068: 03 35 84 f9  	ld	a0, -0x68(s0)
8021506c: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self as _
80215070: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
80215074: 23 38 b4 fa  	sd	a1, -0x50(s0)
80215078: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021507c: 83 35 04 fb  	ld	a1, -0x50(s0)
80215080: 03 35 84 fb  	ld	a0, -0x48(s0)
80215084: 23 30 b4 fa  	sd	a1, -0x60(s0)
80215088: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021508c: 03 35 04 fa  	ld	a0, -0x60(s0)
80215090: 83 35 84 fa  	ld	a1, -0x58(s0)
80215094: a6 70        	ld	ra, 0x68(sp)
80215096: 06 74        	ld	s0, 0x60(sp)
;     }
80215098: 65 61        	addi	sp, sp, 0x70
8021509a: 82 80        	ret

000000008021509c <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf8fbbdc63be4b5f8E>:
;     fn deref(&self) -> &[T] {
8021509c: 59 71        	addi	sp, sp, -0x70
8021509e: 86 f4        	sd	ra, 0x68(sp)
802150a0: a2 f0        	sd	s0, 0x60(sp)
802150a2: 80 18        	addi	s0, sp, 0x70
802150a4: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
802150a8: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
802150ac: 0c 65        	ld	a1, 0x8(a0)
802150ae: 23 38 b4 f8  	sd	a1, -0x70(s0)
802150b2: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
802150b6: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
802150ba: 08 69        	ld	a0, 0x10(a0)
802150bc: 23 3c a4 f8  	sd	a0, -0x68(s0)
802150c0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
802150c4: 09 a0        	j	0x802150c6 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf8fbbdc63be4b5f8E+0x2a>
802150c6: 83 36 84 f9  	ld	a3, -0x68(s0)
802150ca: 03 35 04 f9  	ld	a0, -0x70(s0)
802150ce: c1 45        	li	a1, 0x10
802150d0: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
802150d2: 97 c0 fe ff  	auipc	ra, 0xfffec
802150d6: e7 80 c0 42  	jalr	0x42c(ra) <ekernel+0xffcb44fe>
802150da: 09 a0        	j	0x802150dc <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf8fbbdc63be4b5f8E+0x40>
802150dc: 03 35 84 f9  	ld	a0, -0x68(s0)
802150e0: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self as _
802150e4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
802150e8: 23 38 b4 fa  	sd	a1, -0x50(s0)
802150ec: 23 3c a4 fa  	sd	a0, -0x48(s0)
802150f0: 83 35 04 fb  	ld	a1, -0x50(s0)
802150f4: 03 35 84 fb  	ld	a0, -0x48(s0)
802150f8: 23 30 b4 fa  	sd	a1, -0x60(s0)
802150fc: 23 34 a4 fa  	sd	a0, -0x58(s0)
80215100: 03 35 04 fa  	ld	a0, -0x60(s0)
80215104: 83 35 84 fa  	ld	a1, -0x58(s0)
80215108: a6 70        	ld	ra, 0x68(sp)
8021510a: 06 74        	ld	s0, 0x60(sp)
;     }
8021510c: 65 61        	addi	sp, sp, 0x70
8021510e: 82 80        	ret

0000000080215110 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h453d27b3d869bbd3E>:
;     fn deref_mut(&mut self) -> &mut [T] {
80215110: 59 71        	addi	sp, sp, -0x70
80215112: 86 f4        	sd	ra, 0x68(sp)
80215114: a2 f0        	sd	s0, 0x60(sp)
80215116: 80 18        	addi	s0, sp, 0x70
80215118: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
8021511c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
80215120: 0c 65        	ld	a1, 0x8(a0)
80215122: 23 38 b4 f8  	sd	a1, -0x70(s0)
80215126: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
8021512a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
8021512e: 08 69        	ld	a0, 0x10(a0)
80215130: 23 3c a4 f8  	sd	a0, -0x68(s0)
80215134: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80215138: 09 a0        	j	0x8021513a <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h453d27b3d869bbd3E+0x2a>
8021513a: 83 36 84 f9  	ld	a3, -0x68(s0)
8021513e: 03 35 04 f9  	ld	a0, -0x70(s0)
80215142: c1 45        	li	a1, 0x10
80215144: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
80215146: 97 c0 fe ff  	auipc	ra, 0xfffec
8021514a: e7 80 a0 46  	jalr	0x46a(ra) <ekernel+0xffcb45b0>
8021514e: 09 a0        	j	0x80215150 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h453d27b3d869bbd3E+0x40>
80215150: 03 35 84 f9  	ld	a0, -0x68(s0)
80215154: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self as _
80215158: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8021515c: 23 38 b4 fa  	sd	a1, -0x50(s0)
80215160: 23 3c a4 fa  	sd	a0, -0x48(s0)
80215164: 83 35 04 fb  	ld	a1, -0x50(s0)
80215168: 03 35 84 fb  	ld	a0, -0x48(s0)
8021516c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80215170: 23 34 a4 fa  	sd	a0, -0x58(s0)
80215174: 03 35 04 fa  	ld	a0, -0x60(s0)
80215178: 83 35 84 fa  	ld	a1, -0x58(s0)
8021517c: a6 70        	ld	ra, 0x68(sp)
8021517e: 06 74        	ld	s0, 0x60(sp)
;     }
80215180: 65 61        	addi	sp, sp, 0x70
80215182: 82 80        	ret

0000000080215184 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h858cfa3d60fa7b1fE>:
;     fn deref_mut(&mut self) -> &mut [T] {
80215184: 59 71        	addi	sp, sp, -0x70
80215186: 86 f4        	sd	ra, 0x68(sp)
80215188: a2 f0        	sd	s0, 0x60(sp)
8021518a: 80 18        	addi	s0, sp, 0x70
8021518c: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
80215190: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
80215194: 0c 65        	ld	a1, 0x8(a0)
80215196: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021519a: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
8021519e: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
802151a2: 08 69        	ld	a0, 0x10(a0)
802151a4: 23 3c a4 f8  	sd	a0, -0x68(s0)
802151a8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
802151ac: 09 a0        	j	0x802151ae <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h858cfa3d60fa7b1fE+0x2a>
802151ae: 83 36 84 f9  	ld	a3, -0x68(s0)
802151b2: 03 35 04 f9  	ld	a0, -0x70(s0)
802151b6: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
802151b8: b2 85        	mv	a1, a2
802151ba: 97 c0 fe ff  	auipc	ra, 0xfffec
802151be: e7 80 60 3f  	jalr	0x3f6(ra) <ekernel+0xffcb45b0>
802151c2: 09 a0        	j	0x802151c4 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h858cfa3d60fa7b1fE+0x40>
802151c4: 03 35 84 f9  	ld	a0, -0x68(s0)
802151c8: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self as _
802151cc: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802151d0: 23 38 b4 fa  	sd	a1, -0x50(s0)
802151d4: 23 3c a4 fa  	sd	a0, -0x48(s0)
802151d8: 83 35 04 fb  	ld	a1, -0x50(s0)
802151dc: 03 35 84 fb  	ld	a0, -0x48(s0)
802151e0: 23 30 b4 fa  	sd	a1, -0x60(s0)
802151e4: 23 34 a4 fa  	sd	a0, -0x58(s0)
802151e8: 03 35 04 fa  	ld	a0, -0x60(s0)
802151ec: 83 35 84 fa  	ld	a1, -0x58(s0)
802151f0: a6 70        	ld	ra, 0x68(sp)
802151f2: 06 74        	ld	s0, 0x60(sp)
;     }
802151f4: 65 61        	addi	sp, sp, 0x70
802151f6: 82 80        	ret

00000000802151f8 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hfb5743b42005a567E>:
;     fn deref_mut(&mut self) -> &mut [T] {
802151f8: 59 71        	addi	sp, sp, -0x70
802151fa: 86 f4        	sd	ra, 0x68(sp)
802151fc: a2 f0        	sd	s0, 0x60(sp)
802151fe: 80 18        	addi	s0, sp, 0x70
80215200: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.buf.ptr()
80215204: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.ptr.as_ptr()
80215208: 0c 65        	ld	a1, 0x8(a0)
8021520a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021520e: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.pointer as *mut T
80215212: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
80215216: 08 69        	ld	a0, 0x10(a0)
80215218: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021521c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80215220: 09 a0        	j	0x80215222 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hfb5743b42005a567E+0x2a>
80215222: 83 36 84 f9  	ld	a3, -0x68(s0)
80215226: 03 35 04 f9  	ld	a0, -0x70(s0)
8021522a: c1 45        	li	a1, 0x10
8021522c: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
8021522e: 97 c0 fe ff  	auipc	ra, 0xfffec
80215232: e7 80 20 38  	jalr	0x382(ra) <ekernel+0xffcb45b0>
80215236: 09 a0        	j	0x80215238 <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hfb5743b42005a567E+0x40>
80215238: 03 35 84 f9  	ld	a0, -0x68(s0)
8021523c: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self as _
80215240: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80215244: 23 38 b4 fa  	sd	a1, -0x50(s0)
80215248: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021524c: 83 35 04 fb  	ld	a1, -0x50(s0)
80215250: 03 35 84 fb  	ld	a0, -0x48(s0)
80215254: 23 30 b4 fa  	sd	a1, -0x60(s0)
80215258: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021525c: 03 35 04 fa  	ld	a0, -0x60(s0)
80215260: 83 35 84 fa  	ld	a1, -0x58(s0)
80215264: a6 70        	ld	ra, 0x68(sp)
80215266: 06 74        	ld	s0, 0x60(sp)
;     }
80215268: 65 61        	addi	sp, sp, 0x70
8021526a: 82 80        	ret

000000008021526c <_ZN81_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..Index$LT$I$GT$$GT$5index17hb1c532d49f4f97deE>:
;     fn index(&self, index: I) -> &Self::Output {
8021526c: 5d 71        	addi	sp, sp, -0x50
8021526e: 86 e4        	sd	ra, 0x48(sp)
80215270: a2 e0        	sd	s0, 0x40(sp)
80215272: 80 08        	addi	s0, sp, 0x50
80215274: 23 3c c4 fa  	sd	a2, -0x48(s0)
80215278: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021527c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80215280: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         Index::index(&**self, index)
80215284: 97 00 00 00  	auipc	ra, 0x0
80215288: e7 80 80 e1  	jalr	-0x1e8(ra) <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf8fbbdc63be4b5f8E>
8021528c: 83 36 84 fb  	ld	a3, -0x48(s0)
80215290: 2a 86        	mv	a2, a0
80215292: 03 35 04 fc  	ld	a0, -0x40(s0)
80215296: 23 34 c4 fc  	sd	a2, -0x38(s0)
8021529a: 2e 86        	mv	a2, a1
8021529c: 83 35 84 fc  	ld	a1, -0x38(s0)
802152a0: 23 30 b4 fe  	sd	a1, -0x20(s0)
802152a4: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         index.index(self)
802152a8: 97 b0 fe ff  	auipc	ra, 0xfffeb
802152ac: e7 80 20 61  	jalr	0x612(ra) <ekernel+0xffcb38ba>
802152b0: a6 60        	ld	ra, 0x48(sp)
802152b2: 06 64        	ld	s0, 0x40(sp)
;     }
802152b4: 61 61        	addi	sp, sp, 0x50
802152b6: 82 80        	ret

00000000802152b8 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17habc0ff6e8afbc2f4E>:
;     fn index_mut(&mut self, index: I) -> &mut Self::Output {
802152b8: 5d 71        	addi	sp, sp, -0x50
802152ba: 86 e4        	sd	ra, 0x48(sp)
802152bc: a2 e0        	sd	s0, 0x40(sp)
802152be: 80 08        	addi	s0, sp, 0x50
802152c0: 23 3c c4 fa  	sd	a2, -0x48(s0)
802152c4: 23 30 b4 fc  	sd	a1, -0x40(s0)
802152c8: 23 38 a4 fc  	sd	a0, -0x30(s0)
802152cc: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         IndexMut::index_mut(&mut **self, index)
802152d0: 97 00 00 00  	auipc	ra, 0x0
802152d4: e7 80 00 e4  	jalr	-0x1c0(ra) <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h453d27b3d869bbd3E>
802152d8: 83 36 84 fb  	ld	a3, -0x48(s0)
802152dc: 2a 86        	mv	a2, a0
802152de: 03 35 04 fc  	ld	a0, -0x40(s0)
802152e2: 23 34 c4 fc  	sd	a2, -0x38(s0)
802152e6: 2e 86        	mv	a2, a1
802152e8: 83 35 84 fc  	ld	a1, -0x38(s0)
802152ec: 23 30 b4 fe  	sd	a1, -0x20(s0)
802152f0: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         index.index_mut(self)
802152f4: 97 b0 fe ff  	auipc	ra, 0xfffeb
802152f8: e7 80 80 61  	jalr	0x618(ra) <ekernel+0xffcb390c>
802152fc: a6 60        	ld	ra, 0x48(sp)
802152fe: 06 64        	ld	s0, 0x40(sp)
;     }
80215300: 61 61        	addi	sp, sp, 0x50
80215302: 82 80        	ret

0000000080215304 <_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd5797b3c60ca8ec1E>:
;     fn index_mut(&mut self, index: I) -> &mut Self::Output {
80215304: 5d 71        	addi	sp, sp, -0x50
80215306: 86 e4        	sd	ra, 0x48(sp)
80215308: a2 e0        	sd	s0, 0x40(sp)
8021530a: 80 08        	addi	s0, sp, 0x50
8021530c: 23 3c c4 fa  	sd	a2, -0x48(s0)
80215310: 23 30 b4 fc  	sd	a1, -0x40(s0)
80215314: 23 38 a4 fc  	sd	a0, -0x30(s0)
80215318: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         IndexMut::index_mut(&mut **self, index)
8021531c: 97 00 00 00  	auipc	ra, 0x0
80215320: e7 80 c0 ed  	jalr	-0x124(ra) <_ZN75_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hfb5743b42005a567E>
80215324: 83 36 84 fb  	ld	a3, -0x48(s0)
80215328: 2a 86        	mv	a2, a0
8021532a: 03 35 04 fc  	ld	a0, -0x40(s0)
8021532e: 23 34 c4 fc  	sd	a2, -0x38(s0)
80215332: 2e 86        	mv	a2, a1
80215334: 83 35 84 fc  	ld	a1, -0x38(s0)
80215338: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021533c: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         index.index_mut(self)
80215340: 97 b0 fe ff  	auipc	ra, 0xfffeb
80215344: e7 80 e0 61  	jalr	0x61e(ra) <ekernel+0xffcb395e>
80215348: a6 60        	ld	ra, 0x48(sp)
8021534a: 06 64        	ld	s0, 0x40(sp)
;     }
8021534c: 61 61        	addi	sp, sp, 0x50
8021534e: 82 80        	ret

0000000080215350 <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2dfc73a71749b909E>:
;     fn into_iter(self) -> Self::IntoIter {
80215350: 15 71        	addi	sp, sp, -0xe0
80215352: 86 ed        	sd	ra, 0xd8(sp)
80215354: a2 e9        	sd	s0, 0xd0(sp)
80215356: 80 11        	addi	s0, sp, 0xe0
80215358: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;         ManuallyDrop { value }
8021535c: 88 69        	ld	a0, 0x10(a1)
8021535e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80215362: 88 65        	ld	a0, 0x8(a1)
80215364: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80215368: 88 61        	ld	a0, 0x0(a1)
8021536a: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8021536e: 93 05 04 f5  	addi	a1, s0, -0xb0
80215372: 13 05 04 f4  	addi	a0, s0, -0xc0
;             let alloc = ManuallyDrop::new(ptr::read(me.allocator()));
80215376: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021537a: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         self.buf.allocator()
8021537e: 23 38 a4 f8  	sd	a0, -0x70(s0)
;             let alloc = ManuallyDrop::new(ptr::read(me.allocator()));
80215382: 23 3c b4 f8  	sd	a1, -0x68(s0)
;             let buf = me.buf.non_null();
80215386: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021538a: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         NonNull::from(self.ptr)
8021538e: 03 35 84 f4  	ld	a0, -0xb8(s0)
80215392: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80215396: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.pointer as *mut T
8021539a: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021539e: 23 30 a4 fc  	sd	a0, -0x40(s0)
;             let end = if T::IS_ZST {
802153a2: 09 a0        	j	0x802153a4 <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2dfc73a71749b909E+0x54>
802153a4: 03 35 04 f3  	ld	a0, -0xd0(s0)
802153a8: 93 05 04 f4  	addi	a1, s0, -0xc0
;                 begin.add(me.len()) as *const T
802153ac: 23 34 b4 fc  	sd	a1, -0x38(s0)
802153b0: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.len
802153b4: 83 35 04 f5  	ld	a1, -0xb0(s0)
802153b8: 23 3c b4 fc  	sd	a1, -0x28(s0)
802153bc: 61 46        	li	a2, 0x18
;         unsafe { intrinsics::offset(self, count) }
802153be: b3 85 c5 02  	mul	a1, a1, a2
802153c2: 2e 95        	add	a0, a0, a1
;                 begin.add(me.len()) as *const T
802153c4: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;             let end = if T::IS_ZST {
802153c8: 09 a0        	j	0x802153ca <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2dfc73a71749b909E+0x7a>
802153ca: 13 05 04 f4  	addi	a0, s0, -0xc0
;             let cap = me.buf.capacity();
802153ce: 23 30 a4 fe  	sd	a0, -0x20(s0)
802153d2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802153d6: 09 a0        	j	0x802153d8 <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2dfc73a71749b909E+0x88>
802153d8: 03 35 04 f4  	ld	a0, -0xc0(s0)
802153dc: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802153e0: 09 a0        	j	0x802153e2 <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2dfc73a71749b909E+0x92>
802153e2: 83 35 84 f2  	ld	a1, -0xd8(s0)
802153e6: 03 36 04 f3  	ld	a2, -0xd0(s0)
;             IntoIter { buf, phantom: PhantomData, cap, alloc, ptr: buf, end }
802153ea: 83 36 04 f6  	ld	a3, -0xa0(s0)
802153ee: 03 35 84 f5  	ld	a0, -0xa8(s0)
802153f2: 90 e1        	sd	a2, 0x0(a1)
802153f4: 94 e9        	sd	a3, 0x10(a1)
802153f6: 90 e5        	sd	a2, 0x8(a1)
802153f8: 88 ed        	sd	a0, 0x18(a1)
802153fa: ee 60        	ld	ra, 0xd8(sp)
802153fc: 4e 64        	ld	s0, 0xd0(sp)
;     }
802153fe: 2d 61        	addi	sp, sp, 0xe0
80215400: 82 80        	ret

0000000080215402 <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17h1adc7a1d2833e03fE>:
;             fn get_bit(&self, bit: usize) -> bool {
80215402: 39 71        	addi	sp, sp, -0x40
80215404: 06 fc        	sd	ra, 0x38(sp)
80215406: 22 f8        	sd	s0, 0x30(sp)
80215408: 80 00        	addi	s0, sp, 0x40
8021540a: 23 34 c4 fc  	sd	a2, -0x38(s0)
8021540e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80215412: 23 3c a4 fc  	sd	a0, -0x28(s0)
80215416: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021541a: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021541e: 13 05 00 04  	li	a0, 0x40
;                 assert!(bit < Self::BIT_LENGTH);
80215422: 63 ef a5 00  	bltu	a1, a0, 0x80215440 <.Lpcrel_hi0+0x14>
80215426: 09 a0        	j	0x80215428 <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17h1adc7a1d2833e03fE+0x26>
80215428: 03 36 84 fc  	ld	a2, -0x38(s0)

000000008021542c <.Lpcrel_hi0>:
;                 assert!(bit < Self::BIT_LENGTH);
8021542c: 17 15 02 00  	auipc	a0, 0x21
80215430: 13 05 c5 f9  	addi	a0, a0, -0x64
80215434: 93 05 80 02  	li	a1, 0x28
80215438: 97 b0 01 00  	auipc	ra, 0x1b
8021543c: e7 80 00 de  	jalr	-0x220(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80215440: 83 35 04 fd  	ld	a1, -0x30(s0)
80215444: 03 35 84 fd  	ld	a0, -0x28(s0)
;                 (*self & (1 << bit)) != 0
80215448: 08 61        	ld	a0, 0x0(a0)
8021544a: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021544e: 13 05 f0 03  	li	a0, 0x3f
80215452: 63 6e b5 00  	bltu	a0, a1, 0x8021546e <.Lpcrel_hi0+0x42>
80215456: 09 a0        	j	0x80215458 <.Lpcrel_hi0+0x2c>
80215458: 03 35 04 fc  	ld	a0, -0x40(s0)
8021545c: 83 35 04 fd  	ld	a1, -0x30(s0)
;                 (*self & (1 << bit)) != 0
80215460: 33 55 b5 00  	srl	a0, a0, a1
;             }
80215464: 05 89        	andi	a0, a0, 0x1
80215466: e2 70        	ld	ra, 0x38(sp)
80215468: 42 74        	ld	s0, 0x30(sp)
8021546a: 21 61        	addi	sp, sp, 0x40
8021546c: 82 80        	ret
8021546e: 03 36 84 fc  	ld	a2, -0x38(s0)

0000000080215472 <.Lpcrel_hi1>:
;                 (*self & (1 << bit)) != 0
80215472: 17 15 02 00  	auipc	a0, 0x21
80215476: 13 05 e5 f7  	addi	a0, a0, -0x82
8021547a: 93 05 30 02  	li	a1, 0x23
8021547e: 97 b0 01 00  	auipc	ra, 0x1b
80215482: e7 80 a0 d9  	jalr	-0x266(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080215486 <_ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h8f0c77d113b5cf04E>:
;         unsafe fn backward_unchecked(start: Self, n: usize) -> Self {
80215486: 5d 71        	addi	sp, sp, -0x50
80215488: 86 e4        	sd	ra, 0x48(sp)
8021548a: a2 e0        	sd	s0, 0x40(sp)
8021548c: 80 08        	addi	s0, sp, 0x50
8021548e: 2e 86        	mv	a2, a1
80215490: aa 85        	mv	a1, a0
80215492: 1b 85 05 00  	sext.w	a0, a1
80215496: 23 26 b4 fc  	sw	a1, -0x34(s0)
8021549a: 23 38 c4 fc  	sd	a2, -0x30(s0)
;             unsafe { start.checked_sub_unsigned(n as $unsigned).unwrap_unchecked() }
8021549e: 9b 05 06 00  	sext.w	a1, a2
802154a2: 23 2e c4 fc  	sw	a2, -0x24(s0)
;     int_impl! {
802154a6: 23 20 c4 fe  	sw	a2, -0x20(s0)
802154aa: 33 06 b5 40  	sub	a2, a0, a1
802154ae: 23 3c c4 fa  	sd	a2, -0x48(s0)
802154b2: 0d 9d        	subw	a0, a0, a1
802154b4: 31 8d        	xor	a0, a0, a2
802154b6: 33 35 a0 00  	snez	a0, a0
802154ba: 23 22 c4 fe  	sw	a2, -0x1c(s0)
802154be: a3 04 a4 fe  	sb	a0, -0x17(s0)
802154c2: 93 a5 05 00  	slti	a1, a1, 0x0
802154c6: 2d 8d        	xor	a0, a0, a1
802154c8: 23 05 a4 fe  	sb	a0, -0x16(s0)
802154cc: a3 05 a4 fe  	sb	a0, -0x15(s0)
802154d0: 03 45 b4 fe  	lbu	a0, -0x15(s0)
802154d4: 05 89        	andi	a0, a0, 0x1
802154d6: 0d e1        	bnez	a0, 0x802154f8 <.Lpcrel_hi0>
802154d8: 09 a0        	j	0x802154da <_ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h8f0c77d113b5cf04E+0x54>
802154da: 03 35 84 fb  	ld	a0, -0x48(s0)
;     int_impl! {
802154de: 23 24 a4 fc  	sw	a0, -0x38(s0)
802154e2: 05 45        	li	a0, 0x1
802154e4: 23 22 a4 fc  	sw	a0, -0x3c(s0)
;         }
802154e8: 03 25 84 fc  	lw	a0, -0x38(s0)
;             Some(val) => val,
802154ec: 23 26 a4 fe  	sw	a0, -0x14(s0)
802154f0: a6 60        	ld	ra, 0x48(sp)
802154f2: 06 64        	ld	s0, 0x40(sp)
;         }
802154f4: 61 61        	addi	sp, sp, 0x50
802154f6: 82 80        	ret

00000000802154f8 <.Lpcrel_hi0>:
;     int_impl! {
802154f8: 17 e5 01 00  	auipc	a0, 0x1e
802154fc: 13 05 85 f0  	addi	a0, a0, -0xf8
80215500: 0c 41        	lw	a1, 0x0(a0)
80215502: 48 41        	lw	a0, 0x4(a0)
80215504: 23 22 b4 fc  	sw	a1, -0x3c(s0)
80215508: 23 24 a4 fc  	sw	a0, -0x38(s0)
;     intrinsics::assert_unsafe_precondition!(
8021550c: 97 50 ff ff  	auipc	ra, 0xffff5
80215510: e7 80 20 41  	jalr	0x412(ra) <ekernel+0xffcbd91e>
;         match self {
80215514: 00 00        	unimp

0000000080215516 <_ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h71a404a0db083afaE>:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
80215516: 79 71        	addi	sp, sp, -0x30
80215518: 06 f4        	sd	ra, 0x28(sp)
8021551a: 22 f0        	sd	s0, 0x20(sp)
8021551c: 00 18        	addi	s0, sp, 0x30
8021551e: 23 1f a4 fc  	sh	a0, -0x22(s0)
80215522: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             unsafe { start.unchecked_add(n as Self) }
80215526: 23 17 b4 fe  	sh	a1, -0x12(s0)
;     uint_impl! {
8021552a: 2e 95        	add	a0, a0, a1
8021552c: a2 70        	ld	ra, 0x28(sp)
8021552e: 02 74        	ld	s0, 0x20(sp)
;         }
80215530: 45 61        	addi	sp, sp, 0x30
80215532: 82 80        	ret

0000000080215534 <_ZN4core9panicking13assert_failed17h31f18e82d71868b9E>:
; pub fn assert_failed<T, U>(
80215534: 79 71        	addi	sp, sp, -0x30
80215536: 06 f4        	sd	ra, 0x28(sp)
80215538: 22 f0        	sd	s0, 0x20(sp)
8021553a: 00 18        	addi	s0, sp, 0x30
8021553c: 3a 88        	mv	a6, a4
8021553e: b6 87        	mv	a5, a3
80215540: 23 3c b4 fc  	sd	a1, -0x28(s0)
80215544: 23 30 c4 fe  	sd	a2, -0x20(s0)
80215548: a3 07 a4 fe  	sb	a0, -0x11(s0)

000000008021554c <.Lpcrel_hi0>:
;     assert_failed_inner(kind, &left, &right, args)
8021554c: 97 15 02 00  	auipc	a1, 0x21
80215550: 13 87 c5 ec  	addi	a4, a1, -0x134
80215554: 93 05 84 fd  	addi	a1, s0, -0x28
80215558: 93 06 04 fe  	addi	a3, s0, -0x20
8021555c: 3a 86        	mv	a2, a4
8021555e: 97 b0 01 00  	auipc	ra, 0x1b
80215562: e7 80 20 e1  	jalr	-0x1ee(ra) <_ZN4core9panicking19assert_failed_inner17h4c07be238101dcd6E>

0000000080215566 <_ZN4core9panicking13assert_failed17hd077154fa942e831E>:
; pub fn assert_failed<T, U>(
80215566: 79 71        	addi	sp, sp, -0x30
80215568: 06 f4        	sd	ra, 0x28(sp)
8021556a: 22 f0        	sd	s0, 0x20(sp)
8021556c: 00 18        	addi	s0, sp, 0x30
8021556e: 3a 88        	mv	a6, a4
80215570: b6 87        	mv	a5, a3
80215572: 23 3c b4 fc  	sd	a1, -0x28(s0)
80215576: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021557a: a3 07 a4 fe  	sb	a0, -0x11(s0)

000000008021557e <.Lpcrel_hi1>:
;     assert_failed_inner(kind, &left, &right, args)
8021557e: 97 15 02 00  	auipc	a1, 0x21
80215582: 13 87 a5 eb  	addi	a4, a1, -0x146
80215586: 93 05 84 fd  	addi	a1, s0, -0x28
8021558a: 93 06 04 fe  	addi	a3, s0, -0x20
8021558e: 3a 86        	mv	a2, a4
80215590: 97 b0 01 00  	auipc	ra, 0x1b
80215594: e7 80 00 de  	jalr	-0x220(ra) <_ZN4core9panicking19assert_failed_inner17h4c07be238101dcd6E>

0000000080215598 <_ZN4core9panicking13panic_display17h2fe3cf8b43f2b915E>:
; pub const fn panic_display<T: fmt::Display>(x: &T) -> ! {
80215598: 15 71        	addi	sp, sp, -0xe0
8021559a: 86 ed        	sd	ra, 0xd8(sp)
8021559c: a2 e9        	sd	s0, 0xd0(sp)
8021559e: 80 11        	addi	s0, sp, 0xe0
802155a0: 23 34 b4 f2  	sd	a1, -0xd8(s0)
802155a4: 2a 86        	mv	a2, a0
802155a6: 23 38 c4 fa  	sd	a2, -0x50(s0)

00000000802155aa <.Lpcrel_hi2>:
;     panic_fmt(format_args!("{}", *x));
802155aa: 17 15 02 00  	auipc	a0, 0x21
802155ae: 13 05 e5 ea  	addi	a0, a0, -0x152
802155b2: 23 3c a4 fa  	sd	a0, -0x48(s0)
802155b6: 05 45        	li	a0, 0x1
802155b8: 23 30 a4 fc  	sd	a0, -0x40(s0)

00000000802155bc <.Lpcrel_hi3>:
;         Self::new(x, Display::fmt)
802155bc: 97 65 00 00  	auipc	a1, 0x6
802155c0: 93 85 85 58  	addi	a1, a1, 0x588
802155c4: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
802155c8: 23 38 c4 f6  	sd	a2, -0x90(s0)
802155cc: 23 3c b4 f6  	sd	a1, -0x88(s0)
;     panic_fmt(format_args!("{}", *x));
802155d0: 03 36 04 f7  	ld	a2, -0x90(s0)
802155d4: 83 35 84 f7  	ld	a1, -0x88(s0)
802155d8: 23 30 c4 f6  	sd	a2, -0xa0(s0)
802155dc: 23 34 b4 f6  	sd	a1, -0x98(s0)
802155e0: 93 05 04 f6  	addi	a1, s0, -0xa0
802155e4: 23 38 b4 fc  	sd	a1, -0x30(s0)
802155e8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if pieces.len() < args.len() || pieces.len() > args.len() + 1 {
802155ec: 09 a0        	j	0x802155ee <.Lpcrel_hi3+0x32>
802155ee: 09 a0        	j	0x802155f0 <.Lpcrel_hi3+0x34>
802155f0: 83 35 84 f2  	ld	a1, -0xd8(s0)

00000000802155f4 <.Lpcrel_hi4>:
;         Arguments { pieces, fmt: None, args }
802155f4: 17 15 02 00  	auipc	a0, 0x21
802155f8: 13 05 45 e6  	addi	a0, a0, -0x19c
802155fc: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80215600: 05 45        	li	a0, 0x1
80215602: 23 3c a4 f2  	sd	a0, -0xc8(s0)

0000000080215606 <.Lpcrel_hi5>:
80215606: 17 e6 01 00  	auipc	a2, 0x1e
8021560a: 13 06 a6 c8  	addi	a2, a2, -0x376
8021560e: 14 62        	ld	a3, 0x0(a2)
80215610: 10 66        	ld	a2, 0x8(a2)
80215612: 23 38 d4 f4  	sd	a3, -0xb0(s0)
80215616: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8021561a: 13 06 04 f6  	addi	a2, s0, -0xa0
8021561e: 23 30 c4 f4  	sd	a2, -0xc0(s0)
80215622: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80215626: 13 05 04 f3  	addi	a0, s0, -0xd0
;     panic_fmt(format_args!("{}", *x));
8021562a: 97 b0 01 00  	auipc	ra, 0x1b
8021562e: e7 80 e0 b7  	jalr	-0x482(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080215632 <_ZN14virtio_drivers5queue9DescFlags6remove17hdc9d5875df047f92E>:
;             pub fn remove(&mut self, other: Self) {
80215632: 79 71        	addi	sp, sp, -0x30
80215634: 06 f4        	sd	ra, 0x28(sp)
80215636: 22 f0        	sd	s0, 0x20(sp)
80215638: 00 18        	addi	s0, sp, 0x30
8021563a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021563e: aa 85        	mv	a1, a0
80215640: 03 35 84 fd  	ld	a0, -0x28(s0)
80215644: 23 30 b4 fe  	sd	a1, -0x20(s0)
80215648: 23 17 a4 fe  	sh	a0, -0x12(s0)
;                 self.bits &= !other.bits;
8021564c: 13 46 f5 ff  	not	a2, a0
80215650: 03 95 05 00  	lh	a0, 0x0(a1)
80215654: 71 8d        	and	a0, a0, a2
80215656: 23 90 a5 00  	sh	a0, 0x0(a1)
8021565a: a2 70        	ld	ra, 0x28(sp)
8021565c: 02 74        	ld	s0, 0x20(sp)
;             }
8021565e: 45 61        	addi	sp, sp, 0x30
80215660: 82 80        	ret

0000000080215662 <_ZN14virtio_drivers5queue9DescFlags8contains17hd8f1f0796a61f996E>:
;             pub const fn contains(&self, other: Self) -> bool {
80215662: 01 11        	addi	sp, sp, -0x20
80215664: 06 ec        	sd	ra, 0x18(sp)
80215666: 22 e8        	sd	s0, 0x10(sp)
80215668: 00 10        	addi	s0, sp, 0x20
8021566a: 2e 86        	mv	a2, a1
8021566c: 93 15 06 03  	slli	a1, a2, 0x30
80215670: c1 91        	srli	a1, a1, 0x30
80215672: 23 30 a4 fe  	sd	a0, -0x20(s0)
80215676: 23 17 c4 fe  	sh	a2, -0x12(s0)
;                 (self.bits & other.bits) == other.bits
8021567a: 03 15 05 00  	lh	a0, 0x0(a0)
8021567e: 6d 8d        	and	a0, a0, a1
80215680: 2d 8d        	xor	a0, a0, a1
80215682: 13 35 15 00  	seqz	a0, a0
80215686: e2 60        	ld	ra, 0x18(sp)
80215688: 42 64        	ld	s0, 0x10(sp)
;             }
8021568a: 05 61        	addi	sp, sp, 0x20
8021568c: 82 80        	ret

000000008021568e <_ZN74_$LT$virtio_drivers..queue..DescFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17he72016ea509cbf84E>:
;             fn bitor(self, other: $BitFlags) -> Self {
8021568e: 01 11        	addi	sp, sp, -0x20
80215690: 06 ec        	sd	ra, 0x18(sp)
80215692: 22 e8        	sd	s0, 0x10(sp)
80215694: 00 10        	addi	s0, sp, 0x20
80215696: 23 16 a4 fe  	sh	a0, -0x14(s0)
8021569a: 23 17 b4 fe  	sh	a1, -0x12(s0)
;                 Self { bits: self.bits | other.bits }
8021569e: 4d 8d        	or	a0, a0, a1
802156a0: 23 15 a4 fe  	sh	a0, -0x16(s0)
;             }
802156a4: 03 15 a4 fe  	lh	a0, -0x16(s0)
802156a8: e2 60        	ld	ra, 0x18(sp)
802156aa: 42 64        	ld	s0, 0x10(sp)
802156ac: 05 61        	addi	sp, sp, 0x20
802156ae: 82 80        	ret

00000000802156b0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha752fdc1308e71f6E>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
802156b0: 01 11        	addi	sp, sp, -0x20
802156b2: 06 ec        	sd	ra, 0x18(sp)
802156b4: 22 e8        	sd	s0, 0x10(sp)
802156b6: 00 10        	addi	s0, sp, 0x20
802156b8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802156bc: 23 34 b4 fe  	sd	a1, -0x18(s0)
802156c0: 08 61        	ld	a0, 0x0(a0)
802156c2: 97 c0 01 00  	auipc	ra, 0x1c
802156c6: e7 80 a0 0b  	jalr	0xba(ra) <_ZN68_$LT$core..ptr..alignment..Alignment$u20$as$u20$core..fmt..Debug$GT$3fmt17h950e5f6f08955949E>
802156ca: e2 60        	ld	ra, 0x18(sp)
802156cc: 42 64        	ld	s0, 0x10(sp)
802156ce: 05 61        	addi	sp, sp, 0x20
802156d0: 82 80        	ret

00000000802156d2 <_ZN2os4trap5ktrap10break_intr17he936a29cab20d7f2E>:
; pub fn break_intr(){
802156d2: 13 01 01 da  	addi	sp, sp, -0x260
802156d6: 23 3c 11 24  	sd	ra, 0x258(sp)
802156da: 23 38 81 24  	sd	s0, 0x250(sp)
802156de: 80 14        	addi	s0, sp, 0x260
;     let sepc = sepc::read();
802156e0: 97 b0 fe ff  	auipc	ra, 0xfffeb
802156e4: e7 80 c0 7e  	jalr	0x7ec(ra) <ekernel+0xffcb3ecc>
802156e8: 23 38 a4 da  	sd	a0, -0x250(s0)
;     let stcval = stval::read();
802156ec: 97 b0 fe ff  	auipc	ra, 0xfffeb
802156f0: e7 80 80 4c  	jalr	0x4c8(ra) <ekernel+0xffcb3bb4>
802156f4: 23 3c a4 da  	sd	a0, -0x248(s0)
802156f8: 93 05 04 db  	addi	a1, s0, -0x250
802156fc: 23 30 b4 fe  	sd	a1, -0x20(s0)

0000000080215700 <.Lpcrel_hi0>:
;         Self::new(x, LowerHex::fmt)
80215700: 17 a5 01 00  	auipc	a0, 0x1a
80215704: 13 05 45 8b  	addi	a0, a0, -0x74c
80215708: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8021570c: 23 38 b4 fc  	sd	a1, -0x30(s0)
80215710: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80215714: 83 36 04 fd  	ld	a3, -0x30(s0)
80215718: 03 36 84 fd  	ld	a2, -0x28(s0)
8021571c: 93 05 84 db  	addi	a1, s0, -0x248
80215720: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         Self::new(x, LowerHex::fmt)
80215724: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80215728: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021572c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80215730: 83 35 04 fb  	ld	a1, -0x50(s0)
80215734: 03 35 84 fb  	ld	a0, -0x48(s0)
;     println!("kernel trap :
80215738: 23 38 d4 de  	sd	a3, -0x210(s0)
8021573c: 23 3c c4 de  	sd	a2, -0x208(s0)
80215740: 23 30 b4 e0  	sd	a1, -0x200(s0)
80215744: 23 34 a4 e0  	sd	a0, -0x1f8(s0)
80215748: 0d 46        	li	a2, 0x3
8021574a: a3 0f c4 ea  	sb	a2, -0x141(s0)
8021574e: 09 48        	li	a6, 0x2
80215750: 23 30 04 ed  	sd	a6, -0x140(s0)
80215754: 23 38 04 ed  	sd	a6, -0x130(s0)
80215758: 83 48 f4 eb  	lbu	a7, -0x141(s0)
8021575c: 03 37 04 ec  	ld	a4, -0x140(s0)
80215760: 83 36 84 ec  	ld	a3, -0x138(s0)
80215764: 83 35 04 ed  	ld	a1, -0x130(s0)
80215768: 03 35 84 ed  	ld	a0, -0x128(s0)
8021576c: 01 43        	li	t1, 0x0
8021576e: 23 3c 64 f6  	sd	t1, -0x88(s0)
80215772: 93 02 00 02  	li	t0, 0x20
80215776: 23 22 54 f8  	sw	t0, -0x7c(s0)
8021577a: a3 05 14 f9  	sb	a7, -0x75(s0)
8021577e: 91 47        	li	a5, 0x4
80215780: 23 26 f4 f8  	sw	a5, -0x74(s0)
80215784: 23 38 e4 f8  	sd	a4, -0x70(s0)
80215788: 23 3c d4 f8  	sd	a3, -0x68(s0)
8021578c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80215790: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         Self { position, fill, align, flags, precision, width }
80215794: 23 30 64 ea  	sd	t1, -0x160(s0)
80215798: 23 24 54 ea  	sw	t0, -0x158(s0)
8021579c: 23 08 14 eb  	sb	a7, -0x150(s0)
802157a0: 23 26 f4 ea  	sw	a5, -0x154(s0)
802157a4: 23 30 e4 e8  	sd	a4, -0x180(s0)
802157a8: 23 34 d4 e8  	sd	a3, -0x178(s0)
802157ac: 23 38 b4 e8  	sd	a1, -0x170(s0)
802157b0: 23 3c a4 e8  	sd	a0, -0x168(s0)
;     println!("kernel trap :
802157b4: a3 0f c4 f0  	sb	a2, -0xe1(s0)
802157b8: 23 30 04 f3  	sd	a6, -0xe0(s0)
802157bc: 23 38 04 f3  	sd	a6, -0xd0(s0)
802157c0: 83 48 f4 f1  	lbu	a7, -0xe1(s0)
802157c4: 03 37 04 f2  	ld	a4, -0xe0(s0)
802157c8: 83 36 84 f2  	ld	a3, -0xd8(s0)
802157cc: 83 35 04 f3  	ld	a1, -0xd0(s0)
802157d0: 03 35 84 f3  	ld	a0, -0xc8(s0)
802157d4: 05 43        	li	t1, 0x1
802157d6: 23 30 64 f4  	sd	t1, -0xc0(s0)
802157da: 23 26 54 f4  	sw	t0, -0xb4(s0)
802157de: a3 09 14 f5  	sb	a7, -0xad(s0)
802157e2: 23 2a f4 f4  	sw	a5, -0xac(s0)
802157e6: 23 3c e4 f4  	sd	a4, -0xa8(s0)
802157ea: 23 30 d4 f6  	sd	a3, -0xa0(s0)
802157ee: 23 34 b4 f6  	sd	a1, -0x98(s0)
802157f2: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         Self { position, fill, align, flags, precision, width }
802157f6: 23 30 64 f0  	sd	t1, -0x100(s0)
802157fa: 23 24 54 f0  	sw	t0, -0xf8(s0)
802157fe: 23 08 14 f1  	sb	a7, -0xf0(s0)
80215802: 23 26 f4 f0  	sw	a5, -0xf4(s0)
80215806: 23 30 e4 ee  	sd	a4, -0x120(s0)
8021580a: 23 34 d4 ee  	sd	a3, -0x118(s0)
8021580e: 23 38 b4 ee  	sd	a1, -0x110(s0)
80215812: 23 3c a4 ee  	sd	a0, -0x108(s0)
;     println!("kernel trap :
80215816: 03 35 04 eb  	ld	a0, -0x150(s0)
8021581a: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
8021581e: 03 35 84 ea  	ld	a0, -0x158(s0)
80215822: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
80215826: 03 35 04 ea  	ld	a0, -0x160(s0)
8021582a: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
8021582e: 03 35 84 e9  	ld	a0, -0x168(s0)
80215832: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
80215836: 03 35 04 e9  	ld	a0, -0x170(s0)
8021583a: 23 30 a4 e2  	sd	a0, -0x1e0(s0)
8021583e: 03 35 84 e8  	ld	a0, -0x178(s0)
80215842: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
80215846: 03 35 04 e8  	ld	a0, -0x180(s0)
8021584a: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
8021584e: 03 35 04 f1  	ld	a0, -0xf0(s0)
80215852: 23 3c a4 e6  	sd	a0, -0x188(s0)
80215856: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021585a: 23 38 a4 e6  	sd	a0, -0x190(s0)
8021585e: 03 35 04 f0  	ld	a0, -0x100(s0)
80215862: 23 34 a4 e6  	sd	a0, -0x198(s0)
80215866: 03 35 84 ef  	ld	a0, -0x108(s0)
8021586a: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
8021586e: 03 35 04 ef  	ld	a0, -0x110(s0)
80215872: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
80215876: 03 35 84 ee  	ld	a0, -0x118(s0)
8021587a: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8021587e: 03 35 04 ee  	ld	a0, -0x120(s0)
80215882: 23 34 a4 e4  	sd	a0, -0x1b8(s0)

0000000080215886 <.Lpcrel_hi1>:
80215886: 17 15 02 00  	auipc	a0, 0x21
8021588a: 93 05 25 c3  	addi	a1, a0, -0x3ce
8021588e: 13 05 04 dc  	addi	a0, s0, -0x240
80215892: 23 30 a4 da  	sd	a0, -0x260(s0)
80215896: 93 06 04 df  	addi	a3, s0, -0x210
8021589a: 93 07 04 e1  	addi	a5, s0, -0x1f0
8021589e: 42 87        	mv	a4, a6
802158a0: 97 20 ff ff  	auipc	ra, 0xffff2
802158a4: e7 80 40 a0  	jalr	-0x5fc(ra) <ekernel+0xffcba2a4>
802158a8: 03 35 04 da  	ld	a0, -0x260(s0)
802158ac: 97 20 00 00  	auipc	ra, 0x2
802158b0: e7 80 00 5e  	jalr	0x5e0(ra) <_ZN2os7console5print17h042fcde166d682deE>
;     sepc::write(sepc+2);
802158b4: 83 35 04 db  	ld	a1, -0x250(s0)
802158b8: 13 85 25 00  	addi	a0, a1, 0x2
802158bc: 23 34 a4 da  	sd	a0, -0x258(s0)
802158c0: 63 60 b5 02  	bltu	a0, a1, 0x802158e0 <.Lpcrel_hi2>
802158c4: 09 a0        	j	0x802158c6 <.Lpcrel_hi1+0x40>
802158c6: 03 35 84 da  	ld	a0, -0x258(s0)
;     sepc::write(sepc+2);
802158ca: 97 b0 fe ff  	auipc	ra, 0xfffeb
802158ce: e7 80 60 63  	jalr	0x636(ra) <ekernel+0xffcb3f00>
802158d2: 83 30 81 25  	ld	ra, 0x258(sp)
802158d6: 03 34 01 25  	ld	s0, 0x250(sp)
; }
802158da: 13 01 01 26  	addi	sp, sp, 0x260
802158de: 82 80        	ret

00000000802158e0 <.Lpcrel_hi2>:
;     sepc::write(sepc+2);
802158e0: 17 15 02 00  	auipc	a0, 0x21
802158e4: 13 05 05 c4  	addi	a0, a0, -0x3c0

00000000802158e8 <.Lpcrel_hi3>:
802158e8: 97 15 02 00  	auipc	a1, 0x21
802158ec: 13 86 85 c1  	addi	a2, a1, -0x3e8
802158f0: f1 45        	li	a1, 0x1c
802158f2: 97 b0 01 00  	auipc	ra, 0x1b
802158f6: e7 80 60 92  	jalr	-0x6da(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802158fa <_ZN2os4trap5ktrap9timerinit17hcb6aabbf3d819cc9E>:
; pub fn timerinit(){
802158fa: 41 11        	addi	sp, sp, -0x10
802158fc: 06 e4        	sd	ra, 0x8(sp)
802158fe: 22 e0        	sd	s0, 0x0(sp)
80215900: 00 08        	addi	s0, sp, 0x10
;     unsafe{sie::set_stimer();}
80215902: 97 00 00 00  	auipc	ra, 0x0
80215906: e7 80 20 75  	jalr	0x752(ra) <_ZN5riscv8register3sie10set_stimer17h45cf7d9c347f84e8E>

000000008021590a <.Lpcrel_hi4>:
;     CLOCK_CNT.restart_clk();
8021590a: 17 05 03 00  	auipc	a0, 0x30
8021590e: 13 05 65 59  	addi	a0, a0, 0x596
80215912: 97 00 00 00  	auipc	ra, 0x0
80215916: e7 80 c0 11  	jalr	0x11c(ra) <_ZN2os4trap5ktrap5Clock11restart_clk17h3895bfd6c2cab529E>
;     clock_set_next_time();
8021591a: 97 00 00 00  	auipc	ra, 0x0
8021591e: e7 80 20 0c  	jalr	0xc2(ra) <_ZN2os4trap5ktrap19clock_set_next_time17h0750d6b4c9dac15aE>
80215922: a2 60        	ld	ra, 0x8(sp)
80215924: 02 64        	ld	s0, 0x0(sp)
; }
80215926: 41 01        	addi	sp, sp, 0x10
80215928: 82 80        	ret

000000008021592a <_ZN2os4trap5ktrap9time_intr17hf773b282dcd6ff41E>:
; pub fn time_intr(){
8021592a: 79 71        	addi	sp, sp, -0x30
8021592c: 06 f4        	sd	ra, 0x28(sp)
8021592e: 22 f0        	sd	s0, 0x20(sp)
80215930: 00 18        	addi	s0, sp, 0x30
;     clock_set_next_time();
80215932: 97 00 00 00  	auipc	ra, 0x0
80215936: e7 80 a0 0a  	jalr	0xaa(ra) <_ZN2os4trap5ktrap19clock_set_next_time17h0750d6b4c9dac15aE>

000000008021593a <.Lpcrel_hi5>:
;     CLOCK_CNT.clk_run();
8021593a: 17 05 03 00  	auipc	a0, 0x30
8021593e: 13 05 65 56  	addi	a0, a0, 0x566
80215942: 23 38 a4 fc  	sd	a0, -0x30(s0)
80215946: 97 00 00 00  	auipc	ra, 0x0
8021594a: e7 80 60 13  	jalr	0x136(ra) <_ZN2os4trap5ktrap5Clock7clk_run17haaf87ffe070d555cE>
8021594e: 03 35 04 fd  	ld	a0, -0x30(s0)
;     if CLOCK_CNT.get_cnt() == 5 {
80215952: 97 00 00 00  	auipc	ra, 0x0
80215956: e7 80 40 1a  	jalr	0x1a4(ra) <_ZN2os4trap5ktrap5Clock7get_cnt17h7c7fdc0d5c5da934E>
8021595a: 95 45        	li	a1, 0x5
8021595c: 63 10 b5 06  	bne	a0, a1, 0x802159bc <.Lpcrel_hi8+0x2e>
80215960: 09 a0        	j	0x80215962 <.Lpcrel_hi6>

0000000080215962 <.Lpcrel_hi6>:
;         CLOCK_CNT.restart_clk();
80215962: 17 05 03 00  	auipc	a0, 0x30
80215966: 13 05 e5 53  	addi	a0, a0, 0x53e
8021596a: 97 00 00 00  	auipc	ra, 0x0
8021596e: e7 80 40 0c  	jalr	0xc4(ra) <_ZN2os4trap5ktrap5Clock11restart_clk17h3895bfd6c2cab529E>

0000000080215972 <.Lpcrel_hi7>:
;         let proc = CPUS.my_proc().unwrap();
80215972: 17 75 33 00  	auipc	a0, 0x337
80215976: 13 05 e5 88  	addi	a0, a0, -0x772
8021597a: 97 40 00 00  	auipc	ra, 0x4
8021597e: e7 80 20 b2  	jalr	-0x4de(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80215982: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80215986: 03 35 04 fe  	ld	a0, -0x20(s0)
8021598a: 11 e9        	bnez	a0, 0x8021599e <.Lpcrel_hi8+0x10>
8021598c: 09 a0        	j	0x8021598e <.Lpcrel_hi8>

000000008021598e <.Lpcrel_hi8>:
;             None => unwrap_failed(),
8021598e: 17 15 02 00  	auipc	a0, 0x21
80215992: 13 05 25 bb  	addi	a0, a0, -0x44e
80215996: 97 b0 01 00  	auipc	ra, 0x1b
8021599a: e7 80 20 33  	jalr	0x332(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
8021599e: 03 35 04 fe  	ld	a0, -0x20(s0)
802159a2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         let proc = CPUS.my_proc().unwrap();
802159a6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         proc.yielding();
802159aa: 97 c0 fe ff  	auipc	ra, 0xfffec
802159ae: e7 80 20 42  	jalr	0x422(ra) <ekernel+0xffcb4dcc>
802159b2: 97 90 ff ff  	auipc	ra, 0xffff9
802159b6: e7 80 80 64  	jalr	0x648(ra) <ekernel+0xffcc1ffa>
802159ba: 09 a0        	j	0x802159bc <.Lpcrel_hi8+0x2e>
802159bc: a2 70        	ld	ra, 0x28(sp)
802159be: 02 74        	ld	s0, 0x20(sp)
; }
802159c0: 45 61        	addi	sp, sp, 0x30
802159c2: 82 80        	ret

00000000802159c4 <_ZN2os4trap5ktrap9get_cycle17h9a332e93b6be4107E>:
; pub fn get_cycle() -> usize{
802159c4: 41 11        	addi	sp, sp, -0x10
802159c6: 06 e4        	sd	ra, 0x8(sp)
802159c8: 22 e0        	sd	s0, 0x0(sp)
802159ca: 00 08        	addi	s0, sp, 0x10
;     time::read()
802159cc: 97 60 ff ff  	auipc	ra, 0xffff6
802159d0: e7 80 00 ab  	jalr	-0x550(ra) <ekernel+0xffcbe47c>
802159d4: a2 60        	ld	ra, 0x8(sp)
802159d6: 02 64        	ld	s0, 0x0(sp)
; }
802159d8: 41 01        	addi	sp, sp, 0x10
802159da: 82 80        	ret

00000000802159dc <_ZN2os4trap5ktrap19clock_set_next_time17h0750d6b4c9dac15aE>:
; pub fn clock_set_next_time(){
802159dc: 01 11        	addi	sp, sp, -0x20
802159de: 06 ec        	sd	ra, 0x18(sp)
802159e0: 22 e8        	sd	s0, 0x10(sp)
802159e2: 00 10        	addi	s0, sp, 0x20
;     set_timer(get_cycle()+TIMEBASE);
802159e4: 97 00 00 00  	auipc	ra, 0x0
802159e8: e7 80 00 fe  	jalr	-0x20(ra) <_ZN2os4trap5ktrap9get_cycle17h9a332e93b6be4107E>
802159ec: aa 85        	mv	a1, a0
802159ee: 61 65        	lui	a0, 0x18
802159f0: 1b 05 05 6a  	addiw	a0, a0, 0x6a0
802159f4: 2e 95        	add	a0, a0, a1
802159f6: 23 34 a4 fe  	sd	a0, -0x18(s0)
802159fa: 63 6d b5 00  	bltu	a0, a1, 0x80215a14 <.Lpcrel_hi9>
802159fe: 09 a0        	j	0x80215a00 <_ZN2os4trap5ktrap19clock_set_next_time17h0750d6b4c9dac15aE+0x24>
80215a00: 03 35 84 fe  	ld	a0, -0x18(s0)
;     set_timer(get_cycle()+TIMEBASE);
80215a04: 97 50 ff ff  	auipc	ra, 0xffff5
80215a08: e7 80 60 01  	jalr	0x16(ra) <ekernel+0xffcbda1a>
80215a0c: e2 60        	ld	ra, 0x18(sp)
80215a0e: 42 64        	ld	s0, 0x10(sp)
; }
80215a10: 05 61        	addi	sp, sp, 0x20
80215a12: 82 80        	ret

0000000080215a14 <.Lpcrel_hi9>:
;     set_timer(get_cycle()+TIMEBASE);
80215a14: 17 15 02 00  	auipc	a0, 0x21
80215a18: 13 05 c5 b0  	addi	a0, a0, -0x4f4

0000000080215a1c <.Lpcrel_hi10>:
80215a1c: 97 15 02 00  	auipc	a1, 0x21
80215a20: 13 86 c5 b3  	addi	a2, a1, -0x4c4
80215a24: f1 45        	li	a1, 0x1c
80215a26: 97 a0 01 00  	auipc	ra, 0x1a
80215a2a: e7 80 20 7f  	jalr	0x7f2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080215a2e <_ZN2os4trap5ktrap5Clock11restart_clk17h3895bfd6c2cab529E>:
;     pub fn restart_clk(&self){
80215a2e: 79 71        	addi	sp, sp, -0x30
80215a30: 06 f4        	sd	ra, 0x28(sp)
80215a32: 22 f0        	sd	s0, 0x20(sp)
80215a34: 00 18        	addi	s0, sp, 0x30
80215a36: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             *(self.count.lock().spin().get_mut()) = 0; 
80215a3a: 97 d0 ff ff  	auipc	ra, 0xffffd
80215a3e: e7 80 c0 0e  	jalr	0xec(ra) <ekernel+0xffcc5b26>
80215a42: 23 3c a4 fc  	sd	a0, -0x28(s0)
80215a46: 23 30 b4 fe  	sd	a1, -0x20(s0)
80215a4a: 13 05 84 fd  	addi	a0, s0, -0x28
80215a4e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80215a52: 97 e0 ff ff  	auipc	ra, 0xffffe
80215a56: e7 80 80 ce  	jalr	-0x318(ra) <ekernel+0xffcc673a>
80215a5a: 97 e0 ff ff  	auipc	ra, 0xffffe
80215a5e: e7 80 a0 c9  	jalr	-0x366(ra) <ekernel+0xffcc66f4>
80215a62: 2a 86        	mv	a2, a0
80215a64: 03 35 04 fd  	ld	a0, -0x30(s0)
80215a68: 81 45        	li	a1, 0x0
80215a6a: 0c e2        	sd	a1, 0x0(a2)
80215a6c: 97 20 ff ff  	auipc	ra, 0xffff2
80215a70: e7 80 00 70  	jalr	0x700(ra) <ekernel+0xffcbb16c>
80215a74: a2 70        	ld	ra, 0x28(sp)
80215a76: 02 74        	ld	s0, 0x20(sp)
;     }
80215a78: 45 61        	addi	sp, sp, 0x30
80215a7a: 82 80        	ret

0000000080215a7c <_ZN2os4trap5ktrap5Clock7clk_run17haaf87ffe070d555cE>:
;     pub fn clk_run(&self){
80215a7c: 39 71        	addi	sp, sp, -0x40
80215a7e: 06 fc        	sd	ra, 0x38(sp)
80215a80: 22 f8        	sd	s0, 0x30(sp)
80215a82: 80 00        	addi	s0, sp, 0x40
80215a84: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             *(self.count.lock().spin().get_mut()) += 1; 
80215a88: 97 d0 ff ff  	auipc	ra, 0xffffd
80215a8c: e7 80 e0 09  	jalr	0x9e(ra) <ekernel+0xffcc5b26>
80215a90: 23 3c a4 fc  	sd	a0, -0x28(s0)
80215a94: 23 30 b4 fe  	sd	a1, -0x20(s0)
80215a98: 13 05 84 fd  	addi	a0, s0, -0x28
80215a9c: 97 e0 ff ff  	auipc	ra, 0xffffe
80215aa0: e7 80 e0 c9  	jalr	-0x362(ra) <ekernel+0xffcc673a>
80215aa4: 97 e0 ff ff  	auipc	ra, 0xffffe
80215aa8: e7 80 00 c5  	jalr	-0x3b0(ra) <ekernel+0xffcc66f4>
80215aac: aa 85        	mv	a1, a0
80215aae: 23 34 b4 fc  	sd	a1, -0x38(s0)
80215ab2: 08 61        	ld	a0, 0x0(a0)
80215ab4: 05 05        	addi	a0, a0, 0x1
80215ab6: 23 38 a4 fc  	sd	a0, -0x30(s0)
80215aba: 0d c1        	beqz	a0, 0x80215adc <.Lpcrel_hi11>
80215abc: 09 a0        	j	0x80215abe <_ZN2os4trap5ktrap5Clock7clk_run17haaf87ffe070d555cE+0x42>
80215abe: 03 35 04 fd  	ld	a0, -0x30(s0)
80215ac2: 83 35 84 fc  	ld	a1, -0x38(s0)
;             *(self.count.lock().spin().get_mut()) += 1; 
80215ac6: 88 e1        	sd	a0, 0x0(a1)
80215ac8: 13 05 84 fd  	addi	a0, s0, -0x28
80215acc: 97 20 ff ff  	auipc	ra, 0xffff2
80215ad0: e7 80 00 6a  	jalr	0x6a0(ra) <ekernel+0xffcbb16c>
80215ad4: e2 70        	ld	ra, 0x38(sp)
80215ad6: 42 74        	ld	s0, 0x30(sp)
;     }
80215ad8: 21 61        	addi	sp, sp, 0x40
80215ada: 82 80        	ret

0000000080215adc <.Lpcrel_hi11>:
;             *(self.count.lock().spin().get_mut()) += 1; 
80215adc: 17 15 02 00  	auipc	a0, 0x21
80215ae0: 13 05 45 a4  	addi	a0, a0, -0x5bc

0000000080215ae4 <.Lpcrel_hi12>:
80215ae4: 97 15 02 00  	auipc	a1, 0x21
80215ae8: 13 86 c5 a8  	addi	a2, a1, -0x574
80215aec: f1 45        	li	a1, 0x1c
80215aee: 97 a0 01 00  	auipc	ra, 0x1a
80215af2: e7 80 a0 72  	jalr	0x72a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080215af6 <_ZN2os4trap5ktrap5Clock7get_cnt17h7c7fdc0d5c5da934E>:
;     pub fn get_cnt(&self) -> usize{
80215af6: 39 71        	addi	sp, sp, -0x40
80215af8: 06 fc        	sd	ra, 0x38(sp)
80215afa: 22 f8        	sd	s0, 0x30(sp)
80215afc: 80 00        	addi	s0, sp, 0x40
80215afe: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             *(self.count.lock().spin().get_mut()) 
80215b02: 97 d0 ff ff  	auipc	ra, 0xffffd
80215b06: e7 80 40 02  	jalr	0x24(ra) <ekernel+0xffcc5b26>
80215b0a: 23 3c a4 fc  	sd	a0, -0x28(s0)
80215b0e: 23 30 b4 fe  	sd	a1, -0x20(s0)
80215b12: 13 05 84 fd  	addi	a0, s0, -0x28
80215b16: 23 34 a4 fc  	sd	a0, -0x38(s0)
80215b1a: 97 e0 ff ff  	auipc	ra, 0xffffe
80215b1e: e7 80 00 c2  	jalr	-0x3e0(ra) <ekernel+0xffcc673a>
80215b22: 97 e0 ff ff  	auipc	ra, 0xffffe
80215b26: e7 80 20 bd  	jalr	-0x42e(ra) <ekernel+0xffcc66f4>
80215b2a: aa 85        	mv	a1, a0
80215b2c: 03 35 84 fc  	ld	a0, -0x38(s0)
80215b30: 8c 61        	ld	a1, 0x0(a1)
80215b32: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     }
80215b36: 97 20 ff ff  	auipc	ra, 0xffff2
80215b3a: e7 80 60 63  	jalr	0x636(ra) <ekernel+0xffcbb16c>
80215b3e: 03 35 04 fd  	ld	a0, -0x30(s0)
80215b42: e2 70        	ld	ra, 0x38(sp)
80215b44: 42 74        	ld	s0, 0x30(sp)
80215b46: 21 61        	addi	sp, sp, 0x40
80215b48: 82 80        	ret

0000000080215b4a <_ZN4core3str11validations15next_code_point17h220572d36c780f95E>:
; pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
80215b4a: 55 71        	addi	sp, sp, -0xd0
80215b4c: 86 e5        	sd	ra, 0xc8(sp)
80215b4e: a2 e1        	sd	s0, 0xc0(sp)
80215b50: 80 09        	addi	s0, sp, 0xd0
80215b52: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80215b56: 89 45        	li	a1, 0x2
; const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
80215b58: 23 22 b4 f6  	sw	a1, -0x9c(s0)
80215b5c: 23 30 a4 fa  	sd	a0, -0x60(s0)
;     let x = *bytes.next()?;
80215b60: 97 90 01 00  	auipc	ra, 0x19
80215b64: e7 80 e0 ff  	jalr	-0x2(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE>
80215b68: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         match self {
80215b6c: 03 35 84 f7  	ld	a0, -0x88(s0)
80215b70: 09 ed        	bnez	a0, 0x80215b8a <.Lpcrel_hi0+0x16>
80215b72: 09 a0        	j	0x80215b74 <.Lpcrel_hi0>

0000000080215b74 <.Lpcrel_hi0>:
;             None => None,
80215b74: 17 e5 01 00  	auipc	a0, 0x1e
80215b78: 13 05 c5 88  	addi	a0, a0, -0x774
80215b7c: 0c 41        	lw	a1, 0x0(a0)
80215b7e: 48 41        	lw	a0, 0x4(a0)
80215b80: 23 24 b4 f6  	sw	a1, -0x98(s0)
80215b84: 23 26 a4 f6  	sw	a0, -0x94(s0)
; #![no_std]
80215b88: 35 a0        	j	0x80215bb4 <.Lpcrel_hi0+0x40>
;             Some(v) => ControlFlow::Continue(v),
80215b8a: 03 35 84 f7  	ld	a0, -0x88(s0)
80215b8e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80215b92: 23 38 a4 f6  	sd	a0, -0x90(s0)
;     let x = *bytes.next()?;
80215b96: 03 35 04 f7  	ld	a0, -0x90(s0)
80215b9a: 23 38 a4 fa  	sd	a0, -0x50(s0)
80215b9e: 03 05 05 00  	lb	a0, 0x0(a0)
80215ba2: 93 75 f5 0f  	andi	a1, a0, 0xff
80215ba6: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80215baa: a3 0d a4 fa  	sb	a0, -0x45(s0)
;     if x < 128 {
80215bae: 63 5e 05 02  	bgez	a0, 0x80215bea <.Lpcrel_hi0+0x76>
80215bb2: 09 a8        	j	0x80215bc4 <.Lpcrel_hi0+0x50>
; }
80215bb4: 03 25 84 f6  	lw	a0, -0x98(s0)
80215bb8: 83 25 c4 f6  	lw	a1, -0x94(s0)
80215bbc: ae 60        	ld	ra, 0xc8(sp)
80215bbe: 0e 64        	ld	s0, 0xc0(sp)
80215bc0: 69 61        	addi	sp, sp, 0xd0
80215bc2: 82 80        	ret
80215bc4: 03 35 84 f5  	ld	a0, -0xa8(s0)
80215bc8: 83 35 04 f5  	ld	a1, -0xb0(s0)
;     (byte & (0x7F >> width)) as u32
80215bcc: fd 89        	andi	a1, a1, 0x1f
80215bce: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80215bd2: 23 2e b4 fa  	sw	a1, -0x44(s0)
;     let y = unsafe { *bytes.next().unwrap_unchecked() };
80215bd6: 97 90 01 00  	auipc	ra, 0x19
80215bda: e7 80 80 f8  	jalr	-0x78(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE>
80215bde: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         match self {
80215be2: 03 35 04 f8  	ld	a0, -0x80(s0)
80215be6: 01 cd        	beqz	a0, 0x80215bfe <.Lpcrel_hi0+0x8a>
80215be8: 05 a0        	j	0x80215c08 <.Lpcrel_hi0+0x94>
80215bea: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         return Some(x as u32);
80215bee: 13 75 f5 0f  	andi	a0, a0, 0xff
80215bf2: 23 26 a4 f6  	sw	a0, -0x94(s0)
80215bf6: 05 45        	li	a0, 0x1
80215bf8: 23 24 a4 f6  	sw	a0, -0x98(s0)
; #![no_std]
80215bfc: 65 bf        	j	0x80215bb4 <.Lpcrel_hi0+0x40>
;     intrinsics::assert_unsafe_precondition!(
80215bfe: 97 50 ff ff  	auipc	ra, 0xffff5
80215c02: e7 80 00 d2  	jalr	-0x2e0(ra) <ekernel+0xffcbd91e>
80215c06: 3d a8        	j	0x80215c44 <.Lpcrel_hi0+0xd0>
80215c08: 03 35 04 f5  	ld	a0, -0xb0(s0)
80215c0c: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             Some(val) => val,
80215c10: 03 36 04 f8  	ld	a2, -0x80(s0)
80215c14: 23 30 c4 fc  	sd	a2, -0x40(s0)
;     let y = unsafe { *bytes.next().unwrap_unchecked() };
80215c18: 03 46 06 00  	lbu	a2, 0x0(a2)
80215c1c: a3 05 c4 fc  	sb	a2, -0x35(s0)
;     (ch << 6) | (byte & CONT_MASK) as u32
80215c20: 9b 95 65 00  	slliw	a1, a1, 0x6
80215c24: 13 76 f6 03  	andi	a2, a2, 0x3f
80215c28: 23 30 c4 f4  	sd	a2, -0xc0(s0)
80215c2c: 23 26 c4 fc  	sw	a2, -0x34(s0)
80215c30: d1 8d        	or	a1, a1, a2
80215c32: 23 26 b4 f8  	sw	a1, -0x74(s0)
;     if x >= 0xE0 {
80215c36: 93 75 f5 0f  	andi	a1, a0, 0xff
80215c3a: 13 05 f0 0d  	li	a0, 0xdf
80215c3e: 63 6c b5 00  	bltu	a0, a1, 0x80215c56 <.Lpcrel_hi0+0xe2>
80215c42: 11 a0        	j	0x80215c46 <.Lpcrel_hi0+0xd2>
;     let x = *bytes.next()?;
80215c44: 00 00        	unimp
;     Some(ch)
80215c46: 03 25 c4 f8  	lw	a0, -0x74(s0)
80215c4a: 23 26 a4 f6  	sw	a0, -0x94(s0)
80215c4e: 05 45        	li	a0, 0x1
80215c50: 23 24 a4 f6  	sw	a0, -0x98(s0)
; }
80215c54: 85 b7        	j	0x80215bb4 <.Lpcrel_hi0+0x40>
80215c56: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         let z = unsafe { *bytes.next().unwrap_unchecked() };
80215c5a: 97 90 01 00  	auipc	ra, 0x19
80215c5e: e7 80 40 f0  	jalr	-0xfc(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE>
80215c62: 23 38 a4 f8  	sd	a0, -0x70(s0)
;         match self {
80215c66: 03 35 04 f9  	ld	a0, -0x70(s0)
80215c6a: 19 e5        	bnez	a0, 0x80215c78 <.Lpcrel_hi0+0x104>
80215c6c: 09 a0        	j	0x80215c6e <.Lpcrel_hi0+0xfa>
;     intrinsics::assert_unsafe_precondition!(
80215c6e: 97 50 ff ff  	auipc	ra, 0xffff5
80215c72: e7 80 00 cb  	jalr	-0x350(ra) <ekernel+0xffcbd91e>
80215c76: f9 b7        	j	0x80215c44 <.Lpcrel_hi0+0xd0>
80215c78: 03 35 04 f5  	ld	a0, -0xb0(s0)
80215c7c: 83 35 84 f4  	ld	a1, -0xb8(s0)
80215c80: 03 36 04 f4  	ld	a2, -0xc0(s0)
;             Some(val) => val,
80215c84: 83 36 04 f9  	ld	a3, -0x70(s0)
80215c88: 23 38 d4 fc  	sd	a3, -0x30(s0)
;         let z = unsafe { *bytes.next().unwrap_unchecked() };
80215c8c: 83 c6 06 00  	lbu	a3, 0x0(a3)
80215c90: a3 0d d4 fc  	sb	a3, -0x25(s0)
;     (ch << 6) | (byte & CONT_MASK) as u32
80215c94: 1b 16 66 00  	slliw	a2, a2, 0x6
80215c98: 93 f6 f6 03  	andi	a3, a3, 0x3f
80215c9c: 55 8e        	or	a2, a2, a3
80215c9e: 23 3c c4 f2  	sd	a2, -0xc8(s0)
80215ca2: 23 2e c4 fc  	sw	a2, -0x24(s0)
;         ch = init << 12 | y_z;
80215ca6: 9b 95 c5 00  	slliw	a1, a1, 0xc
80215caa: d1 8d        	or	a1, a1, a2
80215cac: 23 26 b4 f8  	sw	a1, -0x74(s0)
;         if x >= 0xF0 {
80215cb0: 93 75 f5 0f  	andi	a1, a0, 0xff
80215cb4: 13 05 f0 0e  	li	a0, 0xef
80215cb8: 63 64 b5 00  	bltu	a0, a1, 0x80215cc0 <.Lpcrel_hi0+0x14c>
80215cbc: 09 a0        	j	0x80215cbe <.Lpcrel_hi0+0x14a>
;     if x >= 0xE0 {
80215cbe: 61 b7        	j	0x80215c46 <.Lpcrel_hi0+0xd2>
80215cc0: 03 35 84 f5  	ld	a0, -0xa8(s0)
;             let w = unsafe { *bytes.next().unwrap_unchecked() };
80215cc4: 97 90 01 00  	auipc	ra, 0x19
80215cc8: e7 80 a0 e9  	jalr	-0x166(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE>
80215ccc: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         match self {
80215cd0: 03 35 84 f9  	ld	a0, -0x68(s0)
80215cd4: 19 e5        	bnez	a0, 0x80215ce2 <.Lpcrel_hi0+0x16e>
80215cd6: 09 a0        	j	0x80215cd8 <.Lpcrel_hi0+0x164>
;     intrinsics::assert_unsafe_precondition!(
80215cd8: 97 50 ff ff  	auipc	ra, 0xffff5
80215cdc: e7 80 60 c4  	jalr	-0x3ba(ra) <ekernel+0xffcbd91e>
80215ce0: 95 b7        	j	0x80215c44 <.Lpcrel_hi0+0xd0>
80215ce2: 83 35 84 f3  	ld	a1, -0xc8(s0)
80215ce6: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             Some(val) => val,
80215cea: 03 36 84 f9  	ld	a2, -0x68(s0)
80215cee: 23 30 c4 fe  	sd	a2, -0x20(s0)
;             let w = unsafe { *bytes.next().unwrap_unchecked() };
80215cf2: 03 46 06 00  	lbu	a2, 0x0(a2)
80215cf6: a3 07 c4 fe  	sb	a2, -0x11(s0)
;             ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
80215cfa: 1d 89        	andi	a0, a0, 0x7
80215cfc: 1b 15 25 01  	slliw	a0, a0, 0x12
;     (ch << 6) | (byte & CONT_MASK) as u32
80215d00: 9b 95 65 00  	slliw	a1, a1, 0x6
80215d04: 13 76 f6 03  	andi	a2, a2, 0x3f
80215d08: d1 8d        	or	a1, a1, a2
;             ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
80215d0a: 4d 8d        	or	a0, a0, a1
80215d0c: 23 26 a4 f8  	sw	a0, -0x74(s0)
;         if x >= 0xF0 {
80215d10: 7d b7        	j	0x80215cbe <.Lpcrel_hi0+0x14a>

0000000080215d12 <_ZN4core4sync6atomic10AtomicBool4load17hc9d022e83bb7b648E>:
;     pub fn load(&self, order: Ordering) -> bool {
80215d12: 79 71        	addi	sp, sp, -0x30
80215d14: 06 f4        	sd	ra, 0x28(sp)
80215d16: 22 f0        	sd	s0, 0x20(sp)
80215d18: 00 18        	addi	s0, sp, 0x30
80215d1a: 23 3c a4 fc  	sd	a0, -0x28(s0)
80215d1e: a3 03 b4 fe  	sb	a1, -0x19(s0)
;         unsafe { atomic_load(self.v.get(), order) != 0 }
80215d22: 23 34 a4 fe  	sd	a0, -0x18(s0)
80215d26: 97 10 00 00  	auipc	ra, 0x1
80215d2a: e7 80 c0 51  	jalr	0x51c(ra) <_ZN4core4sync6atomic11atomic_load17h56dfa543508c415dE>
80215d2e: 13 75 f5 0f  	andi	a0, a0, 0xff
80215d32: 33 35 a0 00  	snez	a0, a0
80215d36: a2 70        	ld	ra, 0x28(sp)
80215d38: 02 74        	ld	s0, 0x20(sp)
;     }
80215d3a: 45 61        	addi	sp, sp, 0x30
80215d3c: 82 80        	ret

0000000080215d3e <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hc2c7d020d6c085b0E>:
;             pub fn compare_and_swap(&self,
80215d3e: 75 71        	addi	sp, sp, -0x90
80215d40: 06 e5        	sd	ra, 0x88(sp)
80215d42: 22 e1        	sd	s0, 0x80(sp)
80215d44: 00 09        	addi	s0, sp, 0x90
80215d46: 23 3c c4 f6  	sd	a2, -0x88(s0)
80215d4a: 23 30 b4 f8  	sd	a1, -0x80(s0)
80215d4e: 23 34 a4 f8  	sd	a0, -0x78(s0)
80215d52: a3 0f d4 f8  	sb	a3, -0x61(s0)
80215d56: 23 30 a4 fc  	sd	a0, -0x40(s0)
80215d5a: 23 34 b4 fc  	sd	a1, -0x38(s0)
80215d5e: 23 38 c4 fc  	sd	a2, -0x30(s0)
;     match order {
80215d62: 03 45 f4 f9  	lbu	a0, -0x61(s0)
80215d66: 23 38 a4 f8  	sd	a0, -0x70(s0)
80215d6a: 03 35 04 f9  	ld	a0, -0x70(s0)
;     match order {
80215d6e: 0e 05        	slli	a0, a0, 0x3

0000000080215d70 <.Lpcrel_hi0>:
80215d70: 97 15 02 00  	auipc	a1, 0x21
80215d74: 93 85 85 81  	addi	a1, a1, -0x7e8
80215d78: 2e 95        	add	a0, a0, a1
80215d7a: 08 61        	ld	a0, 0x0(a0)
80215d7c: 02 85        	jr	a0
;                 match self.compare_exchange(current,
80215d7e: 00 00        	unimp

0000000080215d80 <.LBB1_3>:
80215d80: 01 45        	li	a0, 0x0
;         Relaxed => Relaxed,
80215d82: a3 0f a4 fa  	sb	a0, -0x41(s0)
80215d86: 0d a0        	j	0x80215da8 <.LBB1_7+0x8>

0000000080215d88 <.LBB1_4>:
80215d88: 01 45        	li	a0, 0x0
;         Release => Relaxed,
80215d8a: a3 0f a4 fa  	sb	a0, -0x41(s0)
80215d8e: 29 a8        	j	0x80215da8 <.LBB1_7+0x8>

0000000080215d90 <.LBB1_5>:
80215d90: 09 45        	li	a0, 0x2
;         Acquire => Acquire,
80215d92: a3 0f a4 fa  	sb	a0, -0x41(s0)
80215d96: 09 a8        	j	0x80215da8 <.LBB1_7+0x8>

0000000080215d98 <.LBB1_6>:
80215d98: 09 45        	li	a0, 0x2
;         AcqRel => Acquire,
80215d9a: a3 0f a4 fa  	sb	a0, -0x41(s0)
80215d9e: 29 a0        	j	0x80215da8 <.LBB1_7+0x8>

0000000080215da0 <.LBB1_7>:
80215da0: 11 45        	li	a0, 0x4
;         SeqCst => SeqCst,
80215da2: a3 0f a4 fa  	sb	a0, -0x41(s0)
80215da6: 09 a0        	j	0x80215da8 <.LBB1_7+0x8>
80215da8: 03 36 84 f7  	ld	a2, -0x88(s0)
80215dac: 83 35 04 f8  	ld	a1, -0x80(s0)
80215db0: 03 35 84 f8  	ld	a0, -0x78(s0)
;                 unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
80215db4: 23 3c a4 fc  	sd	a0, -0x28(s0)
80215db8: 03 47 f4 fb  	lbu	a4, -0x41(s0)
80215dbc: 83 46 f4 f9  	lbu	a3, -0x61(s0)
80215dc0: 97 60 00 00  	auipc	ra, 0x6
80215dc4: e7 80 60 24  	jalr	0x246(ra) <_ZN4core4sync6atomic23atomic_compare_exchange17he2a97a2b1fef70f2E>
80215dc8: 23 34 a4 fa  	sd	a0, -0x58(s0)
80215dcc: 23 38 b4 fa  	sd	a1, -0x50(s0)
;                 match self.compare_exchange(current,
80215dd0: 03 35 84 fa  	ld	a0, -0x58(s0)
80215dd4: 09 e9        	bnez	a0, 0x80215de6 <.LBB1_7+0x46>
80215dd6: 09 a0        	j	0x80215dd8 <.LBB1_7+0x38>
;                     Ok(x) => x,
80215dd8: 03 35 04 fb  	ld	a0, -0x50(s0)
80215ddc: 23 30 a4 fe  	sd	a0, -0x20(s0)
80215de0: 23 30 a4 fa  	sd	a0, -0x60(s0)
80215de4: 01 a8        	j	0x80215df4 <.LBB1_7+0x54>
;                     Err(x) => x,
80215de6: 03 35 04 fb  	ld	a0, -0x50(s0)
80215dea: 23 34 a4 fe  	sd	a0, -0x18(s0)
80215dee: 23 30 a4 fa  	sd	a0, -0x60(s0)
80215df2: 09 a0        	j	0x80215df4 <.LBB1_7+0x54>
;             }
80215df4: 03 35 04 fa  	ld	a0, -0x60(s0)
80215df8: aa 60        	ld	ra, 0x88(sp)
80215dfa: 0a 64        	ld	s0, 0x80(sp)
80215dfc: 49 61        	addi	sp, sp, 0x90
80215dfe: 82 80        	ret

0000000080215e00 <_ZN4core4sync6atomic11AtomicUsize4load17h58aa0dee2db70143E>:
;             pub fn load(&self, order: Ordering) -> $int_type {
80215e00: 79 71        	addi	sp, sp, -0x30
80215e02: 06 f4        	sd	ra, 0x28(sp)
80215e04: 22 f0        	sd	s0, 0x20(sp)
80215e06: 00 18        	addi	s0, sp, 0x30
80215e08: 23 3c a4 fc  	sd	a0, -0x28(s0)
80215e0c: a3 03 b4 fe  	sb	a1, -0x19(s0)
;                 unsafe { atomic_load(self.v.get(), order) }
80215e10: 23 34 a4 fe  	sd	a0, -0x18(s0)
80215e14: 97 60 00 00  	auipc	ra, 0x6
80215e18: e7 80 60 fc  	jalr	-0x3a(ra) <_ZN4core4sync6atomic11atomic_load17hb7d1aad711655104E>
80215e1c: a2 70        	ld	ra, 0x28(sp)
80215e1e: 02 74        	ld	s0, 0x20(sp)
;             }
80215e20: 45 61        	addi	sp, sp, 0x30
80215e22: 82 80        	ret

0000000080215e24 <_ZN4core4sync6atomic11AtomicUsize5store17h434fa732a9297e7dE>:
;             pub fn store(&self, val: $int_type, order: Ordering) {
80215e24: 79 71        	addi	sp, sp, -0x30
80215e26: 06 f4        	sd	ra, 0x28(sp)
80215e28: 22 f0        	sd	s0, 0x20(sp)
80215e2a: 00 18        	addi	s0, sp, 0x30
80215e2c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80215e30: 23 3c b4 fc  	sd	a1, -0x28(s0)
80215e34: a3 03 c4 fe  	sb	a2, -0x19(s0)
;                 unsafe { atomic_store(self.v.get(), val, order); }
80215e38: 23 34 a4 fe  	sd	a0, -0x18(s0)
80215e3c: 97 60 00 00  	auipc	ra, 0x6
80215e40: e7 80 40 0b  	jalr	0xb4(ra) <_ZN4core4sync6atomic12atomic_store17ha6fdde9d0311a810E>
80215e44: a2 70        	ld	ra, 0x28(sp)
80215e46: 02 74        	ld	s0, 0x20(sp)
;             }
80215e48: 45 61        	addi	sp, sp, 0x30
80215e4a: 82 80        	ret

0000000080215e4c <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h6fac44f85eef4e4dE>:
;             pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
80215e4c: 1d 71        	addi	sp, sp, -0x60
80215e4e: 86 ec        	sd	ra, 0x58(sp)
80215e50: a2 e8        	sd	s0, 0x50(sp)
80215e52: 80 10        	addi	s0, sp, 0x60
80215e54: 23 34 b4 fa  	sd	a1, -0x58(s0)
80215e58: 23 38 a4 fa  	sd	a0, -0x50(s0)
80215e5c: a3 03 c4 fc  	sb	a2, -0x39(s0)
80215e60: 23 38 a4 fc  	sd	a0, -0x30(s0)
80215e64: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 unsafe { atomic_add(self.v.get(), val, order) }
80215e68: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
80215e6c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         match order {
80215e70: 03 45 74 fc  	lbu	a0, -0x39(s0)
80215e74: 23 3c a4 fa  	sd	a0, -0x48(s0)
80215e78: 03 35 84 fb  	ld	a0, -0x48(s0)
;         match order {
80215e7c: 0e 05        	slli	a0, a0, 0x3

0000000080215e7e <.Lpcrel_hi1>:
80215e7e: 97 05 02 00  	auipc	a1, 0x20
80215e82: 93 85 25 73  	addi	a1, a1, 0x732
80215e86: 2e 95        	add	a0, a0, a1
80215e88: 08 61        	ld	a0, 0x0(a0)
80215e8a: 02 85        	jr	a0
80215e8c: 00 00        	unimp

0000000080215e8e <.LBB4_3>:
80215e8e: 03 35 04 fb  	ld	a0, -0x50(s0)
80215e92: 83 35 84 fa  	ld	a1, -0x58(s0)
;             Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
80215e96: 2f 35 b5 00  	amoadd.d	a0, a1, (a0)
80215e9a: 23 34 a4 fc  	sd	a0, -0x38(s0)
80215e9e: a9 a0        	j	0x80215ee8 <.LBB4_7+0x12>

0000000080215ea0 <.LBB4_4>:
80215ea0: 03 35 04 fb  	ld	a0, -0x50(s0)
80215ea4: 83 35 84 fa  	ld	a1, -0x58(s0)
;             Release => intrinsics::atomic_xadd_release(dst, val),
80215ea8: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
80215eac: 23 34 a4 fc  	sd	a0, -0x38(s0)
80215eb0: 25 a8        	j	0x80215ee8 <.LBB4_7+0x12>

0000000080215eb2 <.LBB4_5>:
80215eb2: 03 35 04 fb  	ld	a0, -0x50(s0)
80215eb6: 83 35 84 fa  	ld	a1, -0x58(s0)
;             Acquire => intrinsics::atomic_xadd_acquire(dst, val),
80215eba: 2f 35 b5 04  	amoadd.d.aq	a0, a1, (a0)
80215ebe: 23 34 a4 fc  	sd	a0, -0x38(s0)
80215ec2: 1d a0        	j	0x80215ee8 <.LBB4_7+0x12>

0000000080215ec4 <.LBB4_6>:
80215ec4: 03 35 04 fb  	ld	a0, -0x50(s0)
80215ec8: 83 35 84 fa  	ld	a1, -0x58(s0)
;             AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
80215ecc: 2f 35 b5 06  	amoadd.d.aqrl	a0, a1, (a0)
80215ed0: 23 34 a4 fc  	sd	a0, -0x38(s0)
80215ed4: 11 a8        	j	0x80215ee8 <.LBB4_7+0x12>

0000000080215ed6 <.LBB4_7>:
80215ed6: 03 35 04 fb  	ld	a0, -0x50(s0)
80215eda: 83 35 84 fa  	ld	a1, -0x58(s0)
;             SeqCst => intrinsics::atomic_xadd_seqcst(dst, val),
80215ede: 2f 35 b5 06  	amoadd.d.aqrl	a0, a1, (a0)
80215ee2: 23 34 a4 fc  	sd	a0, -0x38(s0)
80215ee6: 09 a0        	j	0x80215ee8 <.LBB4_7+0x12>
;             }
80215ee8: 03 35 84 fc  	ld	a0, -0x38(s0)
80215eec: e6 60        	ld	ra, 0x58(sp)
80215eee: 46 64        	ld	s0, 0x50(sp)
80215ef0: 25 61        	addi	sp, sp, 0x60
80215ef2: 82 80        	ret

0000000080215ef4 <_ZN4core4sync6atomic14spin_loop_hint17he741a157a0cd59b6E>:
; pub fn spin_loop_hint() {
80215ef4: 41 11        	addi	sp, sp, -0x10
80215ef6: 06 e4        	sd	ra, 0x8(sp)
80215ef8: 22 e0        	sd	s0, 0x0(sp)
80215efa: 00 08        	addi	s0, sp, 0x10
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80215efc: 0f 00 00 01  	fence	w, 0
80215f00: a2 60        	ld	ra, 0x8(sp)
80215f02: 02 64        	ld	s0, 0x0(sp)
; }
80215f04: 41 01        	addi	sp, sp, 0x10
80215f06: 82 80        	ret

0000000080215f08 <_ZN4core4sync6atomic5fence17h5a13a54df8cf9d31E>:
; pub fn fence(order: Ordering) {
80215f08: 1d 71        	addi	sp, sp, -0x60
80215f0a: 86 ec        	sd	ra, 0x58(sp)
80215f0c: a2 e8        	sd	s0, 0x50(sp)
80215f0e: 80 10        	addi	s0, sp, 0x60
80215f10: a3 07 a4 fa  	sb	a0, -0x51(s0)
;         match order {
80215f14: 03 45 f4 fa  	lbu	a0, -0x51(s0)
80215f18: 23 30 a4 fa  	sd	a0, -0x60(s0)
80215f1c: 03 35 04 fa  	ld	a0, -0x60(s0)
;         match order {
80215f20: 0e 05        	slli	a0, a0, 0x3

0000000080215f22 <.Lpcrel_hi2>:
80215f22: 97 05 02 00  	auipc	a1, 0x20
80215f26: 93 85 65 6b  	addi	a1, a1, 0x6b6
80215f2a: 2e 95        	add	a0, a0, a1
80215f2c: 08 61        	ld	a0, 0x0(a0)
80215f2e: 02 85        	jr	a0
80215f30: 00 00        	unimp

0000000080215f32 <.Lpcrel_hi3>:
;             Relaxed => panic!("there is no such thing as a relaxed fence"),
80215f32: 17 05 02 00  	auipc	a0, 0x20
80215f36: 93 05 e5 6f  	addi	a1, a0, 0x6fe
80215f3a: 23 30 b4 fe  	sd	a1, -0x20(s0)
80215f3e: 05 45        	li	a0, 0x1
80215f40: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
80215f44: 23 38 b4 fa  	sd	a1, -0x50(s0)
80215f48: 23 3c a4 fa  	sd	a0, -0x48(s0)

0000000080215f4c <.Lpcrel_hi4>:
80215f4c: 17 d5 01 00  	auipc	a0, 0x1d
80215f50: 13 05 45 34  	addi	a0, a0, 0x344
80215f54: 0c 61        	ld	a1, 0x0(a0)
80215f56: 08 65        	ld	a0, 0x8(a0)
80215f58: 23 38 b4 fc  	sd	a1, -0x30(s0)
80215f5c: 23 3c a4 fc  	sd	a0, -0x28(s0)

0000000080215f60 <.Lpcrel_hi5>:
80215f60: 17 05 02 00  	auipc	a0, 0x20
80215f64: 13 05 05 6e  	addi	a0, a0, 0x6e0
80215f68: 23 30 a4 fc  	sd	a0, -0x40(s0)
80215f6c: 01 45        	li	a0, 0x0
80215f6e: 23 34 a4 fc  	sd	a0, -0x38(s0)

0000000080215f72 <.Lpcrel_hi6>:
;             Relaxed => panic!("there is no such thing as a relaxed fence"),
80215f72: 17 05 02 00  	auipc	a0, 0x20
80215f76: 93 05 65 74  	addi	a1, a0, 0x746
80215f7a: 13 05 04 fb  	addi	a0, s0, -0x50
80215f7e: 97 a0 01 00  	auipc	ra, 0x1a
80215f82: e7 80 a0 22  	jalr	0x22a(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080215f86 <.LBB6_4>:
;             Release => intrinsics::atomic_fence_release(),
80215f86: 0f 00 10 03  	fence	rw, w
80215f8a: 11 a8        	j	0x80215f9e <.LBB6_7+0x6>

0000000080215f8c <.LBB6_5>:
;             Acquire => intrinsics::atomic_fence_acquire(),
80215f8c: 0f 00 30 02  	fence	r, rw
80215f90: 39 a0        	j	0x80215f9e <.LBB6_7+0x6>

0000000080215f92 <.LBB6_6>:
;             AcqRel => intrinsics::atomic_fence_acqrel(),
80215f92: 0f 00 30 83  	fence.tso
80215f96: 21 a0        	j	0x80215f9e <.LBB6_7+0x6>

0000000080215f98 <.LBB6_7>:
;             SeqCst => intrinsics::atomic_fence_seqcst(),
80215f98: 0f 00 30 03  	fence	rw, rw
80215f9c: 09 a0        	j	0x80215f9e <.LBB6_7+0x6>
80215f9e: e6 60        	ld	ra, 0x58(sp)
80215fa0: 46 64        	ld	s0, 0x50(sp)
; }
80215fa2: 25 61        	addi	sp, sp, 0x60
80215fa4: 82 80        	ret

0000000080215fa6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfb7912c8f933c9e7E>:
;     fn into_iter(self) -> I {
80215fa6: 01 11        	addi	sp, sp, -0x20
80215fa8: 06 ec        	sd	ra, 0x18(sp)
80215faa: 22 e8        	sd	s0, 0x10(sp)
80215fac: 00 10        	addi	s0, sp, 0x20
80215fae: 23 30 a4 fe  	sd	a0, -0x20(s0)
80215fb2: 23 34 b4 fe  	sd	a1, -0x18(s0)
80215fb6: e2 60        	ld	ra, 0x18(sp)
80215fb8: 42 64        	ld	s0, 0x10(sp)
;     }
80215fba: 05 61        	addi	sp, sp, 0x20
80215fbc: 82 80        	ret

0000000080215fbe <thread_start>:
; pub fn thread_start(){
80215fbe: 59 71        	addi	sp, sp, -0x70
80215fc0: 86 f4        	sd	ra, 0x68(sp)
80215fc2: a2 f0        	sd	s0, 0x60(sp)
80215fc4: 80 18        	addi	s0, sp, 0x70
80215fc6: 01 45        	li	a0, 0x0
80215fc8: 23 3c a4 f8  	sd	a0, -0x68(s0)
;     let i:usize = 0;
80215fcc: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     let tp = r_tp();
80215fd0: 97 60 ff ff  	auipc	ra, 0xffff6
80215fd4: e7 80 40 e1  	jalr	-0x1ec(ra) <ekernel+0xffcbede4>
80215fd8: aa 85        	mv	a1, a0
80215fda: 03 35 84 f9  	ld	a0, -0x68(s0)
80215fde: 2e 86        	mv	a2, a1
80215fe0: 23 30 c4 fa  	sd	a2, -0x60(s0)
80215fe4: 23 30 b4 fe  	sd	a1, -0x20(s0)
;     for i in i..NCPU {
80215fe8: 23 38 a4 fa  	sd	a0, -0x50(s0)
80215fec: 0d 45        	li	a0, 0x3
80215fee: 23 3c a4 fa  	sd	a0, -0x48(s0)
80215ff2: 03 35 04 fb  	ld	a0, -0x50(s0)
80215ff6: 83 35 84 fb  	ld	a1, -0x48(s0)
80215ffa: 97 60 01 00  	auipc	ra, 0x16
80215ffe: e7 80 c0 8b  	jalr	-0x744(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb7ed3f92a62e2c8bE>
80216002: 23 30 a4 fc  	sd	a0, -0x40(s0)
80216006: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021600a: 09 a0        	j	0x8021600c <thread_start+0x4e>
8021600c: 13 05 04 fc  	addi	a0, s0, -0x40
;     for i in i..NCPU {
80216010: 97 50 01 00  	auipc	ra, 0x15
80216014: e7 80 60 5e  	jalr	0x5e6(ra) <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h58a3e79438385681E>
80216018: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021601c: 23 3c b4 fc  	sd	a1, -0x28(s0)
80216020: 03 35 04 fd  	ld	a0, -0x30(s0)
80216024: 11 e5        	bnez	a0, 0x80216030 <thread_start+0x72>
80216026: 09 a0        	j	0x80216028 <thread_start+0x6a>
80216028: a6 70        	ld	ra, 0x68(sp)
8021602a: 06 74        	ld	s0, 0x60(sp)
; }
8021602c: 65 61        	addi	sp, sp, 0x70
8021602e: 82 80        	ret
80216030: 83 35 04 fa  	ld	a1, -0x60(s0)
;     for i in i..NCPU {
80216034: 03 35 84 fd  	ld	a0, -0x28(s0)
80216038: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021603c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if i != tp {
80216040: e3 06 b5 fc  	beq	a0, a1, 0x8021600c <thread_start+0x4e>
80216044: 09 a0        	j	0x80216046 <thread_start+0x88>
80216046: 03 35 04 f9  	ld	a0, -0x70(s0)
;             sbi_hsm_hart_start(i);
8021604a: 97 50 ff ff  	auipc	ra, 0xffff5
8021604e: e7 80 40 98  	jalr	-0x67c(ra) <ekernel+0xffcbd9ce>
80216052: 6d bf        	j	0x8021600c <thread_start+0x4e>

0000000080216054 <_ZN5riscv8register3sie10set_stimer17h45cf7d9c347f84e8E>:
;         pub unsafe fn $set_field() {
80216054: 41 11        	addi	sp, sp, -0x10
80216056: 06 e4        	sd	ra, 0x8(sp)
80216058: 22 e0        	sd	s0, 0x0(sp)
8021605a: 00 08        	addi	s0, sp, 0x10
8021605c: 13 05 00 02  	li	a0, 0x20
;             _set($e);
80216060: 97 00 00 00  	auipc	ra, 0x0
80216064: e7 80 00 01  	jalr	0x10(ra) <_ZN5riscv8register3sie4_set17hdf93f8ba35c8c6fdE>
80216068: a2 60        	ld	ra, 0x8(sp)
8021606a: 02 64        	ld	s0, 0x0(sp)
;         }
8021606c: 41 01        	addi	sp, sp, 0x10
8021606e: 82 80        	ret

0000000080216070 <_ZN5riscv8register3sie4_set17hdf93f8ba35c8c6fdE>:
;         unsafe fn _set(bits: usize) {
80216070: 01 11        	addi	sp, sp, -0x20
80216072: 06 ec        	sd	ra, 0x18(sp)
80216074: 22 e8        	sd	s0, 0x10(sp)
80216076: 00 10        	addi	s0, sp, 0x20
80216078: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 () => core::arch::asm!("csrrs x0, {1}, {0}", in(reg) bits, const $csr_number),
8021607c: 73 20 45 10  	csrs	sie, a0
80216080: e2 60        	ld	ra, 0x18(sp)
80216082: 42 64        	ld	s0, 0x10(sp)
;         }
80216084: 05 61        	addi	sp, sp, 0x20
80216086: 82 80        	ret

0000000080216088 <_ZN69_$LT$os..filesystem..stdio..Stdin$u20$as$u20$os..filesystem..File$GT$4read17hc31e3ba6b14061c5E>:
;     fn read(&self ,mut buf: crate::page_alloc::UserBuffer) -> usize {
80216088: 51 71        	addi	sp, sp, -0xf0
8021608a: 86 f5        	sd	ra, 0xe8(sp)
8021608c: a2 f1        	sd	s0, 0xe0(sp)
8021608e: 80 19        	addi	s0, sp, 0xf0
80216090: 23 34 b4 f2  	sd	a1, -0xd8(s0)
80216094: aa 85        	mv	a1, a0
80216096: 03 35 84 f2  	ld	a0, -0xd8(s0)
8021609a: 23 38 b4 f8  	sd	a1, -0x70(s0)
;         assert_eq!(buf.len(),1);
8021609e: 97 e0 fe ff  	auipc	ra, 0xfffee
802160a2: e7 80 80 01  	jalr	0x18(ra) <ekernel+0xffcb70b6>
802160a6: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802160aa: 13 05 04 f5  	addi	a0, s0, -0xb0
802160ae: 23 30 a4 f4  	sd	a0, -0xc0(s0)

00000000802160b2 <.Lpcrel_hi0>:
802160b2: 17 d5 01 00  	auipc	a0, 0x1d
802160b6: 13 05 e5 33  	addi	a0, a0, 0x33e
802160ba: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802160be: 03 35 04 f4  	ld	a0, -0xc0(s0)
802160c2: 23 38 a4 f2  	sd	a0, -0xd0(s0)
802160c6: 23 3c a4 f8  	sd	a0, -0x68(s0)
802160ca: 83 35 84 f4  	ld	a1, -0xb8(s0)
802160ce: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802160d2: 23 30 b4 fa  	sd	a1, -0x60(s0)
802160d6: 08 61        	ld	a0, 0x0(a0)
802160d8: 8c 61        	ld	a1, 0x0(a1)
802160da: 63 08 b5 02  	beq	a0, a1, 0x8021610a <.Lpcrel_hi1+0x14>
802160de: 09 a0        	j	0x802160e0 <.Lpcrel_hi0+0x2e>
802160e0: 03 36 84 f3  	ld	a2, -0xc8(s0)
802160e4: 83 35 04 f3  	ld	a1, -0xd0(s0)
802160e8: 01 45        	li	a0, 0x0
;         assert_eq!(buf.len(),1);
802160ea: a3 0f a4 f4  	sb	a0, -0xa1(s0)
802160ee: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802160f2: 03 45 f4 f5  	lbu	a0, -0xa1(s0)

00000000802160f6 <.Lpcrel_hi1>:
802160f6: 97 06 02 00  	auipc	a3, 0x20
802160fa: 13 87 26 64  	addi	a4, a3, 0x642
802160fe: 93 06 04 f6  	addi	a3, s0, -0xa0
80216102: 97 80 01 00  	auipc	ra, 0x18
80216106: e7 80 00 e1  	jalr	-0x1f0(ra) <_ZN4core9panicking13assert_failed17h770217dc7d738624E>
;             c = sbi_console_get_char();
8021610a: 97 50 ff ff  	auipc	ra, 0xffff5
8021610e: e7 80 80 94  	jalr	-0x6b8(ra) <ekernel+0xffcbda52>
80216112: aa 85        	mv	a1, a0
80216114: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80216118: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021611c: fd 55        	li	a1, -0x1
;             if c == 0xffffffffffffffff {
8021611e: 63 18 b5 04  	bne	a0, a1, 0x8021616e <.Lpcrel_hi3+0x2e>
80216122: 09 a0        	j	0x80216124 <.Lpcrel_hi2>

0000000080216124 <.Lpcrel_hi2>:
;                 let task = CPUS.my_proc().unwrap();
80216124: 17 65 33 00  	auipc	a0, 0x336
80216128: 13 05 c5 0d  	addi	a0, a0, 0xdc
8021612c: 97 30 00 00  	auipc	ra, 0x3
80216130: e7 80 00 37  	jalr	0x370(ra) <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>
80216134: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self {
80216138: 03 35 04 fe  	ld	a0, -0x20(s0)
8021613c: 11 e9        	bnez	a0, 0x80216150 <.Lpcrel_hi3+0x10>
8021613e: 09 a0        	j	0x80216140 <.Lpcrel_hi3>

0000000080216140 <.Lpcrel_hi3>:
;             None => unwrap_failed(),
80216140: 17 05 02 00  	auipc	a0, 0x20
80216144: 13 05 05 61  	addi	a0, a0, 0x610
80216148: 97 b0 01 00  	auipc	ra, 0x1b
8021614c: e7 80 00 b8  	jalr	-0x480(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80216150: 03 35 04 fe  	ld	a0, -0x20(s0)
80216154: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 let task = CPUS.my_proc().unwrap();
80216158: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 task.yielding();
8021615c: 97 c0 fe ff  	auipc	ra, 0xfffec
80216160: e7 80 00 c7  	jalr	-0x390(ra) <ekernel+0xffcb4dcc>
80216164: 97 90 ff ff  	auipc	ra, 0xffff9
80216168: e7 80 60 e9  	jalr	-0x16a(ra) <ekernel+0xffcc1ffa>
8021616c: 79 bf        	j	0x8021610a <.Lpcrel_hi1+0x14>
8021616e: 03 35 84 f2  	ld	a0, -0xd8(s0)
80216172: 83 35 04 f2  	ld	a1, -0xe0(s0)
;         let ch = c as u8;
80216176: a3 0f b4 fa  	sb	a1, -0x41(s0)

000000008021617a <.Lpcrel_hi4>:
;             buf.buffers[0].as_mut_ptr().write_volatile(ch);
8021617a: 97 05 02 00  	auipc	a1, 0x20
8021617e: 13 86 e5 5e  	addi	a2, a1, 0x5ee
80216182: 81 45        	li	a1, 0x0
80216184: 97 f0 ff ff  	auipc	ra, 0xfffff
80216188: e7 80 40 13  	jalr	0x134(ra) <ekernel+0xffcc82b8>
8021618c: 83 35 04 f2  	ld	a1, -0xe0(s0)
80216190: 2a 86        	mv	a2, a0
80216192: 08 62        	ld	a0, 0x0(a2)
80216194: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80216198: 10 66        	ld	a2, 0x8(a2)
8021619a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021619e: 23 3c c4 fc  	sd	a2, -0x28(s0)
802161a2: 23 30 a4 fc  	sd	a0, -0x40(s0)
802161a6: a3 07 b4 fc  	sb	a1, -0x31(s0)
802161aa: 85 45        	li	a1, 0x1
802161ac: 23 3c b4 f0  	sd	a1, -0xe8(s0)
;         assert_unsafe_precondition!(
802161b0: 97 e0 ff ff  	auipc	ra, 0xffffe
802161b4: e7 80 00 d2  	jalr	-0x2e0(ra) <ekernel+0xffcc6ed0>
802161b8: 03 36 04 f1  	ld	a2, -0xf0(s0)
802161bc: 83 35 04 f2  	ld	a1, -0xe0(s0)
802161c0: 03 35 84 f2  	ld	a0, -0xd8(s0)
;         intrinsics::volatile_store(dst, src);
802161c4: 23 00 b6 00  	sb	a1, 0x0(a2)
;     }
802161c8: 97 20 ff ff  	auipc	ra, 0xffff2
802161cc: e7 80 a0 c8  	jalr	-0x376(ra) <ekernel+0xffcbae52>
802161d0: 03 35 84 f1  	ld	a0, -0xe8(s0)
802161d4: ae 70        	ld	ra, 0xe8(sp)
802161d6: 0e 74        	ld	s0, 0xe0(sp)
802161d8: 6d 61        	addi	sp, sp, 0xf0
802161da: 82 80        	ret

00000000802161dc <_ZN69_$LT$os..filesystem..stdio..Stdin$u20$as$u20$os..filesystem..File$GT$5write17h5d2d1e1cc8892aafE>:
;     fn write(&self ,buf:crate::page_alloc::UserBuffer) -> usize {
802161dc: 5d 71        	addi	sp, sp, -0x50
802161de: 86 e4        	sd	ra, 0x48(sp)
802161e0: a2 e0        	sd	s0, 0x40(sp)
802161e2: 80 08        	addi	s0, sp, 0x50
802161e4: 23 34 a4 fe  	sd	a0, -0x18(s0)

00000000802161e8 <.Lpcrel_hi5>:
;         panic!("can't write in Stdin");
802161e8: 17 05 02 00  	auipc	a0, 0x20
802161ec: 93 05 05 5b  	addi	a1, a0, 0x5b0
802161f0: 13 05 84 fb  	addi	a0, s0, -0x48
802161f4: 23 38 a4 fa  	sd	a0, -0x50(s0)
802161f8: 05 46        	li	a2, 0x1
;         panic!("can't write in Stdin");
802161fa: 97 10 ff ff  	auipc	ra, 0xffff1
802161fe: e7 80 a0 1b  	jalr	0x1ba(ra) <ekernel+0xffcba3b4>
80216202: 03 35 04 fb  	ld	a0, -0x50(s0)

0000000080216206 <.Lpcrel_hi6>:
80216206: 97 05 02 00  	auipc	a1, 0x20
8021620a: 93 85 25 5a  	addi	a1, a1, 0x5a2
8021620e: 97 a0 01 00  	auipc	ra, 0x1a
80216212: e7 80 a0 f9  	jalr	-0x66(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080216216 <_ZN69_$LT$os..filesystem..stdio..Stdin$u20$as$u20$os..filesystem..File$GT$8readable17h177ed0779c7ef8b8E>:
;     fn readable(&self) -> bool {
80216216: 01 11        	addi	sp, sp, -0x20
80216218: 06 ec        	sd	ra, 0x18(sp)
8021621a: 22 e8        	sd	s0, 0x10(sp)
8021621c: 00 10        	addi	s0, sp, 0x20
8021621e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80216222: 05 45        	li	a0, 0x1
80216224: e2 60        	ld	ra, 0x18(sp)
80216226: 42 64        	ld	s0, 0x10(sp)
;     }
80216228: 05 61        	addi	sp, sp, 0x20
8021622a: 82 80        	ret

000000008021622c <_ZN69_$LT$os..filesystem..stdio..Stdin$u20$as$u20$os..filesystem..File$GT$8writable17h785439a4469100e5E>:
;     fn writable(&self) -> bool {
8021622c: 01 11        	addi	sp, sp, -0x20
8021622e: 06 ec        	sd	ra, 0x18(sp)
80216230: 22 e8        	sd	s0, 0x10(sp)
80216232: 00 10        	addi	s0, sp, 0x20
80216234: 23 34 a4 fe  	sd	a0, -0x18(s0)
80216238: 05 45        	li	a0, 0x1
8021623a: e2 60        	ld	ra, 0x18(sp)
8021623c: 42 64        	ld	s0, 0x10(sp)
;     }
8021623e: 05 61        	addi	sp, sp, 0x20
80216240: 82 80        	ret

0000000080216242 <_ZN70_$LT$os..filesystem..stdio..Stdout$u20$as$u20$os..filesystem..File$GT$8readable17h55d36b6007b1d864E>:
;     fn readable(&self) -> bool {
80216242: 01 11        	addi	sp, sp, -0x20
80216244: 06 ec        	sd	ra, 0x18(sp)
80216246: 22 e8        	sd	s0, 0x10(sp)
80216248: 00 10        	addi	s0, sp, 0x20
8021624a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021624e: 05 45        	li	a0, 0x1
80216250: e2 60        	ld	ra, 0x18(sp)
80216252: 42 64        	ld	s0, 0x10(sp)
;     }
80216254: 05 61        	addi	sp, sp, 0x20
80216256: 82 80        	ret

0000000080216258 <_ZN70_$LT$os..filesystem..stdio..Stdout$u20$as$u20$os..filesystem..File$GT$8writable17hd4953933d334fbeeE>:
;     fn writable(&self) -> bool {
80216258: 01 11        	addi	sp, sp, -0x20
8021625a: 06 ec        	sd	ra, 0x18(sp)
8021625c: 22 e8        	sd	s0, 0x10(sp)
8021625e: 00 10        	addi	s0, sp, 0x20
80216260: 23 34 a4 fe  	sd	a0, -0x18(s0)
80216264: 05 45        	li	a0, 0x1
80216266: e2 60        	ld	ra, 0x18(sp)
80216268: 42 64        	ld	s0, 0x10(sp)
;     }
8021626a: 05 61        	addi	sp, sp, 0x20
8021626c: 82 80        	ret

000000008021626e <_ZN70_$LT$os..filesystem..stdio..Stdout$u20$as$u20$os..filesystem..File$GT$4read17hc0230b30cf686e32E>:
;     fn read(&self ,buf: crate::page_alloc::UserBuffer) -> usize {
8021626e: 5d 71        	addi	sp, sp, -0x50
80216270: 86 e4        	sd	ra, 0x48(sp)
80216272: a2 e0        	sd	s0, 0x40(sp)
80216274: 80 08        	addi	s0, sp, 0x50
80216276: 23 34 a4 fe  	sd	a0, -0x18(s0)

000000008021627a <.Lpcrel_hi7>:
;         panic!("stdout can't read");
8021627a: 17 05 02 00  	auipc	a0, 0x20
8021627e: 93 05 e5 55  	addi	a1, a0, 0x55e
80216282: 13 05 84 fb  	addi	a0, s0, -0x48
80216286: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021628a: 05 46        	li	a2, 0x1
;         panic!("stdout can't read");
8021628c: 97 10 ff ff  	auipc	ra, 0xffff1
80216290: e7 80 80 12  	jalr	0x128(ra) <ekernel+0xffcba3b4>
80216294: 03 35 04 fb  	ld	a0, -0x50(s0)

0000000080216298 <.Lpcrel_hi8>:
80216298: 97 05 02 00  	auipc	a1, 0x20
8021629c: 93 85 05 55  	addi	a1, a1, 0x550
802162a0: 97 a0 01 00  	auipc	ra, 0x1a
802162a4: e7 80 80 f0  	jalr	-0xf8(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802162a8 <_ZN70_$LT$os..filesystem..stdio..Stdout$u20$as$u20$os..filesystem..File$GT$5write17hbf0b128016dd70f8E>:
;     fn write(&self ,buf:crate::page_alloc::UserBuffer) -> usize {
802162a8: 11 71        	addi	sp, sp, -0x100
802162aa: 86 fd        	sd	ra, 0xf8(sp)
802162ac: a2 f9        	sd	s0, 0xf0(sp)
802162ae: 00 02        	addi	s0, sp, 0x100
802162b0: 23 3c b4 f0  	sd	a1, -0xe8(s0)
802162b4: aa 85        	mv	a1, a0
802162b6: 03 35 84 f1  	ld	a0, -0xe8(s0)
802162ba: 23 30 b4 fa  	sd	a1, -0x60(s0)
;         for pbuffer in buf.buffers.iter(){
802162be: 97 f0 ff ff  	auipc	ra, 0xfffff
802162c2: e7 80 e0 c0  	jalr	-0x3f2(ra) <ekernel+0xffcc7ecc>
802162c6: 97 00 ff ff  	auipc	ra, 0xffff0
802162ca: e7 80 e0 af  	jalr	-0x502(ra) <ekernel+0xffcb8dc4>
802162ce: 97 50 ff ff  	auipc	ra, 0xffff5
802162d2: e7 80 e0 64  	jalr	0x64e(ra) <ekernel+0xffcbe91c>
802162d6: 23 30 a4 f2  	sd	a0, -0xe0(s0)
802162da: 23 34 b4 f2  	sd	a1, -0xd8(s0)
802162de: 09 a0        	j	0x802162e0 <_ZN70_$LT$os..filesystem..stdio..Stdout$u20$as$u20$os..filesystem..File$GT$5write17hbf0b128016dd70f8E+0x38>
802162e0: 13 05 04 f2  	addi	a0, s0, -0xe0
;         for pbuffer in buf.buffers.iter(){
802162e4: 97 60 ff ff  	auipc	ra, 0xffff6
802162e8: e7 80 c0 92  	jalr	-0x6d4(ra) <ekernel+0xffcbec10>
802162ec: 23 38 a4 f2  	sd	a0, -0xd0(s0)
802162f0: 03 35 04 f3  	ld	a0, -0xd0(s0)
802162f4: 1d e5        	bnez	a0, 0x80216322 <_ZN70_$LT$os..filesystem..stdio..Stdout$u20$as$u20$os..filesystem..File$GT$5write17hbf0b128016dd70f8E+0x7a>
802162f6: 09 a0        	j	0x802162f8 <_ZN70_$LT$os..filesystem..stdio..Stdout$u20$as$u20$os..filesystem..File$GT$5write17hbf0b128016dd70f8E+0x50>
802162f8: 03 35 84 f1  	ld	a0, -0xe8(s0)
;         buf.len()
802162fc: 97 e0 fe ff  	auipc	ra, 0xfffee
80216300: e7 80 a0 db  	jalr	-0x246(ra) <ekernel+0xffcb70b6>
80216304: aa 85        	mv	a1, a0
80216306: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021630a: 23 38 b4 f0  	sd	a1, -0xf0(s0)
;     }
8021630e: 97 20 ff ff  	auipc	ra, 0xffff2
80216312: e7 80 40 b4  	jalr	-0x4bc(ra) <ekernel+0xffcbae52>
80216316: 03 35 04 f1  	ld	a0, -0xf0(s0)
8021631a: ee 70        	ld	ra, 0xf8(sp)
8021631c: 4e 74        	ld	s0, 0xf0(sp)
8021631e: 11 61        	addi	sp, sp, 0x100
80216320: 82 80        	ret
;         for pbuffer in buf.buffers.iter(){
80216322: 03 35 04 f3  	ld	a0, -0xd0(s0)
80216326: 23 34 a4 fa  	sd	a0, -0x58(s0)
;             let str = core::str::from_utf8(*pbuffer).unwrap();
8021632a: 0c 61        	ld	a1, 0x0(a0)
8021632c: 10 65        	ld	a2, 0x8(a0)
8021632e: 13 05 84 f4  	addi	a0, s0, -0xb8
80216332: 97 a0 01 00  	auipc	ra, 0x1a
80216336: e7 80 c0 74  	jalr	0x74c(ra) <_ZN4core3str8converts9from_utf817ha40bb0c757063278E>
;         match self {
8021633a: 03 35 84 f4  	ld	a0, -0xb8(s0)
8021633e: 15 cd        	beqz	a0, 0x8021637a <.Lpcrel_hi11+0x18>
80216340: 09 a0        	j	0x80216342 <_ZN70_$LT$os..filesystem..stdio..Stdout$u20$as$u20$os..filesystem..File$GT$5write17hbf0b128016dd70f8E+0x9a>
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
80216342: 03 35 84 f5  	ld	a0, -0xa8(s0)
80216346: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021634a: 03 35 04 f5  	ld	a0, -0xb0(s0)
8021634e: 23 38 a4 fc  	sd	a0, -0x30(s0)

0000000080216352 <.Lpcrel_hi9>:
80216352: 17 05 02 00  	auipc	a0, 0x20
80216356: 13 05 e5 37  	addi	a0, a0, 0x37e

000000008021635a <.Lpcrel_hi10>:
8021635a: 97 05 02 00  	auipc	a1, 0x20
8021635e: 93 86 65 3a  	addi	a3, a1, 0x3a6

0000000080216362 <.Lpcrel_hi11>:
80216362: 97 05 02 00  	auipc	a1, 0x20
80216366: 13 87 e5 49  	addi	a4, a1, 0x49e
8021636a: 93 05 b0 02  	li	a1, 0x2b
8021636e: 13 06 04 fd  	addi	a2, s0, -0x30
80216372: 97 b0 01 00  	auipc	ra, 0x1b
80216376: e7 80 c0 9a  	jalr	-0x654(ra) <_ZN4core6result13unwrap_failed17hd7dd91774099986cE>
;             Ok(t) => t,
8021637a: 83 35 04 f5  	ld	a1, -0xb0(s0)
8021637e: 03 35 84 f5  	ld	a0, -0xa8(s0)
80216382: 23 30 b4 fe  	sd	a1, -0x20(s0)
80216386: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             let str = core::str::from_utf8(*pbuffer).unwrap();
8021638a: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021638e: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80216392: 93 05 84 f3  	addi	a1, s0, -0xc8
80216396: 23 30 b4 fc  	sd	a1, -0x40(s0)

000000008021639a <.Lpcrel_hi12>:
;         Self::new(x, Display::fmt)
8021639a: 17 55 00 00  	auipc	a0, 0x5
8021639e: 13 05 a5 7a  	addi	a0, a0, 0x7aa
802163a2: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
802163a6: 23 38 b4 fa  	sd	a1, -0x50(s0)
802163aa: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
802163ae: 83 35 04 fb  	ld	a1, -0x50(s0)
802163b2: 03 35 84 fb  	ld	a0, -0x48(s0)
;             print!("{}",str);
802163b6: 23 38 b4 f8  	sd	a1, -0x70(s0)
802163ba: 23 3c a4 f8  	sd	a0, -0x68(s0)

00000000802163be <.Lpcrel_hi13>:
802163be: 17 05 02 00  	auipc	a0, 0x20
802163c2: 93 05 a5 45  	addi	a1, a0, 0x45a
802163c6: 13 05 04 f6  	addi	a0, s0, -0xa0
802163ca: 23 34 a4 f0  	sd	a0, -0xf8(s0)
802163ce: 93 06 04 f9  	addi	a3, s0, -0x70
802163d2: 05 47        	li	a4, 0x1
802163d4: 3a 86        	mv	a2, a4
802163d6: 97 10 ff ff  	auipc	ra, 0xffff1
802163da: e7 80 20 f1  	jalr	-0xee(ra) <ekernel+0xffcba2e8>
802163de: 03 35 84 f0  	ld	a0, -0xf8(s0)
802163e2: 97 20 00 00  	auipc	ra, 0x2
802163e6: e7 80 a0 aa  	jalr	-0x556(ra) <_ZN2os7console5print17h042fcde166d682deE>
802163ea: dd bd        	j	0x802162e0 <_ZN70_$LT$os..filesystem..stdio..Stdout$u20$as$u20$os..filesystem..File$GT$5write17hbf0b128016dd70f8E+0x38>

00000000802163ec <_ZN5riscv8register6scause4read17h6105b19ed50bbd02E>:
;         pub fn read() -> $register {
802163ec: 01 11        	addi	sp, sp, -0x20
802163ee: 06 ec        	sd	ra, 0x18(sp)
802163f0: 22 e8        	sd	s0, 0x10(sp)
802163f2: 00 10        	addi	s0, sp, 0x20
;                 bits: unsafe { _read() },
802163f4: 97 00 00 00  	auipc	ra, 0x0
802163f8: e7 80 80 01  	jalr	0x18(ra) <_ZN5riscv8register6scause5_read17h65bd13c2ef577e03E>
;             $register {
802163fc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         }
80216400: 03 35 84 fe  	ld	a0, -0x18(s0)
80216404: e2 60        	ld	ra, 0x18(sp)
80216406: 42 64        	ld	s0, 0x10(sp)
80216408: 05 61        	addi	sp, sp, 0x20
8021640a: 82 80        	ret

000000008021640c <_ZN5riscv8register6scause5_read17h65bd13c2ef577e03E>:
;         unsafe fn _read() -> usize {
8021640c: 01 11        	addi	sp, sp, -0x20
8021640e: 06 ec        	sd	ra, 0x18(sp)
80216410: 22 e8        	sd	s0, 0x10(sp)
80216412: 00 10        	addi	s0, sp, 0x20
;                     core::arch::asm!("csrrs {0}, {1}, x0", out(reg) r, const $csr_number);
80216414: 73 25 20 14  	csrr	a0, scause
80216418: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     r
8021641c: 03 35 84 fe  	ld	a0, -0x18(s0)
80216420: e2 60        	ld	ra, 0x18(sp)
80216422: 42 64        	ld	s0, 0x10(sp)
;         }
80216424: 05 61        	addi	sp, sp, 0x20
80216426: 82 80        	ret

0000000080216428 <_ZN5riscv8register6scause6Scause12is_interrupt17h978e4dd2930cd67dE>:
;     pub fn is_interrupt(&self) -> bool {
80216428: 79 71        	addi	sp, sp, -0x30
8021642a: 06 f4        	sd	ra, 0x28(sp)
8021642c: 22 f0        	sd	s0, 0x20(sp)
8021642e: 00 18        	addi	s0, sp, 0x30
80216430: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216434: 23 34 a4 fe  	sd	a0, -0x18(s0)
80216438: 13 05 00 04  	li	a0, 0x40
8021643c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80216440: 01 45        	li	a0, 0x0
;         self.bits.get_bit(size_of::<usize>() * 8 - 1)
80216442: 11 e9        	bnez	a0, 0x80216456 <.Lpcrel_hi0>
80216444: 09 a0        	j	0x80216446 <_ZN5riscv8register6scause6Scause12is_interrupt17h978e4dd2930cd67dE+0x1e>
80216446: 03 35 04 fe  	ld	a0, -0x20(s0)
;         self.bits.get_bit(size_of::<usize>() * 8 - 1)
8021644a: 93 05 f5 ff  	addi	a1, a0, -0x1
8021644e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80216452: 21 c1        	beqz	a0, 0x80216492 <.Lpcrel_hi3>
80216454: 39 a8        	j	0x80216472 <.Lpcrel_hi1+0x14>

0000000080216456 <.Lpcrel_hi0>:
80216456: 17 05 02 00  	auipc	a0, 0x20
8021645a: 13 05 a5 51  	addi	a0, a0, 0x51a

000000008021645e <.Lpcrel_hi1>:
8021645e: 97 05 02 00  	auipc	a1, 0x20
80216462: 13 86 a5 4f  	addi	a2, a1, 0x4fa
80216466: 93 05 10 02  	li	a1, 0x21
8021646a: 97 a0 01 00  	auipc	ra, 0x1a
8021646e: e7 80 e0 da  	jalr	-0x252(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80216472: 83 35 04 fd  	ld	a1, -0x30(s0)
80216476: 03 35 84 fd  	ld	a0, -0x28(s0)

000000008021647a <.Lpcrel_hi2>:
;         self.bits.get_bit(size_of::<usize>() * 8 - 1)
8021647a: 17 06 02 00  	auipc	a2, 0x20
8021647e: 13 06 e6 54  	addi	a2, a2, 0x54e
80216482: 97 f0 ff ff  	auipc	ra, 0xfffff
80216486: e7 80 00 f8  	jalr	-0x80(ra) <ekernel+0xffcc8402>
8021648a: a2 70        	ld	ra, 0x28(sp)
8021648c: 02 74        	ld	s0, 0x20(sp)
;     }
8021648e: 45 61        	addi	sp, sp, 0x30
80216490: 82 80        	ret

0000000080216492 <.Lpcrel_hi3>:
;         self.bits.get_bit(size_of::<usize>() * 8 - 1)
80216492: 17 05 02 00  	auipc	a0, 0x20
80216496: 13 05 e5 50  	addi	a0, a0, 0x50e

000000008021649a <.Lpcrel_hi4>:
8021649a: 97 05 02 00  	auipc	a1, 0x20
8021649e: 13 86 e5 4b  	addi	a2, a1, 0x4be
802164a2: 93 05 10 02  	li	a1, 0x21
802164a6: 97 a0 01 00  	auipc	ra, 0x1a
802164aa: e7 80 20 d7  	jalr	-0x28e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802164ae <_ZN5riscv8register6scause6Scause5cause17h08038014cf4d93b4E>:
;     pub fn cause(&self) -> Trap {
802164ae: 79 71        	addi	sp, sp, -0x30
802164b0: 06 f4        	sd	ra, 0x28(sp)
802164b2: 22 f0        	sd	s0, 0x20(sp)
802164b4: 00 18        	addi	s0, sp, 0x30
802164b6: 23 3c a4 fc  	sd	a0, -0x28(s0)
802164ba: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.is_interrupt() {
802164be: 97 00 00 00  	auipc	ra, 0x0
802164c2: e7 80 a0 f6  	jalr	-0x96(ra) <_ZN5riscv8register6scause6Scause12is_interrupt17h978e4dd2930cd67dE>
802164c6: 15 e1        	bnez	a0, 0x802164ea <_ZN5riscv8register6scause6Scause5cause17h08038014cf4d93b4E+0x3c>
802164c8: 09 a0        	j	0x802164ca <_ZN5riscv8register6scause6Scause5cause17h08038014cf4d93b4E+0x1c>
802164ca: 03 35 84 fd  	ld	a0, -0x28(s0)
;             Trap::Exception(Exception::from(self.code()))
802164ce: 97 70 01 00  	auipc	ra, 0x17
802164d2: e7 80 20 b3  	jalr	-0x4ce(ra) <_ZN5riscv8register6scause6Scause4code17h04c3ac167dda56e7E>
802164d6: 97 70 01 00  	auipc	ra, 0x17
802164da: e7 80 80 a6  	jalr	-0x598(ra) <_ZN5riscv8register6scause9Exception4from17hb490ad6c623c9c7dE>
802164de: a3 03 a4 fe  	sb	a0, -0x19(s0)
802164e2: 05 45        	li	a0, 0x1
802164e4: 23 03 a4 fe  	sb	a0, -0x1a(s0)
;         if self.is_interrupt() {
802164e8: 0d a0        	j	0x8021650a <_ZN5riscv8register6scause6Scause5cause17h08038014cf4d93b4E+0x5c>
802164ea: 03 35 84 fd  	ld	a0, -0x28(s0)
;             Trap::Interrupt(Interrupt::from(self.code()))
802164ee: 97 70 01 00  	auipc	ra, 0x17
802164f2: e7 80 20 b1  	jalr	-0x4ee(ra) <_ZN5riscv8register6scause6Scause4code17h04c3ac167dda56e7E>
802164f6: 97 70 01 00  	auipc	ra, 0x17
802164fa: e7 80 e0 9b  	jalr	-0x642(ra) <_ZN5riscv8register6scause9Interrupt4from17h835f47cffa852076E>
802164fe: a3 03 a4 fe  	sb	a0, -0x19(s0)
80216502: 01 45        	li	a0, 0x0
80216504: 23 03 a4 fe  	sb	a0, -0x1a(s0)
;         if self.is_interrupt() {
80216508: 09 a0        	j	0x8021650a <_ZN5riscv8register6scause6Scause5cause17h08038014cf4d93b4E+0x5c>
;     }
8021650a: 03 45 64 fe  	lbu	a0, -0x1a(s0)
8021650e: 83 45 74 fe  	lbu	a1, -0x19(s0)
80216512: a2 70        	ld	ra, 0x28(sp)
80216514: 02 74        	ld	s0, 0x20(sp)
80216516: 45 61        	addi	sp, sp, 0x30
80216518: 82 80        	ret

000000008021651a <_ZN66_$LT$riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfb4b9a8756a6cc3E>:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021651a: 5d 71        	addi	sp, sp, -0x50
8021651c: 86 e4        	sd	ra, 0x48(sp)
8021651e: a2 e0        	sd	s0, 0x40(sp)
80216520: 80 08        	addi	s0, sp, 0x50
80216522: 23 3c b4 fa  	sd	a1, -0x48(s0)
80216526: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021652a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021652e: 23 34 b4 fe  	sd	a1, -0x18(s0)
80216532: 03 45 05 00  	lbu	a0, 0x0(a0)
80216536: 05 89        	andi	a0, a0, 0x1
80216538: 1d e9        	bnez	a0, 0x8021656e <.Lpcrel_hi6+0x1c>
8021653a: 09 a0        	j	0x8021653c <_ZN66_$LT$riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17hdfb4b9a8756a6cc3E+0x22>
8021653c: 03 35 84 fb  	ld	a0, -0x48(s0)
80216540: 83 35 04 fc  	ld	a1, -0x40(s0)
;     Interrupt(Interrupt),
80216544: 85 05        	addi	a1, a1, 0x1
80216546: 23 38 b4 fc  	sd	a1, -0x30(s0)

000000008021654a <.Lpcrel_hi5>:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021654a: 97 05 02 00  	auipc	a1, 0x20
8021654e: 93 85 65 49  	addi	a1, a1, 0x496

0000000080216552 <.Lpcrel_hi6>:
80216552: 17 06 02 00  	auipc	a2, 0x20
80216556: 13 07 e6 49  	addi	a4, a2, 0x49e
8021655a: 25 46        	li	a2, 0x9
8021655c: 93 06 04 fd  	addi	a3, s0, -0x30
80216560: 97 90 01 00  	auipc	ra, 0x19
80216564: e7 80 40 66  	jalr	0x664(ra) <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>
80216568: a3 07 a4 fc  	sb	a0, -0x31(s0)
8021656c: 15 a8        	j	0x802165a0 <.Lpcrel_hi8+0x1c>
8021656e: 03 35 84 fb  	ld	a0, -0x48(s0)
80216572: 83 35 04 fc  	ld	a1, -0x40(s0)
;     Exception(Exception),
80216576: 85 05        	addi	a1, a1, 0x1
80216578: 23 3c b4 fc  	sd	a1, -0x28(s0)

000000008021657c <.Lpcrel_hi7>:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021657c: 97 05 02 00  	auipc	a1, 0x20
80216580: 93 85 45 49  	addi	a1, a1, 0x494

0000000080216584 <.Lpcrel_hi8>:
80216584: 17 06 02 00  	auipc	a2, 0x20
80216588: 13 07 c6 49  	addi	a4, a2, 0x49c
8021658c: 25 46        	li	a2, 0x9
8021658e: 93 06 84 fd  	addi	a3, s0, -0x28
80216592: 97 90 01 00  	auipc	ra, 0x19
80216596: e7 80 20 63  	jalr	0x632(ra) <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>
8021659a: a3 07 a4 fc  	sb	a0, -0x31(s0)
8021659e: 09 a0        	j	0x802165a0 <.Lpcrel_hi8+0x1c>
802165a0: 03 45 f4 fc  	lbu	a0, -0x31(s0)
802165a4: a6 60        	ld	ra, 0x48(sp)
802165a6: 06 64        	ld	s0, 0x40(sp)
802165a8: 61 61        	addi	sp, sp, 0x50
802165aa: 82 80        	ret

00000000802165ac <_ZN71_$LT$riscv..register..scause..Exception$u20$as$u20$core..fmt..Debug$GT$3fmt17h449f58996bbf4995E>:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
802165ac: 39 71        	addi	sp, sp, -0x40
802165ae: 06 fc        	sd	ra, 0x38(sp)
802165b0: 22 f8        	sd	s0, 0x30(sp)
802165b2: 80 00        	addi	s0, sp, 0x40
802165b4: 23 30 b4 fc  	sd	a1, -0x40(s0)
802165b8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802165bc: 23 34 b4 fe  	sd	a1, -0x18(s0)
802165c0: 03 45 05 00  	lbu	a0, 0x0(a0)
802165c4: 23 34 a4 fc  	sd	a0, -0x38(s0)
802165c8: 03 35 84 fc  	ld	a0, -0x38(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
802165cc: 0e 05        	slli	a0, a0, 0x3

00000000802165ce <.Lpcrel_hi9>:
802165ce: 97 05 02 00  	auipc	a1, 0x20
802165d2: 93 85 a5 25  	addi	a1, a1, 0x25a
802165d6: 2e 95        	add	a0, a0, a1
802165d8: 08 61        	ld	a0, 0x0(a0)
802165da: 02 85        	jr	a0
802165dc: 00 00        	unimp

00000000802165de <.Lpcrel_hi10>:
802165de: 17 05 02 00  	auipc	a0, 0x20
802165e2: 13 05 25 46  	addi	a0, a0, 0x462
802165e6: 23 38 a4 fc  	sd	a0, -0x30(s0)
802165ea: 55 45        	li	a0, 0x15
802165ec: 23 3c a4 fc  	sd	a0, -0x28(s0)
802165f0: 89 a2        	j	0x80216732 <.Lpcrel_hi26+0x14>

00000000802165f2 <.Lpcrel_hi11>:
802165f2: 17 d5 01 00  	auipc	a0, 0x1d
802165f6: 13 05 e5 c4  	addi	a0, a0, -0x3b2
802165fa: 23 38 a4 fc  	sd	a0, -0x30(s0)
802165fe: 41 45        	li	a0, 0x10
80216600: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216604: 3d a2        	j	0x80216732 <.Lpcrel_hi26+0x14>

0000000080216606 <.Lpcrel_hi12>:
80216606: 17 05 02 00  	auipc	a0, 0x20
8021660a: 13 05 f5 44  	addi	a0, a0, 0x44f
8021660e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80216612: 49 45        	li	a0, 0x12
80216614: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216618: 29 aa        	j	0x80216732 <.Lpcrel_hi26+0x14>

000000008021661a <.Lpcrel_hi13>:
8021661a: 17 05 02 00  	auipc	a0, 0x20
8021661e: 13 05 d5 44  	addi	a0, a0, 0x44d
80216622: 23 38 a4 fc  	sd	a0, -0x30(s0)
80216626: 29 45        	li	a0, 0xa
80216628: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021662c: 19 a2        	j	0x80216732 <.Lpcrel_hi26+0x14>

000000008021662e <.Lpcrel_hi14>:
8021662e: 17 05 02 00  	auipc	a0, 0x20
80216632: 13 05 35 44  	addi	a0, a0, 0x443
80216636: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021663a: 25 45        	li	a0, 0x9
8021663c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216640: cd a8        	j	0x80216732 <.Lpcrel_hi26+0x14>

0000000080216642 <.Lpcrel_hi15>:
80216642: 17 05 02 00  	auipc	a0, 0x20
80216646: 13 05 85 43  	addi	a0, a0, 0x438
8021664a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021664e: 3d 45        	li	a0, 0xf
80216650: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216654: f9 a8        	j	0x80216732 <.Lpcrel_hi26+0x14>

0000000080216656 <.Lpcrel_hi16>:
80216656: 17 05 02 00  	auipc	a0, 0x20
8021665a: 13 05 35 43  	addi	a0, a0, 0x433
8021665e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80216662: 29 45        	li	a0, 0xa
80216664: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216668: e9 a0        	j	0x80216732 <.Lpcrel_hi26+0x14>

000000008021666a <.Lpcrel_hi17>:
8021666a: 17 05 02 00  	auipc	a0, 0x20
8021666e: 13 05 95 42  	addi	a0, a0, 0x429
80216672: 23 38 a4 fc  	sd	a0, -0x30(s0)
80216676: 2d 45        	li	a0, 0xb
80216678: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021667c: 5d a8        	j	0x80216732 <.Lpcrel_hi26+0x14>

000000008021667e <.Lpcrel_hi18>:
8021667e: 17 05 02 00  	auipc	a0, 0x20
80216682: 13 05 05 42  	addi	a0, a0, 0x420
80216686: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021668a: 61 45        	li	a0, 0x18
8021668c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216690: 4d a0        	j	0x80216732 <.Lpcrel_hi26+0x14>

0000000080216692 <.Lpcrel_hi19>:
80216692: 17 05 02 00  	auipc	a0, 0x20
80216696: 13 05 45 42  	addi	a0, a0, 0x424
8021669a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021669e: 51 45        	li	a0, 0x14
802166a0: 23 3c a4 fc  	sd	a0, -0x28(s0)
802166a4: 79 a0        	j	0x80216732 <.Lpcrel_hi26+0x14>

00000000802166a6 <.Lpcrel_hi20>:
802166a6: 17 05 02 00  	auipc	a0, 0x20
802166aa: 13 05 45 42  	addi	a0, a0, 0x424
802166ae: 23 38 a4 fc  	sd	a0, -0x30(s0)
802166b2: 35 45        	li	a0, 0xd
802166b4: 23 3c a4 fc  	sd	a0, -0x28(s0)
802166b8: ad a8        	j	0x80216732 <.Lpcrel_hi26+0x14>

00000000802166ba <.Lpcrel_hi21>:
802166ba: 17 05 02 00  	auipc	a0, 0x20
802166be: 13 05 d5 41  	addi	a0, a0, 0x41d
802166c2: 23 38 a4 fc  	sd	a0, -0x30(s0)
802166c6: 39 45        	li	a0, 0xe
802166c8: 23 3c a4 fc  	sd	a0, -0x28(s0)
802166cc: 9d a0        	j	0x80216732 <.Lpcrel_hi26+0x14>

00000000802166ce <.Lpcrel_hi22>:
802166ce: 17 05 02 00  	auipc	a0, 0x20
802166d2: 13 05 75 41  	addi	a0, a0, 0x417
802166d6: 23 38 a4 fc  	sd	a0, -0x30(s0)
802166da: 65 45        	li	a0, 0x19
802166dc: 23 3c a4 fc  	sd	a0, -0x28(s0)
802166e0: 89 a8        	j	0x80216732 <.Lpcrel_hi26+0x14>

00000000802166e2 <.Lpcrel_hi23>:
802166e2: 17 05 02 00  	auipc	a0, 0x20
802166e6: 13 05 c5 41  	addi	a0, a0, 0x41c
802166ea: 23 38 a4 fc  	sd	a0, -0x30(s0)
802166ee: 49 45        	li	a0, 0x12
802166f0: 23 3c a4 fc  	sd	a0, -0x28(s0)
802166f4: 3d a8        	j	0x80216732 <.Lpcrel_hi26+0x14>

00000000802166f6 <.Lpcrel_hi24>:
802166f6: 17 05 02 00  	auipc	a0, 0x20
802166fa: 13 05 a5 41  	addi	a0, a0, 0x41a
802166fe: 23 38 a4 fc  	sd	a0, -0x30(s0)
80216702: 49 45        	li	a0, 0x12
80216704: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216708: 2d a0        	j	0x80216732 <.Lpcrel_hi26+0x14>

000000008021670a <.Lpcrel_hi25>:
8021670a: 17 05 02 00  	auipc	a0, 0x20
8021670e: 13 05 85 41  	addi	a0, a0, 0x418
80216712: 23 38 a4 fc  	sd	a0, -0x30(s0)
80216716: 4d 45        	li	a0, 0x13
80216718: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021671c: 19 a8        	j	0x80216732 <.Lpcrel_hi26+0x14>

000000008021671e <.Lpcrel_hi26>:
8021671e: 17 05 02 00  	auipc	a0, 0x20
80216722: 13 05 75 41  	addi	a0, a0, 0x417
80216726: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021672a: 1d 45        	li	a0, 0x7
8021672c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216730: 09 a0        	j	0x80216732 <.Lpcrel_hi26+0x14>
80216732: 03 35 04 fc  	ld	a0, -0x40(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
80216736: 83 35 04 fd  	ld	a1, -0x30(s0)
8021673a: 03 36 84 fd  	ld	a2, -0x28(s0)
8021673e: 97 90 01 00  	auipc	ra, 0x19
80216742: e7 80 80 2f  	jalr	0x2f8(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
80216746: e2 70        	ld	ra, 0x38(sp)
80216748: 42 74        	ld	s0, 0x30(sp)
8021674a: 21 61        	addi	sp, sp, 0x40
8021674c: 82 80        	ret

000000008021674e <_ZN71_$LT$riscv..register..scause..Interrupt$u20$as$u20$core..fmt..Debug$GT$3fmt17h18a57191a583a360E>:
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021674e: 39 71        	addi	sp, sp, -0x40
80216750: 06 fc        	sd	ra, 0x38(sp)
80216752: 22 f8        	sd	s0, 0x30(sp)
80216754: 80 00        	addi	s0, sp, 0x40
80216756: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021675a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021675e: 23 34 b4 fe  	sd	a1, -0x18(s0)
80216762: 03 45 05 00  	lbu	a0, 0x0(a0)
80216766: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021676a: 03 35 84 fc  	ld	a0, -0x38(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021676e: 0e 05        	slli	a0, a0, 0x3

0000000080216770 <.Lpcrel_hi27>:
80216770: 97 05 02 00  	auipc	a1, 0x20
80216774: 93 85 05 14  	addi	a1, a1, 0x140
80216778: 2e 95        	add	a0, a0, a1
8021677a: 08 61        	ld	a0, 0x0(a0)
8021677c: 02 85        	jr	a0
8021677e: 00 00        	unimp

0000000080216780 <.Lpcrel_hi28>:
80216780: 17 d5 01 00  	auipc	a0, 0x1d
80216784: 13 05 05 c2  	addi	a0, a0, -0x3e0
80216788: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021678c: 21 45        	li	a0, 0x8
8021678e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216792: 5d a8        	j	0x80216848 <.Lpcrel_hi37+0x14>

0000000080216794 <.Lpcrel_hi29>:
80216794: 17 05 02 00  	auipc	a0, 0x20
80216798: 13 05 85 3a  	addi	a0, a0, 0x3a8
8021679c: 23 38 a4 fc  	sd	a0, -0x30(s0)
802167a0: 55 45        	li	a0, 0x15
802167a2: 23 3c a4 fc  	sd	a0, -0x28(s0)
802167a6: 4d a0        	j	0x80216848 <.Lpcrel_hi37+0x14>

00000000802167a8 <.Lpcrel_hi30>:
802167a8: 17 05 02 00  	auipc	a0, 0x20
802167ac: 13 05 95 3a  	addi	a0, a0, 0x3a9
802167b0: 23 38 a4 fc  	sd	a0, -0x30(s0)
802167b4: 39 45        	li	a0, 0xe
802167b6: 23 3c a4 fc  	sd	a0, -0x28(s0)
802167ba: 79 a0        	j	0x80216848 <.Lpcrel_hi37+0x14>

00000000802167bc <.Lpcrel_hi31>:
802167bc: 17 05 02 00  	auipc	a0, 0x20
802167c0: 13 05 35 3a  	addi	a0, a0, 0x3a3
802167c4: 23 38 a4 fc  	sd	a0, -0x30(s0)
802167c8: 25 45        	li	a0, 0x9
802167ca: 23 3c a4 fc  	sd	a0, -0x28(s0)
802167ce: ad a8        	j	0x80216848 <.Lpcrel_hi37+0x14>

00000000802167d0 <.Lpcrel_hi32>:
802167d0: 17 05 02 00  	auipc	a0, 0x20
802167d4: 13 05 85 39  	addi	a0, a0, 0x398
802167d8: 23 38 a4 fc  	sd	a0, -0x30(s0)
802167dc: 59 45        	li	a0, 0x16
802167de: 23 3c a4 fc  	sd	a0, -0x28(s0)
802167e2: 9d a0        	j	0x80216848 <.Lpcrel_hi37+0x14>

00000000802167e4 <.Lpcrel_hi33>:
802167e4: 17 05 02 00  	auipc	a0, 0x20
802167e8: 13 05 a5 39  	addi	a0, a0, 0x39a
802167ec: 23 38 a4 fc  	sd	a0, -0x30(s0)
802167f0: 3d 45        	li	a0, 0xf
802167f2: 23 3c a4 fc  	sd	a0, -0x28(s0)
802167f6: 89 a8        	j	0x80216848 <.Lpcrel_hi37+0x14>

00000000802167f8 <.Lpcrel_hi34>:
802167f8: 17 05 02 00  	auipc	a0, 0x20
802167fc: 13 05 55 39  	addi	a0, a0, 0x395
80216800: 23 38 a4 fc  	sd	a0, -0x30(s0)
80216804: 31 45        	li	a0, 0xc
80216806: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021680a: 3d a8        	j	0x80216848 <.Lpcrel_hi37+0x14>

000000008021680c <.Lpcrel_hi35>:
8021680c: 17 05 02 00  	auipc	a0, 0x20
80216810: 13 05 d5 38  	addi	a0, a0, 0x38d
80216814: 23 38 a4 fc  	sd	a0, -0x30(s0)
80216818: 65 45        	li	a0, 0x19
8021681a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021681e: 2d a0        	j	0x80216848 <.Lpcrel_hi37+0x14>

0000000080216820 <.Lpcrel_hi36>:
80216820: 17 05 02 00  	auipc	a0, 0x20
80216824: 13 05 25 39  	addi	a0, a0, 0x392
80216828: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021682c: 49 45        	li	a0, 0x12
8021682e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216832: 19 a8        	j	0x80216848 <.Lpcrel_hi37+0x14>

0000000080216834 <.Lpcrel_hi37>:
80216834: 17 05 02 00  	auipc	a0, 0x20
80216838: 13 05 15 30  	addi	a0, a0, 0x301
8021683c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80216840: 1d 45        	li	a0, 0x7
80216842: 23 3c a4 fc  	sd	a0, -0x28(s0)
80216846: 09 a0        	j	0x80216848 <.Lpcrel_hi37+0x14>
80216848: 03 35 04 fc  	ld	a0, -0x40(s0)
; #[derive(Copy, Clone, Debug, Eq, PartialEq)]
8021684c: 83 35 04 fd  	ld	a1, -0x30(s0)
80216850: 03 36 84 fd  	ld	a2, -0x28(s0)
80216854: 97 90 01 00  	auipc	ra, 0x19
80216858: e7 80 20 1e  	jalr	0x1e2(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021685c: e2 70        	ld	ra, 0x38(sp)
8021685e: 42 74        	ld	s0, 0x30(sp)
80216860: 21 61        	addi	sp, sp, 0x40
80216862: 82 80        	ret

0000000080216864 <_ZN5riscv3asm6ebreak17hd58c0782ee636f65E>:
;         pub unsafe fn $fnname() {
80216864: 41 11        	addi	sp, sp, -0x10
80216866: 06 e4        	sd	ra, 0x8(sp)
80216868: 22 e0        	sd	s0, 0x0(sp)
8021686a: 00 08        	addi	s0, sp, 0x10
;                 () => core::arch::asm!($asm),
8021686c: 02 90        	ebreak
8021686e: a2 60        	ld	ra, 0x8(sp)
80216870: 02 64        	ld	s0, 0x0(sp)
;         }
80216872: 41 01        	addi	sp, sp, 0x10
80216874: 82 80        	ret

0000000080216876 <_ZN14virtio_drivers3blk18VirtIOBlk$LT$H$GT$10read_block17he9edee33b433deaaE>:
;     pub fn read_block(&mut self, block_id: usize, buf: &mut [u8]) -> Result {
80216876: 49 71        	addi	sp, sp, -0x170
80216878: 86 f6        	sd	ra, 0x168(sp)
8021687a: a2 f2        	sd	s0, 0x160(sp)
8021687c: 80 1a        	addi	s0, sp, 0x170
8021687e: 23 34 d4 ea  	sd	a3, -0x158(s0)
80216882: 23 38 c4 ea  	sd	a2, -0x150(s0)
80216886: 23 3c b4 ea  	sd	a1, -0x148(s0)
8021688a: 23 30 a4 ec  	sd	a0, -0x140(s0)
8021688e: 23 30 a4 fa  	sd	a0, -0x60(s0)
80216892: 23 34 b4 fa  	sd	a1, -0x58(s0)
80216896: 23 38 c4 fa  	sd	a2, -0x50(s0)
8021689a: 23 3c d4 fa  	sd	a3, -0x48(s0)
;         assert_eq!(buf.len(), BLK_SIZE);
8021689e: 23 38 d4 ee  	sd	a3, -0x110(s0)
802168a2: 13 05 04 ef  	addi	a0, s0, -0x110
802168a6: 23 30 a4 ee  	sd	a0, -0x120(s0)

00000000802168aa <.Lpcrel_hi0>:
802168aa: 17 d5 01 00  	auipc	a0, 0x1d
802168ae: 13 05 e5 b6  	addi	a0, a0, -0x492
802168b2: 23 34 a4 ee  	sd	a0, -0x118(s0)
802168b6: 03 35 04 ee  	ld	a0, -0x120(s0)
802168ba: 23 34 a4 ec  	sd	a0, -0x138(s0)
802168be: 23 30 a4 fc  	sd	a0, -0x40(s0)
802168c2: 83 35 84 ee  	ld	a1, -0x118(s0)
802168c6: 23 38 b4 ec  	sd	a1, -0x130(s0)
802168ca: 23 34 b4 fc  	sd	a1, -0x38(s0)
802168ce: 08 61        	ld	a0, 0x0(a0)
802168d0: 8c 61        	ld	a1, 0x0(a1)
802168d2: 63 08 b5 02  	beq	a0, a1, 0x80216902 <.Lpcrel_hi1+0x14>
802168d6: 09 a0        	j	0x802168d8 <.Lpcrel_hi0+0x2e>
802168d8: 03 36 04 ed  	ld	a2, -0x130(s0)
802168dc: 83 35 84 ec  	ld	a1, -0x138(s0)
802168e0: 01 45        	li	a0, 0x0
;         assert_eq!(buf.len(), BLK_SIZE);
802168e2: a3 0f a4 ee  	sb	a0, -0x101(s0)
802168e6: 23 30 a4 f0  	sd	a0, -0x100(s0)
802168ea: 03 45 f4 ef  	lbu	a0, -0x101(s0)

00000000802168ee <.Lpcrel_hi1>:
802168ee: 97 06 02 00  	auipc	a3, 0x20
802168f2: 13 87 a6 32  	addi	a4, a3, 0x32a
802168f6: 93 06 04 f0  	addi	a3, s0, -0x100
802168fa: 97 70 01 00  	auipc	ra, 0x17
802168fe: e7 80 80 61  	jalr	0x618(ra) <_ZN4core9panicking13assert_failed17h770217dc7d738624E>
80216902: 03 35 84 eb  	ld	a0, -0x148(s0)
80216906: 81 45        	li	a1, 0x0
;             type_: ReqType::In,
80216908: 23 20 b4 f4  	sw	a1, -0xc0(s0)
;         let req = BlkReq {
8021690c: 03 26 04 f4  	lw	a2, -0xc0(s0)
80216910: 23 28 c4 f2  	sw	a2, -0xd0(s0)
80216914: 23 2a b4 f2  	sw	a1, -0xcc(s0)
80216918: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         let mut resp = BlkResp::default();
8021691c: 97 40 00 00  	auipc	ra, 0x4
80216920: e7 80 40 c3  	jalr	-0x3cc(ra) <_ZN71_$LT$virtio_drivers..blk..BlkResp$u20$as$u20$core..default..Default$GT$7default17hb9ba78d8adad68a9E>
80216924: aa 85        	mv	a1, a0
80216926: 03 35 04 ec  	ld	a0, -0x140(s0)
8021692a: a3 0b b4 fc  	sb	a1, -0x29(s0)
8021692e: 83 45 74 fd  	lbu	a1, -0x29(s0)
80216932: a3 03 b4 f4  	sb	a1, -0xb9(s0)
;         self.queue.add(&[req.as_buf()], &[buf, resp.as_buf_mut()])?;
80216936: 21 05        	addi	a0, a0, 0x8
80216938: 23 30 a4 ea  	sd	a0, -0x160(s0)
8021693c: 13 05 04 f3  	addi	a0, s0, -0xd0
80216940: 97 00 00 00  	auipc	ra, 0x0
80216944: e7 80 c0 7a  	jalr	0x7ac(ra) <_ZN14virtio_drivers5AsBuf6as_buf17h75f45f9be28787e4E>
80216948: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021694c: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80216950: 13 05 74 f4  	addi	a0, s0, -0xb9
80216954: 97 00 00 00  	auipc	ra, 0x0
80216958: e7 80 a0 77  	jalr	0x77a(ra) <_ZN14virtio_drivers5AsBuf10as_buf_mut17h4d8f6120cca1a596E>
8021695c: 03 37 04 eb  	ld	a4, -0x150(s0)
80216960: 83 36 84 ea  	ld	a3, -0x158(s0)
80216964: 2a 86        	mv	a2, a0
80216966: 03 35 04 ea  	ld	a0, -0x160(s0)
8021696a: 23 30 e4 f6  	sd	a4, -0xa0(s0)
8021696e: 23 34 d4 f6  	sd	a3, -0x98(s0)
80216972: 23 38 c4 f6  	sd	a2, -0x90(s0)
80216976: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021697a: 93 05 04 f5  	addi	a1, s0, -0xb0
8021697e: 05 46        	li	a2, 0x1
80216980: 93 06 04 f6  	addi	a3, s0, -0xa0
80216984: 09 47        	li	a4, 0x2
80216986: 97 30 ff ff  	auipc	ra, 0xffff3
8021698a: e7 80 e0 53  	jalr	0x53e(ra) <ekernel+0xffcbcec4>
8021698e: 23 2c a4 fc  	sw	a0, -0x28(s0)
80216992: 03 25 84 fd  	lw	a0, -0x28(s0)
80216996: 23 26 a4 f4  	sw	a0, -0xb4(s0)
8021699a: 03 15 e4 f4  	lh	a0, -0xb2(s0)
8021699e: 42 05        	slli	a0, a0, 0x10
802169a0: 83 55 c4 f4  	lhu	a1, -0xb4(s0)
802169a4: 4d 8d        	or	a0, a0, a1
802169a6: 97 b0 fe ff  	auipc	ra, 0xfffeb
802169aa: e7 80 00 a9  	jalr	-0x570(ra) <ekernel+0xffcb4436>
802169ae: 23 2e a4 fc  	sw	a0, -0x24(s0)
802169b2: 03 25 c4 fd  	lw	a0, -0x24(s0)
802169b6: 23 24 a4 f4  	sw	a0, -0xb8(s0)
802169ba: 03 45 84 f4  	lbu	a0, -0xb8(s0)
802169be: 05 89        	andi	a0, a0, 0x1
802169c0: 19 ed        	bnez	a0, 0x802169de <.Lpcrel_hi1+0xf0>
802169c2: 09 a0        	j	0x802169c4 <.Lpcrel_hi1+0xd6>
802169c4: 03 35 04 ec  	ld	a0, -0x140(s0)
;         self.queue.add(&[req.as_buf()], &[buf, resp.as_buf_mut()])?;
802169c8: 83 15 a4 f4  	lh	a1, -0xb6(s0)
802169cc: 23 11 b4 fe  	sh	a1, -0x1e(s0)
;         self.header.notify(0);
802169d0: 08 61        	ld	a0, 0x0(a0)
802169d2: 81 45        	li	a1, 0x0
802169d4: 97 40 00 00  	auipc	ra, 0x4
802169d8: e7 80 40 85  	jalr	-0x7ac(ra) <_ZN14virtio_drivers6header12VirtIOHeader6notify17h0213b16fad05b0e7E>
802169dc: 05 a0        	j	0x802169fc <.Lpcrel_hi2+0x16>
;         self.queue.add(&[req.as_buf()], &[buf, resp.as_buf_mut()])?;
802169de: 03 45 94 f4  	lbu	a0, -0xb7(s0)
802169e2: a3 07 a4 fe  	sb	a0, -0x11(s0)

00000000802169e6 <.Lpcrel_hi2>:
802169e6: 97 05 02 00  	auipc	a1, 0x20
802169ea: 93 85 25 26  	addi	a1, a1, 0x262
802169ee: 97 a0 fe ff  	auipc	ra, 0xfffea
802169f2: e7 80 80 7f  	jalr	0x7f8(ra) <ekernel+0xffcb41e6>
802169f6: a3 0f a4 ec  	sb	a0, -0x121(s0)
802169fa: 69 a8        	j	0x80216a94 <.Lpcrel_hi3+0x2e>
802169fc: 03 35 04 ec  	ld	a0, -0x140(s0)
;         while !self.queue.can_pop() {
80216a00: 21 05        	addi	a0, a0, 0x8
80216a02: 97 40 ff ff  	auipc	ra, 0xffff4
80216a06: e7 80 40 d1  	jalr	-0x2ec(ra) <ekernel+0xffcbd716>
80216a0a: 09 e5        	bnez	a0, 0x80216a14 <.Lpcrel_hi2+0x2e>
80216a0c: 09 a0        	j	0x80216a0e <.Lpcrel_hi2+0x28>
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80216a0e: 0f 00 00 01  	fence	w, 0
;             spin_loop();
80216a12: ed b7        	j	0x802169fc <.Lpcrel_hi2+0x16>
80216a14: 03 35 04 ec  	ld	a0, -0x140(s0)
;         self.queue.pop_used()?;
80216a18: 93 05 85 00  	addi	a1, a0, 0x8
80216a1c: 13 05 04 f9  	addi	a0, s0, -0x70
80216a20: 23 3c a4 e8  	sd	a0, -0x168(s0)
80216a24: 97 40 ff ff  	auipc	ra, 0xffff4
80216a28: e7 80 a0 d2  	jalr	-0x2d6(ra) <ekernel+0xffcbd74e>
80216a2c: 83 35 84 e9  	ld	a1, -0x168(s0)
80216a30: 13 05 44 f8  	addi	a0, s0, -0x7c
80216a34: 97 b0 fe ff  	auipc	ra, 0xfffeb
80216a38: e7 80 e0 8e  	jalr	-0x712(ra) <ekernel+0xffcb4322>
80216a3c: 03 45 44 f8  	lbu	a0, -0x7c(s0)
80216a40: 05 89        	andi	a0, a0, 0x1
80216a42: 11 ed        	bnez	a0, 0x80216a5e <.Lpcrel_hi2+0x78>
80216a44: 09 a0        	j	0x80216a46 <.Lpcrel_hi2+0x60>
80216a46: 83 15 84 f8  	lh	a1, -0x78(s0)
80216a4a: 03 25 c4 f8  	lw	a0, -0x74(s0)
80216a4e: 23 12 b4 fe  	sh	a1, -0x1c(s0)
80216a52: 23 24 a4 fe  	sw	a0, -0x18(s0)
;         match resp.status {
80216a56: 03 45 74 f4  	lbu	a0, -0xb9(s0)
80216a5a: 0d c1        	beqz	a0, 0x80216a7c <.Lpcrel_hi3+0x16>
80216a5c: 25 a0        	j	0x80216a84 <.Lpcrel_hi3+0x1e>
;         self.queue.pop_used()?;
80216a5e: 03 45 54 f8  	lbu	a0, -0x7b(s0)
80216a62: 23 07 a4 fe  	sb	a0, -0x12(s0)

0000000080216a66 <.Lpcrel_hi3>:
80216a66: 97 05 02 00  	auipc	a1, 0x20
80216a6a: 93 85 a5 1c  	addi	a1, a1, 0x1ca
80216a6e: 97 a0 fe ff  	auipc	ra, 0xfffea
80216a72: e7 80 80 77  	jalr	0x778(ra) <ekernel+0xffcb41e6>
80216a76: a3 0f a4 ec  	sb	a0, -0x121(s0)
80216a7a: 29 a8        	j	0x80216a94 <.Lpcrel_hi3+0x2e>
80216a7c: 19 45        	li	a0, 0x6
;             RespStatus::Ok => Ok(()),
80216a7e: a3 0f a4 ec  	sb	a0, -0x121(s0)
80216a82: 09 a8        	j	0x80216a94 <.Lpcrel_hi3+0x2e>
80216a84: 15 45        	li	a0, 0x5
;             _ => Err(Error::IoError),
80216a86: a3 0f a4 f8  	sb	a0, -0x61(s0)
80216a8a: 03 45 f4 f9  	lbu	a0, -0x61(s0)
80216a8e: a3 0f a4 ec  	sb	a0, -0x121(s0)
80216a92: 09 a0        	j	0x80216a94 <.Lpcrel_hi3+0x2e>
;     }
80216a94: 03 45 f4 ed  	lbu	a0, -0x121(s0)
80216a98: b6 70        	ld	ra, 0x168(sp)
80216a9a: 16 74        	ld	s0, 0x160(sp)
80216a9c: 75 61        	addi	sp, sp, 0x170
80216a9e: 82 80        	ret

0000000080216aa0 <_ZN14virtio_drivers3blk18VirtIOBlk$LT$H$GT$11write_block17heacd1fc041e80079E>:
;     pub fn write_block(&mut self, block_id: usize, buf: &[u8]) -> Result {
80216aa0: 49 71        	addi	sp, sp, -0x170
80216aa2: 86 f6        	sd	ra, 0x168(sp)
80216aa4: a2 f2        	sd	s0, 0x160(sp)
80216aa6: 80 1a        	addi	s0, sp, 0x170
80216aa8: 23 34 d4 ea  	sd	a3, -0x158(s0)
80216aac: 23 38 c4 ea  	sd	a2, -0x150(s0)
80216ab0: 23 3c b4 ea  	sd	a1, -0x148(s0)
80216ab4: 23 30 a4 ec  	sd	a0, -0x140(s0)
80216ab8: 23 30 a4 fa  	sd	a0, -0x60(s0)
80216abc: 23 34 b4 fa  	sd	a1, -0x58(s0)
80216ac0: 23 38 c4 fa  	sd	a2, -0x50(s0)
80216ac4: 23 3c d4 fa  	sd	a3, -0x48(s0)
;         assert_eq!(buf.len(), BLK_SIZE);
80216ac8: 23 38 d4 ee  	sd	a3, -0x110(s0)
80216acc: 13 05 04 ef  	addi	a0, s0, -0x110
80216ad0: 23 30 a4 ee  	sd	a0, -0x120(s0)

0000000080216ad4 <.Lpcrel_hi4>:
80216ad4: 17 d5 01 00  	auipc	a0, 0x1d
80216ad8: 13 05 45 94  	addi	a0, a0, -0x6bc
80216adc: 23 34 a4 ee  	sd	a0, -0x118(s0)
80216ae0: 03 35 04 ee  	ld	a0, -0x120(s0)
80216ae4: 23 34 a4 ec  	sd	a0, -0x138(s0)
80216ae8: 23 30 a4 fc  	sd	a0, -0x40(s0)
80216aec: 83 35 84 ee  	ld	a1, -0x118(s0)
80216af0: 23 38 b4 ec  	sd	a1, -0x130(s0)
80216af4: 23 34 b4 fc  	sd	a1, -0x38(s0)
80216af8: 08 61        	ld	a0, 0x0(a0)
80216afa: 8c 61        	ld	a1, 0x0(a1)
80216afc: 63 08 b5 02  	beq	a0, a1, 0x80216b2c <.Lpcrel_hi5+0x14>
80216b00: 09 a0        	j	0x80216b02 <.Lpcrel_hi4+0x2e>
80216b02: 03 36 04 ed  	ld	a2, -0x130(s0)
80216b06: 83 35 84 ec  	ld	a1, -0x138(s0)
80216b0a: 01 45        	li	a0, 0x0
;         assert_eq!(buf.len(), BLK_SIZE);
80216b0c: a3 0f a4 ee  	sb	a0, -0x101(s0)
80216b10: 23 30 a4 f0  	sd	a0, -0x100(s0)
80216b14: 03 45 f4 ef  	lbu	a0, -0x101(s0)

0000000080216b18 <.Lpcrel_hi5>:
80216b18: 97 06 02 00  	auipc	a3, 0x20
80216b1c: 13 87 86 14  	addi	a4, a3, 0x148
80216b20: 93 06 04 f0  	addi	a3, s0, -0x100
80216b24: 97 70 01 00  	auipc	ra, 0x17
80216b28: e7 80 e0 3e  	jalr	0x3ee(ra) <_ZN4core9panicking13assert_failed17h770217dc7d738624E>
80216b2c: 03 35 84 eb  	ld	a0, -0x148(s0)
80216b30: 85 45        	li	a1, 0x1
80216b32: 23 3c b4 e8  	sd	a1, -0x168(s0)
;             type_: ReqType::Out,
80216b36: 23 20 b4 f4  	sw	a1, -0xc0(s0)
;         let req = BlkReq {
80216b3a: 83 25 04 f4  	lw	a1, -0xc0(s0)
80216b3e: 23 28 b4 f2  	sw	a1, -0xd0(s0)
80216b42: 81 45        	li	a1, 0x0
80216b44: 23 2a b4 f2  	sw	a1, -0xcc(s0)
80216b48: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         let mut resp = BlkResp::default();
80216b4c: 97 40 00 00  	auipc	ra, 0x4
80216b50: e7 80 40 a0  	jalr	-0x5fc(ra) <_ZN71_$LT$virtio_drivers..blk..BlkResp$u20$as$u20$core..default..Default$GT$7default17hb9ba78d8adad68a9E>
80216b54: aa 85        	mv	a1, a0
80216b56: 03 35 04 ec  	ld	a0, -0x140(s0)
80216b5a: a3 0b b4 fc  	sb	a1, -0x29(s0)
80216b5e: 83 45 74 fd  	lbu	a1, -0x29(s0)
80216b62: a3 03 b4 f4  	sb	a1, -0xb9(s0)
;         self.queue.add(&[req.as_buf(), buf], &[resp.as_buf_mut()])?;
80216b66: 21 05        	addi	a0, a0, 0x8
80216b68: 23 30 a4 ea  	sd	a0, -0x160(s0)
80216b6c: 13 05 04 f3  	addi	a0, s0, -0xd0
80216b70: 97 00 00 00  	auipc	ra, 0x0
80216b74: e7 80 c0 57  	jalr	0x57c(ra) <_ZN14virtio_drivers5AsBuf6as_buf17h75f45f9be28787e4E>
80216b78: aa 86        	mv	a3, a0
80216b7a: 03 35 84 ea  	ld	a0, -0x158(s0)
80216b7e: 2e 86        	mv	a2, a1
80216b80: 83 35 04 eb  	ld	a1, -0x150(s0)
80216b84: 23 38 d4 f4  	sd	a3, -0xb0(s0)
80216b88: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80216b8c: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80216b90: 23 34 a4 f6  	sd	a0, -0x98(s0)
80216b94: 13 05 74 f4  	addi	a0, s0, -0xb9
80216b98: 97 00 00 00  	auipc	ra, 0x0
80216b9c: e7 80 60 53  	jalr	0x536(ra) <_ZN14virtio_drivers5AsBuf10as_buf_mut17h4d8f6120cca1a596E>
80216ba0: 03 37 84 e9  	ld	a4, -0x168(s0)
80216ba4: 2a 86        	mv	a2, a0
80216ba6: 03 35 04 ea  	ld	a0, -0x160(s0)
80216baa: 23 38 c4 f6  	sd	a2, -0x90(s0)
80216bae: 23 3c b4 f6  	sd	a1, -0x88(s0)
80216bb2: 93 05 04 f5  	addi	a1, s0, -0xb0
80216bb6: 09 46        	li	a2, 0x2
80216bb8: 93 06 04 f7  	addi	a3, s0, -0x90
80216bbc: 97 30 ff ff  	auipc	ra, 0xffff3
80216bc0: e7 80 80 30  	jalr	0x308(ra) <ekernel+0xffcbcec4>
80216bc4: 23 2c a4 fc  	sw	a0, -0x28(s0)
80216bc8: 03 25 84 fd  	lw	a0, -0x28(s0)
80216bcc: 23 26 a4 f4  	sw	a0, -0xb4(s0)
80216bd0: 03 15 e4 f4  	lh	a0, -0xb2(s0)
80216bd4: 42 05        	slli	a0, a0, 0x10
80216bd6: 83 55 c4 f4  	lhu	a1, -0xb4(s0)
80216bda: 4d 8d        	or	a0, a0, a1
80216bdc: 97 b0 fe ff  	auipc	ra, 0xfffeb
80216be0: e7 80 a0 85  	jalr	-0x7a6(ra) <ekernel+0xffcb4436>
80216be4: 23 2e a4 fc  	sw	a0, -0x24(s0)
80216be8: 03 25 c4 fd  	lw	a0, -0x24(s0)
80216bec: 23 24 a4 f4  	sw	a0, -0xb8(s0)
80216bf0: 03 45 84 f4  	lbu	a0, -0xb8(s0)
80216bf4: 05 89        	andi	a0, a0, 0x1
80216bf6: 19 ed        	bnez	a0, 0x80216c14 <.Lpcrel_hi5+0xfc>
80216bf8: 09 a0        	j	0x80216bfa <.Lpcrel_hi5+0xe2>
80216bfa: 03 35 04 ec  	ld	a0, -0x140(s0)
;         self.queue.add(&[req.as_buf(), buf], &[resp.as_buf_mut()])?;
80216bfe: 83 15 a4 f4  	lh	a1, -0xb6(s0)
80216c02: 23 11 b4 fe  	sh	a1, -0x1e(s0)
;         self.header.notify(0);
80216c06: 08 61        	ld	a0, 0x0(a0)
80216c08: 81 45        	li	a1, 0x0
80216c0a: 97 30 00 00  	auipc	ra, 0x3
80216c0e: e7 80 e0 61  	jalr	0x61e(ra) <_ZN14virtio_drivers6header12VirtIOHeader6notify17h0213b16fad05b0e7E>
80216c12: 05 a0        	j	0x80216c32 <.Lpcrel_hi6+0x16>
;         self.queue.add(&[req.as_buf(), buf], &[resp.as_buf_mut()])?;
80216c14: 03 45 94 f4  	lbu	a0, -0xb7(s0)
80216c18: a3 07 a4 fe  	sb	a0, -0x11(s0)

0000000080216c1c <.Lpcrel_hi6>:
80216c1c: 97 05 02 00  	auipc	a1, 0x20
80216c20: 93 85 45 07  	addi	a1, a1, 0x74
80216c24: 97 a0 fe ff  	auipc	ra, 0xfffea
80216c28: e7 80 20 5c  	jalr	0x5c2(ra) <ekernel+0xffcb41e6>
80216c2c: a3 0f a4 ec  	sb	a0, -0x121(s0)
80216c30: 69 a8        	j	0x80216cca <.Lpcrel_hi7+0x2e>
80216c32: 03 35 04 ec  	ld	a0, -0x140(s0)
;         while !self.queue.can_pop() {
80216c36: 21 05        	addi	a0, a0, 0x8
80216c38: 97 40 ff ff  	auipc	ra, 0xffff4
80216c3c: e7 80 e0 ad  	jalr	-0x522(ra) <ekernel+0xffcbd716>
80216c40: 09 e5        	bnez	a0, 0x80216c4a <.Lpcrel_hi6+0x2e>
80216c42: 09 a0        	j	0x80216c44 <.Lpcrel_hi6+0x28>
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
80216c44: 0f 00 00 01  	fence	w, 0
;             spin_loop();
80216c48: ed b7        	j	0x80216c32 <.Lpcrel_hi6+0x16>
80216c4a: 03 35 04 ec  	ld	a0, -0x140(s0)
;         self.queue.pop_used()?;
80216c4e: 93 05 85 00  	addi	a1, a0, 0x8
80216c52: 13 05 04 f9  	addi	a0, s0, -0x70
80216c56: 23 38 a4 e8  	sd	a0, -0x170(s0)
80216c5a: 97 40 ff ff  	auipc	ra, 0xffff4
80216c5e: e7 80 40 af  	jalr	-0x50c(ra) <ekernel+0xffcbd74e>
80216c62: 83 35 04 e9  	ld	a1, -0x170(s0)
80216c66: 13 05 44 f8  	addi	a0, s0, -0x7c
80216c6a: 97 a0 fe ff  	auipc	ra, 0xfffea
80216c6e: e7 80 80 6b  	jalr	0x6b8(ra) <ekernel+0xffcb4322>
80216c72: 03 45 44 f8  	lbu	a0, -0x7c(s0)
80216c76: 05 89        	andi	a0, a0, 0x1
80216c78: 11 ed        	bnez	a0, 0x80216c94 <.Lpcrel_hi6+0x78>
80216c7a: 09 a0        	j	0x80216c7c <.Lpcrel_hi6+0x60>
80216c7c: 83 15 84 f8  	lh	a1, -0x78(s0)
80216c80: 03 25 c4 f8  	lw	a0, -0x74(s0)
80216c84: 23 12 b4 fe  	sh	a1, -0x1c(s0)
80216c88: 23 24 a4 fe  	sw	a0, -0x18(s0)
;         match resp.status {
80216c8c: 03 45 74 f4  	lbu	a0, -0xb9(s0)
80216c90: 0d c1        	beqz	a0, 0x80216cb2 <.Lpcrel_hi7+0x16>
80216c92: 25 a0        	j	0x80216cba <.Lpcrel_hi7+0x1e>
;         self.queue.pop_used()?;
80216c94: 03 45 54 f8  	lbu	a0, -0x7b(s0)
80216c98: 23 07 a4 fe  	sb	a0, -0x12(s0)

0000000080216c9c <.Lpcrel_hi7>:
80216c9c: 97 05 02 00  	auipc	a1, 0x20
80216ca0: 93 85 c5 fd  	addi	a1, a1, -0x24
80216ca4: 97 a0 fe ff  	auipc	ra, 0xfffea
80216ca8: e7 80 20 54  	jalr	0x542(ra) <ekernel+0xffcb41e6>
80216cac: a3 0f a4 ec  	sb	a0, -0x121(s0)
80216cb0: 29 a8        	j	0x80216cca <.Lpcrel_hi7+0x2e>
80216cb2: 19 45        	li	a0, 0x6
;             RespStatus::Ok => Ok(()),
80216cb4: a3 0f a4 ec  	sb	a0, -0x121(s0)
80216cb8: 09 a8        	j	0x80216cca <.Lpcrel_hi7+0x2e>
80216cba: 15 45        	li	a0, 0x5
;             _ => Err(Error::IoError),
80216cbc: a3 0f a4 f8  	sb	a0, -0x61(s0)
80216cc0: 03 45 f4 f9  	lbu	a0, -0x61(s0)
80216cc4: a3 0f a4 ec  	sb	a0, -0x121(s0)
80216cc8: 09 a0        	j	0x80216cca <.Lpcrel_hi7+0x2e>
;     }
80216cca: 03 45 f4 ed  	lbu	a0, -0x121(s0)
80216cce: b6 70        	ld	ra, 0x168(sp)
80216cd0: 16 74        	ld	s0, 0x160(sp)
80216cd2: 75 61        	addi	sp, sp, 0x170
80216cd4: 82 80        	ret

0000000080216cd6 <_ZN14virtio_drivers3blk18VirtIOBlk$LT$H$GT$3new17h37271ceb280a3f18E>:
;     pub fn new(header: &'static mut VirtIOHeader) -> Result<Self> {
80216cd6: 13 01 01 d9  	addi	sp, sp, -0x270
80216cda: 23 34 11 26  	sd	ra, 0x268(sp)
80216cde: 23 30 81 26  	sd	s0, 0x260(sp)
80216ce2: 80 1c        	addi	s0, sp, 0x270
80216ce4: 23 3c b4 da  	sd	a1, -0x248(s0)
80216ce8: aa 85        	mv	a1, a0
80216cea: 03 35 84 db  	ld	a0, -0x248(s0)
80216cee: 23 38 b4 da  	sd	a1, -0x250(s0)
80216cf2: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         header.begin_init(|features| {
80216cf6: 97 40 ff ff  	auipc	ra, 0xffff4
80216cfa: e7 80 a0 47  	jalr	0x47a(ra) <ekernel+0xffcbe170>
80216cfe: 03 35 84 db  	ld	a0, -0x248(s0)
;         let config = unsafe { &mut *(header.config_space() as *mut BlkConfig) };
80216d02: 97 30 00 00  	auipc	ra, 0x3
80216d06: e7 80 a0 54  	jalr	0x54a(ra) <_ZN14virtio_drivers6header12VirtIOHeader12config_space17h63554b89a921cbbbE>
80216d0a: 23 30 a4 dc  	sd	a0, -0x240(s0)
80216d0e: 0d 45        	li	a0, 0x3
;         info!("config: {:?}", config);
80216d10: 23 34 a4 dc  	sd	a0, -0x238(s0)

0000000080216d14 <.Lpcrel_hi8>:
80216d14: 17 c5 01 00  	auipc	a0, 0x1c
80216d18: 93 05 45 6a  	addi	a1, a0, 0x6a4
80216d1c: 13 05 84 dc  	addi	a0, s0, -0x238
80216d20: 97 f0 fe ff  	auipc	ra, 0xfffef
80216d24: e7 80 60 96  	jalr	-0x69a(ra) <ekernel+0xffcb8686>
80216d28: 0d e1        	bnez	a0, 0x80216d4a <.Lpcrel_hi9+0x18>
80216d2a: 09 a0        	j	0x80216d2c <.Lpcrel_hi8+0x18>
80216d2c: 0d 45        	li	a0, 0x3
;         info!(
80216d2e: 23 34 a4 e2  	sd	a0, -0x1d8(s0)

0000000080216d32 <.Lpcrel_hi9>:
80216d32: 17 c5 01 00  	auipc	a0, 0x1c
80216d36: 93 05 65 68  	addi	a1, a0, 0x686
80216d3a: 13 05 84 e2  	addi	a0, s0, -0x1d8
80216d3e: 97 f0 fe ff  	auipc	ra, 0xfffef
80216d42: e7 80 80 94  	jalr	-0x6b8(ra) <ekernel+0xffcb8686>
80216d46: 69 ed        	bnez	a0, 0x80216e20 <.Lpcrel_hi13+0x42>
80216d48: 65 a0        	j	0x80216df0 <.Lpcrel_hi13+0x12>
80216d4a: 01 45        	li	a0, 0x0
;     unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
80216d4c: a3 07 a4 fa  	sb	a0, -0x51(s0)
80216d50: 83 45 f4 fa  	lbu	a1, -0x51(s0)

0000000080216d54 <.Lpcrel_hi10>:
80216d54: 17 55 33 00  	auipc	a0, 0x335
80216d58: 13 05 45 69  	addi	a0, a0, 0x694
80216d5c: 97 f0 ff ff  	auipc	ra, 0xfffff
80216d60: e7 80 40 0a  	jalr	0xa4(ra) <ekernel+0xffcc8e00>
;         info!("config: {:?}", config);
80216d64: 23 38 a4 dc  	sd	a0, -0x230(s0)
80216d68: 13 05 84 dc  	addi	a0, s0, -0x238
80216d6c: 93 05 04 dd  	addi	a1, s0, -0x230
80216d70: 97 f0 fe ff  	auipc	ra, 0xfffef
80216d74: e7 80 60 91  	jalr	-0x6ea(ra) <ekernel+0xffcb8686>
80216d78: 55 d9        	beqz	a0, 0x80216d2c <.Lpcrel_hi8+0x18>
80216d7a: 09 a0        	j	0x80216d7c <.Lpcrel_hi10+0x28>
80216d7c: 93 05 04 dc  	addi	a1, s0, -0x240
80216d80: 23 30 b4 fe  	sd	a1, -0x20(s0)

0000000080216d84 <.Lpcrel_hi11>:
;         Self::new(x, Debug::fmt)
80216d84: 17 05 00 00  	auipc	a0, 0x0
80216d88: 13 05 65 38  	addi	a0, a0, 0x386
80216d8c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80216d90: 23 38 b4 fc  	sd	a1, -0x30(s0)
80216d94: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80216d98: 83 35 04 fd  	ld	a1, -0x30(s0)
80216d9c: 03 35 84 fd  	ld	a0, -0x28(s0)
;         info!("config: {:?}", config);
80216da0: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
80216da4: 23 38 a4 e0  	sd	a0, -0x1f0(s0)

0000000080216da8 <.Lpcrel_hi12>:
80216da8: 17 05 02 00  	auipc	a0, 0x20
80216dac: 93 05 05 f0  	addi	a1, a0, -0x100
80216db0: 13 05 84 dd  	addi	a0, s0, -0x228
80216db4: 23 34 a4 da  	sd	a0, -0x258(s0)
80216db8: 93 06 84 e0  	addi	a3, s0, -0x1f8
80216dbc: 05 47        	li	a4, 0x1
80216dbe: 3a 86        	mv	a2, a4
80216dc0: 97 00 ff ff  	auipc	ra, 0xffff0
80216dc4: e7 80 80 52  	jalr	0x528(ra) <ekernel+0xffcba2e8>
80216dc8: 03 35 84 da  	ld	a0, -0x258(s0)
80216dcc: 83 35 84 dc  	ld	a1, -0x238(s0)
80216dd0: 01 46        	li	a2, 0x0
80216dd2: 23 3c c4 e0  	sd	a2, -0x1e8(s0)
80216dd6: 83 36 84 e1  	ld	a3, -0x1e8(s0)
80216dda: 03 37 04 e2  	ld	a4, -0x1e0(s0)

0000000080216dde <.Lpcrel_hi13>:
80216dde: 17 06 02 00  	auipc	a2, 0x20
80216de2: 13 06 26 ef  	addi	a2, a2, -0x10e
80216de6: 97 60 00 00  	auipc	ra, 0x6
80216dea: e7 80 a0 bf  	jalr	-0x406(ra) <_ZN3log17__private_api_log17hcefc324800d3b860E>
80216dee: 3d bf        	j	0x80216d2c <.Lpcrel_hi8+0x18>
80216df0: 83 35 84 db  	ld	a1, -0x248(s0)
80216df4: 13 05 04 ed  	addi	a0, s0, -0x130
80216df8: 23 30 a4 da  	sd	a0, -0x260(s0)
80216dfc: 01 46        	li	a2, 0x0
80216dfe: c1 46        	li	a3, 0x10
;         let queue = VirtQueue::new(header, 0, 16)?;
80216e00: 97 30 ff ff  	auipc	ra, 0xffff3
80216e04: e7 80 60 55  	jalr	0x556(ra) <ekernel+0xffcbd356>
80216e08: 83 35 04 da  	ld	a1, -0x260(s0)
80216e0c: 13 05 04 e9  	addi	a0, s0, -0x170
80216e10: 97 a0 fe ff  	auipc	ra, 0xfffea
80216e14: e7 80 c0 57  	jalr	0x57c(ra) <ekernel+0xffcb438c>
80216e18: 03 35 04 e9  	ld	a0, -0x170(s0)
80216e1c: 55 ed        	bnez	a0, 0x80216ed8 <.Lpcrel_hi17+0x12>
80216e1e: 9d aa        	j	0x80216f94 <.Lpcrel_hi17+0xce>
80216e20: 01 45        	li	a0, 0x0
;     unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
80216e22: 23 07 a4 fa  	sb	a0, -0x52(s0)
80216e26: 83 45 e4 fa  	lbu	a1, -0x52(s0)

0000000080216e2a <.Lpcrel_hi14>:
80216e2a: 17 55 33 00  	auipc	a0, 0x335
80216e2e: 13 05 e5 5b  	addi	a0, a0, 0x5be
80216e32: 97 f0 ff ff  	auipc	ra, 0xfffff
80216e36: e7 80 e0 fc  	jalr	-0x32(ra) <ekernel+0xffcc8e00>
;         info!(
80216e3a: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
80216e3e: 13 05 84 e2  	addi	a0, s0, -0x1d8
80216e42: 93 05 04 e3  	addi	a1, s0, -0x1d0
80216e46: 97 f0 fe ff  	auipc	ra, 0xfffef
80216e4a: e7 80 00 84  	jalr	-0x7c0(ra) <ekernel+0xffcb8686>
80216e4e: 4d d1        	beqz	a0, 0x80216df0 <.Lpcrel_hi13+0x12>
80216e50: 09 a0        	j	0x80216e52 <.Lpcrel_hi14+0x28>
;             config.capacity.read() / 2
80216e52: 03 35 04 dc  	ld	a0, -0x240(s0)
80216e56: 97 a0 fe ff  	auipc	ra, 0xfffea
80216e5a: e7 80 20 2e  	jalr	0x2e2(ra) <ekernel+0xffcb4138>
80216e5e: 05 81        	srli	a0, a0, 0x1
80216e60: 23 3c a4 e6  	sd	a0, -0x188(s0)
80216e64: 93 05 84 e7  	addi	a1, s0, -0x188
80216e68: 23 30 b4 fc  	sd	a1, -0x40(s0)

0000000080216e6c <.Lpcrel_hi15>:
;         Self::new(x, Display::fmt)
80216e6c: 17 a5 01 00  	auipc	a0, 0x1a
80216e70: 13 05 25 22  	addi	a0, a0, 0x222
80216e74: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
80216e78: 23 38 b4 fa  	sd	a1, -0x50(s0)
80216e7c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
80216e80: 83 35 04 fb  	ld	a1, -0x50(s0)
80216e84: 03 35 84 fb  	ld	a0, -0x48(s0)
;         info!(
80216e88: 23 34 b4 e6  	sd	a1, -0x198(s0)
80216e8c: 23 38 a4 e6  	sd	a0, -0x190(s0)

0000000080216e90 <.Lpcrel_hi16>:
80216e90: 17 05 02 00  	auipc	a0, 0x20
80216e94: 93 05 85 e9  	addi	a1, a0, -0x168
80216e98: 13 05 84 e3  	addi	a0, s0, -0x1c8
80216e9c: 23 3c a4 d8  	sd	a0, -0x268(s0)
80216ea0: 09 46        	li	a2, 0x2
80216ea2: 93 06 84 e6  	addi	a3, s0, -0x198
80216ea6: 05 47        	li	a4, 0x1
80216ea8: 97 00 ff ff  	auipc	ra, 0xffff0
80216eac: e7 80 00 44  	jalr	0x440(ra) <ekernel+0xffcba2e8>
80216eb0: 03 35 84 d9  	ld	a0, -0x268(s0)
80216eb4: 83 35 84 e2  	ld	a1, -0x1d8(s0)
80216eb8: 01 46        	li	a2, 0x0
80216eba: 23 30 c4 e8  	sd	a2, -0x180(s0)
80216ebe: 83 36 04 e8  	ld	a3, -0x180(s0)
80216ec2: 03 37 84 e8  	ld	a4, -0x178(s0)

0000000080216ec6 <.Lpcrel_hi17>:
80216ec6: 17 06 02 00  	auipc	a2, 0x20
80216eca: 13 06 26 e8  	addi	a2, a2, -0x17e
80216ece: 97 60 00 00  	auipc	ra, 0x6
80216ed2: e7 80 20 b1  	jalr	-0x4ee(ra) <_ZN3log17__private_api_log17hcefc324800d3b860E>
80216ed6: 29 bf        	j	0x80216df0 <.Lpcrel_hi13+0x12>
80216ed8: 03 35 84 db  	ld	a0, -0x248(s0)
;         let queue = VirtQueue::new(header, 0, 16)?;
80216edc: 83 35 84 ec  	ld	a1, -0x138(s0)
80216ee0: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80216ee4: 83 35 04 ec  	ld	a1, -0x140(s0)
80216ee8: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80216eec: 83 35 84 eb  	ld	a1, -0x148(s0)
80216ef0: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80216ef4: 83 35 04 eb  	ld	a1, -0x150(s0)
80216ef8: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80216efc: 83 35 84 ea  	ld	a1, -0x158(s0)
80216f00: 23 34 b4 f2  	sd	a1, -0xd8(s0)
80216f04: 83 35 04 ea  	ld	a1, -0x160(s0)
80216f08: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80216f0c: 83 35 84 e9  	ld	a1, -0x168(s0)
80216f10: 23 3c b4 f0  	sd	a1, -0xe8(s0)
80216f14: 83 35 04 e9  	ld	a1, -0x170(s0)
80216f18: 23 38 b4 f0  	sd	a1, -0xf0(s0)
;         header.finish_init();
80216f1c: 97 30 00 00  	auipc	ra, 0x3
80216f20: e7 80 40 0e  	jalr	0xe4(ra) <_ZN14virtio_drivers6header12VirtIOHeader11finish_init17h596a8f2f838090aeE>
;             capacity: config.capacity.read() as usize,
80216f24: 03 35 04 dc  	ld	a0, -0x240(s0)
80216f28: 97 a0 fe ff  	auipc	ra, 0xfffea
80216f2c: e7 80 00 21  	jalr	0x210(ra) <ekernel+0xffcb4138>
80216f30: 03 36 84 db  	ld	a2, -0x248(s0)
80216f34: aa 85        	mv	a1, a0
80216f36: 03 35 04 db  	ld	a0, -0x250(s0)
;         Ok(VirtIOBlk {
80216f3a: 23 38 c4 f4  	sd	a2, -0xb0(s0)
80216f3e: 03 36 84 f4  	ld	a2, -0xb8(s0)
80216f42: 23 38 c4 f8  	sd	a2, -0x70(s0)
80216f46: 03 36 04 f4  	ld	a2, -0xc0(s0)
80216f4a: 23 34 c4 f8  	sd	a2, -0x78(s0)
80216f4e: 03 36 84 f3  	ld	a2, -0xc8(s0)
80216f52: 23 30 c4 f8  	sd	a2, -0x80(s0)
80216f56: 03 36 04 f3  	ld	a2, -0xd0(s0)
80216f5a: 23 3c c4 f6  	sd	a2, -0x88(s0)
80216f5e: 03 36 84 f2  	ld	a2, -0xd8(s0)
80216f62: 23 38 c4 f6  	sd	a2, -0x90(s0)
80216f66: 03 36 04 f2  	ld	a2, -0xe0(s0)
80216f6a: 23 34 c4 f6  	sd	a2, -0x98(s0)
80216f6e: 03 36 84 f1  	ld	a2, -0xe8(s0)
80216f72: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80216f76: 03 36 04 f1  	ld	a2, -0xf0(s0)
80216f7a: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80216f7e: 23 3c b4 f8  	sd	a1, -0x68(s0)
80216f82: 93 05 04 f5  	addi	a1, s0, -0xb0
80216f86: 13 06 00 05  	li	a2, 0x50
80216f8a: 97 b0 01 00  	auipc	ra, 0x1b
80216f8e: e7 80 40 ce  	jalr	-0x31c(ra) <memcpy>
;     }
80216f92: 05 a0        	j	0x80216fb2 <.Lpcrel_hi18+0x12>
80216f94: 03 35 04 db  	ld	a0, -0x250(s0)
;         let queue = VirtQueue::new(header, 0, 16)?;
80216f98: 83 45 84 e9  	lbu	a1, -0x168(s0)
80216f9c: a3 06 b4 fa  	sb	a1, -0x53(s0)

0000000080216fa0 <.Lpcrel_hi18>:
80216fa0: 17 06 02 00  	auipc	a2, 0x20
80216fa4: 13 06 06 de  	addi	a2, a2, -0x220
80216fa8: 97 a0 fe ff  	auipc	ra, 0xfffea
80216fac: e7 80 c0 20  	jalr	0x20c(ra) <ekernel+0xffcb41b4>
80216fb0: 09 a0        	j	0x80216fb2 <.Lpcrel_hi18+0x12>
80216fb2: 83 30 81 26  	ld	ra, 0x268(sp)
80216fb6: 03 34 01 26  	ld	s0, 0x260(sp)
;     }
80216fba: 13 01 01 27  	addi	sp, sp, 0x270
80216fbe: 82 80        	ret

0000000080216fc0 <_ZN14virtio_drivers3blk18VirtIOBlk$LT$H$GT$3new28_$u7b$$u7b$closure$u7d$$u7d$17h73e08e92b2156d50E>:
;         header.begin_init(|features| {
80216fc0: 55 71        	addi	sp, sp, -0xd0
80216fc2: 86 e5        	sd	ra, 0xc8(sp)
80216fc4: a2 e1        	sd	s0, 0xc0(sp)
80216fc6: 80 09        	addi	s0, sp, 0xd0
80216fc8: 23 3c a4 fa  	sd	a0, -0x48(s0)
;             let features = BlkFeature::from_bits_truncate(features);
80216fcc: 97 40 ff ff  	auipc	ra, 0xffff4
80216fd0: e7 80 a0 22  	jalr	0x22a(ra) <ekernel+0xffcbe1f6>
80216fd4: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80216fd8: 0d 45        	li	a0, 0x3
;             info!("device features: {:?}", features);
80216fda: 23 34 a4 f4  	sd	a0, -0xb8(s0)

0000000080216fde <.Lpcrel_hi19>:
80216fde: 17 c5 01 00  	auipc	a0, 0x1c
80216fe2: 93 05 a5 3d  	addi	a1, a0, 0x3da
80216fe6: 13 05 84 f4  	addi	a0, s0, -0xb8
80216fea: 97 e0 fe ff  	auipc	ra, 0xfffee
80216fee: e7 80 c0 69  	jalr	0x69c(ra) <ekernel+0xffcb8686>
80216ff2: 1d e9        	bnez	a0, 0x80217028 <.Lpcrel_hi19+0x4a>
80216ff4: 09 a0        	j	0x80216ff6 <.Lpcrel_hi19+0x18>
;             let supported_features = BlkFeature::empty();
80216ff6: 97 40 ff ff  	auipc	ra, 0xffff4
80216ffa: e7 80 a0 26  	jalr	0x26a(ra) <ekernel+0xffcbe260>
80216ffe: aa 85        	mv	a1, a0
80217000: 23 30 b4 fc  	sd	a1, -0x40(s0)
;             (features & supported_features).bits()
80217004: 03 35 04 f4  	ld	a0, -0xc0(s0)
80217008: 97 40 ff ff  	auipc	ra, 0xffff4
8021700c: e7 80 20 37  	jalr	0x372(ra) <ekernel+0xffcbe37a>
80217010: 23 34 a4 fa  	sd	a0, -0x58(s0)
80217014: 13 05 84 fa  	addi	a0, s0, -0x58
80217018: 97 40 ff ff  	auipc	ra, 0xffff4
8021701c: e7 80 20 23  	jalr	0x232(ra) <ekernel+0xffcbe24a>
80217020: ae 60        	ld	ra, 0xc8(sp)
80217022: 0e 64        	ld	s0, 0xc0(sp)
;         });
80217024: 69 61        	addi	sp, sp, 0xd0
80217026: 82 80        	ret
80217028: 01 45        	li	a0, 0x0
;     unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
8021702a: a3 07 a4 fc  	sb	a0, -0x31(s0)
8021702e: 83 45 f4 fc  	lbu	a1, -0x31(s0)

0000000080217032 <.Lpcrel_hi20>:
80217032: 17 55 33 00  	auipc	a0, 0x335
80217036: 13 05 65 3b  	addi	a0, a0, 0x3b6
8021703a: 97 f0 ff ff  	auipc	ra, 0xfffff
8021703e: e7 80 60 dc  	jalr	-0x23a(ra) <ekernel+0xffcc8e00>
;             info!("device features: {:?}", features);
80217042: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80217046: 13 05 84 f4  	addi	a0, s0, -0xb8
8021704a: 93 05 04 f5  	addi	a1, s0, -0xb0
8021704e: 97 e0 fe ff  	auipc	ra, 0xfffee
80217052: e7 80 80 63  	jalr	0x638(ra) <ekernel+0xffcb8686>
80217056: 45 d1        	beqz	a0, 0x80216ff6 <.Lpcrel_hi19+0x18>
80217058: 09 a0        	j	0x8021705a <.Lpcrel_hi20+0x28>
8021705a: 93 05 04 f4  	addi	a1, s0, -0xc0
8021705e: 23 30 b4 fe  	sd	a1, -0x20(s0)

0000000080217062 <.Lpcrel_hi21>:
;         Self::new(x, Debug::fmt)
80217062: 17 35 00 00  	auipc	a0, 0x3
80217066: 13 05 05 51  	addi	a0, a0, 0x510
8021706a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Argument { formatter: mem::transmute(f), value: mem::transmute(x) } }
8021706e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80217072: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80217076: 83 35 04 fd  	ld	a1, -0x30(s0)
8021707a: 03 35 84 fd  	ld	a0, -0x28(s0)
;             info!("device features: {:?}", features);
8021707e: 23 34 b4 f8  	sd	a1, -0x78(s0)
80217082: 23 38 a4 f8  	sd	a0, -0x70(s0)

0000000080217086 <.Lpcrel_hi22>:
80217086: 17 05 02 00  	auipc	a0, 0x20
8021708a: 93 05 a5 d2  	addi	a1, a0, -0x2d6
8021708e: 13 05 84 f5  	addi	a0, s0, -0xa8
80217092: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80217096: 93 06 84 f8  	addi	a3, s0, -0x78
8021709a: 05 47        	li	a4, 0x1
8021709c: 3a 86        	mv	a2, a4
8021709e: 97 00 ff ff  	auipc	ra, 0xffff0
802170a2: e7 80 a0 24  	jalr	0x24a(ra) <ekernel+0xffcba2e8>
802170a6: 03 35 84 f3  	ld	a0, -0xc8(s0)
802170aa: 83 35 84 f4  	ld	a1, -0xb8(s0)
802170ae: 01 46        	li	a2, 0x0
802170b0: 23 3c c4 f8  	sd	a2, -0x68(s0)
802170b4: 83 36 84 f9  	ld	a3, -0x68(s0)
802170b8: 03 37 04 fa  	ld	a4, -0x60(s0)

00000000802170bc <.Lpcrel_hi23>:
802170bc: 17 06 02 00  	auipc	a2, 0x20
802170c0: 13 06 46 d0  	addi	a2, a2, -0x2fc
802170c4: 97 60 00 00  	auipc	ra, 0x6
802170c8: e7 80 c0 91  	jalr	-0x6e4(ra) <_ZN3log17__private_api_log17hcefc324800d3b860E>
802170cc: 2d b7        	j	0x80216ff6 <.Lpcrel_hi19+0x18>

00000000802170ce <_ZN14virtio_drivers5AsBuf10as_buf_mut17h4d8f6120cca1a596E>:
;     fn as_buf_mut(&mut self) -> &mut [u8] {
802170ce: 01 11        	addi	sp, sp, -0x20
802170d0: 06 ec        	sd	ra, 0x18(sp)
802170d2: 22 e8        	sd	s0, 0x10(sp)
802170d4: 00 10        	addi	s0, sp, 0x20
802170d6: 23 34 a4 fe  	sd	a0, -0x18(s0)
802170da: 85 45        	li	a1, 0x1
;         unsafe { core::slice::from_raw_parts_mut(self as *mut _ as _, size_of::<Self>()) }
802170dc: 97 d0 00 00  	auipc	ra, 0xd
802170e0: e7 80 40 83  	jalr	-0x7cc(ra) <_ZN4core5slice3raw18from_raw_parts_mut17h0634ea8f918e83aaE>
802170e4: e2 60        	ld	ra, 0x18(sp)
802170e6: 42 64        	ld	s0, 0x10(sp)
;     }
802170e8: 05 61        	addi	sp, sp, 0x20
802170ea: 82 80        	ret

00000000802170ec <_ZN14virtio_drivers5AsBuf6as_buf17h75f45f9be28787e4E>:
;     fn as_buf(&self) -> &[u8] {
802170ec: 01 11        	addi	sp, sp, -0x20
802170ee: 06 ec        	sd	ra, 0x18(sp)
802170f0: 22 e8        	sd	s0, 0x10(sp)
802170f2: 00 10        	addi	s0, sp, 0x20
802170f4: 23 34 a4 fe  	sd	a0, -0x18(s0)
802170f8: c1 45        	li	a1, 0x10
;         unsafe { core::slice::from_raw_parts(self as *const _ as _, size_of::<Self>()) }
802170fa: 97 60 01 00  	auipc	ra, 0x16
802170fe: e7 80 e0 11  	jalr	0x11e(ra) <_ZN4core5slice3raw14from_raw_parts17hbd12e2870e3a2a05E>
80217102: e2 60        	ld	ra, 0x18(sp)
80217104: 42 64        	ld	s0, 0x10(sp)
;     }
80217106: 05 61        	addi	sp, sp, 0x20
80217108: 82 80        	ret

000000008021710a <_ZN50_$LT$$RF$mut$u20$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h75a7c1986d2cfc3fE>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
8021710a: 01 11        	addi	sp, sp, -0x20
8021710c: 06 ec        	sd	ra, 0x18(sp)
8021710e: 22 e8        	sd	s0, 0x10(sp)
80217110: 00 10        	addi	s0, sp, 0x20
80217112: 23 30 a4 fe  	sd	a0, -0x20(s0)
80217116: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021711a: 08 61        	ld	a0, 0x0(a0)
8021711c: 97 40 ff ff  	auipc	ra, 0xffff4
80217120: e7 80 e0 15  	jalr	0x15e(ra) <ekernel+0xffcbe27a>
80217124: e2 60        	ld	ra, 0x18(sp)
80217126: 42 64        	ld	s0, 0x10(sp)
80217128: 05 61        	addi	sp, sp, 0x20
8021712a: 82 80        	ret

000000008021712c <_ZN4core4sync6atomic11atomic_load17h3547056283e16e6bE>:
; unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
8021712c: 31 71        	addi	sp, sp, -0xc0
8021712e: 06 fd        	sd	ra, 0xb8(sp)
80217130: 22 f9        	sd	s0, 0xb0(sp)
80217132: 80 01        	addi	s0, sp, 0xc0
80217134: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80217138: a3 0f b4 f4  	sb	a1, -0xa1(s0)
8021713c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         match order {
80217140: 03 45 f4 f5  	lbu	a0, -0xa1(s0)
80217144: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80217148: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         match order {
8021714c: 0e 05        	slli	a0, a0, 0x3

000000008021714e <.Lpcrel_hi0>:
8021714e: 97 05 02 00  	auipc	a1, 0x20
80217152: 93 85 a5 ca  	addi	a1, a1, -0x356
80217156: 2e 95        	add	a0, a0, a1
80217158: 08 61        	ld	a0, 0x0(a0)
8021715a: 02 85        	jr	a0
8021715c: 00 00        	unimp

000000008021715e <.LBB0_3>:
8021715e: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             Relaxed => intrinsics::atomic_load_relaxed(dst),
80217162: 08 61        	ld	a0, 0x0(a0)
80217164: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80217168: f9 a0        	j	0x80217236 <.LBB0_7+0x14>

000000008021716a <.Lpcrel_hi1>:
;             Release => panic!("there is no such thing as a release load"),
8021716a: 17 05 02 00  	auipc	a0, 0x20
8021716e: 93 05 e5 d7  	addi	a1, a0, -0x282
80217172: 23 38 b4 fc  	sd	a1, -0x30(s0)
80217176: 05 45        	li	a0, 0x1
80217178: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021717c: 23 34 b4 f6  	sd	a1, -0x98(s0)
80217180: 23 38 a4 f6  	sd	a0, -0x90(s0)

0000000080217184 <.Lpcrel_hi2>:
80217184: 17 c5 01 00  	auipc	a0, 0x1c
80217188: 13 05 c5 10  	addi	a0, a0, 0x10c
8021718c: 0c 61        	ld	a1, 0x0(a0)
8021718e: 08 65        	ld	a0, 0x8(a0)
80217190: 23 34 b4 f8  	sd	a1, -0x78(s0)
80217194: 23 38 a4 f8  	sd	a0, -0x70(s0)

0000000080217198 <.Lpcrel_hi3>:
80217198: 17 05 02 00  	auipc	a0, 0x20
8021719c: 13 05 05 d6  	addi	a0, a0, -0x2a0
802171a0: 23 3c a4 f6  	sd	a0, -0x88(s0)
802171a4: 01 45        	li	a0, 0x0
802171a6: 23 30 a4 f8  	sd	a0, -0x80(s0)

00000000802171aa <.Lpcrel_hi4>:
;             Release => panic!("there is no such thing as a release load"),
802171aa: 17 05 02 00  	auipc	a0, 0x20
802171ae: 93 05 65 dc  	addi	a1, a0, -0x23a
802171b2: 13 05 84 f6  	addi	a0, s0, -0x98
802171b6: 97 90 01 00  	auipc	ra, 0x19
802171ba: e7 80 20 ff  	jalr	-0xe(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802171be <.LBB0_5>:
802171be: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             Acquire => intrinsics::atomic_load_acquire(dst),
802171c2: 08 61        	ld	a0, 0x0(a0)
802171c4: 0f 00 30 02  	fence	r, rw
802171c8: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802171cc: ad a0        	j	0x80217236 <.LBB0_7+0x14>

00000000802171ce <.Lpcrel_hi5>:
;             AcqRel => panic!("there is no such thing as an acquire-release load"),
802171ce: 17 05 02 00  	auipc	a0, 0x20
802171d2: 93 05 25 df  	addi	a1, a0, -0x20e
802171d6: 23 30 b4 fe  	sd	a1, -0x20(s0)
802171da: 05 45        	li	a0, 0x1
802171dc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
802171e0: 23 3c b4 f8  	sd	a1, -0x68(s0)
802171e4: 23 30 a4 fa  	sd	a0, -0x60(s0)

00000000802171e8 <.Lpcrel_hi6>:
802171e8: 17 c5 01 00  	auipc	a0, 0x1c
802171ec: 13 05 85 0a  	addi	a0, a0, 0xa8
802171f0: 0c 61        	ld	a1, 0x0(a0)
802171f2: 08 65        	ld	a0, 0x8(a0)
802171f4: 23 3c b4 fa  	sd	a1, -0x48(s0)
802171f8: 23 30 a4 fc  	sd	a0, -0x40(s0)

00000000802171fc <.Lpcrel_hi7>:
802171fc: 17 05 02 00  	auipc	a0, 0x20
80217200: 13 05 c5 cf  	addi	a0, a0, -0x304
80217204: 23 34 a4 fa  	sd	a0, -0x58(s0)
80217208: 01 45        	li	a0, 0x0
8021720a: 23 38 a4 fa  	sd	a0, -0x50(s0)

000000008021720e <.Lpcrel_hi8>:
;             AcqRel => panic!("there is no such thing as an acquire-release load"),
8021720e: 17 05 02 00  	auipc	a0, 0x20
80217212: 93 05 25 dc  	addi	a1, a0, -0x23e
80217216: 13 05 84 f9  	addi	a0, s0, -0x68
8021721a: 97 90 01 00  	auipc	ra, 0x19
8021721e: e7 80 e0 f8  	jalr	-0x72(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080217222 <.LBB0_7>:
80217222: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             SeqCst => intrinsics::atomic_load_seqcst(dst),
80217226: 0f 00 30 03  	fence	rw, rw
8021722a: 08 61        	ld	a0, 0x0(a0)
8021722c: 0f 00 30 02  	fence	r, rw
80217230: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80217234: 09 a0        	j	0x80217236 <.LBB0_7+0x14>
; }
80217236: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021723a: ea 70        	ld	ra, 0xb8(sp)
8021723c: 4a 74        	ld	s0, 0xb0(sp)
8021723e: 29 61        	addi	sp, sp, 0xc0
80217240: 82 80        	ret

0000000080217242 <_ZN4core4sync6atomic11atomic_load17h56dfa543508c415dE>:
; unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
80217242: 71 71        	addi	sp, sp, -0xb0
80217244: 06 f5        	sd	ra, 0xa8(sp)
80217246: 22 f1        	sd	s0, 0xa0(sp)
80217248: 00 19        	addi	s0, sp, 0xb0
8021724a: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021724e: 23 03 b4 f6  	sb	a1, -0x9a(s0)
80217252: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         match order {
80217256: 03 45 64 f6  	lbu	a0, -0x9a(s0)
8021725a: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8021725e: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         match order {
80217262: 0e 05        	slli	a0, a0, 0x3

0000000080217264 <.Lpcrel_hi9>:
80217264: 97 05 02 00  	auipc	a1, 0x20
80217268: 93 85 c5 bb  	addi	a1, a1, -0x444
8021726c: 2e 95        	add	a0, a0, a1
8021726e: 08 61        	ld	a0, 0x0(a0)
80217270: 02 85        	jr	a0
80217272: 00 00        	unimp

0000000080217274 <.LBB1_3>:
80217274: 03 35 04 f5  	ld	a0, -0xb0(s0)
;             Relaxed => intrinsics::atomic_load_relaxed(dst),
80217278: 03 05 05 00  	lb	a0, 0x0(a0)
8021727c: a3 03 a4 f6  	sb	a0, -0x99(s0)
80217280: c9 a8        	j	0x80217352 <.LBB1_7+0x16>

0000000080217282 <.Lpcrel_hi10>:
;             Release => panic!("there is no such thing as a release load"),
80217282: 17 05 02 00  	auipc	a0, 0x20
80217286: 93 05 65 c6  	addi	a1, a0, -0x39a
8021728a: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021728e: 05 45        	li	a0, 0x1
80217290: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
80217294: 23 34 b4 f6  	sd	a1, -0x98(s0)
80217298: 23 38 a4 f6  	sd	a0, -0x90(s0)

000000008021729c <.Lpcrel_hi11>:
8021729c: 17 c5 01 00  	auipc	a0, 0x1c
802172a0: 13 05 45 ff  	addi	a0, a0, -0xc
802172a4: 0c 61        	ld	a1, 0x0(a0)
802172a6: 08 65        	ld	a0, 0x8(a0)
802172a8: 23 34 b4 f8  	sd	a1, -0x78(s0)
802172ac: 23 38 a4 f8  	sd	a0, -0x70(s0)

00000000802172b0 <.Lpcrel_hi12>:
802172b0: 17 05 02 00  	auipc	a0, 0x20
802172b4: 13 05 85 c4  	addi	a0, a0, -0x3b8
802172b8: 23 3c a4 f6  	sd	a0, -0x88(s0)
802172bc: 01 45        	li	a0, 0x0
802172be: 23 30 a4 f8  	sd	a0, -0x80(s0)

00000000802172c2 <.Lpcrel_hi13>:
;             Release => panic!("there is no such thing as a release load"),
802172c2: 17 05 02 00  	auipc	a0, 0x20
802172c6: 93 05 e5 ca  	addi	a1, a0, -0x352
802172ca: 13 05 84 f6  	addi	a0, s0, -0x98
802172ce: 97 90 01 00  	auipc	ra, 0x19
802172d2: e7 80 a0 ed  	jalr	-0x126(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802172d6 <.LBB1_5>:
802172d6: 03 35 04 f5  	ld	a0, -0xb0(s0)
;             Acquire => intrinsics::atomic_load_acquire(dst),
802172da: 03 05 05 00  	lb	a0, 0x0(a0)
802172de: 0f 00 30 02  	fence	r, rw
802172e2: a3 03 a4 f6  	sb	a0, -0x99(s0)
802172e6: b5 a0        	j	0x80217352 <.LBB1_7+0x16>

00000000802172e8 <.Lpcrel_hi14>:
;             AcqRel => panic!("there is no such thing as an acquire-release load"),
802172e8: 17 05 02 00  	auipc	a0, 0x20
802172ec: 93 05 85 cd  	addi	a1, a0, -0x328
802172f0: 23 30 b4 fe  	sd	a1, -0x20(s0)
802172f4: 05 45        	li	a0, 0x1
802172f6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
802172fa: 23 3c b4 f8  	sd	a1, -0x68(s0)
802172fe: 23 30 a4 fa  	sd	a0, -0x60(s0)

0000000080217302 <.Lpcrel_hi15>:
80217302: 17 c5 01 00  	auipc	a0, 0x1c
80217306: 13 05 e5 f8  	addi	a0, a0, -0x72
8021730a: 0c 61        	ld	a1, 0x0(a0)
8021730c: 08 65        	ld	a0, 0x8(a0)
8021730e: 23 3c b4 fa  	sd	a1, -0x48(s0)
80217312: 23 30 a4 fc  	sd	a0, -0x40(s0)

0000000080217316 <.Lpcrel_hi16>:
80217316: 17 05 02 00  	auipc	a0, 0x20
8021731a: 13 05 25 be  	addi	a0, a0, -0x41e
8021731e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80217322: 01 45        	li	a0, 0x0
80217324: 23 38 a4 fa  	sd	a0, -0x50(s0)

0000000080217328 <.Lpcrel_hi17>:
;             AcqRel => panic!("there is no such thing as an acquire-release load"),
80217328: 17 05 02 00  	auipc	a0, 0x20
8021732c: 93 05 85 ca  	addi	a1, a0, -0x358
80217330: 13 05 84 f9  	addi	a0, s0, -0x68
80217334: 97 90 01 00  	auipc	ra, 0x19
80217338: e7 80 40 e7  	jalr	-0x18c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021733c <.LBB1_7>:
8021733c: 03 35 04 f5  	ld	a0, -0xb0(s0)
;             SeqCst => intrinsics::atomic_load_seqcst(dst),
80217340: 0f 00 30 03  	fence	rw, rw
80217344: 03 05 05 00  	lb	a0, 0x0(a0)
80217348: 0f 00 30 02  	fence	r, rw
8021734c: a3 03 a4 f6  	sb	a0, -0x99(s0)
80217350: 09 a0        	j	0x80217352 <.LBB1_7+0x16>
; }
80217352: 03 45 74 f6  	lbu	a0, -0x99(s0)
80217356: aa 70        	ld	ra, 0xa8(sp)
80217358: 0a 74        	ld	s0, 0xa0(sp)
8021735a: 4d 61        	addi	sp, sp, 0xb0
8021735c: 82 80        	ret

000000008021735e <_ZN4core4sync6atomic12atomic_store17h8b0d138a107b5ce5E>:
; unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
8021735e: 31 71        	addi	sp, sp, -0xc0
80217360: 06 fd        	sd	ra, 0xb8(sp)
80217362: 22 f9        	sd	s0, 0xb0(sp)
80217364: 80 01        	addi	s0, sp, 0xc0
80217366: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8021736a: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8021736e: a3 0f c4 f4  	sb	a2, -0xa1(s0)
80217372: 23 30 a4 fc  	sd	a0, -0x40(s0)
80217376: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match order {
8021737a: 03 45 f4 f5  	lbu	a0, -0xa1(s0)
8021737e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80217382: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         match order {
80217386: 0e 05        	slli	a0, a0, 0x3

0000000080217388 <.Lpcrel_hi18>:
80217388: 97 05 02 00  	auipc	a1, 0x20
8021738c: 93 85 05 ac  	addi	a1, a1, -0x540
80217390: 2e 95        	add	a0, a0, a1
80217392: 08 61        	ld	a0, 0x0(a0)
80217394: 02 85        	jr	a0
80217396: 00 00        	unimp

0000000080217398 <.LBB2_3>:
80217398: 03 35 04 f4  	ld	a0, -0xc0(s0)
8021739c: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             Relaxed => intrinsics::atomic_store_relaxed(dst, val),
802173a0: 88 e1        	sd	a0, 0x0(a1)
802173a2: e9 a0        	j	0x8021746c <.LBB2_7+0x10>

00000000802173a4 <.LBB2_4>:
802173a4: 03 35 04 f4  	ld	a0, -0xc0(s0)
802173a8: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             Release => intrinsics::atomic_store_release(dst, val),
802173ac: 0f 00 10 03  	fence	rw, w
802173b0: 88 e1        	sd	a0, 0x0(a1)
802173b2: 6d a8        	j	0x8021746c <.LBB2_7+0x10>

00000000802173b4 <.Lpcrel_hi19>:
;             Acquire => panic!("there is no such thing as an acquire store"),
802173b4: 17 05 02 00  	auipc	a0, 0x20
802173b8: 93 05 45 c6  	addi	a1, a0, -0x39c
802173bc: 23 38 b4 fc  	sd	a1, -0x30(s0)
802173c0: 05 45        	li	a0, 0x1
802173c2: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
802173c6: 23 30 b4 f6  	sd	a1, -0xa0(s0)
802173ca: 23 34 a4 f6  	sd	a0, -0x98(s0)

00000000802173ce <.Lpcrel_hi20>:
802173ce: 17 c5 01 00  	auipc	a0, 0x1c
802173d2: 13 05 25 ec  	addi	a0, a0, -0x13e
802173d6: 0c 61        	ld	a1, 0x0(a0)
802173d8: 08 65        	ld	a0, 0x8(a0)
802173da: 23 30 b4 f8  	sd	a1, -0x80(s0)
802173de: 23 34 a4 f8  	sd	a0, -0x78(s0)

00000000802173e2 <.Lpcrel_hi21>:
802173e2: 17 05 02 00  	auipc	a0, 0x20
802173e6: 13 05 65 b1  	addi	a0, a0, -0x4ea
802173ea: 23 38 a4 f6  	sd	a0, -0x90(s0)
802173ee: 01 45        	li	a0, 0x0
802173f0: 23 3c a4 f6  	sd	a0, -0x88(s0)

00000000802173f4 <.Lpcrel_hi22>:
;             Acquire => panic!("there is no such thing as an acquire store"),
802173f4: 17 05 02 00  	auipc	a0, 0x20
802173f8: 93 05 45 c3  	addi	a1, a0, -0x3cc
802173fc: 13 05 04 f6  	addi	a0, s0, -0xa0
80217400: 97 90 01 00  	auipc	ra, 0x19
80217404: e7 80 80 da  	jalr	-0x258(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080217408 <.Lpcrel_hi23>:
;             AcqRel => panic!("there is no such thing as an acquire-release store"),
80217408: 17 05 02 00  	auipc	a0, 0x20
8021740c: 93 05 05 c7  	addi	a1, a0, -0x390
80217410: 23 30 b4 fe  	sd	a1, -0x20(s0)
80217414: 05 45        	li	a0, 0x1
80217416: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021741a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021741e: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080217422 <.Lpcrel_hi24>:
80217422: 17 c5 01 00  	auipc	a0, 0x1c
80217426: 13 05 e5 e6  	addi	a0, a0, -0x192
8021742a: 0c 61        	ld	a1, 0x0(a0)
8021742c: 08 65        	ld	a0, 0x8(a0)
8021742e: 23 38 b4 fa  	sd	a1, -0x50(s0)
80217432: 23 3c a4 fa  	sd	a0, -0x48(s0)

0000000080217436 <.Lpcrel_hi25>:
80217436: 17 05 02 00  	auipc	a0, 0x20
8021743a: 13 05 25 ac  	addi	a0, a0, -0x53e
8021743e: 23 30 a4 fa  	sd	a0, -0x60(s0)
80217442: 01 45        	li	a0, 0x0
80217444: 23 34 a4 fa  	sd	a0, -0x58(s0)

0000000080217448 <.Lpcrel_hi26>:
;             AcqRel => panic!("there is no such thing as an acquire-release store"),
80217448: 17 05 02 00  	auipc	a0, 0x20
8021744c: 93 05 05 c4  	addi	a1, a0, -0x3c0
80217450: 13 05 04 f9  	addi	a0, s0, -0x70
80217454: 97 90 01 00  	auipc	ra, 0x19
80217458: e7 80 40 d5  	jalr	-0x2ac(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021745c <.LBB2_7>:
8021745c: 03 35 04 f4  	ld	a0, -0xc0(s0)
80217460: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             SeqCst => intrinsics::atomic_store_seqcst(dst, val),
80217464: 0f 00 10 03  	fence	rw, w
80217468: 88 e1        	sd	a0, 0x0(a1)
8021746a: 09 a0        	j	0x8021746c <.LBB2_7+0x10>
8021746c: ea 70        	ld	ra, 0xb8(sp)
8021746e: 4a 74        	ld	s0, 0xb0(sp)
; }
80217470: 29 61        	addi	sp, sp, 0xc0
80217472: 82 80        	ret

0000000080217474 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$16compare_exchange17h5640f5653347616aE>:
;     pub fn compare_exchange(
80217474: 39 71        	addi	sp, sp, -0x40
80217476: 06 fc        	sd	ra, 0x38(sp)
80217478: 22 f8        	sd	s0, 0x30(sp)
8021747a: 80 00        	addi	s0, sp, 0x40
8021747c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80217480: 23 38 b4 fc  	sd	a1, -0x30(s0)
80217484: 23 3c c4 fc  	sd	a2, -0x28(s0)
80217488: 23 03 d4 fe  	sb	a3, -0x1a(s0)
8021748c: a3 03 e4 fe  	sb	a4, -0x19(s0)
;         unsafe { atomic_compare_exchange(self.p.get(), current, new, success, failure) }
80217490: 23 34 a4 fe  	sd	a0, -0x18(s0)
80217494: 97 00 00 00  	auipc	ra, 0x0
80217498: e7 80 00 08  	jalr	0x80(ra) <_ZN4core4sync6atomic23atomic_compare_exchange17h454ea63b8ab005c5E>
8021749c: e2 70        	ld	ra, 0x38(sp)
8021749e: 42 74        	ld	s0, 0x30(sp)
;     }
802174a0: 21 61        	addi	sp, sp, 0x40
802174a2: 82 80        	ret

00000000802174a4 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$3new17h0a9812749ab5c07bE>:
;     pub const fn new(p: *mut T) -> AtomicPtr<T> {
802174a4: 79 71        	addi	sp, sp, -0x30
802174a6: 06 f4        	sd	ra, 0x28(sp)
802174a8: 22 f0        	sd	s0, 0x20(sp)
802174aa: 00 18        	addi	s0, sp, 0x30
802174ac: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         UnsafeCell { value }
802174b0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         AtomicPtr { p: UnsafeCell::new(p) }
802174b4: 03 35 04 fe  	ld	a0, -0x20(s0)
802174b8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
802174bc: 03 35 84 fd  	ld	a0, -0x28(s0)
802174c0: a2 70        	ld	ra, 0x28(sp)
802174c2: 02 74        	ld	s0, 0x20(sp)
802174c4: 45 61        	addi	sp, sp, 0x30
802174c6: 82 80        	ret

00000000802174c8 <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$4load17hc5a27d0433403847E>:
;     pub fn load(&self, order: Ordering) -> *mut T {
802174c8: 79 71        	addi	sp, sp, -0x30
802174ca: 06 f4        	sd	ra, 0x28(sp)
802174cc: 22 f0        	sd	s0, 0x20(sp)
802174ce: 00 18        	addi	s0, sp, 0x30
802174d0: 23 3c a4 fc  	sd	a0, -0x28(s0)
802174d4: a3 03 b4 fe  	sb	a1, -0x19(s0)
;         unsafe { atomic_load(self.p.get(), order) }
802174d8: 23 34 a4 fe  	sd	a0, -0x18(s0)
802174dc: 97 00 00 00  	auipc	ra, 0x0
802174e0: e7 80 00 c5  	jalr	-0x3b0(ra) <_ZN4core4sync6atomic11atomic_load17h3547056283e16e6bE>
802174e4: a2 70        	ld	ra, 0x28(sp)
802174e6: 02 74        	ld	s0, 0x20(sp)
;     }
802174e8: 45 61        	addi	sp, sp, 0x30
802174ea: 82 80        	ret

00000000802174ec <_ZN4core4sync6atomic18AtomicPtr$LT$T$GT$5store17hc6a2e8109468d1beE>:
;     pub fn store(&self, ptr: *mut T, order: Ordering) {
802174ec: 79 71        	addi	sp, sp, -0x30
802174ee: 06 f4        	sd	ra, 0x28(sp)
802174f0: 22 f0        	sd	s0, 0x20(sp)
802174f2: 00 18        	addi	s0, sp, 0x30
802174f4: 23 38 a4 fc  	sd	a0, -0x30(s0)
802174f8: 23 3c b4 fc  	sd	a1, -0x28(s0)
802174fc: a3 03 c4 fe  	sb	a2, -0x19(s0)
;             atomic_store(self.p.get(), ptr, order);
80217500: 23 34 a4 fe  	sd	a0, -0x18(s0)
80217504: 97 00 00 00  	auipc	ra, 0x0
80217508: e7 80 a0 e5  	jalr	-0x1a6(ra) <_ZN4core4sync6atomic12atomic_store17h8b0d138a107b5ce5E>
8021750c: a2 70        	ld	ra, 0x28(sp)
8021750e: 02 74        	ld	s0, 0x20(sp)
;     }
80217510: 45 61        	addi	sp, sp, 0x30
80217512: 82 80        	ret

0000000080217514 <_ZN4core4sync6atomic23atomic_compare_exchange17h454ea63b8ab005c5E>:
; unsafe fn atomic_compare_exchange<T: Copy>(
80217514: 69 71        	addi	sp, sp, -0x130
80217516: 06 f6        	sd	ra, 0x128(sp)
80217518: 22 f2        	sd	s0, 0x120(sp)
8021751a: 00 1a        	addi	s0, sp, 0x130
8021751c: 23 30 c4 f0  	sd	a2, -0x100(s0)
80217520: 23 34 b4 f0  	sd	a1, -0xf8(s0)
80217524: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80217528: 23 03 d4 f2  	sb	a3, -0xda(s0)
8021752c: a3 03 e4 f2  	sb	a4, -0xd9(s0)
80217530: 23 34 a4 fa  	sd	a0, -0x58(s0)
80217534: 23 38 b4 fa  	sd	a1, -0x50(s0)
80217538: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         match (success, failure) {
8021753c: 03 45 64 f2  	lbu	a0, -0xda(s0)
80217540: 23 3c a4 f0  	sd	a0, -0xe8(s0)
80217544: 03 35 84 f1  	ld	a0, -0xe8(s0)
;         match (success, failure) {
80217548: 0e 05        	slli	a0, a0, 0x3

000000008021754a <.Lpcrel_hi27>:
8021754a: 97 05 02 00  	auipc	a1, 0x20
8021754e: 93 85 65 92  	addi	a1, a1, -0x6da
80217552: 2e 95        	add	a0, a0, a1
80217554: 08 61        	ld	a0, 0x0(a0)
80217556: 02 85        	jr	a0
80217558: 00 00        	unimp

000000008021755a <.LBB7_3>:
8021755a: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8021755e: 23 3c a4 ee  	sd	a0, -0x108(s0)
80217562: 61 c1        	beqz	a0, 0x80217622 <.LBB7_15+0x32>
80217564: 09 a0        	j	0x80217566 <.LBB7_3+0xc>
80217566: 03 35 84 ef  	ld	a0, -0x108(s0)
8021756a: 89 45        	li	a1, 0x2
;         match (success, failure) {
8021756c: 63 00 b5 0e  	beq	a0, a1, 0x8021764c <.LBB7_15+0x5c>
80217570: 09 a0        	j	0x80217572 <.LBB7_3+0x18>
80217572: 03 35 84 ef  	ld	a0, -0x108(s0)
80217576: 91 45        	li	a1, 0x4
;         match (success, failure) {
80217578: 63 0f b5 0e  	beq	a0, a1, 0x80217676 <.LBB7_15+0x86>
8021757c: 69 a8        	j	0x80217616 <.LBB7_15+0x26>

000000008021757e <.LBB7_6>:
8021757e: 03 45 74 f2  	lbu	a0, -0xd9(s0)
80217582: 23 38 a4 ee  	sd	a0, -0x110(s0)
80217586: 63 0c 05 12  	beqz	a0, 0x802176be <.LBB7_15+0xce>
8021758a: 09 a0        	j	0x8021758c <.LBB7_6+0xe>
8021758c: 03 35 04 ef  	ld	a0, -0x110(s0)
80217590: 89 45        	li	a1, 0x2
;         match (success, failure) {
80217592: 63 0b b5 14  	beq	a0, a1, 0x802176e8 <.LBB7_15+0xf8>
80217596: 09 a0        	j	0x80217598 <.LBB7_6+0x1a>
80217598: 03 35 04 ef  	ld	a0, -0x110(s0)
8021759c: 91 45        	li	a1, 0x4
;         match (success, failure) {
8021759e: 63 0a b5 16  	beq	a0, a1, 0x80217712 <.LBB7_15+0x122>
802175a2: 95 a8        	j	0x80217616 <.LBB7_15+0x26>

00000000802175a4 <.LBB7_9>:
802175a4: 03 45 74 f2  	lbu	a0, -0xd9(s0)
802175a8: 23 34 a4 ee  	sd	a0, -0x118(s0)
802175ac: 63 08 05 18  	beqz	a0, 0x8021773c <.LBB7_15+0x14c>
802175b0: 09 a0        	j	0x802175b2 <.LBB7_9+0xe>
802175b2: 03 35 84 ee  	ld	a0, -0x118(s0)
802175b6: 89 45        	li	a1, 0x2
;         match (success, failure) {
802175b8: 63 07 b5 1a  	beq	a0, a1, 0x80217766 <.LBB7_15+0x176>
802175bc: 09 a0        	j	0x802175be <.LBB7_9+0x1a>
802175be: 03 35 84 ee  	ld	a0, -0x118(s0)
802175c2: 91 45        	li	a1, 0x4
;         match (success, failure) {
802175c4: 63 06 b5 1c  	beq	a0, a1, 0x80217790 <.LBB7_15+0x1a0>
802175c8: b9 a0        	j	0x80217616 <.LBB7_15+0x26>

00000000802175ca <.LBB7_12>:
802175ca: 03 45 74 f2  	lbu	a0, -0xd9(s0)
802175ce: 23 30 a4 ee  	sd	a0, -0x120(s0)
802175d2: 63 04 05 1e  	beqz	a0, 0x802177ba <.LBB7_15+0x1ca>
802175d6: 09 a0        	j	0x802175d8 <.LBB7_12+0xe>
802175d8: 03 35 04 ee  	ld	a0, -0x120(s0)
802175dc: 89 45        	li	a1, 0x2
;         match (success, failure) {
802175de: 63 03 b5 20  	beq	a0, a1, 0x802177e4 <.LBB7_15+0x1f4>
802175e2: 09 a0        	j	0x802175e4 <.LBB7_12+0x1a>
802175e4: 03 35 04 ee  	ld	a0, -0x120(s0)
802175e8: 91 45        	li	a1, 0x4
;         match (success, failure) {
802175ea: 63 02 b5 22  	beq	a0, a1, 0x8021780e <.LBB7_15+0x21e>
802175ee: 25 a0        	j	0x80217616 <.LBB7_15+0x26>

00000000802175f0 <.LBB7_15>:
802175f0: 03 45 74 f2  	lbu	a0, -0xd9(s0)
802175f4: 23 3c a4 ec  	sd	a0, -0x128(s0)
802175f8: 63 00 05 24  	beqz	a0, 0x80217838 <.LBB7_15+0x248>
802175fc: 09 a0        	j	0x802175fe <.LBB7_15+0xe>
802175fe: 03 35 84 ed  	ld	a0, -0x128(s0)
80217602: 89 45        	li	a1, 0x2
;         match (success, failure) {
80217604: 63 0f b5 24  	beq	a0, a1, 0x80217862 <.LBB7_15+0x272>
80217608: 09 a0        	j	0x8021760a <.LBB7_15+0x1a>
8021760a: 03 35 84 ed  	ld	a0, -0x128(s0)
8021760e: 91 45        	li	a1, 0x4
;         match (success, failure) {
80217610: 63 0e b5 26  	beq	a0, a1, 0x8021788c <.LBB7_15+0x29c>
80217614: 09 a0        	j	0x80217616 <.LBB7_15+0x26>
80217616: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8021761a: 85 45        	li	a1, 0x1
8021761c: 63 05 b5 2c  	beq	a0, a1, 0x802178e6 <.Lpcrel_hi28>
80217620: 29 ae        	j	0x8021793a <.Lpcrel_hi32>
80217622: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217626: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021762a: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),
8021762e: af b5 06 10  	lr.d	a1, (a3)
80217632: 63 95 a5 00  	bne	a1, a0, 0x8021763c <.LBB7_15+0x4c>
80217636: 2f b6 e6 18  	sc.d	a2, a4, (a3)
8021763a: 75 fa        	bnez	a2, 0x8021762e <.LBB7_15+0x3e>
8021763c: 2d 8d        	xor	a0, a0, a1
8021763e: 13 35 15 00  	seqz	a0, a0
80217642: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217646: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021764a: 99 a8        	j	0x802176a0 <.LBB7_15+0xb0>
8021764c: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217650: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217654: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),
80217658: af b5 06 14  	lr.d.aq	a1, (a3)
8021765c: 63 95 a5 00  	bne	a1, a0, 0x80217666 <.LBB7_15+0x76>
80217660: 2f b6 e6 18  	sc.d	a2, a4, (a3)
80217664: 75 fa        	bnez	a2, 0x80217658 <.LBB7_15+0x68>
80217666: 2d 8d        	xor	a0, a0, a1
80217668: 13 35 15 00  	seqz	a0, a0
8021766c: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217670: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217674: 35 a0        	j	0x802176a0 <.LBB7_15+0xb0>
80217676: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021767a: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021767e: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),
80217682: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217686: 63 95 a5 00  	bne	a1, a0, 0x80217690 <.LBB7_15+0xa0>
8021768a: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021768e: 75 fa        	bnez	a2, 0x80217682 <.LBB7_15+0x92>
80217690: 2d 8d        	xor	a0, a0, a1
80217692: 13 35 15 00  	seqz	a0, a0
80217696: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021769a: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021769e: 09 a0        	j	0x802176a0 <.LBB7_15+0xb0>
;     let (val, ok) = unsafe {
802176a0: 03 35 84 f3  	ld	a0, -0xc8(s0)
802176a4: 23 38 a4 ec  	sd	a0, -0x130(s0)
802176a8: 23 30 a4 fc  	sd	a0, -0x40(s0)
802176ac: 83 45 04 f4  	lbu	a1, -0xc0(s0)
802176b0: 13 f5 15 00  	andi	a0, a1, 0x1
802176b4: a3 07 b4 fc  	sb	a1, -0x31(s0)
;     if ok { Ok(val) } else { Err(val) }
802176b8: 63 17 05 20  	bnez	a0, 0x802178c6 <.LBB7_15+0x2d6>
802176bc: ed aa        	j	0x802178b6 <.LBB7_15+0x2c6>
802176be: 03 35 84 f0  	ld	a0, -0xf8(s0)
802176c2: 83 36 04 f1  	ld	a3, -0xf0(s0)
802176c6: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),
802176ca: af b5 06 10  	lr.d	a1, (a3)
802176ce: 63 95 a5 00  	bne	a1, a0, 0x802176d8 <.LBB7_15+0xe8>
802176d2: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802176d6: 75 fa        	bnez	a2, 0x802176ca <.LBB7_15+0xda>
802176d8: 2d 8d        	xor	a0, a0, a1
802176da: 13 35 15 00  	seqz	a0, a0
802176de: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802176e2: 23 00 a4 f4  	sb	a0, -0xc0(s0)
802176e6: 6d bf        	j	0x802176a0 <.LBB7_15+0xb0>
802176e8: 03 35 84 f0  	ld	a0, -0xf8(s0)
802176ec: 83 36 04 f1  	ld	a3, -0xf0(s0)
802176f0: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),
802176f4: af b5 06 14  	lr.d.aq	a1, (a3)
802176f8: 63 95 a5 00  	bne	a1, a0, 0x80217702 <.LBB7_15+0x112>
802176fc: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217700: 75 fa        	bnez	a2, 0x802176f4 <.LBB7_15+0x104>
80217702: 2d 8d        	xor	a0, a0, a1
80217704: 13 35 15 00  	seqz	a0, a0
80217708: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021770c: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217710: 41 bf        	j	0x802176a0 <.LBB7_15+0xb0>
80217712: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217716: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021771a: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),
8021771e: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217722: 63 95 a5 00  	bne	a1, a0, 0x8021772c <.LBB7_15+0x13c>
80217726: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021772a: 75 fa        	bnez	a2, 0x8021771e <.LBB7_15+0x12e>
8021772c: 2d 8d        	xor	a0, a0, a1
8021772e: 13 35 15 00  	seqz	a0, a0
80217732: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217736: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021773a: 9d b7        	j	0x802176a0 <.LBB7_15+0xb0>
8021773c: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217740: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217744: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
80217748: af b5 06 14  	lr.d.aq	a1, (a3)
8021774c: 63 95 a5 00  	bne	a1, a0, 0x80217756 <.LBB7_15+0x166>
80217750: 2f b6 e6 18  	sc.d	a2, a4, (a3)
80217754: 75 fa        	bnez	a2, 0x80217748 <.LBB7_15+0x158>
80217756: 2d 8d        	xor	a0, a0, a1
80217758: 13 35 15 00  	seqz	a0, a0
8021775c: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217760: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217764: 35 bf        	j	0x802176a0 <.LBB7_15+0xb0>
80217766: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021776a: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021776e: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
80217772: af b5 06 14  	lr.d.aq	a1, (a3)
80217776: 63 95 a5 00  	bne	a1, a0, 0x80217780 <.LBB7_15+0x190>
8021777a: 2f b6 e6 18  	sc.d	a2, a4, (a3)
8021777e: 75 fa        	bnez	a2, 0x80217772 <.LBB7_15+0x182>
80217780: 2d 8d        	xor	a0, a0, a1
80217782: 13 35 15 00  	seqz	a0, a0
80217786: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021778a: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021778e: 09 bf        	j	0x802176a0 <.LBB7_15+0xb0>
80217790: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217794: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217798: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),
8021779c: af b5 06 16  	lr.d.aqrl	a1, (a3)
802177a0: 63 95 a5 00  	bne	a1, a0, 0x802177aa <.LBB7_15+0x1ba>
802177a4: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802177a8: 75 fa        	bnez	a2, 0x8021779c <.LBB7_15+0x1ac>
802177aa: 2d 8d        	xor	a0, a0, a1
802177ac: 13 35 15 00  	seqz	a0, a0
802177b0: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802177b4: 23 00 a4 f4  	sb	a0, -0xc0(s0)
802177b8: e5 b5        	j	0x802176a0 <.LBB7_15+0xb0>
802177ba: 03 35 84 f0  	ld	a0, -0xf8(s0)
802177be: 83 36 04 f1  	ld	a3, -0xf0(s0)
802177c2: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),
802177c6: af b5 06 14  	lr.d.aq	a1, (a3)
802177ca: 63 95 a5 00  	bne	a1, a0, 0x802177d4 <.LBB7_15+0x1e4>
802177ce: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802177d2: 75 fa        	bnez	a2, 0x802177c6 <.LBB7_15+0x1d6>
802177d4: 2d 8d        	xor	a0, a0, a1
802177d6: 13 35 15 00  	seqz	a0, a0
802177da: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802177de: 23 00 a4 f4  	sb	a0, -0xc0(s0)
802177e2: 7d bd        	j	0x802176a0 <.LBB7_15+0xb0>
802177e4: 03 35 84 f0  	ld	a0, -0xf8(s0)
802177e8: 83 36 04 f1  	ld	a3, -0xf0(s0)
802177ec: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),
802177f0: af b5 06 14  	lr.d.aq	a1, (a3)
802177f4: 63 95 a5 00  	bne	a1, a0, 0x802177fe <.LBB7_15+0x20e>
802177f8: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802177fc: 75 fa        	bnez	a2, 0x802177f0 <.LBB7_15+0x200>
802177fe: 2d 8d        	xor	a0, a0, a1
80217800: 13 35 15 00  	seqz	a0, a0
80217804: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217808: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021780c: 51 bd        	j	0x802176a0 <.LBB7_15+0xb0>
8021780e: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217812: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217816: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),
8021781a: af b5 06 16  	lr.d.aqrl	a1, (a3)
8021781e: 63 95 a5 00  	bne	a1, a0, 0x80217828 <.LBB7_15+0x238>
80217822: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217826: 75 fa        	bnez	a2, 0x8021781a <.LBB7_15+0x22a>
80217828: 2d 8d        	xor	a0, a0, a1
8021782a: 13 35 15 00  	seqz	a0, a0
8021782e: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217832: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217836: ad b5        	j	0x802176a0 <.LBB7_15+0xb0>
80217838: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021783c: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217840: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),
80217844: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217848: 63 95 a5 00  	bne	a1, a0, 0x80217852 <.LBB7_15+0x262>
8021784c: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217850: 75 fa        	bnez	a2, 0x80217844 <.LBB7_15+0x254>
80217852: 2d 8d        	xor	a0, a0, a1
80217854: 13 35 15 00  	seqz	a0, a0
80217858: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021785c: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217860: 81 b5        	j	0x802176a0 <.LBB7_15+0xb0>
80217862: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217866: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021786a: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),
8021786e: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217872: 63 95 a5 00  	bne	a1, a0, 0x8021787c <.LBB7_15+0x28c>
80217876: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021787a: 75 fa        	bnez	a2, 0x8021786e <.LBB7_15+0x27e>
8021787c: 2d 8d        	xor	a0, a0, a1
8021787e: 13 35 15 00  	seqz	a0, a0
80217882: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217886: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021788a: 19 bd        	j	0x802176a0 <.LBB7_15+0xb0>
8021788c: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217890: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217894: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),
80217898: af b5 06 16  	lr.d.aqrl	a1, (a3)
8021789c: 63 95 a5 00  	bne	a1, a0, 0x802178a6 <.LBB7_15+0x2b6>
802178a0: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802178a4: 75 fa        	bnez	a2, 0x80217898 <.LBB7_15+0x2a8>
802178a6: 2d 8d        	xor	a0, a0, a1
802178a8: 13 35 15 00  	seqz	a0, a0
802178ac: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802178b0: 23 00 a4 f4  	sb	a0, -0xc0(s0)
802178b4: f5 b3        	j	0x802176a0 <.LBB7_15+0xb0>
802178b6: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if ok { Ok(val) } else { Err(val) }
802178ba: 23 38 a4 f2  	sd	a0, -0xd0(s0)
802178be: 05 45        	li	a0, 0x1
802178c0: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802178c4: 09 a8        	j	0x802178d6 <.LBB7_15+0x2e6>
802178c6: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if ok { Ok(val) } else { Err(val) }
802178ca: 23 38 a4 f2  	sd	a0, -0xd0(s0)
802178ce: 01 45        	li	a0, 0x0
802178d0: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802178d4: 09 a0        	j	0x802178d6 <.LBB7_15+0x2e6>
; }
802178d6: 03 35 84 f2  	ld	a0, -0xd8(s0)
802178da: 83 35 04 f3  	ld	a1, -0xd0(s0)
802178de: b2 70        	ld	ra, 0x128(sp)
802178e0: 12 74        	ld	s0, 0x120(sp)
802178e2: 55 61        	addi	sp, sp, 0x130
802178e4: 82 80        	ret

00000000802178e6 <.Lpcrel_hi28>:
;             (_, Release) => panic!("there is no such thing as a release failure ordering"),
802178e6: 17 f5 01 00  	auipc	a0, 0x1f
802178ea: 93 05 25 7f  	addi	a1, a0, 0x7f2
802178ee: 23 38 b4 fc  	sd	a1, -0x30(s0)
802178f2: 05 45        	li	a0, 0x1
802178f4: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
802178f8: 23 3c b4 f6  	sd	a1, -0x88(s0)
802178fc: 23 30 a4 f8  	sd	a0, -0x80(s0)

0000000080217900 <.Lpcrel_hi29>:
80217900: 17 c5 01 00  	auipc	a0, 0x1c
80217904: 13 05 05 99  	addi	a0, a0, -0x670
80217908: 0c 61        	ld	a1, 0x0(a0)
8021790a: 08 65        	ld	a0, 0x8(a0)
8021790c: 23 3c b4 f8  	sd	a1, -0x68(s0)
80217910: 23 30 a4 fa  	sd	a0, -0x60(s0)

0000000080217914 <.Lpcrel_hi30>:
80217914: 17 f5 01 00  	auipc	a0, 0x1f
80217918: 13 05 45 5e  	addi	a0, a0, 0x5e4
8021791c: 23 34 a4 f8  	sd	a0, -0x78(s0)
80217920: 01 45        	li	a0, 0x0
80217922: 23 38 a4 f8  	sd	a0, -0x70(s0)

0000000080217926 <.Lpcrel_hi31>:
;             (_, Release) => panic!("there is no such thing as a release failure ordering"),
80217926: 17 f5 01 00  	auipc	a0, 0x1f
8021792a: 93 05 25 7c  	addi	a1, a0, 0x7c2
8021792e: 13 05 84 f7  	addi	a0, s0, -0x88
80217932: 97 90 01 00  	auipc	ra, 0x19
80217936: e7 80 60 87  	jalr	-0x78a(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021793a <.Lpcrel_hi32>:
;             (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
8021793a: 17 05 02 00  	auipc	a0, 0x20
8021793e: 93 05 65 80  	addi	a1, a0, -0x7fa
80217942: 23 30 b4 fe  	sd	a1, -0x20(s0)
80217946: 05 45        	li	a0, 0x1
80217948: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021794c: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80217950: 23 38 a4 f4  	sd	a0, -0xb0(s0)

0000000080217954 <.Lpcrel_hi33>:
80217954: 17 c5 01 00  	auipc	a0, 0x1c
80217958: 13 05 c5 93  	addi	a0, a0, -0x6c4
8021795c: 0c 61        	ld	a1, 0x0(a0)
8021795e: 08 65        	ld	a0, 0x8(a0)
80217960: 23 34 b4 f6  	sd	a1, -0x98(s0)
80217964: 23 38 a4 f6  	sd	a0, -0x90(s0)

0000000080217968 <.Lpcrel_hi34>:
80217968: 17 f5 01 00  	auipc	a0, 0x1f
8021796c: 13 05 05 59  	addi	a0, a0, 0x590
80217970: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80217974: 01 45        	li	a0, 0x0
80217976: 23 30 a4 f6  	sd	a0, -0xa0(s0)

000000008021797a <.Lpcrel_hi35>:
;             (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
8021797a: 17 f5 01 00  	auipc	a0, 0x1f
8021797e: 93 05 65 7d  	addi	a1, a0, 0x7d6
80217982: 13 05 84 f4  	addi	a0, s0, -0xb8
80217986: 97 90 01 00  	auipc	ra, 0x19
8021798a: e7 80 20 82  	jalr	-0x7de(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021798e <_ZN4core4sync6atomic28atomic_compare_exchange_weak17head9b4f5068fd6a7E>:
; unsafe fn atomic_compare_exchange_weak<T: Copy>(
8021798e: 69 71        	addi	sp, sp, -0x130
80217990: 06 f6        	sd	ra, 0x128(sp)
80217992: 22 f2        	sd	s0, 0x120(sp)
80217994: 00 1a        	addi	s0, sp, 0x130
80217996: 23 30 c4 f0  	sd	a2, -0x100(s0)
8021799a: 23 34 b4 f0  	sd	a1, -0xf8(s0)
8021799e: 23 38 a4 f0  	sd	a0, -0xf0(s0)
802179a2: 23 03 d4 f2  	sb	a3, -0xda(s0)
802179a6: a3 03 e4 f2  	sb	a4, -0xd9(s0)
802179aa: 23 34 a4 fa  	sd	a0, -0x58(s0)
802179ae: 23 38 b4 fa  	sd	a1, -0x50(s0)
802179b2: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         match (success, failure) {
802179b6: 03 45 64 f2  	lbu	a0, -0xda(s0)
802179ba: 23 3c a4 f0  	sd	a0, -0xe8(s0)
802179be: 03 35 84 f1  	ld	a0, -0xe8(s0)
;         match (success, failure) {
802179c2: 0e 05        	slli	a0, a0, 0x3

00000000802179c4 <.Lpcrel_hi36>:
802179c4: 97 f5 01 00  	auipc	a1, 0x1f
802179c8: 93 85 45 4d  	addi	a1, a1, 0x4d4
802179cc: 2e 95        	add	a0, a0, a1
802179ce: 08 61        	ld	a0, 0x0(a0)
802179d0: 02 85        	jr	a0
802179d2: 00 00        	unimp

00000000802179d4 <.LBB8_3>:
802179d4: 03 45 74 f2  	lbu	a0, -0xd9(s0)
802179d8: 23 3c a4 ee  	sd	a0, -0x108(s0)
802179dc: 61 c1        	beqz	a0, 0x80217a9c <.LBB8_15+0x32>
802179de: 09 a0        	j	0x802179e0 <.LBB8_3+0xc>
802179e0: 03 35 84 ef  	ld	a0, -0x108(s0)
802179e4: 89 45        	li	a1, 0x2
;         match (success, failure) {
802179e6: 63 00 b5 0e  	beq	a0, a1, 0x80217ac6 <.LBB8_15+0x5c>
802179ea: 09 a0        	j	0x802179ec <.LBB8_3+0x18>
802179ec: 03 35 84 ef  	ld	a0, -0x108(s0)
802179f0: 91 45        	li	a1, 0x4
;         match (success, failure) {
802179f2: 63 0f b5 0e  	beq	a0, a1, 0x80217af0 <.LBB8_15+0x86>
802179f6: 69 a8        	j	0x80217a90 <.LBB8_15+0x26>

00000000802179f8 <.LBB8_6>:
802179f8: 03 45 74 f2  	lbu	a0, -0xd9(s0)
802179fc: 23 38 a4 ee  	sd	a0, -0x110(s0)
80217a00: 63 0c 05 12  	beqz	a0, 0x80217b38 <.LBB8_15+0xce>
80217a04: 09 a0        	j	0x80217a06 <.LBB8_6+0xe>
80217a06: 03 35 04 ef  	ld	a0, -0x110(s0)
80217a0a: 89 45        	li	a1, 0x2
;         match (success, failure) {
80217a0c: 63 0b b5 14  	beq	a0, a1, 0x80217b62 <.LBB8_15+0xf8>
80217a10: 09 a0        	j	0x80217a12 <.LBB8_6+0x1a>
80217a12: 03 35 04 ef  	ld	a0, -0x110(s0)
80217a16: 91 45        	li	a1, 0x4
;         match (success, failure) {
80217a18: 63 0a b5 16  	beq	a0, a1, 0x80217b8c <.LBB8_15+0x122>
80217a1c: 95 a8        	j	0x80217a90 <.LBB8_15+0x26>

0000000080217a1e <.LBB8_9>:
80217a1e: 03 45 74 f2  	lbu	a0, -0xd9(s0)
80217a22: 23 34 a4 ee  	sd	a0, -0x118(s0)
80217a26: 63 08 05 18  	beqz	a0, 0x80217bb6 <.LBB8_15+0x14c>
80217a2a: 09 a0        	j	0x80217a2c <.LBB8_9+0xe>
80217a2c: 03 35 84 ee  	ld	a0, -0x118(s0)
80217a30: 89 45        	li	a1, 0x2
;         match (success, failure) {
80217a32: 63 07 b5 1a  	beq	a0, a1, 0x80217be0 <.LBB8_15+0x176>
80217a36: 09 a0        	j	0x80217a38 <.LBB8_9+0x1a>
80217a38: 03 35 84 ee  	ld	a0, -0x118(s0)
80217a3c: 91 45        	li	a1, 0x4
;         match (success, failure) {
80217a3e: 63 06 b5 1c  	beq	a0, a1, 0x80217c0a <.LBB8_15+0x1a0>
80217a42: b9 a0        	j	0x80217a90 <.LBB8_15+0x26>

0000000080217a44 <.LBB8_12>:
80217a44: 03 45 74 f2  	lbu	a0, -0xd9(s0)
80217a48: 23 30 a4 ee  	sd	a0, -0x120(s0)
80217a4c: 63 04 05 1e  	beqz	a0, 0x80217c34 <.LBB8_15+0x1ca>
80217a50: 09 a0        	j	0x80217a52 <.LBB8_12+0xe>
80217a52: 03 35 04 ee  	ld	a0, -0x120(s0)
80217a56: 89 45        	li	a1, 0x2
;         match (success, failure) {
80217a58: 63 03 b5 20  	beq	a0, a1, 0x80217c5e <.LBB8_15+0x1f4>
80217a5c: 09 a0        	j	0x80217a5e <.LBB8_12+0x1a>
80217a5e: 03 35 04 ee  	ld	a0, -0x120(s0)
80217a62: 91 45        	li	a1, 0x4
;         match (success, failure) {
80217a64: 63 02 b5 22  	beq	a0, a1, 0x80217c88 <.LBB8_15+0x21e>
80217a68: 25 a0        	j	0x80217a90 <.LBB8_15+0x26>

0000000080217a6a <.LBB8_15>:
80217a6a: 03 45 74 f2  	lbu	a0, -0xd9(s0)
80217a6e: 23 3c a4 ec  	sd	a0, -0x128(s0)
80217a72: 63 00 05 24  	beqz	a0, 0x80217cb2 <.LBB8_15+0x248>
80217a76: 09 a0        	j	0x80217a78 <.LBB8_15+0xe>
80217a78: 03 35 84 ed  	ld	a0, -0x128(s0)
80217a7c: 89 45        	li	a1, 0x2
;         match (success, failure) {
80217a7e: 63 0f b5 24  	beq	a0, a1, 0x80217cdc <.LBB8_15+0x272>
80217a82: 09 a0        	j	0x80217a84 <.LBB8_15+0x1a>
80217a84: 03 35 84 ed  	ld	a0, -0x128(s0)
80217a88: 91 45        	li	a1, 0x4
;         match (success, failure) {
80217a8a: 63 0e b5 26  	beq	a0, a1, 0x80217d06 <.LBB8_15+0x29c>
80217a8e: 09 a0        	j	0x80217a90 <.LBB8_15+0x26>
80217a90: 03 45 74 f2  	lbu	a0, -0xd9(s0)
80217a94: 85 45        	li	a1, 0x1
80217a96: 63 05 b5 2c  	beq	a0, a1, 0x80217d60 <.Lpcrel_hi37>
80217a9a: 29 ae        	j	0x80217db4 <.Lpcrel_hi41>
80217a9c: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217aa0: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217aa4: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),
80217aa8: af b5 06 10  	lr.d	a1, (a3)
80217aac: 63 95 a5 00  	bne	a1, a0, 0x80217ab6 <.LBB8_15+0x4c>
80217ab0: 2f b6 e6 18  	sc.d	a2, a4, (a3)
80217ab4: 75 fa        	bnez	a2, 0x80217aa8 <.LBB8_15+0x3e>
80217ab6: 2d 8d        	xor	a0, a0, a1
80217ab8: 13 35 15 00  	seqz	a0, a0
80217abc: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217ac0: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217ac4: 99 a8        	j	0x80217b1a <.LBB8_15+0xb0>
80217ac6: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217aca: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217ace: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),
80217ad2: af b5 06 14  	lr.d.aq	a1, (a3)
80217ad6: 63 95 a5 00  	bne	a1, a0, 0x80217ae0 <.LBB8_15+0x76>
80217ada: 2f b6 e6 18  	sc.d	a2, a4, (a3)
80217ade: 75 fa        	bnez	a2, 0x80217ad2 <.LBB8_15+0x68>
80217ae0: 2d 8d        	xor	a0, a0, a1
80217ae2: 13 35 15 00  	seqz	a0, a0
80217ae6: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217aea: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217aee: 35 a0        	j	0x80217b1a <.LBB8_15+0xb0>
80217af0: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217af4: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217af8: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),
80217afc: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217b00: 63 95 a5 00  	bne	a1, a0, 0x80217b0a <.LBB8_15+0xa0>
80217b04: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217b08: 75 fa        	bnez	a2, 0x80217afc <.LBB8_15+0x92>
80217b0a: 2d 8d        	xor	a0, a0, a1
80217b0c: 13 35 15 00  	seqz	a0, a0
80217b10: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217b14: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217b18: 09 a0        	j	0x80217b1a <.LBB8_15+0xb0>
;     let (val, ok) = unsafe {
80217b1a: 03 35 84 f3  	ld	a0, -0xc8(s0)
80217b1e: 23 38 a4 ec  	sd	a0, -0x130(s0)
80217b22: 23 30 a4 fc  	sd	a0, -0x40(s0)
80217b26: 83 45 04 f4  	lbu	a1, -0xc0(s0)
80217b2a: 13 f5 15 00  	andi	a0, a1, 0x1
80217b2e: a3 07 b4 fc  	sb	a1, -0x31(s0)
;     if ok { Ok(val) } else { Err(val) }
80217b32: 63 17 05 20  	bnez	a0, 0x80217d40 <.LBB8_15+0x2d6>
80217b36: ed aa        	j	0x80217d30 <.LBB8_15+0x2c6>
80217b38: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217b3c: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217b40: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, Relaxed) => intrinsics::atomic_cxchgweak_release_relaxed(dst, old, new),
80217b44: af b5 06 10  	lr.d	a1, (a3)
80217b48: 63 95 a5 00  	bne	a1, a0, 0x80217b52 <.LBB8_15+0xe8>
80217b4c: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217b50: 75 fa        	bnez	a2, 0x80217b44 <.LBB8_15+0xda>
80217b52: 2d 8d        	xor	a0, a0, a1
80217b54: 13 35 15 00  	seqz	a0, a0
80217b58: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217b5c: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217b60: 6d bf        	j	0x80217b1a <.LBB8_15+0xb0>
80217b62: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217b66: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217b6a: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),
80217b6e: af b5 06 14  	lr.d.aq	a1, (a3)
80217b72: 63 95 a5 00  	bne	a1, a0, 0x80217b7c <.LBB8_15+0x112>
80217b76: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217b7a: 75 fa        	bnez	a2, 0x80217b6e <.LBB8_15+0x104>
80217b7c: 2d 8d        	xor	a0, a0, a1
80217b7e: 13 35 15 00  	seqz	a0, a0
80217b82: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217b86: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217b8a: 41 bf        	j	0x80217b1a <.LBB8_15+0xb0>
80217b8c: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217b90: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217b94: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),
80217b98: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217b9c: 63 95 a5 00  	bne	a1, a0, 0x80217ba6 <.LBB8_15+0x13c>
80217ba0: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217ba4: 75 fa        	bnez	a2, 0x80217b98 <.LBB8_15+0x12e>
80217ba6: 2d 8d        	xor	a0, a0, a1
80217ba8: 13 35 15 00  	seqz	a0, a0
80217bac: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217bb0: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217bb4: 9d b7        	j	0x80217b1a <.LBB8_15+0xb0>
80217bb6: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217bba: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217bbe: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acquire_relaxed(dst, old, new),
80217bc2: af b5 06 14  	lr.d.aq	a1, (a3)
80217bc6: 63 95 a5 00  	bne	a1, a0, 0x80217bd0 <.LBB8_15+0x166>
80217bca: 2f b6 e6 18  	sc.d	a2, a4, (a3)
80217bce: 75 fa        	bnez	a2, 0x80217bc2 <.LBB8_15+0x158>
80217bd0: 2d 8d        	xor	a0, a0, a1
80217bd2: 13 35 15 00  	seqz	a0, a0
80217bd6: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217bda: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217bde: 35 bf        	j	0x80217b1a <.LBB8_15+0xb0>
80217be0: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217be4: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217be8: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acquire_acquire(dst, old, new),
80217bec: af b5 06 14  	lr.d.aq	a1, (a3)
80217bf0: 63 95 a5 00  	bne	a1, a0, 0x80217bfa <.LBB8_15+0x190>
80217bf4: 2f b6 e6 18  	sc.d	a2, a4, (a3)
80217bf8: 75 fa        	bnez	a2, 0x80217bec <.LBB8_15+0x182>
80217bfa: 2d 8d        	xor	a0, a0, a1
80217bfc: 13 35 15 00  	seqz	a0, a0
80217c00: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217c04: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217c08: 09 bf        	j	0x80217b1a <.LBB8_15+0xb0>
80217c0a: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217c0e: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217c12: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),
80217c16: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217c1a: 63 95 a5 00  	bne	a1, a0, 0x80217c24 <.LBB8_15+0x1ba>
80217c1e: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217c22: 75 fa        	bnez	a2, 0x80217c16 <.LBB8_15+0x1ac>
80217c24: 2d 8d        	xor	a0, a0, a1
80217c26: 13 35 15 00  	seqz	a0, a0
80217c2a: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217c2e: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217c32: e5 b5        	j	0x80217b1a <.LBB8_15+0xb0>
80217c34: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217c38: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217c3c: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_relaxed(dst, old, new),
80217c40: af b5 06 14  	lr.d.aq	a1, (a3)
80217c44: 63 95 a5 00  	bne	a1, a0, 0x80217c4e <.LBB8_15+0x1e4>
80217c48: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217c4c: 75 fa        	bnez	a2, 0x80217c40 <.LBB8_15+0x1d6>
80217c4e: 2d 8d        	xor	a0, a0, a1
80217c50: 13 35 15 00  	seqz	a0, a0
80217c54: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217c58: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217c5c: 7d bd        	j	0x80217b1a <.LBB8_15+0xb0>
80217c5e: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217c62: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217c66: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel_acquire(dst, old, new),
80217c6a: af b5 06 14  	lr.d.aq	a1, (a3)
80217c6e: 63 95 a5 00  	bne	a1, a0, 0x80217c78 <.LBB8_15+0x20e>
80217c72: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217c76: 75 fa        	bnez	a2, 0x80217c6a <.LBB8_15+0x200>
80217c78: 2d 8d        	xor	a0, a0, a1
80217c7a: 13 35 15 00  	seqz	a0, a0
80217c7e: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217c82: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217c86: 51 bd        	j	0x80217b1a <.LBB8_15+0xb0>
80217c88: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217c8c: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217c90: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),
80217c94: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217c98: 63 95 a5 00  	bne	a1, a0, 0x80217ca2 <.LBB8_15+0x238>
80217c9c: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217ca0: 75 fa        	bnez	a2, 0x80217c94 <.LBB8_15+0x22a>
80217ca2: 2d 8d        	xor	a0, a0, a1
80217ca4: 13 35 15 00  	seqz	a0, a0
80217ca8: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217cac: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217cb0: ad b5        	j	0x80217b1a <.LBB8_15+0xb0>
80217cb2: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217cb6: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217cba: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_seqcst_relaxed(dst, old, new),
80217cbe: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217cc2: 63 95 a5 00  	bne	a1, a0, 0x80217ccc <.LBB8_15+0x262>
80217cc6: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217cca: 75 fa        	bnez	a2, 0x80217cbe <.LBB8_15+0x254>
80217ccc: 2d 8d        	xor	a0, a0, a1
80217cce: 13 35 15 00  	seqz	a0, a0
80217cd2: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217cd6: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217cda: 81 b5        	j	0x80217b1a <.LBB8_15+0xb0>
80217cdc: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217ce0: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217ce4: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_seqcst_acquire(dst, old, new),
80217ce8: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217cec: 63 95 a5 00  	bne	a1, a0, 0x80217cf6 <.LBB8_15+0x28c>
80217cf0: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217cf4: 75 fa        	bnez	a2, 0x80217ce8 <.LBB8_15+0x27e>
80217cf6: 2d 8d        	xor	a0, a0, a1
80217cf8: 13 35 15 00  	seqz	a0, a0
80217cfc: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217d00: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217d04: 19 bd        	j	0x80217b1a <.LBB8_15+0xb0>
80217d06: 03 35 84 f0  	ld	a0, -0xf8(s0)
80217d0a: 83 36 04 f1  	ld	a3, -0xf0(s0)
80217d0e: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak_seqcst_seqcst(dst, old, new),
80217d12: af b5 06 16  	lr.d.aqrl	a1, (a3)
80217d16: 63 95 a5 00  	bne	a1, a0, 0x80217d20 <.LBB8_15+0x2b6>
80217d1a: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80217d1e: 75 fa        	bnez	a2, 0x80217d12 <.LBB8_15+0x2a8>
80217d20: 2d 8d        	xor	a0, a0, a1
80217d22: 13 35 15 00  	seqz	a0, a0
80217d26: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80217d2a: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80217d2e: f5 b3        	j	0x80217b1a <.LBB8_15+0xb0>
80217d30: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if ok { Ok(val) } else { Err(val) }
80217d34: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80217d38: 05 45        	li	a0, 0x1
80217d3a: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80217d3e: 09 a8        	j	0x80217d50 <.LBB8_15+0x2e6>
80217d40: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if ok { Ok(val) } else { Err(val) }
80217d44: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80217d48: 01 45        	li	a0, 0x0
80217d4a: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80217d4e: 09 a0        	j	0x80217d50 <.LBB8_15+0x2e6>
; }
80217d50: 03 35 84 f2  	ld	a0, -0xd8(s0)
80217d54: 83 35 04 f3  	ld	a1, -0xd0(s0)
80217d58: b2 70        	ld	ra, 0x128(sp)
80217d5a: 12 74        	ld	s0, 0x120(sp)
80217d5c: 55 61        	addi	sp, sp, 0x130
80217d5e: 82 80        	ret

0000000080217d60 <.Lpcrel_hi37>:
;             (_, Release) => panic!("there is no such thing as a release failure ordering"),
80217d60: 17 f5 01 00  	auipc	a0, 0x1f
80217d64: 93 05 85 37  	addi	a1, a0, 0x378
80217d68: 23 38 b4 fc  	sd	a1, -0x30(s0)
80217d6c: 05 45        	li	a0, 0x1
80217d6e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
80217d72: 23 3c b4 f6  	sd	a1, -0x88(s0)
80217d76: 23 30 a4 f8  	sd	a0, -0x80(s0)

0000000080217d7a <.Lpcrel_hi38>:
80217d7a: 17 b5 01 00  	auipc	a0, 0x1b
80217d7e: 13 05 65 51  	addi	a0, a0, 0x516
80217d82: 0c 61        	ld	a1, 0x0(a0)
80217d84: 08 65        	ld	a0, 0x8(a0)
80217d86: 23 3c b4 f8  	sd	a1, -0x68(s0)
80217d8a: 23 30 a4 fa  	sd	a0, -0x60(s0)

0000000080217d8e <.Lpcrel_hi39>:
80217d8e: 17 f5 01 00  	auipc	a0, 0x1f
80217d92: 13 05 a5 16  	addi	a0, a0, 0x16a
80217d96: 23 34 a4 f8  	sd	a0, -0x78(s0)
80217d9a: 01 45        	li	a0, 0x0
80217d9c: 23 38 a4 f8  	sd	a0, -0x70(s0)

0000000080217da0 <.Lpcrel_hi40>:
;             (_, Release) => panic!("there is no such thing as a release failure ordering"),
80217da0: 17 f5 01 00  	auipc	a0, 0x1f
80217da4: 93 05 85 3c  	addi	a1, a0, 0x3c8
80217da8: 13 05 84 f7  	addi	a0, s0, -0x88
80217dac: 97 80 01 00  	auipc	ra, 0x18
80217db0: e7 80 c0 3f  	jalr	0x3fc(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080217db4 <.Lpcrel_hi41>:
;             (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
80217db4: 17 f5 01 00  	auipc	a0, 0x1f
80217db8: 93 05 c5 38  	addi	a1, a0, 0x38c
80217dbc: 23 30 b4 fe  	sd	a1, -0x20(s0)
80217dc0: 05 45        	li	a0, 0x1
80217dc2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
80217dc6: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80217dca: 23 38 a4 f4  	sd	a0, -0xb0(s0)

0000000080217dce <.Lpcrel_hi42>:
80217dce: 17 b5 01 00  	auipc	a0, 0x1b
80217dd2: 13 05 25 4c  	addi	a0, a0, 0x4c2
80217dd6: 0c 61        	ld	a1, 0x0(a0)
80217dd8: 08 65        	ld	a0, 0x8(a0)
80217dda: 23 34 b4 f6  	sd	a1, -0x98(s0)
80217dde: 23 38 a4 f6  	sd	a0, -0x90(s0)

0000000080217de2 <.Lpcrel_hi43>:
80217de2: 17 f5 01 00  	auipc	a0, 0x1f
80217de6: 13 05 65 11  	addi	a0, a0, 0x116
80217dea: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80217dee: 01 45        	li	a0, 0x0
80217df0: 23 30 a4 f6  	sd	a0, -0xa0(s0)

0000000080217df4 <.Lpcrel_hi44>:
;             (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
80217df4: 17 f5 01 00  	auipc	a0, 0x1f
80217df8: 93 05 c5 38  	addi	a1, a0, 0x38c
80217dfc: 13 05 84 f4  	addi	a0, s0, -0xb8
80217e00: 97 80 01 00  	auipc	ra, 0x18
80217e04: e7 80 80 3a  	jalr	0x3a8(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080217e08 <_ZN56_$LT$os..console..Writer$u20$as$u20$core..fmt..Write$GT$9write_str17h9543bffeb07b99b9E>:
;     fn write_str(&mut self,s:&str) -> fmt::Result{
80217e08: 1d 71        	addi	sp, sp, -0x60
80217e0a: 86 ec        	sd	ra, 0x58(sp)
80217e0c: a2 e8        	sd	s0, 0x50(sp)
80217e0e: 80 10        	addi	s0, sp, 0x60
80217e10: 23 30 c4 fa  	sd	a2, -0x60(s0)
80217e14: 2e 86        	mv	a2, a1
80217e16: 83 35 04 fa  	ld	a1, -0x60(s0)
80217e1a: 23 34 c4 fa  	sd	a2, -0x58(s0)
80217e1e: 2a 86        	mv	a2, a0
80217e20: 03 35 84 fa  	ld	a0, -0x58(s0)
80217e24: 23 38 c4 fc  	sd	a2, -0x30(s0)
80217e28: 23 3c a4 fc  	sd	a0, -0x28(s0)
80217e2c: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         for c in s.chars(){
80217e30: 97 00 00 00  	auipc	ra, 0x0
80217e34: e7 80 40 11  	jalr	0x114(ra) <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h60494ce3811469e5E>
80217e38: 97 e0 ff ff  	auipc	ra, 0xffffe
80217e3c: e7 80 e0 16  	jalr	0x16e(ra) <ekernel+0xffcc8fa6>
80217e40: 23 3c a4 fa  	sd	a0, -0x48(s0)
80217e44: 23 30 b4 fc  	sd	a1, -0x40(s0)
80217e48: 09 a0        	j	0x80217e4a <_ZN56_$LT$os..console..Writer$u20$as$u20$core..fmt..Write$GT$9write_str17h9543bffeb07b99b9E+0x42>
80217e4a: 13 05 84 fb  	addi	a0, s0, -0x48
;         for c in s.chars(){
80217e4e: 97 f0 fe ff  	auipc	ra, 0xfffef
80217e52: e7 80 20 62  	jalr	0x622(ra) <ekernel+0xffcba470>
80217e56: 23 26 a4 fc  	sw	a0, -0x34(s0)
80217e5a: 03 25 c4 fc  	lw	a0, -0x34(s0)
80217e5e: b7 05 11 00  	lui	a1, 0x110
80217e62: 63 1c b5 00  	bne	a0, a1, 0x80217e7a <_ZN56_$LT$os..console..Writer$u20$as$u20$core..fmt..Write$GT$9write_str17h9543bffeb07b99b9E+0x72>
80217e66: 09 a0        	j	0x80217e68 <_ZN56_$LT$os..console..Writer$u20$as$u20$core..fmt..Write$GT$9write_str17h9543bffeb07b99b9E+0x60>
80217e68: 01 45        	li	a0, 0x0
;         Ok(())
80217e6a: a3 0b a4 fa  	sb	a0, -0x49(s0)
;     }
80217e6e: 03 45 74 fb  	lbu	a0, -0x49(s0)
80217e72: e6 60        	ld	ra, 0x58(sp)
80217e74: 46 64        	ld	s0, 0x50(sp)
80217e76: 25 61        	addi	sp, sp, 0x60
80217e78: 82 80        	ret
;         for c in s.chars(){
80217e7a: 03 65 c4 fc  	lwu	a0, -0x34(s0)
80217e7e: 23 26 a4 fe  	sw	a0, -0x14(s0)
;             consele_putchar(c as usize);
80217e82: 97 30 ff ff  	auipc	ra, 0xffff3
80217e86: e7 80 80 ab  	jalr	-0x548(ra) <ekernel+0xffcbd93a>
80217e8a: c1 b7        	j	0x80217e4a <_ZN56_$LT$os..console..Writer$u20$as$u20$core..fmt..Write$GT$9write_str17h9543bffeb07b99b9E+0x42>

0000000080217e8c <_ZN2os7console5print17h042fcde166d682deE>:
; pub fn print(args: fmt::Arguments) {
80217e8c: 59 71        	addi	sp, sp, -0x70
80217e8e: 86 f4        	sd	ra, 0x68(sp)
80217e90: a2 f0        	sd	s0, 0x60(sp)
80217e92: 80 18        	addi	s0, sp, 0x70
80217e94: 23 30 a4 fa  	sd	a0, -0x60(s0)
80217e98: 09 45        	li	a0, 0x2
;     if PTCR.locking.load(Ordering::Acquire){
80217e9a: a3 07 a4 fa  	sb	a0, -0x51(s0)
80217e9e: 83 45 f4 fa  	lbu	a1, -0x51(s0)

0000000080217ea2 <.Lpcrel_hi0>:
80217ea2: 17 e5 02 00  	auipc	a0, 0x2e
80217ea6: 13 05 e5 01  	addi	a0, a0, 0x1e
80217eaa: 61 05        	addi	a0, a0, 0x18
80217eac: 97 e0 ff ff  	auipc	ra, 0xffffe
80217eb0: e7 80 60 e6  	jalr	-0x19a(ra) <ekernel+0xffcc8d12>
80217eb4: 11 e5        	bnez	a0, 0x80217ec0 <.Lpcrel_hi1>
80217eb6: 09 a0        	j	0x80217eb8 <.Lpcrel_hi0+0x16>
80217eb8: a6 70        	ld	ra, 0x68(sp)
80217eba: 06 74        	ld	s0, 0x60(sp)
; }
80217ebc: 65 61        	addi	sp, sp, 0x70
80217ebe: 82 80        	ret

0000000080217ec0 <.Lpcrel_hi1>:
;         unsafe {PTCR.writer.lock().write_fmt(args).expect("print error");}
80217ec0: 17 e5 02 00  	auipc	a0, 0x2e
80217ec4: 13 05 05 00  	mv	a0, a0
80217ec8: 97 b0 ff ff  	auipc	ra, 0xffffb
80217ecc: e7 80 80 b1  	jalr	-0x4e8(ra) <ekernel+0xffcc59e0>
80217ed0: 23 38 a4 fa  	sd	a0, -0x50(s0)
80217ed4: 23 3c b4 fa  	sd	a1, -0x48(s0)
80217ed8: 13 05 04 fb  	addi	a0, s0, -0x50
80217edc: 23 3c a4 f8  	sd	a0, -0x68(s0)
80217ee0: 97 c0 ff ff  	auipc	ra, 0xffffc
80217ee4: e7 80 c0 cb  	jalr	-0x344(ra) <ekernel+0xffcc6b9c>
80217ee8: 83 35 04 fa  	ld	a1, -0x60(s0)
80217eec: 90 75        	ld	a2, 0x28(a1)
80217eee: 23 34 c4 fe  	sd	a2, -0x18(s0)
80217ef2: 90 71        	ld	a2, 0x20(a1)
80217ef4: 23 30 c4 fe  	sd	a2, -0x20(s0)
80217ef8: 90 6d        	ld	a2, 0x18(a1)
80217efa: 23 3c c4 fc  	sd	a2, -0x28(s0)
80217efe: 90 69        	ld	a2, 0x10(a1)
80217f00: 23 38 c4 fc  	sd	a2, -0x30(s0)
80217f04: 90 65        	ld	a2, 0x8(a1)
80217f06: 23 34 c4 fc  	sd	a2, -0x38(s0)
80217f0a: 8c 61        	ld	a1, 0x0(a1)
80217f0c: 23 30 b4 fc  	sd	a1, -0x40(s0)
80217f10: 93 05 04 fc  	addi	a1, s0, -0x40
80217f14: 97 70 ff ff  	auipc	ra, 0xffff7
80217f18: e7 80 e0 2b  	jalr	0x2be(ra) <ekernel+0xffcc21d2>

0000000080217f1c <.Lpcrel_hi2>:
80217f1c: 97 f5 01 00  	auipc	a1, 0x1f
80217f20: 93 85 c5 27  	addi	a1, a1, 0x27c

0000000080217f24 <.Lpcrel_hi3>:
80217f24: 17 f6 01 00  	auipc	a2, 0x1f
80217f28: 93 06 46 29  	addi	a3, a2, 0x294
80217f2c: 2d 46        	li	a2, 0xb
80217f2e: 97 90 fe ff  	auipc	ra, 0xfffe9
80217f32: e7 80 20 31  	jalr	0x312(ra) <ekernel+0xffcb4240>
80217f36: 03 35 84 f9  	ld	a0, -0x68(s0)
80217f3a: 97 00 ff ff  	auipc	ra, 0xffff0
80217f3e: e7 80 a0 35  	jalr	0x35a(ra) <ekernel+0xffcbb294>
80217f42: 9d bf        	j	0x80217eb8 <.Lpcrel_hi0+0x16>

0000000080217f44 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h60494ce3811469e5E>:
;     pub fn chars(&self) -> Chars<'_> {
80217f44: 19 71        	addi	sp, sp, -0x80
80217f46: 86 fc        	sd	ra, 0x78(sp)
80217f48: a2 f8        	sd	s0, 0x70(sp)
80217f4a: 00 01        	addi	s0, sp, 0x80
80217f4c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80217f50: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { mem::transmute(self) }
80217f54: 23 34 a4 fc  	sd	a0, -0x38(s0)
80217f58: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         let len = slice.len();
80217f5c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
80217f60: 23 34 a4 fa  	sd	a0, -0x58(s0)
80217f64: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80217f68: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         self.pointer as *mut T
80217f6c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80217f70: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80217f72: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             Self { ptr, end_or_len, _marker: PhantomData }
80217f76: 83 35 04 fa  	ld	a1, -0x60(s0)
80217f7a: 23 38 b4 f8  	sd	a1, -0x70(s0)
80217f7e: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         Chars { iter: self.as_bytes().iter() }
80217f82: 83 35 04 f9  	ld	a1, -0x70(s0)
80217f86: 03 35 84 f9  	ld	a0, -0x68(s0)
80217f8a: 23 30 b4 f8  	sd	a1, -0x80(s0)
80217f8e: 23 34 a4 f8  	sd	a0, -0x78(s0)
;     }
80217f92: 03 35 04 f8  	ld	a0, -0x80(s0)
80217f96: 83 35 84 f8  	ld	a1, -0x78(s0)
80217f9a: e6 70        	ld	ra, 0x78(sp)
80217f9c: 46 74        	ld	s0, 0x70(sp)
80217f9e: 09 61        	addi	sp, sp, 0x80
80217fa0: 82 80        	ret

0000000080217fa2 <_ZN2os4task7manager11TaskManager3new17hd99569f4eff87d02E>:
;     pub fn new() -> Self{
80217fa2: 31 71        	addi	sp, sp, -0xc0
80217fa4: 06 fd        	sd	ra, 0xb8(sp)
80217fa6: 22 f9        	sd	s0, 0xb0(sp)
80217fa8: 80 01        	addi	s0, sp, 0xc0
80217faa: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80217fae: 13 05 84 f4  	addi	a0, s0, -0xb8
;         let mut pids  :Vec<usize> = Vec::new();
80217fb2: 97 c0 ff ff  	auipc	ra, 0xffffc
80217fb6: e7 80 00 75  	jalr	0x750(ra) <ekernel+0xffcc7702>
80217fba: 01 45        	li	a0, 0x0
;         for idx in (0..MAX_TASKS).rev() {
80217fbc: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80217fc0: 41 45        	li	a0, 0x10
80217fc2: 23 34 a4 f6  	sd	a0, -0x98(s0)
80217fc6: 03 35 04 f6  	ld	a0, -0xa0(s0)
80217fca: 83 35 84 f6  	ld	a1, -0x98(s0)
80217fce: 97 30 01 00  	auipc	ra, 0x13
80217fd2: e7 80 00 66  	jalr	0x660(ra) <_ZN4core4iter6traits8iterator8Iterator3rev17h28bdd26f8cb73869E>
80217fd6: 97 40 01 00  	auipc	ra, 0x14
80217fda: e7 80 80 8c  	jalr	-0x738(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h8aee58dfd1a9ad91E>
80217fde: 23 38 a4 f6  	sd	a0, -0x90(s0)
80217fe2: 23 3c b4 f6  	sd	a1, -0x88(s0)
80217fe6: 09 a0        	j	0x80217fe8 <_ZN2os4task7manager11TaskManager3new17hd99569f4eff87d02E+0x46>
80217fe8: 13 05 04 f7  	addi	a0, s0, -0x90
;         for idx in (0..MAX_TASKS).rev() {
80217fec: 97 40 01 00  	auipc	ra, 0x14
80217ff0: e7 80 40 b1  	jalr	-0x4ec(ra) <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc96430ec4796e8e5E>
80217ff4: 23 30 a4 f8  	sd	a0, -0x80(s0)
80217ff8: 23 34 b4 f8  	sd	a1, -0x78(s0)
80217ffc: 03 35 04 f8  	ld	a0, -0x80(s0)
80218000: 49 e1        	bnez	a0, 0x80218082 <_ZN2os4task7manager11TaskManager3new17hd99569f4eff87d02E+0xe0>
80218002: 09 a0        	j	0x80218004 <_ZN2os4task7manager11TaskManager3new17hd99569f4eff87d02E+0x62>
80218004: 13 05 04 f9  	addi	a0, s0, -0x70
;             task_store:VecDeque::new(), 
80218008: 97 80 fe ff  	auipc	ra, 0xfffe8
8021800c: e7 80 40 26  	jalr	0x264(ra) <ekernel+0xffcb326c>
;             pids,
80218010: 03 35 84 f5  	ld	a0, -0xa8(s0)
80218014: 23 30 a4 fc  	sd	a0, -0x40(s0)
80218018: 03 35 04 f5  	ld	a0, -0xb0(s0)
8021801c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80218020: 03 35 84 f4  	ld	a0, -0xb8(s0)
80218024: 23 38 a4 fa  	sd	a0, -0x50(s0)
80218028: 13 05 84 fc  	addi	a0, s0, -0x38
;             zombie_store:VecDeque::new(), 
8021802c: 97 80 fe ff  	auipc	ra, 0xfffe8
80218030: e7 80 00 24  	jalr	0x240(ra) <ekernel+0xffcb326c>
80218034: 83 35 04 f4  	ld	a1, -0xc0(s0)
;         Self { 
80218038: 03 35 84 fa  	ld	a0, -0x58(s0)
8021803c: 88 ed        	sd	a0, 0x18(a1)
8021803e: 03 35 04 fa  	ld	a0, -0x60(s0)
80218042: 88 e9        	sd	a0, 0x10(a1)
80218044: 03 35 84 f9  	ld	a0, -0x68(s0)
80218048: 88 e5        	sd	a0, 0x8(a1)
8021804a: 03 35 04 f9  	ld	a0, -0x70(s0)
8021804e: 88 e1        	sd	a0, 0x0(a1)
80218050: 03 35 04 fc  	ld	a0, -0x40(s0)
80218054: 88 f9        	sd	a0, 0x30(a1)
80218056: 03 35 84 fb  	ld	a0, -0x48(s0)
8021805a: 88 f5        	sd	a0, 0x28(a1)
8021805c: 03 35 04 fb  	ld	a0, -0x50(s0)
80218060: 88 f1        	sd	a0, 0x20(a1)
80218062: 03 35 04 fe  	ld	a0, -0x20(s0)
80218066: a8 e9        	sd	a0, 0x50(a1)
80218068: 03 35 84 fd  	ld	a0, -0x28(s0)
8021806c: a8 e5        	sd	a0, 0x48(a1)
8021806e: 03 35 04 fd  	ld	a0, -0x30(s0)
80218072: a8 e1        	sd	a0, 0x40(a1)
80218074: 03 35 84 fc  	ld	a0, -0x38(s0)
80218078: 88 fd        	sd	a0, 0x38(a1)
8021807a: ea 70        	ld	ra, 0xb8(sp)
8021807c: 4a 74        	ld	s0, 0xb0(sp)
;     }
8021807e: 29 61        	addi	sp, sp, 0xc0
80218080: 82 80        	ret
;         for idx in (0..MAX_TASKS).rev() {
80218082: 83 35 84 f8  	ld	a1, -0x78(s0)
80218086: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021808a: 13 05 84 f4  	addi	a0, s0, -0xb8
;             pids.push(idx);
8021808e: 97 d0 ff ff  	auipc	ra, 0xffffd
80218092: e7 80 40 c2  	jalr	-0x3dc(ra) <ekernel+0xffcc7cb2>
80218096: 89 bf        	j	0x80217fe8 <_ZN2os4task7manager11TaskManager3new17hd99569f4eff87d02E+0x46>

0000000080218098 <_ZN2os4task7manager11TaskManager8add_task17hcc122bf2f11e487eE>:
;     pub fn add_task(&mut self , tcb :Arc<TaskControlBlock>){
80218098: 01 11        	addi	sp, sp, -0x20
8021809a: 06 ec        	sd	ra, 0x18(sp)
8021809c: 22 e8        	sd	s0, 0x10(sp)
8021809e: 00 10        	addi	s0, sp, 0x20
802180a0: 23 30 a4 fe  	sd	a0, -0x20(s0)
802180a4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe {self.task_store.push_back(tcb)};
802180a8: 97 80 fe ff  	auipc	ra, 0xfffe8
802180ac: e7 80 40 73  	jalr	0x734(ra) <ekernel+0xffcb37dc>
802180b0: e2 60        	ld	ra, 0x18(sp)
802180b2: 42 64        	ld	s0, 0x10(sp)
;     }
802180b4: 05 61        	addi	sp, sp, 0x20
802180b6: 82 80        	ret

00000000802180b8 <_ZN2os4task7manager11TaskManager9pop_front17hfe30849929e17ce2E>:
;     pub fn pop_front(&mut self) -> Option<Arc<TaskControlBlock>>{
802180b8: 01 11        	addi	sp, sp, -0x20
802180ba: 06 ec        	sd	ra, 0x18(sp)
802180bc: 22 e8        	sd	s0, 0x10(sp)
802180be: 00 10        	addi	s0, sp, 0x20
802180c0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.task_store.pop_front()
802180c4: 97 80 fe ff  	auipc	ra, 0xfffe8
802180c8: e7 80 60 6a  	jalr	0x6a6(ra) <ekernel+0xffcb376a>
802180cc: e2 60        	ld	ra, 0x18(sp)
802180ce: 42 64        	ld	s0, 0x10(sp)
;     }
802180d0: 05 61        	addi	sp, sp, 0x20
802180d2: 82 80        	ret

00000000802180d4 <_ZN2os4task7manager11TaskManager9free_task17h91934d4f1e9489f3E>:
;     pub fn free_task(&mut self , tcb:Arc<TaskControlBlock>){
802180d4: 01 11        	addi	sp, sp, -0x20
802180d6: 06 ec        	sd	ra, 0x18(sp)
802180d8: 22 e8        	sd	s0, 0x10(sp)
802180da: 00 10        	addi	s0, sp, 0x20
802180dc: 23 30 a4 fe  	sd	a0, -0x20(s0)
802180e0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.zombie_store.push_back(tcb);
802180e4: 13 05 85 03  	addi	a0, a0, 0x38
802180e8: 97 80 fe ff  	auipc	ra, 0xfffe8
802180ec: e7 80 40 6f  	jalr	0x6f4(ra) <ekernel+0xffcb37dc>
802180f0: e2 60        	ld	ra, 0x18(sp)
802180f2: 42 64        	ld	s0, 0x10(sp)
;     }
802180f4: 05 61        	addi	sp, sp, 0x20
802180f6: 82 80        	ret

00000000802180f8 <_ZN2os4task7manager11TaskManager9alloc_pid17h9007d27593a79ed1E>:
;     pub fn alloc_pid(&mut self) -> Option<usize> {
802180f8: 39 71        	addi	sp, sp, -0x40
802180fa: 06 fc        	sd	ra, 0x38(sp)
802180fc: 22 f8        	sd	s0, 0x30(sp)
802180fe: 80 00        	addi	s0, sp, 0x40
80218100: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             if let Some(pid) = self.pids.pop(){
80218104: 13 05 05 02  	addi	a0, a0, 0x20
80218108: 97 d0 ff ff  	auipc	ra, 0xffffd
8021810c: e7 80 40 85  	jalr	-0x7ac(ra) <ekernel+0xffcc795c>
80218110: 23 38 a4 fc  	sd	a0, -0x30(s0)
80218114: 23 3c b4 fc  	sd	a1, -0x28(s0)
80218118: 03 35 04 fd  	ld	a0, -0x30(s0)
8021811c: 01 cd        	beqz	a0, 0x80218134 <_ZN2os4task7manager11TaskManager9alloc_pid17h9007d27593a79ed1E+0x3c>
8021811e: 09 a0        	j	0x80218120 <_ZN2os4task7manager11TaskManager9alloc_pid17h9007d27593a79ed1E+0x28>
80218120: 03 35 84 fd  	ld	a0, -0x28(s0)
80218124: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 Some(pid)
80218128: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021812c: 05 45        	li	a0, 0x1
8021812e: 23 30 a4 fc  	sd	a0, -0x40(s0)
;             if let Some(pid) = self.pids.pop(){
80218132: 29 a0        	j	0x8021813c <_ZN2os4task7manager11TaskManager9alloc_pid17h9007d27593a79ed1E+0x44>
80218134: 01 45        	li	a0, 0x0
;                 None
80218136: 23 30 a4 fc  	sd	a0, -0x40(s0)
;             if let Some(pid) = self.pids.pop(){
8021813a: 09 a0        	j	0x8021813c <_ZN2os4task7manager11TaskManager9alloc_pid17h9007d27593a79ed1E+0x44>
;     }
8021813c: 03 35 04 fc  	ld	a0, -0x40(s0)
80218140: 83 35 84 fc  	ld	a1, -0x38(s0)
80218144: e2 70        	ld	ra, 0x38(sp)
80218146: 42 74        	ld	s0, 0x30(sp)
80218148: 21 61        	addi	sp, sp, 0x40
8021814a: 82 80        	ret

000000008021814c <_ZN2os4task7manager14init_zero_task17hadbab9892aed9d58E>:
; pub fn init_zero_task(){
8021814c: 13 01 01 c3  	addi	sp, sp, -0x3d0
80218150: 23 34 11 3c  	sd	ra, 0x3c8(sp)
80218154: 23 30 81 3c  	sd	s0, 0x3c0(sp)
80218158: 80 0f        	addi	s0, sp, 0x3d0

000000008021815a <.Lpcrel_hi0>:
;     let mut task = crate_init("initcode").unwrap();
8021815a: 17 b5 01 00  	auipc	a0, 0x1b
8021815e: 93 05 e5 23  	addi	a1, a0, 0x23e
80218162: 13 05 84 d8  	addi	a0, s0, -0x278
80218166: 21 46        	li	a2, 0x8
80218168: 97 00 00 00  	auipc	ra, 0x0
8021816c: e7 80 20 0e  	jalr	0xe2(ra) <_ZN2os4task7manager10crate_init17h50e87d6bd171e033E>
;         match self {
80218170: 03 35 84 d8  	ld	a0, -0x278(s0)
80218174: 11 e9        	bnez	a0, 0x80218188 <.Lpcrel_hi1+0x10>
80218176: 09 a0        	j	0x80218178 <.Lpcrel_hi1>

0000000080218178 <.Lpcrel_hi1>:
;             None => unwrap_failed(),
80218178: 17 f5 01 00  	auipc	a0, 0x1f
8021817c: 13 05 05 07  	addi	a0, a0, 0x70
80218180: 97 90 01 00  	auipc	ra, 0x19
80218184: e7 80 80 b4  	jalr	-0x4b8(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
80218188: 13 05 04 c6  	addi	a0, s0, -0x3a0
8021818c: 23 3c a4 c2  	sd	a0, -0x3c8(s0)
80218190: 93 05 84 d8  	addi	a1, s0, -0x278
80218194: 13 06 80 12  	li	a2, 0x128
80218198: 23 30 c4 c4  	sd	a2, -0x3c0(s0)
;             Some(val) => val,
8021819c: 97 a0 01 00  	auipc	ra, 0x1a
802181a0: e7 80 20 ad  	jalr	-0x52e(ra) <memcpy>
802181a4: 03 35 84 c3  	ld	a0, -0x3c8(s0)
;     let trapframe = task.get_trapframe();
802181a8: 97 60 ff ff  	auipc	ra, 0xffff6
802181ac: e7 80 e0 09  	jalr	0x9e(ra) <ekernel+0xffcc1246>
802181b0: 2a 86        	mv	a2, a0
802181b2: 03 35 84 c3  	ld	a0, -0x3c8(s0)
802181b6: 23 34 c4 fe  	sd	a2, -0x18(s0)
802181ba: 81 45        	li	a1, 0x0
;     trapframe.epc = 0;
802181bc: 0c ee        	sd	a1, 0x18(a2)
802181be: 85 65        	lui	a1, 0x1
;     trapframe.sp = PGSZ;
802181c0: 0c fa        	sd	a1, 0x30(a2)
;     task.set_kstack();
802181c2: 97 60 ff ff  	auipc	ra, 0xffff6
802181c6: e7 80 40 f2  	jalr	-0xdc(ra) <ekernel+0xffcc10e6>

00000000802181ca <.Lpcrel_hi2>:
;     unsafe { TASKMANGER.lock().task_store.push_back(Arc::new(task)) };
802181ca: 17 f5 01 00  	auipc	a0, 0x1f
802181ce: 13 05 e5 17  	addi	a0, a0, 0x17e
802181d2: 97 00 00 00  	auipc	ra, 0x0
802181d6: e7 80 80 70  	jalr	0x708(ra) <_ZN73_$LT$os..task..manager..TASKMANGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13a6a188e04fdd86E>
802181da: 97 b0 ff ff  	auipc	ra, 0xffffb
802181de: e7 80 a0 fa  	jalr	-0x56(ra) <ekernel+0xffcc6184>
802181e2: 23 38 a4 ea  	sd	a0, -0x150(s0)
802181e6: 23 3c b4 ea  	sd	a1, -0x148(s0)
802181ea: 13 05 04 eb  	addi	a0, s0, -0x150
802181ee: 23 3c a4 c4  	sd	a0, -0x3a8(s0)
802181f2: 97 c0 ff ff  	auipc	ra, 0xffffc
802181f6: e7 80 60 9c  	jalr	-0x63a(ra) <ekernel+0xffcc6bb8>
802181fa: 83 35 84 c3  	ld	a1, -0x3c8(s0)
802181fe: 03 36 04 c4  	ld	a2, -0x3c0(s0)
80218202: 23 38 a4 c4  	sd	a0, -0x3b0(s0)
80218206: 13 05 04 ec  	addi	a0, s0, -0x140
8021820a: 23 34 a4 c4  	sd	a0, -0x3b8(s0)
8021820e: 97 a0 01 00  	auipc	ra, 0x1a
80218212: e7 80 00 a6  	jalr	-0x5a0(ra) <memcpy>
80218216: 03 35 84 c4  	ld	a0, -0x3b8(s0)
8021821a: 97 90 fe ff  	auipc	ra, 0xfffe9
8021821e: e7 80 e0 54  	jalr	0x54e(ra) <ekernel+0xffcb4768>
80218222: aa 85        	mv	a1, a0
80218224: 03 35 04 c5  	ld	a0, -0x3b0(s0)
80218228: 97 80 fe ff  	auipc	ra, 0xfffe8
8021822c: e7 80 40 5b  	jalr	0x5b4(ra) <ekernel+0xffcb37dc>
80218230: 03 35 84 c5  	ld	a0, -0x3a8(s0)
80218234: 97 00 ff ff  	auipc	ra, 0xffff0
80218238: e7 80 e0 2e  	jalr	0x2ee(ra) <ekernel+0xffcbb522>
8021823c: 83 30 81 3c  	ld	ra, 0x3c8(sp)
80218240: 03 34 01 3c  	ld	s0, 0x3c0(sp)
; }
80218244: 13 01 01 3d  	addi	sp, sp, 0x3d0
80218248: 82 80        	ret

000000008021824a <_ZN2os4task7manager10crate_init17h50e87d6bd171e033E>:
; pub fn crate_init(name:&str) -> Option<TaskControlBlock>{
8021824a: 13 01 01 c5  	addi	sp, sp, -0x3b0
8021824e: 23 34 11 3a  	sd	ra, 0x3a8(sp)
80218252: 23 30 81 3a  	sd	s0, 0x3a0(sp)
80218256: 00 1f        	addi	s0, sp, 0x3b0
80218258: 23 30 a4 cc  	sd	a0, -0x340(s0)
8021825c: 23 38 b4 fa  	sd	a1, -0x50(s0)
80218260: 23 3c c4 fa  	sd	a2, -0x48(s0)

0000000080218264 <.Lpcrel_hi3>:
;     let init_task = TaskControlBlock::new("initcode");
80218264: 17 b5 01 00  	auipc	a0, 0x1b
80218268: 93 05 45 13  	addi	a1, a0, 0x134
8021826c: 13 05 84 cc  	addi	a0, s0, -0x338
80218270: 21 46        	li	a2, 0x8
80218272: 97 60 ff ff  	auipc	ra, 0xffff6
80218276: e7 80 80 ce  	jalr	-0x318(ra) <ekernel+0xffcc0f5a>

000000008021827a <.Lpcrel_hi4>:
;     let pid = unsafe { TASKMANGER.lock().alloc_pid().unwrap() };
8021827a: 17 f5 01 00  	auipc	a0, 0x1f
8021827e: 13 05 e5 0c  	addi	a0, a0, 0xce
80218282: 97 00 00 00  	auipc	ra, 0x0
80218286: e7 80 80 65  	jalr	0x658(ra) <_ZN73_$LT$os..task..manager..TASKMANGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13a6a188e04fdd86E>
8021828a: 97 b0 ff ff  	auipc	ra, 0xffffb
8021828e: e7 80 a0 ef  	jalr	-0x106(ra) <ekernel+0xffcc6184>
80218292: 23 38 a4 de  	sd	a0, -0x210(s0)
80218296: 23 3c b4 de  	sd	a1, -0x208(s0)
8021829a: 13 05 04 df  	addi	a0, s0, -0x210
8021829e: 97 c0 ff ff  	auipc	ra, 0xffffc
802182a2: e7 80 a0 91  	jalr	-0x6e6(ra) <ekernel+0xffcc6bb8>
802182a6: 97 00 00 00  	auipc	ra, 0x0
802182aa: e7 80 20 e5  	jalr	-0x1ae(ra) <_ZN2os4task7manager11TaskManager9alloc_pid17h9007d27593a79ed1E>
802182ae: 23 3c a4 fc  	sd	a0, -0x28(s0)
802182b2: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
802182b6: 03 35 84 fd  	ld	a0, -0x28(s0)
802182ba: 11 e9        	bnez	a0, 0x802182ce <.Lpcrel_hi5+0x10>
802182bc: 09 a0        	j	0x802182be <.Lpcrel_hi5>

00000000802182be <.Lpcrel_hi5>:
;             None => unwrap_failed(),
802182be: 17 f5 01 00  	auipc	a0, 0x1f
802182c2: 13 05 25 f4  	addi	a0, a0, -0xbe
802182c6: 97 90 01 00  	auipc	ra, 0x19
802182ca: e7 80 20 a0  	jalr	-0x5fe(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
802182ce: 03 35 04 fe  	ld	a0, -0x20(s0)
802182d2: 23 3c a4 ca  	sd	a0, -0x348(s0)
802182d6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     let pid = unsafe { TASKMANGER.lock().alloc_pid().unwrap() };
802182da: 23 30 a4 fc  	sd	a0, -0x40(s0)
802182de: 13 05 04 df  	addi	a0, s0, -0x210
802182e2: 97 00 ff ff  	auipc	ra, 0xffff0
802182e6: e7 80 00 24  	jalr	0x240(ra) <ekernel+0xffcbb522>
802182ea: 03 35 84 cb  	ld	a0, -0x348(s0)
;     if pid !=0 {
802182ee: 25 e1        	bnez	a0, 0x8021834e <.Lpcrel_hi7>
802182f0: 09 a0        	j	0x802182f2 <.Lpcrel_hi5+0x34>
802182f2: 83 35 84 cb  	ld	a1, -0x348(s0)
802182f6: 13 05 84 cc  	addi	a0, s0, -0x338
802182fa: 23 30 a4 ca  	sd	a0, -0x360(s0)
;     init_task.set_pid(pid);
802182fe: 97 60 ff ff  	auipc	ra, 0xffff6
80218302: e7 80 00 d2  	jalr	-0x2e0(ra) <ekernel+0xffcc101e>
80218306: 03 35 04 ca  	ld	a0, -0x360(s0)
;     init_task.inner_mut().context.ra = usertarpret as usize;
8021830a: 97 60 ff ff  	auipc	ra, 0xffff6
8021830e: e7 80 c0 f1  	jalr	-0xe4(ra) <ekernel+0xffcc1226>
80218312: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
80218316: 23 3c b4 e2  	sd	a1, -0x1c8(s0)
8021831a: 13 05 04 e3  	addi	a0, s0, -0x1d0
8021831e: 23 34 a4 ca  	sd	a0, -0x358(s0)
80218322: 97 90 fe ff  	auipc	ra, 0xfffe9
80218326: e7 80 40 87  	jalr	-0x78c(ra) <ekernel+0xffcb3b96>
8021832a: 2a 86        	mv	a2, a0
8021832c: 03 35 84 ca  	ld	a0, -0x358(s0)

0000000080218330 <.Lpcrel_hi6>:
80218330: 97 a5 fe ff  	auipc	a1, 0xfffea
80218334: 93 85 25 3d  	addi	a1, a1, 0x3d2
80218338: 2c f6        	sd	a1, 0x68(a2)
8021833a: 97 00 ff ff  	auipc	ra, 0xffff0
8021833e: e7 80 60 ed  	jalr	-0x12a(ra) <ekernel+0xffcbb210>
80218342: 05 45        	li	a0, 0x1
80218344: 23 38 a4 ca  	sd	a0, -0x350(s0)
80218348: 01 45        	li	a0, 0x0
;     init_task.inner_mut().context.sp = kstack!(0) + PGSZ;
8021834a: 1d ed        	bnez	a0, 0x80218388 <.Lpcrel_hi9>
8021834c: 05 a8        	j	0x8021837c <.Lpcrel_hi8+0x10>

000000008021834e <.Lpcrel_hi7>:
;         panic!("not init")
8021834e: 17 f5 01 00  	auipc	a0, 0x1f
80218352: 93 05 a5 f5  	addi	a1, a0, -0xa6
80218356: 13 05 04 e0  	addi	a0, s0, -0x200
8021835a: 23 3c a4 c8  	sd	a0, -0x368(s0)
8021835e: 05 46        	li	a2, 0x1
80218360: 97 f0 fe ff  	auipc	ra, 0xfffef
80218364: e7 80 40 05  	jalr	0x54(ra) <ekernel+0xffcba3b4>
80218368: 03 35 84 c9  	ld	a0, -0x368(s0)

000000008021836c <.Lpcrel_hi8>:
8021836c: 97 f5 01 00  	auipc	a1, 0x1f
80218370: 93 85 c5 f4  	addi	a1, a1, -0xb4
80218374: 97 80 01 00  	auipc	ra, 0x18
80218378: e7 80 40 e3  	jalr	-0x1cc(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
8021837c: 11 45        	li	a0, 0x4
8021837e: 23 38 a4 c8  	sd	a0, -0x370(s0)
80218382: 01 45        	li	a0, 0x0
;     init_task.inner_mut().context.sp = kstack!(0) + PGSZ;
80218384: 1d e9        	bnez	a0, 0x802183ba <.Lpcrel_hi11>
80218386: 31 a8        	j	0x802183a2 <.Lpcrel_hi10+0x12>

0000000080218388 <.Lpcrel_hi9>:
80218388: 17 f5 01 00  	auipc	a0, 0x1f
8021838c: 13 05 85 ea  	addi	a0, a0, -0x158

0000000080218390 <.Lpcrel_hi10>:
80218390: 97 f5 01 00  	auipc	a1, 0x1f
80218394: 13 86 85 e8  	addi	a2, a1, -0x178
80218398: f1 45        	li	a1, 0x1c
8021839a: 97 80 01 00  	auipc	ra, 0x18
8021839e: e7 80 e0 e7  	jalr	-0x182(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802183a2: 03 35 04 cb  	ld	a0, -0x350(s0)
802183a6: 83 35 04 c9  	ld	a1, -0x370(s0)
;     init_task.inner_mut().context.sp = kstack!(0) + PGSZ;
802183aa: 33 06 b5 02  	mul	a2, a0, a1
802183ae: 23 34 c4 c8  	sd	a2, -0x378(s0)
802183b2: 33 35 b5 02  	mulhu	a0, a0, a1
802183b6: 1d e9        	bnez	a0, 0x802183ec <.Lpcrel_hi13>
802183b8: 31 a8        	j	0x802183d4 <.Lpcrel_hi12+0x12>

00000000802183ba <.Lpcrel_hi11>:
802183ba: 17 f5 01 00  	auipc	a0, 0x1f
802183be: 13 05 65 e7  	addi	a0, a0, -0x18a

00000000802183c2 <.Lpcrel_hi12>:
802183c2: 97 f5 01 00  	auipc	a1, 0x1f
802183c6: 13 86 65 e5  	addi	a2, a1, -0x1aa
802183ca: f1 45        	li	a1, 0x1c
802183cc: 97 80 01 00  	auipc	ra, 0x18
802183d0: e7 80 c0 e4  	jalr	-0x1b4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802183d4: 83 35 84 c8  	ld	a1, -0x378(s0)
;     init_task.inner_mut().context.sp = kstack!(0) + PGSZ;
802183d8: 13 95 c5 00  	slli	a0, a1, 0xc
802183dc: 23 30 a4 c8  	sd	a0, -0x380(s0)
802183e0: 13 95 c5 00  	slli	a0, a1, 0xc
802183e4: 31 81        	srli	a0, a0, 0xc
802183e6: 63 1e b5 02  	bne	a0, a1, 0x80218422 <.Lpcrel_hi15>
802183ea: 39 a8        	j	0x80218408 <.Lpcrel_hi14+0x14>

00000000802183ec <.Lpcrel_hi13>:
802183ec: 17 f5 01 00  	auipc	a0, 0x1f
802183f0: 13 05 45 e6  	addi	a0, a0, -0x19c

00000000802183f4 <.Lpcrel_hi14>:
802183f4: 97 f5 01 00  	auipc	a1, 0x1f
802183f8: 13 86 45 e2  	addi	a2, a1, -0x1dc
802183fc: 93 05 10 02  	li	a1, 0x21
80218400: 97 80 01 00  	auipc	ra, 0x18
80218404: e7 80 80 e1  	jalr	-0x1e8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80218408: 83 35 04 c8  	ld	a1, -0x380(s0)
8021840c: 37 05 00 02  	lui	a0, 0x2000
80218410: 7d 35        	addiw	a0, a0, -0x1
80218412: 36 05        	slli	a0, a0, 0xd
;     init_task.inner_mut().context.sp = kstack!(0) + PGSZ;
80218414: 33 06 b5 40  	sub	a2, a0, a1
80218418: 23 3c c4 c6  	sd	a2, -0x388(s0)
8021841c: 63 6a b5 02  	bltu	a0, a1, 0x80218450 <.Lpcrel_hi17>
80218420: 39 a8        	j	0x8021843e <.Lpcrel_hi16+0x14>

0000000080218422 <.Lpcrel_hi15>:
80218422: 17 f5 01 00  	auipc	a0, 0x1f
80218426: 13 05 e5 e2  	addi	a0, a0, -0x1d2

000000008021842a <.Lpcrel_hi16>:
8021842a: 97 f5 01 00  	auipc	a1, 0x1f
8021842e: 13 86 e5 de  	addi	a2, a1, -0x212
80218432: 93 05 10 02  	li	a1, 0x21
80218436: 97 80 01 00  	auipc	ra, 0x18
8021843a: e7 80 20 de  	jalr	-0x21e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021843e: 83 35 84 c7  	ld	a1, -0x388(s0)
80218442: 05 65        	lui	a0, 0x1
;     init_task.inner_mut().context.sp = kstack!(0) + PGSZ;
80218444: 2e 95        	add	a0, a0, a1
80218446: 23 38 a4 c6  	sd	a0, -0x390(s0)
8021844a: 63 64 b5 2c  	bltu	a0, a1, 0x80218712 <.Lpcrel_hi21>
8021844e: 39 a8        	j	0x8021846c <.Lpcrel_hi18+0x14>

0000000080218450 <.Lpcrel_hi17>:
80218450: 17 f5 01 00  	auipc	a0, 0x1f
80218454: 13 05 05 e3  	addi	a0, a0, -0x1d0

0000000080218458 <.Lpcrel_hi18>:
80218458: 97 f5 01 00  	auipc	a1, 0x1f
8021845c: 13 86 05 dc  	addi	a2, a1, -0x240
80218460: 93 05 10 02  	li	a1, 0x21
80218464: 97 80 01 00  	auipc	ra, 0x18
80218468: e7 80 40 db  	jalr	-0x24c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021846c: 13 05 84 cc  	addi	a0, s0, -0x338
80218470: 23 3c a4 c4  	sd	a0, -0x3a8(s0)
;     init_task.inner_mut().context.sp = kstack!(0) + PGSZ;
80218474: 97 60 ff ff  	auipc	ra, 0xffff6
80218478: e7 80 20 db  	jalr	-0x24e(ra) <ekernel+0xffcc1226>
8021847c: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
80218480: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
80218484: 13 05 04 e4  	addi	a0, s0, -0x1c0
80218488: 23 38 a4 c4  	sd	a0, -0x3b0(s0)
8021848c: 97 80 fe ff  	auipc	ra, 0xfffe8
80218490: e7 80 a0 70  	jalr	0x70a(ra) <ekernel+0xffcb3b96>
80218494: 83 35 04 c7  	ld	a1, -0x390(s0)
80218498: 2a 86        	mv	a2, a0
8021849a: 03 35 04 c5  	ld	a0, -0x3b0(s0)
8021849e: 2c fa        	sd	a1, 0x70(a2)
802184a0: 97 00 ff ff  	auipc	ra, 0xffff0
802184a4: e7 80 00 d7  	jalr	-0x290(ra) <ekernel+0xffcbb210>

00000000802184a8 <.Lpcrel_hi19>:
;     let pgtbl_ptr = set_init_pagetable(INITCODE, PGSZ);
802184a8: 17 d5 01 00  	auipc	a0, 0x1d
802184ac: 13 05 05 22  	addi	a0, a0, 0x220
802184b0: 03 46 05 03  	lbu	a2, 0x30(a0)
802184b4: 83 45 15 03  	lbu	a1, 0x31(a0)
802184b8: 9b 95 85 00  	slliw	a1, a1, 0x8
802184bc: 4d 8e        	or	a2, a2, a1
802184be: 83 45 25 03  	lbu	a1, 0x32(a0)
802184c2: 9b 96 05 01  	slliw	a3, a1, 0x10
802184c6: 83 45 35 03  	lbu	a1, 0x33(a0)
802184ca: 9b 95 85 01  	slliw	a1, a1, 0x18
802184ce: d5 8d        	or	a1, a1, a3
802184d0: d1 8d        	or	a1, a1, a2
802184d2: 23 20 b4 e8  	sw	a1, -0x180(s0)
802184d6: 03 46 85 02  	lbu	a2, 0x28(a0)
802184da: 83 45 95 02  	lbu	a1, 0x29(a0)
802184de: a2 05        	slli	a1, a1, 0x8
802184e0: 4d 8e        	or	a2, a2, a1
802184e2: 83 45 a5 02  	lbu	a1, 0x2a(a0)
802184e6: 93 96 05 01  	slli	a3, a1, 0x10
802184ea: 83 45 b5 02  	lbu	a1, 0x2b(a0)
802184ee: e2 05        	slli	a1, a1, 0x18
802184f0: d5 8d        	or	a1, a1, a3
802184f2: 4d 8e        	or	a2, a2, a1
802184f4: 83 46 c5 02  	lbu	a3, 0x2c(a0)
802184f8: 83 45 d5 02  	lbu	a1, 0x2d(a0)
802184fc: 9b 95 85 00  	slliw	a1, a1, 0x8
80218500: cd 8e        	or	a3, a3, a1
80218502: 83 45 e5 02  	lbu	a1, 0x2e(a0)
80218506: 1b 97 05 01  	slliw	a4, a1, 0x10
8021850a: 83 45 f5 02  	lbu	a1, 0x2f(a0)
8021850e: 9b 95 85 01  	slliw	a1, a1, 0x18
80218512: d9 8d        	or	a1, a1, a4
80218514: d5 8d        	or	a1, a1, a3
80218516: 82 15        	slli	a1, a1, 0x20
80218518: d1 8d        	or	a1, a1, a2
8021851a: 23 3c b4 e6  	sd	a1, -0x188(s0)
8021851e: 03 46 05 02  	lbu	a2, 0x20(a0)
80218522: 83 45 15 02  	lbu	a1, 0x21(a0)
80218526: a2 05        	slli	a1, a1, 0x8
80218528: 4d 8e        	or	a2, a2, a1
8021852a: 83 45 25 02  	lbu	a1, 0x22(a0)
8021852e: 93 96 05 01  	slli	a3, a1, 0x10
80218532: 83 45 35 02  	lbu	a1, 0x23(a0)
80218536: e2 05        	slli	a1, a1, 0x18
80218538: d5 8d        	or	a1, a1, a3
8021853a: 4d 8e        	or	a2, a2, a1
8021853c: 83 46 45 02  	lbu	a3, 0x24(a0)
80218540: 83 45 55 02  	lbu	a1, 0x25(a0)
80218544: 9b 95 85 00  	slliw	a1, a1, 0x8
80218548: cd 8e        	or	a3, a3, a1
8021854a: 83 45 65 02  	lbu	a1, 0x26(a0)
8021854e: 1b 97 05 01  	slliw	a4, a1, 0x10
80218552: 83 45 75 02  	lbu	a1, 0x27(a0)
80218556: 9b 95 85 01  	slliw	a1, a1, 0x18
8021855a: d9 8d        	or	a1, a1, a4
8021855c: d5 8d        	or	a1, a1, a3
8021855e: 82 15        	slli	a1, a1, 0x20
80218560: d1 8d        	or	a1, a1, a2
80218562: 23 38 b4 e6  	sd	a1, -0x190(s0)
80218566: 03 46 85 01  	lbu	a2, 0x18(a0)
8021856a: 83 45 95 01  	lbu	a1, 0x19(a0)
8021856e: a2 05        	slli	a1, a1, 0x8
80218570: 4d 8e        	or	a2, a2, a1
80218572: 83 45 a5 01  	lbu	a1, 0x1a(a0)
80218576: 93 96 05 01  	slli	a3, a1, 0x10
8021857a: 83 45 b5 01  	lbu	a1, 0x1b(a0)
8021857e: e2 05        	slli	a1, a1, 0x18
80218580: d5 8d        	or	a1, a1, a3
80218582: 4d 8e        	or	a2, a2, a1
80218584: 83 46 c5 01  	lbu	a3, 0x1c(a0)
80218588: 83 45 d5 01  	lbu	a1, 0x1d(a0)
8021858c: 9b 95 85 00  	slliw	a1, a1, 0x8
80218590: cd 8e        	or	a3, a3, a1
80218592: 83 45 e5 01  	lbu	a1, 0x1e(a0)
80218596: 1b 97 05 01  	slliw	a4, a1, 0x10
8021859a: 83 45 f5 01  	lbu	a1, 0x1f(a0)
8021859e: 9b 95 85 01  	slliw	a1, a1, 0x18
802185a2: d9 8d        	or	a1, a1, a4
802185a4: d5 8d        	or	a1, a1, a3
802185a6: 82 15        	slli	a1, a1, 0x20
802185a8: d1 8d        	or	a1, a1, a2
802185aa: 23 34 b4 e6  	sd	a1, -0x198(s0)
802185ae: 03 46 05 01  	lbu	a2, 0x10(a0)
802185b2: 83 45 15 01  	lbu	a1, 0x11(a0)
802185b6: a2 05        	slli	a1, a1, 0x8
802185b8: 4d 8e        	or	a2, a2, a1
802185ba: 83 45 25 01  	lbu	a1, 0x12(a0)
802185be: 93 96 05 01  	slli	a3, a1, 0x10
802185c2: 83 45 35 01  	lbu	a1, 0x13(a0)
802185c6: e2 05        	slli	a1, a1, 0x18
802185c8: d5 8d        	or	a1, a1, a3
802185ca: 4d 8e        	or	a2, a2, a1
802185cc: 83 46 45 01  	lbu	a3, 0x14(a0)
802185d0: 83 45 55 01  	lbu	a1, 0x15(a0)
802185d4: 9b 95 85 00  	slliw	a1, a1, 0x8
802185d8: cd 8e        	or	a3, a3, a1
802185da: 83 45 65 01  	lbu	a1, 0x16(a0)
802185de: 1b 97 05 01  	slliw	a4, a1, 0x10
802185e2: 83 45 75 01  	lbu	a1, 0x17(a0)
802185e6: 9b 95 85 01  	slliw	a1, a1, 0x18
802185ea: d9 8d        	or	a1, a1, a4
802185ec: d5 8d        	or	a1, a1, a3
802185ee: 82 15        	slli	a1, a1, 0x20
802185f0: d1 8d        	or	a1, a1, a2
802185f2: 23 30 b4 e6  	sd	a1, -0x1a0(s0)
802185f6: 03 46 85 00  	lbu	a2, 0x8(a0)
802185fa: 83 45 95 00  	lbu	a1, 0x9(a0)
802185fe: a2 05        	slli	a1, a1, 0x8
80218600: 4d 8e        	or	a2, a2, a1
80218602: 83 45 a5 00  	lbu	a1, 0xa(a0)
80218606: 93 96 05 01  	slli	a3, a1, 0x10
8021860a: 83 45 b5 00  	lbu	a1, 0xb(a0)
8021860e: e2 05        	slli	a1, a1, 0x18
80218610: d5 8d        	or	a1, a1, a3
80218612: 4d 8e        	or	a2, a2, a1
80218614: 83 46 c5 00  	lbu	a3, 0xc(a0)
80218618: 83 45 d5 00  	lbu	a1, 0xd(a0)
8021861c: 9b 95 85 00  	slliw	a1, a1, 0x8
80218620: cd 8e        	or	a3, a3, a1
80218622: 83 45 e5 00  	lbu	a1, 0xe(a0)
80218626: 1b 97 05 01  	slliw	a4, a1, 0x10
8021862a: 83 45 f5 00  	lbu	a1, 0xf(a0)
8021862e: 9b 95 85 01  	slliw	a1, a1, 0x18
80218632: d9 8d        	or	a1, a1, a4
80218634: d5 8d        	or	a1, a1, a3
80218636: 82 15        	slli	a1, a1, 0x20
80218638: d1 8d        	or	a1, a1, a2
8021863a: 23 3c b4 e4  	sd	a1, -0x1a8(s0)
8021863e: 03 46 05 00  	lbu	a2, 0x0(a0)
80218642: 83 45 15 00  	lbu	a1, 0x1(a0)
80218646: a2 05        	slli	a1, a1, 0x8
80218648: 4d 8e        	or	a2, a2, a1
8021864a: 83 45 25 00  	lbu	a1, 0x2(a0)
8021864e: 93 96 05 01  	slli	a3, a1, 0x10
80218652: 83 45 35 00  	lbu	a1, 0x3(a0)
80218656: e2 05        	slli	a1, a1, 0x18
80218658: d5 8d        	or	a1, a1, a3
8021865a: d1 8d        	or	a1, a1, a2
8021865c: 83 46 45 00  	lbu	a3, 0x4(a0)
80218660: 03 46 55 00  	lbu	a2, 0x5(a0)
80218664: 1b 16 86 00  	slliw	a2, a2, 0x8
80218668: 55 8e        	or	a2, a2, a3
8021866a: 83 46 65 00  	lbu	a3, 0x6(a0)
8021866e: 9b 96 06 01  	slliw	a3, a3, 0x10
80218672: 03 45 75 00  	lbu	a0, 0x7(a0)
80218676: 1b 15 85 01  	slliw	a0, a0, 0x18
8021867a: 55 8d        	or	a0, a0, a3
8021867c: 51 8d        	or	a0, a0, a2
8021867e: 02 15        	slli	a0, a0, 0x20
80218680: 4d 8d        	or	a0, a0, a1
80218682: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80218686: 13 05 04 e5  	addi	a0, s0, -0x1b0
8021868a: 85 65        	lui	a1, 0x1
8021868c: 97 00 00 00  	auipc	ra, 0x0
80218690: e7 80 00 0a  	jalr	0xa0(ra) <_ZN2os4task7manager18set_init_pagetable17hf9447683f251098eE>
80218694: aa 85        	mv	a1, a0
80218696: 03 35 84 c5  	ld	a0, -0x3a8(s0)
8021869a: 23 34 b4 fc  	sd	a1, -0x38(s0)
;     init_task.set_pagetable(pgtbl_ptr);
8021869e: 97 60 ff ff  	auipc	ra, 0xffff6
802186a2: e7 80 20 c3  	jalr	-0x3ce(ra) <ekernel+0xffcc12d0>

00000000802186a6 <.Lpcrel_hi20>:
;     let gurd = FRAME_ALLOC.page_alloc();
802186a6: 17 65 02 00  	auipc	a0, 0x26
802186aa: 13 05 a5 95  	addi	a0, a0, -0x6a6
802186ae: 97 c0 fe ff  	auipc	ra, 0xfffec
802186b2: e7 80 80 80  	jalr	-0x7f8(ra) <ekernel+0xffcb6eb6>
802186b6: aa 85        	mv	a1, a0
802186b8: 03 35 84 c5  	ld	a0, -0x3a8(s0)
802186bc: 23 38 b4 fc  	sd	a1, -0x30(s0)
;     init_task.new_set_trapframe(gurd);
802186c0: 97 60 ff ff  	auipc	ra, 0xffff6
802186c4: e7 80 e0 cf  	jalr	-0x302(ra) <ekernel+0xffcc13be>
802186c8: 03 35 84 c5  	ld	a0, -0x3a8(s0)
;     init_task.map_trap();
802186cc: 97 60 ff ff  	auipc	ra, 0xffff6
802186d0: e7 80 80 c5  	jalr	-0x3a8(ra) <ekernel+0xffcc1324>
802186d4: 83 35 84 c5  	ld	a1, -0x3a8(s0)
802186d8: 13 05 84 e8  	addi	a0, s0, -0x178
802186dc: 23 30 a4 c6  	sd	a0, -0x3a0(s0)
802186e0: 13 06 80 12  	li	a2, 0x128
802186e4: 23 34 c4 c6  	sd	a2, -0x398(s0)
;     Some(init_task)
802186e8: 97 90 01 00  	auipc	ra, 0x19
802186ec: e7 80 60 58  	jalr	0x586(ra) <memcpy>
802186f0: 83 35 04 c6  	ld	a1, -0x3a0(s0)
802186f4: 03 36 84 c6  	ld	a2, -0x398(s0)
802186f8: 03 35 04 cc  	ld	a0, -0x340(s0)
802186fc: 97 90 01 00  	auipc	ra, 0x19
80218700: e7 80 20 57  	jalr	0x572(ra) <memcpy>
80218704: 83 30 81 3a  	ld	ra, 0x3a8(sp)
80218708: 03 34 01 3a  	ld	s0, 0x3a0(sp)
; }
8021870c: 13 01 01 3b  	addi	sp, sp, 0x3b0
80218710: 82 80        	ret

0000000080218712 <.Lpcrel_hi21>:
;     init_task.inner_mut().context.sp = kstack!(0) + PGSZ;
80218712: 17 f5 01 00  	auipc	a0, 0x1f
80218716: 13 05 e5 b1  	addi	a0, a0, -0x4e2

000000008021871a <.Lpcrel_hi22>:
8021871a: 97 f5 01 00  	auipc	a1, 0x1f
8021871e: 13 86 e5 af  	addi	a2, a1, -0x502
80218722: f1 45        	li	a1, 0x1c
80218724: 97 80 01 00  	auipc	ra, 0x18
80218728: e7 80 40 af  	jalr	-0x50c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021872c <_ZN2os4task7manager18set_init_pagetable17hf9447683f251098eE>:
; pub fn set_init_pagetable(src:[u8;52],sz:usize) -> Box<PageTable>{
8021872c: 69 71        	addi	sp, sp, -0x130
8021872e: 06 f6        	sd	ra, 0x128(sp)
80218730: 22 f2        	sd	s0, 0x120(sp)
80218732: 00 1a        	addi	s0, sp, 0x130
80218734: 23 34 b4 f0  	sd	a1, -0xf8(s0)
80218738: 23 30 a4 f0  	sd	a0, -0x100(s0)
8021873c: 23 3c b4 fa  	sd	a1, -0x48(s0)
80218740: 13 05 04 f1  	addi	a0, s0, -0xf0
;     let mut pagetable = PageTable::new();
80218744: 97 40 ff ff  	auipc	ra, 0xffff4
80218748: e7 80 40 c3  	jalr	-0x3cc(ra) <ekernel+0xffcbf378>
8021874c: 83 35 84 f0  	ld	a1, -0xf8(s0)
80218750: 05 65        	lui	a0, 0x1
;     if sz >PGSZ {
80218752: 63 61 b5 14  	bltu	a0, a1, 0x80218894 <.Lpcrel_hi26>
80218756: 09 a0        	j	0x80218758 <.Lpcrel_hi23>

0000000080218758 <.Lpcrel_hi23>:
;     let gurd = FRAME_ALLOC.page_alloc();
80218758: 17 65 02 00  	auipc	a0, 0x26
8021875c: 13 05 85 8a  	addi	a0, a0, -0x758
80218760: 97 b0 fe ff  	auipc	ra, 0xfffeb
80218764: e7 80 60 75  	jalr	0x756(ra) <ekernel+0xffcb6eb6>
80218768: aa 85        	mv	a1, a0
8021876a: 23 30 b4 fc  	sd	a1, -0x40(s0)
;     let pa = gurd.pages;
8021876e: 23 3c b4 f6  	sd	a1, -0x88(s0)
80218772: 13 05 04 f1  	addi	a0, s0, -0xf0
80218776: 23 34 a4 ee  	sd	a0, -0x118(s0)
;     pagetable.save_page(gurd);
8021877a: 97 40 ff ff  	auipc	ra, 0xffff4
8021877e: e7 80 a0 d0  	jalr	-0x2f6(ra) <ekernel+0xffcbf484>

0000000080218782 <.Lpcrel_hi24>:
;         0.into(), 
80218782: 17 f5 01 00  	auipc	a0, 0x1f
80218786: 93 05 e5 b4  	addi	a1, a0, -0x4b2
8021878a: 01 45        	li	a0, 0x0
8021878c: 97 30 ff ff  	auipc	ra, 0xffff3
80218790: e7 80 a0 76  	jalr	0x76a(ra) <ekernel+0xffcbeef6>
80218794: 23 30 a4 ee  	sd	a0, -0x120(s0)
;         (pa.0).into() , 
80218798: 03 35 84 f7  	ld	a0, -0x88(s0)

000000008021879c <.Lpcrel_hi25>:
8021879c: 97 f5 01 00  	auipc	a1, 0x1f
802187a0: 93 85 c5 b4  	addi	a1, a1, -0x4b4
802187a4: 97 30 ff ff  	auipc	ra, 0xffff3
802187a8: e7 80 60 73  	jalr	0x736(ra) <ekernel+0xffcbeeda>
802187ac: 83 35 04 ee  	ld	a1, -0x120(s0)
802187b0: 2a 86        	mv	a2, a0
802187b2: 03 35 84 ee  	ld	a0, -0x118(s0)
802187b6: 85 66        	lui	a3, 0x1
802187b8: 79 47        	li	a4, 0x1e
;     pagetable.mappages(
802187ba: 97 40 ff ff  	auipc	ra, 0xffff4
802187be: e7 80 a0 ce  	jalr	-0x316(ra) <ekernel+0xffcbf4a4>
802187c2: 03 35 04 f0  	ld	a0, -0x100(s0)
802187c6: 23 30 a4 fe  	sd	a0, -0x20(s0)
802187ca: 13 05 40 03  	li	a0, 0x34
802187ce: 23 3c a4 ee  	sd	a0, -0x108(s0)
802187d2: 23 34 a4 fe  	sd	a0, -0x18(s0)
802187d6: 13 05 84 f7  	addi	a0, s0, -0x88
;     unsafe {ptr::copy_nonoverlapping(src.as_ptr(), pa.get_mut(), src.len());}
802187da: 97 e0 fe ff  	auipc	ra, 0xfffee
802187de: e7 80 c0 33  	jalr	0x33c(ra) <ekernel+0xffcb9b16>
802187e2: 03 37 84 ef  	ld	a4, -0x108(s0)
802187e6: aa 85        	mv	a1, a0
802187e8: 03 35 04 f0  	ld	a0, -0x100(s0)
802187ec: 23 38 b4 ee  	sd	a1, -0x110(s0)
802187f0: 23 34 a4 fc  	sd	a0, -0x38(s0)
802187f4: 23 38 b4 fc  	sd	a1, -0x30(s0)
802187f8: 23 3c e4 fc  	sd	a4, -0x28(s0)
802187fc: 85 46        	li	a3, 0x1
;     assert_unsafe_precondition!(
802187fe: 36 86        	mv	a2, a3
80218800: 97 10 00 00  	auipc	ra, 0x1
80218804: e7 80 c0 00  	jalr	0xc(ra) <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h279b2b08ed81b702E>
80218808: 03 35 04 ef  	ld	a0, -0x110(s0)
8021880c: 83 35 04 f0  	ld	a1, -0x100(s0)
80218810: 03 36 84 ef  	ld	a2, -0x108(s0)
;     unsafe { copy_nonoverlapping(src, dst, count) }
80218814: 97 90 01 00  	auipc	ra, 0x19
80218818: e7 80 a0 45  	jalr	0x45a(ra) <memcpy>
;     Box::new(pagetable)
8021881c: 03 35 04 f4  	ld	a0, -0xc0(s0)
80218820: 23 38 a4 fa  	sd	a0, -0x50(s0)
80218824: 03 35 84 f3  	ld	a0, -0xc8(s0)
80218828: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021882c: 03 35 04 f3  	ld	a0, -0xd0(s0)
80218830: 23 30 a4 fa  	sd	a0, -0x60(s0)
80218834: 03 35 84 f2  	ld	a0, -0xd8(s0)
80218838: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021883c: 03 35 04 f2  	ld	a0, -0xe0(s0)
80218840: 23 38 a4 f8  	sd	a0, -0x70(s0)
80218844: 03 35 84 f1  	ld	a0, -0xe8(s0)
80218848: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021884c: 03 35 04 f1  	ld	a0, -0xf0(s0)
80218850: 23 30 a4 f8  	sd	a0, -0x80(s0)
80218854: 13 05 80 03  	li	a0, 0x38
80218858: a1 45        	li	a1, 0x8
;         Box::new(x)
8021885a: 97 20 ff ff  	auipc	ra, 0xffff2
8021885e: e7 80 80 22  	jalr	0x228(ra) <ekernel+0xffcbda82>
80218862: 83 35 04 fb  	ld	a1, -0x50(s0)
80218866: 0c f9        	sd	a1, 0x30(a0)
80218868: 83 35 84 fa  	ld	a1, -0x58(s0)
8021886c: 0c f5        	sd	a1, 0x28(a0)
8021886e: 83 35 04 fa  	ld	a1, -0x60(s0)
80218872: 0c f1        	sd	a1, 0x20(a0)
80218874: 83 35 84 f9  	ld	a1, -0x68(s0)
80218878: 0c ed        	sd	a1, 0x18(a0)
8021887a: 83 35 04 f9  	ld	a1, -0x70(s0)
8021887e: 0c e9        	sd	a1, 0x10(a0)
80218880: 83 35 84 f8  	ld	a1, -0x78(s0)
80218884: 0c e5        	sd	a1, 0x8(a0)
80218886: 83 35 04 f8  	ld	a1, -0x80(s0)
8021888a: 0c e1        	sd	a1, 0x0(a0)
8021888c: b2 70        	ld	ra, 0x128(sp)
8021888e: 12 74        	ld	s0, 0x120(sp)
; }
80218890: 55 61        	addi	sp, sp, 0x130
80218892: 82 80        	ret

0000000080218894 <.Lpcrel_hi26>:
;         panic!("initcode map more than PGSZ")
80218894: 17 f5 01 00  	auipc	a0, 0x1f
80218898: 93 05 c5 a8  	addi	a1, a0, -0x574
8021889c: 13 05 84 f4  	addi	a0, s0, -0xb8
802188a0: 23 3c a4 ec  	sd	a0, -0x128(s0)
802188a4: 05 46        	li	a2, 0x1
802188a6: 97 f0 fe ff  	auipc	ra, 0xfffef
802188aa: e7 80 e0 b0  	jalr	-0x4f2(ra) <ekernel+0xffcba3b4>
802188ae: 03 35 84 ed  	ld	a0, -0x128(s0)

00000000802188b2 <.Lpcrel_hi27>:
802188b2: 97 f5 01 00  	auipc	a1, 0x1f
802188b6: 93 85 e5 a7  	addi	a1, a1, -0x582
802188ba: 97 80 01 00  	auipc	ra, 0x18
802188be: e7 80 e0 8e  	jalr	-0x712(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802188c2 <_ZN2os4task7manager4init17hb014b1a8773371a2E>:
; pub fn init(){
802188c2: 41 11        	addi	sp, sp, -0x10
802188c4: 06 e4        	sd	ra, 0x8(sp)
802188c6: 22 e0        	sd	s0, 0x0(sp)
802188c8: 00 08        	addi	s0, sp, 0x10
;     init_zero_task();
802188ca: 97 00 00 00  	auipc	ra, 0x0
802188ce: e7 80 20 88  	jalr	-0x77e(ra) <_ZN2os4task7manager14init_zero_task17hadbab9892aed9d58E>
802188d2: a2 60        	ld	ra, 0x8(sp)
802188d4: 02 64        	ld	s0, 0x0(sp)
; }
802188d6: 41 01        	addi	sp, sp, 0x10
802188d8: 82 80        	ret

00000000802188da <_ZN73_$LT$os..task..manager..TASKMANGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h13a6a188e04fdd86E>:
;             fn deref(&self) -> &$T {
802188da: 01 11        	addi	sp, sp, -0x20
802188dc: 06 ec        	sd	ra, 0x18(sp)
802188de: 22 e8        	sd	s0, 0x10(sp)
802188e0: 00 10        	addi	s0, sp, 0x20
802188e2: 23 30 a4 fe  	sd	a0, -0x20(s0)

00000000802188e6 <.Lpcrel_hi28>:
802188e6: 17 45 33 00  	auipc	a0, 0x334
802188ea: 13 05 25 8a  	addi	a0, a0, -0x75e
802188ee: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0.call_once(builder)
802188f2: 97 00 00 00  	auipc	ra, 0x0
802188f6: e7 80 00 01  	jalr	0x10(ra) <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE>
802188fa: e2 60        	ld	ra, 0x18(sp)
802188fc: 42 64        	ld	s0, 0x10(sp)
;             }
802188fe: 05 61        	addi	sp, sp, 0x20
80218900: 82 80        	ret

0000000080218902 <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE>:
;     pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80218902: 49 71        	addi	sp, sp, -0x170
80218904: 86 f6        	sd	ra, 0x168(sp)
80218906: a2 f2        	sd	s0, 0x160(sp)
80218908: 80 1a        	addi	s0, sp, 0x170
8021890a: 23 30 a4 ec  	sd	a0, -0x140(s0)
8021890e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80218912: 81 45        	li	a1, 0x0
;         loop {
80218914: a3 0b b4 fc  	sb	a1, -0x29(s0)
80218918: 85 45        	li	a1, 0x1
8021891a: a3 0b b4 fc  	sb	a1, -0x29(s0)
;         let mut status = self.state.load(Ordering::SeqCst);
8021891e: 13 05 05 07  	addi	a0, a0, 0x70
80218922: 91 45        	li	a1, 0x4
80218924: 23 0f b4 ec  	sb	a1, -0x122(s0)
80218928: 83 45 e4 ed  	lbu	a1, -0x122(s0)
8021892c: 97 d0 ff ff  	auipc	ra, 0xffffd
80218930: e7 80 40 4d  	jalr	0x4d4(ra) <ekernel+0xffcc8e00>
80218934: 23 38 a4 ec  	sd	a0, -0x130(s0)
;         if status == INCOMPLETE {
80218938: 03 35 04 ed  	ld	a0, -0x130(s0)
8021893c: 1d c9        	beqz	a0, 0x80218972 <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE+0x70>
8021893e: 09 a0        	j	0x80218940 <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE+0x3e>
;             match status {
80218940: 03 35 04 ed  	ld	a0, -0x130(s0)
80218944: 23 3c a4 ea  	sd	a0, -0x148(s0)
80218948: 63 09 05 10  	beqz	a0, 0x80218a5a <.Lpcrel_hi0>
8021894c: 09 a0        	j	0x8021894e <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE+0x4c>
8021894e: 03 35 84 eb  	ld	a0, -0x148(s0)
80218952: 85 45        	li	a1, 0x1
;             match status {
80218954: 63 01 b5 12  	beq	a0, a1, 0x80218a76 <.Lpcrel_hi1+0x14>
80218958: 09 a0        	j	0x8021895a <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE+0x58>
8021895a: 03 35 84 eb  	ld	a0, -0x148(s0)
8021895e: 89 45        	li	a1, 0x2
;             match status {
80218960: 63 0c b5 14  	beq	a0, a1, 0x80218ab8 <.Lpcrel_hi3+0x12>
80218964: 09 a0        	j	0x80218966 <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE+0x64>
80218966: 03 35 84 eb  	ld	a0, -0x148(s0)
8021896a: 8d 45        	li	a1, 0x3
;             match status {
8021896c: 63 09 b5 12  	beq	a0, a1, 0x80218a9e <.Lpcrel_hi2>
80218970: cd a0        	j	0x80218a52 <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE+0x150>
80218972: 03 35 04 ec  	ld	a0, -0x140(s0)
;             status = self.state.compare_and_swap(INCOMPLETE,
80218976: 13 05 05 07  	addi	a0, a0, 0x70
8021897a: 91 45        	li	a1, 0x4
;                                                  Ordering::SeqCst);
8021897c: a3 0f b4 ec  	sb	a1, -0x121(s0)
;             status = self.state.compare_and_swap(INCOMPLETE,
80218980: 83 46 f4 ed  	lbu	a3, -0x121(s0)
80218984: 81 45        	li	a1, 0x0
80218986: 05 46        	li	a2, 0x1
80218988: 97 d0 ff ff  	auipc	ra, 0xffffd
8021898c: e7 80 60 3b  	jalr	0x3b6(ra) <ekernel+0xffcc8d3e>
80218990: 23 38 a4 ec  	sd	a0, -0x130(s0)
;             if status == INCOMPLETE { // We init
80218994: 03 35 04 ed  	ld	a0, -0x130(s0)
80218998: 45 f5        	bnez	a0, 0x80218940 <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE+0x3e>
8021899a: 09 a0        	j	0x8021899c <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE+0x9a>
8021899c: 03 35 04 ec  	ld	a0, -0x140(s0)
;                 let mut finish = Finish { state: &self.state, panicked: true };
802189a0: 13 05 05 07  	addi	a0, a0, 0x70
802189a4: 23 38 a4 ea  	sd	a0, -0x150(s0)
802189a8: 23 30 a4 ee  	sd	a0, -0x120(s0)
802189ac: 05 45        	li	a0, 0x1
802189ae: 23 04 a4 ee  	sb	a0, -0x118(s0)
802189b2: 01 45        	li	a0, 0x0
802189b4: 23 34 a4 ea  	sd	a0, -0x158(s0)
;                 unsafe { *self.data.get() = Some(builder()) };
802189b8: a3 0b a4 fc  	sb	a0, -0x29(s0)
802189bc: 13 05 04 f6  	addi	a0, s0, -0xa0
802189c0: 23 38 a4 e8  	sd	a0, -0x170(s0)
802189c4: 97 f0 fe ff  	auipc	ra, 0xfffef
802189c8: e7 80 a0 ec  	jalr	-0x136(ra) <ekernel+0xffcba88e>
802189cc: 83 35 04 e9  	ld	a1, -0x170(s0)
802189d0: 13 05 04 ef  	addi	a0, s0, -0x110
802189d4: 23 3c a4 e8  	sd	a0, -0x168(s0)
802189d8: 13 06 00 07  	li	a2, 0x70
802189dc: 23 30 c4 ea  	sd	a2, -0x160(s0)
802189e0: 97 90 01 00  	auipc	ra, 0x19
802189e4: e7 80 e0 28  	jalr	0x28e(ra) <memcpy>
802189e8: 03 35 04 ec  	ld	a0, -0x140(s0)
802189ec: 23 34 a4 fe  	sd	a0, -0x18(s0)
802189f0: 97 f0 fe ff  	auipc	ra, 0xfffef
802189f4: e7 80 c0 01  	jalr	0x1c(ra) <ekernel+0xffcbaa0c>
802189f8: 83 35 84 e9  	ld	a1, -0x168(s0)
802189fc: 03 36 04 ea  	ld	a2, -0x160(s0)
80218a00: 03 35 04 ec  	ld	a0, -0x140(s0)
80218a04: 97 90 01 00  	auipc	ra, 0x19
80218a08: e7 80 a0 26  	jalr	0x26a(ra) <memcpy>
80218a0c: 83 35 84 ea  	ld	a1, -0x158(s0)
80218a10: 03 35 04 eb  	ld	a0, -0x150(s0)
;                 finish.panicked = false;
80218a14: 23 04 b4 ee  	sb	a1, -0x118(s0)
80218a18: 89 45        	li	a1, 0x2
;                 status = COMPLETE;
80218a1a: 23 38 b4 ec  	sd	a1, -0x130(s0)
;                 self.state.store(status, Ordering::SeqCst);
80218a1e: 83 35 04 ed  	ld	a1, -0x130(s0)
80218a22: 11 46        	li	a2, 0x4
80218a24: a3 0a c4 fc  	sb	a2, -0x2b(s0)
80218a28: 03 46 54 fd  	lbu	a2, -0x2b(s0)
80218a2c: 97 d0 ff ff  	auipc	ra, 0xffffd
80218a30: e7 80 80 3f  	jalr	0x3f8(ra) <ekernel+0xffcc8e24>
80218a34: 03 35 04 ec  	ld	a0, -0x140(s0)
;                 return self.force_get();
80218a38: 97 00 00 00  	auipc	ra, 0x0
80218a3c: e7 80 00 68  	jalr	0x680(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17h9001b5a3c1738330E>
80218a40: 23 34 a4 ec  	sd	a0, -0x138(s0)
80218a44: 13 05 04 ee  	addi	a0, s0, -0x120
;             }
80218a48: 97 50 00 00  	auipc	ra, 0x5
80218a4c: e7 80 a0 ee  	jalr	-0x116(ra) <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hc6d9e006d9c060e8E>
80218a50: ad a8        	j	0x80218aca <.Lpcrel_hi3+0x24>
;                 _ => unsafe { unreachable() },
80218a52: 97 20 ff ff  	auipc	ra, 0xffff2
80218a56: e7 80 a0 eb  	jalr	-0x146(ra) <ekernel+0xffcbd90c>

0000000080218a5a <.Lpcrel_hi0>:
;                 INCOMPLETE => unreachable!(),
80218a5a: 17 f5 01 00  	auipc	a0, 0x1f
80218a5e: 13 05 e5 8e  	addi	a0, a0, -0x712

0000000080218a62 <.Lpcrel_hi1>:
80218a62: 97 f5 01 00  	auipc	a1, 0x1f
80218a66: 13 86 65 96  	addi	a2, a1, -0x69a
80218a6a: 93 05 80 02  	li	a1, 0x28
80218a6e: 97 70 01 00  	auipc	ra, 0x17
80218a72: e7 80 a0 7a  	jalr	0x7aa(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;                     cpu_relax();
80218a76: 97 d0 ff ff  	auipc	ra, 0xffffd
80218a7a: e7 80 e0 47  	jalr	0x47e(ra) <ekernel+0xffcc8ef4>
80218a7e: 03 35 04 ec  	ld	a0, -0x140(s0)
;                     status = self.state.load(Ordering::SeqCst)
80218a82: 13 05 05 07  	addi	a0, a0, 0x70
80218a86: 91 45        	li	a1, 0x4
80218a88: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80218a8c: 83 45 64 fd  	lbu	a1, -0x2a(s0)
80218a90: 97 d0 ff ff  	auipc	ra, 0xffffd
80218a94: e7 80 00 37  	jalr	0x370(ra) <ekernel+0xffcc8e00>
80218a98: 23 38 a4 ec  	sd	a0, -0x130(s0)
80218a9c: 55 b5        	j	0x80218940 <_ZN4spin4once13Once$LT$T$GT$9call_once17h12ffdab39238dbbcE+0x3e>

0000000080218a9e <.Lpcrel_hi2>:
;                 PANICKED => panic!("Once has panicked"),
80218a9e: 17 f5 01 00  	auipc	a0, 0x1f
80218aa2: 13 05 25 94  	addi	a0, a0, -0x6be

0000000080218aa6 <.Lpcrel_hi3>:
80218aa6: 97 f5 01 00  	auipc	a1, 0x1f
80218aaa: 13 86 25 95  	addi	a2, a1, -0x6ae
80218aae: c5 45        	li	a1, 0x11
80218ab0: 97 70 01 00  	auipc	ra, 0x17
80218ab4: e7 80 80 76  	jalr	0x768(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80218ab8: 03 35 04 ec  	ld	a0, -0x140(s0)
;                 COMPLETE => return self.force_get(),
80218abc: 97 00 00 00  	auipc	ra, 0x0
80218ac0: e7 80 c0 5f  	jalr	0x5fc(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17h9001b5a3c1738330E>
80218ac4: 23 34 a4 ec  	sd	a0, -0x138(s0)
; #![no_std]
80218ac8: 09 a0        	j	0x80218aca <.Lpcrel_hi3+0x24>
;     }
80218aca: 03 45 74 fd  	lbu	a0, -0x29(s0)
80218ace: 05 89        	andi	a0, a0, 0x1
80218ad0: 01 e9        	bnez	a0, 0x80218ae0 <.Lpcrel_hi3+0x3a>
80218ad2: 09 a0        	j	0x80218ad4 <.Lpcrel_hi3+0x2e>
80218ad4: 03 35 84 ec  	ld	a0, -0x138(s0)
80218ad8: b6 70        	ld	ra, 0x168(sp)
80218ada: 16 74        	ld	s0, 0x160(sp)
80218adc: 75 61        	addi	sp, sp, 0x170
80218ade: 82 80        	ret
80218ae0: d5 bf        	j	0x80218ad4 <.Lpcrel_hi3+0x2e>

0000000080218ae2 <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E>:
;     pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80218ae2: 19 71        	addi	sp, sp, -0x80
80218ae4: 86 fc        	sd	ra, 0x78(sp)
80218ae6: a2 f8        	sd	s0, 0x70(sp)
80218ae8: 00 01        	addi	s0, sp, 0x80
80218aea: 23 3c a4 f8  	sd	a0, -0x68(s0)
80218aee: 23 3c a4 fc  	sd	a0, -0x28(s0)
80218af2: 81 45        	li	a1, 0x0
;         loop {
80218af4: a3 0b b4 fc  	sb	a1, -0x29(s0)
80218af8: 85 45        	li	a1, 0x1
80218afa: a3 0b b4 fc  	sb	a1, -0x29(s0)
80218afe: 91 45        	li	a1, 0x4
;         let mut status = self.state.load(Ordering::SeqCst);
80218b00: 23 0b b4 fa  	sb	a1, -0x4a(s0)
80218b04: 83 45 64 fb  	lbu	a1, -0x4a(s0)
80218b08: 97 d0 ff ff  	auipc	ra, 0xffffd
80218b0c: e7 80 80 2f  	jalr	0x2f8(ra) <ekernel+0xffcc8e00>
80218b10: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         if status == INCOMPLETE {
80218b14: 03 35 84 fa  	ld	a0, -0x58(s0)
80218b18: 15 c9        	beqz	a0, 0x80218b4c <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E+0x6a>
80218b1a: 09 a0        	j	0x80218b1c <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E+0x3a>
;             match status {
80218b1c: 03 35 84 fa  	ld	a0, -0x58(s0)
80218b20: 23 38 a4 f8  	sd	a0, -0x70(s0)
80218b24: 69 cd        	beqz	a0, 0x80218bfe <.Lpcrel_hi4>
80218b26: 09 a0        	j	0x80218b28 <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E+0x46>
80218b28: 03 35 04 f9  	ld	a0, -0x70(s0)
80218b2c: 85 45        	li	a1, 0x1
;             match status {
80218b2e: 63 06 b5 0e  	beq	a0, a1, 0x80218c1a <.Lpcrel_hi5+0x14>
80218b32: 09 a0        	j	0x80218b34 <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E+0x52>
80218b34: 03 35 04 f9  	ld	a0, -0x70(s0)
80218b38: 89 45        	li	a1, 0x2
;             match status {
80218b3a: 63 0f b5 10  	beq	a0, a1, 0x80218c58 <.Lpcrel_hi7+0x12>
80218b3e: 09 a0        	j	0x80218b40 <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E+0x5e>
80218b40: 03 35 04 f9  	ld	a0, -0x70(s0)
80218b44: 8d 45        	li	a1, 0x3
;             match status {
80218b46: 63 0c b5 0e  	beq	a0, a1, 0x80218c3e <.Lpcrel_hi6>
80218b4a: 75 a0        	j	0x80218bf6 <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E+0x114>
80218b4c: 03 35 84 f9  	ld	a0, -0x68(s0)
80218b50: 91 45        	li	a1, 0x4
;                                                  Ordering::SeqCst);
80218b52: a3 0b b4 fa  	sb	a1, -0x49(s0)
;             status = self.state.compare_and_swap(INCOMPLETE,
80218b56: 83 46 74 fb  	lbu	a3, -0x49(s0)
80218b5a: 81 45        	li	a1, 0x0
80218b5c: 05 46        	li	a2, 0x1
80218b5e: 97 d0 ff ff  	auipc	ra, 0xffffd
80218b62: e7 80 00 1e  	jalr	0x1e0(ra) <ekernel+0xffcc8d3e>
80218b66: 23 34 a4 fa  	sd	a0, -0x58(s0)
;             if status == INCOMPLETE { // We init
80218b6a: 03 35 84 fa  	ld	a0, -0x58(s0)
80218b6e: 5d f5        	bnez	a0, 0x80218b1c <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E+0x3a>
80218b70: 09 a0        	j	0x80218b72 <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E+0x90>
80218b72: 03 35 84 f9  	ld	a0, -0x68(s0)
;                 let mut finish = Finish { state: &self.state, panicked: true };
80218b76: 23 3c a4 fa  	sd	a0, -0x48(s0)
80218b7a: 05 45        	li	a0, 0x1
80218b7c: 23 00 a4 fc  	sb	a0, -0x40(s0)
80218b80: 01 45        	li	a0, 0x0
80218b82: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                 unsafe { *self.data.get() = Some(builder()) };
80218b86: a3 0b a4 fc  	sb	a0, -0x29(s0)
80218b8a: 97 f0 fe ff  	auipc	ra, 0xfffef
80218b8e: e7 80 40 c2  	jalr	-0x3dc(ra) <ekernel+0xffcba7ae>
80218b92: aa 85        	mv	a1, a0
80218b94: 03 35 84 f9  	ld	a0, -0x68(s0)
80218b98: 23 34 b4 fc  	sd	a1, -0x38(s0)
80218b9c: 21 05        	addi	a0, a0, 0x8
80218b9e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80218ba2: 97 00 ff ff  	auipc	ra, 0xffff0
80218ba6: e7 80 40 ad  	jalr	-0x52c(ra) <ekernel+0xffcbb676>
80218baa: 83 35 84 f8  	ld	a1, -0x78(s0)
80218bae: 03 35 84 f9  	ld	a0, -0x68(s0)
80218bb2: 03 36 84 fc  	ld	a2, -0x38(s0)
80218bb6: 10 e5        	sd	a2, 0x8(a0)
;                 finish.panicked = false;
80218bb8: 23 00 b4 fc  	sb	a1, -0x40(s0)
80218bbc: 89 45        	li	a1, 0x2
;                 status = COMPLETE;
80218bbe: 23 34 b4 fa  	sd	a1, -0x58(s0)
;                 self.state.store(status, Ordering::SeqCst);
80218bc2: 83 35 84 fa  	ld	a1, -0x58(s0)
80218bc6: 11 46        	li	a2, 0x4
80218bc8: a3 0a c4 fc  	sb	a2, -0x2b(s0)
80218bcc: 03 46 54 fd  	lbu	a2, -0x2b(s0)
80218bd0: 97 d0 ff ff  	auipc	ra, 0xffffd
80218bd4: e7 80 40 25  	jalr	0x254(ra) <ekernel+0xffcc8e24>
80218bd8: 03 35 84 f9  	ld	a0, -0x68(s0)
;                 return self.force_get();
80218bdc: 97 00 00 00  	auipc	ra, 0x0
80218be0: e7 80 e0 49  	jalr	0x49e(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17h117573fc3b470f09E>
80218be4: 23 30 a4 fa  	sd	a0, -0x60(s0)
80218be8: 13 05 84 fb  	addi	a0, s0, -0x48
;             }
80218bec: 97 50 00 00  	auipc	ra, 0x5
80218bf0: e7 80 60 d4  	jalr	-0x2ba(ra) <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hc6d9e006d9c060e8E>
80218bf4: 9d a8        	j	0x80218c6a <.Lpcrel_hi7+0x24>
;                 _ => unsafe { unreachable() },
80218bf6: 97 20 ff ff  	auipc	ra, 0xffff2
80218bfa: e7 80 60 d1  	jalr	-0x2ea(ra) <ekernel+0xffcbd90c>

0000000080218bfe <.Lpcrel_hi4>:
;                 INCOMPLETE => unreachable!(),
80218bfe: 17 e5 01 00  	auipc	a0, 0x1e
80218c02: 13 05 a5 74  	addi	a0, a0, 0x74a

0000000080218c06 <.Lpcrel_hi5>:
80218c06: 97 e5 01 00  	auipc	a1, 0x1e
80218c0a: 13 86 25 7c  	addi	a2, a1, 0x7c2
80218c0e: 93 05 80 02  	li	a1, 0x28
80218c12: 97 70 01 00  	auipc	ra, 0x17
80218c16: e7 80 60 60  	jalr	0x606(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;                     cpu_relax();
80218c1a: 97 d0 ff ff  	auipc	ra, 0xffffd
80218c1e: e7 80 a0 2d  	jalr	0x2da(ra) <ekernel+0xffcc8ef4>
80218c22: 03 35 84 f9  	ld	a0, -0x68(s0)
80218c26: 91 45        	li	a1, 0x4
;                     status = self.state.load(Ordering::SeqCst)
80218c28: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80218c2c: 83 45 64 fd  	lbu	a1, -0x2a(s0)
80218c30: 97 d0 ff ff  	auipc	ra, 0xffffd
80218c34: e7 80 00 1d  	jalr	0x1d0(ra) <ekernel+0xffcc8e00>
80218c38: 23 34 a4 fa  	sd	a0, -0x58(s0)
80218c3c: c5 b5        	j	0x80218b1c <_ZN4spin4once13Once$LT$T$GT$9call_once17h786d556eeaa8e501E+0x3a>

0000000080218c3e <.Lpcrel_hi6>:
;                 PANICKED => panic!("Once has panicked"),
80218c3e: 17 e5 01 00  	auipc	a0, 0x1e
80218c42: 13 05 25 7a  	addi	a0, a0, 0x7a2

0000000080218c46 <.Lpcrel_hi7>:
80218c46: 97 e5 01 00  	auipc	a1, 0x1e
80218c4a: 13 86 25 7b  	addi	a2, a1, 0x7b2
80218c4e: c5 45        	li	a1, 0x11
80218c50: 97 70 01 00  	auipc	ra, 0x17
80218c54: e7 80 80 5c  	jalr	0x5c8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80218c58: 03 35 84 f9  	ld	a0, -0x68(s0)
;                 COMPLETE => return self.force_get(),
80218c5c: 97 00 00 00  	auipc	ra, 0x0
80218c60: e7 80 e0 41  	jalr	0x41e(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17h117573fc3b470f09E>
80218c64: 23 30 a4 fa  	sd	a0, -0x60(s0)
; #![no_std]
80218c68: 09 a0        	j	0x80218c6a <.Lpcrel_hi7+0x24>
;     }
80218c6a: 03 45 74 fd  	lbu	a0, -0x29(s0)
80218c6e: 05 89        	andi	a0, a0, 0x1
80218c70: 01 e9        	bnez	a0, 0x80218c80 <.Lpcrel_hi7+0x3a>
80218c72: 09 a0        	j	0x80218c74 <.Lpcrel_hi7+0x2e>
80218c74: 03 35 04 fa  	ld	a0, -0x60(s0)
80218c78: e6 70        	ld	ra, 0x78(sp)
80218c7a: 46 74        	ld	s0, 0x70(sp)
80218c7c: 09 61        	addi	sp, sp, 0x80
80218c7e: 82 80        	ret
80218c80: d5 bf        	j	0x80218c74 <.Lpcrel_hi7+0x2e>

0000000080218c82 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E>:
;     pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80218c82: 75 71        	addi	sp, sp, -0x90
80218c84: 06 e5        	sd	ra, 0x88(sp)
80218c86: 22 e1        	sd	s0, 0x80(sp)
80218c88: 00 09        	addi	s0, sp, 0x90
80218c8a: 23 38 a4 f8  	sd	a0, -0x70(s0)
80218c8e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80218c92: 81 45        	li	a1, 0x0
;         loop {
80218c94: a3 0b b4 fc  	sb	a1, -0x29(s0)
80218c98: 85 45        	li	a1, 0x1
80218c9a: a3 0b b4 fc  	sb	a1, -0x29(s0)
;         let mut status = self.state.load(Ordering::SeqCst);
80218c9e: 41 05        	addi	a0, a0, 0x10
80218ca0: 91 45        	li	a1, 0x4
80218ca2: 23 07 b4 fa  	sb	a1, -0x52(s0)
80218ca6: 83 45 e4 fa  	lbu	a1, -0x52(s0)
80218caa: 97 d0 ff ff  	auipc	ra, 0xffffd
80218cae: e7 80 60 15  	jalr	0x156(ra) <ekernel+0xffcc8e00>
80218cb2: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         if status == INCOMPLETE {
80218cb6: 03 35 04 fa  	ld	a0, -0x60(s0)
80218cba: 15 c9        	beqz	a0, 0x80218cee <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E+0x6c>
80218cbc: 09 a0        	j	0x80218cbe <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E+0x3c>
;             match status {
80218cbe: 03 35 04 fa  	ld	a0, -0x60(s0)
80218cc2: 23 34 a4 f8  	sd	a0, -0x78(s0)
80218cc6: 7d c5        	beqz	a0, 0x80218db4 <.Lpcrel_hi8>
80218cc8: 09 a0        	j	0x80218cca <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E+0x48>
80218cca: 03 35 84 f8  	ld	a0, -0x78(s0)
80218cce: 85 45        	li	a1, 0x1
;             match status {
80218cd0: 63 00 b5 10  	beq	a0, a1, 0x80218dd0 <.Lpcrel_hi9+0x14>
80218cd4: 09 a0        	j	0x80218cd6 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E+0x54>
80218cd6: 03 35 84 f8  	ld	a0, -0x78(s0)
80218cda: 89 45        	li	a1, 0x2
;             match status {
80218cdc: 63 0a b5 12  	beq	a0, a1, 0x80218e10 <.Lpcrel_hi11+0x12>
80218ce0: 09 a0        	j	0x80218ce2 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E+0x60>
80218ce2: 03 35 84 f8  	ld	a0, -0x78(s0)
80218ce6: 8d 45        	li	a1, 0x3
;             match status {
80218ce8: 63 07 b5 10  	beq	a0, a1, 0x80218df6 <.Lpcrel_hi10>
80218cec: c1 a0        	j	0x80218dac <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E+0x12a>
80218cee: 03 35 04 f9  	ld	a0, -0x70(s0)
;             status = self.state.compare_and_swap(INCOMPLETE,
80218cf2: 41 05        	addi	a0, a0, 0x10
80218cf4: 91 45        	li	a1, 0x4
;                                                  Ordering::SeqCst);
80218cf6: a3 07 b4 fa  	sb	a1, -0x51(s0)
;             status = self.state.compare_and_swap(INCOMPLETE,
80218cfa: 83 46 f4 fa  	lbu	a3, -0x51(s0)
80218cfe: 81 45        	li	a1, 0x0
80218d00: 05 46        	li	a2, 0x1
80218d02: 97 d0 ff ff  	auipc	ra, 0xffffd
80218d06: e7 80 c0 03  	jalr	0x3c(ra) <ekernel+0xffcc8d3e>
80218d0a: 23 30 a4 fa  	sd	a0, -0x60(s0)
;             if status == INCOMPLETE { // We init
80218d0e: 03 35 04 fa  	ld	a0, -0x60(s0)
80218d12: 55 f5        	bnez	a0, 0x80218cbe <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E+0x3c>
80218d14: 09 a0        	j	0x80218d16 <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E+0x94>
80218d16: 03 35 04 f9  	ld	a0, -0x70(s0)
;                 let mut finish = Finish { state: &self.state, panicked: true };
80218d1a: 41 05        	addi	a0, a0, 0x10
80218d1c: 23 30 a4 f8  	sd	a0, -0x80(s0)
80218d20: 23 38 a4 fa  	sd	a0, -0x50(s0)
80218d24: 05 45        	li	a0, 0x1
80218d26: 23 0c a4 fa  	sb	a0, -0x48(s0)
80218d2a: 01 45        	li	a0, 0x0
80218d2c: 23 3c a4 f6  	sd	a0, -0x88(s0)
;                 unsafe { *self.data.get() = Some(builder()) };
80218d30: a3 0b a4 fc  	sb	a0, -0x29(s0)
80218d34: 97 f0 fe ff  	auipc	ra, 0xfffef
80218d38: e7 80 60 b2  	jalr	-0x4da(ra) <ekernel+0xffcba85a>
80218d3c: 2a 86        	mv	a2, a0
80218d3e: 03 35 04 f9  	ld	a0, -0x70(s0)
80218d42: 23 30 c4 fc  	sd	a2, -0x40(s0)
80218d46: 23 34 b4 fc  	sd	a1, -0x38(s0)
80218d4a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80218d4e: 97 f0 fe ff  	auipc	ra, 0xfffef
80218d52: e7 80 a0 ce  	jalr	-0x316(ra) <ekernel+0xffcbaa38>
80218d56: 83 35 84 f7  	ld	a1, -0x88(s0)
80218d5a: 03 35 04 f8  	ld	a0, -0x80(s0)
80218d5e: 83 36 04 f9  	ld	a3, -0x70(s0)
80218d62: 03 37 04 fc  	ld	a4, -0x40(s0)
80218d66: 03 36 84 fc  	ld	a2, -0x38(s0)
80218d6a: 98 e2        	sd	a4, 0x0(a3)
80218d6c: 90 e6        	sd	a2, 0x8(a3)
;                 finish.panicked = false;
80218d6e: 23 0c b4 fa  	sb	a1, -0x48(s0)
80218d72: 89 45        	li	a1, 0x2
;                 status = COMPLETE;
80218d74: 23 30 b4 fa  	sd	a1, -0x60(s0)
;                 self.state.store(status, Ordering::SeqCst);
80218d78: 83 35 04 fa  	ld	a1, -0x60(s0)
80218d7c: 11 46        	li	a2, 0x4
80218d7e: a3 0a c4 fc  	sb	a2, -0x2b(s0)
80218d82: 03 46 54 fd  	lbu	a2, -0x2b(s0)
80218d86: 97 d0 ff ff  	auipc	ra, 0xffffd
80218d8a: e7 80 e0 09  	jalr	0x9e(ra) <ekernel+0xffcc8e24>
80218d8e: 03 35 04 f9  	ld	a0, -0x70(s0)
;                 return self.force_get();
80218d92: 97 00 00 00  	auipc	ra, 0x0
80218d96: e7 80 c0 2a  	jalr	0x2ac(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17h0e8cae5ea651f9c9E>
80218d9a: 23 3c a4 f8  	sd	a0, -0x68(s0)
80218d9e: 13 05 04 fb  	addi	a0, s0, -0x50
;             }
80218da2: 97 50 00 00  	auipc	ra, 0x5
80218da6: e7 80 00 b9  	jalr	-0x470(ra) <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hc6d9e006d9c060e8E>
80218daa: a5 a8        	j	0x80218e22 <.Lpcrel_hi11+0x24>
;                 _ => unsafe { unreachable() },
80218dac: 97 20 ff ff  	auipc	ra, 0xffff2
80218db0: e7 80 00 b6  	jalr	-0x4a0(ra) <ekernel+0xffcbd90c>

0000000080218db4 <.Lpcrel_hi8>:
;                 INCOMPLETE => unreachable!(),
80218db4: 17 e5 01 00  	auipc	a0, 0x1e
80218db8: 13 05 45 59  	addi	a0, a0, 0x594

0000000080218dbc <.Lpcrel_hi9>:
80218dbc: 97 e5 01 00  	auipc	a1, 0x1e
80218dc0: 13 86 c5 60  	addi	a2, a1, 0x60c
80218dc4: 93 05 80 02  	li	a1, 0x28
80218dc8: 97 70 01 00  	auipc	ra, 0x17
80218dcc: e7 80 00 45  	jalr	0x450(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;                     cpu_relax();
80218dd0: 97 d0 ff ff  	auipc	ra, 0xffffd
80218dd4: e7 80 40 12  	jalr	0x124(ra) <ekernel+0xffcc8ef4>
80218dd8: 03 35 04 f9  	ld	a0, -0x70(s0)
;                     status = self.state.load(Ordering::SeqCst)
80218ddc: 41 05        	addi	a0, a0, 0x10
80218dde: 91 45        	li	a1, 0x4
80218de0: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80218de4: 83 45 64 fd  	lbu	a1, -0x2a(s0)
80218de8: 97 d0 ff ff  	auipc	ra, 0xffffd
80218dec: e7 80 80 01  	jalr	0x18(ra) <ekernel+0xffcc8e00>
80218df0: 23 30 a4 fa  	sd	a0, -0x60(s0)
80218df4: e9 b5        	j	0x80218cbe <_ZN4spin4once13Once$LT$T$GT$9call_once17h8da52b410af66092E+0x3c>

0000000080218df6 <.Lpcrel_hi10>:
;                 PANICKED => panic!("Once has panicked"),
80218df6: 17 e5 01 00  	auipc	a0, 0x1e
80218dfa: 13 05 a5 5e  	addi	a0, a0, 0x5ea

0000000080218dfe <.Lpcrel_hi11>:
80218dfe: 97 e5 01 00  	auipc	a1, 0x1e
80218e02: 13 86 a5 5f  	addi	a2, a1, 0x5fa
80218e06: c5 45        	li	a1, 0x11
80218e08: 97 70 01 00  	auipc	ra, 0x17
80218e0c: e7 80 00 41  	jalr	0x410(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80218e10: 03 35 04 f9  	ld	a0, -0x70(s0)
;                 COMPLETE => return self.force_get(),
80218e14: 97 00 00 00  	auipc	ra, 0x0
80218e18: e7 80 a0 22  	jalr	0x22a(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17h0e8cae5ea651f9c9E>
80218e1c: 23 3c a4 f8  	sd	a0, -0x68(s0)
; #![no_std]
80218e20: 09 a0        	j	0x80218e22 <.Lpcrel_hi11+0x24>
;     }
80218e22: 03 45 74 fd  	lbu	a0, -0x29(s0)
80218e26: 05 89        	andi	a0, a0, 0x1
80218e28: 01 e9        	bnez	a0, 0x80218e38 <.Lpcrel_hi11+0x3a>
80218e2a: 09 a0        	j	0x80218e2c <.Lpcrel_hi11+0x2e>
80218e2c: 03 35 84 f9  	ld	a0, -0x68(s0)
80218e30: aa 60        	ld	ra, 0x88(sp)
80218e32: 0a 64        	ld	s0, 0x80(sp)
80218e34: 49 61        	addi	sp, sp, 0x90
80218e36: 82 80        	ret
80218e38: d5 bf        	j	0x80218e2c <.Lpcrel_hi11+0x2e>

0000000080218e3a <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E>:
;     pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
80218e3a: 15 71        	addi	sp, sp, -0xe0
80218e3c: 86 ed        	sd	ra, 0xd8(sp)
80218e3e: a2 e9        	sd	s0, 0xd0(sp)
80218e40: 80 11        	addi	s0, sp, 0xe0
80218e42: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80218e46: 23 3c a4 fc  	sd	a0, -0x28(s0)
80218e4a: 81 45        	li	a1, 0x0
;         loop {
80218e4c: a3 0b b4 fc  	sb	a1, -0x29(s0)
80218e50: 85 45        	li	a1, 0x1
80218e52: a3 0b b4 fc  	sb	a1, -0x29(s0)
;         let mut status = self.state.load(Ordering::SeqCst);
80218e56: 13 05 05 03  	addi	a0, a0, 0x30
80218e5a: 91 45        	li	a1, 0x4
80218e5c: 23 0f b4 f4  	sb	a1, -0xa2(s0)
80218e60: 83 45 e4 f5  	lbu	a1, -0xa2(s0)
80218e64: 97 d0 ff ff  	auipc	ra, 0xffffd
80218e68: e7 80 c0 f9  	jalr	-0x64(ra) <ekernel+0xffcc8e00>
80218e6c: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;         if status == INCOMPLETE {
80218e70: 03 35 04 f5  	ld	a0, -0xb0(s0)
80218e74: 1d c9        	beqz	a0, 0x80218eaa <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E+0x70>
80218e76: 09 a0        	j	0x80218e78 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E+0x3e>
;             match status {
80218e78: 03 35 04 f5  	ld	a0, -0xb0(s0)
80218e7c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80218e80: 63 0b 05 12  	beqz	a0, 0x80218fb6 <.Lpcrel_hi12>
80218e84: 09 a0        	j	0x80218e86 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E+0x4c>
80218e86: 03 35 84 f3  	ld	a0, -0xc8(s0)
80218e8a: 85 45        	li	a1, 0x1
;             match status {
80218e8c: 63 03 b5 14  	beq	a0, a1, 0x80218fd2 <.Lpcrel_hi13+0x14>
80218e90: 09 a0        	j	0x80218e92 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E+0x58>
80218e92: 03 35 84 f3  	ld	a0, -0xc8(s0)
80218e96: 89 45        	li	a1, 0x2
;             match status {
80218e98: 63 0e b5 16  	beq	a0, a1, 0x80219014 <.Lpcrel_hi15+0x12>
80218e9c: 09 a0        	j	0x80218e9e <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E+0x64>
80218e9e: 03 35 84 f3  	ld	a0, -0xc8(s0)
80218ea2: 8d 45        	li	a1, 0x3
;             match status {
80218ea4: 63 0b b5 14  	beq	a0, a1, 0x80218ffa <.Lpcrel_hi14>
80218ea8: 19 a2        	j	0x80218fae <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E+0x174>
80218eaa: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             status = self.state.compare_and_swap(INCOMPLETE,
80218eae: 13 05 05 03  	addi	a0, a0, 0x30
80218eb2: 91 45        	li	a1, 0x4
;                                                  Ordering::SeqCst);
80218eb4: a3 0f b4 f4  	sb	a1, -0xa1(s0)
;             status = self.state.compare_and_swap(INCOMPLETE,
80218eb8: 83 46 f4 f5  	lbu	a3, -0xa1(s0)
80218ebc: 81 45        	li	a1, 0x0
80218ebe: 05 46        	li	a2, 0x1
80218ec0: 97 d0 ff ff  	auipc	ra, 0xffffd
80218ec4: e7 80 e0 e7  	jalr	-0x182(ra) <ekernel+0xffcc8d3e>
80218ec8: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;             if status == INCOMPLETE { // We init
80218ecc: 03 35 04 f5  	ld	a0, -0xb0(s0)
80218ed0: 45 f5        	bnez	a0, 0x80218e78 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E+0x3e>
80218ed2: 09 a0        	j	0x80218ed4 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E+0x9a>
80218ed4: 03 35 04 f4  	ld	a0, -0xc0(s0)
;                 let mut finish = Finish { state: &self.state, panicked: true };
80218ed8: 13 05 05 03  	addi	a0, a0, 0x30
80218edc: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80218ee0: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80218ee4: 05 45        	li	a0, 0x1
80218ee6: 23 04 a4 f6  	sb	a0, -0x98(s0)
80218eea: 01 45        	li	a0, 0x0
80218eec: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;                 unsafe { *self.data.get() = Some(builder()) };
80218ef0: a3 0b a4 fc  	sb	a0, -0x29(s0)
80218ef4: 13 05 04 fa  	addi	a0, s0, -0x60
80218ef8: 97 f0 fe ff  	auipc	ra, 0xfffef
80218efc: e7 80 40 92  	jalr	-0x6dc(ra) <ekernel+0xffcba81c>
80218f00: 03 35 04 f4  	ld	a0, -0xc0(s0)
80218f04: 83 35 84 fc  	ld	a1, -0x38(s0)
80218f08: 23 3c b4 f8  	sd	a1, -0x68(s0)
80218f0c: 83 35 04 fc  	ld	a1, -0x40(s0)
80218f10: 23 38 b4 f8  	sd	a1, -0x70(s0)
80218f14: 83 35 84 fb  	ld	a1, -0x48(s0)
80218f18: 23 34 b4 f8  	sd	a1, -0x78(s0)
80218f1c: 83 35 04 fb  	ld	a1, -0x50(s0)
80218f20: 23 30 b4 f8  	sd	a1, -0x80(s0)
80218f24: 83 35 84 fa  	ld	a1, -0x58(s0)
80218f28: 23 3c b4 f6  	sd	a1, -0x88(s0)
80218f2c: 83 35 04 fa  	ld	a1, -0x60(s0)
80218f30: 23 38 b4 f6  	sd	a1, -0x90(s0)
80218f34: 23 34 a4 fe  	sd	a0, -0x18(s0)
80218f38: 97 f0 fe ff  	auipc	ra, 0xfffef
80218f3c: e7 80 80 bf  	jalr	-0x408(ra) <ekernel+0xffcbab30>
80218f40: 83 35 84 f2  	ld	a1, -0xd8(s0)
80218f44: 03 35 04 f3  	ld	a0, -0xd0(s0)
80218f48: 83 36 04 f4  	ld	a3, -0xc0(s0)
80218f4c: 03 36 84 f9  	ld	a2, -0x68(s0)
80218f50: 90 f6        	sd	a2, 0x28(a3)
80218f52: 03 36 04 f9  	ld	a2, -0x70(s0)
80218f56: 90 f2        	sd	a2, 0x20(a3)
80218f58: 03 36 84 f8  	ld	a2, -0x78(s0)
80218f5c: 90 ee        	sd	a2, 0x18(a3)
80218f5e: 03 36 04 f8  	ld	a2, -0x80(s0)
80218f62: 90 ea        	sd	a2, 0x10(a3)
80218f64: 03 36 84 f7  	ld	a2, -0x88(s0)
80218f68: 90 e6        	sd	a2, 0x8(a3)
80218f6a: 03 36 04 f7  	ld	a2, -0x90(s0)
80218f6e: 90 e2        	sd	a2, 0x0(a3)
;                 finish.panicked = false;
80218f70: 23 04 b4 f6  	sb	a1, -0x98(s0)
80218f74: 89 45        	li	a1, 0x2
;                 status = COMPLETE;
80218f76: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;                 self.state.store(status, Ordering::SeqCst);
80218f7a: 83 35 04 f5  	ld	a1, -0xb0(s0)
80218f7e: 11 46        	li	a2, 0x4
80218f80: a3 0a c4 fc  	sb	a2, -0x2b(s0)
80218f84: 03 46 54 fd  	lbu	a2, -0x2b(s0)
80218f88: 97 d0 ff ff  	auipc	ra, 0xffffd
80218f8c: e7 80 c0 e9  	jalr	-0x164(ra) <ekernel+0xffcc8e24>
80218f90: 03 35 04 f4  	ld	a0, -0xc0(s0)
;                 return self.force_get();
80218f94: 97 00 00 00  	auipc	ra, 0x0
80218f98: e7 80 00 16  	jalr	0x160(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17hde02343263142421E>
80218f9c: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80218fa0: 13 05 04 f6  	addi	a0, s0, -0xa0
;             }
80218fa4: 97 50 00 00  	auipc	ra, 0x5
80218fa8: e7 80 e0 98  	jalr	-0x672(ra) <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hc6d9e006d9c060e8E>
80218fac: ad a8        	j	0x80219026 <.Lpcrel_hi15+0x24>
;                 _ => unsafe { unreachable() },
80218fae: 97 20 ff ff  	auipc	ra, 0xffff2
80218fb2: e7 80 e0 95  	jalr	-0x6a2(ra) <ekernel+0xffcbd90c>

0000000080218fb6 <.Lpcrel_hi12>:
;                 INCOMPLETE => unreachable!(),
80218fb6: 17 e5 01 00  	auipc	a0, 0x1e
80218fba: 13 05 25 39  	addi	a0, a0, 0x392

0000000080218fbe <.Lpcrel_hi13>:
80218fbe: 97 e5 01 00  	auipc	a1, 0x1e
80218fc2: 13 86 a5 40  	addi	a2, a1, 0x40a
80218fc6: 93 05 80 02  	li	a1, 0x28
80218fca: 97 70 01 00  	auipc	ra, 0x17
80218fce: e7 80 e0 24  	jalr	0x24e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;                     cpu_relax();
80218fd2: 97 d0 ff ff  	auipc	ra, 0xffffd
80218fd6: e7 80 20 f2  	jalr	-0xde(ra) <ekernel+0xffcc8ef4>
80218fda: 03 35 04 f4  	ld	a0, -0xc0(s0)
;                     status = self.state.load(Ordering::SeqCst)
80218fde: 13 05 05 03  	addi	a0, a0, 0x30
80218fe2: 91 45        	li	a1, 0x4
80218fe4: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80218fe8: 83 45 64 fd  	lbu	a1, -0x2a(s0)
80218fec: 97 d0 ff ff  	auipc	ra, 0xffffd
80218ff0: e7 80 40 e1  	jalr	-0x1ec(ra) <ekernel+0xffcc8e00>
80218ff4: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80218ff8: 41 b5        	j	0x80218e78 <_ZN4spin4once13Once$LT$T$GT$9call_once17hd24b411bb3cadf14E+0x3e>

0000000080218ffa <.Lpcrel_hi14>:
;                 PANICKED => panic!("Once has panicked"),
80218ffa: 17 e5 01 00  	auipc	a0, 0x1e
80218ffe: 13 05 65 3e  	addi	a0, a0, 0x3e6

0000000080219002 <.Lpcrel_hi15>:
80219002: 97 e5 01 00  	auipc	a1, 0x1e
80219006: 13 86 65 3f  	addi	a2, a1, 0x3f6
8021900a: c5 45        	li	a1, 0x11
8021900c: 97 70 01 00  	auipc	ra, 0x17
80219010: e7 80 c0 20  	jalr	0x20c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80219014: 03 35 04 f4  	ld	a0, -0xc0(s0)
;                 COMPLETE => return self.force_get(),
80219018: 97 00 00 00  	auipc	ra, 0x0
8021901c: e7 80 c0 0d  	jalr	0xdc(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17hde02343263142421E>
80219020: 23 34 a4 f4  	sd	a0, -0xb8(s0)
; #![no_std]
80219024: 09 a0        	j	0x80219026 <.Lpcrel_hi15+0x24>
;     }
80219026: 03 45 74 fd  	lbu	a0, -0x29(s0)
8021902a: 05 89        	andi	a0, a0, 0x1
8021902c: 01 e9        	bnez	a0, 0x8021903c <.Lpcrel_hi15+0x3a>
8021902e: 09 a0        	j	0x80219030 <.Lpcrel_hi15+0x2e>
80219030: 03 35 84 f4  	ld	a0, -0xb8(s0)
80219034: ee 60        	ld	ra, 0xd8(sp)
80219036: 4e 64        	ld	s0, 0xd0(sp)
80219038: 2d 61        	addi	sp, sp, 0xe0
8021903a: 82 80        	ret
8021903c: d5 bf        	j	0x80219030 <.Lpcrel_hi15+0x2e>

000000008021903e <_ZN4spin4once13Once$LT$T$GT$9force_get17h0e8cae5ea651f9c9E>:
;     fn force_get<'a>(&'a self) -> &'a T {
8021903e: 79 71        	addi	sp, sp, -0x30
80219040: 06 f4        	sd	ra, 0x28(sp)
80219042: 22 f0        	sd	s0, 0x20(sp)
80219044: 00 18        	addi	s0, sp, 0x30
80219046: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021904a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         match unsafe { &*self.data.get() }.as_ref() {
8021904e: 97 c0 fe ff  	auipc	ra, 0xfffec
80219052: e7 80 e0 e7  	jalr	-0x182(ra) <ekernel+0xffcb7ecc>
80219056: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021905a: 03 35 04 fd  	ld	a0, -0x30(s0)
8021905e: 11 e5        	bnez	a0, 0x8021906a <_ZN4spin4once13Once$LT$T$GT$9force_get17h0e8cae5ea651f9c9E+0x2c>
80219060: 09 a0        	j	0x80219062 <_ZN4spin4once13Once$LT$T$GT$9force_get17h0e8cae5ea651f9c9E+0x24>
;             None    => unsafe { unreachable() },
80219062: 97 20 ff ff  	auipc	ra, 0xffff2
80219066: e7 80 a0 8a  	jalr	-0x756(ra) <ekernel+0xffcbd90c>
;             Some(p) => p,
8021906a: 03 35 04 fd  	ld	a0, -0x30(s0)
8021906e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219072: a2 70        	ld	ra, 0x28(sp)
80219074: 02 74        	ld	s0, 0x20(sp)
;     }
80219076: 45 61        	addi	sp, sp, 0x30
80219078: 82 80        	ret

000000008021907a <_ZN4spin4once13Once$LT$T$GT$9force_get17h117573fc3b470f09E>:
;     fn force_get<'a>(&'a self) -> &'a T {
8021907a: 79 71        	addi	sp, sp, -0x30
8021907c: 06 f4        	sd	ra, 0x28(sp)
8021907e: 22 f0        	sd	s0, 0x20(sp)
80219080: 00 18        	addi	s0, sp, 0x30
80219082: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         match unsafe { &*self.data.get() }.as_ref() {
80219086: 21 05        	addi	a0, a0, 0x8
80219088: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021908c: 97 c0 fe ff  	auipc	ra, 0xfffec
80219090: e7 80 80 d9  	jalr	-0x268(ra) <ekernel+0xffcb7e24>
80219094: 23 38 a4 fc  	sd	a0, -0x30(s0)
80219098: 03 35 04 fd  	ld	a0, -0x30(s0)
8021909c: 11 e5        	bnez	a0, 0x802190a8 <_ZN4spin4once13Once$LT$T$GT$9force_get17h117573fc3b470f09E+0x2e>
8021909e: 09 a0        	j	0x802190a0 <_ZN4spin4once13Once$LT$T$GT$9force_get17h117573fc3b470f09E+0x26>
;             None    => unsafe { unreachable() },
802190a0: 97 20 ff ff  	auipc	ra, 0xffff2
802190a4: e7 80 c0 86  	jalr	-0x794(ra) <ekernel+0xffcbd90c>
;             Some(p) => p,
802190a8: 03 35 04 fd  	ld	a0, -0x30(s0)
802190ac: 23 30 a4 fe  	sd	a0, -0x20(s0)
802190b0: a2 70        	ld	ra, 0x28(sp)
802190b2: 02 74        	ld	s0, 0x20(sp)
;     }
802190b4: 45 61        	addi	sp, sp, 0x30
802190b6: 82 80        	ret

00000000802190b8 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9001b5a3c1738330E>:
;     fn force_get<'a>(&'a self) -> &'a T {
802190b8: 79 71        	addi	sp, sp, -0x30
802190ba: 06 f4        	sd	ra, 0x28(sp)
802190bc: 22 f0        	sd	s0, 0x20(sp)
802190be: 00 18        	addi	s0, sp, 0x30
802190c0: 23 3c a4 fc  	sd	a0, -0x28(s0)
802190c4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         match unsafe { &*self.data.get() }.as_ref() {
802190c8: 97 c0 fe ff  	auipc	ra, 0xfffec
802190cc: e7 80 40 d9  	jalr	-0x26c(ra) <ekernel+0xffcb7e5c>
802190d0: 23 38 a4 fc  	sd	a0, -0x30(s0)
802190d4: 03 35 04 fd  	ld	a0, -0x30(s0)
802190d8: 11 e5        	bnez	a0, 0x802190e4 <_ZN4spin4once13Once$LT$T$GT$9force_get17h9001b5a3c1738330E+0x2c>
802190da: 09 a0        	j	0x802190dc <_ZN4spin4once13Once$LT$T$GT$9force_get17h9001b5a3c1738330E+0x24>
;             None    => unsafe { unreachable() },
802190dc: 97 20 ff ff  	auipc	ra, 0xffff2
802190e0: e7 80 00 83  	jalr	-0x7d0(ra) <ekernel+0xffcbd90c>
;             Some(p) => p,
802190e4: 03 35 04 fd  	ld	a0, -0x30(s0)
802190e8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802190ec: a2 70        	ld	ra, 0x28(sp)
802190ee: 02 74        	ld	s0, 0x20(sp)
;     }
802190f0: 45 61        	addi	sp, sp, 0x30
802190f2: 82 80        	ret

00000000802190f4 <_ZN4spin4once13Once$LT$T$GT$9force_get17hde02343263142421E>:
;     fn force_get<'a>(&'a self) -> &'a T {
802190f4: 79 71        	addi	sp, sp, -0x30
802190f6: 06 f4        	sd	ra, 0x28(sp)
802190f8: 22 f0        	sd	s0, 0x20(sp)
802190fa: 00 18        	addi	s0, sp, 0x30
802190fc: 23 3c a4 fc  	sd	a0, -0x28(s0)
80219100: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         match unsafe { &*self.data.get() }.as_ref() {
80219104: 97 c0 fe ff  	auipc	ra, 0xfffec
80219108: e7 80 00 e0  	jalr	-0x200(ra) <ekernel+0xffcb7f04>
8021910c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80219110: 03 35 04 fd  	ld	a0, -0x30(s0)
80219114: 11 e5        	bnez	a0, 0x80219120 <_ZN4spin4once13Once$LT$T$GT$9force_get17hde02343263142421E+0x2c>
80219116: 09 a0        	j	0x80219118 <_ZN4spin4once13Once$LT$T$GT$9force_get17hde02343263142421E+0x24>
;             None    => unsafe { unreachable() },
80219118: 97 10 ff ff  	auipc	ra, 0xffff1
8021911c: e7 80 40 7f  	jalr	0x7f4(ra) <ekernel+0xffcbd90c>
;             Some(p) => p,
80219120: 03 35 04 fd  	ld	a0, -0x30(s0)
80219124: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219128: a2 70        	ld	ra, 0x28(sp)
8021912a: 02 74        	ld	s0, 0x20(sp)
;     }
8021912c: 45 61        	addi	sp, sp, 0x30
8021912e: 82 80        	ret

0000000080219130 <_ZN2os3cpu7Context3new17h9262639ef1f31a56E>:
;     pub const fn new() -> Self {
80219130: 41 11        	addi	sp, sp, -0x10
80219132: 06 e4        	sd	ra, 0x8(sp)
80219134: 22 e0        	sd	s0, 0x0(sp)
80219136: 00 08        	addi	s0, sp, 0x10
80219138: aa 85        	mv	a1, a0
8021913a: 01 45        	li	a0, 0x0
;         Self {
8021913c: 88 e1        	sd	a0, 0x0(a1)
8021913e: 88 e5        	sd	a0, 0x8(a1)
80219140: 88 e9        	sd	a0, 0x10(a1)
80219142: 88 ed        	sd	a0, 0x18(a1)
80219144: 88 f1        	sd	a0, 0x20(a1)
80219146: 88 f5        	sd	a0, 0x28(a1)
80219148: 88 f9        	sd	a0, 0x30(a1)
8021914a: 88 fd        	sd	a0, 0x38(a1)
8021914c: a8 e1        	sd	a0, 0x40(a1)
8021914e: a8 e5        	sd	a0, 0x48(a1)
80219150: a8 e9        	sd	a0, 0x50(a1)
80219152: a8 ed        	sd	a0, 0x58(a1)
80219154: a8 f1        	sd	a0, 0x60(a1)
80219156: a8 f5        	sd	a0, 0x68(a1)
80219158: a2 60        	ld	ra, 0x8(sp)
8021915a: 02 64        	ld	s0, 0x0(sp)
;     }
8021915c: 41 01        	addi	sp, sp, 0x10
8021915e: 82 80        	ret

0000000080219160 <_ZN2os3cpu3Cpu6locked17hb3b19cf4eca88171E>:
;     unsafe fn locked(&mut self, old:bool) -> IntrLock {
80219160: 59 71        	addi	sp, sp, -0x70
80219162: 86 f4        	sd	ra, 0x68(sp)
80219164: a2 f0        	sd	s0, 0x60(sp)
80219166: 80 18        	addi	s0, sp, 0x70
80219168: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021916c: 2e 86        	mv	a2, a1
8021916e: 23 38 c4 fa  	sd	a2, -0x50(s0)
80219172: 23 38 a4 fc  	sd	a0, -0x30(s0)
80219176: a3 0f b4 fc  	sb	a1, -0x21(s0)
;         intr_off();
8021917a: 97 30 ff ff  	auipc	ra, 0xffff3
8021917e: e7 80 a0 c3  	jalr	-0x3c6(ra) <ekernel+0xffcbedb4>
80219182: 03 35 84 fb  	ld	a0, -0x48(s0)
80219186: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if *self.noff.get() == 0{
8021918a: aa 85        	mv	a1, a0
8021918c: 23 30 b4 fc  	sd	a1, -0x40(s0)
80219190: 1d 89        	andi	a0, a0, 0x7
80219192: 19 e5        	bnez	a0, 0x802191a0 <_ZN2os3cpu3Cpu6locked17hb3b19cf4eca88171E+0x40>
80219194: 09 a0        	j	0x80219196 <_ZN2os3cpu3Cpu6locked17hb3b19cf4eca88171E+0x36>
80219196: 03 35 84 fb  	ld	a0, -0x48(s0)
;         if *self.noff.get() == 0{
8021919a: 08 61        	ld	a0, 0x0(a0)
8021919c: 09 cd        	beqz	a0, 0x802191b6 <.Lpcrel_hi0+0x12>
8021919e: 25 a0        	j	0x802191c6 <.Lpcrel_hi0+0x22>
802191a0: 83 35 04 fc  	ld	a1, -0x40(s0)

00000000802191a4 <.Lpcrel_hi0>:
;         if *self.noff.get() == 0{
802191a4: 17 e5 01 00  	auipc	a0, 0x1e
802191a8: 13 06 c5 27  	addi	a2, a0, 0x27c
802191ac: 21 45        	li	a0, 0x8
802191ae: 97 70 01 00  	auipc	ra, 0x17
802191b2: e7 80 e0 13  	jalr	0x13e(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>
802191b6: 83 35 84 fb  	ld	a1, -0x48(s0)
802191ba: 03 35 04 fb  	ld	a0, -0x50(s0)
;             self.intena = old;
802191be: 05 89        	andi	a0, a0, 0x1
802191c0: 23 80 a5 08  	sb	a0, 0x80(a1)
;         if *self.noff.get() == 0{
802191c4: 09 a0        	j	0x802191c6 <.Lpcrel_hi0+0x22>
802191c6: 03 35 84 fb  	ld	a0, -0x48(s0)
802191ca: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         *self.noff.get() += 1;
802191ce: aa 85        	mv	a1, a0
802191d0: 23 34 b4 fa  	sd	a1, -0x58(s0)
802191d4: 1d 89        	andi	a0, a0, 0x7
802191d6: 11 e9        	bnez	a0, 0x802191ea <.Lpcrel_hi0+0x46>
802191d8: 09 a0        	j	0x802191da <.Lpcrel_hi0+0x36>
802191da: 03 35 84 fb  	ld	a0, -0x48(s0)
;         *self.noff.get() += 1;
802191de: 08 61        	ld	a0, 0x0(a0)
802191e0: 05 05        	addi	a0, a0, 0x1
802191e2: 23 30 a4 fa  	sd	a0, -0x60(s0)
802191e6: 0d c5        	beqz	a0, 0x80219210 <.Lpcrel_hi2>
802191e8: 21 a8        	j	0x80219200 <.Lpcrel_hi1+0x12>
802191ea: 83 35 84 fa  	ld	a1, -0x58(s0)

00000000802191ee <.Lpcrel_hi1>:
;         *self.noff.get() += 1;
802191ee: 17 e5 01 00  	auipc	a0, 0x1e
802191f2: 13 06 a5 24  	addi	a2, a0, 0x24a
802191f6: 21 45        	li	a0, 0x8
802191f8: 97 70 01 00  	auipc	ra, 0x17
802191fc: e7 80 40 0f  	jalr	0xf4(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>
80219200: 03 35 84 fb  	ld	a0, -0x48(s0)
;         *self.noff.get() += 1;
80219204: aa 85        	mv	a1, a0
80219206: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021920a: 1d 89        	andi	a0, a0, 0x7
8021920c: 19 cd        	beqz	a0, 0x8021922a <.Lpcrel_hi3+0x12>
8021920e: 1d a8        	j	0x80219244 <.Lpcrel_hi3+0x2c>

0000000080219210 <.Lpcrel_hi2>:
80219210: 17 e5 01 00  	auipc	a0, 0x1e
80219214: 13 05 05 24  	addi	a0, a0, 0x240

0000000080219218 <.Lpcrel_hi3>:
80219218: 97 e5 01 00  	auipc	a1, 0x1e
8021921c: 13 86 05 22  	addi	a2, a1, 0x220
80219220: f1 45        	li	a1, 0x1c
80219222: 97 70 01 00  	auipc	ra, 0x17
80219226: e7 80 60 ff  	jalr	-0xa(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021922a: 03 35 84 fb  	ld	a0, -0x48(s0)
8021922e: 83 35 04 fa  	ld	a1, -0x60(s0)
;         *self.noff.get() += 1;
80219232: 0c e1        	sd	a1, 0x0(a0)
;         IntrLock { cpu: self }
80219234: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     }
80219238: 03 35 84 fc  	ld	a0, -0x38(s0)
8021923c: a6 70        	ld	ra, 0x68(sp)
8021923e: 06 74        	ld	s0, 0x60(sp)
80219240: 65 61        	addi	sp, sp, 0x70
80219242: 82 80        	ret
80219244: 83 35 84 f9  	ld	a1, -0x68(s0)

0000000080219248 <.Lpcrel_hi4>:
;         *self.noff.get() += 1;
80219248: 17 e5 01 00  	auipc	a0, 0x1e
8021924c: 13 06 05 1f  	addi	a2, a0, 0x1f0
80219250: 21 45        	li	a0, 0x8
80219252: 97 70 01 00  	auipc	ra, 0x17
80219256: e7 80 a0 09  	jalr	0x9a(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>

000000008021925a <_ZN2os3cpu3Cpu6unlock17ha4e4dadfdd6dac43E>:
;     unsafe fn unlock(&self) {
8021925a: 55 71        	addi	sp, sp, -0xd0
8021925c: 86 e5        	sd	ra, 0xc8(sp)
8021925e: a2 e1        	sd	s0, 0xc0(sp)
80219260: 80 09        	addi	s0, sp, 0xd0
80219262: 23 38 a4 f6  	sd	a0, -0x90(s0)
80219266: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021926a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         let noff = self.noff.get();
8021926e: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(!intr_get(), "unlock - interruptible");
80219272: 97 30 ff ff  	auipc	ra, 0xffff3
80219276: e7 80 a0 b1  	jalr	-0x4e6(ra) <ekernel+0xffcbed8c>
8021927a: 11 e9        	bnez	a0, 0x8021928e <.Lpcrel_hi5>
8021927c: 09 a0        	j	0x8021927e <_ZN2os3cpu3Cpu6unlock17ha4e4dadfdd6dac43E+0x24>
8021927e: 03 35 04 f7  	ld	a0, -0x90(s0)
;         assert!(*noff >= 1, "unlock");
80219282: aa 85        	mv	a1, a0
80219284: 23 34 b4 f6  	sd	a1, -0x98(s0)
80219288: 1d 89        	andi	a0, a0, 0x7
8021928a: 0d c9        	beqz	a0, 0x802192bc <.Lpcrel_hi6+0x10>
8021928c: 2d a8        	j	0x802192c6 <.Lpcrel_hi6+0x1a>

000000008021928e <.Lpcrel_hi5>:
;         assert!(!intr_get(), "unlock - interruptible");
8021928e: 17 e5 01 00  	auipc	a0, 0x1e
80219292: 93 05 a5 29  	addi	a1, a0, 0x29a
80219296: 13 05 84 f7  	addi	a0, s0, -0x88
8021929a: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021929e: 05 46        	li	a2, 0x1
802192a0: 97 e0 fe ff  	auipc	ra, 0xfffee
802192a4: e7 80 40 11  	jalr	0x114(ra) <ekernel+0xffcba3b4>
802192a8: 03 35 04 f6  	ld	a0, -0xa0(s0)

00000000802192ac <.Lpcrel_hi6>:
802192ac: 97 e5 01 00  	auipc	a1, 0x1e
802192b0: 93 85 c5 28  	addi	a1, a1, 0x28c
802192b4: 97 70 01 00  	auipc	ra, 0x17
802192b8: e7 80 40 ef  	jalr	-0x10c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
802192bc: 03 35 04 f7  	ld	a0, -0x90(s0)
;         assert!(*noff >= 1, "unlock");
802192c0: 08 61        	ld	a0, 0x0(a0)
802192c2: 21 e5        	bnez	a0, 0x8021930a <.Lpcrel_hi9+0x10>
802192c4: 21 a8        	j	0x802192dc <.Lpcrel_hi8>
802192c6: 83 35 84 f6  	ld	a1, -0x98(s0)

00000000802192ca <.Lpcrel_hi7>:
;         assert!(*noff >= 1, "unlock");
802192ca: 17 e5 01 00  	auipc	a0, 0x1e
802192ce: 13 06 65 1a  	addi	a2, a0, 0x1a6
802192d2: 21 45        	li	a0, 0x8
802192d4: 97 70 01 00  	auipc	ra, 0x17
802192d8: e7 80 80 01  	jalr	0x18(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>

00000000802192dc <.Lpcrel_hi8>:
802192dc: 17 e5 01 00  	auipc	a0, 0x1e
802192e0: 93 05 45 1b  	addi	a1, a0, 0x1b4
802192e4: 13 05 84 fa  	addi	a0, s0, -0x58
802192e8: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802192ec: 05 46        	li	a2, 0x1
802192ee: 97 e0 fe ff  	auipc	ra, 0xfffee
802192f2: e7 80 60 0c  	jalr	0xc6(ra) <ekernel+0xffcba3b4>
802192f6: 03 35 84 f5  	ld	a0, -0xa8(s0)

00000000802192fa <.Lpcrel_hi9>:
802192fa: 97 e5 01 00  	auipc	a1, 0x1e
802192fe: 93 85 65 1a  	addi	a1, a1, 0x1a6
80219302: 97 70 01 00  	auipc	ra, 0x17
80219306: e7 80 60 ea  	jalr	-0x15a(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>
8021930a: 03 35 04 f7  	ld	a0, -0x90(s0)
;         *noff -= 1;
8021930e: aa 85        	mv	a1, a0
80219310: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80219314: 1d 89        	andi	a0, a0, 0x7
80219316: 19 e9        	bnez	a0, 0x8021932c <.Lpcrel_hi9+0x32>
80219318: 09 a0        	j	0x8021931a <.Lpcrel_hi9+0x20>
8021931a: 03 35 04 f7  	ld	a0, -0x90(s0)
;         *noff -= 1;
8021931e: 08 61        	ld	a0, 0x0(a0)
80219320: 93 05 f5 ff  	addi	a1, a0, -0x1
80219324: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80219328: 0d c5        	beqz	a0, 0x80219352 <.Lpcrel_hi11>
8021932a: 21 a8        	j	0x80219342 <.Lpcrel_hi10+0x12>
8021932c: 83 35 04 f5  	ld	a1, -0xb0(s0)

0000000080219330 <.Lpcrel_hi10>:
;         *noff -= 1;
80219330: 17 e5 01 00  	auipc	a0, 0x1e
80219334: 13 06 85 18  	addi	a2, a0, 0x188
80219338: 21 45        	li	a0, 0x8
8021933a: 97 70 01 00  	auipc	ra, 0x17
8021933e: e7 80 20 fb  	jalr	-0x4e(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>
80219342: 03 35 04 f7  	ld	a0, -0x90(s0)
;         *noff -= 1;
80219346: aa 85        	mv	a1, a0
80219348: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8021934c: 1d 89        	andi	a0, a0, 0x7
8021934e: 05 c1        	beqz	a0, 0x8021936e <.Lpcrel_hi12+0x14>
80219350: 15 a8        	j	0x80219384 <.Lpcrel_hi12+0x2a>

0000000080219352 <.Lpcrel_hi11>:
80219352: 17 e5 01 00  	auipc	a0, 0x1e
80219356: 13 05 e5 17  	addi	a0, a0, 0x17e

000000008021935a <.Lpcrel_hi12>:
8021935a: 97 e5 01 00  	auipc	a1, 0x1e
8021935e: 13 86 e5 15  	addi	a2, a1, 0x15e
80219362: 93 05 10 02  	li	a1, 0x21
80219366: 97 70 01 00  	auipc	ra, 0x17
8021936a: e7 80 20 eb  	jalr	-0x14e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021936e: 03 35 04 f7  	ld	a0, -0x90(s0)
80219372: 83 35 84 f4  	ld	a1, -0xb8(s0)
;         *noff -= 1;
80219376: 0c e1        	sd	a1, 0x0(a0)
;         if *noff == 0 && self.intena {
80219378: aa 85        	mv	a1, a0
8021937a: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021937e: 1d 89        	andi	a0, a0, 0x7
80219380: 09 cd        	beqz	a0, 0x8021939a <.Lpcrel_hi13+0x12>
80219382: 0d a0        	j	0x802193a4 <.Lpcrel_hi13+0x1c>
80219384: 83 35 04 f4  	ld	a1, -0xc0(s0)

0000000080219388 <.Lpcrel_hi13>:
;         *noff -= 1;
80219388: 17 e5 01 00  	auipc	a0, 0x1e
8021938c: 13 06 05 13  	addi	a2, a0, 0x130
80219390: 21 45        	li	a0, 0x8
80219392: 97 70 01 00  	auipc	ra, 0x17
80219396: e7 80 a0 f5  	jalr	-0xa6(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>
8021939a: 03 35 04 f7  	ld	a0, -0x90(s0)
;         if *noff == 0 && self.intena {
8021939e: 08 61        	ld	a0, 0x0(a0)
802193a0: 09 cd        	beqz	a0, 0x802193ba <.Lpcrel_hi14+0x12>
802193a2: 1d a0        	j	0x802193c8 <.Lpcrel_hi14+0x20>
802193a4: 83 35 84 f3  	ld	a1, -0xc8(s0)

00000000802193a8 <.Lpcrel_hi14>:
;         if *noff == 0 && self.intena {
802193a8: 17 e5 01 00  	auipc	a0, 0x1e
802193ac: 13 06 05 15  	addi	a2, a0, 0x150
802193b0: 21 45        	li	a0, 0x8
802193b2: 97 70 01 00  	auipc	ra, 0x17
802193b6: e7 80 a0 f3  	jalr	-0xc6(ra) <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>
802193ba: 03 35 04 f7  	ld	a0, -0x90(s0)
;         if *noff == 0 && self.intena {
802193be: 03 45 05 08  	lbu	a0, 0x80(a0)
802193c2: 05 89        	andi	a0, a0, 0x1
802193c4: 11 e5        	bnez	a0, 0x802193d0 <.Lpcrel_hi14+0x28>
802193c6: 09 a0        	j	0x802193c8 <.Lpcrel_hi14+0x20>
802193c8: ae 60        	ld	ra, 0xc8(sp)
802193ca: 0e 64        	ld	s0, 0xc0(sp)
;     }
802193cc: 69 61        	addi	sp, sp, 0xd0
802193ce: 82 80        	ret
;             intr_on()
802193d0: 97 30 ff ff  	auipc	ra, 0xffff3
802193d4: e7 80 c0 9f  	jalr	-0x604(ra) <ekernel+0xffcbedcc>
802193d8: c5 bf        	j	0x802193c8 <.Lpcrel_hi14+0x20>

00000000802193da <_ZN2os3cpu3Cpu5sched17he977bf182f87d75bE>:
;     pub unsafe fn sched<'a>(&mut self, ctx :*mut Context){
802193da: 39 71        	addi	sp, sp, -0x40
802193dc: 06 fc        	sd	ra, 0x38(sp)
802193de: 22 f8        	sd	s0, 0x30(sp)
802193e0: 80 00        	addi	s0, sp, 0x40
802193e2: 23 30 b4 fc  	sd	a1, -0x40(s0)
802193e6: aa 85        	mv	a1, a0
802193e8: 03 35 04 fc  	ld	a0, -0x40(s0)
802193ec: 23 34 b4 fc  	sd	a1, -0x38(s0)
802193f0: 23 3c b4 fc  	sd	a1, -0x28(s0)
802193f4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let ina = self.intena;
802193f8: 03 c6 05 08  	lbu	a2, 0x80(a1)
802193fc: 23 38 c4 fc  	sd	a2, -0x30(s0)
80219400: a3 07 c4 fe  	sb	a2, -0x11(s0)
;         __switch(ctx, &self.context);
80219404: c1 05        	addi	a1, a1, 0x10
80219406: 97 80 ff ff  	auipc	ra, 0xffff8
8021940a: e7 80 00 c0  	jalr	-0x400(ra) <ekernel+0xffcc4006>
8021940e: 83 35 84 fc  	ld	a1, -0x38(s0)
80219412: 03 35 04 fd  	ld	a0, -0x30(s0)
;         self.intena = ina;
80219416: 23 80 a5 08  	sb	a0, 0x80(a1)
8021941a: e2 70        	ld	ra, 0x38(sp)
8021941c: 42 74        	ld	s0, 0x30(sp)
;     }
8021941e: 21 61        	addi	sp, sp, 0x40
80219420: 82 80        	ret

0000000080219422 <_ZN2os3cpu4Cpus6cpu_id17h998a192679954eb6E>:
;     pub unsafe fn cpu_id() -> usize {
80219422: 01 11        	addi	sp, sp, -0x20
80219424: 06 ec        	sd	ra, 0x18(sp)
80219426: 22 e8        	sd	s0, 0x10(sp)
80219428: 00 10        	addi	s0, sp, 0x20
;         asm!("mv {0}, tp", out(reg) id);
8021942a: 12 85        	mv	a0, tp
8021942c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         id
80219430: 03 35 84 fe  	ld	a0, -0x18(s0)
80219434: e2 60        	ld	ra, 0x18(sp)
80219436: 42 64        	ld	s0, 0x10(sp)
;     }
80219438: 05 61        	addi	sp, sp, 0x20
8021943a: 82 80        	ret

000000008021943c <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>:
;     pub unsafe fn my_cpu(&self) -> &mut Cpu{
8021943c: 39 71        	addi	sp, sp, -0x40
8021943e: 06 fc        	sd	ra, 0x38(sp)
80219440: 22 f8        	sd	s0, 0x30(sp)
80219442: 80 00        	addi	s0, sp, 0x40
80219444: 23 34 a4 fc  	sd	a0, -0x38(s0)
80219448: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let id = Self::cpu_id();
8021944c: 97 00 00 00  	auipc	ra, 0x0
80219450: e7 80 60 fd  	jalr	-0x2a(ra) <_ZN2os3cpu4Cpus6cpu_id17h998a192679954eb6E>
80219454: aa 85        	mv	a1, a0
80219456: 2e 85        	mv	a0, a1
80219458: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021945c: 23 30 b4 fe  	sd	a1, -0x20(s0)
80219460: 09 45        	li	a0, 0x2
;         &mut *self.0[id].get()
80219462: 63 62 b5 02  	bltu	a0, a1, 0x80219486 <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E+0x4a>
80219466: 09 a0        	j	0x80219468 <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E+0x2c>
80219468: 03 35 84 fc  	ld	a0, -0x38(s0)
8021946c: 83 35 04 fd  	ld	a1, -0x30(s0)
80219470: 13 06 80 08  	li	a2, 0x88
;         &mut *self.0[id].get()
80219474: b3 85 c5 02  	mul	a1, a1, a2
80219478: 2e 95        	add	a0, a0, a1
8021947a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021947e: e2 70        	ld	ra, 0x38(sp)
80219480: 42 74        	ld	s0, 0x30(sp)
;     }
80219482: 21 61        	addi	sp, sp, 0x40
80219484: 82 80        	ret
80219486: 03 35 04 fd  	ld	a0, -0x30(s0)

000000008021948a <.Lpcrel_hi15>:
;         &mut *self.0[id].get()
8021948a: 97 e5 01 00  	auipc	a1, 0x1e
8021948e: 13 86 65 0c  	addi	a2, a1, 0xc6
80219492: 8d 45        	li	a1, 0x3
80219494: 97 70 01 00  	auipc	ra, 0x17
80219498: e7 80 c0 e1  	jalr	-0x1e4(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008021949c <_ZN2os3cpu4Cpus7my_proc17h34bed19fbeff80ffE>:
;     pub fn my_proc(&self) -> Option<&Arc<TaskControlBlock>>{
8021949c: 39 71        	addi	sp, sp, -0x40
8021949e: 06 fc        	sd	ra, 0x38(sp)
802194a0: 22 f8        	sd	s0, 0x30(sp)
802194a2: 80 00        	addi	s0, sp, 0x40
802194a4: 23 34 a4 fc  	sd	a0, -0x38(s0)
802194a8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let _intr_lock = self.intr_lock();
802194ac: 97 00 00 00  	auipc	ra, 0x0
802194b0: e7 80 80 09  	jalr	0x98(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
802194b4: aa 85        	mv	a1, a0
802194b6: 03 35 84 fc  	ld	a0, -0x38(s0)
802194ba: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             let c = self.my_cpu();
802194be: 97 00 00 00  	auipc	ra, 0x0
802194c2: e7 80 e0 f7  	jalr	-0x82(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
802194c6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             (*c).task.as_ref()
802194ca: 21 05        	addi	a0, a0, 0x8
802194cc: 97 c0 fe ff  	auipc	ra, 0xfffec
802194d0: e7 80 80 9c  	jalr	-0x638(ra) <ekernel+0xffcb7e94>
802194d4: 23 38 a4 fc  	sd	a0, -0x30(s0)
802194d8: 13 05 84 fd  	addi	a0, s0, -0x28
;     }
802194dc: 97 f0 fe ff  	auipc	ra, 0xfffef
802194e0: e7 80 40 81  	jalr	-0x7ec(ra) <ekernel+0xffcbacf0>
802194e4: 03 35 04 fd  	ld	a0, -0x30(s0)
802194e8: e2 70        	ld	ra, 0x38(sp)
802194ea: 42 74        	ld	s0, 0x30(sp)
802194ec: 21 61        	addi	sp, sp, 0x40
802194ee: 82 80        	ret

00000000802194f0 <_ZN2os3cpu4Cpus9take_task17h0bcd533be6ae7cb5E>:
;     pub fn take_task(&self) -> Option<Arc<TaskControlBlock>>{
802194f0: 39 71        	addi	sp, sp, -0x40
802194f2: 06 fc        	sd	ra, 0x38(sp)
802194f4: 22 f8        	sd	s0, 0x30(sp)
802194f6: 80 00        	addi	s0, sp, 0x40
802194f8: 23 34 a4 fc  	sd	a0, -0x38(s0)
802194fc: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let _intr_lock = self.intr_lock();
80219500: 97 00 00 00  	auipc	ra, 0x0
80219504: e7 80 40 04  	jalr	0x44(ra) <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>
80219508: aa 85        	mv	a1, a0
8021950a: 03 35 84 fc  	ld	a0, -0x38(s0)
8021950e: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let c = unsafe { self.my_cpu() };
80219512: 97 00 00 00  	auipc	ra, 0x0
80219516: e7 80 a0 f2  	jalr	-0xd6(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
8021951a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         c.task.take()
8021951e: 21 05        	addi	a0, a0, 0x8
80219520: 97 c0 fe ff  	auipc	ra, 0xfffec
80219524: e7 80 c0 86  	jalr	-0x794(ra) <ekernel+0xffcb7d8c>
80219528: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021952c: 13 05 84 fd  	addi	a0, s0, -0x28
;     }
80219530: 97 e0 fe ff  	auipc	ra, 0xfffee
80219534: e7 80 00 7c  	jalr	0x7c0(ra) <ekernel+0xffcbacf0>
80219538: 03 35 04 fd  	ld	a0, -0x30(s0)
8021953c: e2 70        	ld	ra, 0x38(sp)
8021953e: 42 74        	ld	s0, 0x30(sp)
80219540: 21 61        	addi	sp, sp, 0x40
80219542: 82 80        	ret

0000000080219544 <_ZN2os3cpu4Cpus9intr_lock17h59f385545cd5c998E>:
;     pub fn intr_lock(&self) -> IntrLock {
80219544: 79 71        	addi	sp, sp, -0x30
80219546: 06 f4        	sd	ra, 0x28(sp)
80219548: 22 f0        	sd	s0, 0x20(sp)
8021954a: 00 18        	addi	s0, sp, 0x30
8021954c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80219550: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let old = intr_get();
80219554: 97 30 ff ff  	auipc	ra, 0xffff3
80219558: e7 80 80 83  	jalr	-0x7c8(ra) <ekernel+0xffcbed8c>
8021955c: aa 85        	mv	a1, a0
8021955e: 03 35 04 fd  	ld	a0, -0x30(s0)
80219562: 23 3c b4 fc  	sd	a1, -0x28(s0)
80219566: a3 07 b4 fe  	sb	a1, -0x11(s0)
;             self.my_cpu().locked(old)
8021956a: 97 00 00 00  	auipc	ra, 0x0
8021956e: e7 80 20 ed  	jalr	-0x12e(ra) <_ZN2os3cpu4Cpus6my_cpu17h42c4c5e6262142b9E>
80219572: 83 35 84 fd  	ld	a1, -0x28(s0)
80219576: 97 00 00 00  	auipc	ra, 0x0
8021957a: e7 80 a0 be  	jalr	-0x416(ra) <_ZN2os3cpu3Cpu6locked17hb3b19cf4eca88171E>
8021957e: a2 70        	ld	ra, 0x28(sp)
80219580: 02 74        	ld	s0, 0x20(sp)
;     }
80219582: 45 61        	addi	sp, sp, 0x30
80219584: 82 80        	ret

0000000080219586 <_ZN55_$LT$os..cpu..Context$u20$as$u20$core..clone..Clone$GT$5clone17he6a273ebed914050E>:
; #[derive(Clone, Copy, Debug)]
80219586: 01 11        	addi	sp, sp, -0x20
80219588: 06 ec        	sd	ra, 0x18(sp)
8021958a: 22 e8        	sd	s0, 0x10(sp)
8021958c: 00 10        	addi	s0, sp, 0x20
8021958e: 23 34 b4 fe  	sd	a1, -0x18(s0)
80219592: 13 06 00 07  	li	a2, 0x70
80219596: 97 80 01 00  	auipc	ra, 0x18
8021959a: e7 80 80 6d  	jalr	0x6d8(ra) <memcpy>
8021959e: e2 60        	ld	ra, 0x18(sp)
802195a0: 42 64        	ld	s0, 0x10(sp)
802195a2: 05 61        	addi	sp, sp, 0x20
802195a4: 82 80        	ret

00000000802195a6 <_ZN5riscv8register4satp4Satp4bits17hf8d50d8b052307a9E>:
;     pub fn bits(&self) -> usize {
802195a6: 01 11        	addi	sp, sp, -0x20
802195a8: 06 ec        	sd	ra, 0x18(sp)
802195aa: 22 e8        	sd	s0, 0x10(sp)
802195ac: 00 10        	addi	s0, sp, 0x20
802195ae: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.bits
802195b2: 08 61        	ld	a0, 0x0(a0)
802195b4: e2 60        	ld	ra, 0x18(sp)
802195b6: 42 64        	ld	s0, 0x10(sp)
;     }
802195b8: 05 61        	addi	sp, sp, 0x20
802195ba: 82 80        	ret

00000000802195bc <_ZN5riscv8register4satp4read17h8053bd2422377ff1E>:
;         pub fn read() -> $register {
802195bc: 01 11        	addi	sp, sp, -0x20
802195be: 06 ec        	sd	ra, 0x18(sp)
802195c0: 22 e8        	sd	s0, 0x10(sp)
802195c2: 00 10        	addi	s0, sp, 0x20
;                 bits: unsafe { _read() },
802195c4: 97 00 00 00  	auipc	ra, 0x0
802195c8: e7 80 80 01  	jalr	0x18(ra) <_ZN5riscv8register4satp5_read17hbc31039a2546d95fE>
;             $register {
802195cc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         }
802195d0: 03 35 84 fe  	ld	a0, -0x18(s0)
802195d4: e2 60        	ld	ra, 0x18(sp)
802195d6: 42 64        	ld	s0, 0x10(sp)
802195d8: 05 61        	addi	sp, sp, 0x20
802195da: 82 80        	ret

00000000802195dc <_ZN5riscv8register4satp5_read17hbc31039a2546d95fE>:
;         unsafe fn _read() -> usize {
802195dc: 01 11        	addi	sp, sp, -0x20
802195de: 06 ec        	sd	ra, 0x18(sp)
802195e0: 22 e8        	sd	s0, 0x10(sp)
802195e2: 00 10        	addi	s0, sp, 0x20
;                     core::arch::asm!("csrrs {0}, {1}, x0", out(reg) r, const $csr_number);
802195e4: 73 25 00 18  	csrr	a0, satp
802195e8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     r
802195ec: 03 35 84 fe  	ld	a0, -0x18(s0)
802195f0: e2 60        	ld	ra, 0x18(sp)
802195f2: 42 64        	ld	s0, 0x10(sp)
;         }
802195f4: 05 61        	addi	sp, sp, 0x20
802195f6: 82 80        	ret

00000000802195f8 <_ZN5riscv8register4satp5write17h852b701b47d7d045E>:
;         pub fn write(bits: usize) {
802195f8: 01 11        	addi	sp, sp, -0x20
802195fa: 06 ec        	sd	ra, 0x18(sp)
802195fc: 22 e8        	sd	s0, 0x10(sp)
802195fe: 00 10        	addi	s0, sp, 0x20
80219600: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             unsafe { _write(bits) }
80219604: 97 00 00 00  	auipc	ra, 0x0
80219608: e7 80 00 01  	jalr	0x10(ra) <_ZN5riscv8register4satp6_write17hcb6805ffc7ba54d5E>
8021960c: e2 60        	ld	ra, 0x18(sp)
8021960e: 42 64        	ld	s0, 0x10(sp)
;         }
80219610: 05 61        	addi	sp, sp, 0x20
80219612: 82 80        	ret

0000000080219614 <_ZN5riscv8register4satp6_write17hcb6805ffc7ba54d5E>:
;         unsafe fn _write(bits: usize) {
80219614: 01 11        	addi	sp, sp, -0x20
80219616: 06 ec        	sd	ra, 0x18(sp)
80219618: 22 e8        	sd	s0, 0x10(sp)
8021961a: 00 10        	addi	s0, sp, 0x20
8021961c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 () => core::arch::asm!("csrrw x0, {1}, {0}", in(reg) bits, const $csr_number),
80219620: 73 10 05 18  	csrw	satp, a0
80219624: e2 60        	ld	ra, 0x18(sp)
80219626: 42 64        	ld	s0, 0x10(sp)
;         }
80219628: 05 61        	addi	sp, sp, 0x20
8021962a: 82 80        	ret

000000008021962c <_ZN77_$LT$core..marker..PhantomData$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hbd7baa101f2d030bE>:
;     fn default() -> Self {
8021962c: 41 11        	addi	sp, sp, -0x10
8021962e: 06 e4        	sd	ra, 0x8(sp)
80219630: 22 e0        	sd	s0, 0x0(sp)
80219632: 00 08        	addi	s0, sp, 0x10
80219634: a2 60        	ld	ra, 0x8(sp)
80219636: 02 64        	ld	s0, 0x0(sp)
;     }
80219638: 41 01        	addi	sp, sp, 0x10
8021963a: 82 80        	ret

000000008021963c <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h65db85e0302784aaE>:
;             move |(), x| {
8021963c: 39 71        	addi	sp, sp, -0x40
8021963e: 06 fc        	sd	ra, 0x38(sp)
80219640: 22 f8        	sd	s0, 0x30(sp)
80219642: 80 00        	addi	s0, sp, 0x40
80219644: 23 30 b4 fc  	sd	a1, -0x40(s0)
80219648: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021964c: 93 05 04 fc  	addi	a1, s0, -0x40
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
80219650: 23 3c b4 fc  	sd	a1, -0x28(s0)
80219654: 83 35 84 fd  	ld	a1, -0x28(s0)
80219658: 97 b0 ff ff  	auipc	ra, 0xffffb
8021965c: e7 80 a0 91  	jalr	-0x6e6(ra) <ekernel+0xffcc6f72>
80219660: 11 e5        	bnez	a0, 0x8021966c <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h65db85e0302784aaE+0x30>
80219662: 09 a0        	j	0x80219664 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h65db85e0302784aaE+0x28>
80219664: 01 45        	li	a0, 0x0
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
80219666: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             }
8021966a: 09 a8        	j	0x8021967c <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h65db85e0302784aaE+0x40>
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021966c: 03 35 04 fc  	ld	a0, -0x40(s0)
80219670: 23 38 a4 fc  	sd	a0, -0x30(s0)
80219674: 05 45        	li	a0, 0x1
80219676: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             }
8021967a: 09 a0        	j	0x8021967c <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h65db85e0302784aaE+0x40>
8021967c: 03 35 84 fc  	ld	a0, -0x38(s0)
80219680: 83 35 04 fd  	ld	a1, -0x30(s0)
80219684: e2 70        	ld	ra, 0x38(sp)
80219686: 42 74        	ld	s0, 0x30(sp)
80219688: 21 61        	addi	sp, sp, 0x40
8021968a: 82 80        	ret

000000008021968c <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h77370b2e73713ab0E>:
;             move |(), x| {
8021968c: 5d 71        	addi	sp, sp, -0x50
8021968e: 86 e4        	sd	ra, 0x48(sp)
80219690: a2 e0        	sd	s0, 0x40(sp)
80219692: 80 08        	addi	s0, sp, 0x50
80219694: 23 3c b4 fa  	sd	a1, -0x48(s0)
80219698: 23 30 c4 fc  	sd	a2, -0x40(s0)
8021969c: 23 30 a4 fe  	sd	a0, -0x20(s0)
802196a0: 93 05 84 fb  	addi	a1, s0, -0x48
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
802196a4: 23 3c b4 fc  	sd	a1, -0x28(s0)
802196a8: 83 35 84 fd  	ld	a1, -0x28(s0)
802196ac: 97 30 ff ff  	auipc	ra, 0xffff3
802196b0: e7 80 c0 a6  	jalr	-0x594(ra) <ekernel+0xffcbf118>
802196b4: 11 e5        	bnez	a0, 0x802196c0 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h77370b2e73713ab0E+0x34>
802196b6: 09 a0        	j	0x802196b8 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h77370b2e73713ab0E+0x2c>
802196b8: 01 45        	li	a0, 0x0
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
802196ba: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             }
802196be: 11 a8        	j	0x802196d2 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h77370b2e73713ab0E+0x46>
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
802196c0: 83 35 84 fb  	ld	a1, -0x48(s0)
802196c4: 03 35 04 fc  	ld	a0, -0x40(s0)
802196c8: 23 34 b4 fc  	sd	a1, -0x38(s0)
802196cc: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             }
802196d0: 09 a0        	j	0x802196d2 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h77370b2e73713ab0E+0x46>
802196d2: 03 35 84 fc  	ld	a0, -0x38(s0)
802196d6: 83 35 04 fd  	ld	a1, -0x30(s0)
802196da: a6 60        	ld	ra, 0x48(sp)
802196dc: 06 64        	ld	s0, 0x40(sp)
802196de: 61 61        	addi	sp, sp, 0x50
802196e0: 82 80        	ret

00000000802196e2 <_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17hcacebc47d6019306E>:
;             move |(), item| f(item)
802196e2: 79 71        	addi	sp, sp, -0x30
802196e4: 06 f4        	sd	ra, 0x28(sp)
802196e6: 22 f0        	sd	s0, 0x20(sp)
802196e8: 00 18        	addi	s0, sp, 0x30
802196ea: 23 3c a4 fc  	sd	a0, -0x28(s0)
802196ee: 23 34 b4 fe  	sd	a1, -0x18(s0)
802196f2: 23 38 b4 fc  	sd	a1, -0x30(s0)
802196f6: 83 35 04 fd  	ld	a1, -0x30(s0)
802196fa: 97 c0 fe ff  	auipc	ra, 0xfffec
802196fe: e7 80 20 20  	jalr	0x202(ra) <ekernel+0xffcb88fc>
80219702: a2 70        	ld	ra, 0x28(sp)
80219704: 02 74        	ld	s0, 0x20(sp)
80219706: 45 61        	addi	sp, sp, 0x30
80219708: 82 80        	ret

000000008021970a <_ZN4core10intrinsics11write_bytes18precondition_check17h6427b827b73579cfE>:
;             const fn precondition_check($($name:$ty),*) {
8021970a: 01 11        	addi	sp, sp, -0x20
8021970c: 06 ec        	sd	ra, 0x18(sp)
8021970e: 22 e8        	sd	s0, 0x10(sp)
80219710: 00 10        	addi	s0, sp, 0x20
80219712: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219716: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => is_aligned_and_not_null(addr, align)
8021971a: 97 00 00 00  	auipc	ra, 0x0
8021971e: e7 80 60 18  	jalr	0x186(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>
80219722: 01 ed        	bnez	a0, 0x8021973a <.Lpcrel_hi0+0x14>
80219724: 09 a0        	j	0x80219726 <.Lpcrel_hi0>

0000000080219726 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
80219726: 17 e5 01 00  	auipc	a0, 0x1e
8021972a: 13 05 25 e4  	addi	a0, a0, -0x1be
8021972e: 93 05 f0 06  	li	a1, 0x6f
80219732: 97 70 01 00  	auipc	ra, 0x17
80219736: e7 80 e0 b0  	jalr	-0x4f2(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8021973a: e2 60        	ld	ra, 0x18(sp)
8021973c: 42 64        	ld	s0, 0x10(sp)
;             }
8021973e: 05 61        	addi	sp, sp, 0x20
80219740: 82 80        	ret

0000000080219742 <_ZN4core10intrinsics17is_nonoverlapping7runtime17h9da9204a9d998b3aE>:
;     fn runtime(src: *const (), dst: *const (), size: usize, count: usize) -> bool {
80219742: 35 71        	addi	sp, sp, -0xa0
80219744: 06 ed        	sd	ra, 0x98(sp)
80219746: 22 e9        	sd	s0, 0x90(sp)
80219748: 00 11        	addi	s0, sp, 0xa0
8021974a: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021974e: 23 30 b4 fa  	sd	a1, -0x60(s0)
80219752: 23 34 c4 fa  	sd	a2, -0x58(s0)
80219756: 23 38 d4 fa  	sd	a3, -0x50(s0)
;         unsafe { mem::transmute(self.cast::<()>()) }
8021975a: 2a 87        	mv	a4, a0
8021975c: 23 34 e4 f6  	sd	a4, -0x98(s0)
80219760: 23 3c a4 fa  	sd	a0, -0x48(s0)
80219764: 2e 85        	mv	a0, a1
80219766: 23 38 a4 f6  	sd	a0, -0x90(s0)
8021976a: 23 30 b4 fc  	sd	a1, -0x40(s0)
;     uint_impl! {
8021976e: 33 35 d6 02  	mulhu	a0, a2, a3
80219772: 33 35 a0 00  	snez	a0, a0
80219776: b3 05 d6 02  	mul	a1, a2, a3
8021977a: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021977e: 23 34 b4 fc  	sd	a1, -0x38(s0)
80219782: a3 0b a4 fc  	sb	a0, -0x29(s0)
80219786: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021978a: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021978e: 03 45 74 fe  	lbu	a0, -0x19(s0)
80219792: 05 89        	andi	a0, a0, 0x1
80219794: 15 e5        	bnez	a0, 0x802197c0 <.Lpcrel_hi1>
80219796: 09 a0        	j	0x80219798 <_ZN4core10intrinsics17is_nonoverlapping7runtime17h9da9204a9d998b3aE+0x56>
80219798: 03 35 84 f6  	ld	a0, -0x98(s0)
8021979c: 83 35 04 f7  	ld	a1, -0x90(s0)
802197a0: 03 36 84 f7  	ld	a2, -0x88(s0)
;     uint_impl! {
802197a4: 23 34 c4 f8  	sd	a2, -0x78(s0)
802197a8: 05 46        	li	a2, 0x1
802197aa: 23 30 c4 f8  	sd	a2, -0x80(s0)
;         let Some(size) = size.checked_mul(count) else {
802197ae: 03 36 84 f8  	ld	a2, -0x78(s0)
802197b2: 23 30 c4 f6  	sd	a2, -0xa0(s0)
802197b6: 23 34 c4 fe  	sd	a2, -0x18(s0)
;     uint_impl! {
802197ba: 63 65 b5 02  	bltu	a0, a1, 0x802197e4 <.Lpcrel_hi1+0x24>
802197be: 19 a8        	j	0x802197d4 <.Lpcrel_hi1+0x14>

00000000802197c0 <.Lpcrel_hi1>:
;             crate::panicking::panic_nounwind(
802197c0: 17 e5 01 00  	auipc	a0, 0x1e
802197c4: 13 05 75 e1  	addi	a0, a0, -0x1e9
802197c8: 93 05 d0 03  	li	a1, 0x3d
802197cc: 97 70 01 00  	auipc	ra, 0x17
802197d0: e7 80 40 a7  	jalr	-0x58c(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
802197d4: 03 35 84 f6  	ld	a0, -0x98(s0)
802197d8: 83 35 04 f7  	ld	a1, -0x90(s0)
;     uint_impl! {
802197dc: 0d 8d        	sub	a0, a0, a1
802197de: 23 38 a4 f8  	sd	a0, -0x70(s0)
802197e2: 09 a8        	j	0x802197f4 <.Lpcrel_hi1+0x34>
802197e4: 03 35 04 f7  	ld	a0, -0x90(s0)
802197e8: 83 35 84 f6  	ld	a1, -0x98(s0)
;     uint_impl! {
802197ec: 0d 8d        	sub	a0, a0, a1
802197ee: 23 38 a4 f8  	sd	a0, -0x70(s0)
802197f2: 09 a0        	j	0x802197f4 <.Lpcrel_hi1+0x34>
802197f4: 83 35 04 f6  	ld	a1, -0xa0(s0)
;         diff >= size
802197f8: 03 35 04 f9  	ld	a0, -0x70(s0)
802197fc: 33 35 b5 00  	sltu	a0, a0, a1
80219800: 13 45 15 00  	xori	a0, a0, 0x1
80219804: ea 60        	ld	ra, 0x98(sp)
80219806: 4a 64        	ld	s0, 0x90(sp)
;     }
80219808: 0d 61        	addi	sp, sp, 0xa0
8021980a: 82 80        	ret

000000008021980c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h279b2b08ed81b702E>:
;             const fn precondition_check($($name:$ty),*) {
8021980c: 59 71        	addi	sp, sp, -0x70
8021980e: 86 f4        	sd	ra, 0x68(sp)
80219810: a2 f0        	sd	s0, 0x60(sp)
80219812: 80 18        	addi	s0, sp, 0x70
80219814: 23 3c e4 f8  	sd	a4, -0x68(s0)
80219818: 23 34 d4 fa  	sd	a3, -0x58(s0)
8021981c: 23 30 c4 fa  	sd	a2, -0x60(s0)
80219820: ae 86        	mv	a3, a1
80219822: 83 35 84 fa  	ld	a1, -0x58(s0)
80219826: 23 38 d4 fa  	sd	a3, -0x50(s0)
8021982a: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021982e: 23 30 a4 fc  	sd	a0, -0x40(s0)
80219832: 23 34 d4 fc  	sd	a3, -0x38(s0)
80219836: 23 38 c4 fc  	sd	a2, -0x30(s0)
8021983a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021983e: 23 30 e4 fe  	sd	a4, -0x20(s0)
;         is_aligned_and_not_null(src, align)
80219842: 97 00 00 00  	auipc	ra, 0x0
80219846: e7 80 e0 05  	jalr	0x5e(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>
8021984a: 01 ed        	bnez	a0, 0x80219862 <.Lpcrel_hi2+0x14>
8021984c: 09 a0        	j	0x8021984e <.Lpcrel_hi2>

000000008021984e <.Lpcrel_hi2>:
;                     ::core::panicking::panic_nounwind(
8021984e: 17 e5 01 00  	auipc	a0, 0x1e
80219852: 13 05 65 dc  	addi	a0, a0, -0x23a
80219856: 93 05 60 0a  	li	a1, 0xa6
8021985a: 97 70 01 00  	auipc	ra, 0x17
8021985e: e7 80 60 9e  	jalr	-0x61a(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80219862: 83 35 84 fa  	ld	a1, -0x58(s0)
80219866: 03 35 04 fb  	ld	a0, -0x50(s0)
;             && is_aligned_and_not_null(dst, align)
8021986a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021986e: 97 00 00 00  	auipc	ra, 0x0
80219872: e7 80 20 03  	jalr	0x32(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>
80219876: 61 dd        	beqz	a0, 0x8021984e <.Lpcrel_hi2>
80219878: 09 a0        	j	0x8021987a <.Lpcrel_hi2+0x2c>
8021987a: 83 36 84 f9  	ld	a3, -0x68(s0)
8021987e: 03 36 04 fa  	ld	a2, -0x60(s0)
80219882: 83 35 04 fb  	ld	a1, -0x50(s0)
80219886: 03 35 84 fb  	ld	a0, -0x48(s0)
;         const_eval_select((src, dst, size, count), comptime, runtime)
8021988a: 97 00 00 00  	auipc	ra, 0x0
8021988e: e7 80 80 eb  	jalr	-0x148(ra) <_ZN4core10intrinsics17is_nonoverlapping7runtime17h9da9204a9d998b3aE>
;             && is_nonoverlapping(src, dst, size, count)
80219892: 19 e1        	bnez	a0, 0x80219898 <.Lpcrel_hi2+0x4a>
80219894: 09 a0        	j	0x80219896 <.Lpcrel_hi2+0x48>
; #![no_std]
80219896: 65 bf        	j	0x8021984e <.Lpcrel_hi2>
80219898: a6 70        	ld	ra, 0x68(sp)
8021989a: 06 74        	ld	s0, 0x60(sp)
;             }
8021989c: 65 61        	addi	sp, sp, 0x70
8021989e: 82 80        	ret

00000000802198a0 <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>:
; pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
802198a0: 75 71        	addi	sp, sp, -0x90
802198a2: 06 e5        	sd	ra, 0x88(sp)
802198a4: 22 e1        	sd	s0, 0x80(sp)
802198a6: 00 09        	addi	s0, sp, 0x90
802198a8: 23 3c b4 f6  	sd	a1, -0x88(s0)
802198ac: 23 30 a4 fc  	sd	a0, -0x40(s0)
802198b0: 23 34 b4 fc  	sd	a1, -0x38(s0)
;             const_eval_select((self as *const u8,), const_impl, runtime_impl)
802198b4: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { mem::transmute(self.cast::<()>()) }
802198b8: aa 85        	mv	a1, a0
802198ba: 23 30 b4 f8  	sd	a1, -0x80(s0)
;     !ptr.is_null() && ptr.is_aligned_to(align)
802198be: 11 e5        	bnez	a0, 0x802198ca <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E+0x2a>
802198c0: 09 a0        	j	0x802198c2 <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E+0x22>
802198c2: 01 45        	li	a0, 0x0
;     !ptr.is_null() && ptr.is_aligned_to(align)
802198c4: a3 07 a4 f8  	sb	a0, -0x71(s0)
802198c8: 85 a8        	j	0x80219938 <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E+0x98>
802198ca: 03 35 84 f7  	ld	a0, -0x88(s0)
;     uint_impl! {
802198ce: 93 55 15 00  	srli	a1, a0, 0x1
802198d2: 37 56 55 55  	lui	a2, 0x55555
802198d6: 1b 06 56 55  	addiw	a2, a2, 0x555
802198da: 93 16 06 02  	slli	a3, a2, 0x20
802198de: 36 96        	add	a2, a2, a3
802198e0: f1 8d        	and	a1, a1, a2
802198e2: b3 05 b5 40  	sub	a1, a0, a1
802198e6: 37 35 33 33  	lui	a0, 0x33333
802198ea: 1b 05 35 33  	addiw	a0, a0, 0x333
802198ee: 13 16 05 02  	slli	a2, a0, 0x20
802198f2: 2a 96        	add	a2, a2, a0
802198f4: 33 f5 c5 00  	and	a0, a1, a2
802198f8: 89 81        	srli	a1, a1, 0x2
802198fa: f1 8d        	and	a1, a1, a2
802198fc: 2e 95        	add	a0, a0, a1
802198fe: 93 55 45 00  	srli	a1, a0, 0x4
80219902: 2e 95        	add	a0, a0, a1
80219904: b7 15 0f 0f  	lui	a1, 0xf0f1
80219908: 9b 85 f5 f0  	addiw	a1, a1, -0xf1
8021990c: 13 96 05 02  	slli	a2, a1, 0x20
80219910: b2 95        	add	a1, a1, a2
80219912: 6d 8d        	and	a0, a0, a1
80219914: b7 05 01 01  	lui	a1, 0x1010
80219918: 9b 85 15 10  	addiw	a1, a1, 0x101
8021991c: 13 96 05 02  	slli	a2, a1, 0x20
80219920: b2 95        	add	a1, a1, a2
80219922: 33 05 b5 02  	mul	a0, a0, a1
80219926: 61 91        	srli	a0, a0, 0x38
80219928: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021992c: 03 25 84 fd  	lw	a0, -0x28(s0)
80219930: 85 45        	li	a1, 0x1
;         if !align.is_power_of_two() {
80219932: 63 09 b5 00  	beq	a0, a1, 0x80219944 <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E+0xa4>
80219936: 15 a0        	j	0x8021995a <.Lpcrel_hi3>
; }
80219938: 03 45 f4 f8  	lbu	a0, -0x71(s0)
8021993c: aa 60        	ld	ra, 0x88(sp)
8021993e: 0a 64        	ld	s0, 0x80(sp)
80219940: 49 61        	addi	sp, sp, 0x90
80219942: 82 80        	ret
80219944: 03 35 04 f8  	ld	a0, -0x80(s0)
80219948: 83 35 84 f7  	ld	a1, -0x88(s0)
;             ptr.addr() & (align - 1) == 0
8021994c: fd 15        	addi	a1, a1, -0x1
8021994e: 6d 8d        	and	a0, a0, a1
80219950: 13 35 15 00  	seqz	a0, a0
80219954: a3 07 a4 f8  	sb	a0, -0x71(s0)
;     !ptr.is_null() && ptr.is_aligned_to(align)
80219958: c5 b7        	j	0x80219938 <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E+0x98>

000000008021995a <.Lpcrel_hi3>:
;             panic!("is_aligned_to: align is not a power-of-two");
8021995a: 17 e5 01 00  	auipc	a0, 0x1e
8021995e: 93 05 e5 d8  	addi	a1, a0, -0x272
80219962: 23 30 b4 fe  	sd	a1, -0x20(s0)
80219966: 05 45        	li	a0, 0x1
80219968: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021996c: 23 38 b4 f8  	sd	a1, -0x70(s0)
80219970: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080219974 <.Lpcrel_hi4>:
80219974: 17 a5 01 00  	auipc	a0, 0x1a
80219978: 13 05 c5 91  	addi	a0, a0, -0x6e4
8021997c: 0c 61        	ld	a1, 0x0(a0)
8021997e: 08 65        	ld	a0, 0x8(a0)
80219980: 23 38 b4 fa  	sd	a1, -0x50(s0)
80219984: 23 3c a4 fa  	sd	a0, -0x48(s0)

0000000080219988 <.Lpcrel_hi5>:
80219988: 17 e5 01 00  	auipc	a0, 0x1e
8021998c: 13 05 05 d7  	addi	a0, a0, -0x290
80219990: 23 30 a4 fa  	sd	a0, -0x60(s0)
80219994: 01 45        	li	a0, 0x0
80219996: 23 34 a4 fa  	sd	a0, -0x58(s0)

000000008021999a <.Lpcrel_hi6>:
;             panic!("is_aligned_to: align is not a power-of-two");
8021999a: 17 e5 01 00  	auipc	a0, 0x1e
8021999e: 93 05 65 dd  	addi	a1, a0, -0x22a
802199a2: 13 05 04 f9  	addi	a0, s0, -0x70
802199a6: 97 70 01 00  	auipc	ra, 0x17
802199aa: e7 80 20 80  	jalr	-0x7fe(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802199ae <_ZN4core10intrinsics4copy18precondition_check17h37064f4ff43119e9E>:
;             const fn precondition_check($($name:$ty),*) {
802199ae: 39 71        	addi	sp, sp, -0x40
802199b0: 06 fc        	sd	ra, 0x38(sp)
802199b2: 22 f8        	sd	s0, 0x30(sp)
802199b4: 80 00        	addi	s0, sp, 0x40
802199b6: 23 34 c4 fc  	sd	a2, -0x38(s0)
802199ba: 2e 86        	mv	a2, a1
802199bc: 83 35 84 fc  	ld	a1, -0x38(s0)
802199c0: 23 38 c4 fc  	sd	a2, -0x30(s0)
802199c4: 23 3c a4 fc  	sd	a0, -0x28(s0)
802199c8: 23 30 c4 fe  	sd	a2, -0x20(s0)
802199cc: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             is_aligned_and_not_null(src, align)
802199d0: 97 00 00 00  	auipc	ra, 0x0
802199d4: e7 80 00 ed  	jalr	-0x130(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>
802199d8: 01 ed        	bnez	a0, 0x802199f0 <.Lpcrel_hi7+0x14>
802199da: 09 a0        	j	0x802199dc <.Lpcrel_hi7>

00000000802199dc <.Lpcrel_hi7>:
;                     ::core::panicking::panic_nounwind(
802199dc: 17 e5 01 00  	auipc	a0, 0x1e
802199e0: 13 05 85 c3  	addi	a0, a0, -0x3c8
802199e4: 93 05 60 0a  	li	a1, 0xa6
802199e8: 97 70 01 00  	auipc	ra, 0x17
802199ec: e7 80 80 85  	jalr	-0x7a8(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
802199f0: 83 35 84 fc  	ld	a1, -0x38(s0)
802199f4: 03 35 04 fd  	ld	a0, -0x30(s0)
;                 && is_aligned_and_not_null(dst, align)
802199f8: 97 00 00 00  	auipc	ra, 0x0
802199fc: e7 80 80 ea  	jalr	-0x158(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h066f4a85a42b5e44E>
80219a00: 19 e1        	bnez	a0, 0x80219a06 <.Lpcrel_hi7+0x2a>
80219a02: 09 a0        	j	0x80219a04 <.Lpcrel_hi7+0x28>
; #![no_std]
80219a04: e1 bf        	j	0x802199dc <.Lpcrel_hi7>
80219a06: e2 70        	ld	ra, 0x38(sp)
80219a08: 42 74        	ld	s0, 0x30(sp)
;             }
80219a0a: 21 61        	addi	sp, sp, 0x40
80219a0c: 82 80        	ret

0000000080219a0e <_ZN6sbi_rt6legacy15console_getchar17h6e9f14464b716802E>:
; pub fn console_getchar() -> usize {
80219a0e: 01 11        	addi	sp, sp, -0x20
80219a10: 06 ec        	sd	ra, 0x18(sp)
80219a12: 22 e8        	sd	s0, 0x10(sp)
80219a14: 00 10        	addi	s0, sp, 0x20
80219a16: 89 48        	li	a7, 0x2
80219a18: 23 34 14 ff  	sd	a7, -0x18(s0)
;         core::arch::asm!(
80219a1c: 73 00 00 00  	ecall
80219a20: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     error
80219a24: 03 35 04 fe  	ld	a0, -0x20(s0)
80219a28: e2 60        	ld	ra, 0x18(sp)
80219a2a: 42 64        	ld	s0, 0x10(sp)
; }
80219a2c: 05 61        	addi	sp, sp, 0x20
80219a2e: 82 80        	ret

0000000080219a30 <_ZN4core5panic10panic_info9PanicInfo7message17h8a9f06b69571ed1bE>:
;     pub fn message(&self) -> Option<&fmt::Arguments<'_>> {
80219a30: 01 11        	addi	sp, sp, -0x20
80219a32: 06 ec        	sd	ra, 0x18(sp)
80219a34: 22 e8        	sd	s0, 0x10(sp)
80219a36: 00 10        	addi	s0, sp, 0x20
80219a38: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.message
80219a3c: 08 69        	ld	a0, 0x10(a0)
80219a3e: e2 60        	ld	ra, 0x18(sp)
80219a40: 42 64        	ld	s0, 0x10(sp)
;     }
80219a42: 05 61        	addi	sp, sp, 0x20
80219a44: 82 80        	ret

0000000080219a46 <_ZN4core5panic10panic_info9PanicInfo8location17hf308bb9d02a0a769E>:
;     pub fn location(&self) -> Option<&Location<'_>> {
80219a46: 01 11        	addi	sp, sp, -0x20
80219a48: 06 ec        	sd	ra, 0x18(sp)
80219a4a: 22 e8        	sd	s0, 0x10(sp)
80219a4c: 00 10        	addi	s0, sp, 0x20
80219a4e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Some(&self.location)
80219a52: 08 6d        	ld	a0, 0x18(a0)
80219a54: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     }
80219a58: 03 35 04 fe  	ld	a0, -0x20(s0)
80219a5c: e2 60        	ld	ra, 0x18(sp)
80219a5e: 42 64        	ld	s0, 0x10(sp)
80219a60: 05 61        	addi	sp, sp, 0x20
80219a62: 82 80        	ret

0000000080219a64 <_ZN4core3mem4drop17h48a990f70936f01fE>:
; pub fn drop<T>(_x: T) {}
80219a64: 01 11        	addi	sp, sp, -0x20
80219a66: 06 ec        	sd	ra, 0x18(sp)
80219a68: 22 e8        	sd	s0, 0x10(sp)
80219a6a: 00 10        	addi	s0, sp, 0x20
80219a6c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219a70: 23 34 b4 fe  	sd	a1, -0x18(s0)
80219a74: 13 05 04 fe  	addi	a0, s0, -0x20
80219a78: 97 e0 fe ff  	auipc	ra, 0xfffee
80219a7c: e7 80 80 79  	jalr	0x798(ra) <ekernel+0xffcbb210>
80219a80: e2 60        	ld	ra, 0x18(sp)
80219a82: 42 64        	ld	s0, 0x10(sp)
80219a84: 05 61        	addi	sp, sp, 0x20
80219a86: 82 80        	ret

0000000080219a88 <_ZN4core3mem4drop17h4e97e8a503492b55E>:
80219a88: 01 11        	addi	sp, sp, -0x20
80219a8a: 06 ec        	sd	ra, 0x18(sp)
80219a8c: 22 e8        	sd	s0, 0x10(sp)
80219a8e: 00 10        	addi	s0, sp, 0x20
80219a90: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219a94: 23 34 b4 fe  	sd	a1, -0x18(s0)
80219a98: 13 05 04 fe  	addi	a0, s0, -0x20
80219a9c: 97 f0 fe ff  	auipc	ra, 0xfffef
80219aa0: e7 80 60 89  	jalr	-0x76a(ra) <ekernel+0xffcbb332>
80219aa4: e2 60        	ld	ra, 0x18(sp)
80219aa6: 42 64        	ld	s0, 0x10(sp)
80219aa8: 05 61        	addi	sp, sp, 0x20
80219aaa: 82 80        	ret

0000000080219aac <__rust_alloc_error_handler>:
80219aac: 17 d3 fe ff  	auipc	t1, 0xfffed
80219ab0: 67 00 23 fa  	jr	-0x5e(t1) <ekernel+0xffcb9a4e>

0000000080219ab4 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h1fda091c8bfc6d8bE>:
;     fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
80219ab4: 01 11        	addi	sp, sp, -0x20
80219ab6: 06 ec        	sd	ra, 0x18(sp)
80219ab8: 22 e8        	sd	s0, 0x10(sp)
80219aba: 00 10        	addi	s0, sp, 0x20
80219abc: 05 45        	li	a0, 0x1
;             Err(e) => Err(From::from(e)),
80219abe: a3 06 a4 fe  	sb	a0, -0x13(s0)
;     }
80219ac2: 03 45 d4 fe  	lbu	a0, -0x13(s0)
80219ac6: e2 60        	ld	ra, 0x18(sp)
80219ac8: 42 64        	ld	s0, 0x10(sp)
80219aca: 05 61        	addi	sp, sp, 0x20
80219acc: 82 80        	ret

0000000080219ace <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6969bb73d218922dE>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
80219ace: 01 11        	addi	sp, sp, -0x20
80219ad0: 06 ec        	sd	ra, 0x18(sp)
80219ad2: 22 e8        	sd	s0, 0x10(sp)
80219ad4: 00 10        	addi	s0, sp, 0x20
80219ad6: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219ada: 23 34 b4 fe  	sd	a1, -0x18(s0)
80219ade: 08 61        	ld	a0, 0x0(a0)
80219ae0: 97 00 00 00  	auipc	ra, 0x0
80219ae4: e7 80 40 1e  	jalr	0x1e4(ra) <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE>
80219ae8: e2 60        	ld	ra, 0x18(sp)
80219aea: 42 64        	ld	s0, 0x10(sp)
80219aec: 05 61        	addi	sp, sp, 0x20
80219aee: 82 80        	ret

0000000080219af0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bc596b2a1c71e82E>:
80219af0: 01 11        	addi	sp, sp, -0x20
80219af2: 06 ec        	sd	ra, 0x18(sp)
80219af4: 22 e8        	sd	s0, 0x10(sp)
80219af6: 00 10        	addi	s0, sp, 0x20
80219af8: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219afc: 23 34 b4 fe  	sd	a1, -0x18(s0)
80219b00: 08 61        	ld	a0, 0x0(a0)
80219b02: 97 00 00 00  	auipc	ra, 0x0
80219b06: e7 80 00 3f  	jalr	0x3f0(ra) <_ZN64_$LT$volatile..Volatile$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc1f0f5bf372f84dE>
80219b0a: e2 60        	ld	ra, 0x18(sp)
80219b0c: 42 64        	ld	s0, 0x10(sp)
80219b0e: 05 61        	addi	sp, sp, 0x20
80219b10: 82 80        	ret

0000000080219b12 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h97d24460b40fdc33E>:
80219b12: 01 11        	addi	sp, sp, -0x20
80219b14: 06 ec        	sd	ra, 0x18(sp)
80219b16: 22 e8        	sd	s0, 0x10(sp)
80219b18: 00 10        	addi	s0, sp, 0x20
80219b1a: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219b1e: 23 34 b4 fe  	sd	a1, -0x18(s0)
80219b22: 08 61        	ld	a0, 0x0(a0)
80219b24: 97 00 00 00  	auipc	ra, 0x0
80219b28: e7 80 e0 11  	jalr	0x11e(ra) <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E>
80219b2c: e2 60        	ld	ra, 0x18(sp)
80219b2e: 42 64        	ld	s0, 0x10(sp)
80219b30: 05 61        	addi	sp, sp, 0x20
80219b32: 82 80        	ret

0000000080219b34 <_ZN4core10intrinsics23is_aligned_and_not_null17he26fb6e3a6ed8750E>:
; pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
80219b34: 75 71        	addi	sp, sp, -0x90
80219b36: 06 e5        	sd	ra, 0x88(sp)
80219b38: 22 e1        	sd	s0, 0x80(sp)
80219b3a: 00 09        	addi	s0, sp, 0x90
80219b3c: 23 3c b4 f6  	sd	a1, -0x88(s0)
80219b40: 23 30 a4 fc  	sd	a0, -0x40(s0)
80219b44: 23 34 b4 fc  	sd	a1, -0x38(s0)
;             const_eval_select((self as *const u8,), const_impl, runtime_impl)
80219b48: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { mem::transmute(self.cast::<()>()) }
80219b4c: aa 85        	mv	a1, a0
80219b4e: 23 30 b4 f8  	sd	a1, -0x80(s0)
;     !ptr.is_null() && ptr.is_aligned_to(align)
80219b52: 11 e5        	bnez	a0, 0x80219b5e <_ZN4core10intrinsics23is_aligned_and_not_null17he26fb6e3a6ed8750E+0x2a>
80219b54: 09 a0        	j	0x80219b56 <_ZN4core10intrinsics23is_aligned_and_not_null17he26fb6e3a6ed8750E+0x22>
80219b56: 01 45        	li	a0, 0x0
;     !ptr.is_null() && ptr.is_aligned_to(align)
80219b58: a3 07 a4 f8  	sb	a0, -0x71(s0)
80219b5c: 85 a8        	j	0x80219bcc <_ZN4core10intrinsics23is_aligned_and_not_null17he26fb6e3a6ed8750E+0x98>
80219b5e: 03 35 84 f7  	ld	a0, -0x88(s0)
;     uint_impl! {
80219b62: 93 55 15 00  	srli	a1, a0, 0x1
80219b66: 37 56 55 55  	lui	a2, 0x55555
80219b6a: 1b 06 56 55  	addiw	a2, a2, 0x555
80219b6e: 93 16 06 02  	slli	a3, a2, 0x20
80219b72: 36 96        	add	a2, a2, a3
80219b74: f1 8d        	and	a1, a1, a2
80219b76: b3 05 b5 40  	sub	a1, a0, a1
80219b7a: 37 35 33 33  	lui	a0, 0x33333
80219b7e: 1b 05 35 33  	addiw	a0, a0, 0x333
80219b82: 13 16 05 02  	slli	a2, a0, 0x20
80219b86: 2a 96        	add	a2, a2, a0
80219b88: 33 f5 c5 00  	and	a0, a1, a2
80219b8c: 89 81        	srli	a1, a1, 0x2
80219b8e: f1 8d        	and	a1, a1, a2
80219b90: 2e 95        	add	a0, a0, a1
80219b92: 93 55 45 00  	srli	a1, a0, 0x4
80219b96: 2e 95        	add	a0, a0, a1
80219b98: b7 15 0f 0f  	lui	a1, 0xf0f1
80219b9c: 9b 85 f5 f0  	addiw	a1, a1, -0xf1
80219ba0: 13 96 05 02  	slli	a2, a1, 0x20
80219ba4: b2 95        	add	a1, a1, a2
80219ba6: 6d 8d        	and	a0, a0, a1
80219ba8: b7 05 01 01  	lui	a1, 0x1010
80219bac: 9b 85 15 10  	addiw	a1, a1, 0x101
80219bb0: 13 96 05 02  	slli	a2, a1, 0x20
80219bb4: b2 95        	add	a1, a1, a2
80219bb6: 33 05 b5 02  	mul	a0, a0, a1
80219bba: 61 91        	srli	a0, a0, 0x38
80219bbc: 23 3c a4 fc  	sd	a0, -0x28(s0)
80219bc0: 03 25 84 fd  	lw	a0, -0x28(s0)
80219bc4: 85 45        	li	a1, 0x1
;         if !align.is_power_of_two() {
80219bc6: 63 09 b5 00  	beq	a0, a1, 0x80219bd8 <_ZN4core10intrinsics23is_aligned_and_not_null17he26fb6e3a6ed8750E+0xa4>
80219bca: 15 a0        	j	0x80219bee <.Lpcrel_hi0>
; }
80219bcc: 03 45 f4 f8  	lbu	a0, -0x71(s0)
80219bd0: aa 60        	ld	ra, 0x88(sp)
80219bd2: 0a 64        	ld	s0, 0x80(sp)
80219bd4: 49 61        	addi	sp, sp, 0x90
80219bd6: 82 80        	ret
80219bd8: 03 35 04 f8  	ld	a0, -0x80(s0)
80219bdc: 83 35 84 f7  	ld	a1, -0x88(s0)
;             ptr.addr() & (align - 1) == 0
80219be0: fd 15        	addi	a1, a1, -0x1
80219be2: 6d 8d        	and	a0, a0, a1
80219be4: 13 35 15 00  	seqz	a0, a0
80219be8: a3 07 a4 f8  	sb	a0, -0x71(s0)
;     !ptr.is_null() && ptr.is_aligned_to(align)
80219bec: c5 b7        	j	0x80219bcc <_ZN4core10intrinsics23is_aligned_and_not_null17he26fb6e3a6ed8750E+0x98>

0000000080219bee <.Lpcrel_hi0>:
;             panic!("is_aligned_to: align is not a power-of-two");
80219bee: 17 e5 01 00  	auipc	a0, 0x1e
80219bf2: 93 05 a5 bc  	addi	a1, a0, -0x436
80219bf6: 23 30 b4 fe  	sd	a1, -0x20(s0)
80219bfa: 05 45        	li	a0, 0x1
80219bfc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
80219c00: 23 38 b4 f8  	sd	a1, -0x70(s0)
80219c04: 23 3c a4 f8  	sd	a0, -0x68(s0)

0000000080219c08 <.Lpcrel_hi1>:
80219c08: 17 95 01 00  	auipc	a0, 0x19
80219c0c: 13 05 85 68  	addi	a0, a0, 0x688
80219c10: 0c 61        	ld	a1, 0x0(a0)
80219c12: 08 65        	ld	a0, 0x8(a0)
80219c14: 23 38 b4 fa  	sd	a1, -0x50(s0)
80219c18: 23 3c a4 fa  	sd	a0, -0x48(s0)

0000000080219c1c <.Lpcrel_hi2>:
80219c1c: 17 e5 01 00  	auipc	a0, 0x1e
80219c20: 13 05 c5 ba  	addi	a0, a0, -0x454
80219c24: 23 30 a4 fa  	sd	a0, -0x60(s0)
80219c28: 01 45        	li	a0, 0x0
80219c2a: 23 34 a4 fa  	sd	a0, -0x58(s0)

0000000080219c2e <.Lpcrel_hi3>:
;             panic!("is_aligned_to: align is not a power-of-two");
80219c2e: 17 e5 01 00  	auipc	a0, 0x1e
80219c32: 93 05 25 c1  	addi	a1, a0, -0x3ee
80219c36: 13 05 04 f9  	addi	a0, s0, -0x70
80219c3a: 97 60 01 00  	auipc	ra, 0x16
80219c3e: e7 80 e0 56  	jalr	0x56e(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080219c42 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E>:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80219c42: 39 71        	addi	sp, sp, -0x40
80219c44: 06 fc        	sd	ra, 0x38(sp)
80219c46: 22 f8        	sd	s0, 0x30(sp)
80219c48: 80 00        	addi	s0, sp, 0x40
80219c4a: 23 34 b4 fc  	sd	a1, -0x38(s0)
80219c4e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80219c52: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219c56: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if f.debug_lower_hex() {
80219c5a: 03 c5 45 03  	lbu	a0, 0x34(a1)
80219c5e: 41 89        	andi	a0, a0, 0x10
80219c60: 11 e9        	bnez	a0, 0x80219c74 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E+0x32>
80219c62: 09 a0        	j	0x80219c64 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E+0x22>
80219c64: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 } else if f.debug_upper_hex() {
80219c68: 03 45 45 03  	lbu	a0, 0x34(a0)
80219c6c: 13 75 05 02  	andi	a0, a0, 0x20
80219c70: 09 cd        	beqz	a0, 0x80219c8a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E+0x48>
80219c72: 3d a0        	j	0x80219ca0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E+0x5e>
80219c74: 83 35 84 fc  	ld	a1, -0x38(s0)
80219c78: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::LowerHex::fmt(self, f)
80219c7c: 97 50 01 00  	auipc	ra, 0x15
80219c80: e7 80 40 17  	jalr	0x174(ra) <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hd5cf8571588553cdE>
80219c84: a3 0f a4 fc  	sb	a0, -0x21(s0)
80219c88: 05 a8        	j	0x80219cb8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E+0x76>
80219c8a: 83 35 84 fc  	ld	a1, -0x38(s0)
80219c8e: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::Display::fmt(self, f)
80219c92: 97 70 01 00  	auipc	ra, 0x17
80219c96: e7 80 a0 3b  	jalr	0x3ba(ra) <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17hfbd06b8f9fd36410E>
80219c9a: a3 0f a4 fc  	sb	a0, -0x21(s0)
80219c9e: 21 a8        	j	0x80219cb6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E+0x74>
80219ca0: 83 35 84 fc  	ld	a1, -0x38(s0)
80219ca4: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::UpperHex::fmt(self, f)
80219ca8: 97 50 01 00  	auipc	ra, 0x15
80219cac: e7 80 a0 1b  	jalr	0x1ba(ra) <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hef912459862fd0f7E>
80219cb0: a3 0f a4 fc  	sb	a0, -0x21(s0)
80219cb4: 09 a0        	j	0x80219cb6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E+0x74>
;                 if f.debug_lower_hex() {
80219cb6: 09 a0        	j	0x80219cb8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h19ed3a48b1c6f6f0E+0x76>
;             }
80219cb8: 03 45 f4 fd  	lbu	a0, -0x21(s0)
80219cbc: e2 70        	ld	ra, 0x38(sp)
80219cbe: 42 74        	ld	s0, 0x30(sp)
80219cc0: 21 61        	addi	sp, sp, 0x40
80219cc2: 82 80        	ret

0000000080219cc4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE>:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
80219cc4: 39 71        	addi	sp, sp, -0x40
80219cc6: 06 fc        	sd	ra, 0x38(sp)
80219cc8: 22 f8        	sd	s0, 0x30(sp)
80219cca: 80 00        	addi	s0, sp, 0x40
80219ccc: 23 34 b4 fc  	sd	a1, -0x38(s0)
80219cd0: 23 38 a4 fc  	sd	a0, -0x30(s0)
80219cd4: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219cd8: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if f.debug_lower_hex() {
80219cdc: 03 c5 45 03  	lbu	a0, 0x34(a1)
80219ce0: 41 89        	andi	a0, a0, 0x10
80219ce2: 11 e9        	bnez	a0, 0x80219cf6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE+0x32>
80219ce4: 09 a0        	j	0x80219ce6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE+0x22>
80219ce6: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 } else if f.debug_upper_hex() {
80219cea: 03 45 45 03  	lbu	a0, 0x34(a0)
80219cee: 13 75 05 02  	andi	a0, a0, 0x20
80219cf2: 09 cd        	beqz	a0, 0x80219d0c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE+0x48>
80219cf4: 3d a0        	j	0x80219d22 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE+0x5e>
80219cf6: 83 35 84 fc  	ld	a1, -0x38(s0)
80219cfa: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::LowerHex::fmt(self, f)
80219cfe: 97 50 01 00  	auipc	ra, 0x15
80219d02: e7 80 60 1d  	jalr	0x1d6(ra) <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h933c609d9d935718E>
80219d06: a3 0f a4 fc  	sb	a0, -0x21(s0)
80219d0a: 05 a8        	j	0x80219d3a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE+0x76>
80219d0c: 83 35 84 fc  	ld	a1, -0x38(s0)
80219d10: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::Display::fmt(self, f)
80219d14: 97 70 01 00  	auipc	ra, 0x17
80219d18: e7 80 a0 36  	jalr	0x36a(ra) <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h25b4b8f7e2ff91dcE>
80219d1c: a3 0f a4 fc  	sb	a0, -0x21(s0)
80219d20: 21 a8        	j	0x80219d38 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE+0x74>
80219d22: 83 35 84 fc  	ld	a1, -0x38(s0)
80219d26: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::UpperHex::fmt(self, f)
80219d2a: 97 50 01 00  	auipc	ra, 0x15
80219d2e: e7 80 a0 21  	jalr	0x21a(ra) <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hed31c89a7b8664afE>
80219d32: a3 0f a4 fc  	sb	a0, -0x21(s0)
80219d36: 09 a0        	j	0x80219d38 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE+0x74>
;                 if f.debug_lower_hex() {
80219d38: 09 a0        	j	0x80219d3a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17haca9d269fa6a3ecaE+0x76>
;             }
80219d3a: 03 45 f4 fd  	lbu	a0, -0x21(s0)
80219d3e: e2 70        	ld	ra, 0x38(sp)
80219d40: 42 74        	ld	s0, 0x30(sp)
80219d42: 21 61        	addi	sp, sp, 0x40
80219d44: 82 80        	ret

0000000080219d46 <_ZN4core3ptr13read_volatile17h4931f61b1b40c6d4E>:
; pub unsafe fn read_volatile<T>(src: *const T) -> T {
80219d46: 79 71        	addi	sp, sp, -0x30
80219d48: 06 f4        	sd	ra, 0x28(sp)
80219d4a: 22 f0        	sd	s0, 0x20(sp)
80219d4c: 00 18        	addi	s0, sp, 0x30
80219d4e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80219d52: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert_unsafe_precondition!(
80219d56: 09 a0        	j	0x80219d58 <_ZN4core3ptr13read_volatile17h4931f61b1b40c6d4E+0x12>
80219d58: 03 35 84 fd  	ld	a0, -0x28(s0)
80219d5c: 91 45        	li	a1, 0x4
;         assert_unsafe_precondition!(
80219d5e: 97 00 00 00  	auipc	ra, 0x0
80219d62: e7 80 00 02  	jalr	0x20(ra) <_ZN4core3ptr13read_volatile18precondition_check17hb2a17267840b4fb8E>
80219d66: 09 a0        	j	0x80219d68 <_ZN4core3ptr13read_volatile17h4931f61b1b40c6d4E+0x22>
80219d68: 03 35 84 fd  	ld	a0, -0x28(s0)
;         intrinsics::volatile_load(src)
80219d6c: 08 41        	lw	a0, 0x0(a0)
80219d6e: 23 26 a4 fe  	sw	a0, -0x14(s0)
; }
80219d72: 03 25 c4 fe  	lw	a0, -0x14(s0)
80219d76: a2 70        	ld	ra, 0x28(sp)
80219d78: 02 74        	ld	s0, 0x20(sp)
80219d7a: 45 61        	addi	sp, sp, 0x30
80219d7c: 82 80        	ret

0000000080219d7e <_ZN4core3ptr13read_volatile18precondition_check17hb2a17267840b4fb8E>:
;             const fn precondition_check($($name:$ty),*) {
80219d7e: 01 11        	addi	sp, sp, -0x20
80219d80: 06 ec        	sd	ra, 0x18(sp)
80219d82: 22 e8        	sd	s0, 0x10(sp)
80219d84: 00 10        	addi	s0, sp, 0x20
80219d86: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219d8a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => is_aligned_and_not_null(addr, align)
80219d8e: 97 00 00 00  	auipc	ra, 0x0
80219d92: e7 80 60 da  	jalr	-0x25a(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17he26fb6e3a6ed8750E>
80219d96: 01 ed        	bnez	a0, 0x80219dae <.Lpcrel_hi4+0x14>
80219d98: 09 a0        	j	0x80219d9a <.Lpcrel_hi4>

0000000080219d9a <.Lpcrel_hi4>:
;                     ::core::panicking::panic_nounwind(
80219d9a: 17 e5 01 00  	auipc	a0, 0x1e
80219d9e: 13 05 e5 ab  	addi	a0, a0, -0x542
80219da2: 93 05 e0 06  	li	a1, 0x6e
80219da6: 97 60 01 00  	auipc	ra, 0x16
80219daa: e7 80 a0 49  	jalr	0x49a(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80219dae: e2 60        	ld	ra, 0x18(sp)
80219db0: 42 64        	ld	s0, 0x10(sp)
;             }
80219db2: 05 61        	addi	sp, sp, 0x20
80219db4: 82 80        	ret

0000000080219db6 <_ZN4core3ptr14write_volatile17h3ab44c6e5116f95cE>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
80219db6: 79 71        	addi	sp, sp, -0x30
80219db8: 06 f4        	sd	ra, 0x28(sp)
80219dba: 22 f0        	sd	s0, 0x20(sp)
80219dbc: 00 18        	addi	s0, sp, 0x30
80219dbe: 23 38 a4 fc  	sd	a0, -0x30(s0)
80219dc2: 2e 86        	mv	a2, a1
80219dc4: 23 3c c4 fc  	sd	a2, -0x28(s0)
80219dc8: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219dcc: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         assert_unsafe_precondition!(
80219dd0: 09 a0        	j	0x80219dd2 <_ZN4core3ptr14write_volatile17h3ab44c6e5116f95cE+0x1c>
80219dd2: 03 35 04 fd  	ld	a0, -0x30(s0)
80219dd6: 91 45        	li	a1, 0x4
;         assert_unsafe_precondition!(
80219dd8: 97 00 00 00  	auipc	ra, 0x0
80219ddc: e7 80 a0 05  	jalr	0x5a(ra) <_ZN4core3ptr14write_volatile18precondition_check17hfc4c88e60f2756b7E>
80219de0: 09 a0        	j	0x80219de2 <_ZN4core3ptr14write_volatile17h3ab44c6e5116f95cE+0x2c>
80219de2: 03 35 84 fd  	ld	a0, -0x28(s0)
80219de6: 83 35 04 fd  	ld	a1, -0x30(s0)
;         intrinsics::volatile_store(dst, src);
80219dea: 88 c1        	sw	a0, 0x0(a1)
80219dec: a2 70        	ld	ra, 0x28(sp)
80219dee: 02 74        	ld	s0, 0x20(sp)
; }
80219df0: 45 61        	addi	sp, sp, 0x30
80219df2: 82 80        	ret

0000000080219df4 <_ZN4core3ptr14write_volatile17h8db1296af16bba8bE>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
80219df4: 79 71        	addi	sp, sp, -0x30
80219df6: 06 f4        	sd	ra, 0x28(sp)
80219df8: 22 f0        	sd	s0, 0x20(sp)
80219dfa: 00 18        	addi	s0, sp, 0x30
80219dfc: 23 38 a4 fc  	sd	a0, -0x30(s0)
80219e00: 2e 86        	mv	a2, a1
80219e02: 23 3c c4 fc  	sd	a2, -0x28(s0)
80219e06: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219e0a: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         assert_unsafe_precondition!(
80219e0e: 09 a0        	j	0x80219e10 <_ZN4core3ptr14write_volatile17h8db1296af16bba8bE+0x1c>
80219e10: 03 35 04 fd  	ld	a0, -0x30(s0)
80219e14: 91 45        	li	a1, 0x4
;         assert_unsafe_precondition!(
80219e16: 97 00 00 00  	auipc	ra, 0x0
80219e1a: e7 80 c0 01  	jalr	0x1c(ra) <_ZN4core3ptr14write_volatile18precondition_check17hfc4c88e60f2756b7E>
80219e1e: 09 a0        	j	0x80219e20 <_ZN4core3ptr14write_volatile17h8db1296af16bba8bE+0x2c>
80219e20: 03 35 84 fd  	ld	a0, -0x28(s0)
80219e24: 83 35 04 fd  	ld	a1, -0x30(s0)
;         intrinsics::volatile_store(dst, src);
80219e28: 88 c1        	sw	a0, 0x0(a1)
80219e2a: a2 70        	ld	ra, 0x28(sp)
80219e2c: 02 74        	ld	s0, 0x20(sp)
; }
80219e2e: 45 61        	addi	sp, sp, 0x30
80219e30: 82 80        	ret

0000000080219e32 <_ZN4core3ptr14write_volatile18precondition_check17hfc4c88e60f2756b7E>:
;             const fn precondition_check($($name:$ty),*) {
80219e32: 01 11        	addi	sp, sp, -0x20
80219e34: 06 ec        	sd	ra, 0x18(sp)
80219e36: 22 e8        	sd	s0, 0x10(sp)
80219e38: 00 10        	addi	s0, sp, 0x20
80219e3a: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219e3e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => is_aligned_and_not_null(addr, align)
80219e42: 97 00 00 00  	auipc	ra, 0x0
80219e46: e7 80 20 cf  	jalr	-0x30e(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17he26fb6e3a6ed8750E>
80219e4a: 01 ed        	bnez	a0, 0x80219e62 <.Lpcrel_hi5+0x14>
80219e4c: 09 a0        	j	0x80219e4e <.Lpcrel_hi5>

0000000080219e4e <.Lpcrel_hi5>:
;                     ::core::panicking::panic_nounwind(
80219e4e: 17 e5 01 00  	auipc	a0, 0x1e
80219e52: 13 05 85 a7  	addi	a0, a0, -0x588
80219e56: 93 05 f0 06  	li	a1, 0x6f
80219e5a: 97 60 01 00  	auipc	ra, 0x16
80219e5e: e7 80 60 3e  	jalr	0x3e6(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80219e62: e2 60        	ld	ra, 0x18(sp)
80219e64: 42 64        	ld	s0, 0x10(sp)
;             }
80219e66: 05 61        	addi	sp, sp, 0x20
80219e68: 82 80        	ret

0000000080219e6a <_ZN4core3ptr28drop_in_place$LT$$RF$u16$GT$17h24a30b535e120286E>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
80219e6a: 01 11        	addi	sp, sp, -0x20
80219e6c: 06 ec        	sd	ra, 0x18(sp)
80219e6e: 22 e8        	sd	s0, 0x10(sp)
80219e70: 00 10        	addi	s0, sp, 0x20
80219e72: 23 34 a4 fe  	sd	a0, -0x18(s0)
80219e76: e2 60        	ld	ra, 0x18(sp)
80219e78: 42 64        	ld	s0, 0x10(sp)
80219e7a: 05 61        	addi	sp, sp, 0x20
80219e7c: 82 80        	ret

0000000080219e7e <_ZN4core3ptr28drop_in_place$LT$$RF$u32$GT$17h03a4e7f9083fbd83E>:
80219e7e: 01 11        	addi	sp, sp, -0x20
80219e80: 06 ec        	sd	ra, 0x18(sp)
80219e82: 22 e8        	sd	s0, 0x10(sp)
80219e84: 00 10        	addi	s0, sp, 0x20
80219e86: 23 34 a4 fe  	sd	a0, -0x18(s0)
80219e8a: e2 60        	ld	ra, 0x18(sp)
80219e8c: 42 64        	ld	s0, 0x10(sp)
80219e8e: 05 61        	addi	sp, sp, 0x20
80219e90: 82 80        	ret

0000000080219e92 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h05c775a15c53e0bcE>:
;     fn into(self) -> U {
80219e92: 01 11        	addi	sp, sp, -0x20
80219e94: 06 ec        	sd	ra, 0x18(sp)
80219e96: 22 e8        	sd	s0, 0x10(sp)
80219e98: 00 10        	addi	s0, sp, 0x20
80219e9a: 23 24 a4 fe  	sw	a0, -0x18(s0)
80219e9e: 23 26 a4 fe  	sw	a0, -0x14(s0)
;                 small as Self
80219ea2: 02 15        	slli	a0, a0, 0x20
80219ea4: 01 91        	srli	a0, a0, 0x20
80219ea6: e2 60        	ld	ra, 0x18(sp)
80219ea8: 42 64        	ld	s0, 0x10(sp)
;     }
80219eaa: 05 61        	addi	sp, sp, 0x20
80219eac: 82 80        	ret

0000000080219eae <_ZN64_$LT$volatile..Volatile$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hf8383e44002c3473E>:
; #[derive(Debug, Default)]
80219eae: 79 71        	addi	sp, sp, -0x30
80219eb0: 06 f4        	sd	ra, 0x28(sp)
80219eb2: 22 f0        	sd	s0, 0x20(sp)
80219eb4: 00 18        	addi	s0, sp, 0x30
80219eb6: 23 38 b4 fc  	sd	a1, -0x30(s0)
80219eba: aa 85        	mv	a1, a0
80219ebc: 03 35 04 fd  	ld	a0, -0x30(s0)
80219ec0: 23 30 b4 fe  	sd	a1, -0x20(s0)
80219ec4: 23 34 a4 fe  	sd	a0, -0x18(s0)
; pub struct Volatile<T: Copy>(T);
80219ec8: 23 3c b4 fc  	sd	a1, -0x28(s0)

0000000080219ecc <.Lpcrel_hi10>:
; #[derive(Debug, Default)]
80219ecc: 97 95 01 00  	auipc	a1, 0x19
80219ed0: 93 85 c5 4d  	addi	a1, a1, 0x4dc

0000000080219ed4 <.Lpcrel_hi11>:
80219ed4: 17 e6 01 00  	auipc	a2, 0x1e
80219ed8: 13 07 46 a6  	addi	a4, a2, -0x59c
80219edc: 21 46        	li	a2, 0x8
80219ede: 93 06 84 fd  	addi	a3, s0, -0x28
80219ee2: 97 60 01 00  	auipc	ra, 0x16
80219ee6: e7 80 20 ce  	jalr	-0x31e(ra) <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>
80219eea: a2 70        	ld	ra, 0x28(sp)
80219eec: 02 74        	ld	s0, 0x20(sp)
80219eee: 45 61        	addi	sp, sp, 0x30
80219ef0: 82 80        	ret

0000000080219ef2 <_ZN64_$LT$volatile..Volatile$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hfc1f0f5bf372f84dE>:
80219ef2: 79 71        	addi	sp, sp, -0x30
80219ef4: 06 f4        	sd	ra, 0x28(sp)
80219ef6: 22 f0        	sd	s0, 0x20(sp)
80219ef8: 00 18        	addi	s0, sp, 0x30
80219efa: 23 38 b4 fc  	sd	a1, -0x30(s0)
80219efe: aa 85        	mv	a1, a0
80219f00: 03 35 04 fd  	ld	a0, -0x30(s0)
80219f04: 23 30 b4 fe  	sd	a1, -0x20(s0)
80219f08: 23 34 a4 fe  	sd	a0, -0x18(s0)
; pub struct Volatile<T: Copy>(T);
80219f0c: 23 3c b4 fc  	sd	a1, -0x28(s0)

0000000080219f10 <.Lpcrel_hi12>:
; #[derive(Debug, Default)]
80219f10: 97 95 01 00  	auipc	a1, 0x19
80219f14: 93 85 85 49  	addi	a1, a1, 0x498

0000000080219f18 <.Lpcrel_hi13>:
80219f18: 17 e6 01 00  	auipc	a2, 0x1e
80219f1c: 13 07 06 a4  	addi	a4, a2, -0x5c0
80219f20: 21 46        	li	a2, 0x8
80219f22: 93 06 84 fd  	addi	a3, s0, -0x28
80219f26: 97 60 01 00  	auipc	ra, 0x16
80219f2a: e7 80 e0 c9  	jalr	-0x362(ra) <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>
80219f2e: a2 70        	ld	ra, 0x28(sp)
80219f30: 02 74        	ld	s0, 0x20(sp)
80219f32: 45 61        	addi	sp, sp, 0x30
80219f34: 82 80        	ret

0000000080219f36 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80219f36: 01 11        	addi	sp, sp, -0x20
80219f38: 06 ec        	sd	ra, 0x18(sp)
80219f3a: 22 e8        	sd	s0, 0x10(sp)
80219f3c: 00 10        	addi	s0, sp, 0x20
80219f3e: 23 06 a4 fe  	sb	a0, -0x14(s0)
;         match self {
80219f42: 03 45 c4 fe  	lbu	a0, -0x14(s0)
80219f46: 05 89        	andi	a0, a0, 0x1
80219f48: 11 e5        	bnez	a0, 0x80219f54 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E+0x1e>
80219f4a: 09 a0        	j	0x80219f4c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E+0x16>
80219f4c: 01 45        	li	a0, 0x0
;             Ok(v) => ControlFlow::Continue(v),
80219f4e: a3 06 a4 fe  	sb	a0, -0x13(s0)
80219f52: 29 a0        	j	0x80219f5c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E+0x26>
80219f54: 05 45        	li	a0, 0x1
;             Err(e) => ControlFlow::Break(Err(e)),
80219f56: a3 06 a4 fe  	sb	a0, -0x13(s0)
80219f5a: 09 a0        	j	0x80219f5c <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E+0x26>
;     }
80219f5c: 03 45 d4 fe  	lbu	a0, -0x13(s0)
80219f60: e2 60        	ld	ra, 0x18(sp)
80219f62: 42 64        	ld	s0, 0x10(sp)
80219f64: 05 61        	addi	sp, sp, 0x20
80219f66: 82 80        	ret

0000000080219f68 <_ZN8volatile17ReadOnly$LT$T$GT$4read17h5c1147aa5909dee9E>:
;     pub fn read(&self) -> T {
80219f68: 01 11        	addi	sp, sp, -0x20
80219f6a: 06 ec        	sd	ra, 0x18(sp)
80219f6c: 22 e8        	sd	s0, 0x10(sp)
80219f6e: 00 10        	addi	s0, sp, 0x20
80219f70: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0.read()
80219f74: 97 00 00 00  	auipc	ra, 0x0
80219f78: e7 80 00 01  	jalr	0x10(ra) <_ZN8volatile17Volatile$LT$T$GT$4read17h723ac65cf741bdfeE>
80219f7c: e2 60        	ld	ra, 0x18(sp)
80219f7e: 42 64        	ld	s0, 0x10(sp)
;     }
80219f80: 05 61        	addi	sp, sp, 0x20
80219f82: 82 80        	ret

0000000080219f84 <_ZN8volatile17Volatile$LT$T$GT$4read17h723ac65cf741bdfeE>:
;     pub fn read(&self) -> T {
80219f84: 01 11        	addi	sp, sp, -0x20
80219f86: 06 ec        	sd	ra, 0x18(sp)
80219f88: 22 e8        	sd	s0, 0x10(sp)
80219f8a: 00 10        	addi	s0, sp, 0x20
80219f8c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { ptr::read_volatile(&self.0) }
80219f90: 97 00 00 00  	auipc	ra, 0x0
80219f94: e7 80 60 db  	jalr	-0x24a(ra) <_ZN4core3ptr13read_volatile17h4931f61b1b40c6d4E>
80219f98: e2 60        	ld	ra, 0x18(sp)
80219f9a: 42 64        	ld	s0, 0x10(sp)
;     }
80219f9c: 05 61        	addi	sp, sp, 0x20
80219f9e: 82 80        	ret

0000000080219fa0 <_ZN8volatile17Volatile$LT$T$GT$5write17h2428a8b44f0d1264E>:
;     pub fn write(&mut self, value: T) {
80219fa0: 01 11        	addi	sp, sp, -0x20
80219fa2: 06 ec        	sd	ra, 0x18(sp)
80219fa4: 22 e8        	sd	s0, 0x10(sp)
80219fa6: 00 10        	addi	s0, sp, 0x20
80219fa8: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219fac: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         unsafe { ptr::write_volatile(&mut self.0, value) };
80219fb0: 97 00 00 00  	auipc	ra, 0x0
80219fb4: e7 80 40 e4  	jalr	-0x1bc(ra) <_ZN4core3ptr14write_volatile17h8db1296af16bba8bE>
80219fb8: e2 60        	ld	ra, 0x18(sp)
80219fba: 42 64        	ld	s0, 0x10(sp)
;     }
80219fbc: 05 61        	addi	sp, sp, 0x20
80219fbe: 82 80        	ret

0000000080219fc0 <_ZN8volatile17Volatile$LT$T$GT$5write17h98adde7dee18a555E>:
;     pub fn write(&mut self, value: T) {
80219fc0: 01 11        	addi	sp, sp, -0x20
80219fc2: 06 ec        	sd	ra, 0x18(sp)
80219fc4: 22 e8        	sd	s0, 0x10(sp)
80219fc6: 00 10        	addi	s0, sp, 0x20
80219fc8: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219fcc: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         unsafe { ptr::write_volatile(&mut self.0, value) };
80219fd0: 97 00 00 00  	auipc	ra, 0x0
80219fd4: e7 80 60 de  	jalr	-0x21a(ra) <_ZN4core3ptr14write_volatile17h3ab44c6e5116f95cE>
80219fd8: e2 60        	ld	ra, 0x18(sp)
80219fda: 42 64        	ld	s0, 0x10(sp)
;     }
80219fdc: 05 61        	addi	sp, sp, 0x20
80219fde: 82 80        	ret

0000000080219fe0 <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>:
;     pub fn write(&mut self, value: T) {
80219fe0: 01 11        	addi	sp, sp, -0x20
80219fe2: 06 ec        	sd	ra, 0x18(sp)
80219fe4: 22 e8        	sd	s0, 0x10(sp)
80219fe6: 00 10        	addi	s0, sp, 0x20
80219fe8: 23 30 a4 fe  	sd	a0, -0x20(s0)
80219fec: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         self.0.write(value)
80219ff0: 97 00 00 00  	auipc	ra, 0x0
80219ff4: e7 80 00 fb  	jalr	-0x50(ra) <_ZN8volatile17Volatile$LT$T$GT$5write17h2428a8b44f0d1264E>
80219ff8: e2 60        	ld	ra, 0x18(sp)
80219ffa: 42 64        	ld	s0, 0x10(sp)
;     }
80219ffc: 05 61        	addi	sp, sp, 0x20
80219ffe: 82 80        	ret

000000008021a000 <_ZN14virtio_drivers6header12VirtIOHeader11finish_init17h596a8f2f838090aeE>:
;     pub fn finish_init(&mut self) {
8021a000: 01 11        	addi	sp, sp, -0x20
8021a002: 06 ec        	sd	ra, 0x18(sp)
8021a004: 22 e8        	sd	s0, 0x10(sp)
8021a006: 00 10        	addi	s0, sp, 0x20
8021a008: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.status.write(DeviceStatus::DRIVER_OK);
8021a00c: 13 05 05 07  	addi	a0, a0, 0x70
8021a010: 91 45        	li	a1, 0x4
8021a012: 97 00 00 00  	auipc	ra, 0x0
8021a016: e7 80 e0 fa  	jalr	-0x52(ra) <_ZN8volatile17Volatile$LT$T$GT$5write17h98adde7dee18a555E>
8021a01a: e2 60        	ld	ra, 0x18(sp)
8021a01c: 42 64        	ld	s0, 0x10(sp)
;     }
8021a01e: 05 61        	addi	sp, sp, 0x20
8021a020: 82 80        	ret

000000008021a022 <_ZN14virtio_drivers6header12VirtIOHeader20read_device_features17he43839aba792c0cdE>:
;     fn read_device_features(&mut self) -> u64 {
8021a022: 39 71        	addi	sp, sp, -0x40
8021a024: 06 fc        	sd	ra, 0x38(sp)
8021a026: 22 f8        	sd	s0, 0x30(sp)
8021a028: 80 00        	addi	s0, sp, 0x40
8021a02a: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021a02e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.device_features_sel.write(0); // device features [0, 32)
8021a032: 51 05        	addi	a0, a0, 0x14
8021a034: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021a038: 81 45        	li	a1, 0x0
8021a03a: 97 00 00 00  	auipc	ra, 0x0
8021a03e: e7 80 60 fa  	jalr	-0x5a(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a042: 03 35 04 fc  	ld	a0, -0x40(s0)
;         let mut device_features_bits = self.device_features.read().into();
8021a046: 41 05        	addi	a0, a0, 0x10
8021a048: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021a04c: 97 00 00 00  	auipc	ra, 0x0
8021a050: e7 80 c0 f1  	jalr	-0xe4(ra) <_ZN8volatile17ReadOnly$LT$T$GT$4read17h5c1147aa5909dee9E>

000000008021a054 <.Lpcrel_hi20>:
8021a054: 97 e5 01 00  	auipc	a1, 0x1e
8021a058: 93 85 c5 97  	addi	a1, a1, -0x684
8021a05c: 97 00 00 00  	auipc	ra, 0x0
8021a060: e7 80 60 e3  	jalr	-0x1ca(ra) <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h05c775a15c53e0bcE>
8021a064: aa 85        	mv	a1, a0
8021a066: 03 35 84 fc  	ld	a0, -0x38(s0)
8021a06a: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021a06e: 85 45        	li	a1, 0x1
;         self.device_features_sel.write(1); // device features [32, 64)
8021a070: 97 00 00 00  	auipc	ra, 0x0
8021a074: e7 80 00 f7  	jalr	-0x90(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a078: 03 35 04 fd  	ld	a0, -0x30(s0)
;         device_features_bits += (self.device_features.read() as u64) << 32;
8021a07c: 97 00 00 00  	auipc	ra, 0x0
8021a080: e7 80 c0 ee  	jalr	-0x114(ra) <_ZN8volatile17ReadOnly$LT$T$GT$4read17h5c1147aa5909dee9E>
8021a084: 02 15        	slli	a0, a0, 0x20
8021a086: 83 35 04 fe  	ld	a1, -0x20(s0)
8021a08a: 2e 95        	add	a0, a0, a1
8021a08c: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021a090: 63 6d b5 00  	bltu	a0, a1, 0x8021a0aa <.Lpcrel_hi21>
8021a094: 09 a0        	j	0x8021a096 <.Lpcrel_hi20+0x42>
8021a096: 03 35 84 fd  	ld	a0, -0x28(s0)
;         device_features_bits += (self.device_features.read() as u64) << 32;
8021a09a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         device_features_bits
8021a09e: 03 35 04 fe  	ld	a0, -0x20(s0)
8021a0a2: e2 70        	ld	ra, 0x38(sp)
8021a0a4: 42 74        	ld	s0, 0x30(sp)
;     }
8021a0a6: 21 61        	addi	sp, sp, 0x40
8021a0a8: 82 80        	ret

000000008021a0aa <.Lpcrel_hi21>:
;         device_features_bits += (self.device_features.read() as u64) << 32;
8021a0aa: 17 e5 01 00  	auipc	a0, 0x1e
8021a0ae: 13 05 65 95  	addi	a0, a0, -0x6aa

000000008021a0b2 <.Lpcrel_hi22>:
8021a0b2: 97 e5 01 00  	auipc	a1, 0x1e
8021a0b6: 13 86 65 93  	addi	a2, a1, -0x6ca
8021a0ba: f1 45        	li	a1, 0x1c
8021a0bc: 97 60 01 00  	auipc	ra, 0x16
8021a0c0: e7 80 c0 15  	jalr	0x15c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021a0c4 <_ZN14virtio_drivers6header12VirtIOHeader21write_driver_features17hb6ab0db3a3c0da05E>:
;     fn write_driver_features(&mut self, driver_features: u64) {
8021a0c4: 39 71        	addi	sp, sp, -0x40
8021a0c6: 06 fc        	sd	ra, 0x38(sp)
8021a0c8: 22 f8        	sd	s0, 0x30(sp)
8021a0ca: 80 00        	addi	s0, sp, 0x40
8021a0cc: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021a0d0: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021a0d4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021a0d8: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.driver_features_sel.write(0); // driver features [0, 32)
8021a0dc: 13 05 45 02  	addi	a0, a0, 0x24
8021a0e0: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021a0e4: 81 45        	li	a1, 0x0
8021a0e6: 97 00 00 00  	auipc	ra, 0x0
8021a0ea: e7 80 a0 ef  	jalr	-0x106(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a0ee: 03 35 04 fc  	ld	a0, -0x40(s0)
8021a0f2: 83 35 04 fd  	ld	a1, -0x30(s0)
;         self.driver_features.write(driver_features as u32);
8021a0f6: 13 05 05 02  	addi	a0, a0, 0x20
8021a0fa: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021a0fe: 97 00 00 00  	auipc	ra, 0x0
8021a102: e7 80 20 ee  	jalr	-0x11e(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a106: 03 35 84 fc  	ld	a0, -0x38(s0)
8021a10a: 85 45        	li	a1, 0x1
;         self.driver_features_sel.write(1); // driver features [32, 64)
8021a10c: 97 00 00 00  	auipc	ra, 0x0
8021a110: e7 80 40 ed  	jalr	-0x12c(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a114: 83 35 04 fd  	ld	a1, -0x30(s0)
8021a118: 03 35 84 fd  	ld	a0, -0x28(s0)
;         self.driver_features.write((driver_features >> 32) as u32);
8021a11c: 81 91        	srli	a1, a1, 0x20
8021a11e: 97 00 00 00  	auipc	ra, 0x0
8021a122: e7 80 20 ec  	jalr	-0x13e(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a126: e2 70        	ld	ra, 0x38(sp)
8021a128: 42 74        	ld	s0, 0x30(sp)
;     }
8021a12a: 21 61        	addi	sp, sp, 0x40
8021a12c: 82 80        	ret

000000008021a12e <_ZN14virtio_drivers6header12VirtIOHeader9queue_set17h08d3929779f948acE>:
;     pub fn queue_set(&mut self, queue: u32, size: u32, align: u32, pfn: u32) {
8021a12e: 5d 71        	addi	sp, sp, -0x50
8021a130: 86 e4        	sd	ra, 0x48(sp)
8021a132: a2 e0        	sd	s0, 0x40(sp)
8021a134: 80 08        	addi	s0, sp, 0x50
8021a136: 23 38 e4 fc  	sd	a4, -0x30(s0)
8021a13a: 23 30 d4 fc  	sd	a3, -0x40(s0)
8021a13e: 23 3c c4 fa  	sd	a2, -0x48(s0)
8021a142: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021a146: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021a14a: 23 20 b4 fe  	sw	a1, -0x20(s0)
8021a14e: 23 22 c4 fe  	sw	a2, -0x1c(s0)
8021a152: 23 24 d4 fe  	sw	a3, -0x18(s0)
8021a156: 23 26 e4 fe  	sw	a4, -0x14(s0)
;         self.queue_sel.write(queue);
8021a15a: 13 05 05 03  	addi	a0, a0, 0x30
8021a15e: 97 00 00 00  	auipc	ra, 0x0
8021a162: e7 80 20 e8  	jalr	-0x17e(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a166: 83 35 84 fb  	ld	a1, -0x48(s0)
8021a16a: 03 35 84 fc  	ld	a0, -0x38(s0)
;         self.queue_num.write(size);
8021a16e: 13 05 85 03  	addi	a0, a0, 0x38
8021a172: 97 00 00 00  	auipc	ra, 0x0
8021a176: e7 80 e0 e6  	jalr	-0x192(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a17a: 83 35 04 fc  	ld	a1, -0x40(s0)
8021a17e: 03 35 84 fc  	ld	a0, -0x38(s0)
;         self.queue_align.write(align);
8021a182: 13 05 c5 03  	addi	a0, a0, 0x3c
8021a186: 97 00 00 00  	auipc	ra, 0x0
8021a18a: e7 80 a0 e5  	jalr	-0x1a6(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a18e: 03 35 84 fc  	ld	a0, -0x38(s0)
8021a192: 83 35 04 fd  	ld	a1, -0x30(s0)
;         self.queue_pfn.write(pfn);
8021a196: 13 05 05 04  	addi	a0, a0, 0x40
8021a19a: 97 00 00 00  	auipc	ra, 0x0
8021a19e: e7 80 60 e0  	jalr	-0x1fa(ra) <_ZN8volatile17Volatile$LT$T$GT$5write17h2428a8b44f0d1264E>
8021a1a2: a6 60        	ld	ra, 0x48(sp)
8021a1a4: 06 64        	ld	s0, 0x40(sp)
;     }
8021a1a6: 61 61        	addi	sp, sp, 0x50
8021a1a8: 82 80        	ret

000000008021a1aa <_ZN14virtio_drivers6header12VirtIOHeader26queue_physical_page_number17h5f5251f6dede8501E>:
;     pub fn queue_physical_page_number(&mut self, queue: u32) -> u32 {
8021a1aa: 79 71        	addi	sp, sp, -0x30
8021a1ac: 06 f4        	sd	ra, 0x28(sp)
8021a1ae: 22 f0        	sd	s0, 0x20(sp)
8021a1b0: 00 18        	addi	s0, sp, 0x30
8021a1b2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021a1b6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021a1ba: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         self.queue_sel.write(queue);
8021a1be: 13 05 05 03  	addi	a0, a0, 0x30
8021a1c2: 97 00 00 00  	auipc	ra, 0x0
8021a1c6: e7 80 e0 e1  	jalr	-0x1e2(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a1ca: 03 35 84 fd  	ld	a0, -0x28(s0)
;         self.queue_pfn.read()
8021a1ce: 13 05 05 04  	addi	a0, a0, 0x40
8021a1d2: 97 00 00 00  	auipc	ra, 0x0
8021a1d6: e7 80 20 db  	jalr	-0x24e(ra) <_ZN8volatile17Volatile$LT$T$GT$4read17h723ac65cf741bdfeE>
8021a1da: a2 70        	ld	ra, 0x28(sp)
8021a1dc: 02 74        	ld	s0, 0x20(sp)
;     }
8021a1de: 45 61        	addi	sp, sp, 0x30
8021a1e0: 82 80        	ret

000000008021a1e2 <_ZN14virtio_drivers6header12VirtIOHeader10queue_used17h69a7c10f25ca91deE>:
;     pub fn queue_used(&mut self, queue: u32) -> bool {
8021a1e2: 01 11        	addi	sp, sp, -0x20
8021a1e4: 06 ec        	sd	ra, 0x18(sp)
8021a1e6: 22 e8        	sd	s0, 0x10(sp)
8021a1e8: 00 10        	addi	s0, sp, 0x20
8021a1ea: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021a1ee: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         self.queue_physical_page_number(queue) != 0
8021a1f2: 97 00 00 00  	auipc	ra, 0x0
8021a1f6: e7 80 80 fb  	jalr	-0x48(ra) <_ZN14virtio_drivers6header12VirtIOHeader26queue_physical_page_number17h5f5251f6dede8501E>
8021a1fa: 01 25        	sext.w	a0, a0
8021a1fc: 33 35 a0 00  	snez	a0, a0
8021a200: e2 60        	ld	ra, 0x18(sp)
8021a202: 42 64        	ld	s0, 0x10(sp)
;     }
8021a204: 05 61        	addi	sp, sp, 0x20
8021a206: 82 80        	ret

000000008021a208 <_ZN14virtio_drivers6header12VirtIOHeader14max_queue_size17hd0e0465849e20f14E>:
;     pub fn max_queue_size(&self) -> u32 {
8021a208: 01 11        	addi	sp, sp, -0x20
8021a20a: 06 ec        	sd	ra, 0x18(sp)
8021a20c: 22 e8        	sd	s0, 0x10(sp)
8021a20e: 00 10        	addi	s0, sp, 0x20
8021a210: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.queue_num_max.read()
8021a214: 13 05 45 03  	addi	a0, a0, 0x34
8021a218: 97 00 00 00  	auipc	ra, 0x0
8021a21c: e7 80 00 d5  	jalr	-0x2b0(ra) <_ZN8volatile17ReadOnly$LT$T$GT$4read17h5c1147aa5909dee9E>
8021a220: e2 60        	ld	ra, 0x18(sp)
8021a222: 42 64        	ld	s0, 0x10(sp)
;     }
8021a224: 05 61        	addi	sp, sp, 0x20
8021a226: 82 80        	ret

000000008021a228 <_ZN14virtio_drivers6header12VirtIOHeader6notify17h0213b16fad05b0e7E>:
;     pub fn notify(&mut self, queue: u32) {
8021a228: 01 11        	addi	sp, sp, -0x20
8021a22a: 06 ec        	sd	ra, 0x18(sp)
8021a22c: 22 e8        	sd	s0, 0x10(sp)
8021a22e: 00 10        	addi	s0, sp, 0x20
8021a230: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021a234: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         self.queue_notify.write(queue);
8021a238: 13 05 05 05  	addi	a0, a0, 0x50
8021a23c: 97 00 00 00  	auipc	ra, 0x0
8021a240: e7 80 40 da  	jalr	-0x25c(ra) <_ZN8volatile18WriteOnly$LT$T$GT$5write17he92055d4fc3caf10E>
8021a244: e2 60        	ld	ra, 0x18(sp)
8021a246: 42 64        	ld	s0, 0x10(sp)
;     }
8021a248: 05 61        	addi	sp, sp, 0x20
8021a24a: 82 80        	ret

000000008021a24c <_ZN14virtio_drivers6header12VirtIOHeader12config_space17h63554b89a921cbbbE>:
;     pub fn config_space(&self) -> *mut u64 {
8021a24c: 01 11        	addi	sp, sp, -0x20
8021a24e: 06 ec        	sd	ra, 0x18(sp)
8021a250: 22 e8        	sd	s0, 0x10(sp)
8021a252: 00 10        	addi	s0, sp, 0x20
8021a254: aa 85        	mv	a1, a0
8021a256: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         (self as *const _ as usize + CONFIG_SPACE_OFFSET) as _
8021a25a: 13 85 05 10  	addi	a0, a1, 0x100
8021a25e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021a262: 63 69 b5 00  	bltu	a0, a1, 0x8021a274 <.Lpcrel_hi23>
8021a266: 09 a0        	j	0x8021a268 <_ZN14virtio_drivers6header12VirtIOHeader12config_space17h63554b89a921cbbbE+0x1c>
8021a268: 03 35 04 fe  	ld	a0, -0x20(s0)
8021a26c: e2 60        	ld	ra, 0x18(sp)
8021a26e: 42 64        	ld	s0, 0x10(sp)
;     }
8021a270: 05 61        	addi	sp, sp, 0x20
8021a272: 82 80        	ret

000000008021a274 <.Lpcrel_hi23>:
;         (self as *const _ as usize + CONFIG_SPACE_OFFSET) as _
8021a274: 17 d5 01 00  	auipc	a0, 0x1d
8021a278: 13 05 c5 78  	addi	a0, a0, 0x78c

000000008021a27c <.Lpcrel_hi24>:
8021a27c: 97 d5 01 00  	auipc	a1, 0x1d
8021a280: 13 86 45 7a  	addi	a2, a1, 0x7a4
8021a284: f1 45        	li	a1, 0x1c
8021a286: 97 60 01 00  	auipc	ra, 0x16
8021a28a: e7 80 20 f9  	jalr	-0x6e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021a28e <_ZN14virtio_drivers5queue15VirtQueueLayout3new17hc96b76ce604eb761E>:
;     fn new(queue_size: u16) -> Self {
8021a28e: 71 71        	addi	sp, sp, -0xb0
8021a290: 06 f5        	sd	ra, 0xa8(sp)
8021a292: 22 f1        	sd	s0, 0xa0(sp)
8021a294: 00 19        	addi	s0, sp, 0xb0
8021a296: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021a29a: 2e 85        	mv	a0, a1
8021a29c: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021a2a0: 23 13 b4 fc  	sh	a1, -0x3a(s0)
8021a2a4: 23 16 b4 fe  	sh	a1, -0x14(s0)
;             intrinsics::ctpop(self as $ActualT) as u32
8021a2a8: 13 d5 15 00  	srli	a0, a1, 0x1
8021a2ac: 15 66        	lui	a2, 0x5
8021a2ae: 1b 06 56 55  	addiw	a2, a2, 0x555
8021a2b2: 71 8d        	and	a0, a0, a2
8021a2b4: 89 8d        	sub	a1, a1, a0
8021a2b6: 0d 65        	lui	a0, 0x3
8021a2b8: 1b 06 35 33  	addiw	a2, a0, 0x333
8021a2bc: 33 f5 c5 00  	and	a0, a1, a2
8021a2c0: 89 81        	srli	a1, a1, 0x2
8021a2c2: f1 8d        	and	a1, a1, a2
8021a2c4: 2e 95        	add	a0, a0, a1
8021a2c6: 93 55 45 00  	srli	a1, a0, 0x4
8021a2ca: a9 9d        	addw	a1, a1, a0
8021a2cc: 13 f5 f5 00  	andi	a0, a1, 0xf
8021a2d0: d2 15        	slli	a1, a1, 0x34
8021a2d2: f1 91        	srli	a1, a1, 0x3c
8021a2d4: 2d 9d        	addw	a0, a0, a1
8021a2d6: 23 17 a4 fe  	sh	a0, -0x12(s0)
8021a2da: 03 55 e4 fe  	lhu	a0, -0x12(s0)
8021a2de: 85 45        	li	a1, 0x1
;             queue_size.is_power_of_two(),
8021a2e0: 63 01 b5 02  	beq	a0, a1, 0x8021a302 <.Lpcrel_hi26+0x14>
8021a2e4: 09 a0        	j	0x8021a2e6 <.Lpcrel_hi25>

000000008021a2e6 <.Lpcrel_hi25>:
;         assert!(
8021a2e6: 17 d5 01 00  	auipc	a0, 0x1d
8021a2ea: 13 05 25 75  	addi	a0, a0, 0x752

000000008021a2ee <.Lpcrel_hi26>:
8021a2ee: 97 d5 01 00  	auipc	a1, 0x1d
8021a2f2: 13 86 25 7c  	addi	a2, a1, 0x7c2
8021a2f6: 93 05 10 02  	li	a1, 0x21
8021a2fa: 97 60 01 00  	auipc	ra, 0x16
8021a2fe: e7 80 e0 f1  	jalr	-0xe2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021a302: 03 35 84 fb  	ld	a0, -0x48(s0)
;         let queue_size = queue_size as usize;
8021a306: 42 15        	slli	a0, a0, 0x30
8021a308: 41 91        	srli	a0, a0, 0x30
8021a30a: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021a30e: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         let desc = size_of::<Descriptor>() * queue_size;
8021a312: 12 05        	slli	a0, a0, 0x4
8021a314: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021a318: 01 45        	li	a0, 0x0
8021a31a: 19 ed        	bnez	a0, 0x8021a338 <.Lpcrel_hi27>
8021a31c: 09 a0        	j	0x8021a31e <.Lpcrel_hi26+0x30>
8021a31e: 83 35 04 fa  	ld	a1, -0x60(s0)
8021a322: 03 35 84 fa  	ld	a0, -0x58(s0)
;         let desc = size_of::<Descriptor>() * queue_size;
8021a326: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         let avail = size_of::<u16>() * (3 + queue_size);
8021a32a: 13 85 35 00  	addi	a0, a1, 0x3
8021a32e: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021a332: 63 6a b5 02  	bltu	a0, a1, 0x8021a366 <.Lpcrel_hi29>
8021a336: 39 a8        	j	0x8021a354 <.Lpcrel_hi28+0x14>

000000008021a338 <.Lpcrel_hi27>:
;         let desc = size_of::<Descriptor>() * queue_size;
8021a338: 17 d5 01 00  	auipc	a0, 0x1d
8021a33c: 13 05 85 7a  	addi	a0, a0, 0x7a8

000000008021a340 <.Lpcrel_hi28>:
8021a340: 97 d5 01 00  	auipc	a1, 0x1d
8021a344: 13 86 85 78  	addi	a2, a1, 0x788
8021a348: 93 05 10 02  	li	a1, 0x21
8021a34c: 97 60 01 00  	auipc	ra, 0x16
8021a350: e7 80 c0 ec  	jalr	-0x134(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021a354: 83 35 84 f9  	ld	a1, -0x68(s0)
;         let avail = size_of::<u16>() * (3 + queue_size);
8021a358: 33 85 b5 00  	add	a0, a1, a1
8021a35c: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021a360: 63 6a b5 02  	bltu	a0, a1, 0x8021a394 <.Lpcrel_hi31>
8021a364: 31 a8        	j	0x8021a380 <.Lpcrel_hi30+0x12>

000000008021a366 <.Lpcrel_hi29>:
8021a366: 17 d5 01 00  	auipc	a0, 0x1d
8021a36a: 13 05 a5 69  	addi	a0, a0, 0x69a

000000008021a36e <.Lpcrel_hi30>:
8021a36e: 97 d5 01 00  	auipc	a1, 0x1d
8021a372: 13 86 a5 79  	addi	a2, a1, 0x79a
8021a376: f1 45        	li	a1, 0x1c
8021a378: 97 60 01 00  	auipc	ra, 0x16
8021a37c: e7 80 00 ea  	jalr	-0x160(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021a380: 03 35 04 f9  	ld	a0, -0x70(s0)
;         let avail = size_of::<u16>() * (3 + queue_size);
8021a384: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021a388: 19 45        	li	a0, 0x6
8021a38a: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021a38e: 01 45        	li	a0, 0x0
;         let used = size_of::<u16>() * 3 + size_of::<UsedElem>() * queue_size;
8021a390: 05 ed        	bnez	a0, 0x8021a3c8 <.Lpcrel_hi33>
8021a392: 39 a8        	j	0x8021a3b0 <.Lpcrel_hi32+0x14>

000000008021a394 <.Lpcrel_hi31>:
;         let avail = size_of::<u16>() * (3 + queue_size);
8021a394: 17 d5 01 00  	auipc	a0, 0x1d
8021a398: 13 05 c5 74  	addi	a0, a0, 0x74c

000000008021a39c <.Lpcrel_hi32>:
8021a39c: 97 d5 01 00  	auipc	a1, 0x1d
8021a3a0: 13 86 45 78  	addi	a2, a1, 0x784
8021a3a4: 93 05 10 02  	li	a1, 0x21
8021a3a8: 97 60 01 00  	auipc	ra, 0x16
8021a3ac: e7 80 00 e7  	jalr	-0x190(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021a3b0: 83 35 04 fa  	ld	a1, -0x60(s0)
;         let used = size_of::<u16>() * 3 + size_of::<UsedElem>() * queue_size;
8021a3b4: 13 95 35 00  	slli	a0, a1, 0x3
8021a3b8: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021a3bc: 13 95 35 00  	slli	a0, a1, 0x3
8021a3c0: 0d 81        	srli	a0, a0, 0x3
8021a3c2: 63 1b b5 02  	bne	a0, a1, 0x8021a3f8 <.Lpcrel_hi35>
8021a3c6: 39 a8        	j	0x8021a3e4 <.Lpcrel_hi34+0x14>

000000008021a3c8 <.Lpcrel_hi33>:
8021a3c8: 17 d5 01 00  	auipc	a0, 0x1d
8021a3cc: 13 05 85 71  	addi	a0, a0, 0x718

000000008021a3d0 <.Lpcrel_hi34>:
8021a3d0: 97 d5 01 00  	auipc	a1, 0x1d
8021a3d4: 13 86 85 76  	addi	a2, a1, 0x768
8021a3d8: 93 05 10 02  	li	a1, 0x21
8021a3dc: 97 60 01 00  	auipc	ra, 0x16
8021a3e0: e7 80 c0 e3  	jalr	-0x1c4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021a3e4: 83 35 84 f8  	ld	a1, -0x78(s0)
8021a3e8: 03 35 04 f8  	ld	a0, -0x80(s0)
;         let used = size_of::<u16>() * 3 + size_of::<UsedElem>() * queue_size;
8021a3ec: 2e 95        	add	a0, a0, a1
8021a3ee: 23 3c a4 f6  	sd	a0, -0x88(s0)
8021a3f2: 63 6f b5 02  	bltu	a0, a1, 0x8021a430 <.Lpcrel_hi37>
8021a3f6: 39 a8        	j	0x8021a414 <.Lpcrel_hi36+0x14>

000000008021a3f8 <.Lpcrel_hi35>:
8021a3f8: 17 d5 01 00  	auipc	a0, 0x1d
8021a3fc: 13 05 85 6e  	addi	a0, a0, 0x6e8

000000008021a400 <.Lpcrel_hi36>:
8021a400: 97 d5 01 00  	auipc	a1, 0x1d
8021a404: 13 86 05 75  	addi	a2, a1, 0x750
8021a408: 93 05 10 02  	li	a1, 0x21
8021a40c: 97 60 01 00  	auipc	ra, 0x16
8021a410: e7 80 c0 e0  	jalr	-0x1f4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021a414: 83 35 84 fa  	ld	a1, -0x58(s0)
8021a418: 03 35 04 f9  	ld	a0, -0x70(s0)
8021a41c: 03 36 84 f7  	ld	a2, -0x88(s0)
;         let used = size_of::<u16>() * 3 + size_of::<UsedElem>() * queue_size;
8021a420: 23 30 c4 fe  	sd	a2, -0x20(s0)
;             used_offset: align_up(desc + avail),
8021a424: 2e 95        	add	a0, a0, a1
8021a426: 23 38 a4 f6  	sd	a0, -0x90(s0)
8021a42a: 63 63 b5 04  	bltu	a0, a1, 0x8021a470 <.Lpcrel_hi39>
8021a42e: 31 a8        	j	0x8021a44a <.Lpcrel_hi38+0x12>

000000008021a430 <.Lpcrel_hi37>:
;         let used = size_of::<u16>() * 3 + size_of::<UsedElem>() * queue_size;
8021a430: 17 d5 01 00  	auipc	a0, 0x1d
8021a434: 13 05 05 5d  	addi	a0, a0, 0x5d0

000000008021a438 <.Lpcrel_hi38>:
8021a438: 97 d5 01 00  	auipc	a1, 0x1d
8021a43c: 13 86 05 70  	addi	a2, a1, 0x700
8021a440: f1 45        	li	a1, 0x1c
8021a442: 97 60 01 00  	auipc	ra, 0x16
8021a446: e7 80 60 dd  	jalr	-0x22a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021a44a: 03 35 04 f7  	ld	a0, -0x90(s0)
;             used_offset: align_up(desc + avail),
8021a44e: 97 00 00 00  	auipc	ra, 0x0
8021a452: e7 80 c0 0b  	jalr	0xbc(ra) <_ZN14virtio_drivers8align_up17he7951ac681e4b74fE>
8021a456: 83 35 84 fa  	ld	a1, -0x58(s0)
8021a45a: 2a 86        	mv	a2, a0
8021a45c: 03 35 04 f9  	ld	a0, -0x70(s0)
8021a460: 23 30 c4 f6  	sd	a2, -0xa0(s0)
;             size: align_up(desc + avail) + align_up(used),
8021a464: 2e 95        	add	a0, a0, a1
8021a466: 23 34 a4 f6  	sd	a0, -0x98(s0)
8021a46a: 63 67 b5 04  	bltu	a0, a1, 0x8021a4b8 <.Lpcrel_hi41>
8021a46e: 31 a8        	j	0x8021a48a <.Lpcrel_hi40+0x12>

000000008021a470 <.Lpcrel_hi39>:
;             used_offset: align_up(desc + avail),
8021a470: 17 d5 01 00  	auipc	a0, 0x1d
8021a474: 13 05 05 59  	addi	a0, a0, 0x590

000000008021a478 <.Lpcrel_hi40>:
8021a478: 97 d5 01 00  	auipc	a1, 0x1d
8021a47c: 13 86 05 6f  	addi	a2, a1, 0x6f0
8021a480: f1 45        	li	a1, 0x1c
8021a482: 97 60 01 00  	auipc	ra, 0x16
8021a486: e7 80 60 d9  	jalr	-0x26a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021a48a: 03 35 84 f6  	ld	a0, -0x98(s0)
;             size: align_up(desc + avail) + align_up(used),
8021a48e: 97 00 00 00  	auipc	ra, 0x0
8021a492: e7 80 c0 07  	jalr	0x7c(ra) <_ZN14virtio_drivers8align_up17he7951ac681e4b74fE>
8021a496: aa 85        	mv	a1, a0
8021a498: 03 35 84 f7  	ld	a0, -0x88(s0)
8021a49c: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8021a4a0: 97 00 00 00  	auipc	ra, 0x0
8021a4a4: e7 80 a0 06  	jalr	0x6a(ra) <_ZN14virtio_drivers8align_up17he7951ac681e4b74fE>
8021a4a8: 83 35 04 f5  	ld	a1, -0xb0(s0)
8021a4ac: 2e 95        	add	a0, a0, a1
8021a4ae: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8021a4b2: 63 6f b5 02  	bltu	a0, a1, 0x8021a4f0 <.Lpcrel_hi43>
8021a4b6: 31 a8        	j	0x8021a4d2 <.Lpcrel_hi42+0x12>

000000008021a4b8 <.Lpcrel_hi41>:
8021a4b8: 17 d5 01 00  	auipc	a0, 0x1d
8021a4bc: 13 05 85 54  	addi	a0, a0, 0x548

000000008021a4c0 <.Lpcrel_hi42>:
8021a4c0: 97 d5 01 00  	auipc	a1, 0x1d
8021a4c4: 13 86 05 6c  	addi	a2, a1, 0x6c0
8021a4c8: f1 45        	li	a1, 0x1c
8021a4ca: 97 60 01 00  	auipc	ra, 0x16
8021a4ce: e7 80 e0 d4  	jalr	-0x2b2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021a4d2: 03 35 84 f5  	ld	a0, -0xa8(s0)
8021a4d6: 83 35 04 fb  	ld	a1, -0x50(s0)
8021a4da: 03 36 04 f6  	ld	a2, -0xa0(s0)
8021a4de: 83 36 84 fa  	ld	a3, -0x58(s0)
;         VirtQueueLayout {
8021a4e2: 94 e1        	sd	a3, 0x0(a1)
8021a4e4: 90 e5        	sd	a2, 0x8(a1)
8021a4e6: 88 e9        	sd	a0, 0x10(a1)
8021a4e8: aa 70        	ld	ra, 0xa8(sp)
8021a4ea: 0a 74        	ld	s0, 0xa0(sp)
;     }
8021a4ec: 4d 61        	addi	sp, sp, 0xb0
8021a4ee: 82 80        	ret

000000008021a4f0 <.Lpcrel_hi43>:
;             size: align_up(desc + avail) + align_up(used),
8021a4f0: 17 d5 01 00  	auipc	a0, 0x1d
8021a4f4: 13 05 05 51  	addi	a0, a0, 0x510

000000008021a4f8 <.Lpcrel_hi44>:
8021a4f8: 97 d5 01 00  	auipc	a1, 0x1d
8021a4fc: 13 86 05 6a  	addi	a2, a1, 0x6a0
8021a500: f1 45        	li	a1, 0x1c
8021a502: 97 60 01 00  	auipc	ra, 0x16
8021a506: e7 80 60 d1  	jalr	-0x2ea(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021a50a <_ZN14virtio_drivers8align_up17he7951ac681e4b74fE>:
; fn align_up(size: usize) -> usize {
8021a50a: 01 11        	addi	sp, sp, -0x20
8021a50c: 06 ec        	sd	ra, 0x18(sp)
8021a50e: 22 e8        	sd	s0, 0x10(sp)
8021a510: 00 10        	addi	s0, sp, 0x20
8021a512: aa 85        	mv	a1, a0
8021a514: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021a518: 05 65        	lui	a0, 0x1
;     (size + PAGE_SIZE) & !(PAGE_SIZE - 1)
8021a51a: 2e 95        	add	a0, a0, a1
8021a51c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021a520: 63 6b b5 00  	bltu	a0, a1, 0x8021a536 <.Lpcrel_hi45>
8021a524: 09 a0        	j	0x8021a526 <_ZN14virtio_drivers8align_up17he7951ac681e4b74fE+0x1c>
8021a526: 03 35 04 fe  	ld	a0, -0x20(s0)
8021a52a: fd 75        	lui	a1, 0xfffff
;     (size + PAGE_SIZE) & !(PAGE_SIZE - 1)
8021a52c: 6d 8d        	and	a0, a0, a1
8021a52e: e2 60        	ld	ra, 0x18(sp)
8021a530: 42 64        	ld	s0, 0x10(sp)
; }
8021a532: 05 61        	addi	sp, sp, 0x20
8021a534: 82 80        	ret

000000008021a536 <.Lpcrel_hi45>:
;     (size + PAGE_SIZE) & !(PAGE_SIZE - 1)
8021a536: 17 d5 01 00  	auipc	a0, 0x1d
8021a53a: 13 05 a5 4c  	addi	a0, a0, 0x4ca

000000008021a53e <.Lpcrel_hi46>:
8021a53e: 97 d5 01 00  	auipc	a1, 0x1d
8021a542: 13 86 a5 6c  	addi	a2, a1, 0x6ca
8021a546: f1 45        	li	a1, 0x1c
8021a548: 97 60 01 00  	auipc	ra, 0x16
8021a54c: e7 80 00 cd  	jalr	-0x330(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021a550 <_ZN71_$LT$virtio_drivers..blk..BlkResp$u20$as$u20$core..default..Default$GT$7default17hb9ba78d8adad68a9E>:
;     fn default() -> Self {
8021a550: 01 11        	addi	sp, sp, -0x20
8021a552: 06 ec        	sd	ra, 0x18(sp)
8021a554: 22 e8        	sd	s0, 0x10(sp)
8021a556: 00 10        	addi	s0, sp, 0x20
8021a558: 0d 45        	li	a0, 0x3
;             status: RespStatus::_NotReady,
8021a55a: a3 07 a4 fe  	sb	a0, -0x11(s0)
;         BlkResp {
8021a55e: 03 45 f4 fe  	lbu	a0, -0x11(s0)
8021a562: 23 07 a4 fe  	sb	a0, -0x12(s0)
;     }
8021a566: 03 45 e4 fe  	lbu	a0, -0x12(s0)
8021a56a: e2 60        	ld	ra, 0x18(sp)
8021a56c: 42 64        	ld	s0, 0x10(sp)
8021a56e: 05 61        	addi	sp, sp, 0x20
8021a570: 82 80        	ret

000000008021a572 <_ZN68_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$3fmt17h42b4d5ddf734e2c5E>:
;             fn fmt(&self, f: &mut $crate::_core::fmt::Formatter) -> $crate::_core::fmt::Result {
8021a572: 51 71        	addi	sp, sp, -0xf0
8021a574: 86 f5        	sd	ra, 0xe8(sp)
8021a576: a2 f1        	sd	s0, 0xe0(sp)
8021a578: 80 19        	addi	s0, sp, 0xf0
8021a57a: 23 3c b4 f0  	sd	a1, -0xe8(s0)
8021a57e: 23 30 a4 f2  	sd	a0, -0xe0(s0)
;                     f.write_str("(empty)")?;
8021a582: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021a586: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021a58a: 85 45        	li	a1, 0x1
;                 let mut first = true;
8021a58c: a3 0b b4 f8  	sb	a1, -0x69(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021a590: 97 10 00 00  	auipc	ra, 0x1
8021a594: e7 80 60 13  	jalr	0x136(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7BARRIER17hcb34bc61d5557f59E>
8021a598: 11 e9        	bnez	a0, 0x8021a5ac <_ZN68_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$3fmt17h42b4d5ddf734e2c5E+0x3a>
8021a59a: 09 a0        	j	0x8021a59c <_ZN68_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$3fmt17h42b4d5ddf734e2c5E+0x2a>
8021a59c: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021a5a0: 97 10 00 00  	auipc	ra, 0x1
8021a5a4: e7 80 40 15  	jalr	0x154(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8SIZE_MAX17hde67b390147a9af9E>
8021a5a8: 55 e9        	bnez	a0, 0x8021a65c <.Lpcrel_hi8+0x26>
8021a5aa: 4d a0        	j	0x8021a64c <.Lpcrel_hi8+0x16>
;                         if !first {
8021a5ac: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021a5b0: 05 89        	andi	a0, a0, 0x1
8021a5b2: 05 e9        	bnez	a0, 0x8021a5e2 <.Lpcrel_hi5+0x28>
8021a5b4: 09 a0        	j	0x8021a5b6 <_ZN68_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$3fmt17h42b4d5ddf734e2c5E+0x44>
8021a5b6: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021a5ba <.Lpcrel_hi5>:
;                             f.write_str(" | ")?;
8021a5ba: 97 d5 01 00  	auipc	a1, 0x1d
8021a5be: 93 85 65 66  	addi	a1, a1, 0x666
8021a5c2: 0d 46        	li	a2, 0x3
8021a5c4: 97 50 01 00  	auipc	ra, 0x15
8021a5c8: e7 80 20 47  	jalr	0x472(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a5cc: 97 00 00 00  	auipc	ra, 0x0
8021a5d0: e7 80 a0 96  	jalr	-0x696(ra) <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E>
8021a5d4: 23 0c a4 f8  	sb	a0, -0x68(s0)
8021a5d8: 03 45 84 f9  	lbu	a0, -0x68(s0)
8021a5dc: 05 89        	andi	a0, a0, 0x1
8021a5de: 1d e9        	bnez	a0, 0x8021a614 <.Lpcrel_hi7>
8021a5e0: 09 a0        	j	0x8021a5e2 <.Lpcrel_hi5+0x28>
8021a5e2: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021a5e6: 81 45        	li	a1, 0x0
;                         first = false;
8021a5e8: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021a5ec <.Lpcrel_hi6>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a5ec: 97 d5 01 00  	auipc	a1, 0x1d
8021a5f0: 93 85 45 6a  	addi	a1, a1, 0x6a4
8021a5f4: 1d 46        	li	a2, 0x7
8021a5f6: 97 50 01 00  	auipc	ra, 0x15
8021a5fa: e7 80 00 44  	jalr	0x440(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a5fe: 97 00 00 00  	auipc	ra, 0x0
8021a602: e7 80 80 93  	jalr	-0x6c8(ra) <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E>
8021a606: a3 0c a4 f8  	sb	a0, -0x67(s0)
8021a60a: 03 45 94 f9  	lbu	a0, -0x67(s0)
8021a60e: 05 89        	andi	a0, a0, 0x1
8021a610: 51 d5        	beqz	a0, 0x8021a59c <_ZN68_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$3fmt17h42b4d5ddf734e2c5E+0x2a>
8021a612: 15 a0        	j	0x8021a636 <.Lpcrel_hi8>

000000008021a614 <.Lpcrel_hi7>:
;                             f.write_str(" | ")?;
8021a614: 17 d5 01 00  	auipc	a0, 0x1d
8021a618: 13 05 45 66  	addi	a0, a0, 0x664
8021a61c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a620: e7 80 80 49  	jalr	0x498(ra) <ekernel+0xffcccab4>
8021a624: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a628: 09 a0        	j	0x8021a62a <.Lpcrel_hi7+0x16>
;             }
8021a62a: 03 45 64 f9  	lbu	a0, -0x6a(s0)
8021a62e: ae 70        	ld	ra, 0xe8(sp)
8021a630: 0e 74        	ld	s0, 0xe0(sp)
8021a632: 6d 61        	addi	sp, sp, 0xf0
8021a634: 82 80        	ret

000000008021a636 <.Lpcrel_hi8>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a636: 17 d5 01 00  	auipc	a0, 0x1d
8021a63a: 13 05 25 64  	addi	a0, a0, 0x642
8021a63e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a642: e7 80 60 47  	jalr	0x476(ra) <ekernel+0xffcccab4>
8021a646: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a64a: c5 b7        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021a64c: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021a650: 97 10 00 00  	auipc	ra, 0x1
8021a654: e7 80 20 0d  	jalr	0xd2(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7SEG_MAX17h0ff37367a71d5edfE>
8021a658: 45 e5        	bnez	a0, 0x8021a700 <.Lpcrel_hi12+0x26>
8021a65a: 59 a8        	j	0x8021a6f0 <.Lpcrel_hi12+0x16>
;                         if !first {
8021a65c: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021a660: 05 89        	andi	a0, a0, 0x1
8021a662: 05 e9        	bnez	a0, 0x8021a692 <.Lpcrel_hi9+0x28>
8021a664: 09 a0        	j	0x8021a666 <.Lpcrel_hi8+0x30>
8021a666: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021a66a <.Lpcrel_hi9>:
;                             f.write_str(" | ")?;
8021a66a: 97 d5 01 00  	auipc	a1, 0x1d
8021a66e: 93 85 65 5b  	addi	a1, a1, 0x5b6
8021a672: 0d 46        	li	a2, 0x3
8021a674: 97 50 01 00  	auipc	ra, 0x15
8021a678: e7 80 20 3c  	jalr	0x3c2(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a67c: 97 00 00 00  	auipc	ra, 0x0
8021a680: e7 80 a0 8b  	jalr	-0x746(ra) <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E>
8021a684: 23 0d a4 f8  	sb	a0, -0x66(s0)
8021a688: 03 45 a4 f9  	lbu	a0, -0x66(s0)
8021a68c: 05 89        	andi	a0, a0, 0x1
8021a68e: 1d e9        	bnez	a0, 0x8021a6c4 <.Lpcrel_hi11>
8021a690: 09 a0        	j	0x8021a692 <.Lpcrel_hi9+0x28>
8021a692: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021a696: 81 45        	li	a1, 0x0
;                         first = false;
8021a698: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021a69c <.Lpcrel_hi10>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a69c: 97 95 01 00  	auipc	a1, 0x19
8021a6a0: 93 85 45 db  	addi	a1, a1, -0x24c
8021a6a4: 21 46        	li	a2, 0x8
8021a6a6: 97 50 01 00  	auipc	ra, 0x15
8021a6aa: e7 80 00 39  	jalr	0x390(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a6ae: 97 00 00 00  	auipc	ra, 0x0
8021a6b2: e7 80 80 88  	jalr	-0x778(ra) <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E>
8021a6b6: a3 0d a4 f8  	sb	a0, -0x65(s0)
8021a6ba: 03 45 b4 f9  	lbu	a0, -0x65(s0)
8021a6be: 05 89        	andi	a0, a0, 0x1
8021a6c0: 51 d5        	beqz	a0, 0x8021a64c <.Lpcrel_hi8+0x16>
8021a6c2: 21 a8        	j	0x8021a6da <.Lpcrel_hi12>

000000008021a6c4 <.Lpcrel_hi11>:
;                             f.write_str(" | ")?;
8021a6c4: 17 d5 01 00  	auipc	a0, 0x1d
8021a6c8: 13 05 45 5b  	addi	a0, a0, 0x5b4
8021a6cc: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a6d0: e7 80 80 3e  	jalr	0x3e8(ra) <ekernel+0xffcccab4>
8021a6d4: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a6d8: 89 bf        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021a6da <.Lpcrel_hi12>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a6da: 17 d5 01 00  	auipc	a0, 0x1d
8021a6de: 13 05 e5 59  	addi	a0, a0, 0x59e
8021a6e2: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a6e6: e7 80 20 3d  	jalr	0x3d2(ra) <ekernel+0xffcccab4>
8021a6ea: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a6ee: 35 bf        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021a6f0: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021a6f4: 97 10 00 00  	auipc	ra, 0x1
8021a6f8: e7 80 c0 05  	jalr	0x5c(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8GEOMETRY17hc6e7173bbb9f6ff8E>
8021a6fc: 45 e5        	bnez	a0, 0x8021a7a4 <.Lpcrel_hi16+0x26>
8021a6fe: 59 a8        	j	0x8021a794 <.Lpcrel_hi16+0x16>
;                         if !first {
8021a700: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021a704: 05 89        	andi	a0, a0, 0x1
8021a706: 05 e9        	bnez	a0, 0x8021a736 <.Lpcrel_hi13+0x28>
8021a708: 09 a0        	j	0x8021a70a <.Lpcrel_hi12+0x30>
8021a70a: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021a70e <.Lpcrel_hi13>:
;                             f.write_str(" | ")?;
8021a70e: 97 d5 01 00  	auipc	a1, 0x1d
8021a712: 93 85 25 51  	addi	a1, a1, 0x512
8021a716: 0d 46        	li	a2, 0x3
8021a718: 97 50 01 00  	auipc	ra, 0x15
8021a71c: e7 80 e0 31  	jalr	0x31e(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a720: 97 00 00 00  	auipc	ra, 0x0
8021a724: e7 80 60 81  	jalr	-0x7ea(ra) <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hc45ce265addd98a3E>
8021a728: 23 0e a4 f8  	sb	a0, -0x64(s0)
8021a72c: 03 45 c4 f9  	lbu	a0, -0x64(s0)
8021a730: 05 89        	andi	a0, a0, 0x1
8021a732: 1d e9        	bnez	a0, 0x8021a768 <.Lpcrel_hi15>
8021a734: 09 a0        	j	0x8021a736 <.Lpcrel_hi13+0x28>
8021a736: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021a73a: 81 45        	li	a1, 0x0
;                         first = false;
8021a73c: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021a740 <.Lpcrel_hi14>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a740: 97 d5 01 00  	auipc	a1, 0x1d
8021a744: 93 85 75 55  	addi	a1, a1, 0x557
8021a748: 1d 46        	li	a2, 0x7
8021a74a: 97 50 01 00  	auipc	ra, 0x15
8021a74e: e7 80 c0 2e  	jalr	0x2ec(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a752: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a756: e7 80 40 7e  	jalr	0x7e4(ra) <ekernel+0xffcccf36>
8021a75a: a3 0e a4 f8  	sb	a0, -0x63(s0)
8021a75e: 03 45 d4 f9  	lbu	a0, -0x63(s0)
8021a762: 05 89        	andi	a0, a0, 0x1
8021a764: 51 d5        	beqz	a0, 0x8021a6f0 <.Lpcrel_hi12+0x16>
8021a766: 21 a8        	j	0x8021a77e <.Lpcrel_hi16>

000000008021a768 <.Lpcrel_hi15>:
;                             f.write_str(" | ")?;
8021a768: 17 d5 01 00  	auipc	a0, 0x1d
8021a76c: 13 05 05 51  	addi	a0, a0, 0x510
8021a770: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a774: e7 80 40 34  	jalr	0x344(ra) <ekernel+0xffcccab4>
8021a778: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a77c: 7d b5        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021a77e <.Lpcrel_hi16>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a77e: 17 d5 01 00  	auipc	a0, 0x1d
8021a782: 13 05 a5 4f  	addi	a0, a0, 0x4fa
8021a786: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a78a: e7 80 e0 32  	jalr	0x32e(ra) <ekernel+0xffcccab4>
8021a78e: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a792: 61 bd        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021a794: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021a798: 97 10 00 00  	auipc	ra, 0x1
8021a79c: e7 80 60 fe  	jalr	-0x1a(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2RO17hf8c7b57707ff4e0dE>
8021a7a0: 45 e5        	bnez	a0, 0x8021a848 <.Lpcrel_hi20+0x26>
8021a7a2: 59 a8        	j	0x8021a838 <.Lpcrel_hi20+0x16>
;                         if !first {
8021a7a4: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021a7a8: 05 89        	andi	a0, a0, 0x1
8021a7aa: 05 e9        	bnez	a0, 0x8021a7da <.Lpcrel_hi17+0x28>
8021a7ac: 09 a0        	j	0x8021a7ae <.Lpcrel_hi16+0x30>
8021a7ae: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021a7b2 <.Lpcrel_hi17>:
;                             f.write_str(" | ")?;
8021a7b2: 97 d5 01 00  	auipc	a1, 0x1d
8021a7b6: 93 85 e5 46  	addi	a1, a1, 0x46e
8021a7ba: 0d 46        	li	a2, 0x3
8021a7bc: 97 50 01 00  	auipc	ra, 0x15
8021a7c0: e7 80 a0 27  	jalr	0x27a(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a7c4: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a7c8: e7 80 20 77  	jalr	0x772(ra) <ekernel+0xffcccf36>
8021a7cc: 23 0f a4 f8  	sb	a0, -0x62(s0)
8021a7d0: 03 45 e4 f9  	lbu	a0, -0x62(s0)
8021a7d4: 05 89        	andi	a0, a0, 0x1
8021a7d6: 1d e9        	bnez	a0, 0x8021a80c <.Lpcrel_hi19>
8021a7d8: 09 a0        	j	0x8021a7da <.Lpcrel_hi17+0x28>
8021a7da: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021a7de: 81 45        	li	a1, 0x0
;                         first = false;
8021a7e0: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021a7e4 <.Lpcrel_hi18>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a7e4: 97 95 01 00  	auipc	a1, 0x19
8021a7e8: 93 85 45 c1  	addi	a1, a1, -0x3ec
8021a7ec: 21 46        	li	a2, 0x8
8021a7ee: 97 50 01 00  	auipc	ra, 0x15
8021a7f2: e7 80 80 24  	jalr	0x248(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a7f6: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a7fa: e7 80 00 74  	jalr	0x740(ra) <ekernel+0xffcccf36>
8021a7fe: a3 0f a4 f8  	sb	a0, -0x61(s0)
8021a802: 03 45 f4 f9  	lbu	a0, -0x61(s0)
8021a806: 05 89        	andi	a0, a0, 0x1
8021a808: 51 d5        	beqz	a0, 0x8021a794 <.Lpcrel_hi16+0x16>
8021a80a: 21 a8        	j	0x8021a822 <.Lpcrel_hi20>

000000008021a80c <.Lpcrel_hi19>:
;                             f.write_str(" | ")?;
8021a80c: 17 d5 01 00  	auipc	a0, 0x1d
8021a810: 13 05 c5 46  	addi	a0, a0, 0x46c
8021a814: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a818: e7 80 00 2a  	jalr	0x2a0(ra) <ekernel+0xffcccab4>
8021a81c: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a820: 29 b5        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021a822 <.Lpcrel_hi20>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a822: 17 d5 01 00  	auipc	a0, 0x1d
8021a826: 13 05 65 45  	addi	a0, a0, 0x456
8021a82a: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a82e: e7 80 a0 28  	jalr	0x28a(ra) <ekernel+0xffcccab4>
8021a832: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a836: d5 bb        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021a838: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021a83c: 97 10 00 00  	auipc	ra, 0x1
8021a840: e7 80 00 f7  	jalr	-0x90(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8BLK_SIZE17h7bb2dd542f7ae6a5E>
8021a844: 45 e5        	bnez	a0, 0x8021a8ec <.Lpcrel_hi24+0x26>
8021a846: 59 a8        	j	0x8021a8dc <.Lpcrel_hi24+0x16>
;                         if !first {
8021a848: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021a84c: 05 89        	andi	a0, a0, 0x1
8021a84e: 05 e9        	bnez	a0, 0x8021a87e <.Lpcrel_hi21+0x28>
8021a850: 09 a0        	j	0x8021a852 <.Lpcrel_hi20+0x30>
8021a852: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021a856 <.Lpcrel_hi21>:
;                             f.write_str(" | ")?;
8021a856: 97 d5 01 00  	auipc	a1, 0x1d
8021a85a: 93 85 a5 3c  	addi	a1, a1, 0x3ca
8021a85e: 0d 46        	li	a2, 0x3
8021a860: 97 50 01 00  	auipc	ra, 0x15
8021a864: e7 80 60 1d  	jalr	0x1d6(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a868: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a86c: e7 80 e0 6c  	jalr	0x6ce(ra) <ekernel+0xffcccf36>
8021a870: 23 00 a4 fa  	sb	a0, -0x60(s0)
8021a874: 03 45 04 fa  	lbu	a0, -0x60(s0)
8021a878: 05 89        	andi	a0, a0, 0x1
8021a87a: 1d e9        	bnez	a0, 0x8021a8b0 <.Lpcrel_hi23>
8021a87c: 09 a0        	j	0x8021a87e <.Lpcrel_hi21+0x28>
8021a87e: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021a882: 81 45        	li	a1, 0x0
;                         first = false;
8021a884: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021a888 <.Lpcrel_hi22>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a888: 97 d5 01 00  	auipc	a1, 0x1d
8021a88c: 93 85 65 41  	addi	a1, a1, 0x416
8021a890: 09 46        	li	a2, 0x2
8021a892: 97 50 01 00  	auipc	ra, 0x15
8021a896: e7 80 40 1a  	jalr	0x1a4(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a89a: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a89e: e7 80 c0 69  	jalr	0x69c(ra) <ekernel+0xffcccf36>
8021a8a2: a3 00 a4 fa  	sb	a0, -0x5f(s0)
8021a8a6: 03 45 14 fa  	lbu	a0, -0x5f(s0)
8021a8aa: 05 89        	andi	a0, a0, 0x1
8021a8ac: 51 d5        	beqz	a0, 0x8021a838 <.Lpcrel_hi20+0x16>
8021a8ae: 21 a8        	j	0x8021a8c6 <.Lpcrel_hi24>

000000008021a8b0 <.Lpcrel_hi23>:
;                             f.write_str(" | ")?;
8021a8b0: 17 d5 01 00  	auipc	a0, 0x1d
8021a8b4: 13 05 85 3c  	addi	a0, a0, 0x3c8
8021a8b8: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a8bc: e7 80 c0 1f  	jalr	0x1fc(ra) <ekernel+0xffcccab4>
8021a8c0: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a8c4: 9d b3        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021a8c6 <.Lpcrel_hi24>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a8c6: 17 d5 01 00  	auipc	a0, 0x1d
8021a8ca: 13 05 25 3b  	addi	a0, a0, 0x3b2
8021a8ce: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a8d2: e7 80 60 1e  	jalr	0x1e6(ra) <ekernel+0xffcccab4>
8021a8d6: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a8da: 81 bb        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021a8dc: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021a8e0: 97 10 00 00  	auipc	ra, 0x1
8021a8e4: e7 80 a0 ef  	jalr	-0x106(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SCSI17h14f8e65359e9881cE>
8021a8e8: 45 e5        	bnez	a0, 0x8021a990 <.Lpcrel_hi28+0x26>
8021a8ea: 59 a8        	j	0x8021a980 <.Lpcrel_hi28+0x16>
;                         if !first {
8021a8ec: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021a8f0: 05 89        	andi	a0, a0, 0x1
8021a8f2: 05 e9        	bnez	a0, 0x8021a922 <.Lpcrel_hi25+0x28>
8021a8f4: 09 a0        	j	0x8021a8f6 <.Lpcrel_hi24+0x30>
8021a8f6: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021a8fa <.Lpcrel_hi25>:
;                             f.write_str(" | ")?;
8021a8fa: 97 d5 01 00  	auipc	a1, 0x1d
8021a8fe: 93 85 65 32  	addi	a1, a1, 0x326
8021a902: 0d 46        	li	a2, 0x3
8021a904: 97 50 01 00  	auipc	ra, 0x15
8021a908: e7 80 20 13  	jalr	0x132(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a90c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a910: e7 80 a0 62  	jalr	0x62a(ra) <ekernel+0xffcccf36>
8021a914: 23 01 a4 fa  	sb	a0, -0x5e(s0)
8021a918: 03 45 24 fa  	lbu	a0, -0x5e(s0)
8021a91c: 05 89        	andi	a0, a0, 0x1
8021a91e: 1d e9        	bnez	a0, 0x8021a954 <.Lpcrel_hi27>
8021a920: 09 a0        	j	0x8021a922 <.Lpcrel_hi25+0x28>
8021a922: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021a926: 81 45        	li	a1, 0x0
;                         first = false;
8021a928: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021a92c <.Lpcrel_hi26>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a92c: 97 95 01 00  	auipc	a1, 0x19
8021a930: 93 85 c5 b3  	addi	a1, a1, -0x4c4
8021a934: 21 46        	li	a2, 0x8
8021a936: 97 50 01 00  	auipc	ra, 0x15
8021a93a: e7 80 00 10  	jalr	0x100(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a93e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a942: e7 80 80 5f  	jalr	0x5f8(ra) <ekernel+0xffcccf36>
8021a946: a3 01 a4 fa  	sb	a0, -0x5d(s0)
8021a94a: 03 45 34 fa  	lbu	a0, -0x5d(s0)
8021a94e: 05 89        	andi	a0, a0, 0x1
8021a950: 51 d5        	beqz	a0, 0x8021a8dc <.Lpcrel_hi24+0x16>
8021a952: 21 a8        	j	0x8021a96a <.Lpcrel_hi28>

000000008021a954 <.Lpcrel_hi27>:
;                             f.write_str(" | ")?;
8021a954: 17 d5 01 00  	auipc	a0, 0x1d
8021a958: 13 05 45 32  	addi	a0, a0, 0x324
8021a95c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a960: e7 80 80 15  	jalr	0x158(ra) <ekernel+0xffcccab4>
8021a964: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a968: c9 b1        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021a96a <.Lpcrel_hi28>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a96a: 17 d5 01 00  	auipc	a0, 0x1d
8021a96e: 13 05 e5 30  	addi	a0, a0, 0x30e
8021a972: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a976: e7 80 20 14  	jalr	0x142(ra) <ekernel+0xffcccab4>
8021a97a: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021a97e: 75 b1        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021a980: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021a984: 97 10 00 00  	auipc	ra, 0x1
8021a988: e7 80 40 e8  	jalr	-0x17c(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5FLUSH17h6de5db6b88200fa6E>
8021a98c: 45 e5        	bnez	a0, 0x8021aa34 <.Lpcrel_hi32+0x26>
8021a98e: 59 a8        	j	0x8021aa24 <.Lpcrel_hi32+0x16>
;                         if !first {
8021a990: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021a994: 05 89        	andi	a0, a0, 0x1
8021a996: 05 e9        	bnez	a0, 0x8021a9c6 <.Lpcrel_hi29+0x28>
8021a998: 09 a0        	j	0x8021a99a <.Lpcrel_hi28+0x30>
8021a99a: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021a99e <.Lpcrel_hi29>:
;                             f.write_str(" | ")?;
8021a99e: 97 d5 01 00  	auipc	a1, 0x1d
8021a9a2: 93 85 25 28  	addi	a1, a1, 0x282
8021a9a6: 0d 46        	li	a2, 0x3
8021a9a8: 97 50 01 00  	auipc	ra, 0x15
8021a9ac: e7 80 e0 08  	jalr	0x8e(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a9b0: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a9b4: e7 80 60 58  	jalr	0x586(ra) <ekernel+0xffcccf36>
8021a9b8: 23 02 a4 fa  	sb	a0, -0x5c(s0)
8021a9bc: 03 45 44 fa  	lbu	a0, -0x5c(s0)
8021a9c0: 05 89        	andi	a0, a0, 0x1
8021a9c2: 1d e9        	bnez	a0, 0x8021a9f8 <.Lpcrel_hi31>
8021a9c4: 09 a0        	j	0x8021a9c6 <.Lpcrel_hi29+0x28>
8021a9c6: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021a9ca: 81 45        	li	a1, 0x0
;                         first = false;
8021a9cc: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021a9d0 <.Lpcrel_hi30>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021a9d0: 97 95 01 00  	auipc	a1, 0x19
8021a9d4: 93 85 45 de  	addi	a1, a1, -0x21c
8021a9d8: 11 46        	li	a2, 0x4
8021a9da: 97 50 01 00  	auipc	ra, 0x15
8021a9de: e7 80 c0 05  	jalr	0x5c(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021a9e2: 97 f0 ff ff  	auipc	ra, 0xfffff
8021a9e6: e7 80 40 55  	jalr	0x554(ra) <ekernel+0xffcccf36>
8021a9ea: a3 02 a4 fa  	sb	a0, -0x5b(s0)
8021a9ee: 03 45 54 fa  	lbu	a0, -0x5b(s0)
8021a9f2: 05 89        	andi	a0, a0, 0x1
8021a9f4: 51 d5        	beqz	a0, 0x8021a980 <.Lpcrel_hi28+0x16>
8021a9f6: 21 a8        	j	0x8021aa0e <.Lpcrel_hi32>

000000008021a9f8 <.Lpcrel_hi31>:
;                             f.write_str(" | ")?;
8021a9f8: 17 d5 01 00  	auipc	a0, 0x1d
8021a9fc: 13 05 05 28  	addi	a0, a0, 0x280
8021aa00: 97 f0 ff ff  	auipc	ra, 0xfffff
8021aa04: e7 80 40 0b  	jalr	0xb4(ra) <ekernel+0xffcccab4>
8021aa08: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021aa0c: 39 b9        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021aa0e <.Lpcrel_hi32>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021aa0e: 17 d5 01 00  	auipc	a0, 0x1d
8021aa12: 13 05 a5 26  	addi	a0, a0, 0x26a
8021aa16: 97 f0 ff ff  	auipc	ra, 0xfffff
8021aa1a: e7 80 e0 09  	jalr	0x9e(ra) <ekernel+0xffcccab4>
8021aa1e: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021aa22: 21 b1        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021aa24: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021aa28: 97 10 00 00  	auipc	ra, 0x1
8021aa2c: e7 80 e0 e0  	jalr	-0x1f2(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8TOPOLOGY17hbc7363b9e6700577E>
8021aa30: 45 e5        	bnez	a0, 0x8021aad8 <.Lpcrel_hi36+0x26>
8021aa32: 59 a8        	j	0x8021aac8 <.Lpcrel_hi36+0x16>
;                         if !first {
8021aa34: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021aa38: 05 89        	andi	a0, a0, 0x1
8021aa3a: 05 e9        	bnez	a0, 0x8021aa6a <.Lpcrel_hi33+0x28>
8021aa3c: 09 a0        	j	0x8021aa3e <.Lpcrel_hi32+0x30>
8021aa3e: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021aa42 <.Lpcrel_hi33>:
;                             f.write_str(" | ")?;
8021aa42: 97 d5 01 00  	auipc	a1, 0x1d
8021aa46: 93 85 e5 1d  	addi	a1, a1, 0x1de
8021aa4a: 0d 46        	li	a2, 0x3
8021aa4c: 97 50 01 00  	auipc	ra, 0x15
8021aa50: e7 80 a0 fe  	jalr	-0x16(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021aa54: 97 f0 ff ff  	auipc	ra, 0xfffff
8021aa58: e7 80 20 4e  	jalr	0x4e2(ra) <ekernel+0xffcccf36>
8021aa5c: 23 03 a4 fa  	sb	a0, -0x5a(s0)
8021aa60: 03 45 64 fa  	lbu	a0, -0x5a(s0)
8021aa64: 05 89        	andi	a0, a0, 0x1
8021aa66: 1d e9        	bnez	a0, 0x8021aa9c <.Lpcrel_hi35>
8021aa68: 09 a0        	j	0x8021aa6a <.Lpcrel_hi33+0x28>
8021aa6a: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021aa6e: 81 45        	li	a1, 0x0
;                         first = false;
8021aa70: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021aa74 <.Lpcrel_hi34>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021aa74: 97 d5 01 00  	auipc	a1, 0x1d
8021aa78: 93 85 c5 22  	addi	a1, a1, 0x22c
8021aa7c: 15 46        	li	a2, 0x5
8021aa7e: 97 50 01 00  	auipc	ra, 0x15
8021aa82: e7 80 80 fb  	jalr	-0x48(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021aa86: 97 f0 ff ff  	auipc	ra, 0xfffff
8021aa8a: e7 80 00 4b  	jalr	0x4b0(ra) <ekernel+0xffcccf36>
8021aa8e: a3 03 a4 fa  	sb	a0, -0x59(s0)
8021aa92: 03 45 74 fa  	lbu	a0, -0x59(s0)
8021aa96: 05 89        	andi	a0, a0, 0x1
8021aa98: 51 d5        	beqz	a0, 0x8021aa24 <.Lpcrel_hi32+0x16>
8021aa9a: 21 a8        	j	0x8021aab2 <.Lpcrel_hi36>

000000008021aa9c <.Lpcrel_hi35>:
;                             f.write_str(" | ")?;
8021aa9c: 17 d5 01 00  	auipc	a0, 0x1d
8021aaa0: 13 05 c5 1d  	addi	a0, a0, 0x1dc
8021aaa4: 97 f0 ff ff  	auipc	ra, 0xfffff
8021aaa8: e7 80 00 01  	jalr	0x10(ra) <ekernel+0xffcccab4>
8021aaac: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021aab0: ad be        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021aab2 <.Lpcrel_hi36>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021aab2: 17 d5 01 00  	auipc	a0, 0x1d
8021aab6: 13 05 65 1c  	addi	a0, a0, 0x1c6
8021aaba: 97 f0 ff ff  	auipc	ra, 0xfffff
8021aabe: e7 80 a0 ff  	jalr	-0x6(ra) <ekernel+0xffcccab4>
8021aac2: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021aac6: 95 b6        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021aac8: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021aacc: 97 10 00 00  	auipc	ra, 0x1
8021aad0: e7 80 80 d9  	jalr	-0x268(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$10CONFIG_WCE17hcdcf00851c3f6417E>
8021aad4: 45 e5        	bnez	a0, 0x8021ab7c <.Lpcrel_hi40+0x26>
8021aad6: 59 a8        	j	0x8021ab6c <.Lpcrel_hi40+0x16>
;                         if !first {
8021aad8: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021aadc: 05 89        	andi	a0, a0, 0x1
8021aade: 05 e9        	bnez	a0, 0x8021ab0e <.Lpcrel_hi37+0x28>
8021aae0: 09 a0        	j	0x8021aae2 <.Lpcrel_hi36+0x30>
8021aae2: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021aae6 <.Lpcrel_hi37>:
;                             f.write_str(" | ")?;
8021aae6: 97 d5 01 00  	auipc	a1, 0x1d
8021aaea: 93 85 a5 13  	addi	a1, a1, 0x13a
8021aaee: 0d 46        	li	a2, 0x3
8021aaf0: 97 50 01 00  	auipc	ra, 0x15
8021aaf4: e7 80 60 f4  	jalr	-0xba(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021aaf8: 97 f0 ff ff  	auipc	ra, 0xfffff
8021aafc: e7 80 e0 43  	jalr	0x43e(ra) <ekernel+0xffcccf36>
8021ab00: 23 04 a4 fa  	sb	a0, -0x58(s0)
8021ab04: 03 45 84 fa  	lbu	a0, -0x58(s0)
8021ab08: 05 89        	andi	a0, a0, 0x1
8021ab0a: 1d e9        	bnez	a0, 0x8021ab40 <.Lpcrel_hi39>
8021ab0c: 09 a0        	j	0x8021ab0e <.Lpcrel_hi37+0x28>
8021ab0e: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021ab12: 81 45        	li	a1, 0x0
;                         first = false;
8021ab14: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021ab18 <.Lpcrel_hi38>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ab18: 97 95 01 00  	auipc	a1, 0x19
8021ab1c: 93 85 05 8c  	addi	a1, a1, -0x740
8021ab20: 21 46        	li	a2, 0x8
8021ab22: 97 50 01 00  	auipc	ra, 0x15
8021ab26: e7 80 40 f1  	jalr	-0xec(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021ab2a: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ab2e: e7 80 c0 40  	jalr	0x40c(ra) <ekernel+0xffcccf36>
8021ab32: a3 04 a4 fa  	sb	a0, -0x57(s0)
8021ab36: 03 45 94 fa  	lbu	a0, -0x57(s0)
8021ab3a: 05 89        	andi	a0, a0, 0x1
8021ab3c: 51 d5        	beqz	a0, 0x8021aac8 <.Lpcrel_hi36+0x16>
8021ab3e: 21 a8        	j	0x8021ab56 <.Lpcrel_hi40>

000000008021ab40 <.Lpcrel_hi39>:
;                             f.write_str(" | ")?;
8021ab40: 17 d5 01 00  	auipc	a0, 0x1d
8021ab44: 13 05 85 13  	addi	a0, a0, 0x138
8021ab48: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ab4c: e7 80 c0 f6  	jalr	-0x94(ra) <ekernel+0xffcccab4>
8021ab50: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021ab54: d9 bc        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021ab56 <.Lpcrel_hi40>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ab56: 17 d5 01 00  	auipc	a0, 0x1d
8021ab5a: 13 05 25 12  	addi	a0, a0, 0x122
8021ab5e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ab62: e7 80 60 f5  	jalr	-0xaa(ra) <ekernel+0xffcccab4>
8021ab66: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021ab6a: c1 b4        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021ab6c: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021ab70: 97 10 00 00  	auipc	ra, 0x1
8021ab74: e7 80 20 d2  	jalr	-0x2de(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7DISCARD17hf4296a7f43923d49E>
8021ab78: 45 e5        	bnez	a0, 0x8021ac20 <.Lpcrel_hi44+0x26>
8021ab7a: 59 a8        	j	0x8021ac10 <.Lpcrel_hi44+0x16>
;                         if !first {
8021ab7c: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021ab80: 05 89        	andi	a0, a0, 0x1
8021ab82: 05 e9        	bnez	a0, 0x8021abb2 <.Lpcrel_hi41+0x28>
8021ab84: 09 a0        	j	0x8021ab86 <.Lpcrel_hi40+0x30>
8021ab86: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021ab8a <.Lpcrel_hi41>:
;                             f.write_str(" | ")?;
8021ab8a: 97 d5 01 00  	auipc	a1, 0x1d
8021ab8e: 93 85 65 09  	addi	a1, a1, 0x96
8021ab92: 0d 46        	li	a2, 0x3
8021ab94: 97 50 01 00  	auipc	ra, 0x15
8021ab98: e7 80 20 ea  	jalr	-0x15e(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021ab9c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021aba0: e7 80 a0 39  	jalr	0x39a(ra) <ekernel+0xffcccf36>
8021aba4: 23 05 a4 fa  	sb	a0, -0x56(s0)
8021aba8: 03 45 a4 fa  	lbu	a0, -0x56(s0)
8021abac: 05 89        	andi	a0, a0, 0x1
8021abae: 1d e9        	bnez	a0, 0x8021abe4 <.Lpcrel_hi43>
8021abb0: 09 a0        	j	0x8021abb2 <.Lpcrel_hi41+0x28>
8021abb2: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021abb6: 81 45        	li	a1, 0x0
;                         first = false;
8021abb8: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021abbc <.Lpcrel_hi42>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021abbc: 97 d5 01 00  	auipc	a1, 0x1d
8021abc0: 93 85 95 0e  	addi	a1, a1, 0xe9
8021abc4: 29 46        	li	a2, 0xa
8021abc6: 97 50 01 00  	auipc	ra, 0x15
8021abca: e7 80 00 e7  	jalr	-0x190(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021abce: 97 f0 ff ff  	auipc	ra, 0xfffff
8021abd2: e7 80 80 36  	jalr	0x368(ra) <ekernel+0xffcccf36>
8021abd6: a3 05 a4 fa  	sb	a0, -0x55(s0)
8021abda: 03 45 b4 fa  	lbu	a0, -0x55(s0)
8021abde: 05 89        	andi	a0, a0, 0x1
8021abe0: 51 d5        	beqz	a0, 0x8021ab6c <.Lpcrel_hi40+0x16>
8021abe2: 21 a8        	j	0x8021abfa <.Lpcrel_hi44>

000000008021abe4 <.Lpcrel_hi43>:
;                             f.write_str(" | ")?;
8021abe4: 17 d5 01 00  	auipc	a0, 0x1d
8021abe8: 13 05 45 09  	addi	a0, a0, 0x94
8021abec: 97 f0 ff ff  	auipc	ra, 0xfffff
8021abf0: e7 80 80 ec  	jalr	-0x138(ra) <ekernel+0xffcccab4>
8021abf4: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021abf8: 0d bc        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021abfa <.Lpcrel_hi44>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021abfa: 17 d5 01 00  	auipc	a0, 0x1d
8021abfe: 13 05 e5 07  	addi	a0, a0, 0x7e
8021ac02: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ac06: e7 80 20 eb  	jalr	-0x14e(ra) <ekernel+0xffcccab4>
8021ac0a: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021ac0e: 31 bc        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021ac10: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021ac14: 97 10 00 00  	auipc	ra, 0x1
8021ac18: e7 80 c0 ca  	jalr	-0x354(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12WRITE_ZEROES17h9d5351c22f531343E>
8021ac1c: 45 e5        	bnez	a0, 0x8021acc4 <.Lpcrel_hi48+0x26>
8021ac1e: 59 a8        	j	0x8021acb4 <.Lpcrel_hi48+0x16>
;                         if !first {
8021ac20: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021ac24: 05 89        	andi	a0, a0, 0x1
8021ac26: 05 e9        	bnez	a0, 0x8021ac56 <.Lpcrel_hi45+0x28>
8021ac28: 09 a0        	j	0x8021ac2a <.Lpcrel_hi44+0x30>
8021ac2a: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021ac2e <.Lpcrel_hi45>:
;                             f.write_str(" | ")?;
8021ac2e: 97 d5 01 00  	auipc	a1, 0x1d
8021ac32: 93 85 25 ff  	addi	a1, a1, -0xe
8021ac36: 0d 46        	li	a2, 0x3
8021ac38: 97 50 01 00  	auipc	ra, 0x15
8021ac3c: e7 80 e0 df  	jalr	-0x202(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021ac40: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ac44: e7 80 60 2f  	jalr	0x2f6(ra) <ekernel+0xffcccf36>
8021ac48: 23 06 a4 fa  	sb	a0, -0x54(s0)
8021ac4c: 03 45 c4 fa  	lbu	a0, -0x54(s0)
8021ac50: 05 89        	andi	a0, a0, 0x1
8021ac52: 1d e9        	bnez	a0, 0x8021ac88 <.Lpcrel_hi47>
8021ac54: 09 a0        	j	0x8021ac56 <.Lpcrel_hi45+0x28>
8021ac56: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021ac5a: 81 45        	li	a1, 0x0
;                         first = false;
8021ac5c: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021ac60 <.Lpcrel_hi46>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ac60: 97 d5 01 00  	auipc	a1, 0x1d
8021ac64: 93 85 f5 04  	addi	a1, a1, 0x4f
8021ac68: 1d 46        	li	a2, 0x7
8021ac6a: 97 50 01 00  	auipc	ra, 0x15
8021ac6e: e7 80 c0 dc  	jalr	-0x234(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021ac72: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ac76: e7 80 40 2c  	jalr	0x2c4(ra) <ekernel+0xffcccf36>
8021ac7a: a3 06 a4 fa  	sb	a0, -0x53(s0)
8021ac7e: 03 45 d4 fa  	lbu	a0, -0x53(s0)
8021ac82: 05 89        	andi	a0, a0, 0x1
8021ac84: 51 d5        	beqz	a0, 0x8021ac10 <.Lpcrel_hi44+0x16>
8021ac86: 21 a8        	j	0x8021ac9e <.Lpcrel_hi48>

000000008021ac88 <.Lpcrel_hi47>:
;                             f.write_str(" | ")?;
8021ac88: 17 d5 01 00  	auipc	a0, 0x1d
8021ac8c: 13 05 05 ff  	addi	a0, a0, -0x10
8021ac90: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ac94: e7 80 40 e2  	jalr	-0x1dc(ra) <ekernel+0xffcccab4>
8021ac98: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021ac9c: 79 b2        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021ac9e <.Lpcrel_hi48>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ac9e: 17 d5 01 00  	auipc	a0, 0x1d
8021aca2: 13 05 a5 fd  	addi	a0, a0, -0x26
8021aca6: 97 f0 ff ff  	auipc	ra, 0xfffff
8021acaa: e7 80 e0 e0  	jalr	-0x1f2(ra) <ekernel+0xffcccab4>
8021acae: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021acb2: a5 ba        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021acb4: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021acb8: 97 10 00 00  	auipc	ra, 0x1
8021acbc: e7 80 60 c3  	jalr	-0x3ca(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15NOTIFY_ON_EMPTY17h0fe553425b9f1a07E>
8021acc0: 45 e5        	bnez	a0, 0x8021ad68 <.Lpcrel_hi52+0x26>
8021acc2: 59 a8        	j	0x8021ad58 <.Lpcrel_hi52+0x16>
;                         if !first {
8021acc4: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021acc8: 05 89        	andi	a0, a0, 0x1
8021acca: 05 e9        	bnez	a0, 0x8021acfa <.Lpcrel_hi49+0x28>
8021accc: 09 a0        	j	0x8021acce <.Lpcrel_hi48+0x30>
8021acce: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021acd2 <.Lpcrel_hi49>:
;                             f.write_str(" | ")?;
8021acd2: 97 d5 01 00  	auipc	a1, 0x1d
8021acd6: 93 85 e5 f4  	addi	a1, a1, -0xb2
8021acda: 0d 46        	li	a2, 0x3
8021acdc: 97 50 01 00  	auipc	ra, 0x15
8021ace0: e7 80 a0 d5  	jalr	-0x2a6(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021ace4: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ace8: e7 80 20 25  	jalr	0x252(ra) <ekernel+0xffcccf36>
8021acec: 23 07 a4 fa  	sb	a0, -0x52(s0)
8021acf0: 03 45 e4 fa  	lbu	a0, -0x52(s0)
8021acf4: 05 89        	andi	a0, a0, 0x1
8021acf6: 1d e9        	bnez	a0, 0x8021ad2c <.Lpcrel_hi51>
8021acf8: 09 a0        	j	0x8021acfa <.Lpcrel_hi49+0x28>
8021acfa: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021acfe: 81 45        	li	a1, 0x0
;                         first = false;
8021ad00: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021ad04 <.Lpcrel_hi50>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ad04: 97 d5 01 00  	auipc	a1, 0x1d
8021ad08: 93 85 25 fb  	addi	a1, a1, -0x4e
8021ad0c: 31 46        	li	a2, 0xc
8021ad0e: 97 50 01 00  	auipc	ra, 0x15
8021ad12: e7 80 80 d2  	jalr	-0x2d8(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021ad16: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ad1a: e7 80 00 22  	jalr	0x220(ra) <ekernel+0xffcccf36>
8021ad1e: a3 07 a4 fa  	sb	a0, -0x51(s0)
8021ad22: 03 45 f4 fa  	lbu	a0, -0x51(s0)
8021ad26: 05 89        	andi	a0, a0, 0x1
8021ad28: 51 d5        	beqz	a0, 0x8021acb4 <.Lpcrel_hi48+0x16>
8021ad2a: 21 a8        	j	0x8021ad42 <.Lpcrel_hi52>

000000008021ad2c <.Lpcrel_hi51>:
;                             f.write_str(" | ")?;
8021ad2c: 17 d5 01 00  	auipc	a0, 0x1d
8021ad30: 13 05 c5 f4  	addi	a0, a0, -0xb4
8021ad34: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ad38: e7 80 00 d8  	jalr	-0x280(ra) <ekernel+0xffcccab4>
8021ad3c: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021ad40: ed b0        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021ad42 <.Lpcrel_hi52>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ad42: 17 d5 01 00  	auipc	a0, 0x1d
8021ad46: 13 05 65 f3  	addi	a0, a0, -0xca
8021ad4a: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ad4e: e7 80 a0 d6  	jalr	-0x296(ra) <ekernel+0xffcccab4>
8021ad52: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021ad56: d1 b8        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021ad58: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021ad5c: 97 10 00 00  	auipc	ra, 0x1
8021ad60: e7 80 00 bc  	jalr	-0x440(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$10ANY_LAYOUT17hac53edc02cb6cee8E>
8021ad64: 45 e5        	bnez	a0, 0x8021ae0c <.Lpcrel_hi56+0x26>
8021ad66: 59 a8        	j	0x8021adfc <.Lpcrel_hi56+0x16>
;                         if !first {
8021ad68: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021ad6c: 05 89        	andi	a0, a0, 0x1
8021ad6e: 05 e9        	bnez	a0, 0x8021ad9e <.Lpcrel_hi53+0x28>
8021ad70: 09 a0        	j	0x8021ad72 <.Lpcrel_hi52+0x30>
8021ad72: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021ad76 <.Lpcrel_hi53>:
;                             f.write_str(" | ")?;
8021ad76: 97 d5 01 00  	auipc	a1, 0x1d
8021ad7a: 93 85 a5 ea  	addi	a1, a1, -0x156
8021ad7e: 0d 46        	li	a2, 0x3
8021ad80: 97 50 01 00  	auipc	ra, 0x15
8021ad84: e7 80 60 cb  	jalr	-0x34a(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021ad88: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ad8c: e7 80 e0 1a  	jalr	0x1ae(ra) <ekernel+0xffcccf36>
8021ad90: 23 08 a4 fa  	sb	a0, -0x50(s0)
8021ad94: 03 45 04 fb  	lbu	a0, -0x50(s0)
8021ad98: 05 89        	andi	a0, a0, 0x1
8021ad9a: 1d e9        	bnez	a0, 0x8021add0 <.Lpcrel_hi55>
8021ad9c: 09 a0        	j	0x8021ad9e <.Lpcrel_hi53+0x28>
8021ad9e: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021ada2: 81 45        	li	a1, 0x0
;                         first = false;
8021ada4: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021ada8 <.Lpcrel_hi54>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ada8: 97 d5 01 00  	auipc	a1, 0x1d
8021adac: 93 85 a5 f1  	addi	a1, a1, -0xe6
8021adb0: 3d 46        	li	a2, 0xf
8021adb2: 97 50 01 00  	auipc	ra, 0x15
8021adb6: e7 80 40 c8  	jalr	-0x37c(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021adba: 97 f0 ff ff  	auipc	ra, 0xfffff
8021adbe: e7 80 c0 17  	jalr	0x17c(ra) <ekernel+0xffcccf36>
8021adc2: a3 08 a4 fa  	sb	a0, -0x4f(s0)
8021adc6: 03 45 14 fb  	lbu	a0, -0x4f(s0)
8021adca: 05 89        	andi	a0, a0, 0x1
8021adcc: 51 d5        	beqz	a0, 0x8021ad58 <.Lpcrel_hi52+0x16>
8021adce: 21 a8        	j	0x8021ade6 <.Lpcrel_hi56>

000000008021add0 <.Lpcrel_hi55>:
;                             f.write_str(" | ")?;
8021add0: 17 d5 01 00  	auipc	a0, 0x1d
8021add4: 13 05 85 ea  	addi	a0, a0, -0x158
8021add8: 97 f0 ff ff  	auipc	ra, 0xfffff
8021addc: e7 80 c0 cd  	jalr	-0x324(ra) <ekernel+0xffcccab4>
8021ade0: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021ade4: 99 b0        	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021ade6 <.Lpcrel_hi56>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ade6: 17 d5 01 00  	auipc	a0, 0x1d
8021adea: 13 05 25 e9  	addi	a0, a0, -0x16e
8021adee: 97 f0 ff ff  	auipc	ra, 0xfffff
8021adf2: e7 80 60 cc  	jalr	-0x33a(ra) <ekernel+0xffcccab4>
8021adf6: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021adfa: 05 b8        	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021adfc: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021ae00: 97 10 00 00  	auipc	ra, 0x1
8021ae04: e7 80 a0 b4  	jalr	-0x4b6(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$18RING_INDIRECT_DESC17h832e570f7bb1b381E>
8021ae08: 55 e5        	bnez	a0, 0x8021aeb4 <.Lpcrel_hi60+0x28>
8021ae0a: 69 a8        	j	0x8021aea4 <.Lpcrel_hi60+0x18>
;                         if !first {
8021ae0c: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021ae10: 05 89        	andi	a0, a0, 0x1
8021ae12: 05 e9        	bnez	a0, 0x8021ae42 <.Lpcrel_hi57+0x28>
8021ae14: 09 a0        	j	0x8021ae16 <.Lpcrel_hi56+0x30>
8021ae16: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021ae1a <.Lpcrel_hi57>:
;                             f.write_str(" | ")?;
8021ae1a: 97 d5 01 00  	auipc	a1, 0x1d
8021ae1e: 93 85 65 e0  	addi	a1, a1, -0x1fa
8021ae22: 0d 46        	li	a2, 0x3
8021ae24: 97 50 01 00  	auipc	ra, 0x15
8021ae28: e7 80 20 c1  	jalr	-0x3ee(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021ae2c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ae30: e7 80 a0 10  	jalr	0x10a(ra) <ekernel+0xffcccf36>
8021ae34: 23 09 a4 fa  	sb	a0, -0x4e(s0)
8021ae38: 03 45 24 fb  	lbu	a0, -0x4e(s0)
8021ae3c: 05 89        	andi	a0, a0, 0x1
8021ae3e: 1d e9        	bnez	a0, 0x8021ae74 <.Lpcrel_hi59>
8021ae40: 09 a0        	j	0x8021ae42 <.Lpcrel_hi57+0x28>
8021ae42: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021ae46: 81 45        	li	a1, 0x0
;                         first = false;
8021ae48: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021ae4c <.Lpcrel_hi58>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ae4c: 97 d5 01 00  	auipc	a1, 0x1d
8021ae50: 93 85 55 e8  	addi	a1, a1, -0x17b
8021ae54: 29 46        	li	a2, 0xa
8021ae56: 97 50 01 00  	auipc	ra, 0x15
8021ae5a: e7 80 00 be  	jalr	-0x420(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021ae5e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ae62: e7 80 80 0d  	jalr	0xd8(ra) <ekernel+0xffcccf36>
8021ae66: a3 09 a4 fa  	sb	a0, -0x4d(s0)
8021ae6a: 03 45 34 fb  	lbu	a0, -0x4d(s0)
8021ae6e: 05 89        	andi	a0, a0, 0x1
8021ae70: 51 d5        	beqz	a0, 0x8021adfc <.Lpcrel_hi56+0x16>
8021ae72: 29 a8        	j	0x8021ae8c <.Lpcrel_hi60>

000000008021ae74 <.Lpcrel_hi59>:
;                             f.write_str(" | ")?;
8021ae74: 17 d5 01 00  	auipc	a0, 0x1d
8021ae78: 13 05 45 e0  	addi	a0, a0, -0x1fc
8021ae7c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ae80: e7 80 80 c3  	jalr	-0x3c8(ra) <ekernel+0xffcccab4>
8021ae84: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021ae88: 6f f0 2f fa  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021ae8c <.Lpcrel_hi60>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021ae8c: 17 d5 01 00  	auipc	a0, 0x1d
8021ae90: 13 05 c5 de  	addi	a0, a0, -0x214
8021ae94: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ae98: e7 80 00 c2  	jalr	-0x3e0(ra) <ekernel+0xffcccab4>
8021ae9c: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021aea0: 6f f0 af f8  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021aea4: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021aea8: 97 10 00 00  	auipc	ra, 0x1
8021aeac: e7 80 00 ad  	jalr	-0x530(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14RING_EVENT_IDX17h2b182fa29b82358cE>
8021aeb0: 55 e5        	bnez	a0, 0x8021af5c <.Lpcrel_hi64+0x28>
8021aeb2: 69 a8        	j	0x8021af4c <.Lpcrel_hi64+0x18>
;                         if !first {
8021aeb4: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021aeb8: 05 89        	andi	a0, a0, 0x1
8021aeba: 05 e9        	bnez	a0, 0x8021aeea <.Lpcrel_hi61+0x28>
8021aebc: 09 a0        	j	0x8021aebe <.Lpcrel_hi60+0x32>
8021aebe: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021aec2 <.Lpcrel_hi61>:
;                             f.write_str(" | ")?;
8021aec2: 97 d5 01 00  	auipc	a1, 0x1d
8021aec6: 93 85 e5 d5  	addi	a1, a1, -0x2a2
8021aeca: 0d 46        	li	a2, 0x3
8021aecc: 97 50 01 00  	auipc	ra, 0x15
8021aed0: e7 80 a0 b6  	jalr	-0x496(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021aed4: 97 f0 ff ff  	auipc	ra, 0xfffff
8021aed8: e7 80 20 06  	jalr	0x62(ra) <ekernel+0xffcccf36>
8021aedc: 23 0a a4 fa  	sb	a0, -0x4c(s0)
8021aee0: 03 45 44 fb  	lbu	a0, -0x4c(s0)
8021aee4: 05 89        	andi	a0, a0, 0x1
8021aee6: 1d e9        	bnez	a0, 0x8021af1c <.Lpcrel_hi63>
8021aee8: 09 a0        	j	0x8021aeea <.Lpcrel_hi61+0x28>
8021aeea: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021aeee: 81 45        	li	a1, 0x0
;                         first = false;
8021aef0: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021aef4 <.Lpcrel_hi62>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021aef4: 97 d5 01 00  	auipc	a1, 0x1d
8021aef8: 93 85 75 de  	addi	a1, a1, -0x219
8021aefc: 49 46        	li	a2, 0x12
8021aefe: 97 50 01 00  	auipc	ra, 0x15
8021af02: e7 80 80 b3  	jalr	-0x4c8(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021af06: 97 f0 ff ff  	auipc	ra, 0xfffff
8021af0a: e7 80 00 03  	jalr	0x30(ra) <ekernel+0xffcccf36>
8021af0e: a3 0a a4 fa  	sb	a0, -0x4b(s0)
8021af12: 03 45 54 fb  	lbu	a0, -0x4b(s0)
8021af16: 05 89        	andi	a0, a0, 0x1
8021af18: 51 d5        	beqz	a0, 0x8021aea4 <.Lpcrel_hi60+0x18>
8021af1a: 29 a8        	j	0x8021af34 <.Lpcrel_hi64>

000000008021af1c <.Lpcrel_hi63>:
;                             f.write_str(" | ")?;
8021af1c: 17 d5 01 00  	auipc	a0, 0x1d
8021af20: 13 05 c5 d5  	addi	a0, a0, -0x2a4
8021af24: 97 f0 ff ff  	auipc	ra, 0xfffff
8021af28: e7 80 00 b9  	jalr	-0x470(ra) <ekernel+0xffcccab4>
8021af2c: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021af30: 6f f0 af ef  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021af34 <.Lpcrel_hi64>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021af34: 17 d5 01 00  	auipc	a0, 0x1d
8021af38: 13 05 45 d4  	addi	a0, a0, -0x2bc
8021af3c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021af40: e7 80 80 b7  	jalr	-0x488(ra) <ekernel+0xffcccab4>
8021af44: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021af48: 6f f0 2f ee  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021af4c: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021af50: 97 10 00 00  	auipc	ra, 0x1
8021af54: e7 80 60 a5  	jalr	-0x5aa(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6UNUSED17hb0828040d721a883E>
8021af58: 55 e5        	bnez	a0, 0x8021b004 <.Lpcrel_hi68+0x28>
8021af5a: 69 a8        	j	0x8021aff4 <.Lpcrel_hi68+0x18>
;                         if !first {
8021af5c: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021af60: 05 89        	andi	a0, a0, 0x1
8021af62: 05 e9        	bnez	a0, 0x8021af92 <.Lpcrel_hi65+0x28>
8021af64: 09 a0        	j	0x8021af66 <.Lpcrel_hi64+0x32>
8021af66: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021af6a <.Lpcrel_hi65>:
;                             f.write_str(" | ")?;
8021af6a: 97 d5 01 00  	auipc	a1, 0x1d
8021af6e: 93 85 65 cb  	addi	a1, a1, -0x34a
8021af72: 0d 46        	li	a2, 0x3
8021af74: 97 50 01 00  	auipc	ra, 0x15
8021af78: e7 80 20 ac  	jalr	-0x53e(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021af7c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021af80: e7 80 a0 fb  	jalr	-0x46(ra) <ekernel+0xffcccf36>
8021af84: 23 0b a4 fa  	sb	a0, -0x4a(s0)
8021af88: 03 45 64 fb  	lbu	a0, -0x4a(s0)
8021af8c: 05 89        	andi	a0, a0, 0x1
8021af8e: 1d e9        	bnez	a0, 0x8021afc4 <.Lpcrel_hi67>
8021af90: 09 a0        	j	0x8021af92 <.Lpcrel_hi65+0x28>
8021af92: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021af96: 81 45        	li	a1, 0x0
;                         first = false;
8021af98: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021af9c <.Lpcrel_hi66>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021af9c: 97 d5 01 00  	auipc	a1, 0x1d
8021afa0: 93 85 15 d5  	addi	a1, a1, -0x2af
8021afa4: 39 46        	li	a2, 0xe
8021afa6: 97 50 01 00  	auipc	ra, 0x15
8021afaa: e7 80 00 a9  	jalr	-0x570(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021afae: 97 f0 ff ff  	auipc	ra, 0xfffff
8021afb2: e7 80 80 f8  	jalr	-0x78(ra) <ekernel+0xffcccf36>
8021afb6: a3 0b a4 fa  	sb	a0, -0x49(s0)
8021afba: 03 45 74 fb  	lbu	a0, -0x49(s0)
8021afbe: 05 89        	andi	a0, a0, 0x1
8021afc0: 51 d5        	beqz	a0, 0x8021af4c <.Lpcrel_hi64+0x18>
8021afc2: 29 a8        	j	0x8021afdc <.Lpcrel_hi68>

000000008021afc4 <.Lpcrel_hi67>:
;                             f.write_str(" | ")?;
8021afc4: 17 d5 01 00  	auipc	a0, 0x1d
8021afc8: 13 05 45 cb  	addi	a0, a0, -0x34c
8021afcc: 97 f0 ff ff  	auipc	ra, 0xfffff
8021afd0: e7 80 80 ae  	jalr	-0x518(ra) <ekernel+0xffcccab4>
8021afd4: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021afd8: 6f f0 2f e5  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021afdc <.Lpcrel_hi68>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021afdc: 17 d5 01 00  	auipc	a0, 0x1d
8021afe0: 13 05 c5 c9  	addi	a0, a0, -0x364
8021afe4: 97 f0 ff ff  	auipc	ra, 0xfffff
8021afe8: e7 80 00 ad  	jalr	-0x530(ra) <ekernel+0xffcccab4>
8021afec: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021aff0: 6f f0 af e3  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021aff4: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021aff8: 97 10 00 00  	auipc	ra, 0x1
8021affc: e7 80 c0 9d  	jalr	-0x624(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9VERSION_117h82eeed14d025e4ccE>
8021b000: 55 e5        	bnez	a0, 0x8021b0ac <.Lpcrel_hi72+0x28>
8021b002: 69 a8        	j	0x8021b09c <.Lpcrel_hi72+0x18>
;                         if !first {
8021b004: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b008: 05 89        	andi	a0, a0, 0x1
8021b00a: 05 e9        	bnez	a0, 0x8021b03a <.Lpcrel_hi69+0x28>
8021b00c: 09 a0        	j	0x8021b00e <.Lpcrel_hi68+0x32>
8021b00e: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b012 <.Lpcrel_hi69>:
;                             f.write_str(" | ")?;
8021b012: 97 d5 01 00  	auipc	a1, 0x1d
8021b016: 93 85 e5 c0  	addi	a1, a1, -0x3f2
8021b01a: 0d 46        	li	a2, 0x3
8021b01c: 97 50 01 00  	auipc	ra, 0x15
8021b020: e7 80 a0 a1  	jalr	-0x5e6(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b024: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b028: e7 80 20 f1  	jalr	-0xee(ra) <ekernel+0xffcccf36>
8021b02c: 23 0c a4 fa  	sb	a0, -0x48(s0)
8021b030: 03 45 84 fb  	lbu	a0, -0x48(s0)
8021b034: 05 89        	andi	a0, a0, 0x1
8021b036: 1d e9        	bnez	a0, 0x8021b06c <.Lpcrel_hi71>
8021b038: 09 a0        	j	0x8021b03a <.Lpcrel_hi69+0x28>
8021b03a: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021b03e: 81 45        	li	a1, 0x0
;                         first = false;
8021b040: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021b044 <.Lpcrel_hi70>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b044: 97 d5 01 00  	auipc	a1, 0x1d
8021b048: 93 85 75 cb  	addi	a1, a1, -0x349
8021b04c: 19 46        	li	a2, 0x6
8021b04e: 97 50 01 00  	auipc	ra, 0x15
8021b052: e7 80 80 9e  	jalr	-0x618(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b056: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b05a: e7 80 00 ee  	jalr	-0x120(ra) <ekernel+0xffcccf36>
8021b05e: a3 0c a4 fa  	sb	a0, -0x47(s0)
8021b062: 03 45 94 fb  	lbu	a0, -0x47(s0)
8021b066: 05 89        	andi	a0, a0, 0x1
8021b068: 51 d5        	beqz	a0, 0x8021aff4 <.Lpcrel_hi68+0x18>
8021b06a: 29 a8        	j	0x8021b084 <.Lpcrel_hi72>

000000008021b06c <.Lpcrel_hi71>:
;                             f.write_str(" | ")?;
8021b06c: 17 d5 01 00  	auipc	a0, 0x1d
8021b070: 13 05 c5 c0  	addi	a0, a0, -0x3f4
8021b074: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b078: e7 80 00 a4  	jalr	-0x5c0(ra) <ekernel+0xffcccab4>
8021b07c: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b080: 6f f0 af da  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b084 <.Lpcrel_hi72>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b084: 17 d5 01 00  	auipc	a0, 0x1d
8021b088: 13 05 45 bf  	addi	a0, a0, -0x40c
8021b08c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b090: e7 80 80 a2  	jalr	-0x5d8(ra) <ekernel+0xffcccab4>
8021b094: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b098: 6f f0 2f d9  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b09c: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021b0a0: 97 10 00 00  	auipc	ra, 0x1
8021b0a4: e7 80 20 96  	jalr	-0x69e(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15ACCESS_PLATFORM17h1c2c05511b6983ecE>
8021b0a8: 55 e5        	bnez	a0, 0x8021b154 <.Lpcrel_hi76+0x28>
8021b0aa: 69 a8        	j	0x8021b144 <.Lpcrel_hi76+0x18>
;                         if !first {
8021b0ac: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b0b0: 05 89        	andi	a0, a0, 0x1
8021b0b2: 05 e9        	bnez	a0, 0x8021b0e2 <.Lpcrel_hi73+0x28>
8021b0b4: 09 a0        	j	0x8021b0b6 <.Lpcrel_hi72+0x32>
8021b0b6: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b0ba <.Lpcrel_hi73>:
;                             f.write_str(" | ")?;
8021b0ba: 97 d5 01 00  	auipc	a1, 0x1d
8021b0be: 93 85 65 b6  	addi	a1, a1, -0x49a
8021b0c2: 0d 46        	li	a2, 0x3
8021b0c4: 97 50 01 00  	auipc	ra, 0x15
8021b0c8: e7 80 20 97  	jalr	-0x68e(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b0cc: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b0d0: e7 80 a0 e6  	jalr	-0x196(ra) <ekernel+0xffcccf36>
8021b0d4: 23 0d a4 fa  	sb	a0, -0x46(s0)
8021b0d8: 03 45 a4 fb  	lbu	a0, -0x46(s0)
8021b0dc: 05 89        	andi	a0, a0, 0x1
8021b0de: 1d e9        	bnez	a0, 0x8021b114 <.Lpcrel_hi75>
8021b0e0: 09 a0        	j	0x8021b0e2 <.Lpcrel_hi73+0x28>
8021b0e2: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021b0e6: 81 45        	li	a1, 0x0
;                         first = false;
8021b0e8: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021b0ec <.Lpcrel_hi74>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b0ec: 97 d5 01 00  	auipc	a1, 0x1d
8021b0f0: 93 85 55 c1  	addi	a1, a1, -0x3eb
8021b0f4: 25 46        	li	a2, 0x9
8021b0f6: 97 50 01 00  	auipc	ra, 0x15
8021b0fa: e7 80 00 94  	jalr	-0x6c0(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b0fe: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b102: e7 80 80 e3  	jalr	-0x1c8(ra) <ekernel+0xffcccf36>
8021b106: a3 0d a4 fa  	sb	a0, -0x45(s0)
8021b10a: 03 45 b4 fb  	lbu	a0, -0x45(s0)
8021b10e: 05 89        	andi	a0, a0, 0x1
8021b110: 51 d5        	beqz	a0, 0x8021b09c <.Lpcrel_hi72+0x18>
8021b112: 29 a8        	j	0x8021b12c <.Lpcrel_hi76>

000000008021b114 <.Lpcrel_hi75>:
;                             f.write_str(" | ")?;
8021b114: 17 d5 01 00  	auipc	a0, 0x1d
8021b118: 13 05 45 b6  	addi	a0, a0, -0x49c
8021b11c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b120: e7 80 80 99  	jalr	-0x668(ra) <ekernel+0xffcccab4>
8021b124: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b128: 6f f0 2f d0  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b12c <.Lpcrel_hi76>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b12c: 17 d5 01 00  	auipc	a0, 0x1d
8021b130: 13 05 c5 b4  	addi	a0, a0, -0x4b4
8021b134: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b138: e7 80 00 98  	jalr	-0x680(ra) <ekernel+0xffcccab4>
8021b13c: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b140: 6f f0 af ce  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b144: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021b148: 97 10 00 00  	auipc	ra, 0x1
8021b14c: e7 80 80 8e  	jalr	-0x718(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$11RING_PACKED17h3449f7113ff9cde5E>
8021b150: 55 e5        	bnez	a0, 0x8021b1fc <.Lpcrel_hi80+0x28>
8021b152: 69 a8        	j	0x8021b1ec <.Lpcrel_hi80+0x18>
;                         if !first {
8021b154: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b158: 05 89        	andi	a0, a0, 0x1
8021b15a: 05 e9        	bnez	a0, 0x8021b18a <.Lpcrel_hi77+0x28>
8021b15c: 09 a0        	j	0x8021b15e <.Lpcrel_hi76+0x32>
8021b15e: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b162 <.Lpcrel_hi77>:
;                             f.write_str(" | ")?;
8021b162: 97 d5 01 00  	auipc	a1, 0x1d
8021b166: 93 85 e5 ab  	addi	a1, a1, -0x542
8021b16a: 0d 46        	li	a2, 0x3
8021b16c: 97 50 01 00  	auipc	ra, 0x15
8021b170: e7 80 a0 8c  	jalr	-0x736(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b174: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b178: e7 80 20 dc  	jalr	-0x23e(ra) <ekernel+0xffcccf36>
8021b17c: 23 0e a4 fa  	sb	a0, -0x44(s0)
8021b180: 03 45 c4 fb  	lbu	a0, -0x44(s0)
8021b184: 05 89        	andi	a0, a0, 0x1
8021b186: 1d e9        	bnez	a0, 0x8021b1bc <.Lpcrel_hi79>
8021b188: 09 a0        	j	0x8021b18a <.Lpcrel_hi77+0x28>
8021b18a: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021b18e: 81 45        	li	a1, 0x0
;                         first = false;
8021b190: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021b194 <.Lpcrel_hi78>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b194: 97 d5 01 00  	auipc	a1, 0x1d
8021b198: 93 85 65 b7  	addi	a1, a1, -0x48a
8021b19c: 3d 46        	li	a2, 0xf
8021b19e: 97 50 01 00  	auipc	ra, 0x15
8021b1a2: e7 80 80 89  	jalr	-0x768(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b1a6: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b1aa: e7 80 00 d9  	jalr	-0x270(ra) <ekernel+0xffcccf36>
8021b1ae: a3 0e a4 fa  	sb	a0, -0x43(s0)
8021b1b2: 03 45 d4 fb  	lbu	a0, -0x43(s0)
8021b1b6: 05 89        	andi	a0, a0, 0x1
8021b1b8: 51 d5        	beqz	a0, 0x8021b144 <.Lpcrel_hi76+0x18>
8021b1ba: 29 a8        	j	0x8021b1d4 <.Lpcrel_hi80>

000000008021b1bc <.Lpcrel_hi79>:
;                             f.write_str(" | ")?;
8021b1bc: 17 d5 01 00  	auipc	a0, 0x1d
8021b1c0: 13 05 c5 ab  	addi	a0, a0, -0x544
8021b1c4: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b1c8: e7 80 00 8f  	jalr	-0x710(ra) <ekernel+0xffcccab4>
8021b1cc: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b1d0: 6f f0 af c5  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b1d4 <.Lpcrel_hi80>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b1d4: 17 d5 01 00  	auipc	a0, 0x1d
8021b1d8: 13 05 45 aa  	addi	a0, a0, -0x55c
8021b1dc: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b1e0: e7 80 80 8d  	jalr	-0x728(ra) <ekernel+0xffcccab4>
8021b1e4: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b1e8: 6f f0 2f c4  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b1ec: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021b1f0: 97 10 00 00  	auipc	ra, 0x1
8021b1f4: e7 80 e0 86  	jalr	-0x792(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8IN_ORDER17h1fcfd55db51eadf7E>
8021b1f8: 55 e5        	bnez	a0, 0x8021b2a4 <.Lpcrel_hi84+0x28>
8021b1fa: 69 a8        	j	0x8021b294 <.Lpcrel_hi84+0x18>
;                         if !first {
8021b1fc: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b200: 05 89        	andi	a0, a0, 0x1
8021b202: 05 e9        	bnez	a0, 0x8021b232 <.Lpcrel_hi81+0x28>
8021b204: 09 a0        	j	0x8021b206 <.Lpcrel_hi80+0x32>
8021b206: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b20a <.Lpcrel_hi81>:
;                             f.write_str(" | ")?;
8021b20a: 97 d5 01 00  	auipc	a1, 0x1d
8021b20e: 93 85 65 a1  	addi	a1, a1, -0x5ea
8021b212: 0d 46        	li	a2, 0x3
8021b214: 97 50 01 00  	auipc	ra, 0x15
8021b218: e7 80 20 82  	jalr	-0x7de(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b21c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b220: e7 80 a0 d1  	jalr	-0x2e6(ra) <ekernel+0xffcccf36>
8021b224: 23 0f a4 fa  	sb	a0, -0x42(s0)
8021b228: 03 45 e4 fb  	lbu	a0, -0x42(s0)
8021b22c: 05 89        	andi	a0, a0, 0x1
8021b22e: 1d e9        	bnez	a0, 0x8021b264 <.Lpcrel_hi83>
8021b230: 09 a0        	j	0x8021b232 <.Lpcrel_hi81+0x28>
8021b232: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021b236: 81 45        	li	a1, 0x0
;                         first = false;
8021b238: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021b23c <.Lpcrel_hi82>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b23c: 97 d5 01 00  	auipc	a1, 0x1d
8021b240: 93 85 d5 ad  	addi	a1, a1, -0x523
8021b244: 2d 46        	li	a2, 0xb
8021b246: 97 40 01 00  	auipc	ra, 0x14
8021b24a: e7 80 00 7f  	jalr	0x7f0(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b24e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b252: e7 80 80 ce  	jalr	-0x318(ra) <ekernel+0xffcccf36>
8021b256: a3 0f a4 fa  	sb	a0, -0x41(s0)
8021b25a: 03 45 f4 fb  	lbu	a0, -0x41(s0)
8021b25e: 05 89        	andi	a0, a0, 0x1
8021b260: 51 d5        	beqz	a0, 0x8021b1ec <.Lpcrel_hi80+0x18>
8021b262: 29 a8        	j	0x8021b27c <.Lpcrel_hi84>

000000008021b264 <.Lpcrel_hi83>:
;                             f.write_str(" | ")?;
8021b264: 17 d5 01 00  	auipc	a0, 0x1d
8021b268: 13 05 45 a1  	addi	a0, a0, -0x5ec
8021b26c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b270: e7 80 80 84  	jalr	-0x7b8(ra) <ekernel+0xffcccab4>
8021b274: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b278: 6f f0 2f bb  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b27c <.Lpcrel_hi84>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b27c: 17 d5 01 00  	auipc	a0, 0x1d
8021b280: 13 05 c5 9f  	addi	a0, a0, -0x604
8021b284: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b288: e7 80 00 83  	jalr	-0x7d0(ra) <ekernel+0xffcccab4>
8021b28c: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b290: 6f f0 af b9  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b294: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021b298: 97 00 00 00  	auipc	ra, 0x0
8021b29c: e7 80 40 7f  	jalr	0x7f4(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14ORDER_PLATFORM17hb53973f47ce60ae4E>
8021b2a0: 55 e5        	bnez	a0, 0x8021b34c <.Lpcrel_hi88+0x28>
8021b2a2: 69 a8        	j	0x8021b33c <.Lpcrel_hi88+0x18>
;                         if !first {
8021b2a4: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b2a8: 05 89        	andi	a0, a0, 0x1
8021b2aa: 05 e9        	bnez	a0, 0x8021b2da <.Lpcrel_hi85+0x28>
8021b2ac: 09 a0        	j	0x8021b2ae <.Lpcrel_hi84+0x32>
8021b2ae: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b2b2 <.Lpcrel_hi85>:
;                             f.write_str(" | ")?;
8021b2b2: 97 d5 01 00  	auipc	a1, 0x1d
8021b2b6: 93 85 e5 96  	addi	a1, a1, -0x692
8021b2ba: 0d 46        	li	a2, 0x3
8021b2bc: 97 40 01 00  	auipc	ra, 0x14
8021b2c0: e7 80 a0 77  	jalr	0x77a(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b2c4: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b2c8: e7 80 20 c7  	jalr	-0x38e(ra) <ekernel+0xffcccf36>
8021b2cc: 23 00 a4 fc  	sb	a0, -0x40(s0)
8021b2d0: 03 45 04 fc  	lbu	a0, -0x40(s0)
8021b2d4: 05 89        	andi	a0, a0, 0x1
8021b2d6: 1d e9        	bnez	a0, 0x8021b30c <.Lpcrel_hi87>
8021b2d8: 09 a0        	j	0x8021b2da <.Lpcrel_hi85+0x28>
8021b2da: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021b2de: 81 45        	li	a1, 0x0
;                         first = false;
8021b2e0: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021b2e4 <.Lpcrel_hi86>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b2e4: 97 85 01 00  	auipc	a1, 0x18
8021b2e8: 93 85 45 17  	addi	a1, a1, 0x174
8021b2ec: 21 46        	li	a2, 0x8
8021b2ee: 97 40 01 00  	auipc	ra, 0x14
8021b2f2: e7 80 80 74  	jalr	0x748(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b2f6: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b2fa: e7 80 00 c4  	jalr	-0x3c0(ra) <ekernel+0xffcccf36>
8021b2fe: a3 00 a4 fc  	sb	a0, -0x3f(s0)
8021b302: 03 45 14 fc  	lbu	a0, -0x3f(s0)
8021b306: 05 89        	andi	a0, a0, 0x1
8021b308: 51 d5        	beqz	a0, 0x8021b294 <.Lpcrel_hi84+0x18>
8021b30a: 29 a8        	j	0x8021b324 <.Lpcrel_hi88>

000000008021b30c <.Lpcrel_hi87>:
;                             f.write_str(" | ")?;
8021b30c: 17 d5 01 00  	auipc	a0, 0x1d
8021b310: 13 05 c5 96  	addi	a0, a0, -0x694
8021b314: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b318: e7 80 00 7a  	jalr	0x7a0(ra) <ekernel+0xffcccab4>
8021b31c: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b320: 6f f0 af b0  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b324 <.Lpcrel_hi88>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b324: 17 d5 01 00  	auipc	a0, 0x1d
8021b328: 13 05 45 95  	addi	a0, a0, -0x6ac
8021b32c: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b330: e7 80 80 78  	jalr	0x788(ra) <ekernel+0xffcccab4>
8021b334: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b338: 6f f0 2f af  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b33c: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021b340: 97 00 00 00  	auipc	ra, 0x0
8021b344: e7 80 a0 77  	jalr	0x77a(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SR_IOV17h996afa0a7e62d25fE>
8021b348: 55 e5        	bnez	a0, 0x8021b3f4 <.Lpcrel_hi92+0x28>
8021b34a: 69 a8        	j	0x8021b3e4 <.Lpcrel_hi92+0x18>
;                         if !first {
8021b34c: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b350: 05 89        	andi	a0, a0, 0x1
8021b352: 05 e9        	bnez	a0, 0x8021b382 <.Lpcrel_hi89+0x28>
8021b354: 09 a0        	j	0x8021b356 <.Lpcrel_hi88+0x32>
8021b356: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b35a <.Lpcrel_hi89>:
;                             f.write_str(" | ")?;
8021b35a: 97 d5 01 00  	auipc	a1, 0x1d
8021b35e: 93 85 65 8c  	addi	a1, a1, -0x73a
8021b362: 0d 46        	li	a2, 0x3
8021b364: 97 40 01 00  	auipc	ra, 0x14
8021b368: e7 80 20 6d  	jalr	0x6d2(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b36c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b370: e7 80 a0 bc  	jalr	-0x436(ra) <ekernel+0xffcccf36>
8021b374: 23 01 a4 fc  	sb	a0, -0x3e(s0)
8021b378: 03 45 24 fc  	lbu	a0, -0x3e(s0)
8021b37c: 05 89        	andi	a0, a0, 0x1
8021b37e: 1d e9        	bnez	a0, 0x8021b3b4 <.Lpcrel_hi91>
8021b380: 09 a0        	j	0x8021b382 <.Lpcrel_hi89+0x28>
8021b382: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021b386: 81 45        	li	a1, 0x0
;                         first = false;
8021b388: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021b38c <.Lpcrel_hi90>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b38c: 97 d5 01 00  	auipc	a1, 0x1d
8021b390: 93 85 85 99  	addi	a1, a1, -0x668
8021b394: 39 46        	li	a2, 0xe
8021b396: 97 40 01 00  	auipc	ra, 0x14
8021b39a: e7 80 00 6a  	jalr	0x6a0(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b39e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b3a2: e7 80 80 b9  	jalr	-0x468(ra) <ekernel+0xffcccf36>
8021b3a6: a3 01 a4 fc  	sb	a0, -0x3d(s0)
8021b3aa: 03 45 34 fc  	lbu	a0, -0x3d(s0)
8021b3ae: 05 89        	andi	a0, a0, 0x1
8021b3b0: 51 d5        	beqz	a0, 0x8021b33c <.Lpcrel_hi88+0x18>
8021b3b2: 29 a8        	j	0x8021b3cc <.Lpcrel_hi92>

000000008021b3b4 <.Lpcrel_hi91>:
;                             f.write_str(" | ")?;
8021b3b4: 17 d5 01 00  	auipc	a0, 0x1d
8021b3b8: 13 05 45 8c  	addi	a0, a0, -0x73c
8021b3bc: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b3c0: e7 80 80 6f  	jalr	0x6f8(ra) <ekernel+0xffcccab4>
8021b3c4: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b3c8: 6f f0 2f a6  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b3cc <.Lpcrel_hi92>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b3cc: 17 d5 01 00  	auipc	a0, 0x1d
8021b3d0: 13 05 c5 8a  	addi	a0, a0, -0x754
8021b3d4: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b3d8: e7 80 00 6e  	jalr	0x6e0(ra) <ekernel+0xffcccab4>
8021b3dc: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b3e0: 6f f0 af a4  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b3e4: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                     if <Self as __BitFlags>::$Flag(self) {
8021b3e8: 97 00 00 00  	auipc	ra, 0x0
8021b3ec: e7 80 00 70  	jalr	0x700(ra) <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17NOTIFICATION_DATA17hd1f180b7144e7b79E>
8021b3f0: 79 e9        	bnez	a0, 0x8021b4c6 <.Lpcrel_hi96+0x52>
8021b3f2: 69 a8        	j	0x8021b48c <.Lpcrel_hi96+0x18>
;                         if !first {
8021b3f4: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b3f8: 05 89        	andi	a0, a0, 0x1
8021b3fa: 05 e9        	bnez	a0, 0x8021b42a <.Lpcrel_hi93+0x28>
8021b3fc: 09 a0        	j	0x8021b3fe <.Lpcrel_hi92+0x32>
8021b3fe: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b402 <.Lpcrel_hi93>:
;                             f.write_str(" | ")?;
8021b402: 97 d5 01 00  	auipc	a1, 0x1d
8021b406: 93 85 e5 81  	addi	a1, a1, -0x7e2
8021b40a: 0d 46        	li	a2, 0x3
8021b40c: 97 40 01 00  	auipc	ra, 0x14
8021b410: e7 80 a0 62  	jalr	0x62a(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b414: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b418: e7 80 20 b2  	jalr	-0x4de(ra) <ekernel+0xffcccf36>
8021b41c: 23 02 a4 fc  	sb	a0, -0x3c(s0)
8021b420: 03 45 44 fc  	lbu	a0, -0x3c(s0)
8021b424: 05 89        	andi	a0, a0, 0x1
8021b426: 1d e9        	bnez	a0, 0x8021b45c <.Lpcrel_hi95>
8021b428: 09 a0        	j	0x8021b42a <.Lpcrel_hi93+0x28>
8021b42a: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021b42e: 81 45        	li	a1, 0x0
;                         first = false;
8021b430: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021b434 <.Lpcrel_hi94>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b434: 97 d5 01 00  	auipc	a1, 0x1d
8021b438: 93 85 e5 8f  	addi	a1, a1, -0x702
8021b43c: 19 46        	li	a2, 0x6
8021b43e: 97 40 01 00  	auipc	ra, 0x14
8021b442: e7 80 80 5f  	jalr	0x5f8(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b446: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b44a: e7 80 00 af  	jalr	-0x510(ra) <ekernel+0xffcccf36>
8021b44e: a3 02 a4 fc  	sb	a0, -0x3b(s0)
8021b452: 03 45 54 fc  	lbu	a0, -0x3b(s0)
8021b456: 05 89        	andi	a0, a0, 0x1
8021b458: 51 d5        	beqz	a0, 0x8021b3e4 <.Lpcrel_hi92+0x18>
8021b45a: 29 a8        	j	0x8021b474 <.Lpcrel_hi96>

000000008021b45c <.Lpcrel_hi95>:
;                             f.write_str(" | ")?;
8021b45c: 17 d5 01 00  	auipc	a0, 0x1d
8021b460: 13 05 c5 81  	addi	a0, a0, -0x7e4
8021b464: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b468: e7 80 00 65  	jalr	0x650(ra) <ekernel+0xffcccab4>
8021b46c: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b470: 6f f0 af 9b  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b474 <.Lpcrel_hi96>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b474: 17 d5 01 00  	auipc	a0, 0x1d
8021b478: 13 05 45 80  	addi	a0, a0, -0x7fc
8021b47c: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b480: e7 80 80 63  	jalr	0x638(ra) <ekernel+0xffcccab4>
8021b484: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b488: 6f f0 2f 9a  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b48c: 03 35 04 f2  	ld	a0, -0xe0(s0)
;                 let extra_bits = self.bits & !Self::all().bits();
8021b490: 08 61        	ld	a0, 0x0(a0)
8021b492: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8021b496: 97 00 00 00  	auipc	ra, 0x0
8021b49a: e7 80 60 1f  	jalr	0x1f6(ra) <_ZN14virtio_drivers3blk10BlkFeature3all17he36dac42e42e8d2fE>
8021b49e: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021b4a2: 13 05 04 fd  	addi	a0, s0, -0x30
8021b4a6: 97 00 00 00  	auipc	ra, 0x0
8021b4aa: e7 80 a0 20  	jalr	0x20a(ra) <_ZN14virtio_drivers3blk10BlkFeature4bits17h1356af7eff9d9eccE>
8021b4ae: aa 85        	mv	a1, a0
8021b4b0: 03 35 04 f1  	ld	a0, -0xf0(s0)
8021b4b4: 93 c5 f5 ff  	not	a1, a1
8021b4b8: 6d 8d        	and	a0, a0, a1
8021b4ba: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                 if extra_bits != 0 {
8021b4be: 03 35 84 fc  	ld	a0, -0x38(s0)
8021b4c2: 51 cd        	beqz	a0, 0x8021b55e <.Lpcrel_hi100+0x18>
8021b4c4: 55 a0        	j	0x8021b568 <.Lpcrel_hi100+0x22>
;                         if !first {
8021b4c6: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b4ca: 05 89        	andi	a0, a0, 0x1
8021b4cc: 05 e9        	bnez	a0, 0x8021b4fc <.Lpcrel_hi97+0x28>
8021b4ce: 09 a0        	j	0x8021b4d0 <.Lpcrel_hi96+0x5c>
8021b4d0: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b4d4 <.Lpcrel_hi97>:
;                             f.write_str(" | ")?;
8021b4d4: 97 c5 01 00  	auipc	a1, 0x1c
8021b4d8: 93 85 c5 74  	addi	a1, a1, 0x74c
8021b4dc: 0d 46        	li	a2, 0x3
8021b4de: 97 40 01 00  	auipc	ra, 0x14
8021b4e2: e7 80 80 55  	jalr	0x558(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b4e6: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b4ea: e7 80 00 a5  	jalr	-0x5b0(ra) <ekernel+0xffcccf36>
8021b4ee: 23 03 a4 fc  	sb	a0, -0x3a(s0)
8021b4f2: 03 45 64 fc  	lbu	a0, -0x3a(s0)
8021b4f6: 05 89        	andi	a0, a0, 0x1
8021b4f8: 1d e9        	bnez	a0, 0x8021b52e <.Lpcrel_hi99>
8021b4fa: 09 a0        	j	0x8021b4fc <.Lpcrel_hi97+0x28>
8021b4fc: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021b500: 81 45        	li	a1, 0x0
;                         first = false;
8021b502: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021b506 <.Lpcrel_hi98>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b506: 97 d5 01 00  	auipc	a1, 0x1d
8021b50a: 93 85 25 83  	addi	a1, a1, -0x7ce
8021b50e: 45 46        	li	a2, 0x11
8021b510: 97 40 01 00  	auipc	ra, 0x14
8021b514: e7 80 60 52  	jalr	0x526(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b518: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b51c: e7 80 e0 a1  	jalr	-0x5e2(ra) <ekernel+0xffcccf36>
8021b520: a3 03 a4 fc  	sb	a0, -0x39(s0)
8021b524: 03 45 74 fc  	lbu	a0, -0x39(s0)
8021b528: 05 89        	andi	a0, a0, 0x1
8021b52a: 2d d1        	beqz	a0, 0x8021b48c <.Lpcrel_hi96+0x18>
8021b52c: 29 a8        	j	0x8021b546 <.Lpcrel_hi100>

000000008021b52e <.Lpcrel_hi99>:
;                             f.write_str(" | ")?;
8021b52e: 17 c5 01 00  	auipc	a0, 0x1c
8021b532: 13 05 a5 74  	addi	a0, a0, 0x74a
8021b536: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b53a: e7 80 e0 57  	jalr	0x57e(ra) <ekernel+0xffcccab4>
8021b53e: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b542: 6f f0 8f 8e  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b546 <.Lpcrel_hi100>:
;                         f.write_str($crate::_core::stringify!($Flag))?;
8021b546: 17 c5 01 00  	auipc	a0, 0x1c
8021b54a: 13 05 25 73  	addi	a0, a0, 0x732
8021b54e: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b552: e7 80 60 56  	jalr	0x566(ra) <ekernel+0xffcccab4>
8021b556: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b55a: 6f f0 0f 8d  	j	0x8021a62a <.Lpcrel_hi7+0x16>
;                 if first {
8021b55e: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b562: 05 89        	andi	a0, a0, 0x1
8021b564: 75 e1        	bnez	a0, 0x8021b648 <.Lpcrel_hi105+0x22>
8021b566: e1 a8        	j	0x8021b63e <.Lpcrel_hi105+0x18>
;                     if !first {
8021b568: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021b56c: 05 89        	andi	a0, a0, 0x1
8021b56e: 05 e9        	bnez	a0, 0x8021b59e <.Lpcrel_hi101+0x28>
8021b570: 09 a0        	j	0x8021b572 <.Lpcrel_hi100+0x2c>
8021b572: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b576 <.Lpcrel_hi101>:
;                         f.write_str(" | ")?;
8021b576: 97 c5 01 00  	auipc	a1, 0x1c
8021b57a: 93 85 a5 6a  	addi	a1, a1, 0x6aa
8021b57e: 0d 46        	li	a2, 0x3
8021b580: 97 40 01 00  	auipc	ra, 0x14
8021b584: e7 80 60 4b  	jalr	0x4b6(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b588: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b58c: e7 80 e0 9a  	jalr	-0x652(ra) <ekernel+0xffcccf36>
8021b590: 23 0e a4 fc  	sb	a0, -0x24(s0)
8021b594: 03 45 c4 fd  	lbu	a0, -0x24(s0)
8021b598: 05 89        	andi	a0, a0, 0x1
8021b59a: 1d e9        	bnez	a0, 0x8021b5d0 <.Lpcrel_hi103>
8021b59c: 09 a0        	j	0x8021b59e <.Lpcrel_hi101+0x28>
8021b59e: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021b5a2: 81 45        	li	a1, 0x0
;                     first = false;
8021b5a4: a3 0b b4 f8  	sb	a1, -0x69(s0)

000000008021b5a8 <.Lpcrel_hi102>:
;                     f.write_str("0x")?;
8021b5a8: 97 c5 01 00  	auipc	a1, 0x1c
8021b5ac: 93 85 15 7a  	addi	a1, a1, 0x7a1
8021b5b0: 09 46        	li	a2, 0x2
8021b5b2: 97 40 01 00  	auipc	ra, 0x14
8021b5b6: e7 80 40 48  	jalr	0x484(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b5ba: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b5be: e7 80 c0 97  	jalr	-0x684(ra) <ekernel+0xffcccf36>
8021b5c2: a3 0e a4 fc  	sb	a0, -0x23(s0)
8021b5c6: 03 45 d4 fd  	lbu	a0, -0x23(s0)
8021b5ca: 05 89        	andi	a0, a0, 0x1
8021b5cc: 11 cd        	beqz	a0, 0x8021b5e8 <.Lpcrel_hi103+0x18>
8021b5ce: 81 a0        	j	0x8021b60e <.Lpcrel_hi104>

000000008021b5d0 <.Lpcrel_hi103>:
;                         f.write_str(" | ")?;
8021b5d0: 17 c5 01 00  	auipc	a0, 0x1c
8021b5d4: 13 05 85 6a  	addi	a0, a0, 0x6a8
8021b5d8: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b5dc: e7 80 c0 4d  	jalr	0x4dc(ra) <ekernel+0xffcccab4>
8021b5e0: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b5e4: 6f f0 6f 84  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b5e8: 83 35 84 f1  	ld	a1, -0xe8(s0)
8021b5ec: 13 05 84 fc  	addi	a0, s0, -0x38
;                     $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
8021b5f0: 97 40 01 00  	auipc	ra, 0x14
8021b5f4: e7 80 40 9c  	jalr	-0x63c(ra) <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E>
8021b5f8: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b5fc: e7 80 e0 93  	jalr	-0x6c2(ra) <ekernel+0xffcccf36>
8021b600: 23 0f a4 fc  	sb	a0, -0x22(s0)
8021b604: 03 45 e4 fd  	lbu	a0, -0x22(s0)
8021b608: 05 89        	andi	a0, a0, 0x1
8021b60a: 31 d9        	beqz	a0, 0x8021b55e <.Lpcrel_hi100+0x18>
8021b60c: 29 a8        	j	0x8021b626 <.Lpcrel_hi105>

000000008021b60e <.Lpcrel_hi104>:
;                     f.write_str("0x")?;
8021b60e: 17 c5 01 00  	auipc	a0, 0x1c
8021b612: 13 05 a5 66  	addi	a0, a0, 0x66a
8021b616: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b61a: e7 80 e0 49  	jalr	0x49e(ra) <ekernel+0xffcccab4>
8021b61e: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b622: 6f f0 8f 80  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b626 <.Lpcrel_hi105>:
;                     $crate::_core::fmt::LowerHex::fmt(&extra_bits, f)?;
8021b626: 17 c5 01 00  	auipc	a0, 0x1c
8021b62a: 13 05 25 65  	addi	a0, a0, 0x652
8021b62e: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b632: e7 80 60 48  	jalr	0x486(ra) <ekernel+0xffcccab4>
8021b636: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b63a: 6f e0 1f ff  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b63e: 01 45        	li	a0, 0x0
;                 Ok(())
8021b640: 23 0b a4 f8  	sb	a0, -0x6a(s0)
;             }
8021b644: 6f e0 7f fe  	j	0x8021a62a <.Lpcrel_hi7+0x16>
8021b648: 03 35 84 f1  	ld	a0, -0xe8(s0)

000000008021b64c <.Lpcrel_hi106>:
;                     f.write_str("(empty)")?;
8021b64c: 97 c5 01 00  	auipc	a1, 0x1c
8021b650: 93 85 f5 6f  	addi	a1, a1, 0x6ff
8021b654: 1d 46        	li	a2, 0x7
8021b656: 97 40 01 00  	auipc	ra, 0x14
8021b65a: e7 80 00 3e  	jalr	0x3e0(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8021b65e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021b662: e7 80 80 8d  	jalr	-0x728(ra) <ekernel+0xffcccf36>
8021b666: a3 0f a4 fc  	sb	a0, -0x21(s0)
8021b66a: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8021b66e: 05 89        	andi	a0, a0, 0x1
8021b670: 79 d5        	beqz	a0, 0x8021b63e <.Lpcrel_hi105+0x18>
8021b672: 09 a0        	j	0x8021b674 <.Lpcrel_hi107>

000000008021b674 <.Lpcrel_hi107>:
8021b674: 17 c5 01 00  	auipc	a0, 0x1c
8021b678: 13 05 45 60  	addi	a0, a0, 0x604
8021b67c: 97 e0 ff ff  	auipc	ra, 0xffffe
8021b680: e7 80 80 43  	jalr	0x438(ra) <ekernel+0xffcccab4>
8021b684: 23 0b a4 f8  	sb	a0, -0x6a(s0)
8021b688: 6f e0 3f fa  	j	0x8021a62a <.Lpcrel_hi7+0x16>

000000008021b68c <_ZN14virtio_drivers3blk10BlkFeature3all17he36dac42e42e8d2fE>:
;             pub const fn all() -> Self {
8021b68c: 01 11        	addi	sp, sp, -0x20
8021b68e: 06 ec        	sd	ra, 0x18(sp)
8021b690: 22 e8        	sd	s0, 0x10(sp)
8021b692: 00 10        	addi	s0, sp, 0x20
8021b694: 37 95 f7 07  	lui	a0, 0x7f79
8021b698: 1d 25        	addiw	a0, a0, 0x7
8021b69a: 32 05        	slli	a0, a0, 0xc
8021b69c: 13 05 75 ef  	addi	a0, a0, -0x109
;                 __impl_all_bitflags! {
8021b6a0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             }
8021b6a4: 03 35 84 fe  	ld	a0, -0x18(s0)
8021b6a8: e2 60        	ld	ra, 0x18(sp)
8021b6aa: 42 64        	ld	s0, 0x10(sp)
8021b6ac: 05 61        	addi	sp, sp, 0x20
8021b6ae: 82 80        	ret

000000008021b6b0 <_ZN14virtio_drivers3blk10BlkFeature4bits17h1356af7eff9d9eccE>:
;             pub const fn bits(&self) -> $T {
8021b6b0: 01 11        	addi	sp, sp, -0x20
8021b6b2: 06 ec        	sd	ra, 0x18(sp)
8021b6b4: 22 e8        	sd	s0, 0x10(sp)
8021b6b6: 00 10        	addi	s0, sp, 0x20
8021b6b8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 self.bits
8021b6bc: 08 61        	ld	a0, 0x0(a0)
8021b6be: e2 60        	ld	ra, 0x18(sp)
8021b6c0: 42 64        	ld	s0, 0x10(sp)
;             }
8021b6c2: 05 61        	addi	sp, sp, 0x20
8021b6c4: 82 80        	ret

000000008021b6c6 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7BARRIER17hcb34bc61d5557f59E>:
;         fn $($item)*
8021b6c6: 79 71        	addi	sp, sp, -0x30
8021b6c8: 06 f4        	sd	ra, 0x28(sp)
8021b6ca: 22 f0        	sd	s0, 0x20(sp)
8021b6cc: 00 18        	addi	s0, sp, 0x30
8021b6ce: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b6d2: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b6d6: 09 a0        	j	0x8021b6d8 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7BARRIER17hcb34bc61d5557f59E+0x12>
8021b6d8: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b6dc: 03 45 05 00  	lbu	a0, 0x0(a0)
8021b6e0: 05 89        	andi	a0, a0, 0x1
8021b6e2: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b6e6: 09 a0        	j	0x8021b6e8 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7BARRIER17hcb34bc61d5557f59E+0x22>
;         fn $($item)*
8021b6e8: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b6ec: a2 70        	ld	ra, 0x28(sp)
8021b6ee: 02 74        	ld	s0, 0x20(sp)
8021b6f0: 45 61        	addi	sp, sp, 0x30
8021b6f2: 82 80        	ret

000000008021b6f4 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8SIZE_MAX17hde67b390147a9af9E>:
8021b6f4: 79 71        	addi	sp, sp, -0x30
8021b6f6: 06 f4        	sd	ra, 0x28(sp)
8021b6f8: 22 f0        	sd	s0, 0x20(sp)
8021b6fa: 00 18        	addi	s0, sp, 0x30
8021b6fc: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b700: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b704: 09 a0        	j	0x8021b706 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8SIZE_MAX17hde67b390147a9af9E+0x12>
8021b706: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b70a: 08 61        	ld	a0, 0x0(a0)
8021b70c: 7a 15        	slli	a0, a0, 0x3e
8021b70e: 7d 91        	srli	a0, a0, 0x3f
8021b710: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b714: 09 a0        	j	0x8021b716 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8SIZE_MAX17hde67b390147a9af9E+0x22>
;         fn $($item)*
8021b716: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b71a: a2 70        	ld	ra, 0x28(sp)
8021b71c: 02 74        	ld	s0, 0x20(sp)
8021b71e: 45 61        	addi	sp, sp, 0x30
8021b720: 82 80        	ret

000000008021b722 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7SEG_MAX17h0ff37367a71d5edfE>:
8021b722: 79 71        	addi	sp, sp, -0x30
8021b724: 06 f4        	sd	ra, 0x28(sp)
8021b726: 22 f0        	sd	s0, 0x20(sp)
8021b728: 00 18        	addi	s0, sp, 0x30
8021b72a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b72e: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b732: 09 a0        	j	0x8021b734 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7SEG_MAX17h0ff37367a71d5edfE+0x12>
8021b734: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b738: 08 61        	ld	a0, 0x0(a0)
8021b73a: 76 15        	slli	a0, a0, 0x3d
8021b73c: 7d 91        	srli	a0, a0, 0x3f
8021b73e: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b742: 09 a0        	j	0x8021b744 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7SEG_MAX17h0ff37367a71d5edfE+0x22>
;         fn $($item)*
8021b744: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b748: a2 70        	ld	ra, 0x28(sp)
8021b74a: 02 74        	ld	s0, 0x20(sp)
8021b74c: 45 61        	addi	sp, sp, 0x30
8021b74e: 82 80        	ret

000000008021b750 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8GEOMETRY17hc6e7173bbb9f6ff8E>:
8021b750: 79 71        	addi	sp, sp, -0x30
8021b752: 06 f4        	sd	ra, 0x28(sp)
8021b754: 22 f0        	sd	s0, 0x20(sp)
8021b756: 00 18        	addi	s0, sp, 0x30
8021b758: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b75c: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b760: 09 a0        	j	0x8021b762 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8GEOMETRY17hc6e7173bbb9f6ff8E+0x12>
8021b762: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b766: 08 61        	ld	a0, 0x0(a0)
8021b768: 6e 15        	slli	a0, a0, 0x3b
8021b76a: 7d 91        	srli	a0, a0, 0x3f
8021b76c: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b770: 09 a0        	j	0x8021b772 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8GEOMETRY17hc6e7173bbb9f6ff8E+0x22>
;         fn $($item)*
8021b772: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b776: a2 70        	ld	ra, 0x28(sp)
8021b778: 02 74        	ld	s0, 0x20(sp)
8021b77a: 45 61        	addi	sp, sp, 0x30
8021b77c: 82 80        	ret

000000008021b77e <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2RO17hf8c7b57707ff4e0dE>:
8021b77e: 79 71        	addi	sp, sp, -0x30
8021b780: 06 f4        	sd	ra, 0x28(sp)
8021b782: 22 f0        	sd	s0, 0x20(sp)
8021b784: 00 18        	addi	s0, sp, 0x30
8021b786: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b78a: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b78e: 09 a0        	j	0x8021b790 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2RO17hf8c7b57707ff4e0dE+0x12>
8021b790: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b794: 08 61        	ld	a0, 0x0(a0)
8021b796: 6a 15        	slli	a0, a0, 0x3a
8021b798: 7d 91        	srli	a0, a0, 0x3f
8021b79a: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b79e: 09 a0        	j	0x8021b7a0 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$2RO17hf8c7b57707ff4e0dE+0x22>
;         fn $($item)*
8021b7a0: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b7a4: a2 70        	ld	ra, 0x28(sp)
8021b7a6: 02 74        	ld	s0, 0x20(sp)
8021b7a8: 45 61        	addi	sp, sp, 0x30
8021b7aa: 82 80        	ret

000000008021b7ac <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8BLK_SIZE17h7bb2dd542f7ae6a5E>:
8021b7ac: 79 71        	addi	sp, sp, -0x30
8021b7ae: 06 f4        	sd	ra, 0x28(sp)
8021b7b0: 22 f0        	sd	s0, 0x20(sp)
8021b7b2: 00 18        	addi	s0, sp, 0x30
8021b7b4: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b7b8: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b7bc: 09 a0        	j	0x8021b7be <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8BLK_SIZE17h7bb2dd542f7ae6a5E+0x12>
8021b7be: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b7c2: 08 61        	ld	a0, 0x0(a0)
8021b7c4: 66 15        	slli	a0, a0, 0x39
8021b7c6: 7d 91        	srli	a0, a0, 0x3f
8021b7c8: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b7cc: 09 a0        	j	0x8021b7ce <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8BLK_SIZE17h7bb2dd542f7ae6a5E+0x22>
;         fn $($item)*
8021b7ce: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b7d2: a2 70        	ld	ra, 0x28(sp)
8021b7d4: 02 74        	ld	s0, 0x20(sp)
8021b7d6: 45 61        	addi	sp, sp, 0x30
8021b7d8: 82 80        	ret

000000008021b7da <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SCSI17h14f8e65359e9881cE>:
8021b7da: 79 71        	addi	sp, sp, -0x30
8021b7dc: 06 f4        	sd	ra, 0x28(sp)
8021b7de: 22 f0        	sd	s0, 0x20(sp)
8021b7e0: 00 18        	addi	s0, sp, 0x30
8021b7e2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b7e6: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b7ea: 09 a0        	j	0x8021b7ec <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SCSI17h14f8e65359e9881cE+0x12>
8021b7ec: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b7f0: 08 61        	ld	a0, 0x0(a0)
8021b7f2: 62 15        	slli	a0, a0, 0x38
8021b7f4: 7d 91        	srli	a0, a0, 0x3f
8021b7f6: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b7fa: 09 a0        	j	0x8021b7fc <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$4SCSI17h14f8e65359e9881cE+0x22>
;         fn $($item)*
8021b7fc: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b800: a2 70        	ld	ra, 0x28(sp)
8021b802: 02 74        	ld	s0, 0x20(sp)
8021b804: 45 61        	addi	sp, sp, 0x30
8021b806: 82 80        	ret

000000008021b808 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5FLUSH17h6de5db6b88200fa6E>:
8021b808: 79 71        	addi	sp, sp, -0x30
8021b80a: 06 f4        	sd	ra, 0x28(sp)
8021b80c: 22 f0        	sd	s0, 0x20(sp)
8021b80e: 00 18        	addi	s0, sp, 0x30
8021b810: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b814: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b818: 09 a0        	j	0x8021b81a <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5FLUSH17h6de5db6b88200fa6E+0x12>
8021b81a: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b81e: 08 61        	ld	a0, 0x0(a0)
8021b820: 5a 15        	slli	a0, a0, 0x36
8021b822: 7d 91        	srli	a0, a0, 0x3f
8021b824: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b828: 09 a0        	j	0x8021b82a <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$5FLUSH17h6de5db6b88200fa6E+0x22>
;         fn $($item)*
8021b82a: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b82e: a2 70        	ld	ra, 0x28(sp)
8021b830: 02 74        	ld	s0, 0x20(sp)
8021b832: 45 61        	addi	sp, sp, 0x30
8021b834: 82 80        	ret

000000008021b836 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8TOPOLOGY17hbc7363b9e6700577E>:
8021b836: 79 71        	addi	sp, sp, -0x30
8021b838: 06 f4        	sd	ra, 0x28(sp)
8021b83a: 22 f0        	sd	s0, 0x20(sp)
8021b83c: 00 18        	addi	s0, sp, 0x30
8021b83e: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b842: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b846: 09 a0        	j	0x8021b848 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8TOPOLOGY17hbc7363b9e6700577E+0x12>
8021b848: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b84c: 08 61        	ld	a0, 0x0(a0)
8021b84e: 56 15        	slli	a0, a0, 0x35
8021b850: 7d 91        	srli	a0, a0, 0x3f
8021b852: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b856: 09 a0        	j	0x8021b858 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8TOPOLOGY17hbc7363b9e6700577E+0x22>
;         fn $($item)*
8021b858: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b85c: a2 70        	ld	ra, 0x28(sp)
8021b85e: 02 74        	ld	s0, 0x20(sp)
8021b860: 45 61        	addi	sp, sp, 0x30
8021b862: 82 80        	ret

000000008021b864 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$10CONFIG_WCE17hcdcf00851c3f6417E>:
8021b864: 79 71        	addi	sp, sp, -0x30
8021b866: 06 f4        	sd	ra, 0x28(sp)
8021b868: 22 f0        	sd	s0, 0x20(sp)
8021b86a: 00 18        	addi	s0, sp, 0x30
8021b86c: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b870: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b874: 09 a0        	j	0x8021b876 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$10CONFIG_WCE17hcdcf00851c3f6417E+0x12>
8021b876: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b87a: 08 61        	ld	a0, 0x0(a0)
8021b87c: 52 15        	slli	a0, a0, 0x34
8021b87e: 7d 91        	srli	a0, a0, 0x3f
8021b880: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b884: 09 a0        	j	0x8021b886 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$10CONFIG_WCE17hcdcf00851c3f6417E+0x22>
;         fn $($item)*
8021b886: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b88a: a2 70        	ld	ra, 0x28(sp)
8021b88c: 02 74        	ld	s0, 0x20(sp)
8021b88e: 45 61        	addi	sp, sp, 0x30
8021b890: 82 80        	ret

000000008021b892 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7DISCARD17hf4296a7f43923d49E>:
8021b892: 79 71        	addi	sp, sp, -0x30
8021b894: 06 f4        	sd	ra, 0x28(sp)
8021b896: 22 f0        	sd	s0, 0x20(sp)
8021b898: 00 18        	addi	s0, sp, 0x30
8021b89a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b89e: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b8a2: 09 a0        	j	0x8021b8a4 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7DISCARD17hf4296a7f43923d49E+0x12>
8021b8a4: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b8a8: 08 61        	ld	a0, 0x0(a0)
8021b8aa: 4a 15        	slli	a0, a0, 0x32
8021b8ac: 7d 91        	srli	a0, a0, 0x3f
8021b8ae: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b8b2: 09 a0        	j	0x8021b8b4 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$7DISCARD17hf4296a7f43923d49E+0x22>
;         fn $($item)*
8021b8b4: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b8b8: a2 70        	ld	ra, 0x28(sp)
8021b8ba: 02 74        	ld	s0, 0x20(sp)
8021b8bc: 45 61        	addi	sp, sp, 0x30
8021b8be: 82 80        	ret

000000008021b8c0 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12WRITE_ZEROES17h9d5351c22f531343E>:
8021b8c0: 79 71        	addi	sp, sp, -0x30
8021b8c2: 06 f4        	sd	ra, 0x28(sp)
8021b8c4: 22 f0        	sd	s0, 0x20(sp)
8021b8c6: 00 18        	addi	s0, sp, 0x30
8021b8c8: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b8cc: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b8d0: 09 a0        	j	0x8021b8d2 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12WRITE_ZEROES17h9d5351c22f531343E+0x12>
8021b8d2: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b8d6: 08 61        	ld	a0, 0x0(a0)
8021b8d8: 46 15        	slli	a0, a0, 0x31
8021b8da: 7d 91        	srli	a0, a0, 0x3f
8021b8dc: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b8e0: 09 a0        	j	0x8021b8e2 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$12WRITE_ZEROES17h9d5351c22f531343E+0x22>
;         fn $($item)*
8021b8e2: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b8e6: a2 70        	ld	ra, 0x28(sp)
8021b8e8: 02 74        	ld	s0, 0x20(sp)
8021b8ea: 45 61        	addi	sp, sp, 0x30
8021b8ec: 82 80        	ret

000000008021b8ee <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15NOTIFY_ON_EMPTY17h0fe553425b9f1a07E>:
8021b8ee: 79 71        	addi	sp, sp, -0x30
8021b8f0: 06 f4        	sd	ra, 0x28(sp)
8021b8f2: 22 f0        	sd	s0, 0x20(sp)
8021b8f4: 00 18        	addi	s0, sp, 0x30
8021b8f6: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b8fa: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b8fe: 09 a0        	j	0x8021b900 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15NOTIFY_ON_EMPTY17h0fe553425b9f1a07E+0x12>
8021b900: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b904: 08 61        	ld	a0, 0x0(a0)
8021b906: 1e 15        	slli	a0, a0, 0x27
8021b908: 7d 91        	srli	a0, a0, 0x3f
8021b90a: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b90e: 09 a0        	j	0x8021b910 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15NOTIFY_ON_EMPTY17h0fe553425b9f1a07E+0x22>
;         fn $($item)*
8021b910: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b914: a2 70        	ld	ra, 0x28(sp)
8021b916: 02 74        	ld	s0, 0x20(sp)
8021b918: 45 61        	addi	sp, sp, 0x30
8021b91a: 82 80        	ret

000000008021b91c <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$10ANY_LAYOUT17hac53edc02cb6cee8E>:
8021b91c: 79 71        	addi	sp, sp, -0x30
8021b91e: 06 f4        	sd	ra, 0x28(sp)
8021b920: 22 f0        	sd	s0, 0x20(sp)
8021b922: 00 18        	addi	s0, sp, 0x30
8021b924: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b928: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b92c: 09 a0        	j	0x8021b92e <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$10ANY_LAYOUT17hac53edc02cb6cee8E+0x12>
8021b92e: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b932: 08 61        	ld	a0, 0x0(a0)
8021b934: 12 15        	slli	a0, a0, 0x24
8021b936: 7d 91        	srli	a0, a0, 0x3f
8021b938: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b93c: 09 a0        	j	0x8021b93e <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$10ANY_LAYOUT17hac53edc02cb6cee8E+0x22>
;         fn $($item)*
8021b93e: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b942: a2 70        	ld	ra, 0x28(sp)
8021b944: 02 74        	ld	s0, 0x20(sp)
8021b946: 45 61        	addi	sp, sp, 0x30
8021b948: 82 80        	ret

000000008021b94a <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$18RING_INDIRECT_DESC17h832e570f7bb1b381E>:
8021b94a: 79 71        	addi	sp, sp, -0x30
8021b94c: 06 f4        	sd	ra, 0x28(sp)
8021b94e: 22 f0        	sd	s0, 0x20(sp)
8021b950: 00 18        	addi	s0, sp, 0x30
8021b952: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b956: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b95a: 09 a0        	j	0x8021b95c <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$18RING_INDIRECT_DESC17h832e570f7bb1b381E+0x12>
8021b95c: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b960: 08 61        	ld	a0, 0x0(a0)
8021b962: 0e 15        	slli	a0, a0, 0x23
8021b964: 7d 91        	srli	a0, a0, 0x3f
8021b966: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b96a: 09 a0        	j	0x8021b96c <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$18RING_INDIRECT_DESC17h832e570f7bb1b381E+0x22>
;         fn $($item)*
8021b96c: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b970: a2 70        	ld	ra, 0x28(sp)
8021b972: 02 74        	ld	s0, 0x20(sp)
8021b974: 45 61        	addi	sp, sp, 0x30
8021b976: 82 80        	ret

000000008021b978 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14RING_EVENT_IDX17h2b182fa29b82358cE>:
8021b978: 79 71        	addi	sp, sp, -0x30
8021b97a: 06 f4        	sd	ra, 0x28(sp)
8021b97c: 22 f0        	sd	s0, 0x20(sp)
8021b97e: 00 18        	addi	s0, sp, 0x30
8021b980: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b984: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b988: 09 a0        	j	0x8021b98a <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14RING_EVENT_IDX17h2b182fa29b82358cE+0x12>
8021b98a: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b98e: 08 61        	ld	a0, 0x0(a0)
8021b990: 0a 15        	slli	a0, a0, 0x22
8021b992: 7d 91        	srli	a0, a0, 0x3f
8021b994: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b998: 09 a0        	j	0x8021b99a <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14RING_EVENT_IDX17h2b182fa29b82358cE+0x22>
;         fn $($item)*
8021b99a: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b99e: a2 70        	ld	ra, 0x28(sp)
8021b9a0: 02 74        	ld	s0, 0x20(sp)
8021b9a2: 45 61        	addi	sp, sp, 0x30
8021b9a4: 82 80        	ret

000000008021b9a6 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6UNUSED17hb0828040d721a883E>:
8021b9a6: 79 71        	addi	sp, sp, -0x30
8021b9a8: 06 f4        	sd	ra, 0x28(sp)
8021b9aa: 22 f0        	sd	s0, 0x20(sp)
8021b9ac: 00 18        	addi	s0, sp, 0x30
8021b9ae: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b9b2: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b9b6: 09 a0        	j	0x8021b9b8 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6UNUSED17hb0828040d721a883E+0x12>
8021b9b8: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b9bc: 08 61        	ld	a0, 0x0(a0)
8021b9be: 06 15        	slli	a0, a0, 0x21
8021b9c0: 7d 91        	srli	a0, a0, 0x3f
8021b9c2: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b9c6: 09 a0        	j	0x8021b9c8 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6UNUSED17hb0828040d721a883E+0x22>
;         fn $($item)*
8021b9c8: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b9cc: a2 70        	ld	ra, 0x28(sp)
8021b9ce: 02 74        	ld	s0, 0x20(sp)
8021b9d0: 45 61        	addi	sp, sp, 0x30
8021b9d2: 82 80        	ret

000000008021b9d4 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9VERSION_117h82eeed14d025e4ccE>:
8021b9d4: 79 71        	addi	sp, sp, -0x30
8021b9d6: 06 f4        	sd	ra, 0x28(sp)
8021b9d8: 22 f0        	sd	s0, 0x20(sp)
8021b9da: 00 18        	addi	s0, sp, 0x30
8021b9dc: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021b9e0: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021b9e4: 09 a0        	j	0x8021b9e6 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9VERSION_117h82eeed14d025e4ccE+0x12>
8021b9e6: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021b9ea: 08 61        	ld	a0, 0x0(a0)
8021b9ec: 7e 05        	slli	a0, a0, 0x1f
8021b9ee: 7d 91        	srli	a0, a0, 0x3f
8021b9f0: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021b9f4: 09 a0        	j	0x8021b9f6 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$9VERSION_117h82eeed14d025e4ccE+0x22>
;         fn $($item)*
8021b9f6: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021b9fa: a2 70        	ld	ra, 0x28(sp)
8021b9fc: 02 74        	ld	s0, 0x20(sp)
8021b9fe: 45 61        	addi	sp, sp, 0x30
8021ba00: 82 80        	ret

000000008021ba02 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15ACCESS_PLATFORM17h1c2c05511b6983ecE>:
8021ba02: 79 71        	addi	sp, sp, -0x30
8021ba04: 06 f4        	sd	ra, 0x28(sp)
8021ba06: 22 f0        	sd	s0, 0x20(sp)
8021ba08: 00 18        	addi	s0, sp, 0x30
8021ba0a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021ba0e: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021ba12: 09 a0        	j	0x8021ba14 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15ACCESS_PLATFORM17h1c2c05511b6983ecE+0x12>
8021ba14: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021ba18: 08 61        	ld	a0, 0x0(a0)
8021ba1a: 7a 05        	slli	a0, a0, 0x1e
8021ba1c: 7d 91        	srli	a0, a0, 0x3f
8021ba1e: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021ba22: 09 a0        	j	0x8021ba24 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$15ACCESS_PLATFORM17h1c2c05511b6983ecE+0x22>
;         fn $($item)*
8021ba24: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021ba28: a2 70        	ld	ra, 0x28(sp)
8021ba2a: 02 74        	ld	s0, 0x20(sp)
8021ba2c: 45 61        	addi	sp, sp, 0x30
8021ba2e: 82 80        	ret

000000008021ba30 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$11RING_PACKED17h3449f7113ff9cde5E>:
8021ba30: 79 71        	addi	sp, sp, -0x30
8021ba32: 06 f4        	sd	ra, 0x28(sp)
8021ba34: 22 f0        	sd	s0, 0x20(sp)
8021ba36: 00 18        	addi	s0, sp, 0x30
8021ba38: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021ba3c: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021ba40: 09 a0        	j	0x8021ba42 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$11RING_PACKED17h3449f7113ff9cde5E+0x12>
8021ba42: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021ba46: 08 61        	ld	a0, 0x0(a0)
8021ba48: 76 05        	slli	a0, a0, 0x1d
8021ba4a: 7d 91        	srli	a0, a0, 0x3f
8021ba4c: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021ba50: 09 a0        	j	0x8021ba52 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$11RING_PACKED17h3449f7113ff9cde5E+0x22>
;         fn $($item)*
8021ba52: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021ba56: a2 70        	ld	ra, 0x28(sp)
8021ba58: 02 74        	ld	s0, 0x20(sp)
8021ba5a: 45 61        	addi	sp, sp, 0x30
8021ba5c: 82 80        	ret

000000008021ba5e <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8IN_ORDER17h1fcfd55db51eadf7E>:
8021ba5e: 79 71        	addi	sp, sp, -0x30
8021ba60: 06 f4        	sd	ra, 0x28(sp)
8021ba62: 22 f0        	sd	s0, 0x20(sp)
8021ba64: 00 18        	addi	s0, sp, 0x30
8021ba66: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021ba6a: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021ba6e: 09 a0        	j	0x8021ba70 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8IN_ORDER17h1fcfd55db51eadf7E+0x12>
8021ba70: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021ba74: 08 61        	ld	a0, 0x0(a0)
8021ba76: 72 05        	slli	a0, a0, 0x1c
8021ba78: 7d 91        	srli	a0, a0, 0x3f
8021ba7a: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021ba7e: 09 a0        	j	0x8021ba80 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$8IN_ORDER17h1fcfd55db51eadf7E+0x22>
;         fn $($item)*
8021ba80: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021ba84: a2 70        	ld	ra, 0x28(sp)
8021ba86: 02 74        	ld	s0, 0x20(sp)
8021ba88: 45 61        	addi	sp, sp, 0x30
8021ba8a: 82 80        	ret

000000008021ba8c <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14ORDER_PLATFORM17hb53973f47ce60ae4E>:
8021ba8c: 79 71        	addi	sp, sp, -0x30
8021ba8e: 06 f4        	sd	ra, 0x28(sp)
8021ba90: 22 f0        	sd	s0, 0x20(sp)
8021ba92: 00 18        	addi	s0, sp, 0x30
8021ba94: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021ba98: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021ba9c: 09 a0        	j	0x8021ba9e <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14ORDER_PLATFORM17hb53973f47ce60ae4E+0x12>
8021ba9e: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021baa2: 08 61        	ld	a0, 0x0(a0)
8021baa4: 6e 05        	slli	a0, a0, 0x1b
8021baa6: 7d 91        	srli	a0, a0, 0x3f
8021baa8: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021baac: 09 a0        	j	0x8021baae <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$14ORDER_PLATFORM17hb53973f47ce60ae4E+0x22>
;         fn $($item)*
8021baae: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021bab2: a2 70        	ld	ra, 0x28(sp)
8021bab4: 02 74        	ld	s0, 0x20(sp)
8021bab6: 45 61        	addi	sp, sp, 0x30
8021bab8: 82 80        	ret

000000008021baba <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SR_IOV17h996afa0a7e62d25fE>:
8021baba: 79 71        	addi	sp, sp, -0x30
8021babc: 06 f4        	sd	ra, 0x28(sp)
8021babe: 22 f0        	sd	s0, 0x20(sp)
8021bac0: 00 18        	addi	s0, sp, 0x30
8021bac2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021bac6: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021baca: 09 a0        	j	0x8021bacc <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SR_IOV17h996afa0a7e62d25fE+0x12>
8021bacc: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021bad0: 08 61        	ld	a0, 0x0(a0)
8021bad2: 6a 05        	slli	a0, a0, 0x1a
8021bad4: 7d 91        	srli	a0, a0, 0x3f
8021bad6: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021bada: 09 a0        	j	0x8021badc <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$6SR_IOV17h996afa0a7e62d25fE+0x22>
;         fn $($item)*
8021badc: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021bae0: a2 70        	ld	ra, 0x28(sp)
8021bae2: 02 74        	ld	s0, 0x20(sp)
8021bae4: 45 61        	addi	sp, sp, 0x30
8021bae6: 82 80        	ret

000000008021bae8 <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17NOTIFICATION_DATA17hd1f180b7144e7b79E>:
8021bae8: 79 71        	addi	sp, sp, -0x30
8021baea: 06 f4        	sd	ra, 0x28(sp)
8021baec: 22 f0        	sd	s0, 0x20(sp)
8021baee: 00 18        	addi	s0, sp, 0x30
8021baf0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021baf4: 23 34 a4 fe  	sd	a0, -0x18(s0)
; bitflags! {
8021baf8: 09 a0        	j	0x8021bafa <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17NOTIFICATION_DATA17hd1f180b7144e7b79E+0x12>
8021bafa: 03 35 84 fd  	ld	a0, -0x28(s0)
; bitflags! {
8021bafe: 08 61        	ld	a0, 0x0(a0)
8021bb00: 66 05        	slli	a0, a0, 0x19
8021bb02: 7d 91        	srli	a0, a0, 0x3f
8021bb04: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021bb08: 09 a0        	j	0x8021bb0a <_ZN136_$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$$LT$virtio_drivers..blk..BlkFeature$u20$as$u20$core..fmt..Debug$GT$..fmt..__BitFlags$GT$17NOTIFICATION_DATA17hd1f180b7144e7b79E+0x22>
;         fn $($item)*
8021bb0a: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021bb0e: a2 70        	ld	ra, 0x28(sp)
8021bb10: 02 74        	ld	s0, 0x20(sp)
8021bb12: 45 61        	addi	sp, sp, 0x30
8021bb14: 82 80        	ret

000000008021bb16 <_ZN104_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h96aa70bb1011c844E>:
;     fn from_residual(residual: ControlFlow<B, convert::Infallible>) -> Self {
8021bb16: 79 71        	addi	sp, sp, -0x30
8021bb18: 06 f4        	sd	ra, 0x28(sp)
8021bb1a: 22 f0        	sd	s0, 0x20(sp)
8021bb1c: 00 18        	addi	s0, sp, 0x30
8021bb1e: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             ControlFlow::Break(b) => ControlFlow::Break(b),
8021bb22: 03 35 04 fd  	ld	a0, -0x30(s0)
8021bb26: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021bb2a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021bb2e: 05 45        	li	a0, 0x1
8021bb30: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
8021bb34: 03 35 84 fd  	ld	a0, -0x28(s0)
8021bb38: 83 35 04 fe  	ld	a1, -0x20(s0)
8021bb3c: a2 70        	ld	ra, 0x28(sp)
8021bb3e: 02 74        	ld	s0, 0x20(sp)
8021bb40: 45 61        	addi	sp, sp, 0x30
8021bb42: 82 80        	ret

000000008021bb44 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h10028b351965b4a4E>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
8021bb44: 01 11        	addi	sp, sp, -0x20
8021bb46: 06 ec        	sd	ra, 0x18(sp)
8021bb48: 22 e8        	sd	s0, 0x10(sp)
8021bb4a: 00 10        	addi	s0, sp, 0x20
8021bb4c: 2e 86        	mv	a2, a1
8021bb4e: aa 85        	mv	a1, a0
8021bb50: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021bb54: 23 34 c4 fe  	sd	a2, -0x18(s0)
8021bb58: 88 61        	ld	a0, 0x0(a1)
8021bb5a: 8c 65        	ld	a1, 0x8(a1)
8021bb5c: 97 40 01 00  	auipc	ra, 0x14
8021bb60: e7 80 60 41  	jalr	0x416(ra) <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hd7ed1d762e2594f9E>
8021bb64: e2 60        	ld	ra, 0x18(sp)
8021bb66: 42 64        	ld	s0, 0x10(sp)
8021bb68: 05 61        	addi	sp, sp, 0x20
8021bb6a: 82 80        	ret

000000008021bb6c <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E>:
;                 fn cmp(&self, other: &$t) -> Ordering {
8021bb6c: 39 71        	addi	sp, sp, -0x40
8021bb6e: 06 fc        	sd	ra, 0x38(sp)
8021bb70: 22 f8        	sd	s0, 0x30(sp)
8021bb72: 80 00        	addi	s0, sp, 0x40
8021bb74: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021bb78: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     if *self < *other { Less }
8021bb7c: 08 61        	ld	a0, 0x0(a0)
8021bb7e: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021bb82: 8c 61        	ld	a1, 0x0(a1)
8021bb84: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021bb88: 63 6a b5 00  	bltu	a0, a1, 0x8021bb9c <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E+0x30>
8021bb8c: 09 a0        	j	0x8021bb8e <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E+0x22>
8021bb8e: 03 35 84 fc  	ld	a0, -0x38(s0)
8021bb92: 83 35 04 fd  	ld	a1, -0x30(s0)
;                     else if *self == *other { Equal }
8021bb96: 63 0c b5 00  	beq	a0, a1, 0x8021bbae <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E+0x42>
8021bb9a: 31 a0        	j	0x8021bba6 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E+0x3a>
8021bb9c: 13 05 f0 0f  	li	a0, 0xff
;                     if *self < *other { Less }
8021bba0: a3 0f a4 fc  	sb	a0, -0x21(s0)
8021bba4: 11 a8        	j	0x8021bbb8 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E+0x4c>
8021bba6: 05 45        	li	a0, 0x1
;                     else { Greater }
8021bba8: a3 0f a4 fc  	sb	a0, -0x21(s0)
;                     else if *self == *other { Equal }
8021bbac: 29 a0        	j	0x8021bbb6 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E+0x4a>
8021bbae: 01 45        	li	a0, 0x0
;                     else if *self == *other { Equal }
8021bbb0: a3 0f a4 fc  	sb	a0, -0x21(s0)
8021bbb4: 09 a0        	j	0x8021bbb6 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E+0x4a>
;                     if *self < *other { Less }
8021bbb6: 09 a0        	j	0x8021bbb8 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E+0x4c>
;                 }
8021bbb8: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8021bbbc: e2 70        	ld	ra, 0x38(sp)
8021bbbe: 42 74        	ld	s0, 0x30(sp)
8021bbc0: 21 61        	addi	sp, sp, 0x40
8021bbc2: 82 80        	ret

000000008021bbc4 <_ZN4core3cmp6min_by17he5cced12f8d11c78E>:
; pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8021bbc4: 5d 71        	addi	sp, sp, -0x50
8021bbc6: 86 e4        	sd	ra, 0x48(sp)
8021bbc8: a2 e0        	sd	s0, 0x40(sp)
8021bbca: 80 08        	addi	s0, sp, 0x50
8021bbcc: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021bbd0: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021bbd4: 05 45        	li	a0, 0x1
;     match compare(&v1, &v2) {
8021bbd6: 23 07 a4 fe  	sb	a0, -0x12(s0)
8021bbda: 13 05 84 fb  	addi	a0, s0, -0x48
8021bbde: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021bbe2: 13 05 04 fc  	addi	a0, s0, -0x40
8021bbe6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021bbea: 03 35 84 fd  	ld	a0, -0x28(s0)
8021bbee: 83 35 04 fe  	ld	a1, -0x20(s0)
8021bbf2: 97 00 00 00  	auipc	ra, 0x0
8021bbf6: e7 80 60 10  	jalr	0x106(ra) <_ZN4core3ops8function6FnOnce9call_once17hf5dcd55fbc6bdf97E>
8021bbfa: a3 0b a4 fc  	sb	a0, -0x29(s0)
8021bbfe: 03 45 74 fd  	lbu	a0, -0x29(s0)
8021bc02: 05 25        	addiw	a0, a0, 0x1
8021bc04: 13 75 f5 0f  	andi	a0, a0, 0xff
8021bc08: 89 45        	li	a1, 0x2
8021bc0a: 63 65 b5 00  	bltu	a0, a1, 0x8021bc14 <_ZN4core3cmp6min_by17he5cced12f8d11c78E+0x50>
8021bc0e: 09 a0        	j	0x8021bc10 <_ZN4core3cmp6min_by17he5cced12f8d11c78E+0x4c>
8021bc10: 11 a8        	j	0x8021bc24 <_ZN4core3cmp6min_by17he5cced12f8d11c78E+0x60>
8021bc12: 00 00        	unimp
8021bc14: 01 45        	li	a0, 0x0
;         Ordering::Less | Ordering::Equal => v1,
8021bc16: 23 07 a4 fe  	sb	a0, -0x12(s0)
8021bc1a: 03 35 84 fb  	ld	a0, -0x48(s0)
8021bc1e: 23 34 a4 fc  	sd	a0, -0x38(s0)
; }
8021bc22: 31 a0        	j	0x8021bc2e <_ZN4core3cmp6min_by17he5cced12f8d11c78E+0x6a>
;         Ordering::Greater => v2,
8021bc24: 03 35 04 fc  	ld	a0, -0x40(s0)
8021bc28: 23 34 a4 fc  	sd	a0, -0x38(s0)
; }
8021bc2c: 01 a8        	j	0x8021bc3c <_ZN4core3cmp6min_by17he5cced12f8d11c78E+0x78>
8021bc2e: 09 a0        	j	0x8021bc30 <_ZN4core3cmp6min_by17he5cced12f8d11c78E+0x6c>
8021bc30: 03 35 84 fc  	ld	a0, -0x38(s0)
8021bc34: a6 60        	ld	ra, 0x48(sp)
8021bc36: 06 64        	ld	s0, 0x40(sp)
8021bc38: 61 61        	addi	sp, sp, 0x50
8021bc3a: 82 80        	ret
8021bc3c: 03 45 e4 fe  	lbu	a0, -0x12(s0)
8021bc40: 05 89        	andi	a0, a0, 0x1
8021bc42: 7d d5        	beqz	a0, 0x8021bc30 <_ZN4core3cmp6min_by17he5cced12f8d11c78E+0x6c>
8021bc44: 09 a0        	j	0x8021bc46 <_ZN4core3cmp6min_by17he5cced12f8d11c78E+0x82>
8021bc46: ed b7        	j	0x8021bc30 <_ZN4core3cmp6min_by17he5cced12f8d11c78E+0x6c>

000000008021bc48 <_ZN4core3fmt9Arguments9new_const17h41496599da3bc474E>:
;     pub const fn new_const(pieces: &'a [&'static str]) -> Self {
8021bc48: 59 71        	addi	sp, sp, -0x70
8021bc4a: 86 f4        	sd	ra, 0x68(sp)
8021bc4c: a2 f0        	sd	s0, 0x60(sp)
8021bc4e: 80 18        	addi	s0, sp, 0x70
8021bc50: 23 3c c4 f8  	sd	a2, -0x68(s0)
8021bc54: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021bc58: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021bc5c: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021bc60: 23 34 c4 fe  	sd	a2, -0x18(s0)
8021bc64: 05 45        	li	a0, 0x1
;         if pieces.len() > 1 {
8021bc66: 63 6e c5 02  	bltu	a0, a2, 0x8021bca2 <.Lpcrel_hi2>
8021bc6a: 09 a0        	j	0x8021bc6c <_ZN4core3fmt9Arguments9new_const17h41496599da3bc474E+0x24>
8021bc6c: 83 35 84 fa  	ld	a1, -0x58(s0)
8021bc70: 03 35 84 f9  	ld	a0, -0x68(s0)
8021bc74: 03 36 04 fa  	ld	a2, -0x60(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021bc78: 90 e1        	sd	a2, 0x0(a1)
8021bc7a: 88 e5        	sd	a0, 0x8(a1)

000000008021bc7c <.Lpcrel_hi0>:
8021bc7c: 17 75 01 00  	auipc	a0, 0x17
8021bc80: 13 05 45 61  	addi	a0, a0, 0x614
8021bc84: 10 61        	ld	a2, 0x0(a0)
8021bc86: 08 65        	ld	a0, 0x8(a0)
8021bc88: 90 f1        	sd	a2, 0x20(a1)
8021bc8a: 88 f5        	sd	a0, 0x28(a1)

000000008021bc8c <.Lpcrel_hi1>:
8021bc8c: 17 c5 01 00  	auipc	a0, 0x1c
8021bc90: 13 05 45 14  	addi	a0, a0, 0x144
8021bc94: 88 e9        	sd	a0, 0x10(a1)
8021bc96: 01 45        	li	a0, 0x0
8021bc98: 88 ed        	sd	a0, 0x18(a1)
8021bc9a: a6 70        	ld	ra, 0x68(sp)
8021bc9c: 06 74        	ld	s0, 0x60(sp)
;     }
8021bc9e: 65 61        	addi	sp, sp, 0x70
8021bca0: 82 80        	ret

000000008021bca2 <.Lpcrel_hi2>:
;             panic!("invalid args");
8021bca2: 17 c5 01 00  	auipc	a0, 0x1c
8021bca6: 93 05 e5 13  	addi	a1, a0, 0x13e
8021bcaa: 13 05 04 fb  	addi	a0, s0, -0x50
8021bcae: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021bcb2: 05 46        	li	a2, 0x1
8021bcb4: 97 00 00 00  	auipc	ra, 0x0
8021bcb8: e7 80 40 f9  	jalr	-0x6c(ra) <_ZN4core3fmt9Arguments9new_const17h41496599da3bc474E>
8021bcbc: 03 35 04 f9  	ld	a0, -0x70(s0)

000000008021bcc0 <.Lpcrel_hi3>:
8021bcc0: 97 c5 01 00  	auipc	a1, 0x1c
8021bcc4: 93 85 05 1a  	addi	a1, a1, 0x1a0
8021bcc8: 97 40 01 00  	auipc	ra, 0x14
8021bccc: e7 80 00 4e  	jalr	0x4e0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021bcd0 <_ZN4core3ops8function6FnOnce9call_once17hb6311afb0ec8dac6E>:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
8021bcd0: 79 71        	addi	sp, sp, -0x30
8021bcd2: 06 f4        	sd	ra, 0x28(sp)
8021bcd4: 22 f0        	sd	s0, 0x20(sp)
8021bcd6: 00 18        	addi	s0, sp, 0x30
8021bcd8: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021bcdc: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021bce0: 83 35 84 fd  	ld	a1, -0x28(s0)
8021bce4: 03 36 04 fe  	ld	a2, -0x20(s0)
8021bce8: 97 10 00 00  	auipc	ra, 0x1
8021bcec: e7 80 80 e9  	jalr	-0x168(ra) <_ZN3log14MaybeStaticStr6Static17hd6b8d7a505df85d2E>
8021bcf0: a2 70        	ld	ra, 0x28(sp)
8021bcf2: 02 74        	ld	s0, 0x20(sp)
8021bcf4: 45 61        	addi	sp, sp, 0x30
8021bcf6: 82 80        	ret

000000008021bcf8 <_ZN4core3ops8function6FnOnce9call_once17hf5dcd55fbc6bdf97E>:
8021bcf8: 79 71        	addi	sp, sp, -0x30
8021bcfa: 06 f4        	sd	ra, 0x28(sp)
8021bcfc: 22 f0        	sd	s0, 0x20(sp)
8021bcfe: 00 18        	addi	s0, sp, 0x30
8021bd00: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021bd04: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021bd08: 03 35 84 fd  	ld	a0, -0x28(s0)
8021bd0c: 83 35 04 fe  	ld	a1, -0x20(s0)
8021bd10: 97 00 00 00  	auipc	ra, 0x0
8021bd14: e7 80 c0 e5  	jalr	-0x1a4(ra) <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6f52f6c5756b2f58E>
8021bd18: a2 70        	ld	ra, 0x28(sp)
8021bd1a: 02 74        	ld	s0, 0x20(sp)
8021bd1c: 45 61        	addi	sp, sp, 0x30
8021bd1e: 82 80        	ret

000000008021bd20 <_ZN4core3ptr35drop_in_place$LT$log..NopLogger$GT$17h59446d68c27add5aE>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8021bd20: 01 11        	addi	sp, sp, -0x20
8021bd22: 06 ec        	sd	ra, 0x18(sp)
8021bd24: 22 e8        	sd	s0, 0x10(sp)
8021bd26: 00 10        	addi	s0, sp, 0x20
8021bd28: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021bd2c: e2 60        	ld	ra, 0x18(sp)
8021bd2e: 42 64        	ld	s0, 0x10(sp)
8021bd30: 05 61        	addi	sp, sp, 0x20
8021bd32: 82 80        	ret

000000008021bd34 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h575eaee47adf15e6E>:
;     pub const unsafe fn sub_ptr(self, origin: *const T) -> usize
8021bd34: 39 71        	addi	sp, sp, -0x40
8021bd36: 06 fc        	sd	ra, 0x38(sp)
8021bd38: 22 f8        	sd	s0, 0x30(sp)
8021bd3a: 80 00        	addi	s0, sp, 0x40
8021bd3c: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021bd40: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021bd44: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021bd48: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         assert_unsafe_precondition!(
8021bd4c: 09 a0        	j	0x8021bd4e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h575eaee47adf15e6E+0x1a>
8021bd4e: 83 35 04 fc  	ld	a1, -0x40(s0)
8021bd52: 03 35 84 fc  	ld	a0, -0x38(s0)
;         assert_unsafe_precondition!(
8021bd56: 97 00 00 00  	auipc	ra, 0x0
8021bd5a: e7 80 e0 02  	jalr	0x2e(ra) <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17h19a4bcc2416f146eE>
8021bd5e: 09 a0        	j	0x8021bd60 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h575eaee47adf15e6E+0x2c>
8021bd60: 05 45        	li	a0, 0x1
;     intrinsics::size_of::<T>()
8021bd62: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
8021bd66: 09 a0        	j	0x8021bd68 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h575eaee47adf15e6E+0x34>
8021bd68: 09 a0        	j	0x8021bd6a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17h575eaee47adf15e6E+0x36>
8021bd6a: 03 35 84 fc  	ld	a0, -0x38(s0)
8021bd6e: 83 35 04 fc  	ld	a1, -0x40(s0)
;         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }
8021bd72: 0d 8d        	sub	a0, a0, a1
8021bd74: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021bd78: 03 35 84 fe  	ld	a0, -0x18(s0)
8021bd7c: e2 70        	ld	ra, 0x38(sp)
8021bd7e: 42 74        	ld	s0, 0x30(sp)
;     }
8021bd80: 21 61        	addi	sp, sp, 0x40
8021bd82: 82 80        	ret

000000008021bd84 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17h19a4bcc2416f146eE>:
;             const fn precondition_check($($name:$ty),*) {
8021bd84: 01 11        	addi	sp, sp, -0x20
8021bd86: 06 ec        	sd	ra, 0x18(sp)
8021bd88: 22 e8        	sd	s0, 0x10(sp)
8021bd8a: 00 10        	addi	s0, sp, 0x20
8021bd8c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021bd90: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => runtime_ptr_ge(this, origin)
8021bd94: 63 7d b5 00  	bgeu	a0, a1, 0x8021bdae <.Lpcrel_hi4+0x14>
8021bd98: 09 a0        	j	0x8021bd9a <.Lpcrel_hi4>

000000008021bd9a <.Lpcrel_hi4>:
;                     ::core::panicking::panic_nounwind(
8021bd9a: 17 c5 01 00  	auipc	a0, 0x1c
8021bd9e: 13 05 e5 0d  	addi	a0, a0, 0xde
8021bda2: 93 05 70 04  	li	a1, 0x47
8021bda6: 97 40 01 00  	auipc	ra, 0x14
8021bdaa: e7 80 a0 49  	jalr	0x49a(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8021bdae: e2 60        	ld	ra, 0x18(sp)
8021bdb0: 42 64        	ld	s0, 0x10(sp)
;             }
8021bdb2: 05 61        	addi	sp, sp, 0x20
8021bdb4: 82 80        	ret

000000008021bdb6 <_ZN4core4sync6atomic11AtomicUsize4load17h9241c2626a4a455bE>:
;             pub fn load(&self, order: Ordering) -> $int_type {
8021bdb6: 79 71        	addi	sp, sp, -0x30
8021bdb8: 06 f4        	sd	ra, 0x28(sp)
8021bdba: 22 f0        	sd	s0, 0x20(sp)
8021bdbc: 00 18        	addi	s0, sp, 0x30
8021bdbe: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021bdc2: a3 03 b4 fe  	sb	a1, -0x19(s0)
;                 unsafe { atomic_load(self.v.get(), order) }
8021bdc6: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021bdca: 97 00 00 00  	auipc	ra, 0x0
8021bdce: e7 80 00 01  	jalr	0x10(ra) <_ZN4core4sync6atomic11atomic_load17hb7d1aad711655104E>
8021bdd2: a2 70        	ld	ra, 0x28(sp)
8021bdd4: 02 74        	ld	s0, 0x20(sp)
;             }
8021bdd6: 45 61        	addi	sp, sp, 0x30
8021bdd8: 82 80        	ret

000000008021bdda <_ZN4core4sync6atomic11atomic_load17hb7d1aad711655104E>:
; unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
8021bdda: 31 71        	addi	sp, sp, -0xc0
8021bddc: 06 fd        	sd	ra, 0xb8(sp)
8021bdde: 22 f9        	sd	s0, 0xb0(sp)
8021bde0: 80 01        	addi	s0, sp, 0xc0
8021bde2: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8021bde6: a3 0f b4 f4  	sb	a1, -0xa1(s0)
8021bdea: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         match order {
8021bdee: 03 45 f4 f5  	lbu	a0, -0xa1(s0)
8021bdf2: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021bdf6: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         match order {
8021bdfa: 0e 05        	slli	a0, a0, 0x3

000000008021bdfc <.Lpcrel_hi7>:
8021bdfc: 97 c5 01 00  	auipc	a1, 0x1c
8021be00: 93 85 c5 f5  	addi	a1, a1, -0xa4
8021be04: 2e 95        	add	a0, a0, a1
8021be06: 08 61        	ld	a0, 0x0(a0)
8021be08: 02 85        	jr	a0
8021be0a: 00 00        	unimp

000000008021be0c <.LBB38_3>:
8021be0c: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             Relaxed => intrinsics::atomic_load_relaxed(dst),
8021be10: 08 61        	ld	a0, 0x0(a0)
8021be12: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021be16: f9 a0        	j	0x8021bee4 <.LBB38_7+0x14>

000000008021be18 <.Lpcrel_hi8>:
;             Release => panic!("there is no such thing as a release load"),
8021be18: 17 c5 01 00  	auipc	a0, 0x1c
8021be1c: 93 05 05 0d  	addi	a1, a0, 0xd0
8021be20: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021be24: 05 45        	li	a0, 0x1
8021be26: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021be2a: 23 34 b4 f6  	sd	a1, -0x98(s0)
8021be2e: 23 38 a4 f6  	sd	a0, -0x90(s0)

000000008021be32 <.Lpcrel_hi9>:
8021be32: 17 75 01 00  	auipc	a0, 0x17
8021be36: 13 05 e5 45  	addi	a0, a0, 0x45e
8021be3a: 0c 61        	ld	a1, 0x0(a0)
8021be3c: 08 65        	ld	a0, 0x8(a0)
8021be3e: 23 34 b4 f8  	sd	a1, -0x78(s0)
8021be42: 23 38 a4 f8  	sd	a0, -0x70(s0)

000000008021be46 <.Lpcrel_hi10>:
8021be46: 17 c5 01 00  	auipc	a0, 0x1c
8021be4a: 13 05 a5 f8  	addi	a0, a0, -0x76
8021be4e: 23 3c a4 f6  	sd	a0, -0x88(s0)
8021be52: 01 45        	li	a0, 0x0
8021be54: 23 30 a4 f8  	sd	a0, -0x80(s0)

000000008021be58 <.Lpcrel_hi11>:
;             Release => panic!("there is no such thing as a release load"),
8021be58: 17 c5 01 00  	auipc	a0, 0x1c
8021be5c: 93 05 85 11  	addi	a1, a0, 0x118
8021be60: 13 05 84 f6  	addi	a0, s0, -0x98
8021be64: 97 40 01 00  	auipc	ra, 0x14
8021be68: e7 80 40 34  	jalr	0x344(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021be6c <.LBB38_5>:
8021be6c: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             Acquire => intrinsics::atomic_load_acquire(dst),
8021be70: 08 61        	ld	a0, 0x0(a0)
8021be72: 0f 00 30 02  	fence	r, rw
8021be76: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021be7a: ad a0        	j	0x8021bee4 <.LBB38_7+0x14>

000000008021be7c <.Lpcrel_hi12>:
;             AcqRel => panic!("there is no such thing as an acquire-release load"),
8021be7c: 17 c5 01 00  	auipc	a0, 0x1c
8021be80: 93 05 45 14  	addi	a1, a0, 0x144
8021be84: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021be88: 05 45        	li	a0, 0x1
8021be8a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021be8e: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021be92: 23 30 a4 fa  	sd	a0, -0x60(s0)

000000008021be96 <.Lpcrel_hi13>:
8021be96: 17 75 01 00  	auipc	a0, 0x17
8021be9a: 13 05 a5 3f  	addi	a0, a0, 0x3fa
8021be9e: 0c 61        	ld	a1, 0x0(a0)
8021bea0: 08 65        	ld	a0, 0x8(a0)
8021bea2: 23 3c b4 fa  	sd	a1, -0x48(s0)
8021bea6: 23 30 a4 fc  	sd	a0, -0x40(s0)

000000008021beaa <.Lpcrel_hi14>:
8021beaa: 17 c5 01 00  	auipc	a0, 0x1c
8021beae: 13 05 65 f2  	addi	a0, a0, -0xda
8021beb2: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021beb6: 01 45        	li	a0, 0x0
8021beb8: 23 38 a4 fa  	sd	a0, -0x50(s0)

000000008021bebc <.Lpcrel_hi15>:
;             AcqRel => panic!("there is no such thing as an acquire-release load"),
8021bebc: 17 c5 01 00  	auipc	a0, 0x1c
8021bec0: 93 05 45 11  	addi	a1, a0, 0x114
8021bec4: 13 05 84 f9  	addi	a0, s0, -0x68
8021bec8: 97 40 01 00  	auipc	ra, 0x14
8021becc: e7 80 00 2e  	jalr	0x2e0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021bed0 <.LBB38_7>:
8021bed0: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             SeqCst => intrinsics::atomic_load_seqcst(dst),
8021bed4: 0f 00 30 03  	fence	rw, rw
8021bed8: 08 61        	ld	a0, 0x0(a0)
8021beda: 0f 00 30 02  	fence	r, rw
8021bede: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021bee2: 09 a0        	j	0x8021bee4 <.LBB38_7+0x14>
; }
8021bee4: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021bee8: ea 70        	ld	ra, 0xb8(sp)
8021beea: 4a 74        	ld	s0, 0xb0(sp)
8021beec: 29 61        	addi	sp, sp, 0xc0
8021beee: 82 80        	ret

000000008021bef0 <_ZN4core4sync6atomic12atomic_store17ha6fdde9d0311a810E>:
; unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
8021bef0: 31 71        	addi	sp, sp, -0xc0
8021bef2: 06 fd        	sd	ra, 0xb8(sp)
8021bef4: 22 f9        	sd	s0, 0xb0(sp)
8021bef6: 80 01        	addi	s0, sp, 0xc0
8021bef8: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8021befc: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8021bf00: a3 0f c4 f4  	sb	a2, -0xa1(s0)
8021bf04: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021bf08: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match order {
8021bf0c: 03 45 f4 f5  	lbu	a0, -0xa1(s0)
8021bf10: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021bf14: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         match order {
8021bf18: 0e 05        	slli	a0, a0, 0x3

000000008021bf1a <.Lpcrel_hi16>:
8021bf1a: 97 c5 01 00  	auipc	a1, 0x1c
8021bf1e: 93 85 65 e6  	addi	a1, a1, -0x19a
8021bf22: 2e 95        	add	a0, a0, a1
8021bf24: 08 61        	ld	a0, 0x0(a0)
8021bf26: 02 85        	jr	a0
8021bf28: 00 00        	unimp

000000008021bf2a <.LBB39_3>:
8021bf2a: 03 35 04 f4  	ld	a0, -0xc0(s0)
8021bf2e: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             Relaxed => intrinsics::atomic_store_relaxed(dst, val),
8021bf32: 88 e1        	sd	a0, 0x0(a1)
8021bf34: e9 a0        	j	0x8021bffe <.LBB39_7+0x10>

000000008021bf36 <.LBB39_4>:
8021bf36: 03 35 04 f4  	ld	a0, -0xc0(s0)
8021bf3a: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             Release => intrinsics::atomic_store_release(dst, val),
8021bf3e: 0f 00 10 03  	fence	rw, w
8021bf42: 88 e1        	sd	a0, 0x0(a1)
8021bf44: 6d a8        	j	0x8021bffe <.LBB39_7+0x10>

000000008021bf46 <.Lpcrel_hi17>:
;             Acquire => panic!("there is no such thing as an acquire store"),
8021bf46: 17 c5 01 00  	auipc	a0, 0x1c
8021bf4a: 93 05 25 0d  	addi	a1, a0, 0xd2
8021bf4e: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021bf52: 05 45        	li	a0, 0x1
8021bf54: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021bf58: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8021bf5c: 23 34 a4 f6  	sd	a0, -0x98(s0)

000000008021bf60 <.Lpcrel_hi18>:
8021bf60: 17 75 01 00  	auipc	a0, 0x17
8021bf64: 13 05 05 33  	addi	a0, a0, 0x330
8021bf68: 0c 61        	ld	a1, 0x0(a0)
8021bf6a: 08 65        	ld	a0, 0x8(a0)
8021bf6c: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021bf70: 23 34 a4 f8  	sd	a0, -0x78(s0)

000000008021bf74 <.Lpcrel_hi19>:
8021bf74: 17 c5 01 00  	auipc	a0, 0x1c
8021bf78: 13 05 c5 e5  	addi	a0, a0, -0x1a4
8021bf7c: 23 38 a4 f6  	sd	a0, -0x90(s0)
8021bf80: 01 45        	li	a0, 0x0
8021bf82: 23 3c a4 f6  	sd	a0, -0x88(s0)

000000008021bf86 <.Lpcrel_hi20>:
;             Acquire => panic!("there is no such thing as an acquire store"),
8021bf86: 17 c5 01 00  	auipc	a0, 0x1c
8021bf8a: 93 05 25 0a  	addi	a1, a0, 0xa2
8021bf8e: 13 05 04 f6  	addi	a0, s0, -0xa0
8021bf92: 97 40 01 00  	auipc	ra, 0x14
8021bf96: e7 80 60 21  	jalr	0x216(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021bf9a <.Lpcrel_hi21>:
;             AcqRel => panic!("there is no such thing as an acquire-release store"),
8021bf9a: 17 c5 01 00  	auipc	a0, 0x1c
8021bf9e: 93 05 e5 0d  	addi	a1, a0, 0xde
8021bfa2: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021bfa6: 05 45        	li	a0, 0x1
8021bfa8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021bfac: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021bfb0: 23 3c a4 f8  	sd	a0, -0x68(s0)

000000008021bfb4 <.Lpcrel_hi22>:
8021bfb4: 17 75 01 00  	auipc	a0, 0x17
8021bfb8: 13 05 c5 2d  	addi	a0, a0, 0x2dc
8021bfbc: 0c 61        	ld	a1, 0x0(a0)
8021bfbe: 08 65        	ld	a0, 0x8(a0)
8021bfc0: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021bfc4: 23 3c a4 fa  	sd	a0, -0x48(s0)

000000008021bfc8 <.Lpcrel_hi23>:
8021bfc8: 17 c5 01 00  	auipc	a0, 0x1c
8021bfcc: 13 05 85 e0  	addi	a0, a0, -0x1f8
8021bfd0: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021bfd4: 01 45        	li	a0, 0x0
8021bfd6: 23 34 a4 fa  	sd	a0, -0x58(s0)

000000008021bfda <.Lpcrel_hi24>:
;             AcqRel => panic!("there is no such thing as an acquire-release store"),
8021bfda: 17 c5 01 00  	auipc	a0, 0x1c
8021bfde: 93 05 e5 0a  	addi	a1, a0, 0xae
8021bfe2: 13 05 04 f9  	addi	a0, s0, -0x70
8021bfe6: 97 40 01 00  	auipc	ra, 0x14
8021bfea: e7 80 20 1c  	jalr	0x1c2(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021bfee <.LBB39_7>:
8021bfee: 03 35 04 f4  	ld	a0, -0xc0(s0)
8021bff2: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             SeqCst => intrinsics::atomic_store_seqcst(dst, val),
8021bff6: 0f 00 10 03  	fence	rw, w
8021bffa: 88 e1        	sd	a0, 0x0(a1)
8021bffc: 09 a0        	j	0x8021bffe <.LBB39_7+0x10>
8021bffe: ea 70        	ld	ra, 0xb8(sp)
8021c000: 4a 74        	ld	s0, 0xb0(sp)
; }
8021c002: 29 61        	addi	sp, sp, 0xc0
8021c004: 82 80        	ret

000000008021c006 <_ZN4core4sync6atomic23atomic_compare_exchange17he2a97a2b1fef70f2E>:
; unsafe fn atomic_compare_exchange<T: Copy>(
8021c006: 69 71        	addi	sp, sp, -0x130
8021c008: 06 f6        	sd	ra, 0x128(sp)
8021c00a: 22 f2        	sd	s0, 0x120(sp)
8021c00c: 00 1a        	addi	s0, sp, 0x130
8021c00e: 23 30 c4 f0  	sd	a2, -0x100(s0)
8021c012: 23 34 b4 f0  	sd	a1, -0xf8(s0)
8021c016: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8021c01a: 23 03 d4 f2  	sb	a3, -0xda(s0)
8021c01e: a3 03 e4 f2  	sb	a4, -0xd9(s0)
8021c022: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021c026: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021c02a: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         match (success, failure) {
8021c02e: 03 45 64 f2  	lbu	a0, -0xda(s0)
8021c032: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8021c036: 03 35 84 f1  	ld	a0, -0xe8(s0)
;         match (success, failure) {
8021c03a: 0e 05        	slli	a0, a0, 0x3

000000008021c03c <.Lpcrel_hi25>:
8021c03c: 97 c5 01 00  	auipc	a1, 0x1c
8021c040: 93 85 c5 d6  	addi	a1, a1, -0x294
8021c044: 2e 95        	add	a0, a0, a1
8021c046: 08 61        	ld	a0, 0x0(a0)
8021c048: 02 85        	jr	a0
8021c04a: 00 00        	unimp

000000008021c04c <.LBB41_3>:
8021c04c: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8021c050: 23 3c a4 ee  	sd	a0, -0x108(s0)
8021c054: 61 c1        	beqz	a0, 0x8021c114 <.LBB41_15+0x32>
8021c056: 09 a0        	j	0x8021c058 <.LBB41_3+0xc>
8021c058: 03 35 84 ef  	ld	a0, -0x108(s0)
8021c05c: 89 45        	li	a1, 0x2
;         match (success, failure) {
8021c05e: 63 00 b5 0e  	beq	a0, a1, 0x8021c13e <.LBB41_15+0x5c>
8021c062: 09 a0        	j	0x8021c064 <.LBB41_3+0x18>
8021c064: 03 35 84 ef  	ld	a0, -0x108(s0)
8021c068: 91 45        	li	a1, 0x4
;         match (success, failure) {
8021c06a: 63 0f b5 0e  	beq	a0, a1, 0x8021c168 <.LBB41_15+0x86>
8021c06e: 69 a8        	j	0x8021c108 <.LBB41_15+0x26>

000000008021c070 <.LBB41_6>:
8021c070: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8021c074: 23 38 a4 ee  	sd	a0, -0x110(s0)
8021c078: 63 0c 05 12  	beqz	a0, 0x8021c1b0 <.LBB41_15+0xce>
8021c07c: 09 a0        	j	0x8021c07e <.LBB41_6+0xe>
8021c07e: 03 35 04 ef  	ld	a0, -0x110(s0)
8021c082: 89 45        	li	a1, 0x2
;         match (success, failure) {
8021c084: 63 0b b5 14  	beq	a0, a1, 0x8021c1da <.LBB41_15+0xf8>
8021c088: 09 a0        	j	0x8021c08a <.LBB41_6+0x1a>
8021c08a: 03 35 04 ef  	ld	a0, -0x110(s0)
8021c08e: 91 45        	li	a1, 0x4
;         match (success, failure) {
8021c090: 63 0a b5 16  	beq	a0, a1, 0x8021c204 <.LBB41_15+0x122>
8021c094: 95 a8        	j	0x8021c108 <.LBB41_15+0x26>

000000008021c096 <.LBB41_9>:
8021c096: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8021c09a: 23 34 a4 ee  	sd	a0, -0x118(s0)
8021c09e: 63 08 05 18  	beqz	a0, 0x8021c22e <.LBB41_15+0x14c>
8021c0a2: 09 a0        	j	0x8021c0a4 <.LBB41_9+0xe>
8021c0a4: 03 35 84 ee  	ld	a0, -0x118(s0)
8021c0a8: 89 45        	li	a1, 0x2
;         match (success, failure) {
8021c0aa: 63 07 b5 1a  	beq	a0, a1, 0x8021c258 <.LBB41_15+0x176>
8021c0ae: 09 a0        	j	0x8021c0b0 <.LBB41_9+0x1a>
8021c0b0: 03 35 84 ee  	ld	a0, -0x118(s0)
8021c0b4: 91 45        	li	a1, 0x4
;         match (success, failure) {
8021c0b6: 63 06 b5 1c  	beq	a0, a1, 0x8021c282 <.LBB41_15+0x1a0>
8021c0ba: b9 a0        	j	0x8021c108 <.LBB41_15+0x26>

000000008021c0bc <.LBB41_12>:
8021c0bc: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8021c0c0: 23 30 a4 ee  	sd	a0, -0x120(s0)
8021c0c4: 63 04 05 1e  	beqz	a0, 0x8021c2ac <.LBB41_15+0x1ca>
8021c0c8: 09 a0        	j	0x8021c0ca <.LBB41_12+0xe>
8021c0ca: 03 35 04 ee  	ld	a0, -0x120(s0)
8021c0ce: 89 45        	li	a1, 0x2
;         match (success, failure) {
8021c0d0: 63 03 b5 20  	beq	a0, a1, 0x8021c2d6 <.LBB41_15+0x1f4>
8021c0d4: 09 a0        	j	0x8021c0d6 <.LBB41_12+0x1a>
8021c0d6: 03 35 04 ee  	ld	a0, -0x120(s0)
8021c0da: 91 45        	li	a1, 0x4
;         match (success, failure) {
8021c0dc: 63 02 b5 22  	beq	a0, a1, 0x8021c300 <.LBB41_15+0x21e>
8021c0e0: 25 a0        	j	0x8021c108 <.LBB41_15+0x26>

000000008021c0e2 <.LBB41_15>:
8021c0e2: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8021c0e6: 23 3c a4 ec  	sd	a0, -0x128(s0)
8021c0ea: 63 00 05 24  	beqz	a0, 0x8021c32a <.LBB41_15+0x248>
8021c0ee: 09 a0        	j	0x8021c0f0 <.LBB41_15+0xe>
8021c0f0: 03 35 84 ed  	ld	a0, -0x128(s0)
8021c0f4: 89 45        	li	a1, 0x2
;         match (success, failure) {
8021c0f6: 63 0f b5 24  	beq	a0, a1, 0x8021c354 <.LBB41_15+0x272>
8021c0fa: 09 a0        	j	0x8021c0fc <.LBB41_15+0x1a>
8021c0fc: 03 35 84 ed  	ld	a0, -0x128(s0)
8021c100: 91 45        	li	a1, 0x4
;         match (success, failure) {
8021c102: 63 0e b5 26  	beq	a0, a1, 0x8021c37e <.LBB41_15+0x29c>
8021c106: 09 a0        	j	0x8021c108 <.LBB41_15+0x26>
8021c108: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8021c10c: 85 45        	li	a1, 0x1
8021c10e: 63 05 b5 2c  	beq	a0, a1, 0x8021c3d8 <.Lpcrel_hi26>
8021c112: 29 ae        	j	0x8021c42c <.Lpcrel_hi30>
8021c114: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c118: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c11c: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),
8021c120: af b5 06 10  	lr.d	a1, (a3)
8021c124: 63 95 a5 00  	bne	a1, a0, 0x8021c12e <.LBB41_15+0x4c>
8021c128: 2f b6 e6 18  	sc.d	a2, a4, (a3)
8021c12c: 75 fa        	bnez	a2, 0x8021c120 <.LBB41_15+0x3e>
8021c12e: 2d 8d        	xor	a0, a0, a1
8021c130: 13 35 15 00  	seqz	a0, a0
8021c134: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c138: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c13c: 99 a8        	j	0x8021c192 <.LBB41_15+0xb0>
8021c13e: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c142: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c146: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),
8021c14a: af b5 06 14  	lr.d.aq	a1, (a3)
8021c14e: 63 95 a5 00  	bne	a1, a0, 0x8021c158 <.LBB41_15+0x76>
8021c152: 2f b6 e6 18  	sc.d	a2, a4, (a3)
8021c156: 75 fa        	bnez	a2, 0x8021c14a <.LBB41_15+0x68>
8021c158: 2d 8d        	xor	a0, a0, a1
8021c15a: 13 35 15 00  	seqz	a0, a0
8021c15e: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c162: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c166: 35 a0        	j	0x8021c192 <.LBB41_15+0xb0>
8021c168: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c16c: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c170: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),
8021c174: af b5 06 16  	lr.d.aqrl	a1, (a3)
8021c178: 63 95 a5 00  	bne	a1, a0, 0x8021c182 <.LBB41_15+0xa0>
8021c17c: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c180: 75 fa        	bnez	a2, 0x8021c174 <.LBB41_15+0x92>
8021c182: 2d 8d        	xor	a0, a0, a1
8021c184: 13 35 15 00  	seqz	a0, a0
8021c188: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c18c: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c190: 09 a0        	j	0x8021c192 <.LBB41_15+0xb0>
;     let (val, ok) = unsafe {
8021c192: 03 35 84 f3  	ld	a0, -0xc8(s0)
8021c196: 23 38 a4 ec  	sd	a0, -0x130(s0)
8021c19a: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021c19e: 83 45 04 f4  	lbu	a1, -0xc0(s0)
8021c1a2: 13 f5 15 00  	andi	a0, a1, 0x1
8021c1a6: a3 07 b4 fc  	sb	a1, -0x31(s0)
;     if ok { Ok(val) } else { Err(val) }
8021c1aa: 63 17 05 20  	bnez	a0, 0x8021c3b8 <.LBB41_15+0x2d6>
8021c1ae: ed aa        	j	0x8021c3a8 <.LBB41_15+0x2c6>
8021c1b0: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c1b4: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c1b8: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),
8021c1bc: af b5 06 10  	lr.d	a1, (a3)
8021c1c0: 63 95 a5 00  	bne	a1, a0, 0x8021c1ca <.LBB41_15+0xe8>
8021c1c4: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c1c8: 75 fa        	bnez	a2, 0x8021c1bc <.LBB41_15+0xda>
8021c1ca: 2d 8d        	xor	a0, a0, a1
8021c1cc: 13 35 15 00  	seqz	a0, a0
8021c1d0: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c1d4: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c1d8: 6d bf        	j	0x8021c192 <.LBB41_15+0xb0>
8021c1da: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c1de: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c1e2: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),
8021c1e6: af b5 06 14  	lr.d.aq	a1, (a3)
8021c1ea: 63 95 a5 00  	bne	a1, a0, 0x8021c1f4 <.LBB41_15+0x112>
8021c1ee: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c1f2: 75 fa        	bnez	a2, 0x8021c1e6 <.LBB41_15+0x104>
8021c1f4: 2d 8d        	xor	a0, a0, a1
8021c1f6: 13 35 15 00  	seqz	a0, a0
8021c1fa: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c1fe: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c202: 41 bf        	j	0x8021c192 <.LBB41_15+0xb0>
8021c204: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c208: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c20c: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),
8021c210: af b5 06 16  	lr.d.aqrl	a1, (a3)
8021c214: 63 95 a5 00  	bne	a1, a0, 0x8021c21e <.LBB41_15+0x13c>
8021c218: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c21c: 75 fa        	bnez	a2, 0x8021c210 <.LBB41_15+0x12e>
8021c21e: 2d 8d        	xor	a0, a0, a1
8021c220: 13 35 15 00  	seqz	a0, a0
8021c224: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c228: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c22c: 9d b7        	j	0x8021c192 <.LBB41_15+0xb0>
8021c22e: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c232: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c236: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
8021c23a: af b5 06 14  	lr.d.aq	a1, (a3)
8021c23e: 63 95 a5 00  	bne	a1, a0, 0x8021c248 <.LBB41_15+0x166>
8021c242: 2f b6 e6 18  	sc.d	a2, a4, (a3)
8021c246: 75 fa        	bnez	a2, 0x8021c23a <.LBB41_15+0x158>
8021c248: 2d 8d        	xor	a0, a0, a1
8021c24a: 13 35 15 00  	seqz	a0, a0
8021c24e: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c252: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c256: 35 bf        	j	0x8021c192 <.LBB41_15+0xb0>
8021c258: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c25c: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c260: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
8021c264: af b5 06 14  	lr.d.aq	a1, (a3)
8021c268: 63 95 a5 00  	bne	a1, a0, 0x8021c272 <.LBB41_15+0x190>
8021c26c: 2f b6 e6 18  	sc.d	a2, a4, (a3)
8021c270: 75 fa        	bnez	a2, 0x8021c264 <.LBB41_15+0x182>
8021c272: 2d 8d        	xor	a0, a0, a1
8021c274: 13 35 15 00  	seqz	a0, a0
8021c278: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c27c: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c280: 09 bf        	j	0x8021c192 <.LBB41_15+0xb0>
8021c282: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c286: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c28a: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),
8021c28e: af b5 06 16  	lr.d.aqrl	a1, (a3)
8021c292: 63 95 a5 00  	bne	a1, a0, 0x8021c29c <.LBB41_15+0x1ba>
8021c296: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c29a: 75 fa        	bnez	a2, 0x8021c28e <.LBB41_15+0x1ac>
8021c29c: 2d 8d        	xor	a0, a0, a1
8021c29e: 13 35 15 00  	seqz	a0, a0
8021c2a2: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c2a6: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c2aa: e5 b5        	j	0x8021c192 <.LBB41_15+0xb0>
8021c2ac: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c2b0: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c2b4: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),
8021c2b8: af b5 06 14  	lr.d.aq	a1, (a3)
8021c2bc: 63 95 a5 00  	bne	a1, a0, 0x8021c2c6 <.LBB41_15+0x1e4>
8021c2c0: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c2c4: 75 fa        	bnez	a2, 0x8021c2b8 <.LBB41_15+0x1d6>
8021c2c6: 2d 8d        	xor	a0, a0, a1
8021c2c8: 13 35 15 00  	seqz	a0, a0
8021c2cc: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c2d0: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c2d4: 7d bd        	j	0x8021c192 <.LBB41_15+0xb0>
8021c2d6: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c2da: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c2de: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),
8021c2e2: af b5 06 14  	lr.d.aq	a1, (a3)
8021c2e6: 63 95 a5 00  	bne	a1, a0, 0x8021c2f0 <.LBB41_15+0x20e>
8021c2ea: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c2ee: 75 fa        	bnez	a2, 0x8021c2e2 <.LBB41_15+0x200>
8021c2f0: 2d 8d        	xor	a0, a0, a1
8021c2f2: 13 35 15 00  	seqz	a0, a0
8021c2f6: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c2fa: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c2fe: 51 bd        	j	0x8021c192 <.LBB41_15+0xb0>
8021c300: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c304: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c308: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),
8021c30c: af b5 06 16  	lr.d.aqrl	a1, (a3)
8021c310: 63 95 a5 00  	bne	a1, a0, 0x8021c31a <.LBB41_15+0x238>
8021c314: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c318: 75 fa        	bnez	a2, 0x8021c30c <.LBB41_15+0x22a>
8021c31a: 2d 8d        	xor	a0, a0, a1
8021c31c: 13 35 15 00  	seqz	a0, a0
8021c320: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c324: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c328: ad b5        	j	0x8021c192 <.LBB41_15+0xb0>
8021c32a: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c32e: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c332: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),
8021c336: af b5 06 16  	lr.d.aqrl	a1, (a3)
8021c33a: 63 95 a5 00  	bne	a1, a0, 0x8021c344 <.LBB41_15+0x262>
8021c33e: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c342: 75 fa        	bnez	a2, 0x8021c336 <.LBB41_15+0x254>
8021c344: 2d 8d        	xor	a0, a0, a1
8021c346: 13 35 15 00  	seqz	a0, a0
8021c34a: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c34e: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c352: 81 b5        	j	0x8021c192 <.LBB41_15+0xb0>
8021c354: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c358: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c35c: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),
8021c360: af b5 06 16  	lr.d.aqrl	a1, (a3)
8021c364: 63 95 a5 00  	bne	a1, a0, 0x8021c36e <.LBB41_15+0x28c>
8021c368: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c36c: 75 fa        	bnez	a2, 0x8021c360 <.LBB41_15+0x27e>
8021c36e: 2d 8d        	xor	a0, a0, a1
8021c370: 13 35 15 00  	seqz	a0, a0
8021c374: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c378: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c37c: 19 bd        	j	0x8021c192 <.LBB41_15+0xb0>
8021c37e: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021c382: 83 36 04 f1  	ld	a3, -0xf0(s0)
8021c386: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),
8021c38a: af b5 06 16  	lr.d.aqrl	a1, (a3)
8021c38e: 63 95 a5 00  	bne	a1, a0, 0x8021c398 <.LBB41_15+0x2b6>
8021c392: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8021c396: 75 fa        	bnez	a2, 0x8021c38a <.LBB41_15+0x2a8>
8021c398: 2d 8d        	xor	a0, a0, a1
8021c39a: 13 35 15 00  	seqz	a0, a0
8021c39e: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c3a2: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8021c3a6: f5 b3        	j	0x8021c192 <.LBB41_15+0xb0>
8021c3a8: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if ok { Ok(val) } else { Err(val) }
8021c3ac: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8021c3b0: 05 45        	li	a0, 0x1
8021c3b2: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8021c3b6: 09 a8        	j	0x8021c3c8 <.LBB41_15+0x2e6>
8021c3b8: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if ok { Ok(val) } else { Err(val) }
8021c3bc: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8021c3c0: 01 45        	li	a0, 0x0
8021c3c2: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8021c3c6: 09 a0        	j	0x8021c3c8 <.LBB41_15+0x2e6>
; }
8021c3c8: 03 35 84 f2  	ld	a0, -0xd8(s0)
8021c3cc: 83 35 04 f3  	ld	a1, -0xd0(s0)
8021c3d0: b2 70        	ld	ra, 0x128(sp)
8021c3d2: 12 74        	ld	s0, 0x120(sp)
8021c3d4: 55 61        	addi	sp, sp, 0x130
8021c3d6: 82 80        	ret

000000008021c3d8 <.Lpcrel_hi26>:
;             (_, Release) => panic!("there is no such thing as a release failure ordering"),
8021c3d8: 17 c5 01 00  	auipc	a0, 0x1c
8021c3dc: 93 05 05 d0  	addi	a1, a0, -0x300
8021c3e0: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021c3e4: 05 45        	li	a0, 0x1
8021c3e6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021c3ea: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021c3ee: 23 30 a4 f8  	sd	a0, -0x80(s0)

000000008021c3f2 <.Lpcrel_hi27>:
8021c3f2: 17 75 01 00  	auipc	a0, 0x17
8021c3f6: 13 05 e5 e9  	addi	a0, a0, -0x162
8021c3fa: 0c 61        	ld	a1, 0x0(a0)
8021c3fc: 08 65        	ld	a0, 0x8(a0)
8021c3fe: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021c402: 23 30 a4 fa  	sd	a0, -0x60(s0)

000000008021c406 <.Lpcrel_hi28>:
8021c406: 17 c5 01 00  	auipc	a0, 0x1c
8021c40a: 13 05 a5 9c  	addi	a0, a0, -0x636
8021c40e: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021c412: 01 45        	li	a0, 0x0
8021c414: 23 38 a4 f8  	sd	a0, -0x70(s0)

000000008021c418 <.Lpcrel_hi29>:
;             (_, Release) => panic!("there is no such thing as a release failure ordering"),
8021c418: 17 c5 01 00  	auipc	a0, 0x1c
8021c41c: 93 05 05 cd  	addi	a1, a0, -0x330
8021c420: 13 05 84 f7  	addi	a0, s0, -0x88
8021c424: 97 40 01 00  	auipc	ra, 0x14
8021c428: e7 80 40 d8  	jalr	-0x27c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021c42c <.Lpcrel_hi30>:
;             (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
8021c42c: 17 c5 01 00  	auipc	a0, 0x1c
8021c430: 93 05 45 d1  	addi	a1, a0, -0x2ec
8021c434: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021c438: 05 45        	li	a0, 0x1
8021c43a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8021c43e: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8021c442: 23 38 a4 f4  	sd	a0, -0xb0(s0)

000000008021c446 <.Lpcrel_hi31>:
8021c446: 17 75 01 00  	auipc	a0, 0x17
8021c44a: 13 05 a5 e4  	addi	a0, a0, -0x1b6
8021c44e: 0c 61        	ld	a1, 0x0(a0)
8021c450: 08 65        	ld	a0, 0x8(a0)
8021c452: 23 34 b4 f6  	sd	a1, -0x98(s0)
8021c456: 23 38 a4 f6  	sd	a0, -0x90(s0)

000000008021c45a <.Lpcrel_hi32>:
8021c45a: 17 c5 01 00  	auipc	a0, 0x1c
8021c45e: 13 05 65 97  	addi	a0, a0, -0x68a
8021c462: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8021c466: 01 45        	li	a0, 0x0
8021c468: 23 30 a4 f6  	sd	a0, -0xa0(s0)

000000008021c46c <.Lpcrel_hi33>:
;             (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
8021c46c: 17 c5 01 00  	auipc	a0, 0x1c
8021c470: 93 05 45 ce  	addi	a1, a0, -0x31c
8021c474: 13 05 84 f4  	addi	a0, s0, -0xb8
8021c478: 97 40 01 00  	auipc	ra, 0x14
8021c47c: e7 80 00 d3  	jalr	-0x2d0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008021c480 <_ZN4core6option15Option$LT$T$GT$3map17h5360b2b0a604dc38E>:
;     pub fn map<U, F>(self, f: F) -> Option<U>
8021c480: 59 71        	addi	sp, sp, -0x70
8021c482: 86 f4        	sd	ra, 0x68(sp)
8021c484: a2 f0        	sd	s0, 0x60(sp)
8021c486: 80 18        	addi	s0, sp, 0x70
8021c488: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021c48c: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021c490: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         match self {
8021c494: 03 35 04 fa  	ld	a0, -0x60(s0)
8021c498: 19 e5        	bnez	a0, 0x8021c4a6 <_ZN4core6option15Option$LT$T$GT$3map17h5360b2b0a604dc38E+0x26>
8021c49a: 09 a0        	j	0x8021c49c <_ZN4core6option15Option$LT$T$GT$3map17h5360b2b0a604dc38E+0x1c>
8021c49c: 83 35 84 f9  	ld	a1, -0x68(s0)
8021c4a0: 09 45        	li	a0, 0x2
;             None => None,
8021c4a2: 88 e1        	sd	a0, 0x0(a1)
;     }
8021c4a4: 99 a0        	j	0x8021c4ea <_ZN4core6option15Option$LT$T$GT$3map17h5360b2b0a604dc38E+0x6a>
;             Some(x) => Some(f(x)),
8021c4a6: 83 35 04 fa  	ld	a1, -0x60(s0)
8021c4aa: 03 35 84 fa  	ld	a0, -0x58(s0)
8021c4ae: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021c4b2: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021c4b6: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021c4ba: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021c4be: 83 35 84 fc  	ld	a1, -0x38(s0)
8021c4c2: 03 36 04 fd  	ld	a2, -0x30(s0)
8021c4c6: 13 05 04 fb  	addi	a0, s0, -0x50
8021c4ca: 97 00 00 00  	auipc	ra, 0x0
8021c4ce: e7 80 60 80  	jalr	-0x7fa(ra) <_ZN4core3ops8function6FnOnce9call_once17hb6311afb0ec8dac6E>
8021c4d2: 83 35 84 f9  	ld	a1, -0x68(s0)
8021c4d6: 03 35 04 fc  	ld	a0, -0x40(s0)
8021c4da: 88 e9        	sd	a0, 0x10(a1)
8021c4dc: 03 35 84 fb  	ld	a0, -0x48(s0)
8021c4e0: 88 e5        	sd	a0, 0x8(a1)
8021c4e2: 03 35 04 fb  	ld	a0, -0x50(s0)
8021c4e6: 88 e1        	sd	a0, 0x0(a1)
8021c4e8: 09 a0        	j	0x8021c4ea <_ZN4core6option15Option$LT$T$GT$3map17h5360b2b0a604dc38E+0x6a>
8021c4ea: a6 70        	ld	ra, 0x68(sp)
8021c4ec: 06 74        	ld	s0, 0x60(sp)
;     }
8021c4ee: 65 61        	addi	sp, sp, 0x70
8021c4f0: 82 80        	ret

000000008021c4f2 <_ZN4core6option15Option$LT$T$GT$7is_some17he646c0f979012474E>:
;     pub const fn is_some(&self) -> bool {
8021c4f2: 01 11        	addi	sp, sp, -0x20
8021c4f4: 06 ec        	sd	ra, 0x18(sp)
8021c4f6: 22 e8        	sd	s0, 0x10(sp)
8021c4f8: 00 10        	addi	s0, sp, 0x20
8021c4fa: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         matches!(*self, Some(_))
8021c4fe: 08 61        	ld	a0, 0x0(a0)
8021c500: 11 c5        	beqz	a0, 0x8021c50c <_ZN4core6option15Option$LT$T$GT$7is_some17he646c0f979012474E+0x1a>
8021c502: 09 a0        	j	0x8021c504 <_ZN4core6option15Option$LT$T$GT$7is_some17he646c0f979012474E+0x12>
8021c504: 05 45        	li	a0, 0x1
;         matches!(*self, Some(_))
8021c506: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021c50a: 29 a0        	j	0x8021c514 <_ZN4core6option15Option$LT$T$GT$7is_some17he646c0f979012474E+0x22>
8021c50c: 01 45        	li	a0, 0x0
;         matches!(*self, Some(_))
8021c50e: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021c512: 09 a0        	j	0x8021c514 <_ZN4core6option15Option$LT$T$GT$7is_some17he646c0f979012474E+0x22>
;     }
8021c514: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021c518: e2 60        	ld	ra, 0x18(sp)
8021c51a: 42 64        	ld	s0, 0x10(sp)
8021c51c: 05 61        	addi	sp, sp, 0x20
8021c51e: 82 80        	ret

000000008021c520 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h503c2029d2d757e0E>:
; #[derive(Copy, Clone)]
8021c520: 01 11        	addi	sp, sp, -0x20
8021c522: 06 ec        	sd	ra, 0x18(sp)
8021c524: 22 e8        	sd	s0, 0x10(sp)
8021c526: 00 10        	addi	s0, sp, 0x20
8021c528: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021c52c: aa 85        	mv	a1, a0
8021c52e: 03 35 04 fe  	ld	a0, -0x20(s0)
8021c532: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021c536: 10 75        	ld	a2, 0x28(a0)
8021c538: 90 f5        	sd	a2, 0x28(a1)
8021c53a: 10 71        	ld	a2, 0x20(a0)
8021c53c: 90 f1        	sd	a2, 0x20(a1)
8021c53e: 10 6d        	ld	a2, 0x18(a0)
8021c540: 90 ed        	sd	a2, 0x18(a1)
8021c542: 10 69        	ld	a2, 0x10(a0)
8021c544: 90 e9        	sd	a2, 0x10(a1)
8021c546: 10 65        	ld	a2, 0x8(a0)
8021c548: 90 e5        	sd	a2, 0x8(a1)
8021c54a: 08 61        	ld	a0, 0x0(a0)
8021c54c: 88 e1        	sd	a0, 0x0(a1)
8021c54e: e2 60        	ld	ra, 0x18(sp)
8021c550: 42 64        	ld	s0, 0x10(sp)
8021c552: 05 61        	addi	sp, sp, 0x20
8021c554: 82 80        	ret

000000008021c556 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h6a695a4872da4f59E>:
;     fn clone(&self) -> Self {
8021c556: 39 71        	addi	sp, sp, -0x40
8021c558: 06 fc        	sd	ra, 0x38(sp)
8021c55a: 22 f8        	sd	s0, 0x30(sp)
8021c55c: 80 00        	addi	s0, sp, 0x40
8021c55e: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021c562: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         match self {
8021c566: 08 41        	lw	a0, 0x0(a0)
8021c568: 11 e5        	bnez	a0, 0x8021c574 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h6a695a4872da4f59E+0x1e>
8021c56a: 09 a0        	j	0x8021c56c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h6a695a4872da4f59E+0x16>
8021c56c: 01 45        	li	a0, 0x0
;             None => None,
8021c56e: 23 28 a4 fc  	sw	a0, -0x30(s0)
8021c572: 05 a0        	j	0x8021c592 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h6a695a4872da4f59E+0x3c>
8021c574: 03 35 84 fc  	ld	a0, -0x38(s0)
;             Some(x) => Some(x.clone()),
8021c578: 93 05 45 00  	addi	a1, a0, 0x4
8021c57c: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021c580: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                         *self
8021c584: 48 41        	lw	a0, 0x4(a0)
;             Some(x) => Some(x.clone()),
8021c586: 23 2a a4 fc  	sw	a0, -0x2c(s0)
8021c58a: 05 45        	li	a0, 0x1
8021c58c: 23 28 a4 fc  	sw	a0, -0x30(s0)
8021c590: 09 a0        	j	0x8021c592 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h6a695a4872da4f59E+0x3c>
;     }
8021c592: 03 25 04 fd  	lw	a0, -0x30(s0)
8021c596: 83 25 44 fd  	lw	a1, -0x2c(s0)
8021c59a: e2 70        	ld	ra, 0x38(sp)
8021c59c: 42 74        	ld	s0, 0x30(sp)
8021c59e: 21 61        	addi	sp, sp, 0x40
8021c5a0: 82 80        	ret

000000008021c5a2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h87c2c11e522b0482E>:
;     fn clone(&self) -> Self {
8021c5a2: 5d 71        	addi	sp, sp, -0x50
8021c5a4: 86 e4        	sd	ra, 0x48(sp)
8021c5a6: a2 e0        	sd	s0, 0x40(sp)
8021c5a8: 80 08        	addi	s0, sp, 0x50
8021c5aa: 23 3c b4 fa  	sd	a1, -0x48(s0)
8021c5ae: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021c5b2: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
8021c5b6: 88 61        	ld	a0, 0x0(a1)
8021c5b8: 89 45        	li	a1, 0x2
8021c5ba: 63 18 b5 00  	bne	a0, a1, 0x8021c5ca <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h87c2c11e522b0482E+0x28>
8021c5be: 09 a0        	j	0x8021c5c0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h87c2c11e522b0482E+0x1e>
8021c5c0: 83 35 04 fc  	ld	a1, -0x40(s0)
8021c5c4: 09 45        	li	a0, 0x2
;             None => None,
8021c5c6: 88 e1        	sd	a0, 0x0(a1)
8021c5c8: 3d a0        	j	0x8021c5f6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h87c2c11e522b0482E+0x54>
8021c5ca: 83 35 84 fb  	ld	a1, -0x48(s0)
;             Some(x) => Some(x.clone()),
8021c5ce: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021c5d2: 13 05 84 fc  	addi	a0, s0, -0x38
8021c5d6: 97 00 00 00  	auipc	ra, 0x0
8021c5da: e7 80 40 5d  	jalr	0x5d4(ra) <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h8eb96467f7c73d6fE>
8021c5de: 83 35 04 fc  	ld	a1, -0x40(s0)
8021c5e2: 03 35 84 fd  	ld	a0, -0x28(s0)
8021c5e6: 88 e9        	sd	a0, 0x10(a1)
8021c5e8: 03 35 04 fd  	ld	a0, -0x30(s0)
8021c5ec: 88 e5        	sd	a0, 0x8(a1)
8021c5ee: 03 35 84 fc  	ld	a0, -0x38(s0)
8021c5f2: 88 e1        	sd	a0, 0x0(a1)
8021c5f4: 09 a0        	j	0x8021c5f6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h87c2c11e522b0482E+0x54>
8021c5f6: a6 60        	ld	ra, 0x48(sp)
8021c5f8: 06 64        	ld	s0, 0x40(sp)
;     }
8021c5fa: 61 61        	addi	sp, sp, 0x50
8021c5fc: 82 80        	ret

000000008021c5fe <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$11from_output17he69a2413d9dad009E>:
;     fn from_output(output: Self::Output) -> Self {
8021c5fe: 79 71        	addi	sp, sp, -0x30
8021c600: 06 f4        	sd	ra, 0x28(sp)
8021c602: 22 f0        	sd	s0, 0x20(sp)
8021c604: 00 18        	addi	s0, sp, 0x30
8021c606: 01 45        	li	a0, 0x0
;         ControlFlow::Continue(output)
8021c608: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
8021c60c: 03 35 84 fd  	ld	a0, -0x28(s0)
8021c610: 83 35 04 fe  	ld	a1, -0x20(s0)
8021c614: a2 70        	ld	ra, 0x28(sp)
8021c616: 02 74        	ld	s0, 0x20(sp)
8021c618: 45 61        	addi	sp, sp, 0x30
8021c61a: 82 80        	ret

000000008021c61c <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h71ca79023a28d592E>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
8021c61c: 5d 71        	addi	sp, sp, -0x50
8021c61e: 86 e4        	sd	ra, 0x48(sp)
8021c620: a2 e0        	sd	s0, 0x40(sp)
8021c622: 80 08        	addi	s0, sp, 0x50
8021c624: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021c628: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         match self {
8021c62c: 03 35 84 fb  	ld	a0, -0x48(s0)
8021c630: 11 e5        	bnez	a0, 0x8021c63c <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h71ca79023a28d592E+0x20>
8021c632: 09 a0        	j	0x8021c634 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h71ca79023a28d592E+0x18>
8021c634: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(c) => ControlFlow::Continue(c),
8021c636: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021c63a: 39 a8        	j	0x8021c658 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h71ca79023a28d592E+0x3c>
;             ControlFlow::Break(b) => ControlFlow::Break(ControlFlow::Break(b)),
8021c63c: 03 35 04 fc  	ld	a0, -0x40(s0)
8021c640: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021c644: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021c648: 03 35 84 fd  	ld	a0, -0x28(s0)
8021c64c: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021c650: 05 45        	li	a0, 0x1
8021c652: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021c656: 09 a0        	j	0x8021c658 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h71ca79023a28d592E+0x3c>
;     }
8021c658: 03 35 84 fc  	ld	a0, -0x38(s0)
8021c65c: 83 35 04 fd  	ld	a1, -0x30(s0)
8021c660: a6 60        	ld	ra, 0x48(sp)
8021c662: 06 64        	ld	s0, 0x40(sp)
8021c664: 61 61        	addi	sp, sp, 0x50
8021c666: 82 80        	ret

000000008021c668 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf413e39bdc58be62E>:
;     fn clone(&self) -> Level {
8021c668: 01 11        	addi	sp, sp, -0x20
8021c66a: 06 ec        	sd	ra, 0x18(sp)
8021c66c: 22 e8        	sd	s0, 0x10(sp)
8021c66e: 00 10        	addi	s0, sp, 0x20
8021c670: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         *self
8021c674: 08 61        	ld	a0, 0x0(a0)
8021c676: e2 60        	ld	ra, 0x18(sp)
8021c678: 42 64        	ld	s0, 0x10(sp)
;     }
8021c67a: 05 61        	addi	sp, sp, 0x20
8021c67c: 82 80        	ret

000000008021c67e <_ZN3log6Record7builder17hcd2da90ba89924f2E>:
;     pub fn builder() -> RecordBuilder<'a> {
8021c67e: 41 11        	addi	sp, sp, -0x10
8021c680: 06 e4        	sd	ra, 0x8(sp)
8021c682: 22 e0        	sd	s0, 0x0(sp)
8021c684: 00 08        	addi	s0, sp, 0x10
;         RecordBuilder::new()
8021c686: 97 00 00 00  	auipc	ra, 0x0
8021c68a: e7 80 00 01  	jalr	0x10(ra) <_ZN3log13RecordBuilder3new17h45b53ca56eac9aedE>
8021c68e: a2 60        	ld	ra, 0x8(sp)
8021c690: 02 64        	ld	s0, 0x0(sp)
;     }
8021c692: 41 01        	addi	sp, sp, 0x10
8021c694: 82 80        	ret

000000008021c696 <_ZN3log13RecordBuilder3new17h45b53ca56eac9aedE>:
;     pub fn new() -> RecordBuilder<'a> {
8021c696: 29 71        	addi	sp, sp, -0x140
8021c698: 06 fe        	sd	ra, 0x138(sp)
8021c69a: 22 fa        	sd	s0, 0x130(sp)
8021c69c: 80 02        	addi	s0, sp, 0x140
8021c69e: 23 38 a4 ec  	sd	a0, -0x130(s0)

000000008021c6a2 <.Lpcrel_hi58>:
;                 args: format_args!(""),
8021c6a2: 17 b5 01 00  	auipc	a0, 0x1b
8021c6a6: 93 05 e5 72  	addi	a1, a0, 0x72e
8021c6aa: 13 05 84 f5  	addi	a0, s0, -0xa8
8021c6ae: 01 46        	li	a2, 0x0
8021c6b0: 23 34 c4 ec  	sd	a2, -0x138(s0)
8021c6b4: 97 f0 ff ff  	auipc	ra, 0xfffff
8021c6b8: e7 80 40 59  	jalr	0x594(ra) <ekernel+0xffccec48>
8021c6bc: 13 05 04 fa  	addi	a0, s0, -0x60
8021c6c0: 23 30 a4 ec  	sd	a0, -0x140(s0)
;                 metadata: Metadata::builder().build(),
8021c6c4: 97 00 00 00  	auipc	ra, 0x0
8021c6c8: e7 80 40 1f  	jalr	0x1f4(ra) <_ZN3log8Metadata7builder17h3485d851f84a49b8E>
8021c6cc: 83 35 04 ec  	ld	a1, -0x140(s0)
8021c6d0: 13 05 84 f8  	addi	a0, s0, -0x78
8021c6d4: 97 00 00 00  	auipc	ra, 0x0
8021c6d8: e7 80 00 24  	jalr	0x240(ra) <_ZN3log15MetadataBuilder5build17hc93cf1e74d101714E>
8021c6dc: 83 35 84 ec  	ld	a1, -0x138(s0)
8021c6e0: 03 35 04 ed  	ld	a0, -0x130(s0)
8021c6e4: 09 46        	li	a2, 0x2
;                 module_path: None,
8021c6e6: 23 3c c4 fa  	sd	a2, -0x48(s0)
;                 file: None,
8021c6ea: 23 38 c4 fc  	sd	a2, -0x30(s0)
;                 line: None,
8021c6ee: 23 24 b4 fe  	sw	a1, -0x18(s0)
;             record: Record {
8021c6f2: 83 35 84 f9  	ld	a1, -0x68(s0)
8021c6f6: 23 3c b4 f0  	sd	a1, -0xe8(s0)
8021c6fa: 83 35 04 f9  	ld	a1, -0x70(s0)
8021c6fe: 23 38 b4 f0  	sd	a1, -0xf0(s0)
8021c702: 83 35 84 f8  	ld	a1, -0x78(s0)
8021c706: 23 34 b4 f0  	sd	a1, -0xf8(s0)
8021c70a: 83 35 04 f8  	ld	a1, -0x80(s0)
8021c70e: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8021c712: 83 35 84 f7  	ld	a1, -0x88(s0)
8021c716: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8021c71a: 83 35 04 f7  	ld	a1, -0x90(s0)
8021c71e: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8021c722: 83 35 84 f6  	ld	a1, -0x98(s0)
8021c726: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021c72a: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021c72e: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8021c732: 83 35 84 f5  	ld	a1, -0xa8(s0)
8021c736: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8021c73a: 83 35 84 fc  	ld	a1, -0x38(s0)
8021c73e: 23 34 b4 ee  	sd	a1, -0x118(s0)
8021c742: 83 35 04 fc  	ld	a1, -0x40(s0)
8021c746: 23 30 b4 ee  	sd	a1, -0x120(s0)
8021c74a: 83 35 84 fb  	ld	a1, -0x48(s0)
8021c74e: 23 3c b4 ec  	sd	a1, -0x128(s0)
8021c752: 83 35 04 fe  	ld	a1, -0x20(s0)
8021c756: 23 30 b4 f0  	sd	a1, -0x100(s0)
8021c75a: 83 35 84 fd  	ld	a1, -0x28(s0)
8021c75e: 23 3c b4 ee  	sd	a1, -0x108(s0)
8021c762: 83 35 04 fd  	ld	a1, -0x30(s0)
8021c766: 23 38 b4 ee  	sd	a1, -0x110(s0)
8021c76a: 03 26 84 fe  	lw	a2, -0x18(s0)
8021c76e: 83 25 c4 fe  	lw	a1, -0x14(s0)
8021c772: 23 20 c4 f2  	sw	a2, -0xe0(s0)
8021c776: 23 22 b4 f2  	sw	a1, -0xdc(s0)
8021c77a: 93 05 84 ed  	addi	a1, s0, -0x128
8021c77e: 13 06 00 08  	li	a2, 0x80
;         RecordBuilder {
8021c782: 97 50 01 00  	auipc	ra, 0x15
8021c786: e7 80 c0 4e  	jalr	0x4ec(ra) <memcpy>
8021c78a: f2 70        	ld	ra, 0x138(sp)
8021c78c: 52 74        	ld	s0, 0x130(sp)
;     }
8021c78e: 31 61        	addi	sp, sp, 0x140
8021c790: 82 80        	ret

000000008021c792 <_ZN3log13RecordBuilder4args17h29542f926a3ea2c4E>:
;     pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
8021c792: 01 11        	addi	sp, sp, -0x20
8021c794: 06 ec        	sd	ra, 0x18(sp)
8021c796: 22 e8        	sd	s0, 0x10(sp)
8021c798: 00 10        	addi	s0, sp, 0x20
8021c79a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.record.args = args;
8021c79e: 90 75        	ld	a2, 0x28(a1)
8021c7a0: 30 fd        	sd	a2, 0x78(a0)
8021c7a2: 90 71        	ld	a2, 0x20(a1)
8021c7a4: 30 f9        	sd	a2, 0x70(a0)
8021c7a6: 90 6d        	ld	a2, 0x18(a1)
8021c7a8: 30 f5        	sd	a2, 0x68(a0)
8021c7aa: 90 69        	ld	a2, 0x10(a1)
8021c7ac: 30 f1        	sd	a2, 0x60(a0)
8021c7ae: 90 65        	ld	a2, 0x8(a1)
8021c7b0: 30 ed        	sd	a2, 0x58(a0)
8021c7b2: 8c 61        	ld	a1, 0x0(a1)
8021c7b4: 2c e9        	sd	a1, 0x50(a0)
8021c7b6: e2 60        	ld	ra, 0x18(sp)
8021c7b8: 42 64        	ld	s0, 0x10(sp)
;     }
8021c7ba: 05 61        	addi	sp, sp, 0x20
8021c7bc: 82 80        	ret

000000008021c7be <_ZN3log13RecordBuilder5level17hbbef7c35aeef1a38E>:
;     pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
8021c7be: 01 11        	addi	sp, sp, -0x20
8021c7c0: 06 ec        	sd	ra, 0x18(sp)
8021c7c2: 22 e8        	sd	s0, 0x10(sp)
8021c7c4: 00 10        	addi	s0, sp, 0x20
8021c7c6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021c7ca: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.record.metadata.level = level;
8021c7ce: 0c f9        	sd	a1, 0x30(a0)
8021c7d0: e2 60        	ld	ra, 0x18(sp)
8021c7d2: 42 64        	ld	s0, 0x10(sp)
;     }
8021c7d4: 05 61        	addi	sp, sp, 0x20
8021c7d6: 82 80        	ret

000000008021c7d8 <_ZN3log13RecordBuilder6target17h661ff62074921264E>:
;     pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
8021c7d8: 79 71        	addi	sp, sp, -0x30
8021c7da: 06 f4        	sd	ra, 0x28(sp)
8021c7dc: 22 f0        	sd	s0, 0x20(sp)
8021c7de: 00 18        	addi	s0, sp, 0x30
8021c7e0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021c7e4: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021c7e8: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         self.record.metadata.target = target;
8021c7ec: 0c fd        	sd	a1, 0x38(a0)
8021c7ee: 30 e1        	sd	a2, 0x40(a0)
8021c7f0: a2 70        	ld	ra, 0x28(sp)
8021c7f2: 02 74        	ld	s0, 0x20(sp)
;     }
8021c7f4: 45 61        	addi	sp, sp, 0x30
8021c7f6: 82 80        	ret

000000008021c7f8 <_ZN3log13RecordBuilder18module_path_static17h15647d4f730ebe84E>:
;     pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
8021c7f8: 5d 71        	addi	sp, sp, -0x50
8021c7fa: 86 e4        	sd	ra, 0x48(sp)
8021c7fc: a2 e0        	sd	s0, 0x40(sp)
8021c7fe: 80 08        	addi	s0, sp, 0x50
8021c800: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021c804: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021c808: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021c80c: 23 34 c4 fe  	sd	a2, -0x18(s0)
8021c810: 13 05 04 fc  	addi	a0, s0, -0x40
;         self.record.module_path = path.map(MaybeStaticStr::Static);
8021c814: 97 00 00 00  	auipc	ra, 0x0
8021c818: e7 80 c0 c6  	jalr	-0x394(ra) <_ZN4core6option15Option$LT$T$GT$3map17h5360b2b0a604dc38E>
8021c81c: 03 35 84 fb  	ld	a0, -0x48(s0)
8021c820: 83 35 04 fd  	ld	a1, -0x30(s0)
8021c824: 0c e9        	sd	a1, 0x10(a0)
8021c826: 83 35 84 fc  	ld	a1, -0x38(s0)
8021c82a: 0c e5        	sd	a1, 0x8(a0)
8021c82c: 83 35 04 fc  	ld	a1, -0x40(s0)
8021c830: 0c e1        	sd	a1, 0x0(a0)
8021c832: a6 60        	ld	ra, 0x48(sp)
8021c834: 06 64        	ld	s0, 0x40(sp)
;     }
8021c836: 61 61        	addi	sp, sp, 0x50
8021c838: 82 80        	ret

000000008021c83a <_ZN3log13RecordBuilder11file_static17he3ac4e33c139645cE>:
;     pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
8021c83a: 5d 71        	addi	sp, sp, -0x50
8021c83c: 86 e4        	sd	ra, 0x48(sp)
8021c83e: a2 e0        	sd	s0, 0x40(sp)
8021c840: 80 08        	addi	s0, sp, 0x50
8021c842: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021c846: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021c84a: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021c84e: 23 34 c4 fe  	sd	a2, -0x18(s0)
8021c852: 13 05 04 fc  	addi	a0, s0, -0x40
;         self.record.file = file.map(MaybeStaticStr::Static);
8021c856: 97 00 00 00  	auipc	ra, 0x0
8021c85a: e7 80 a0 c2  	jalr	-0x3d6(ra) <_ZN4core6option15Option$LT$T$GT$3map17h5360b2b0a604dc38E>
8021c85e: 03 35 84 fb  	ld	a0, -0x48(s0)
8021c862: 83 35 04 fd  	ld	a1, -0x30(s0)
8021c866: 0c f5        	sd	a1, 0x28(a0)
8021c868: 83 35 84 fc  	ld	a1, -0x38(s0)
8021c86c: 0c f1        	sd	a1, 0x20(a0)
8021c86e: 83 35 04 fc  	ld	a1, -0x40(s0)
8021c872: 0c ed        	sd	a1, 0x18(a0)
8021c874: a6 60        	ld	ra, 0x48(sp)
8021c876: 06 64        	ld	s0, 0x40(sp)
;     }
8021c878: 61 61        	addi	sp, sp, 0x50
8021c87a: 82 80        	ret

000000008021c87c <_ZN3log13RecordBuilder4line17h7d395a2b5b03abcbE>:
;     pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
8021c87c: 01 11        	addi	sp, sp, -0x20
8021c87e: 06 ec        	sd	ra, 0x18(sp)
8021c880: 22 e8        	sd	s0, 0x10(sp)
8021c882: 00 10        	addi	s0, sp, 0x20
8021c884: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021c888: 23 24 b4 fe  	sw	a1, -0x18(s0)
8021c88c: 23 26 c4 fe  	sw	a2, -0x14(s0)
;         self.record.line = line;
8021c890: 2c c5        	sw	a1, 0x48(a0)
8021c892: 70 c5        	sw	a2, 0x4c(a0)
8021c894: e2 60        	ld	ra, 0x18(sp)
8021c896: 42 64        	ld	s0, 0x10(sp)
;     }
8021c898: 05 61        	addi	sp, sp, 0x20
8021c89a: 82 80        	ret

000000008021c89c <_ZN3log13RecordBuilder5build17hb86d399ac9612fe4E>:
;     pub fn build(&self) -> Record<'a> {
8021c89c: 01 11        	addi	sp, sp, -0x20
8021c89e: 06 ec        	sd	ra, 0x18(sp)
8021c8a0: 22 e8        	sd	s0, 0x10(sp)
8021c8a2: 00 10        	addi	s0, sp, 0x20
8021c8a4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.record.clone()
8021c8a8: 97 00 00 00  	auipc	ra, 0x0
8021c8ac: e7 80 c0 32  	jalr	0x32c(ra) <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17h708a9b70222f5dd6E>
8021c8b0: e2 60        	ld	ra, 0x18(sp)
8021c8b2: 42 64        	ld	s0, 0x10(sp)
;     }
8021c8b4: 05 61        	addi	sp, sp, 0x20
8021c8b6: 82 80        	ret

000000008021c8b8 <_ZN3log8Metadata7builder17h3485d851f84a49b8E>:
;     pub fn builder() -> MetadataBuilder<'a> {
8021c8b8: 41 11        	addi	sp, sp, -0x10
8021c8ba: 06 e4        	sd	ra, 0x8(sp)
8021c8bc: 22 e0        	sd	s0, 0x0(sp)
8021c8be: 00 08        	addi	s0, sp, 0x10
;         MetadataBuilder::new()
8021c8c0: 97 00 00 00  	auipc	ra, 0x0
8021c8c4: e7 80 00 01  	jalr	0x10(ra) <_ZN3log15MetadataBuilder3new17h2d2ab8bc0266eb83E>
8021c8c8: a2 60        	ld	ra, 0x8(sp)
8021c8ca: 02 64        	ld	s0, 0x0(sp)
;     }
8021c8cc: 41 01        	addi	sp, sp, 0x10
8021c8ce: 82 80        	ret

000000008021c8d0 <_ZN3log15MetadataBuilder3new17h2d2ab8bc0266eb83E>:
;     pub fn new() -> MetadataBuilder<'a> {
8021c8d0: 79 71        	addi	sp, sp, -0x30
8021c8d2: 06 f4        	sd	ra, 0x28(sp)
8021c8d4: 22 f0        	sd	s0, 0x20(sp)
8021c8d6: 00 18        	addi	s0, sp, 0x30
8021c8d8: aa 85        	mv	a1, a0
8021c8da: 0d 45        	li	a0, 0x3
;                 level: Level::Info,
8021c8dc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             metadata: Metadata {
8021c8e0: 03 35 84 fe  	ld	a0, -0x18(s0)
8021c8e4: 23 38 a4 fc  	sd	a0, -0x30(s0)

000000008021c8e8 <.Lpcrel_hi59>:
8021c8e8: 17 b5 01 00  	auipc	a0, 0x1b
8021c8ec: 13 05 85 4e  	addi	a0, a0, 0x4e8
8021c8f0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021c8f4: 01 45        	li	a0, 0x0
8021c8f6: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         MetadataBuilder {
8021c8fa: 03 35 04 fe  	ld	a0, -0x20(s0)
8021c8fe: 88 e9        	sd	a0, 0x10(a1)
8021c900: 03 35 84 fd  	ld	a0, -0x28(s0)
8021c904: 88 e5        	sd	a0, 0x8(a1)
8021c906: 03 35 04 fd  	ld	a0, -0x30(s0)
8021c90a: 88 e1        	sd	a0, 0x0(a1)
8021c90c: a2 70        	ld	ra, 0x28(sp)
8021c90e: 02 74        	ld	s0, 0x20(sp)
;     }
8021c910: 45 61        	addi	sp, sp, 0x30
8021c912: 82 80        	ret

000000008021c914 <_ZN3log15MetadataBuilder5build17hc93cf1e74d101714E>:
;     pub fn build(&self) -> Metadata<'a> {
8021c914: 01 11        	addi	sp, sp, -0x20
8021c916: 06 ec        	sd	ra, 0x18(sp)
8021c918: 22 e8        	sd	s0, 0x10(sp)
8021c91a: 00 10        	addi	s0, sp, 0x20
8021c91c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.metadata.clone()
8021c920: 97 00 00 00  	auipc	ra, 0x0
8021c924: e7 80 a0 38  	jalr	0x38a(ra) <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17hefd45fe4fe94436bE>
8021c928: e2 60        	ld	ra, 0x18(sp)
8021c92a: 42 64        	ld	s0, 0x10(sp)
;     }
8021c92c: 05 61        	addi	sp, sp, 0x20
8021c92e: 82 80        	ret

000000008021c930 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17hac569adc4bf0f131E>:
;     fn enabled(&self, _: &Metadata) -> bool {
8021c930: 01 11        	addi	sp, sp, -0x20
8021c932: 06 ec        	sd	ra, 0x18(sp)
8021c934: 22 e8        	sd	s0, 0x10(sp)
8021c936: 00 10        	addi	s0, sp, 0x20
8021c938: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021c93c: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021c940: 01 45        	li	a0, 0x0
8021c942: e2 60        	ld	ra, 0x18(sp)
8021c944: 42 64        	ld	s0, 0x10(sp)
;     }
8021c946: 05 61        	addi	sp, sp, 0x20
8021c948: 82 80        	ret

000000008021c94a <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hb99e920179d40045E>:
;     fn log(&self, _: &Record) {}
8021c94a: 01 11        	addi	sp, sp, -0x20
8021c94c: 06 ec        	sd	ra, 0x18(sp)
8021c94e: 22 e8        	sd	s0, 0x10(sp)
8021c950: 00 10        	addi	s0, sp, 0x20
8021c952: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021c956: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021c95a: e2 60        	ld	ra, 0x18(sp)
8021c95c: 42 64        	ld	s0, 0x10(sp)
8021c95e: 05 61        	addi	sp, sp, 0x20
8021c960: 82 80        	ret

000000008021c962 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17ha05dbe78ee1caac0E>:
;     fn flush(&self) {}
8021c962: 01 11        	addi	sp, sp, -0x20
8021c964: 06 ec        	sd	ra, 0x18(sp)
8021c966: 22 e8        	sd	s0, 0x10(sp)
8021c968: 00 10        	addi	s0, sp, 0x20
8021c96a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021c96e: e2 60        	ld	ra, 0x18(sp)
8021c970: 42 64        	ld	s0, 0x10(sp)
8021c972: 05 61        	addi	sp, sp, 0x20
8021c974: 82 80        	ret

000000008021c976 <_ZN3log6logger17haa8d51a2f66ebbb2E>:
; pub fn logger() -> &'static dyn Log {
8021c976: 79 71        	addi	sp, sp, -0x30
8021c978: 06 f4        	sd	ra, 0x28(sp)
8021c97a: 22 f0        	sd	s0, 0x20(sp)
8021c97c: 00 18        	addi	s0, sp, 0x30
8021c97e: 11 45        	li	a0, 0x4
;     if STATE.load(Ordering::SeqCst) != INITIALIZED {
8021c980: a3 07 a4 fe  	sb	a0, -0x11(s0)
8021c984: 83 45 f4 fe  	lbu	a1, -0x11(s0)

000000008021c988 <.Lpcrel_hi71>:
8021c988: 17 05 33 00  	auipc	a0, 0x330
8021c98c: 13 05 85 a5  	addi	a0, a0, -0x5a8
8021c990: 97 f0 ff ff  	auipc	ra, 0xfffff
8021c994: e7 80 60 42  	jalr	0x426(ra) <ekernel+0xffccedb6>
8021c998: 89 45        	li	a1, 0x2
8021c99a: 63 1e b5 00  	bne	a0, a1, 0x8021c9b6 <.Lpcrel_hi73>
8021c99e: 09 a0        	j	0x8021c9a0 <.Lpcrel_hi72>

000000008021c9a0 <.Lpcrel_hi72>:
;         unsafe { LOGGER }
8021c9a0: 17 95 02 00  	auipc	a0, 0x29
8021c9a4: 13 05 05 54  	addi	a0, a0, 0x540
8021c9a8: 0c 61        	ld	a1, 0x0(a0)
8021c9aa: 08 65        	ld	a0, 0x8(a0)
8021c9ac: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021c9b0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     if STATE.load(Ordering::SeqCst) != INITIALIZED {
8021c9b4: 31 a8        	j	0x8021c9d0 <.Lpcrel_hi74+0xe>

000000008021c9b6 <.Lpcrel_hi73>:
;         &NOP
8021c9b6: 17 c5 01 00  	auipc	a0, 0x1c
8021c9ba: 13 05 85 83  	addi	a0, a0, -0x7c8
8021c9be: 23 3c a4 fc  	sd	a0, -0x28(s0)

000000008021c9c2 <.Lpcrel_hi74>:
8021c9c2: 17 b5 01 00  	auipc	a0, 0x1b
8021c9c6: 13 05 65 7a  	addi	a0, a0, 0x7a6
8021c9ca: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     if STATE.load(Ordering::SeqCst) != INITIALIZED {
8021c9ce: 09 a0        	j	0x8021c9d0 <.Lpcrel_hi74+0xe>
8021c9d0: 03 35 84 fd  	ld	a0, -0x28(s0)
8021c9d4: 83 35 04 fe  	ld	a1, -0x20(s0)
8021c9d8: a2 70        	ld	ra, 0x28(sp)
8021c9da: 02 74        	ld	s0, 0x20(sp)
; }
8021c9dc: 45 61        	addi	sp, sp, 0x30
8021c9de: 82 80        	ret

000000008021c9e0 <_ZN3log17__private_api_log17hcefc324800d3b860E>:
; pub fn __private_api_log(
8021c9e0: 13 01 01 dd  	addi	sp, sp, -0x230
8021c9e4: 23 34 11 22  	sd	ra, 0x228(sp)
8021c9e8: 23 30 81 22  	sd	s0, 0x220(sp)
8021c9ec: 00 1c        	addi	s0, sp, 0x230
8021c9ee: 23 38 c4 de  	sd	a2, -0x210(s0)
8021c9f2: 23 3c b4 de  	sd	a1, -0x208(s0)
8021c9f6: 23 30 a4 e0  	sd	a0, -0x200(s0)
8021c9fa: 23 30 d4 e4  	sd	a3, -0x1c0(s0)
8021c9fe: 23 34 e4 e4  	sd	a4, -0x1b8(s0)
8021ca02: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021ca06: 23 30 c4 f8  	sd	a2, -0x80(s0)
;     &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
8021ca0a: 0c 62        	ld	a1, 0x0(a2)
8021ca0c: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
8021ca10: 08 66        	ld	a0, 0x8(a2)
8021ca12: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;     &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
8021ca16: 23 34 b4 f8  	sd	a1, -0x78(s0)
8021ca1a: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021ca1e: 0c 6a        	ld	a1, 0x10(a2)
8021ca20: 23 3c b4 e0  	sd	a1, -0x1e8(s0)
8021ca24: 08 6e        	ld	a0, 0x18(a2)
8021ca26: 23 30 a4 e2  	sd	a0, -0x1e0(s0)
8021ca2a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021ca2e: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021ca32: 0c 72        	ld	a1, 0x20(a2)
8021ca34: 23 34 b4 e2  	sd	a1, -0x1d8(s0)
8021ca38: 08 76        	ld	a0, 0x28(a2)
8021ca3a: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
8021ca3e: 23 34 b4 fa  	sd	a1, -0x58(s0)
8021ca42: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021ca46: 08 5a        	lw	a0, 0x30(a2)
8021ca48: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8021ca4c: 23 2e a4 fa  	sw	a0, -0x44(s0)
8021ca50: 13 05 04 e4  	addi	a0, s0, -0x1c0
;     if kvs.is_some() {
8021ca54: 97 00 00 00  	auipc	ra, 0x0
8021ca58: e7 80 e0 a9  	jalr	-0x562(ra) <_ZN4core6option15Option$LT$T$GT$7is_some17he646c0f979012474E>
8021ca5c: 63 14 05 10  	bnez	a0, 0x8021cb64 <.Lpcrel_hi75>
8021ca60: 09 a0        	j	0x8021ca62 <_ZN3log17__private_api_log17hcefc324800d3b860E+0x82>
;     logger().log(
8021ca62: 97 00 00 00  	auipc	ra, 0x0
8021ca66: e7 80 40 f1  	jalr	-0xec(ra) <_ZN3log6logger17haa8d51a2f66ebbb2E>
8021ca6a: 23 30 a4 de  	sd	a0, -0x220(s0)
8021ca6e: 23 3c b4 dc  	sd	a1, -0x228(s0)
8021ca72: 13 05 04 ed  	addi	a0, s0, -0x130
8021ca76: 23 38 a4 dc  	sd	a0, -0x230(s0)
;         &Record::builder()
8021ca7a: 97 00 00 00  	auipc	ra, 0x0
8021ca7e: e7 80 40 c0  	jalr	-0x3fc(ra) <_ZN3log6Record7builder17hcd2da90ba89924f2E>
8021ca82: 83 35 04 e0  	ld	a1, -0x200(s0)
8021ca86: 03 35 04 dd  	ld	a0, -0x230(s0)
8021ca8a: 90 75        	ld	a2, 0x28(a1)
8021ca8c: 23 34 c4 fe  	sd	a2, -0x18(s0)
8021ca90: 90 71        	ld	a2, 0x20(a1)
8021ca92: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021ca96: 90 6d        	ld	a2, 0x18(a1)
8021ca98: 23 3c c4 fc  	sd	a2, -0x28(s0)
8021ca9c: 90 69        	ld	a2, 0x10(a1)
8021ca9e: 23 38 c4 fc  	sd	a2, -0x30(s0)
8021caa2: 90 65        	ld	a2, 0x8(a1)
8021caa4: 23 34 c4 fc  	sd	a2, -0x38(s0)
8021caa8: 8c 61        	ld	a1, 0x0(a1)
8021caaa: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021caae: 93 05 04 fc  	addi	a1, s0, -0x40
8021cab2: 97 00 00 00  	auipc	ra, 0x0
8021cab6: e7 80 00 ce  	jalr	-0x320(ra) <_ZN3log13RecordBuilder4args17h29542f926a3ea2c4E>
8021caba: 83 35 84 df  	ld	a1, -0x208(s0)
8021cabe: 97 00 00 00  	auipc	ra, 0x0
8021cac2: e7 80 00 d0  	jalr	-0x300(ra) <_ZN3log13RecordBuilder5level17hbbef7c35aeef1a38E>
8021cac6: 83 35 84 e0  	ld	a1, -0x1f8(s0)
8021caca: 03 36 04 e1  	ld	a2, -0x1f0(s0)
8021cace: 97 00 00 00  	auipc	ra, 0x0
8021cad2: e7 80 a0 d0  	jalr	-0x2f6(ra) <_ZN3log13RecordBuilder6target17h661ff62074921264E>
8021cad6: 03 36 84 e1  	ld	a2, -0x1e8(s0)
8021cada: 83 35 04 e2  	ld	a1, -0x1e0(s0)
;             .module_path_static(Some(module_path))
8021cade: 23 38 c4 f4  	sd	a2, -0xb0(s0)
8021cae2: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;         &Record::builder()
8021cae6: 83 35 04 f5  	ld	a1, -0xb0(s0)
8021caea: 03 36 84 f5  	ld	a2, -0xa8(s0)
8021caee: 97 00 00 00  	auipc	ra, 0x0
8021caf2: e7 80 a0 d0  	jalr	-0x2f6(ra) <_ZN3log13RecordBuilder18module_path_static17h15647d4f730ebe84E>
8021caf6: 03 36 84 e2  	ld	a2, -0x1d8(s0)
8021cafa: 83 35 04 e3  	ld	a1, -0x1d0(s0)
;             .file_static(Some(file))
8021cafe: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8021cb02: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         &Record::builder()
8021cb06: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021cb0a: 03 36 84 f6  	ld	a2, -0x98(s0)
8021cb0e: 97 00 00 00  	auipc	ra, 0x0
8021cb12: e7 80 c0 d2  	jalr	-0x2d4(ra) <_ZN3log13RecordBuilder11file_static17he3ac4e33c139645cE>
8021cb16: 83 35 84 e3  	ld	a1, -0x1c8(s0)
;             .line(Some(line))
8021cb1a: 23 2a b4 f6  	sw	a1, -0x8c(s0)
8021cb1e: 85 45        	li	a1, 0x1
8021cb20: 23 28 b4 f6  	sw	a1, -0x90(s0)
;         &Record::builder()
8021cb24: 03 26 44 f7  	lw	a2, -0x8c(s0)
8021cb28: 83 25 04 f7  	lw	a1, -0x90(s0)
8021cb2c: 97 00 00 00  	auipc	ra, 0x0
8021cb30: e7 80 00 d5  	jalr	-0x2b0(ra) <_ZN3log13RecordBuilder4line17h7d395a2b5b03abcbE>
8021cb34: aa 85        	mv	a1, a0
8021cb36: 13 05 04 e5  	addi	a0, s0, -0x1b0
8021cb3a: 23 34 a4 de  	sd	a0, -0x218(s0)
8021cb3e: 97 00 00 00  	auipc	ra, 0x0
8021cb42: e7 80 e0 d5  	jalr	-0x2a2(ra) <_ZN3log13RecordBuilder5build17hb86d399ac9612fe4E>
8021cb46: 03 36 84 dd  	ld	a2, -0x228(s0)
8021cb4a: 03 35 04 de  	ld	a0, -0x220(s0)
8021cb4e: 83 35 84 de  	ld	a1, -0x218(s0)
;     logger().log(
8021cb52: 10 72        	ld	a2, 0x20(a2)
8021cb54: 02 96        	jalr	a2
8021cb56: 83 30 81 22  	ld	ra, 0x228(sp)
8021cb5a: 03 34 01 22  	ld	s0, 0x220(sp)
; }
8021cb5e: 13 01 01 23  	addi	sp, sp, 0x230
8021cb62: 82 80        	ret

000000008021cb64 <.Lpcrel_hi75>:
;         panic!(
8021cb64: 17 b5 01 00  	auipc	a0, 0x1b
8021cb68: 13 05 a5 68  	addi	a0, a0, 0x68a

000000008021cb6c <.Lpcrel_hi76>:
8021cb6c: 97 b5 01 00  	auipc	a1, 0x1b
8021cb70: 13 86 c5 6d  	addi	a2, a1, 0x6dc
8021cb74: 93 05 50 05  	li	a1, 0x55
8021cb78: 97 30 01 00  	auipc	ra, 0x13
8021cb7c: e7 80 00 6a  	jalr	0x6a0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021cb80 <_ZN3log14MaybeStaticStr6Static17hd6b8d7a505df85d2E>:
;     Static(&'static str),
8021cb80: 79 71        	addi	sp, sp, -0x30
8021cb82: 06 f4        	sd	ra, 0x28(sp)
8021cb84: 22 f0        	sd	s0, 0x20(sp)
8021cb86: 00 18        	addi	s0, sp, 0x30
8021cb88: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021cb8c: aa 85        	mv	a1, a0
8021cb8e: 03 35 84 fd  	ld	a0, -0x28(s0)
8021cb92: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021cb96: 23 34 c4 fe  	sd	a2, -0x18(s0)
8021cb9a: 88 e5        	sd	a0, 0x8(a1)
8021cb9c: 90 e9        	sd	a2, 0x10(a1)
8021cb9e: 01 45        	li	a0, 0x0
8021cba0: 88 e1        	sd	a0, 0x0(a1)
8021cba2: a2 70        	ld	ra, 0x28(sp)
8021cba4: 02 74        	ld	s0, 0x20(sp)
8021cba6: 45 61        	addi	sp, sp, 0x30
8021cba8: 82 80        	ret

000000008021cbaa <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h8eb96467f7c73d6fE>:
; #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
8021cbaa: 01 11        	addi	sp, sp, -0x20
8021cbac: 06 ec        	sd	ra, 0x18(sp)
8021cbae: 22 e8        	sd	s0, 0x10(sp)
8021cbb0: 00 10        	addi	s0, sp, 0x20
8021cbb2: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021cbb6: aa 85        	mv	a1, a0
8021cbb8: 03 35 04 fe  	ld	a0, -0x20(s0)
8021cbbc: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021cbc0: 10 69        	ld	a2, 0x10(a0)
8021cbc2: 90 e9        	sd	a2, 0x10(a1)
8021cbc4: 10 65        	ld	a2, 0x8(a0)
8021cbc6: 90 e5        	sd	a2, 0x8(a1)
8021cbc8: 08 61        	ld	a0, 0x0(a0)
8021cbca: 88 e1        	sd	a0, 0x0(a1)
8021cbcc: e2 60        	ld	ra, 0x18(sp)
8021cbce: 42 64        	ld	s0, 0x10(sp)
8021cbd0: 05 61        	addi	sp, sp, 0x20
8021cbd2: 82 80        	ret

000000008021cbd4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17h708a9b70222f5dd6E>:
; #[derive(Clone, Debug)]
8021cbd4: 35 71        	addi	sp, sp, -0xa0
8021cbd6: 06 ed        	sd	ra, 0x98(sp)
8021cbd8: 22 e9        	sd	s0, 0x90(sp)
8021cbda: 00 11        	addi	s0, sp, 0xa0
8021cbdc: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8021cbe0: 23 34 a4 f6  	sd	a0, -0x98(s0)
8021cbe4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     metadata: Metadata<'a>,
8021cbe8: 93 85 05 03  	addi	a1, a1, 0x30
8021cbec: 13 05 04 f7  	addi	a0, s0, -0x90
8021cbf0: 97 00 00 00  	auipc	ra, 0x0
8021cbf4: e7 80 a0 0b  	jalr	0xba(ra) <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17hefd45fe4fe94436bE>
8021cbf8: 83 35 04 f6  	ld	a1, -0xa0(s0)
;     args: fmt::Arguments<'a>,
8021cbfc: 93 85 05 05  	addi	a1, a1, 0x50
8021cc00: 13 05 84 f8  	addi	a0, s0, -0x78
8021cc04: 97 00 00 00  	auipc	ra, 0x0
8021cc08: e7 80 c0 91  	jalr	-0x6e4(ra) <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h503c2029d2d757e0E>
8021cc0c: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021cc10: 13 05 84 fb  	addi	a0, s0, -0x48
;     module_path: Option<MaybeStaticStr<'a>>,
8021cc14: 97 00 00 00  	auipc	ra, 0x0
8021cc18: e7 80 e0 98  	jalr	-0x672(ra) <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h87c2c11e522b0482E>
8021cc1c: 83 35 04 f6  	ld	a1, -0xa0(s0)
;     file: Option<MaybeStaticStr<'a>>,
8021cc20: e1 05        	addi	a1, a1, 0x18
8021cc22: 13 05 04 fd  	addi	a0, s0, -0x30
8021cc26: 97 00 00 00  	auipc	ra, 0x0
8021cc2a: e7 80 c0 97  	jalr	-0x684(ra) <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h87c2c11e522b0482E>
8021cc2e: 83 35 04 f6  	ld	a1, -0xa0(s0)
;     line: Option<u32>,
8021cc32: 13 85 85 04  	addi	a0, a1, 0x48
8021cc36: 97 00 00 00  	auipc	ra, 0x0
8021cc3a: e7 80 00 92  	jalr	-0x6e0(ra) <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h6a695a4872da4f59E>
8021cc3e: 2a 86        	mv	a2, a0
8021cc40: 03 35 84 f6  	ld	a0, -0x98(s0)
; #[derive(Clone, Debug)]
8021cc44: 83 36 04 f8  	ld	a3, -0x80(s0)
8021cc48: 34 e1        	sd	a3, 0x40(a0)
8021cc4a: 83 36 84 f7  	ld	a3, -0x88(s0)
8021cc4e: 14 fd        	sd	a3, 0x38(a0)
8021cc50: 83 36 04 f7  	ld	a3, -0x90(s0)
8021cc54: 14 f9        	sd	a3, 0x30(a0)
8021cc56: 83 36 04 fb  	ld	a3, -0x50(s0)
8021cc5a: 34 fd        	sd	a3, 0x78(a0)
8021cc5c: 83 36 84 fa  	ld	a3, -0x58(s0)
8021cc60: 34 f9        	sd	a3, 0x70(a0)
8021cc62: 83 36 04 fa  	ld	a3, -0x60(s0)
8021cc66: 34 f5        	sd	a3, 0x68(a0)
8021cc68: 83 36 84 f9  	ld	a3, -0x68(s0)
8021cc6c: 34 f1        	sd	a3, 0x60(a0)
8021cc6e: 83 36 04 f9  	ld	a3, -0x70(s0)
8021cc72: 34 ed        	sd	a3, 0x58(a0)
8021cc74: 83 36 84 f8  	ld	a3, -0x78(s0)
8021cc78: 34 e9        	sd	a3, 0x50(a0)
8021cc7a: 83 36 84 fc  	ld	a3, -0x38(s0)
8021cc7e: 14 e9        	sd	a3, 0x10(a0)
8021cc80: 83 36 04 fc  	ld	a3, -0x40(s0)
8021cc84: 14 e5        	sd	a3, 0x8(a0)
8021cc86: 83 36 84 fb  	ld	a3, -0x48(s0)
8021cc8a: 14 e1        	sd	a3, 0x0(a0)
8021cc8c: 83 36 04 fe  	ld	a3, -0x20(s0)
8021cc90: 14 f5        	sd	a3, 0x28(a0)
8021cc92: 83 36 84 fd  	ld	a3, -0x28(s0)
8021cc96: 14 f1        	sd	a3, 0x20(a0)
8021cc98: 83 36 04 fd  	ld	a3, -0x30(s0)
8021cc9c: 14 ed        	sd	a3, 0x18(a0)
8021cc9e: 30 c5        	sw	a2, 0x48(a0)
8021cca0: 6c c5        	sw	a1, 0x4c(a0)
8021cca2: ea 60        	ld	ra, 0x98(sp)
8021cca4: 4a 64        	ld	s0, 0x90(sp)
8021cca6: 0d 61        	addi	sp, sp, 0xa0
8021cca8: 82 80        	ret

000000008021ccaa <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17hefd45fe4fe94436bE>:
; #[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
8021ccaa: 79 71        	addi	sp, sp, -0x30
8021ccac: 06 f4        	sd	ra, 0x28(sp)
8021ccae: 22 f0        	sd	s0, 0x20(sp)
8021ccb0: 00 18        	addi	s0, sp, 0x30
8021ccb2: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021ccb6: aa 85        	mv	a1, a0
8021ccb8: 03 35 84 fd  	ld	a0, -0x28(s0)
8021ccbc: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021ccc0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     level: Level,
8021ccc4: 97 00 00 00  	auipc	ra, 0x0
8021ccc8: e7 80 40 9a  	jalr	-0x65c(ra) <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf413e39bdc58be62E>
8021cccc: 83 35 04 fd  	ld	a1, -0x30(s0)
8021ccd0: aa 86        	mv	a3, a0
8021ccd2: 03 35 84 fd  	ld	a0, -0x28(s0)
;     target: &'a str,
8021ccd6: 13 06 85 00  	addi	a2, a0, 0x8
8021ccda: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             *self
8021ccde: 10 65        	ld	a2, 0x8(a0)
8021cce0: 08 69        	ld	a0, 0x10(a0)
; #[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
8021cce2: 94 e1        	sd	a3, 0x0(a1)
8021cce4: 90 e5        	sd	a2, 0x8(a1)
8021cce6: 88 e9        	sd	a0, 0x10(a1)
8021cce8: a2 70        	ld	ra, 0x28(sp)
8021ccea: 02 74        	ld	s0, 0x20(sp)
8021ccec: 45 61        	addi	sp, sp, 0x30
8021ccee: 82 80        	ret

000000008021ccf0 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h4fee428840335f72E>:
;     pub fn new(data: T) -> Arc<T> {
8021ccf0: 13 01 01 d3  	addi	sp, sp, -0x2d0
8021ccf4: 23 34 11 2c  	sd	ra, 0x2c8(sp)
8021ccf8: 23 30 81 2c  	sd	s0, 0x2c0(sp)
8021ccfc: 80 0d        	addi	s0, sp, 0x2d0
8021ccfe: aa 85        	mv	a1, a0
8021cd00: 05 45        	li	a0, 0x1
; atomic_int_ptr_sized! {
8021cd02: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
8021cd06: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
; atomic_int_ptr_sized! {
8021cd0a: 23 38 a4 d4  	sd	a0, -0x2b0(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
8021cd0e: 23 3c a4 d4  	sd	a0, -0x2a8(s0)
; atomic_int_ptr_sized! {
8021cd12: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         let x: Box<_> = Box::new(ArcInner {
8021cd16: 03 35 04 fb  	ld	a0, -0x50(s0)
8021cd1a: 23 38 a4 d6  	sd	a0, -0x290(s0)
8021cd1e: 03 35 04 fb  	ld	a0, -0x50(s0)
8021cd22: 23 3c a4 d6  	sd	a0, -0x288(s0)
8021cd26: 13 05 04 d8  	addi	a0, s0, -0x280
8021cd2a: 13 06 00 23  	li	a2, 0x230
8021cd2e: 97 50 01 00  	auipc	ra, 0x15
8021cd32: e7 80 00 f4  	jalr	-0xc0(ra) <memcpy>
8021cd36: 13 05 00 24  	li	a0, 0x240
8021cd3a: 23 38 a4 d2  	sd	a0, -0x2d0(s0)
8021cd3e: a1 45        	li	a1, 0x8
;         Box::new(x)
8021cd40: 97 60 00 00  	auipc	ra, 0x6
8021cd44: e7 80 20 bf  	jalr	-0x40e(ra) <_ZN5alloc5alloc15exchange_malloc17h0e8728c14a5a5c91E>
8021cd48: 03 36 04 d3  	ld	a2, -0x2d0(s0)
8021cd4c: 23 3c a4 d2  	sd	a0, -0x2c8(s0)
8021cd50: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021cd54: 93 05 04 d7  	addi	a1, s0, -0x290
8021cd58: 97 50 01 00  	auipc	ra, 0x15
8021cd5c: e7 80 60 f1  	jalr	-0xea(ra) <memcpy>
8021cd60: 03 35 84 d3  	ld	a0, -0x2c8(s0)
;         ManuallyDrop { value }
8021cd64: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021cd68: 93 05 04 fc  	addi	a1, s0, -0x40
;         let ptr = addr_of_mut!(**b);
8021cd6c: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021cd70: 03 35 04 fc  	ld	a0, -0x40(s0)
8021cd74: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
8021cd78: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021cd7c: 93 05 84 fc  	addi	a1, s0, -0x38
8021cd80: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
8021cd84: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         Self { ptr, phantom: PhantomData, alloc }
8021cd88: 03 35 84 fb  	ld	a0, -0x48(s0)
8021cd8c: 23 34 a4 d6  	sd	a0, -0x298(s0)
;     }
8021cd90: 03 35 84 d6  	ld	a0, -0x298(s0)
8021cd94: 83 30 81 2c  	ld	ra, 0x2c8(sp)
8021cd98: 03 34 01 2c  	ld	s0, 0x2c0(sp)
8021cd9c: 13 01 01 2d  	addi	sp, sp, 0x2d0
8021cda0: 82 80        	ret

000000008021cda2 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h9dbdd7ae2f53ece9E>:
;     pub fn new(data: T) -> Arc<T> {
8021cda2: 51 71        	addi	sp, sp, -0xf0
8021cda4: 86 f5        	sd	ra, 0xe8(sp)
8021cda6: a2 f1        	sd	s0, 0xe0(sp)
8021cda8: 80 19        	addi	s0, sp, 0xf0
8021cdaa: aa 85        	mv	a1, a0
8021cdac: 05 45        	li	a0, 0x1
; atomic_int_ptr_sized! {
8021cdae: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
8021cdb2: 23 38 a4 f2  	sd	a0, -0xd0(s0)
; atomic_int_ptr_sized! {
8021cdb6: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
8021cdba: 23 30 a4 f4  	sd	a0, -0xc0(s0)
; atomic_int_ptr_sized! {
8021cdbe: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         let x: Box<_> = Box::new(ArcInner {
8021cdc2: 03 35 04 fb  	ld	a0, -0x50(s0)
8021cdc6: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8021cdca: 03 35 04 fb  	ld	a0, -0x50(s0)
8021cdce: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021cdd2: 13 05 84 f6  	addi	a0, s0, -0x98
8021cdd6: 13 06 80 04  	li	a2, 0x48
8021cdda: 97 50 01 00  	auipc	ra, 0x15
8021cdde: e7 80 40 e9  	jalr	-0x16c(ra) <memcpy>
8021cde2: 13 05 80 05  	li	a0, 0x58
8021cde6: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8021cdea: a1 45        	li	a1, 0x8
;         Box::new(x)
8021cdec: 97 60 00 00  	auipc	ra, 0x6
8021cdf0: e7 80 60 b4  	jalr	-0x4ba(ra) <_ZN5alloc5alloc15exchange_malloc17h0e8728c14a5a5c91E>
8021cdf4: 03 36 84 f1  	ld	a2, -0xe8(s0)
8021cdf8: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8021cdfc: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021ce00: 93 05 84 f5  	addi	a1, s0, -0xa8
8021ce04: 97 50 01 00  	auipc	ra, 0x15
8021ce08: e7 80 a0 e6  	jalr	-0x196(ra) <memcpy>
8021ce0c: 03 35 04 f2  	ld	a0, -0xe0(s0)
;         ManuallyDrop { value }
8021ce10: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021ce14: 93 05 04 fc  	addi	a1, s0, -0x40
;         let ptr = addr_of_mut!(**b);
8021ce18: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021ce1c: 03 35 04 fc  	ld	a0, -0x40(s0)
8021ce20: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
8021ce24: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021ce28: 93 05 84 fc  	addi	a1, s0, -0x38
8021ce2c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
8021ce30: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         Self { ptr, phantom: PhantomData, alloc }
8021ce34: 03 35 84 fb  	ld	a0, -0x48(s0)
8021ce38: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;     }
8021ce3c: 03 35 04 f5  	ld	a0, -0xb0(s0)
8021ce40: ae 70        	ld	ra, 0xe8(sp)
8021ce42: 0e 74        	ld	s0, 0xe0(sp)
8021ce44: 6d 61        	addi	sp, sp, 0xf0
8021ce46: 82 80        	ret

000000008021ce48 <_ZN5alloc4sync12Arc$LT$T$GT$3new17hb50cf66713b1629eE>:
;     pub fn new(data: T) -> Arc<T> {
8021ce48: 31 71        	addi	sp, sp, -0xc0
8021ce4a: 06 fd        	sd	ra, 0xb8(sp)
8021ce4c: 22 f9        	sd	s0, 0xb0(sp)
8021ce4e: 80 01        	addi	s0, sp, 0xc0
8021ce50: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
8021ce52: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
8021ce56: 23 38 b4 f4  	sd	a1, -0xb0(s0)
; atomic_int_ptr_sized! {
8021ce5a: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const fn new(value: T) -> UnsafeCell<T> {
8021ce5e: 23 30 b4 f6  	sd	a1, -0xa0(s0)
; atomic_int_ptr_sized! {
8021ce62: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         let x: Box<_> = Box::new(ArcInner {
8021ce66: 83 35 04 fb  	ld	a1, -0x50(s0)
8021ce6a: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021ce6e: 83 35 04 fb  	ld	a1, -0x50(s0)
8021ce72: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021ce76: 0c 71        	ld	a1, 0x20(a0)
8021ce78: 23 34 b4 fa  	sd	a1, -0x58(s0)
8021ce7c: 0c 6d        	ld	a1, 0x18(a0)
8021ce7e: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021ce82: 0c 69        	ld	a1, 0x10(a0)
8021ce84: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021ce88: 0c 65        	ld	a1, 0x8(a0)
8021ce8a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021ce8e: 08 61        	ld	a0, 0x0(a0)
8021ce90: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021ce94: 13 05 80 03  	li	a0, 0x38
8021ce98: a1 45        	li	a1, 0x8
;         Box::new(x)
8021ce9a: 97 60 00 00  	auipc	ra, 0x6
8021ce9e: e7 80 80 a9  	jalr	-0x568(ra) <_ZN5alloc5alloc15exchange_malloc17h0e8728c14a5a5c91E>
8021cea2: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021cea6: 83 35 84 fa  	ld	a1, -0x58(s0)
8021ceaa: 0c f9        	sd	a1, 0x30(a0)
8021ceac: 83 35 04 fa  	ld	a1, -0x60(s0)
8021ceb0: 0c f5        	sd	a1, 0x28(a0)
8021ceb2: 83 35 84 f9  	ld	a1, -0x68(s0)
8021ceb6: 0c f1        	sd	a1, 0x20(a0)
8021ceb8: 83 35 04 f9  	ld	a1, -0x70(s0)
8021cebc: 0c ed        	sd	a1, 0x18(a0)
8021cebe: 83 35 84 f8  	ld	a1, -0x78(s0)
8021cec2: 0c e9        	sd	a1, 0x10(a0)
8021cec4: 83 35 04 f8  	ld	a1, -0x80(s0)
8021cec8: 0c e5        	sd	a1, 0x8(a0)
8021ceca: 83 35 84 f7  	ld	a1, -0x88(s0)
8021cece: 0c e1        	sd	a1, 0x0(a0)
;         ManuallyDrop { value }
8021ced0: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021ced4: 93 05 04 fc  	addi	a1, s0, -0x40
;         let ptr = addr_of_mut!(**b);
8021ced8: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021cedc: 03 35 04 fc  	ld	a0, -0x40(s0)
8021cee0: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let alloc = unsafe { ptr::read(&b.1) };
8021cee4: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021cee8: 93 05 84 fc  	addi	a1, s0, -0x38
8021ceec: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
8021cef0: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         Self { ptr, phantom: PhantomData, alloc }
8021cef4: 03 35 84 fb  	ld	a0, -0x48(s0)
8021cef8: 23 38 a4 f6  	sd	a0, -0x90(s0)
;     }
8021cefc: 03 35 04 f7  	ld	a0, -0x90(s0)
8021cf00: ea 70        	ld	ra, 0xb8(sp)
8021cf02: 4a 74        	ld	s0, 0xb0(sp)
8021cf04: 29 61        	addi	sp, sp, 0xc0
8021cf06: 82 80        	ret

000000008021cf08 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$12strong_count17h0865cff2ed844210E>:
;     pub fn strong_count(this: &Self) -> usize {
8021cf08: 5d 71        	addi	sp, sp, -0x50
8021cf0a: 86 e4        	sd	ra, 0x48(sp)
8021cf0c: a2 e0        	sd	s0, 0x40(sp)
8021cf0e: 80 08        	addi	s0, sp, 0x50
8021cf10: 81 45        	li	a1, 0x0
; atomic_int_ptr_sized! {
8021cf12: a3 0f b4 fa  	sb	a1, -0x41(s0)
8021cf16: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         unsafe { self.ptr.as_ref() }
8021cf1a: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8021cf1e: 08 61        	ld	a0, 0x0(a0)
8021cf20: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.pointer as *mut T
8021cf24: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         this.inner().strong.load(Relaxed)
8021cf28: 23 30 a4 fe  	sd	a0, -0x20(s0)
; atomic_int_ptr_sized! {
8021cf2c: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021cf30: 97 00 01 00  	auipc	ra, 0x10
8021cf34: e7 80 40 cb  	jalr	-0x34c(ra) <_ZN4core4sync6atomic11atomic_load17h21b744b61142d056E>
8021cf38: a6 60        	ld	ra, 0x48(sp)
8021cf3a: 06 64        	ld	s0, 0x40(sp)
;     }
8021cf3c: 61 61        	addi	sp, sp, 0x50
8021cf3e: 82 80        	ret

000000008021cf40 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17h42797c0570841024E>:
;     unsafe fn drop_slow(&mut self) {
8021cf40: 39 71        	addi	sp, sp, -0x40
8021cf42: 06 fc        	sd	ra, 0x38(sp)
8021cf44: 22 f8        	sd	s0, 0x30(sp)
8021cf46: 80 00        	addi	s0, sp, 0x40
8021cf48: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021cf4c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut (*this.ptr.as_ptr()).data }
8021cf50: 08 61        	ld	a0, 0x0(a0)
8021cf52: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
8021cf56: 41 05        	addi	a0, a0, 0x10
8021cf58: 97 10 00 00  	auipc	ra, 0x1
8021cf5c: e7 80 e0 ac  	jalr	-0x532(ra) <_ZN4core3ptr79drop_in_place$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$17h22655413dc9b28c8E>
8021cf60: 03 35 84 fc  	ld	a0, -0x38(s0)
;         drop(Weak { ptr: self.ptr, alloc: &self.alloc });
8021cf64: 0c 61        	ld	a1, 0x0(a0)
8021cf66: 21 05        	addi	a0, a0, 0x8
8021cf68: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021cf6c: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021cf70: 13 05 04 fd  	addi	a0, s0, -0x30
; pub fn drop<T>(_x: T) {}
8021cf74: 97 10 00 00  	auipc	ra, 0x1
8021cf78: e7 80 e0 8a  	jalr	-0x752(ra) <_ZN4core3ptr131drop_in_place$LT$alloc..sync..Weak$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$C$$RF$alloc..alloc..Global$GT$$GT$17h9c6be2eff8035fb5E>
8021cf7c: e2 70        	ld	ra, 0x38(sp)
8021cf7e: 42 74        	ld	s0, 0x30(sp)
;     }
8021cf80: 21 61        	addi	sp, sp, 0x40
8021cf82: 82 80        	ret

000000008021cf84 <_ZN5alloc4sync16Arc$LT$T$C$A$GT$9drop_slow17hffcaefca08768f6eE>:
;     unsafe fn drop_slow(&mut self) {
8021cf84: 5d 71        	addi	sp, sp, -0x50
8021cf86: 86 e4        	sd	ra, 0x48(sp)
8021cf88: a2 e0        	sd	s0, 0x40(sp)
8021cf8a: 80 08        	addi	s0, sp, 0x50
8021cf8c: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021cf90: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &mut (*this.ptr.as_ptr()).data }
8021cf94: 10 61        	ld	a2, 0x0(a0)
8021cf96: 0c 65        	ld	a1, 0x8(a0)
8021cf98: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021cf9c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
8021cfa0: 88 69        	ld	a0, 0x10(a1)
8021cfa2: 7d 15        	addi	a0, a0, -0x1
8021cfa4: 41 99        	andi	a0, a0, -0x10
8021cfa6: 32 95        	add	a0, a0, a2
8021cfa8: 41 05        	addi	a0, a0, 0x10
8021cfaa: 97 10 00 00  	auipc	ra, 0x1
8021cfae: e7 80 80 a2  	jalr	-0x5d8(ra) <_ZN4core3ptr60drop_in_place$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$17hf561cfa975bb3d43E>
8021cfb2: 03 35 84 fb  	ld	a0, -0x48(s0)
;         drop(Weak { ptr: self.ptr, alloc: &self.alloc });
8021cfb6: 10 61        	ld	a2, 0x0(a0)
8021cfb8: 0c 65        	ld	a1, 0x8(a0)
8021cfba: 41 05        	addi	a0, a0, 0x10
8021cfbc: 23 30 c4 fc  	sd	a2, -0x40(s0)
8021cfc0: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021cfc4: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021cfc8: 13 05 04 fc  	addi	a0, s0, -0x40
; pub fn drop<T>(_x: T) {}
8021cfcc: 97 00 00 00  	auipc	ra, 0x0
8021cfd0: e7 80 a0 79  	jalr	0x79a(ra) <_ZN4core3ptr112drop_in_place$LT$alloc..sync..Weak$LT$dyn$u20$easy_fs..block_dev..BlockDevice$C$$RF$alloc..alloc..Global$GT$$GT$17h34242185cd88b954E>
8021cfd4: a6 60        	ld	ra, 0x48(sp)
8021cfd6: 06 64        	ld	s0, 0x40(sp)
;     }
8021cfd8: 61 61        	addi	sp, sp, 0x50
8021cfda: 82 80        	ret

000000008021cfdc <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h562cc1e00b02c904E>:
;     fn clone(&self) -> Arc<T, A> {
8021cfdc: 35 71        	addi	sp, sp, -0xa0
8021cfde: 06 ed        	sd	ra, 0x98(sp)
8021cfe0: 22 e9        	sd	s0, 0x90(sp)
8021cfe2: 00 11        	addi	s0, sp, 0xa0
8021cfe4: 23 34 a4 f6  	sd	a0, -0x98(s0)
8021cfe8: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
8021cfea: 23 38 b4 f6  	sd	a1, -0x90(s0)
8021cfee: 01 46        	li	a2, 0x0
8021cff0: a3 0f c4 f6  	sb	a2, -0x81(s0)
; unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8021cff4: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021cff8: a3 07 c4 f8  	sb	a2, -0x71(s0)
8021cffc: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         unsafe { self.ptr.as_ref() }
8021d000: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8021d004: 08 61        	ld	a0, 0x0(a0)
8021d006: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.pointer as *mut T
8021d00a: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         let old_size = self.inner().strong.fetch_add(1, Relaxed);
8021d00e: 23 30 a4 fc  	sd	a0, -0x40(s0)
; atomic_int_ptr_sized! {
8021d012: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8021d016: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
8021d01a: 2f 35 b5 00  	amoadd.d	a0, a1, (a0)
8021d01e: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021d022: 03 35 84 fd  	ld	a0, -0x28(s0)
8021d026: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if old_size > MAX_REFCOUNT {
8021d02a: 63 49 05 02  	bltz	a0, 0x8021d05c <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h562cc1e00b02c904E+0x80>
8021d02e: 09 a0        	j	0x8021d030 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h562cc1e00b02c904E+0x54>
8021d030: 03 35 84 f6  	ld	a0, -0x98(s0)
;         unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
8021d034: 0c 61        	ld	a1, 0x0(a0)
8021d036: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8021d03a: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021d03e: 21 05        	addi	a0, a0, 0x8
8021d040: 97 60 00 00  	auipc	ra, 0x6
8021d044: e7 80 e0 8d  	jalr	-0x722(ra) <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17h4e785baf445e6b2fE>
8021d048: 03 35 04 f6  	ld	a0, -0xa0(s0)
;         Self { ptr, phantom: PhantomData, alloc }
8021d04c: 23 38 a4 f8  	sd	a0, -0x70(s0)
;     }
8021d050: 03 35 04 f9  	ld	a0, -0x70(s0)
8021d054: ea 60        	ld	ra, 0x98(sp)
8021d056: 4a 64        	ld	s0, 0x90(sp)
8021d058: 0d 61        	addi	sp, sp, 0xa0
8021d05a: 82 80        	ret
;             abort();
8021d05c: 00 00        	unimp

000000008021d05e <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5e1091f0e656c238E>:
;     fn clone(&self) -> Arc<T, A> {
8021d05e: 35 71        	addi	sp, sp, -0xa0
8021d060: 06 ed        	sd	ra, 0x98(sp)
8021d062: 22 e9        	sd	s0, 0x90(sp)
8021d064: 00 11        	addi	s0, sp, 0xa0
8021d066: 23 34 a4 f6  	sd	a0, -0x98(s0)
8021d06a: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
8021d06c: 23 38 b4 f6  	sd	a1, -0x90(s0)
8021d070: 01 46        	li	a2, 0x0
8021d072: a3 0f c4 f6  	sb	a2, -0x81(s0)
; unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8021d076: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021d07a: a3 07 c4 f8  	sb	a2, -0x71(s0)
8021d07e: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         unsafe { self.ptr.as_ref() }
8021d082: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8021d086: 08 61        	ld	a0, 0x0(a0)
8021d088: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.pointer as *mut T
8021d08c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         let old_size = self.inner().strong.fetch_add(1, Relaxed);
8021d090: 23 30 a4 fc  	sd	a0, -0x40(s0)
; atomic_int_ptr_sized! {
8021d094: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8021d098: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
8021d09c: 2f 35 b5 00  	amoadd.d	a0, a1, (a0)
8021d0a0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021d0a4: 03 35 84 fd  	ld	a0, -0x28(s0)
8021d0a8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if old_size > MAX_REFCOUNT {
8021d0ac: 63 49 05 02  	bltz	a0, 0x8021d0de <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5e1091f0e656c238E+0x80>
8021d0b0: 09 a0        	j	0x8021d0b2 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5e1091f0e656c238E+0x54>
8021d0b2: 03 35 84 f6  	ld	a0, -0x98(s0)
;         unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
8021d0b6: 0c 61        	ld	a1, 0x0(a0)
8021d0b8: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8021d0bc: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021d0c0: 21 05        	addi	a0, a0, 0x8
8021d0c2: 97 60 00 00  	auipc	ra, 0x6
8021d0c6: e7 80 c0 85  	jalr	-0x7a4(ra) <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17h4e785baf445e6b2fE>
8021d0ca: 03 35 04 f6  	ld	a0, -0xa0(s0)
;         Self { ptr, phantom: PhantomData, alloc }
8021d0ce: 23 38 a4 f8  	sd	a0, -0x70(s0)
;     }
8021d0d2: 03 35 04 f9  	ld	a0, -0x70(s0)
8021d0d6: ea 60        	ld	ra, 0x98(sp)
8021d0d8: 4a 64        	ld	s0, 0x90(sp)
8021d0da: 0d 61        	addi	sp, sp, 0xa0
8021d0dc: 82 80        	ret
;             abort();
8021d0de: 00 00        	unimp

000000008021d0e0 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hf9ea9035163a2c6bE>:
;     fn clone(&self) -> Arc<T, A> {
8021d0e0: 55 71        	addi	sp, sp, -0xd0
8021d0e2: 86 e5        	sd	ra, 0xc8(sp)
8021d0e4: a2 e1        	sd	s0, 0xc0(sp)
8021d0e6: 80 09        	addi	s0, sp, 0xd0
8021d0e8: 2a 86        	mv	a2, a0
8021d0ea: 23 34 c4 f4  	sd	a2, -0xb8(s0)
8021d0ee: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
8021d0f0: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8021d0f4: 01 45        	li	a0, 0x0
8021d0f6: a3 0f a4 f4  	sb	a0, -0xa1(s0)
; unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8021d0fa: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8021d0fe: a3 07 a4 f6  	sb	a0, -0x91(s0)
8021d102: 23 30 c4 f8  	sd	a2, -0x80(s0)
;         unsafe { self.ptr.as_ref() }
8021d106: 23 38 c4 f8  	sd	a2, -0x70(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8021d10a: 08 62        	ld	a0, 0x0(a2)
8021d10c: 10 66        	ld	a2, 0x8(a2)
8021d10e: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021d112: 23 30 c4 fa  	sd	a2, -0x60(s0)
;         self.pointer as *mut T
8021d116: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021d11a: 23 38 c4 fa  	sd	a2, -0x50(s0)
;         let old_size = self.inner().strong.fetch_add(1, Relaxed);
8021d11e: 23 3c a4 fa  	sd	a0, -0x48(s0)
; atomic_int_ptr_sized! {
8021d122: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8021d126: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
8021d12a: 2f 35 b5 00  	amoadd.d	a0, a1, (a0)
8021d12e: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021d132: 03 35 04 fd  	ld	a0, -0x30(s0)
8021d136: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if old_size > MAX_REFCOUNT {
8021d13a: 63 44 05 04  	bltz	a0, 0x8021d182 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hf9ea9035163a2c6bE+0xa2>
8021d13e: 09 a0        	j	0x8021d140 <_ZN68_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hf9ea9035163a2c6bE+0x60>
8021d140: 03 35 84 f4  	ld	a0, -0xb8(s0)
;         unsafe { Self::from_inner_in(self.ptr, self.alloc.clone()) }
8021d144: 10 61        	ld	a2, 0x0(a0)
8021d146: 23 3c c4 f2  	sd	a2, -0xc8(s0)
8021d14a: 0c 65        	ld	a1, 0x8(a0)
8021d14c: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8021d150: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021d154: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021d158: 41 05        	addi	a0, a0, 0x10
8021d15a: 97 50 00 00  	auipc	ra, 0x5
8021d15e: e7 80 40 7c  	jalr	0x7c4(ra) <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17h4e785baf445e6b2fE>
8021d162: 83 35 84 f3  	ld	a1, -0xc8(s0)
8021d166: 03 35 04 f4  	ld	a0, -0xc0(s0)
;         Self { ptr, phantom: PhantomData, alloc }
8021d16a: 23 38 b4 f6  	sd	a1, -0x90(s0)
8021d16e: 23 3c a4 f6  	sd	a0, -0x88(s0)
;     }
8021d172: 03 35 04 f7  	ld	a0, -0x90(s0)
8021d176: 83 35 84 f7  	ld	a1, -0x88(s0)
8021d17a: ae 60        	ld	ra, 0xc8(sp)
8021d17c: 0e 64        	ld	s0, 0xc0(sp)
8021d17e: 69 61        	addi	sp, sp, 0xd0
8021d180: 82 80        	ret
;             abort();
8021d182: 00 00        	unimp

000000008021d184 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h0df71494fc67c5fcE>:
;     fn deref(&self) -> &T {
8021d184: 79 71        	addi	sp, sp, -0x30
8021d186: 06 f4        	sd	ra, 0x28(sp)
8021d188: 22 f0        	sd	s0, 0x20(sp)
8021d18a: 00 18        	addi	s0, sp, 0x30
8021d18c: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { self.ptr.as_ref() }
8021d190: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8021d194: 08 61        	ld	a0, 0x0(a0)
8021d196: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
8021d19a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &self.inner().data
8021d19e: 41 05        	addi	a0, a0, 0x10
8021d1a0: a2 70        	ld	ra, 0x28(sp)
8021d1a2: 02 74        	ld	s0, 0x20(sp)
;     }
8021d1a4: 45 61        	addi	sp, sp, 0x30
8021d1a6: 82 80        	ret

000000008021d1a8 <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h1822077b2d139696E>:
;     fn deref(&self) -> &T {
8021d1a8: 79 71        	addi	sp, sp, -0x30
8021d1aa: 06 f4        	sd	ra, 0x28(sp)
8021d1ac: 22 f0        	sd	s0, 0x20(sp)
8021d1ae: 00 18        	addi	s0, sp, 0x30
8021d1b0: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { self.ptr.as_ref() }
8021d1b4: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8021d1b8: 08 61        	ld	a0, 0x0(a0)
8021d1ba: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
8021d1be: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &self.inner().data
8021d1c2: 41 05        	addi	a0, a0, 0x10
8021d1c4: a2 70        	ld	ra, 0x28(sp)
8021d1c6: 02 74        	ld	s0, 0x20(sp)
;     }
8021d1c8: 45 61        	addi	sp, sp, 0x30
8021d1ca: 82 80        	ret

000000008021d1cc <_ZN73_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h3830114f0ba9208eE>:
;     fn deref(&self) -> &T {
8021d1cc: 39 71        	addi	sp, sp, -0x40
8021d1ce: 06 fc        	sd	ra, 0x38(sp)
8021d1d0: 22 f8        	sd	s0, 0x30(sp)
8021d1d2: 80 00        	addi	s0, sp, 0x40
8021d1d4: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         unsafe { self.ptr.as_ref() }
8021d1d8: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8021d1dc: 10 61        	ld	a2, 0x0(a0)
8021d1de: 0c 65        	ld	a1, 0x8(a0)
8021d1e0: 23 38 c4 fc  	sd	a2, -0x30(s0)
8021d1e4: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         self.pointer as *mut T
8021d1e8: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021d1ec: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         &self.inner().data
8021d1f0: 88 69        	ld	a0, 0x10(a1)
8021d1f2: 7d 15        	addi	a0, a0, -0x1
8021d1f4: 41 99        	andi	a0, a0, -0x10
8021d1f6: 32 95        	add	a0, a0, a2
8021d1f8: 41 05        	addi	a0, a0, 0x10
8021d1fa: e2 70        	ld	ra, 0x38(sp)
8021d1fc: 42 74        	ld	s0, 0x30(sp)
;     }
8021d1fe: 21 61        	addi	sp, sp, 0x40
8021d200: 82 80        	ret

000000008021d202 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h96dd97b40ac35cabE>:
;     pub fn copy_from_slice(&mut self, src: &[T])
8021d202: 59 71        	addi	sp, sp, -0x70
8021d204: 86 f4        	sd	ra, 0x68(sp)
8021d206: a2 f0        	sd	s0, 0x60(sp)
8021d208: 80 18        	addi	s0, sp, 0x70
8021d20a: 23 38 e4 f8  	sd	a4, -0x70(s0)
8021d20e: 23 3c d4 f8  	sd	a3, -0x68(s0)
8021d212: 23 30 c4 fa  	sd	a2, -0x60(s0)
8021d216: 23 34 b4 fa  	sd	a1, -0x58(s0)
8021d21a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021d21e: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021d222: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021d226: 23 34 c4 fc  	sd	a2, -0x38(s0)
8021d22a: 23 38 d4 fc  	sd	a3, -0x30(s0)
;         if self.len() != src.len() {
8021d22e: 63 90 d5 02  	bne	a1, a3, 0x8021d24e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h96dd97b40ac35cabE+0x4c>
8021d232: 09 a0        	j	0x8021d234 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h96dd97b40ac35cabE+0x32>
8021d234: 03 35 84 fa  	ld	a0, -0x58(s0)
8021d238: 83 35 04 fb  	ld	a1, -0x50(s0)
8021d23c: 03 36 04 fa  	ld	a2, -0x60(s0)
;         self as *const [T] as *const T
8021d240: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         self as *mut [T] as *mut T
8021d244: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
8021d248: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     assert_unsafe_precondition!(
8021d24c: 19 a8        	j	0x8021d262 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h96dd97b40ac35cabE+0x60>
8021d24e: 03 36 04 f9  	ld	a2, -0x70(s0)
8021d252: 83 35 84 f9  	ld	a1, -0x68(s0)
8021d256: 03 35 84 fa  	ld	a0, -0x58(s0)
;             len_mismatch_fail(self.len(), src.len());
8021d25a: 97 30 01 00  	auipc	ra, 0x13
8021d25e: e7 80 60 7e  	jalr	0x7e6(ra) <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17h34229ff4dc515a17E>
8021d262: 03 37 84 fa  	ld	a4, -0x58(s0)
8021d266: 83 35 04 fb  	ld	a1, -0x50(s0)
8021d26a: 03 35 04 fa  	ld	a0, -0x60(s0)
8021d26e: 85 46        	li	a3, 0x1
;     assert_unsafe_precondition!(
8021d270: 36 86        	mv	a2, a3
8021d272: 97 c0 00 00  	auipc	ra, 0xc
8021d276: e7 80 a0 f0  	jalr	-0xf6(ra) <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h9e88ce347a02df22E>
8021d27a: 09 a0        	j	0x8021d27c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h96dd97b40ac35cabE+0x7a>
8021d27c: 03 36 84 fa  	ld	a2, -0x58(s0)
8021d280: 83 35 04 fa  	ld	a1, -0x60(s0)
8021d284: 03 35 04 fb  	ld	a0, -0x50(s0)
;     unsafe { copy_nonoverlapping(src, dst, count) }
8021d288: 97 50 01 00  	auipc	ra, 0x15
8021d28c: e7 80 60 9e  	jalr	-0x61a(ra) <memcpy>
8021d290: a6 70        	ld	ra, 0x68(sp)
8021d292: 06 74        	ld	s0, 0x60(sp)
;     }
8021d294: 65 61        	addi	sp, sp, 0x70
8021d296: 82 80        	ret

000000008021d298 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6fda1eec242836d0E>:
;     pub fn iter(&self) -> Iter<'_, T> {
8021d298: 59 71        	addi	sp, sp, -0x70
8021d29a: 86 f4        	sd	ra, 0x68(sp)
8021d29c: a2 f0        	sd	s0, 0x60(sp)
8021d29e: 80 18        	addi	s0, sp, 0x70
8021d2a0: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021d2a4: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021d2a8: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021d2ac: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
8021d2b0: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
8021d2b4: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021d2b8: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8021d2bc: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
8021d2c0: 09 a0        	j	0x8021d2c2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6fda1eec242836d0E+0x2a>
8021d2c2: 03 35 84 f9  	ld	a0, -0x68(s0)
8021d2c6: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
8021d2ca: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
8021d2ce: 8e 05        	slli	a1, a1, 0x3
8021d2d0: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
8021d2d2: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021d2d6: 09 a0        	j	0x8021d2d8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h6fda1eec242836d0E+0x40>
;             Self { ptr, end_or_len, _marker: PhantomData }
8021d2d8: 03 35 84 fc  	ld	a0, -0x38(s0)
8021d2dc: 83 35 04 fb  	ld	a1, -0x50(s0)
8021d2e0: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021d2e4: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
8021d2e8: 03 35 04 fa  	ld	a0, -0x60(s0)
8021d2ec: 83 35 84 fa  	ld	a1, -0x58(s0)
8021d2f0: a6 70        	ld	ra, 0x68(sp)
8021d2f2: 06 74        	ld	s0, 0x60(sp)
8021d2f4: 65 61        	addi	sp, sp, 0x70
8021d2f6: 82 80        	ret

000000008021d2f8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17heef2fbf07348f8c0E>:
;     pub fn iter(&self) -> Iter<'_, T> {
8021d2f8: 59 71        	addi	sp, sp, -0x70
8021d2fa: 86 f4        	sd	ra, 0x68(sp)
8021d2fc: a2 f0        	sd	s0, 0x60(sp)
8021d2fe: 80 18        	addi	s0, sp, 0x70
8021d300: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021d304: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021d308: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021d30c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
8021d310: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
8021d314: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021d318: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8021d31c: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
8021d320: 09 a0        	j	0x8021d322 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17heef2fbf07348f8c0E+0x2a>
8021d322: 03 35 84 f9  	ld	a0, -0x68(s0)
8021d326: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
8021d32a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
8021d32e: 8a 05        	slli	a1, a1, 0x2
8021d330: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
8021d332: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021d336: 09 a0        	j	0x8021d338 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17heef2fbf07348f8c0E+0x40>
;             Self { ptr, end_or_len, _marker: PhantomData }
8021d338: 03 35 84 fc  	ld	a0, -0x38(s0)
8021d33c: 83 35 04 fb  	ld	a1, -0x50(s0)
8021d340: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021d344: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
8021d348: 03 35 04 fa  	ld	a0, -0x60(s0)
8021d34c: 83 35 84 fa  	ld	a1, -0x58(s0)
8021d350: a6 70        	ld	ra, 0x68(sp)
8021d352: 06 74        	ld	s0, 0x60(sp)
8021d354: 65 61        	addi	sp, sp, 0x70
8021d356: 82 80        	ret

000000008021d358 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h8d3adfc69275a0b5E>:
;     pub fn iter_mut(&mut self) -> IterMut<'_, T> {
8021d358: 59 71        	addi	sp, sp, -0x70
8021d35a: 86 f4        	sd	ra, 0x68(sp)
8021d35c: a2 f0        	sd	s0, 0x60(sp)
8021d35e: 80 18        	addi	s0, sp, 0x70
8021d360: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021d364: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021d368: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021d36c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
8021d370: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
8021d374: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021d378: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8021d37c: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
8021d380: 09 a0        	j	0x8021d382 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h8d3adfc69275a0b5E+0x2a>
8021d382: 03 35 84 f9  	ld	a0, -0x68(s0)
8021d386: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
8021d38a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
8021d38e: 2e 95        	add	a0, a0, a1
8021d390: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                 if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
8021d394: 09 a0        	j	0x8021d396 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h8d3adfc69275a0b5E+0x3e>
;             Self { ptr, end_or_len, _marker: PhantomData }
8021d396: 03 35 84 fc  	ld	a0, -0x38(s0)
8021d39a: 83 35 04 fb  	ld	a1, -0x50(s0)
8021d39e: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021d3a2: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
8021d3a6: 03 35 04 fa  	ld	a0, -0x60(s0)
8021d3aa: 83 35 84 fa  	ld	a1, -0x58(s0)
8021d3ae: a6 70        	ld	ra, 0x68(sp)
8021d3b0: 06 74        	ld	s0, 0x60(sp)
8021d3b2: 65 61        	addi	sp, sp, 0x70
8021d3b4: 82 80        	ret

000000008021d3b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hf1dbd4e00a142a2fE>:
;     pub fn iter_mut(&mut self) -> IterMut<'_, T> {
8021d3b6: 59 71        	addi	sp, sp, -0x70
8021d3b8: 86 f4        	sd	ra, 0x68(sp)
8021d3ba: a2 f0        	sd	s0, 0x60(sp)
8021d3bc: 80 18        	addi	s0, sp, 0x70
8021d3be: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021d3c2: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021d3c6: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021d3ca: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let len = slice.len();
8021d3ce: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
8021d3d2: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021d3d6: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8021d3da: 23 38 a4 fa  	sd	a0, -0x50(s0)
;                 if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
8021d3de: 09 a0        	j	0x8021d3e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hf1dbd4e00a142a2fE+0x2a>
8021d3e0: 03 35 84 f9  	ld	a0, -0x68(s0)
8021d3e4: 83 35 04 f9  	ld	a1, -0x70(s0)
;         self.pointer as *mut T
8021d3e8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
8021d3ec: 8a 05        	slli	a1, a1, 0x2
8021d3ee: 2e 95        	add	a0, a0, a1
8021d3f0: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                 if T::IS_ZST { without_provenance_mut(len) } else { ptr.as_ptr().add(len) };
8021d3f4: 09 a0        	j	0x8021d3f6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hf1dbd4e00a142a2fE+0x40>
;             Self { ptr, end_or_len, _marker: PhantomData }
8021d3f6: 03 35 84 fc  	ld	a0, -0x38(s0)
8021d3fa: 83 35 04 fb  	ld	a1, -0x50(s0)
8021d3fe: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021d402: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     }
8021d406: 03 35 04 fa  	ld	a0, -0x60(s0)
8021d40a: 83 35 84 fa  	ld	a1, -0x58(s0)
8021d40e: a6 70        	ld	ra, 0x68(sp)
8021d410: 06 74        	ld	s0, 0x60(sp)
8021d412: 65 61        	addi	sp, sp, 0x70
8021d414: 82 80        	ret

000000008021d416 <_ZN157_$LT$$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h8e41a5b5fbe970dcE>:
;             fn drop(&mut self) {
8021d416: 5d 71        	addi	sp, sp, -0x50
8021d418: 86 e4        	sd	ra, 0x48(sp)
8021d41a: a2 e0        	sd	s0, 0x40(sp)
8021d41c: 80 08        	addi	s0, sp, 0x50
8021d41e: aa 85        	mv	a1, a0
8021d420: 23 34 b4 fc  	sd	a1, -0x38(s0)
;                     let alloc = ManuallyDrop::take(&mut self.0.alloc);
8021d424: 88 61        	ld	a0, 0x0(a1)
8021d426: 13 05 05 02  	addi	a0, a0, 0x20
8021d42a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { ptr::read(&slot.value) }
8021d42e: 23 30 a4 fe  	sd	a0, -0x20(s0)
;                     let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);
8021d432: 88 61        	ld	a0, 0x0(a1)
8021d434: 08 61        	ld	a0, 0x0(a0)
8021d436: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d43a: 8c 61        	ld	a1, 0x0(a1)
8021d43c: 8c 69        	ld	a1, 0x10(a1)
8021d43e: 97 d0 00 00  	auipc	ra, 0xd
8021d442: e7 80 c0 14  	jalr	0x14c(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17h4dedd47e52d0ae5dE>
8021d446: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021d44a: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021d44e: 13 05 84 fb  	addi	a0, s0, -0x48
8021d452: 97 00 00 00  	auipc	ra, 0x0
8021d456: e7 80 c0 53  	jalr	0x53c(ra) <_ZN4core3ptr54drop_in_place$LT$alloc..raw_vec..RawVec$LT$u32$GT$$GT$17h15ffd5eeba3062fbE>
8021d45a: a6 60        	ld	ra, 0x48(sp)
8021d45c: 06 64        	ld	s0, 0x40(sp)
;             }
8021d45e: 61 61        	addi	sp, sp, 0x50
8021d460: 82 80        	ret

000000008021d462 <_ZN159_$LT$$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..Dropper$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0ac1a534b3409056E>:
;             fn drop(&mut self) {
8021d462: 01 11        	addi	sp, sp, -0x20
8021d464: 06 ec        	sd	ra, 0x18(sp)
8021d466: 22 e8        	sd	s0, 0x10(sp)
8021d468: 00 10        	addi	s0, sp, 0x20
8021d46a: aa 85        	mv	a1, a0
8021d46c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     ptr::drop_in_place(self.0);
8021d470: 88 61        	ld	a0, 0x0(a1)
8021d472: 8c 65        	ld	a1, 0x8(a1)
8021d474: 97 00 00 00  	auipc	ra, 0x0
8021d478: e7 80 a0 35  	jalr	0x35a(ra) <_ZN4core3ptr129drop_in_place$LT$$u5b$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$u5d$$GT$17h2f084305e4873bbaE>
8021d47c: e2 60        	ld	ra, 0x18(sp)
8021d47e: 42 64        	ld	s0, 0x10(sp)
;             }
8021d480: 05 61        	addi	sp, sp, 0x20
8021d482: 82 80        	ret

000000008021d484 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E>:
;             fn drop(&mut self) {
8021d484: 15 71        	addi	sp, sp, -0xe0
8021d486: 86 ed        	sd	ra, 0xd8(sp)
8021d488: a2 e9        	sd	s0, 0xd0(sp)
8021d48a: 80 11        	addi	s0, sp, 0xe0
8021d48c: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021d490: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021d494: 05 45        	li	a0, 0x1
;     intrinsics::needs_drop::<T>()
8021d496: a3 0b a4 f8  	sb	a0, -0x69(s0)
8021d49a: 03 45 74 f9  	lbu	a0, -0x69(s0)
8021d49e: 05 89        	andi	a0, a0, 0x1
;                 if mem::needs_drop::<T>() && self.0.remaining != 0 {
8021d4a0: 1d e9        	bnez	a0, 0x8021d4d6 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x52>
8021d4a2: 09 a0        	j	0x8021d4a4 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x20>
8021d4a4: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                 let source_deque = unsafe { self.0.deque.as_mut() };
8021d4a8: 0c 61        	ld	a1, 0x0(a0)
8021d4aa: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         unsafe { &mut *self.as_ptr() }
8021d4ae: 8c 61        	ld	a1, 0x0(a1)
8021d4b0: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8021d4b4: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self.pointer as *mut T
8021d4b8: 23 34 b4 fc  	sd	a1, -0x38(s0)
;                 let drain_len = self.0.drain_len;
8021d4bc: 0c 61        	ld	a1, 0x0(a0)
8021d4be: 8c 65        	ld	a1, 0x8(a1)
8021d4c0: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8021d4c4: 23 38 b4 fc  	sd	a1, -0x30(s0)
;                 let new_len = self.0.new_len;
8021d4c8: 08 61        	ld	a0, 0x0(a0)
8021d4ca: 08 6d        	ld	a0, 0x18(a0)
8021d4cc: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8021d4d0: 23 3c a4 fc  	sd	a0, -0x28(s0)
;                 if T::IS_ZST {
8021d4d4: 95 a0        	j	0x8021d538 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0xb4>
8021d4d6: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                 if mem::needs_drop::<T>() && self.0.remaining != 0 {
8021d4da: 08 61        	ld	a0, 0x0(a0)
8021d4dc: 08 71        	ld	a0, 0x20(a0)
8021d4de: 19 e1        	bnez	a0, 0x8021d4e4 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x60>
8021d4e0: 09 a0        	j	0x8021d4e2 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x5e>
; //!An easy file system isolated from the kernel
8021d4e2: c9 b7        	j	0x8021d4a4 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x20>
8021d4e4: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                         let (front, back) = self.0.as_slices();
8021d4e8: 0c 61        	ld	a1, 0x0(a0)
8021d4ea: 13 05 84 f6  	addi	a0, s0, -0x98
8021d4ee: 97 c0 00 00  	auipc	ra, 0xc
8021d4f2: e7 80 c0 a5  	jalr	-0x5a4(ra) <_ZN5alloc11collections9vec_deque5drain18Drain$LT$T$C$A$GT$9as_slices17hdfbe3337fa87da8cE>
8021d4f6: 03 35 84 f6  	ld	a0, -0x98(s0)
8021d4fa: 83 35 04 f7  	ld	a1, -0x90(s0)
8021d4fe: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021d502: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021d506: 83 36 84 f7  	ld	a3, -0x88(s0)
8021d50a: 23 3c d4 f2  	sd	a3, -0xc8(s0)
8021d50e: 03 36 04 f8  	ld	a2, -0x80(s0)
8021d512: 23 30 c4 f4  	sd	a2, -0xc0(s0)
8021d516: 23 34 d4 fa  	sd	a3, -0x58(s0)
8021d51a: 23 38 c4 fa  	sd	a2, -0x50(s0)
;                         ptr::drop_in_place(front);
8021d51e: 97 00 00 00  	auipc	ra, 0x0
8021d522: e7 80 00 2b  	jalr	0x2b0(ra) <_ZN4core3ptr129drop_in_place$LT$$u5b$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$u5d$$GT$17h2f084305e4873bbaE>
8021d526: 03 35 84 f3  	ld	a0, -0xc8(s0)
8021d52a: 83 35 04 f4  	ld	a1, -0xc0(s0)
;                         ptr::drop_in_place(back);
8021d52e: 97 00 00 00  	auipc	ra, 0x0
8021d532: e7 80 00 2a  	jalr	0x2a0(ra) <_ZN4core3ptr129drop_in_place$LT$$u5b$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$u5d$$GT$17h2f084305e4873bbaE>
8021d536: bd b7        	j	0x8021d4a4 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x20>
8021d538: 83 35 84 f5  	ld	a1, -0xa8(s0)
8021d53c: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let head_len = source_deque.len; // #elements in front of the drain
8021d540: 08 6d        	ld	a0, 0x18(a0)
8021d542: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8021d546: 23 30 a4 fe  	sd	a0, -0x20(s0)
;                 let tail_len = new_len - head_len; // #elements behind the drain
8021d54a: 89 8d        	sub	a1, a1, a0
8021d54c: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8021d550: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if head_len != 0 && tail_len != 0 {
8021d554: 11 e5        	bnez	a0, 0x8021d560 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0xdc>
8021d556: 09 a0        	j	0x8021d558 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0xd4>
8021d558: 03 35 84 f5  	ld	a0, -0xa8(s0)
;                 if new_len == 0 {
8021d55c: 1d c1        	beqz	a0, 0x8021d582 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0xfe>
8021d55e: 3d a0        	j	0x8021d58c <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x108>
8021d560: 03 35 04 f3  	ld	a0, -0xd0(s0)
;                 if head_len != 0 && tail_len != 0 {
8021d564: 75 d9        	beqz	a0, 0x8021d558 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0xd4>
8021d566: 09 a0        	j	0x8021d568 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0xe4>
8021d568: 83 36 04 f3  	ld	a3, -0xd0(s0)
8021d56c: 03 36 84 f2  	ld	a2, -0xd8(s0)
8021d570: 83 35 04 f5  	ld	a1, -0xb0(s0)
8021d574: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     join_head_and_tail_wrapping(source_deque, drain_len, head_len, tail_len);
8021d578: 97 c0 00 00  	auipc	ra, 0xc
8021d57c: e7 80 20 92  	jalr	-0x6de(ra) <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop27join_head_and_tail_wrapping17h44e3916fb0acbffdE>
;                 if head_len != 0 && tail_len != 0 {
8021d580: e1 bf        	j	0x8021d558 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0xd4>
8021d582: 83 35 84 f4  	ld	a1, -0xb8(s0)
8021d586: 01 45        	li	a0, 0x0
;                     source_deque.head = 0;
8021d588: 88 e9        	sd	a0, 0x10(a1)
;                 if new_len == 0 {
8021d58a: 01 a8        	j	0x8021d59a <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x116>
8021d58c: 03 35 84 f2  	ld	a0, -0xd8(s0)
8021d590: 83 35 04 f3  	ld	a1, -0xd0(s0)
;                 } else if head_len < tail_len {
8021d594: 63 6a b5 00  	bltu	a0, a1, 0x8021d5a8 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x124>
8021d598: 39 a0        	j	0x8021d5a6 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x122>
8021d59a: 03 35 84 f5  	ld	a0, -0xa8(s0)
8021d59e: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                 source_deque.len = new_len;
8021d5a2: 88 ed        	sd	a0, 0x18(a1)
;             }
8021d5a4: 31 a8        	j	0x8021d5c0 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x13c>
;                 if new_len == 0 {
8021d5a6: d5 bf        	j	0x8021d59a <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x116>
8021d5a8: 03 35 84 f4  	ld	a0, -0xb8(s0)
8021d5ac: 83 35 04 f5  	ld	a1, -0xb0(s0)
;                     source_deque.head = source_deque.to_physical_idx(drain_len);
8021d5b0: 97 90 00 00  	auipc	ra, 0x9
8021d5b4: e7 80 20 46  	jalr	0x462(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE>
8021d5b8: 83 35 84 f4  	ld	a1, -0xb8(s0)
8021d5bc: 88 e9        	sd	a0, 0x10(a1)
;                 } else if head_len < tail_len {
8021d5be: e5 b7        	j	0x8021d5a6 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E+0x122>
8021d5c0: ee 60        	ld	ra, 0xd8(sp)
8021d5c2: 4e 64        	ld	s0, 0xd0(sp)
;             }
8021d5c4: 2d 61        	addi	sp, sp, 0xe0
8021d5c6: 82 80        	ret

000000008021d5c8 <_ZN4core3ops8function6FnOnce9call_once17h09c1086f245a3339E>:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
8021d5c8: 79 71        	addi	sp, sp, -0x30
8021d5ca: 06 f4        	sd	ra, 0x28(sp)
8021d5cc: 22 f0        	sd	s0, 0x20(sp)
8021d5ce: 00 18        	addi	s0, sp, 0x30
8021d5d0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021d5d4: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021d5d8: 23 34 c4 fe  	sd	a2, -0x18(s0)
8021d5dc: 83 35 84 fe  	ld	a1, -0x18(s0)
8021d5e0: 13 05 84 fd  	addi	a0, s0, -0x28
8021d5e4: 97 10 00 00  	auipc	ra, 0x1
8021d5e8: e7 80 80 53  	jalr	0x538(ra) <_ZN7easy_fs3vfs5Inode6create28_$u7b$$u7b$closure$u7d$$u7d$17h3209846d6e48aae9E>
8021d5ec: a2 70        	ld	ra, 0x28(sp)
8021d5ee: 02 74        	ld	s0, 0x20(sp)
8021d5f0: 45 61        	addi	sp, sp, 0x30
8021d5f2: 82 80        	ret

000000008021d5f4 <_ZN4core3ops8function6FnOnce9call_once17h0a560c8607459ceaE>:
8021d5f4: 31 71        	addi	sp, sp, -0xc0
8021d5f6: 06 fd        	sd	ra, 0xb8(sp)
8021d5f8: 22 f9        	sd	s0, 0xb0(sp)
8021d5fa: 80 01        	addi	s0, sp, 0xc0
8021d5fc: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021d600: 13 05 04 f6  	addi	a0, s0, -0xa0
;         Mutex::new(BlockCacheManager::new());
8021d604: 97 80 00 00  	auipc	ra, 0x8
8021d608: e7 80 a0 43  	jalr	0x43a(ra) <_ZN7easy_fs11block_cache17BlockCacheManager3new17h79b6cae5c0310b1aE>
8021d60c: 01 45        	li	a0, 0x0
8021d60e: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;             next_ticket: AtomicUsize::new(0),
8021d612: 97 20 00 00  	auipc	ra, 0x2
8021d616: e7 80 40 b2  	jalr	-0x4dc(ra) <_ZN4core4sync6atomic11AtomicUsize3new17h99f105a5aa09155fE>
8021d61a: aa 85        	mv	a1, a0
8021d61c: 03 35 84 f4  	ld	a0, -0xb8(s0)
8021d620: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021d624: 83 35 04 fe  	ld	a1, -0x20(s0)
8021d628: 23 38 b4 fa  	sd	a1, -0x50(s0)
;             next_serving: AtomicUsize::new(0),
8021d62c: 97 20 00 00  	auipc	ra, 0x2
8021d630: e7 80 a0 b0  	jalr	-0x4f6(ra) <_ZN4core4sync6atomic11AtomicUsize3new17h99f105a5aa09155fE>
8021d634: 83 35 04 f5  	ld	a1, -0xb0(s0)
8021d638: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d63c: 03 35 84 fe  	ld	a0, -0x18(s0)
8021d640: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         UnsafeCell { value }
8021d644: 03 35 84 f7  	ld	a0, -0x88(s0)
8021d648: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021d64c: 03 35 04 f7  	ld	a0, -0x90(s0)
8021d650: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021d654: 03 35 84 f6  	ld	a0, -0x98(s0)
8021d658: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021d65c: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021d660: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         Self {
8021d664: 03 35 04 fb  	ld	a0, -0x50(s0)
8021d668: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021d66c: 03 35 84 fb  	ld	a0, -0x48(s0)
8021d670: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021d674: 03 35 84 fd  	ld	a0, -0x28(s0)
8021d678: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021d67c: 03 35 04 fd  	ld	a0, -0x30(s0)
8021d680: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021d684: 03 35 84 fc  	ld	a0, -0x38(s0)
8021d688: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021d68c: 03 35 04 fc  	ld	a0, -0x40(s0)
8021d690: 23 38 a4 f8  	sd	a0, -0x70(s0)
;         Self { inner: InnerMutex::new(value) }
8021d694: 03 35 84 fa  	ld	a0, -0x58(s0)
8021d698: 88 f5        	sd	a0, 0x28(a1)
8021d69a: 03 35 04 fa  	ld	a0, -0x60(s0)
8021d69e: 88 f1        	sd	a0, 0x20(a1)
8021d6a0: 03 35 84 f9  	ld	a0, -0x68(s0)
8021d6a4: 88 ed        	sd	a0, 0x18(a1)
8021d6a6: 03 35 04 f9  	ld	a0, -0x70(s0)
8021d6aa: 88 e9        	sd	a0, 0x10(a1)
8021d6ac: 03 35 84 f8  	ld	a0, -0x78(s0)
8021d6b0: 88 e5        	sd	a0, 0x8(a1)
8021d6b2: 03 35 04 f8  	ld	a0, -0x80(s0)
8021d6b6: 88 e1        	sd	a0, 0x0(a1)
8021d6b8: ea 70        	ld	ra, 0xb8(sp)
8021d6ba: 4a 74        	ld	s0, 0xb0(sp)
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
8021d6bc: 29 61        	addi	sp, sp, 0xc0
8021d6be: 82 80        	ret

000000008021d6c0 <_ZN4core3ops8function6FnOnce9call_once17hdc287668bae4b687E>:
8021d6c0: 79 71        	addi	sp, sp, -0x30
8021d6c2: 06 f4        	sd	ra, 0x28(sp)
8021d6c4: 22 f0        	sd	s0, 0x20(sp)
8021d6c6: 00 18        	addi	s0, sp, 0x30
8021d6c8: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021d6cc: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021d6d0: 03 35 84 fd  	ld	a0, -0x28(s0)
8021d6d4: 83 35 04 fe  	ld	a1, -0x20(s0)
8021d6d8: 97 b0 00 00  	auipc	ra, 0xb
8021d6dc: e7 80 a0 5d  	jalr	0x5da(ra) <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E>
8021d6e0: a2 70        	ld	ra, 0x28(sp)
8021d6e2: 02 74        	ld	s0, 0x20(sp)
8021d6e4: 45 61        	addi	sp, sp, 0x30
8021d6e6: 82 80        	ret

000000008021d6e8 <_ZN4core3ops8function6FnOnce9call_once17he8e03584e0695c02E>:
8021d6e8: 79 71        	addi	sp, sp, -0x30
8021d6ea: 06 f4        	sd	ra, 0x28(sp)
8021d6ec: 22 f0        	sd	s0, 0x20(sp)
8021d6ee: 00 18        	addi	s0, sp, 0x30
8021d6f0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021d6f4: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021d6f8: 03 35 84 fd  	ld	a0, -0x28(s0)
8021d6fc: 83 35 04 fe  	ld	a1, -0x20(s0)
8021d700: 97 b0 00 00  	auipc	ra, 0xb
8021d704: e7 80 e0 60  	jalr	0x60e(ra) <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E>
8021d708: a2 70        	ld	ra, 0x28(sp)
8021d70a: 02 74        	ld	s0, 0x20(sp)
8021d70c: 45 61        	addi	sp, sp, 0x30
8021d70e: 82 80        	ret

000000008021d710 <_ZN4core3ptr100drop_in_place$LT$spin..mutex..ticket..TicketMutex$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$17hbd94acd0ab5dd67fE>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8021d710: 01 11        	addi	sp, sp, -0x20
8021d712: 06 ec        	sd	ra, 0x18(sp)
8021d714: 22 e8        	sd	s0, 0x10(sp)
8021d716: 00 10        	addi	s0, sp, 0x20
8021d718: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d71c: 41 05        	addi	a0, a0, 0x10
8021d71e: 97 00 00 00  	auipc	ra, 0x0
8021d722: e7 80 00 3b  	jalr	0x3b0(ra) <_ZN4core3ptr90drop_in_place$LT$core..cell..UnsafeCell$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$17he08f9f62438d5291E>
8021d726: e2 60        	ld	ra, 0x18(sp)
8021d728: 42 64        	ld	s0, 0x10(sp)
8021d72a: 05 61        	addi	sp, sp, 0x20
8021d72c: 82 80        	ret

000000008021d72e <_ZN4core3ptr103drop_in_place$LT$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$GT$17h148b72246d7d5029E>:
8021d72e: 01 11        	addi	sp, sp, -0x20
8021d730: 06 ec        	sd	ra, 0x18(sp)
8021d732: 22 e8        	sd	s0, 0x10(sp)
8021d734: 00 10        	addi	s0, sp, 0x20
8021d736: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d73a: 97 00 00 00  	auipc	ra, 0x0
8021d73e: e7 80 00 4a  	jalr	0x4a0(ra) <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd2b767724d4d29cE>
8021d742: e2 60        	ld	ra, 0x18(sp)
8021d744: 42 64        	ld	s0, 0x10(sp)
8021d746: 05 61        	addi	sp, sp, 0x20
8021d748: 82 80        	ret

000000008021d74a <_ZN4core3ptr105drop_in_place$LT$spin..mutex..ticket..TicketMutexGuard$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$17hea1c81a0c8d15892E>:
8021d74a: 01 11        	addi	sp, sp, -0x20
8021d74c: 06 ec        	sd	ra, 0x18(sp)
8021d74e: 22 e8        	sd	s0, 0x10(sp)
8021d750: 00 10        	addi	s0, sp, 0x20
8021d752: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d756: 97 10 00 00  	auipc	ra, 0x1
8021d75a: e7 80 e0 84  	jalr	-0x7b2(ra) <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h602a66bdeaa1211fE>
8021d75e: e2 60        	ld	ra, 0x18(sp)
8021d760: 42 64        	ld	s0, 0x10(sp)
8021d762: 05 61        	addi	sp, sp, 0x20
8021d764: 82 80        	ret

000000008021d766 <_ZN4core3ptr112drop_in_place$LT$alloc..sync..Weak$LT$dyn$u20$easy_fs..block_dev..BlockDevice$C$$RF$alloc..alloc..Global$GT$$GT$17h34242185cd88b954E>:
8021d766: 01 11        	addi	sp, sp, -0x20
8021d768: 06 ec        	sd	ra, 0x18(sp)
8021d76a: 22 e8        	sd	s0, 0x10(sp)
8021d76c: 00 10        	addi	s0, sp, 0x20
8021d76e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d772: 97 00 00 00  	auipc	ra, 0x0
8021d776: e7 80 a0 4d  	jalr	0x4da(ra) <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E>
8021d77a: e2 60        	ld	ra, 0x18(sp)
8021d77c: 42 64        	ld	s0, 0x10(sp)
8021d77e: 05 61        	addi	sp, sp, 0x20
8021d780: 82 80        	ret

000000008021d782 <_ZN4core3ptr114drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$$GT$17hcedd00a7d78dbf9eE>:
8021d782: 01 11        	addi	sp, sp, -0x20
8021d784: 06 ec        	sd	ra, 0x18(sp)
8021d786: 22 e8        	sd	s0, 0x10(sp)
8021d788: 00 10        	addi	s0, sp, 0x20
8021d78a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021d78e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d792: 08 61        	ld	a0, 0x0(a0)
8021d794: 11 e5        	bnez	a0, 0x8021d7a0 <_ZN4core3ptr114drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$$GT$17hcedd00a7d78dbf9eE+0x1e>
8021d796: 09 a0        	j	0x8021d798 <_ZN4core3ptr114drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$$GT$17hcedd00a7d78dbf9eE+0x16>
8021d798: e2 60        	ld	ra, 0x18(sp)
8021d79a: 42 64        	ld	s0, 0x10(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8021d79c: 05 61        	addi	sp, sp, 0x20
8021d79e: 82 80        	ret
8021d7a0: 03 35 04 fe  	ld	a0, -0x20(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8021d7a4: 21 05        	addi	a0, a0, 0x8
8021d7a6: 97 00 00 00  	auipc	ra, 0x0
8021d7aa: e7 80 c0 30  	jalr	0x30c(ra) <_ZN4core3ptr86drop_in_place$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$17h50c3f4d10c20787cE>
8021d7ae: ed b7        	j	0x8021d798 <_ZN4core3ptr114drop_in_place$LT$core..option..Option$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$$GT$17hcedd00a7d78dbf9eE+0x16>

000000008021d7b0 <_ZN4core3ptr119drop_in_place$LT$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$GT$17h99f666284d3ec656E>:
8021d7b0: 01 11        	addi	sp, sp, -0x20
8021d7b2: 06 ec        	sd	ra, 0x18(sp)
8021d7b4: 22 e8        	sd	s0, 0x10(sp)
8021d7b6: 00 10        	addi	s0, sp, 0x20
8021d7b8: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d7bc: 21 05        	addi	a0, a0, 0x8
8021d7be: 97 00 00 00  	auipc	ra, 0x0
8021d7c2: e7 80 00 f7  	jalr	-0x90(ra) <_ZN4core3ptr103drop_in_place$LT$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$GT$17h148b72246d7d5029E>
8021d7c6: e2 60        	ld	ra, 0x18(sp)
8021d7c8: 42 64        	ld	s0, 0x10(sp)
8021d7ca: 05 61        	addi	sp, sp, 0x20
8021d7cc: 82 80        	ret

000000008021d7ce <_ZN4core3ptr129drop_in_place$LT$$u5b$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$u5d$$GT$17h2f084305e4873bbaE>:
8021d7ce: 39 71        	addi	sp, sp, -0x40
8021d7d0: 06 fc        	sd	ra, 0x38(sp)
8021d7d2: 22 f8        	sd	s0, 0x30(sp)
8021d7d4: 80 00        	addi	s0, sp, 0x40
8021d7d6: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021d7da: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021d7de: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021d7e2: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021d7e6: 01 45        	li	a0, 0x0
8021d7e8: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021d7ec: 09 a0        	j	0x8021d7ee <_ZN4core3ptr129drop_in_place$LT$$u5b$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$u5d$$GT$17h2f084305e4873bbaE+0x20>
8021d7ee: 83 35 84 fc  	ld	a1, -0x38(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8021d7f2: 03 35 84 fd  	ld	a0, -0x28(s0)
8021d7f6: 63 02 b5 02  	beq	a0, a1, 0x8021d81a <_ZN4core3ptr129drop_in_place$LT$$u5b$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$u5d$$GT$17h2f084305e4873bbaE+0x4c>
8021d7fa: 09 a0        	j	0x8021d7fc <_ZN4core3ptr129drop_in_place$LT$$u5b$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$u5d$$GT$17h2f084305e4873bbaE+0x2e>
8021d7fc: 03 35 04 fd  	ld	a0, -0x30(s0)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8021d800: 83 35 84 fd  	ld	a1, -0x28(s0)
8021d804: 13 96 45 00  	slli	a2, a1, 0x4
8021d808: 32 95        	add	a0, a0, a2
8021d80a: 85 05        	addi	a1, a1, 0x1
8021d80c: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021d810: 97 00 00 00  	auipc	ra, 0x0
8021d814: e7 80 00 fa  	jalr	-0x60(ra) <_ZN4core3ptr119drop_in_place$LT$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$GT$17h99f666284d3ec656E>
8021d818: d9 bf        	j	0x8021d7ee <_ZN4core3ptr129drop_in_place$LT$$u5b$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$u5d$$GT$17h2f084305e4873bbaE+0x20>
8021d81a: e2 70        	ld	ra, 0x38(sp)
8021d81c: 42 74        	ld	s0, 0x30(sp)
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8021d81e: 21 61        	addi	sp, sp, 0x40
8021d820: 82 80        	ret

000000008021d822 <_ZN4core3ptr131drop_in_place$LT$alloc..sync..Weak$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$C$$RF$alloc..alloc..Global$GT$$GT$17h9c6be2eff8035fb5E>:
8021d822: 01 11        	addi	sp, sp, -0x20
8021d824: 06 ec        	sd	ra, 0x18(sp)
8021d826: 22 e8        	sd	s0, 0x10(sp)
8021d828: 00 10        	addi	s0, sp, 0x20
8021d82a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d82e: 97 00 00 00  	auipc	ra, 0x0
8021d832: e7 80 c0 59  	jalr	0x59c(ra) <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E>
8021d836: e2 60        	ld	ra, 0x18(sp)
8021d838: 42 64        	ld	s0, 0x10(sp)
8021d83a: 05 61        	addi	sp, sp, 0x20
8021d83c: 82 80        	ret

000000008021d83e <_ZN4core3ptr149drop_in_place$LT$alloc..raw_vec..RawVec$LT$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$GT$$GT$17h2b07089bcb20c49fE>:
8021d83e: 01 11        	addi	sp, sp, -0x20
8021d840: 06 ec        	sd	ra, 0x18(sp)
8021d842: 22 e8        	sd	s0, 0x10(sp)
8021d844: 00 10        	addi	s0, sp, 0x20
8021d846: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d84a: 97 00 00 00  	auipc	ra, 0x0
8021d84e: e7 80 40 6d  	jalr	0x6d4(ra) <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf5b8c792efadec5aE>
8021d852: e2 60        	ld	ra, 0x18(sp)
8021d854: 42 64        	ld	s0, 0x10(sp)
8021d856: 05 61        	addi	sp, sp, 0x20
8021d858: 82 80        	ret

000000008021d85a <_ZN4core3ptr157drop_in_place$LT$$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$u32$C$alloc..alloc..Global$GT$$GT$17hf982334735389aebE>:
8021d85a: 01 11        	addi	sp, sp, -0x20
8021d85c: 06 ec        	sd	ra, 0x18(sp)
8021d85e: 22 e8        	sd	s0, 0x10(sp)
8021d860: 00 10        	addi	s0, sp, 0x20
8021d862: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d866: 97 00 00 00  	auipc	ra, 0x0
8021d86a: e7 80 00 bb  	jalr	-0x450(ra) <_ZN157_$LT$$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h8e41a5b5fbe970dcE>
8021d86e: e2 60        	ld	ra, 0x18(sp)
8021d870: 42 64        	ld	s0, 0x10(sp)
8021d872: 05 61        	addi	sp, sp, 0x20
8021d874: 82 80        	ret

000000008021d876 <_ZN4core3ptr166drop_in_place$LT$alloc..collections..vec_deque..VecDeque$LT$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$GT$$GT$17ha6800129d02e2089E>:
8021d876: 01 11        	addi	sp, sp, -0x20
8021d878: 06 ec        	sd	ra, 0x18(sp)
8021d87a: 22 e8        	sd	s0, 0x10(sp)
8021d87c: 00 10        	addi	s0, sp, 0x20
8021d87e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021d882: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d886: 97 10 00 00  	auipc	ra, 0x1
8021d88a: e7 80 80 83  	jalr	-0x7c8(ra) <_ZN94_$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h469ba0dd83180719E>
8021d88e: 03 35 04 fe  	ld	a0, -0x20(s0)
8021d892: 97 00 00 00  	auipc	ra, 0x0
8021d896: e7 80 c0 fa  	jalr	-0x54(ra) <_ZN4core3ptr149drop_in_place$LT$alloc..raw_vec..RawVec$LT$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$GT$$GT$17h2b07089bcb20c49fE>
8021d89a: e2 60        	ld	ra, 0x18(sp)
8021d89c: 42 64        	ld	s0, 0x10(sp)
8021d89e: 05 61        	addi	sp, sp, 0x20
8021d8a0: 82 80        	ret

000000008021d8a2 <_ZN4core3ptr170drop_in_place$LT$alloc..collections..vec_deque..drain..Drain$LT$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$GT$$GT$17hfe777c9199771ca1E>:
8021d8a2: 01 11        	addi	sp, sp, -0x20
8021d8a4: 06 ec        	sd	ra, 0x18(sp)
8021d8a6: 22 e8        	sd	s0, 0x10(sp)
8021d8a8: 00 10        	addi	s0, sp, 0x20
8021d8aa: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d8ae: 97 10 00 00  	auipc	ra, 0x1
8021d8b2: e7 80 e0 86  	jalr	-0x792(ra) <_ZN98_$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h378a556cc5b23d07E>
8021d8b6: e2 60        	ld	ra, 0x18(sp)
8021d8b8: 42 64        	ld	s0, 0x10(sp)
8021d8ba: 05 61        	addi	sp, sp, 0x20
8021d8bc: 82 80        	ret

000000008021d8be <_ZN4core3ptr235drop_in_place$LT$$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..Dropper$LT$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$GT$$GT$17h5e7d0e270d9d6ba2E>:
8021d8be: 01 11        	addi	sp, sp, -0x20
8021d8c0: 06 ec        	sd	ra, 0x18(sp)
8021d8c2: 22 e8        	sd	s0, 0x10(sp)
8021d8c4: 00 10        	addi	s0, sp, 0x20
8021d8c6: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d8ca: 97 00 00 00  	auipc	ra, 0x0
8021d8ce: e7 80 80 b9  	jalr	-0x468(ra) <_ZN159_$LT$$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..Dropper$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h0ac1a534b3409056E>
8021d8d2: e2 60        	ld	ra, 0x18(sp)
8021d8d4: 42 64        	ld	s0, 0x10(sp)
8021d8d6: 05 61        	addi	sp, sp, 0x20
8021d8d8: 82 80        	ret

000000008021d8da <_ZN4core3ptr264drop_in_place$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$C$alloc..alloc..Global$GT$$GT$17hcd428f5e33d32fcdE>:
8021d8da: 01 11        	addi	sp, sp, -0x20
8021d8dc: 06 ec        	sd	ra, 0x18(sp)
8021d8de: 22 e8        	sd	s0, 0x10(sp)
8021d8e0: 00 10        	addi	s0, sp, 0x20
8021d8e2: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d8e6: 97 00 00 00  	auipc	ra, 0x0
8021d8ea: e7 80 e0 b9  	jalr	-0x462(ra) <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h52cb3c3811da3121E>
8021d8ee: e2 60        	ld	ra, 0x18(sp)
8021d8f0: 42 64        	ld	s0, 0x10(sp)
8021d8f2: 05 61        	addi	sp, sp, 0x20
8021d8f4: 82 80        	ret

000000008021d8f6 <_ZN4core3ptr26drop_in_place$LT$usize$GT$17h1141d2a5b55bd23dE>:
8021d8f6: 01 11        	addi	sp, sp, -0x20
8021d8f8: 06 ec        	sd	ra, 0x18(sp)
8021d8fa: 22 e8        	sd	s0, 0x10(sp)
8021d8fc: 00 10        	addi	s0, sp, 0x20
8021d8fe: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d902: e2 60        	ld	ra, 0x18(sp)
8021d904: 42 64        	ld	s0, 0x10(sp)
8021d906: 05 61        	addi	sp, sp, 0x20
8021d908: 82 80        	ret

000000008021d90a <_ZN4core3ptr27drop_in_place$LT$$RF$u8$GT$17hbc035613724cd5abE>:
8021d90a: 01 11        	addi	sp, sp, -0x20
8021d90c: 06 ec        	sd	ra, 0x18(sp)
8021d90e: 22 e8        	sd	s0, 0x10(sp)
8021d910: 00 10        	addi	s0, sp, 0x20
8021d912: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d916: e2 60        	ld	ra, 0x18(sp)
8021d918: 42 64        	ld	s0, 0x10(sp)
8021d91a: 05 61        	addi	sp, sp, 0x20
8021d91c: 82 80        	ret

000000008021d91e <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17hb6c1f367f9f03642E>:
8021d91e: 01 11        	addi	sp, sp, -0x20
8021d920: 06 ec        	sd	ra, 0x18(sp)
8021d922: 22 e8        	sd	s0, 0x10(sp)
8021d924: 00 10        	addi	s0, sp, 0x20
8021d926: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d92a: e2 60        	ld	ra, 0x18(sp)
8021d92c: 42 64        	ld	s0, 0x10(sp)
8021d92e: 05 61        	addi	sp, sp, 0x20
8021d930: 82 80        	ret

000000008021d932 <_ZN4core3ptr39drop_in_place$LT$spin..once..Finish$GT$17hc6d9e006d9c060e8E>:
8021d932: 01 11        	addi	sp, sp, -0x20
8021d934: 06 ec        	sd	ra, 0x18(sp)
8021d936: 22 e8        	sd	s0, 0x10(sp)
8021d938: 00 10        	addi	s0, sp, 0x20
8021d93a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d93e: 97 e0 00 00  	auipc	ra, 0xe
8021d942: e7 80 80 85  	jalr	-0x7a8(ra) <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3efb134368566abaE>
8021d946: e2 60        	ld	ra, 0x18(sp)
8021d948: 42 64        	ld	s0, 0x10(sp)
8021d94a: 05 61        	addi	sp, sp, 0x20
8021d94c: 82 80        	ret

000000008021d94e <_ZN4core3ptr48drop_in_place$LT$core..str..error..Utf8Error$GT$17h5b056b1eeec07d27E>:
8021d94e: 01 11        	addi	sp, sp, -0x20
8021d950: 06 ec        	sd	ra, 0x18(sp)
8021d952: 22 e8        	sd	s0, 0x10(sp)
8021d954: 00 10        	addi	s0, sp, 0x20
8021d956: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d95a: e2 60        	ld	ra, 0x18(sp)
8021d95c: 42 64        	ld	s0, 0x10(sp)
8021d95e: 05 61        	addi	sp, sp, 0x20
8021d960: 82 80        	ret

000000008021d962 <_ZN4core3ptr53drop_in_place$LT$easy_fs..block_cache..BlockCache$GT$17hbd42ccba63910ad8E>:
8021d962: 01 11        	addi	sp, sp, -0x20
8021d964: 06 ec        	sd	ra, 0x18(sp)
8021d966: 22 e8        	sd	s0, 0x10(sp)
8021d968: 00 10        	addi	s0, sp, 0x20
8021d96a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021d96e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d972: 97 10 00 00  	auipc	ra, 0x1
8021d976: e7 80 80 87  	jalr	-0x788(ra) <_ZN74_$LT$easy_fs..block_cache..BlockCache$u20$as$u20$core..ops..drop..Drop$GT$4drop17h69700456cf0ea1c1E>
8021d97a: 03 35 04 fe  	ld	a0, -0x20(s0)
8021d97e: 97 00 00 00  	auipc	ra, 0x0
8021d982: e7 80 c0 0f  	jalr	0xfc(ra) <_ZN4core3ptr84drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$17h88c9727042c9d2a2E>
8021d986: e2 60        	ld	ra, 0x18(sp)
8021d988: 42 64        	ld	s0, 0x10(sp)
8021d98a: 05 61        	addi	sp, sp, 0x20
8021d98c: 82 80        	ret

000000008021d98e <_ZN4core3ptr54drop_in_place$LT$alloc..raw_vec..RawVec$LT$u32$GT$$GT$17h15ffd5eeba3062fbE>:
8021d98e: 01 11        	addi	sp, sp, -0x20
8021d990: 06 ec        	sd	ra, 0x18(sp)
8021d992: 22 e8        	sd	s0, 0x10(sp)
8021d994: 00 10        	addi	s0, sp, 0x20
8021d996: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d99a: 97 00 00 00  	auipc	ra, 0x0
8021d99e: e7 80 e0 52  	jalr	0x52e(ra) <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h999745cbf8acbfb5E>
8021d9a2: e2 60        	ld	ra, 0x18(sp)
8021d9a4: 42 64        	ld	s0, 0x10(sp)
8021d9a6: 05 61        	addi	sp, sp, 0x20
8021d9a8: 82 80        	ret

000000008021d9aa <_ZN4core3ptr55drop_in_place$LT$$RF$core..option..Option$LT$u8$GT$$GT$17habe337457818d254E>:
8021d9aa: 01 11        	addi	sp, sp, -0x20
8021d9ac: 06 ec        	sd	ra, 0x18(sp)
8021d9ae: 22 e8        	sd	s0, 0x10(sp)
8021d9b0: 00 10        	addi	s0, sp, 0x20
8021d9b2: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d9b6: e2 60        	ld	ra, 0x18(sp)
8021d9b8: 42 64        	ld	s0, 0x10(sp)
8021d9ba: 05 61        	addi	sp, sp, 0x20
8021d9bc: 82 80        	ret

000000008021d9be <_ZN4core3ptr58drop_in_place$LT$$RF$core..option..Option$LT$usize$GT$$GT$17h71b4cd66e4528a61E>:
8021d9be: 01 11        	addi	sp, sp, -0x20
8021d9c0: 06 ec        	sd	ra, 0x18(sp)
8021d9c2: 22 e8        	sd	s0, 0x10(sp)
8021d9c4: 00 10        	addi	s0, sp, 0x20
8021d9c6: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d9ca: e2 60        	ld	ra, 0x18(sp)
8021d9cc: 42 64        	ld	s0, 0x10(sp)
8021d9ce: 05 61        	addi	sp, sp, 0x20
8021d9d0: 82 80        	ret

000000008021d9d2 <_ZN4core3ptr60drop_in_place$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$17hf561cfa975bb3d43E>:
8021d9d2: 01 11        	addi	sp, sp, -0x20
8021d9d4: 06 ec        	sd	ra, 0x18(sp)
8021d9d6: 22 e8        	sd	s0, 0x10(sp)
8021d9d8: 00 10        	addi	s0, sp, 0x20
8021d9da: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021d9de: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021d9e2: 8c 61        	ld	a1, 0x0(a1)
8021d9e4: 82 95        	jalr	a1
8021d9e6: e2 60        	ld	ra, 0x18(sp)
8021d9e8: 42 64        	ld	s0, 0x10(sp)
8021d9ea: 05 61        	addi	sp, sp, 0x20
8021d9ec: 82 80        	ret

000000008021d9ee <_ZN4core3ptr60drop_in_place$LT$easy_fs..block_cache..BlockCacheManager$GT$17h587e112caddf626eE>:
8021d9ee: 01 11        	addi	sp, sp, -0x20
8021d9f0: 06 ec        	sd	ra, 0x18(sp)
8021d9f2: 22 e8        	sd	s0, 0x10(sp)
8021d9f4: 00 10        	addi	s0, sp, 0x20
8021d9f6: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021d9fa: 97 00 00 00  	auipc	ra, 0x0
8021d9fe: e7 80 c0 e7  	jalr	-0x184(ra) <_ZN4core3ptr166drop_in_place$LT$alloc..collections..vec_deque..VecDeque$LT$$LP$usize$C$alloc..sync..Arc$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$$RP$$GT$$GT$17ha6800129d02e2089E>
8021da02: e2 60        	ld	ra, 0x18(sp)
8021da04: 42 64        	ld	s0, 0x10(sp)
8021da06: 05 61        	addi	sp, sp, 0x20
8021da08: 82 80        	ret

000000008021da0a <_ZN4core3ptr63drop_in_place$LT$alloc..vec..into_iter..IntoIter$LT$u32$GT$$GT$17hf8e623b1257f71d8E>:
8021da0a: 01 11        	addi	sp, sp, -0x20
8021da0c: 06 ec        	sd	ra, 0x18(sp)
8021da0e: 22 e8        	sd	s0, 0x10(sp)
8021da10: 00 10        	addi	s0, sp, 0x20
8021da12: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021da16: 97 00 00 00  	auipc	ra, 0x0
8021da1a: e7 80 e0 55  	jalr	0x55e(ra) <_ZN86_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h45f4d36e2855c982E>
8021da1e: e2 60        	ld	ra, 0x18(sp)
8021da20: 42 64        	ld	s0, 0x10(sp)
8021da22: 05 61        	addi	sp, sp, 0x20
8021da24: 82 80        	ret

000000008021da26 <_ZN4core3ptr79drop_in_place$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$17h22655413dc9b28c8E>:
8021da26: 01 11        	addi	sp, sp, -0x20
8021da28: 06 ec        	sd	ra, 0x18(sp)
8021da2a: 22 e8        	sd	s0, 0x10(sp)
8021da2c: 00 10        	addi	s0, sp, 0x20
8021da2e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021da32: 97 00 00 00  	auipc	ra, 0x0
8021da36: e7 80 40 0d  	jalr	0xd4(ra) <_ZN4core3ptr93drop_in_place$LT$spin..mutex..ticket..TicketMutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$17hc3ee9c3952043edeE>
8021da3a: e2 60        	ld	ra, 0x18(sp)
8021da3c: 42 64        	ld	s0, 0x10(sp)
8021da3e: 05 61        	addi	sp, sp, 0x20
8021da40: 82 80        	ret

000000008021da42 <_ZN4core3ptr80drop_in_place$LT$spin..mutex..MutexGuard$LT$easy_fs..efs..EasyFileSystem$GT$$GT$17hfe603344e41af1e9E>:
8021da42: 01 11        	addi	sp, sp, -0x20
8021da44: 06 ec        	sd	ra, 0x18(sp)
8021da46: 22 e8        	sd	s0, 0x10(sp)
8021da48: 00 10        	addi	s0, sp, 0x20
8021da4a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021da4e: 97 00 00 00  	auipc	ra, 0x0
8021da52: e7 80 60 0d  	jalr	0xd6(ra) <_ZN4core3ptr94drop_in_place$LT$spin..mutex..ticket..TicketMutexGuard$LT$easy_fs..efs..EasyFileSystem$GT$$GT$17ha955c017c0188f63E>
8021da56: e2 60        	ld	ra, 0x18(sp)
8021da58: 42 64        	ld	s0, 0x10(sp)
8021da5a: 05 61        	addi	sp, sp, 0x20
8021da5c: 82 80        	ret

000000008021da5e <_ZN4core3ptr83drop_in_place$LT$core..cell..UnsafeCell$LT$easy_fs..block_cache..BlockCache$GT$$GT$17h77368cdf4712d72aE>:
8021da5e: 01 11        	addi	sp, sp, -0x20
8021da60: 06 ec        	sd	ra, 0x18(sp)
8021da62: 22 e8        	sd	s0, 0x10(sp)
8021da64: 00 10        	addi	s0, sp, 0x20
8021da66: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021da6a: 97 00 00 00  	auipc	ra, 0x0
8021da6e: e7 80 80 ef  	jalr	-0x108(ra) <_ZN4core3ptr53drop_in_place$LT$easy_fs..block_cache..BlockCache$GT$17hbd42ccba63910ad8E>
8021da72: e2 60        	ld	ra, 0x18(sp)
8021da74: 42 64        	ld	s0, 0x10(sp)
8021da76: 05 61        	addi	sp, sp, 0x20
8021da78: 82 80        	ret

000000008021da7a <_ZN4core3ptr84drop_in_place$LT$alloc..sync..Arc$LT$dyn$u20$easy_fs..block_dev..BlockDevice$GT$$GT$17h88c9727042c9d2a2E>:
8021da7a: 01 11        	addi	sp, sp, -0x20
8021da7c: 06 ec        	sd	ra, 0x18(sp)
8021da7e: 22 e8        	sd	s0, 0x10(sp)
8021da80: 00 10        	addi	s0, sp, 0x20
8021da82: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021da86: 97 00 00 00  	auipc	ra, 0x0
8021da8a: e7 80 60 0d  	jalr	0xd6(ra) <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5d381d1dbb240b96E>
8021da8e: e2 60        	ld	ra, 0x18(sp)
8021da90: 42 64        	ld	s0, 0x10(sp)
8021da92: 05 61        	addi	sp, sp, 0x20
8021da94: 82 80        	ret

000000008021da96 <_ZN4core3ptr84drop_in_place$LT$spin..mutex..MutexGuard$LT$easy_fs..block_cache..BlockCache$GT$$GT$17h4f9fb5552b8aad55E>:
8021da96: 01 11        	addi	sp, sp, -0x20
8021da98: 06 ec        	sd	ra, 0x18(sp)
8021da9a: 22 e8        	sd	s0, 0x10(sp)
8021da9c: 00 10        	addi	s0, sp, 0x20
8021da9e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021daa2: 97 00 00 00  	auipc	ra, 0x0
8021daa6: e7 80 e0 09  	jalr	0x9e(ra) <_ZN4core3ptr98drop_in_place$LT$spin..mutex..ticket..TicketMutexGuard$LT$easy_fs..block_cache..BlockCache$GT$$GT$17ha867d893f0b23da3E>
8021daaa: e2 60        	ld	ra, 0x18(sp)
8021daac: 42 64        	ld	s0, 0x10(sp)
8021daae: 05 61        	addi	sp, sp, 0x20
8021dab0: 82 80        	ret

000000008021dab2 <_ZN4core3ptr86drop_in_place$LT$spin..mutex..Mutex$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$17h50c3f4d10c20787cE>:
8021dab2: 01 11        	addi	sp, sp, -0x20
8021dab4: 06 ec        	sd	ra, 0x18(sp)
8021dab6: 22 e8        	sd	s0, 0x10(sp)
8021dab8: 00 10        	addi	s0, sp, 0x20
8021daba: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021dabe: 97 00 00 00  	auipc	ra, 0x0
8021dac2: e7 80 20 c5  	jalr	-0x3ae(ra) <_ZN4core3ptr100drop_in_place$LT$spin..mutex..ticket..TicketMutex$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$17hbd94acd0ab5dd67fE>
8021dac6: e2 60        	ld	ra, 0x18(sp)
8021dac8: 42 64        	ld	s0, 0x10(sp)
8021daca: 05 61        	addi	sp, sp, 0x20
8021dacc: 82 80        	ret

000000008021dace <_ZN4core3ptr90drop_in_place$LT$core..cell..UnsafeCell$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$17he08f9f62438d5291E>:
8021dace: 01 11        	addi	sp, sp, -0x20
8021dad0: 06 ec        	sd	ra, 0x18(sp)
8021dad2: 22 e8        	sd	s0, 0x10(sp)
8021dad4: 00 10        	addi	s0, sp, 0x20
8021dad6: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021dada: 97 00 00 00  	auipc	ra, 0x0
8021dade: e7 80 40 f1  	jalr	-0xec(ra) <_ZN4core3ptr60drop_in_place$LT$easy_fs..block_cache..BlockCacheManager$GT$17h587e112caddf626eE>
8021dae2: e2 60        	ld	ra, 0x18(sp)
8021dae4: 42 64        	ld	s0, 0x10(sp)
8021dae6: 05 61        	addi	sp, sp, 0x20
8021dae8: 82 80        	ret

000000008021daea <_ZN4core3ptr91drop_in_place$LT$spin..mutex..MutexGuard$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$17h26a3efceaea5b625E>:
8021daea: 01 11        	addi	sp, sp, -0x20
8021daec: 06 ec        	sd	ra, 0x18(sp)
8021daee: 22 e8        	sd	s0, 0x10(sp)
8021daf0: 00 10        	addi	s0, sp, 0x20
8021daf2: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021daf6: 97 00 00 00  	auipc	ra, 0x0
8021dafa: e7 80 40 c5  	jalr	-0x3ac(ra) <_ZN4core3ptr105drop_in_place$LT$spin..mutex..ticket..TicketMutexGuard$LT$easy_fs..block_cache..BlockCacheManager$GT$$GT$17hea1c81a0c8d15892E>
8021dafe: e2 60        	ld	ra, 0x18(sp)
8021db00: 42 64        	ld	s0, 0x10(sp)
8021db02: 05 61        	addi	sp, sp, 0x20
8021db04: 82 80        	ret

000000008021db06 <_ZN4core3ptr93drop_in_place$LT$spin..mutex..ticket..TicketMutex$LT$easy_fs..block_cache..BlockCache$GT$$GT$17hc3ee9c3952043edeE>:
8021db06: 01 11        	addi	sp, sp, -0x20
8021db08: 06 ec        	sd	ra, 0x18(sp)
8021db0a: 22 e8        	sd	s0, 0x10(sp)
8021db0c: 00 10        	addi	s0, sp, 0x20
8021db0e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021db12: 41 05        	addi	a0, a0, 0x10
8021db14: 97 00 00 00  	auipc	ra, 0x0
8021db18: e7 80 a0 f4  	jalr	-0xb6(ra) <_ZN4core3ptr83drop_in_place$LT$core..cell..UnsafeCell$LT$easy_fs..block_cache..BlockCache$GT$$GT$17h77368cdf4712d72aE>
8021db1c: e2 60        	ld	ra, 0x18(sp)
8021db1e: 42 64        	ld	s0, 0x10(sp)
8021db20: 05 61        	addi	sp, sp, 0x20
8021db22: 82 80        	ret

000000008021db24 <_ZN4core3ptr94drop_in_place$LT$spin..mutex..ticket..TicketMutexGuard$LT$easy_fs..efs..EasyFileSystem$GT$$GT$17ha955c017c0188f63E>:
8021db24: 01 11        	addi	sp, sp, -0x20
8021db26: 06 ec        	sd	ra, 0x18(sp)
8021db28: 22 e8        	sd	s0, 0x10(sp)
8021db2a: 00 10        	addi	s0, sp, 0x20
8021db2c: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021db30: 97 00 00 00  	auipc	ra, 0x0
8021db34: e7 80 00 53  	jalr	0x530(ra) <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6a22a68013e1286E>
8021db38: e2 60        	ld	ra, 0x18(sp)
8021db3a: 42 64        	ld	s0, 0x10(sp)
8021db3c: 05 61        	addi	sp, sp, 0x20
8021db3e: 82 80        	ret

000000008021db40 <_ZN4core3ptr98drop_in_place$LT$spin..mutex..ticket..TicketMutexGuard$LT$easy_fs..block_cache..BlockCache$GT$$GT$17ha867d893f0b23da3E>:
8021db40: 01 11        	addi	sp, sp, -0x20
8021db42: 06 ec        	sd	ra, 0x18(sp)
8021db44: 22 e8        	sd	s0, 0x10(sp)
8021db46: 00 10        	addi	s0, sp, 0x20
8021db48: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021db4c: 97 00 00 00  	auipc	ra, 0x0
8021db50: e7 80 60 4b  	jalr	0x4b6(ra) <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h72bb1ab5464d74c9E>
8021db54: e2 60        	ld	ra, 0x18(sp)
8021db56: 42 64        	ld	s0, 0x10(sp)
8021db58: 05 61        	addi	sp, sp, 0x20
8021db5a: 82 80        	ret

000000008021db5c <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5d381d1dbb240b96E>:
;     fn drop(&mut self) {
8021db5c: 75 71        	addi	sp, sp, -0x90
8021db5e: 06 e5        	sd	ra, 0x88(sp)
8021db60: 22 e1        	sd	s0, 0x80(sp)
8021db62: 00 09        	addi	s0, sp, 0x90
8021db64: 2a 86        	mv	a2, a0
8021db66: 23 3c c4 f6  	sd	a2, -0x88(s0)
8021db6a: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
8021db6c: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021db70: a3 07 b4 f8  	sb	a1, -0x71(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8021db74: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021db78: 23 0f b4 f8  	sb	a1, -0x62(s0)
8021db7c: 09 45        	li	a0, 0x2
; pub fn fence(order: Ordering) {
8021db7e: a3 0f a4 f8  	sb	a0, -0x61(s0)
8021db82: 23 30 c4 fa  	sd	a2, -0x60(s0)
;         unsafe { self.ptr.as_ref() }
8021db86: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8021db8a: 08 62        	ld	a0, 0x0(a2)
8021db8c: 10 66        	ld	a2, 0x8(a2)
8021db8e: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021db92: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         self.pointer as *mut T
8021db96: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021db9a: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
8021db9e: 23 38 a4 fc  	sd	a0, -0x30(s0)
; atomic_int_ptr_sized! {
8021dba2: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8021dba6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021dbaa: 7d 56        	li	a2, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
8021dbac: 2f 35 c5 02  	amoadd.d.rl	a0, a2, (a0)
8021dbb0: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021dbb4: 03 35 84 fe  	ld	a0, -0x18(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
8021dbb8: 63 1c b5 00  	bne	a0, a1, 0x8021dbd0 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5d381d1dbb240b96E+0x74>
8021dbbc: 09 a0        	j	0x8021dbbe <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5d381d1dbb240b96E+0x62>
8021dbbe: 03 35 84 f7  	ld	a0, -0x88(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
8021dbc2: 0f 00 30 02  	fence	r, rw
;             self.drop_slow();
8021dbc6: 97 f0 ff ff  	auipc	ra, 0xfffff
8021dbca: e7 80 e0 3b  	jalr	0x3be(ra) <ekernel+0xffccff84>
8021dbce: 11 a0        	j	0x8021dbd2 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5d381d1dbb240b96E+0x76>
;     }
8021dbd0: 09 a0        	j	0x8021dbd2 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5d381d1dbb240b96E+0x76>
8021dbd2: aa 60        	ld	ra, 0x88(sp)
8021dbd4: 0a 64        	ld	s0, 0x80(sp)
;     }
8021dbd6: 49 61        	addi	sp, sp, 0x90
8021dbd8: 82 80        	ret

000000008021dbda <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd2b767724d4d29cE>:
;     fn drop(&mut self) {
8021dbda: 19 71        	addi	sp, sp, -0x80
8021dbdc: 86 fc        	sd	ra, 0x78(sp)
8021dbde: a2 f8        	sd	s0, 0x70(sp)
8021dbe0: 00 01        	addi	s0, sp, 0x80
8021dbe2: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021dbe6: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
8021dbe8: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021dbec: a3 0f b4 f8  	sb	a1, -0x61(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8021dbf0: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021dbf4: 23 07 b4 fa  	sb	a1, -0x52(s0)
8021dbf8: 09 46        	li	a2, 0x2
; pub fn fence(order: Ordering) {
8021dbfa: a3 07 c4 fa  	sb	a2, -0x51(s0)
8021dbfe: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         unsafe { self.ptr.as_ref() }
8021dc02: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8021dc06: 08 61        	ld	a0, 0x0(a0)
8021dc08: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.pointer as *mut T
8021dc0c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
8021dc10: 23 38 a4 fc  	sd	a0, -0x30(s0)
; atomic_int_ptr_sized! {
8021dc14: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8021dc18: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021dc1c: 7d 56        	li	a2, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
8021dc1e: 2f 35 c5 02  	amoadd.d.rl	a0, a2, (a0)
8021dc22: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021dc26: 03 35 84 fe  	ld	a0, -0x18(s0)
;         if self.inner().strong.fetch_sub(1, Release) != 1 {
8021dc2a: 63 1c b5 00  	bne	a0, a1, 0x8021dc42 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd2b767724d4d29cE+0x68>
8021dc2e: 09 a0        	j	0x8021dc30 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd2b767724d4d29cE+0x56>
8021dc30: 03 35 84 f8  	ld	a0, -0x78(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
8021dc34: 0f 00 30 02  	fence	r, rw
;             self.drop_slow();
8021dc38: 97 f0 ff ff  	auipc	ra, 0xfffff
8021dc3c: e7 80 80 30  	jalr	0x308(ra) <ekernel+0xffccff40>
8021dc40: 11 a0        	j	0x8021dc44 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd2b767724d4d29cE+0x6a>
;     }
8021dc42: 09 a0        	j	0x8021dc44 <_ZN71_$LT$alloc..sync..Arc$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcd2b767724d4d29cE+0x6a>
8021dc44: e6 70        	ld	ra, 0x78(sp)
8021dc46: 46 74        	ld	s0, 0x70(sp)
;     }
8021dc48: 09 61        	addi	sp, sp, 0x80
8021dc4a: 82 80        	ret

000000008021dc4c <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E>:
;     fn drop(&mut self) {
8021dc4c: 49 71        	addi	sp, sp, -0x170
8021dc4e: 86 f6        	sd	ra, 0x168(sp)
8021dc50: a2 f2        	sd	s0, 0x160(sp)
8021dc52: 80 1a        	addi	s0, sp, 0x170
8021dc54: aa 85        	mv	a1, a0
8021dc56: 23 38 b4 ec  	sd	a1, -0x130(s0)
8021dc5a: 05 45        	li	a0, 0x1
; atomic_int_ptr_sized! {
8021dc5c: 23 30 a4 ee  	sd	a0, -0x120(s0)
8021dc60: a3 07 a4 ee  	sb	a0, -0x111(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8021dc64: 23 38 a4 ee  	sd	a0, -0x110(s0)
8021dc68: 23 0f a4 ee  	sb	a0, -0x102(s0)
8021dc6c: 09 45        	li	a0, 0x2
; pub fn fence(order: Ordering) {
8021dc6e: a3 0f a4 ee  	sb	a0, -0x101(s0)
8021dc72: 23 3c b4 f2  	sd	a1, -0xc8(s0)
;         let ptr = self.ptr.as_ptr();
8021dc76: 88 61        	ld	a0, 0x0(a1)
8021dc78: 23 3c a4 ec  	sd	a0, -0x128(s0)
8021dc7c: 8c 65        	ld	a1, 0x8(a1)
8021dc7e: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8021dc82: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;         self.pointer as *mut T
8021dc86: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021dc8a: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021dc8e: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021dc92: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         self as _
8021dc96: 23 38 a4 f6  	sd	a0, -0x90(s0)
8021dc9a: fd 55        	li	a1, -0x1
;         if is_dangling(ptr) {
8021dc9c: 63 0a b5 04  	beq	a0, a1, 0x8021dcf0 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0xa4>
8021dca0: 09 a0        	j	0x8021dca2 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0x56>
8021dca2: 03 35 84 ed  	ld	a0, -0x128(s0)
;             Some(unsafe { WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak } })
8021dca6: 93 05 85 00  	addi	a1, a0, 0x8
8021dcaa: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8021dcae: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8021dcb2: 83 35 84 f2  	ld	a1, -0xd8(s0)
8021dcb6: 03 35 04 f3  	ld	a0, -0xd0(s0)
8021dcba: 23 30 b4 f0  	sd	a1, -0x100(s0)
8021dcbe: 23 34 a4 f0  	sd	a0, -0xf8(s0)
;         let inner = if let Some(inner) = self.inner() { inner } else { return };
8021dcc2: 03 35 04 f0  	ld	a0, -0x100(s0)
8021dcc6: 23 3c a4 f6  	sd	a0, -0x88(s0)
8021dcca: 83 35 84 f0  	ld	a1, -0xf8(s0)
8021dcce: 23 30 b4 f8  	sd	a1, -0x80(s0)
; atomic_int_ptr_sized! {
8021dcd2: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8021dcd6: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021dcda: fd 55        	li	a1, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
8021dcdc: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
8021dce0: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021dce4: 03 35 84 f9  	ld	a0, -0x68(s0)
8021dce8: 85 45        	li	a1, 0x1
;         if inner.weak.fetch_sub(1, Release) == 1 {
8021dcea: 63 04 b5 00  	beq	a0, a1, 0x8021dcf2 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0xa6>
8021dcee: c1 a8        	j	0x8021ddbe <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0x172>
;     }
8021dcf0: c9 a8        	j	0x8021ddc2 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0x176>
8021dcf2: 03 35 04 ed  	ld	a0, -0x130(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
8021dcf6: 0f 00 30 02  	fence	r, rw
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
8021dcfa: 93 05 05 01  	addi	a1, a0, 0x10
8021dcfe: 23 34 b4 ea  	sd	a1, -0x158(s0)
8021dd02: 0c 61        	ld	a1, 0x0(a0)
8021dd04: 10 65        	ld	a2, 0x8(a0)
8021dd06: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021dd0a: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8021dd0e: 23 38 b4 f0  	sd	a1, -0xf0(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
8021dd12: 0c 61        	ld	a1, 0x0(a0)
8021dd14: 08 65        	ld	a0, 0x8(a0)
8021dd16: 23 38 a4 ea  	sd	a0, -0x150(s0)
8021dd1a: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021dd1e: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         self.pointer as *mut T
8021dd22: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021dd26: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     unsafe { intrinsics::size_of_val(val) }
8021dd2a: 0c 65        	ld	a1, 0x8(a0)
8021dd2c: 23 3c b4 ea  	sd	a1, -0x148(s0)
8021dd30: 08 69        	ld	a0, 0x10(a0)
8021dd32: a1 45        	li	a1, 0x8
8021dd34: 23 30 b4 ec  	sd	a1, -0x140(s0)
8021dd38: 2a 86        	mv	a2, a0
8021dd3a: 23 34 c4 ec  	sd	a2, -0x138(s0)
8021dd3e: 63 76 b5 00  	bgeu	a0, a1, 0x8021dd4a <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0xfe>
8021dd42: 03 35 04 ec  	ld	a0, -0x140(s0)
8021dd46: 23 34 a4 ec  	sd	a0, -0x138(s0)
8021dd4a: 83 35 04 ec  	ld	a1, -0x140(s0)
8021dd4e: 03 35 04 eb  	ld	a0, -0x150(s0)
8021dd52: 03 36 84 eb  	ld	a2, -0x148(s0)
8021dd56: 03 37 84 ec  	ld	a4, -0x138(s0)
;     unsafe { intrinsics::size_of_val(val) }
8021dd5a: 3a 96        	add	a2, a2, a4
8021dd5c: 3d 06        	addi	a2, a2, 0xf
8021dd5e: 81 46        	li	a3, 0x0
8021dd60: 99 8e        	sub	a3, a3, a4
8021dd62: 75 8e        	and	a2, a2, a3
8021dd64: 23 38 c4 fc  	sd	a2, -0x30(s0)
8021dd68: 03 36 04 fd  	ld	a2, -0x30(s0)
8021dd6c: 23 3c c4 e8  	sd	a2, -0x168(s0)
8021dd70: 23 3c c4 fc  	sd	a2, -0x28(s0)
;     unsafe { intrinsics::min_align_of_val(val) }
8021dd74: 08 69        	ld	a0, 0x10(a0)
8021dd76: 2a 86        	mv	a2, a0
8021dd78: 23 30 c4 ea  	sd	a2, -0x160(s0)
8021dd7c: 63 76 b5 00  	bgeu	a0, a1, 0x8021dd88 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0x13c>
8021dd80: 03 35 04 ec  	ld	a0, -0x140(s0)
8021dd84: 23 30 a4 ea  	sd	a0, -0x160(s0)
8021dd88: 03 35 84 ea  	ld	a0, -0x158(s0)
8021dd8c: 03 36 84 e9  	ld	a2, -0x168(s0)
8021dd90: 83 35 04 ea  	ld	a1, -0x160(s0)
;     unsafe { intrinsics::min_align_of_val(val) }
8021dd94: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021dd98: 83 35 04 fe  	ld	a1, -0x20(s0)
8021dd9c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
8021dda0: 23 30 c4 f2  	sd	a2, -0xe0(s0)
8021dda4: 23 3c b4 f0  	sd	a1, -0xe8(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
8021dda8: 83 35 04 f1  	ld	a1, -0xf0(s0)
8021ddac: 03 36 84 f1  	ld	a2, -0xe8(s0)
8021ddb0: 83 36 04 f2  	ld	a3, -0xe0(s0)
8021ddb4: 97 d0 00 00  	auipc	ra, 0xd
8021ddb8: e7 80 60 88  	jalr	-0x77a(ra) <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9108b7cd150cf04bE>
;         if inner.weak.fetch_sub(1, Release) == 1 {
8021ddbc: 11 a0        	j	0x8021ddc0 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0x174>
8021ddbe: 09 a0        	j	0x8021ddc0 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0x174>
;     }
8021ddc0: 09 a0        	j	0x8021ddc2 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1f8392803c85a077E+0x176>
8021ddc2: b6 70        	ld	ra, 0x168(sp)
8021ddc4: 16 74        	ld	s0, 0x160(sp)
;     }
8021ddc6: 75 61        	addi	sp, sp, 0x170
8021ddc8: 82 80        	ret

000000008021ddca <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E>:
;     fn drop(&mut self) {
8021ddca: 11 71        	addi	sp, sp, -0x100
8021ddcc: 86 fd        	sd	ra, 0xf8(sp)
8021ddce: a2 f9        	sd	s0, 0xf0(sp)
8021ddd0: 00 02        	addi	s0, sp, 0x100
8021ddd2: 23 30 a4 f0  	sd	a0, -0x100(s0)
8021ddd6: 85 45        	li	a1, 0x1
; atomic_int_ptr_sized! {
8021ddd8: 23 38 b4 f0  	sd	a1, -0xf0(s0)
8021dddc: a3 0f b4 f0  	sb	a1, -0xe1(s0)
; unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
8021dde0: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8021dde4: 23 07 b4 f2  	sb	a1, -0xd2(s0)
8021dde8: 89 45        	li	a1, 0x2
; pub fn fence(order: Ordering) {
8021ddea: a3 07 b4 f2  	sb	a1, -0xd1(s0)
8021ddee: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         let ptr = self.ptr.as_ptr();
8021ddf2: 08 61        	ld	a0, 0x0(a0)
8021ddf4: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8021ddf8: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         self.pointer as *mut T
8021ddfc: 23 3c a4 f6  	sd	a0, -0x88(s0)
8021de00: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self as _
8021de04: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021de08: fd 55        	li	a1, -0x1
;         if is_dangling(ptr) {
8021de0a: 63 0a b5 04  	beq	a0, a1, 0x8021de5e <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E+0x94>
8021de0e: 09 a0        	j	0x8021de10 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E+0x46>
8021de10: 03 35 84 f0  	ld	a0, -0xf8(s0)
;             Some(unsafe { WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak } })
8021de14: 93 05 85 00  	addi	a1, a0, 0x8
8021de18: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021de1c: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021de20: 83 35 84 f5  	ld	a1, -0xa8(s0)
8021de24: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021de28: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8021de2c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         let inner = if let Some(inner) = self.inner() { inner } else { return };
8021de30: 03 35 04 f3  	ld	a0, -0xd0(s0)
8021de34: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021de38: 83 35 84 f3  	ld	a1, -0xc8(s0)
8021de3c: 23 3c b4 f8  	sd	a1, -0x68(s0)
; atomic_int_ptr_sized! {
8021de40: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8021de44: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021de48: fd 55        	li	a1, -0x1
;             Release => intrinsics::atomic_xsub_release(dst, val),
8021de4a: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
8021de4e: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021de52: 03 35 04 fb  	ld	a0, -0x50(s0)
8021de56: 85 45        	li	a1, 0x1
;         if inner.weak.fetch_sub(1, Release) == 1 {
8021de58: 63 04 b5 00  	beq	a0, a1, 0x8021de60 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E+0x96>
8021de5c: 85 a0        	j	0x8021debc <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E+0xf2>
;     }
8021de5e: 8d a0        	j	0x8021dec0 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E+0xf6>
8021de60: 83 35 04 f0  	ld	a1, -0x100(s0)
;             Acquire => intrinsics::atomic_fence_acquire(),
8021de64: 0f 00 30 02  	fence	r, rw
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
8021de68: 13 85 85 00  	addi	a0, a1, 0x8
8021de6c: 90 61        	ld	a2, 0x0(a1)
8021de6e: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8021de72: 23 30 c4 f4  	sd	a2, -0xc0(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
8021de76: 8c 61        	ld	a1, 0x0(a1)
8021de78: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self.pointer as *mut T
8021de7c: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021de80: 93 05 00 24  	li	a1, 0x240
;     unsafe { intrinsics::size_of_val(val) }
8021de84: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021de88: 03 36 04 fd  	ld	a2, -0x30(s0)
8021de8c: 23 3c c4 fc  	sd	a2, -0x28(s0)
8021de90: a1 45        	li	a1, 0x8
;     unsafe { intrinsics::min_align_of_val(val) }
8021de92: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021de96: 83 35 04 fe  	ld	a1, -0x20(s0)
8021de9a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
8021de9e: 23 38 c4 f4  	sd	a2, -0xb0(s0)
8021dea2: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;                 self.alloc.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()))
8021dea6: 83 35 04 f4  	ld	a1, -0xc0(s0)
8021deaa: 03 36 84 f4  	ld	a2, -0xb8(s0)
8021deae: 83 36 04 f5  	ld	a3, -0xb0(s0)
8021deb2: 97 c0 00 00  	auipc	ra, 0xc
8021deb6: e7 80 80 78  	jalr	0x788(ra) <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9108b7cd150cf04bE>
;         if inner.weak.fetch_sub(1, Release) == 1 {
8021deba: 11 a0        	j	0x8021debe <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E+0xf4>
8021debc: 09 a0        	j	0x8021debe <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E+0xf4>
;     }
8021debe: 09 a0        	j	0x8021dec0 <_ZN72_$LT$alloc..sync..Weak$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h4ae54f8123da1019E+0xf6>
8021dec0: ee 70        	ld	ra, 0xf8(sp)
8021dec2: 4e 74        	ld	s0, 0xf0(sp)
;     }
8021dec4: 11 61        	addi	sp, sp, 0x100
8021dec6: 82 80        	ret

000000008021dec8 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h999745cbf8acbfb5E>:
;     fn drop(&mut self) {
8021dec8: 5d 71        	addi	sp, sp, -0x50
8021deca: 86 e4        	sd	ra, 0x48(sp)
8021decc: a2 e0        	sd	s0, 0x40(sp)
8021dece: 80 08        	addi	s0, sp, 0x50
8021ded0: aa 85        	mv	a1, a0
8021ded2: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021ded6: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021deda: 13 05 84 fb  	addi	a0, s0, -0x48
;         if let Some((ptr, layout)) = self.current_memory() {
8021dede: 97 c0 00 00  	auipc	ra, 0xc
8021dee2: e7 80 80 96  	jalr	-0x698(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39270d9b7b8fe0afE>
8021dee6: 03 35 04 fc  	ld	a0, -0x40(s0)
8021deea: 15 c5        	beqz	a0, 0x8021df16 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h999745cbf8acbfb5E+0x4e>
8021deec: 09 a0        	j	0x8021deee <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h999745cbf8acbfb5E+0x26>
8021deee: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if let Some((ptr, layout)) = self.current_memory() {
8021def2: 83 35 84 fb  	ld	a1, -0x48(s0)
8021def6: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021defa: 03 36 04 fc  	ld	a2, -0x40(s0)
8021defe: 83 36 84 fc  	ld	a3, -0x38(s0)
8021df02: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021df06: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) }
8021df0a: 41 05        	addi	a0, a0, 0x10
8021df0c: 97 50 00 00  	auipc	ra, 0x5
8021df10: e7 80 80 10  	jalr	0x108(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h43388a5d844d0145E>
;         if let Some((ptr, layout)) = self.current_memory() {
8021df14: 09 a0        	j	0x8021df16 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h999745cbf8acbfb5E+0x4e>
8021df16: a6 60        	ld	ra, 0x48(sp)
8021df18: 06 64        	ld	s0, 0x40(sp)
;     }
8021df1a: 61 61        	addi	sp, sp, 0x50
8021df1c: 82 80        	ret

000000008021df1e <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf5b8c792efadec5aE>:
;     fn drop(&mut self) {
8021df1e: 5d 71        	addi	sp, sp, -0x50
8021df20: 86 e4        	sd	ra, 0x48(sp)
8021df22: a2 e0        	sd	s0, 0x40(sp)
8021df24: 80 08        	addi	s0, sp, 0x50
8021df26: aa 85        	mv	a1, a0
8021df28: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021df2c: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021df30: 13 05 84 fb  	addi	a0, s0, -0x48
;         if let Some((ptr, layout)) = self.current_memory() {
8021df34: 97 c0 00 00  	auipc	ra, 0xc
8021df38: e7 80 20 9a  	jalr	-0x65e(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h4345be8b0b7a6253E>
8021df3c: 03 35 04 fc  	ld	a0, -0x40(s0)
8021df40: 15 c5        	beqz	a0, 0x8021df6c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf5b8c792efadec5aE+0x4e>
8021df42: 09 a0        	j	0x8021df44 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf5b8c792efadec5aE+0x26>
8021df44: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if let Some((ptr, layout)) = self.current_memory() {
8021df48: 83 35 84 fb  	ld	a1, -0x48(s0)
8021df4c: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021df50: 03 36 04 fc  	ld	a2, -0x40(s0)
8021df54: 83 36 84 fc  	ld	a3, -0x38(s0)
8021df58: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021df5c: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             unsafe { self.alloc.deallocate(ptr, layout) }
8021df60: 41 05        	addi	a0, a0, 0x10
8021df62: 97 50 00 00  	auipc	ra, 0x5
8021df66: e7 80 20 0b  	jalr	0xb2(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h43388a5d844d0145E>
;         if let Some((ptr, layout)) = self.current_memory() {
8021df6a: 09 a0        	j	0x8021df6c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf5b8c792efadec5aE+0x4e>
8021df6c: a6 60        	ld	ra, 0x48(sp)
8021df6e: 06 64        	ld	s0, 0x40(sp)
;     }
8021df70: 61 61        	addi	sp, sp, 0x50
8021df72: 82 80        	ret

000000008021df74 <_ZN86_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h45f4d36e2855c982E>:
;     fn drop(&mut self) {
8021df74: 01 11        	addi	sp, sp, -0x20
8021df76: 06 ec        	sd	ra, 0x18(sp)
8021df78: 22 e8        	sd	s0, 0x10(sp)
8021df7a: 00 10        	addi	s0, sp, 0x20
8021df7c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         let guard = DropGuard(self);
8021df80: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             ptr::drop_in_place(guard.0.as_raw_mut_slice());
8021df84: 03 35 04 fe  	ld	a0, -0x20(s0)
8021df88: 97 90 00 00  	auipc	ra, 0x9
8021df8c: e7 80 60 58  	jalr	0x586(ra) <_ZN5alloc3vec9into_iter21IntoIter$LT$T$C$A$GT$16as_raw_mut_slice17h28b0f4ffa9056ba3E>
8021df90: 13 05 04 fe  	addi	a0, s0, -0x20
;     }
8021df94: 97 00 00 00  	auipc	ra, 0x0
8021df98: e7 80 60 8c  	jalr	-0x73a(ra) <_ZN4core3ptr157drop_in_place$LT$$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$u32$C$alloc..alloc..Global$GT$$GT$17hf982334735389aebE>
8021df9c: e2 60        	ld	ra, 0x18(sp)
8021df9e: 42 64        	ld	s0, 0x10(sp)
8021dfa0: 05 61        	addi	sp, sp, 0x20
8021dfa2: 82 80        	ret

000000008021dfa4 <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h602a66bdeaa1211fE>:
;     fn drop(&mut self) {
8021dfa4: 39 71        	addi	sp, sp, -0x40
8021dfa6: 06 fc        	sd	ra, 0x38(sp)
8021dfa8: 22 f8        	sd	s0, 0x30(sp)
8021dfaa: 80 00        	addi	s0, sp, 0x40
8021dfac: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021dfb0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let new_ticket = self.ticket + 1;
8021dfb4: 08 69        	ld	a0, 0x10(a0)
8021dfb6: 05 05        	addi	a0, a0, 0x1
8021dfb8: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021dfbc: 15 c5        	beqz	a0, 0x8021dfe8 <.Lpcrel_hi0>
8021dfbe: 09 a0        	j	0x8021dfc0 <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h602a66bdeaa1211fE+0x1c>
8021dfc0: 83 35 04 fd  	ld	a1, -0x30(s0)
8021dfc4: 03 35 84 fc  	ld	a0, -0x38(s0)
;         let new_ticket = self.ticket + 1;
8021dfc8: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.next_serving.store(new_ticket, Ordering::Release);
8021dfcc: 08 61        	ld	a0, 0x0(a0)
8021dfce: 05 46        	li	a2, 0x1
8021dfd0: a3 0f c4 fc  	sb	a2, -0x21(s0)
8021dfd4: 03 46 f4 fd  	lbu	a2, -0x21(s0)
8021dfd8: 97 10 00 00  	auipc	ra, 0x1
8021dfdc: e7 80 60 1a  	jalr	0x1a6(ra) <_ZN4core4sync6atomic11AtomicUsize5store17h76998bf2a243cf56E>
8021dfe0: e2 70        	ld	ra, 0x38(sp)
8021dfe2: 42 74        	ld	s0, 0x30(sp)
;     }
8021dfe4: 21 61        	addi	sp, sp, 0x40
8021dfe6: 82 80        	ret

000000008021dfe8 <.Lpcrel_hi0>:
;         let new_ticket = self.ticket + 1;
8021dfe8: 17 a5 01 00  	auipc	a0, 0x1a
8021dfec: 13 05 85 2f  	addi	a0, a0, 0x2f8

000000008021dff0 <.Lpcrel_hi1>:
8021dff0: 97 a5 01 00  	auipc	a1, 0x1a
8021dff4: 13 86 05 2d  	addi	a2, a1, 0x2d0
8021dff8: f1 45        	li	a1, 0x1c
8021dffa: 97 20 01 00  	auipc	ra, 0x12
8021dffe: e7 80 e0 21  	jalr	0x21e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021e002 <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h72bb1ab5464d74c9E>:
;     fn drop(&mut self) {
8021e002: 39 71        	addi	sp, sp, -0x40
8021e004: 06 fc        	sd	ra, 0x38(sp)
8021e006: 22 f8        	sd	s0, 0x30(sp)
8021e008: 80 00        	addi	s0, sp, 0x40
8021e00a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021e00e: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let new_ticket = self.ticket + 1;
8021e012: 08 69        	ld	a0, 0x10(a0)
8021e014: 05 05        	addi	a0, a0, 0x1
8021e016: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021e01a: 15 c5        	beqz	a0, 0x8021e046 <.Lpcrel_hi2>
8021e01c: 09 a0        	j	0x8021e01e <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h72bb1ab5464d74c9E+0x1c>
8021e01e: 83 35 04 fd  	ld	a1, -0x30(s0)
8021e022: 03 35 84 fc  	ld	a0, -0x38(s0)
;         let new_ticket = self.ticket + 1;
8021e026: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.next_serving.store(new_ticket, Ordering::Release);
8021e02a: 08 61        	ld	a0, 0x0(a0)
8021e02c: 05 46        	li	a2, 0x1
8021e02e: a3 0f c4 fc  	sb	a2, -0x21(s0)
8021e032: 03 46 f4 fd  	lbu	a2, -0x21(s0)
8021e036: 97 10 00 00  	auipc	ra, 0x1
8021e03a: e7 80 80 14  	jalr	0x148(ra) <_ZN4core4sync6atomic11AtomicUsize5store17h76998bf2a243cf56E>
8021e03e: e2 70        	ld	ra, 0x38(sp)
8021e040: 42 74        	ld	s0, 0x30(sp)
;     }
8021e042: 21 61        	addi	sp, sp, 0x40
8021e044: 82 80        	ret

000000008021e046 <.Lpcrel_hi2>:
;         let new_ticket = self.ticket + 1;
8021e046: 17 a5 01 00  	auipc	a0, 0x1a
8021e04a: 13 05 a5 29  	addi	a0, a0, 0x29a

000000008021e04e <.Lpcrel_hi3>:
8021e04e: 97 a5 01 00  	auipc	a1, 0x1a
8021e052: 13 86 25 27  	addi	a2, a1, 0x272
8021e056: f1 45        	li	a1, 0x1c
8021e058: 97 20 01 00  	auipc	ra, 0x12
8021e05c: e7 80 00 1c  	jalr	0x1c0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021e060 <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6a22a68013e1286E>:
;     fn drop(&mut self) {
8021e060: 39 71        	addi	sp, sp, -0x40
8021e062: 06 fc        	sd	ra, 0x38(sp)
8021e064: 22 f8        	sd	s0, 0x30(sp)
8021e066: 80 00        	addi	s0, sp, 0x40
8021e068: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021e06c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let new_ticket = self.ticket + 1;
8021e070: 08 69        	ld	a0, 0x10(a0)
8021e072: 05 05        	addi	a0, a0, 0x1
8021e074: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021e078: 15 c5        	beqz	a0, 0x8021e0a4 <.Lpcrel_hi4>
8021e07a: 09 a0        	j	0x8021e07c <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6a22a68013e1286E+0x1c>
8021e07c: 83 35 04 fd  	ld	a1, -0x30(s0)
8021e080: 03 35 84 fc  	ld	a0, -0x38(s0)
;         let new_ticket = self.ticket + 1;
8021e084: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.next_serving.store(new_ticket, Ordering::Release);
8021e088: 08 61        	ld	a0, 0x0(a0)
8021e08a: 05 46        	li	a2, 0x1
8021e08c: a3 0f c4 fc  	sb	a2, -0x21(s0)
8021e090: 03 46 f4 fd  	lbu	a2, -0x21(s0)
8021e094: 97 10 00 00  	auipc	ra, 0x1
8021e098: e7 80 a0 0e  	jalr	0xea(ra) <_ZN4core4sync6atomic11AtomicUsize5store17h76998bf2a243cf56E>
8021e09c: e2 70        	ld	ra, 0x38(sp)
8021e09e: 42 74        	ld	s0, 0x30(sp)
;     }
8021e0a0: 21 61        	addi	sp, sp, 0x40
8021e0a2: 82 80        	ret

000000008021e0a4 <.Lpcrel_hi4>:
;         let new_ticket = self.ticket + 1;
8021e0a4: 17 a5 01 00  	auipc	a0, 0x1a
8021e0a8: 13 05 c5 23  	addi	a0, a0, 0x23c

000000008021e0ac <.Lpcrel_hi5>:
8021e0ac: 97 a5 01 00  	auipc	a1, 0x1a
8021e0b0: 13 86 45 21  	addi	a2, a1, 0x214
8021e0b4: f1 45        	li	a1, 0x1c
8021e0b6: 97 20 01 00  	auipc	ra, 0x12
8021e0ba: e7 80 20 16  	jalr	0x162(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021e0be <_ZN94_$LT$alloc..collections..vec_deque..VecDeque$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h469ba0dd83180719E>:
;     fn drop(&mut self) {
8021e0be: 59 71        	addi	sp, sp, -0x70
8021e0c0: 86 f4        	sd	ra, 0x68(sp)
8021e0c2: a2 f0        	sd	s0, 0x60(sp)
8021e0c4: 80 18        	addi	s0, sp, 0x70
8021e0c6: aa 85        	mv	a1, a0
8021e0c8: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021e0cc: 13 05 84 f9  	addi	a0, s0, -0x68
;         let (front, back) = self.as_mut_slices();
8021e0d0: 97 90 00 00  	auipc	ra, 0x9
8021e0d4: e7 80 20 86  	jalr	-0x79e(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$13as_mut_slices17h1cdf3d654deaddb5E>
8021e0d8: 03 35 84 f9  	ld	a0, -0x68(s0)
8021e0dc: 83 35 04 fa  	ld	a1, -0x60(s0)
8021e0e0: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021e0e4: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021e0e8: 83 36 84 fa  	ld	a3, -0x58(s0)
8021e0ec: 03 36 04 fb  	ld	a2, -0x50(s0)
8021e0f0: 23 30 d4 fe  	sd	a3, -0x20(s0)
8021e0f4: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             let _back_dropper = Dropper(back);
8021e0f8: 23 3c d4 fa  	sd	a3, -0x48(s0)
8021e0fc: 23 30 c4 fc  	sd	a2, -0x40(s0)
;             ptr::drop_in_place(front);
8021e100: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e104: e7 80 e0 6c  	jalr	0x6ce(ra) <ekernel+0xffcd07ce>
8021e108: 13 05 84 fb  	addi	a0, s0, -0x48
;         }
8021e10c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e110: e7 80 20 7b  	jalr	0x7b2(ra) <ekernel+0xffcd08be>
8021e114: a6 70        	ld	ra, 0x68(sp)
8021e116: 06 74        	ld	s0, 0x60(sp)
;     }
8021e118: 65 61        	addi	sp, sp, 0x70
8021e11a: 82 80        	ret

000000008021e11c <_ZN98_$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h378a556cc5b23d07E>:
;     fn drop(&mut self) {
8021e11c: 71 71        	addi	sp, sp, -0xb0
8021e11e: 06 f5        	sd	ra, 0xa8(sp)
8021e120: 22 f1        	sd	s0, 0xa0(sp)
8021e122: 00 19        	addi	s0, sp, 0xb0
8021e124: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         let guard = DropGuard(self);
8021e128: 23 34 a4 f6  	sd	a0, -0x98(s0)
8021e12c: 05 45        	li	a0, 0x1
;     intrinsics::needs_drop::<T>()
8021e12e: a3 0f a4 fa  	sb	a0, -0x41(s0)
8021e132: 03 45 f4 fb  	lbu	a0, -0x41(s0)
8021e136: 05 89        	andi	a0, a0, 0x1
;         if mem::needs_drop::<T>() && guard.0.remaining != 0 {
8021e138: 01 ed        	bnez	a0, 0x8021e150 <_ZN98_$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h378a556cc5b23d07E+0x34>
8021e13a: 09 a0        	j	0x8021e13c <_ZN98_$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h378a556cc5b23d07E+0x20>
8021e13c: 13 05 84 f6  	addi	a0, s0, -0x98
;     }
8021e140: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e144: e7 80 a0 79  	jalr	0x79a(ra) <ekernel+0xffcd08da>
8021e148: aa 70        	ld	ra, 0xa8(sp)
8021e14a: 0a 74        	ld	s0, 0xa0(sp)
8021e14c: 4d 61        	addi	sp, sp, 0xb0
8021e14e: 82 80        	ret
;         if mem::needs_drop::<T>() && guard.0.remaining != 0 {
8021e150: 03 35 84 f6  	ld	a0, -0x98(s0)
8021e154: 08 71        	ld	a0, 0x20(a0)
8021e156: 19 e1        	bnez	a0, 0x8021e15c <_ZN98_$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h378a556cc5b23d07E+0x40>
8021e158: 09 a0        	j	0x8021e15a <_ZN98_$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h378a556cc5b23d07E+0x3e>
; //!An easy file system isolated from the kernel
8021e15a: cd b7        	j	0x8021e13c <_ZN98_$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h378a556cc5b23d07E+0x20>
;                 let (front, back) = guard.0.as_slices();
8021e15c: 83 35 84 f6  	ld	a1, -0x98(s0)
8021e160: 13 05 04 f7  	addi	a0, s0, -0x90
8021e164: 97 b0 00 00  	auipc	ra, 0xb
8021e168: e7 80 60 de  	jalr	-0x21a(ra) <_ZN5alloc11collections9vec_deque5drain18Drain$LT$T$C$A$GT$9as_slices17hdfbe3337fa87da8cE>
8021e16c: 03 35 04 f7  	ld	a0, -0x90(s0)
8021e170: 83 35 84 f7  	ld	a1, -0x88(s0)
8021e174: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021e178: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021e17c: 83 36 04 f8  	ld	a3, -0x80(s0)
8021e180: 23 3c d4 f4  	sd	a3, -0xa8(s0)
8021e184: 03 36 84 f8  	ld	a2, -0x78(s0)
8021e188: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8021e18c: 23 38 d4 fc  	sd	a3, -0x30(s0)
8021e190: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         metadata(self)
8021e194: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021e198: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8021e19c: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021e1a0: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021e1a4: 03 37 84 f9  	ld	a4, -0x68(s0)
;                 guard.0.idx += front.len();
8021e1a8: 83 36 84 f6  	ld	a3, -0x98(s0)
8021e1ac: 90 6a        	ld	a2, 0x10(a3)
8021e1ae: 3a 96        	add	a2, a2, a4
8021e1b0: 90 ea        	sd	a2, 0x10(a3)
;     unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8021e1b2: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021e1b6: 23 34 b4 fa  	sd	a1, -0x58(s0)
8021e1ba: 03 37 84 fa  	ld	a4, -0x58(s0)
;                 guard.0.remaining -= front.len();
8021e1be: 83 36 84 f6  	ld	a3, -0x98(s0)
8021e1c2: 90 72        	ld	a2, 0x20(a3)
8021e1c4: 19 8e        	sub	a2, a2, a4
8021e1c6: 90 f2        	sd	a2, 0x20(a3)
;                 ptr::drop_in_place(front);
8021e1c8: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e1cc: e7 80 60 60  	jalr	0x606(ra) <ekernel+0xffcd07ce>
8021e1d0: 03 35 84 f5  	ld	a0, -0xa8(s0)
8021e1d4: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                 guard.0.remaining = 0;
8021e1d8: 83 36 84 f6  	ld	a3, -0x98(s0)
8021e1dc: 01 46        	li	a2, 0x0
8021e1de: 90 f2        	sd	a2, 0x20(a3)
;                 ptr::drop_in_place(back);
8021e1e0: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e1e4: e7 80 e0 5e  	jalr	0x5ee(ra) <ekernel+0xffcd07ce>
8021e1e8: 91 bf        	j	0x8021e13c <_ZN98_$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h378a556cc5b23d07E+0x20>

000000008021e1ea <_ZN74_$LT$easy_fs..block_cache..BlockCache$u20$as$u20$core..ops..drop..Drop$GT$4drop17h69700456cf0ea1c1E>:
;     fn drop(&mut self) {
8021e1ea: 01 11        	addi	sp, sp, -0x20
8021e1ec: 06 ec        	sd	ra, 0x18(sp)
8021e1ee: 22 e8        	sd	s0, 0x10(sp)
8021e1f0: 00 10        	addi	s0, sp, 0x20
8021e1f2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.sync()
8021e1f6: 97 70 00 00  	auipc	ra, 0x7
8021e1fa: e7 80 e0 7f  	jalr	0x7fe(ra) <_ZN7easy_fs11block_cache10BlockCache4sync17hebb1d09628b89c36E>
8021e1fe: e2 60        	ld	ra, 0x18(sp)
8021e200: 42 64        	ld	s0, 0x10(sp)
;     }
8021e202: 05 61        	addi	sp, sp, 0x20
8021e204: 82 80        	ret

000000008021e206 <_ZN7easy_fs3vfs5Inode15read_disk_inode17h3d58310953030ce0E>:
;     fn read_disk_inode<V>(&self, f: impl FnOnce(&DiskInode) -> V) -> V {
8021e206: 31 71        	addi	sp, sp, -0xc0
8021e208: 06 fd        	sd	ra, 0xb8(sp)
8021e20a: 22 f9        	sd	s0, 0xb0(sp)
8021e20c: 80 01        	addi	s0, sp, 0xc0
8021e20e: 23 34 c4 f4  	sd	a2, -0xb8(s0)
8021e212: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8021e216: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8021e21a: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021e21e: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e222: 88 6d        	ld	a0, 0x18(a1)
8021e224: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021e228: 13 85 85 00  	addi	a0, a1, 0x8
8021e22c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e230: e7 80 40 eb  	jalr	-0x14c(ra) <ekernel+0xffcd00e0>
8021e234: 2a 86        	mv	a2, a0
8021e236: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021e23a: 23 34 c4 f6  	sd	a2, -0x98(s0)
8021e23e: 2e 86        	mv	a2, a1
8021e240: 83 35 84 f6  	ld	a1, -0x98(s0)
8021e244: 97 80 00 00  	auipc	ra, 0x8
8021e248: e7 80 00 bc  	jalr	-0x440(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8021e24c: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021e250: 13 05 84 f9  	addi	a0, s0, -0x68
8021e254: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e258: e7 80 00 f3  	jalr	-0xd0(ra) <ekernel+0xffcd0184>
8021e25c: aa 85        	mv	a1, a0
8021e25e: 23 38 b4 f6  	sd	a1, -0x90(s0)
8021e262: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021e266: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021e26a: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8021e26c: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8021e270: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8021e274: 85 45        	li	a1, 0x1
8021e276: 97 10 00 00  	auipc	ra, 0x1
8021e27a: e7 80 00 f3  	jalr	-0xd0(ra) <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h5ae6d4e78e8751d1E>
8021e27e: aa 85        	mv	a1, a0
8021e280: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021e284: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021e288: 09 a0        	j	0x8021e28a <_ZN7easy_fs3vfs5Inode15read_disk_inode17h3d58310953030ce0E+0x84>
8021e28a: 03 35 04 f7  	ld	a0, -0x90(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8021e28e: 21 05        	addi	a0, a0, 0x8
8021e290: 89 45        	li	a1, 0x2
8021e292: a3 0b b4 fc  	sb	a1, -0x29(s0)
8021e296: 83 45 74 fd  	lbu	a1, -0x29(s0)
8021e29a: 97 10 00 00  	auipc	ra, 0x1
8021e29e: e7 80 00 ec  	jalr	-0x140(ra) <_ZN4core4sync6atomic11AtomicUsize4load17hfc2e9a6b1bc7c93eE>
8021e2a2: 83 35 84 f7  	ld	a1, -0x88(s0)
8021e2a6: 63 08 b5 00  	beq	a0, a1, 0x8021e2b6 <_ZN7easy_fs3vfs5Inode15read_disk_inode17h3d58310953030ce0E+0xb0>
8021e2aa: 09 a0        	j	0x8021e2ac <_ZN7easy_fs3vfs5Inode15read_disk_inode17h3d58310953030ce0E+0xa6>
;             crate::relax();
8021e2ac: 97 10 00 00  	auipc	ra, 0x1
8021e2b0: e7 80 20 fa  	jalr	-0x5e(ra) <_ZN4core4sync6atomic14spin_loop_hint17h4e5930ee87a2d556E>
8021e2b4: d9 bf        	j	0x8021e28a <_ZN7easy_fs3vfs5Inode15read_disk_inode17h3d58310953030ce0E+0x84>
8021e2b6: 83 35 84 f7  	ld	a1, -0x88(s0)
8021e2ba: 03 35 04 f7  	ld	a0, -0x90(s0)
;             next_serving: &self.next_serving,
8021e2be: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8021e2c2: 41 05        	addi	a0, a0, 0x10
8021e2c4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8021e2c8: 23 38 c4 fa  	sd	a2, -0x50(s0)
8021e2cc: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021e2d0: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8021e2d4: 03 35 04 fc  	ld	a0, -0x40(s0)
8021e2d8: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021e2dc: 03 35 84 fb  	ld	a0, -0x48(s0)
8021e2e0: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021e2e4: 03 35 04 fb  	ld	a0, -0x50(s0)
8021e2e8: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021e2ec: 13 05 04 f8  	addi	a0, s0, -0x80
8021e2f0: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e2f4: 97 40 00 00  	auipc	ra, 0x4
8021e2f8: e7 80 a0 32  	jalr	0x32a(ra) <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc9578c5254294c75E>
8021e2fc: 03 36 04 f5  	ld	a2, -0xb0(s0)
8021e300: 83 36 84 f4  	ld	a3, -0xb8(s0)
8021e304: aa 85        	mv	a1, a0
8021e306: 03 35 84 f5  	ld	a0, -0xa8(s0)
;             .read(self.block_offset, f)
8021e30a: 10 72        	ld	a2, 0x20(a2)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e30c: 97 30 00 00  	auipc	ra, 0x3
8021e310: e7 80 c0 27  	jalr	0x27c(ra) <_ZN7easy_fs11block_cache10BlockCache4read17heb32c9ad43ba564bE>
8021e314: 03 35 04 f4  	ld	a0, -0xc0(s0)
;     }
8021e318: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e31c: e7 80 e0 77  	jalr	0x77e(ra) <ekernel+0xffcd0a96>
8021e320: 13 05 84 f9  	addi	a0, s0, -0x68
8021e324: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e328: e7 80 a0 40  	jalr	0x40a(ra) <ekernel+0xffcd072e>
8021e32c: ea 70        	ld	ra, 0xb8(sp)
8021e32e: 4a 74        	ld	s0, 0xb0(sp)
8021e330: 29 61        	addi	sp, sp, 0xc0
8021e332: 82 80        	ret

000000008021e334 <_ZN7easy_fs3vfs5Inode15read_disk_inode17h85531edac8937d4dE>:
;     fn read_disk_inode<V>(&self, f: impl FnOnce(&DiskInode) -> V) -> V {
8021e334: 31 71        	addi	sp, sp, -0xc0
8021e336: 06 fd        	sd	ra, 0xb8(sp)
8021e338: 22 f9        	sd	s0, 0xb0(sp)
8021e33a: 80 01        	addi	s0, sp, 0xc0
8021e33c: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021e340: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021e344: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e348: 0c 6d        	ld	a1, 0x18(a0)
8021e34a: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e34e: 21 05        	addi	a0, a0, 0x8
8021e350: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e354: e7 80 00 d9  	jalr	-0x270(ra) <ekernel+0xffcd00e0>
8021e358: 2a 86        	mv	a2, a0
8021e35a: 03 35 84 f6  	ld	a0, -0x98(s0)
8021e35e: 23 38 c4 f6  	sd	a2, -0x90(s0)
8021e362: 2e 86        	mv	a2, a1
8021e364: 83 35 04 f7  	ld	a1, -0x90(s0)
8021e368: 97 80 00 00  	auipc	ra, 0x8
8021e36c: e7 80 c0 a9  	jalr	-0x564(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8021e370: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021e374: 13 05 04 fa  	addi	a0, s0, -0x60
8021e378: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e37c: e7 80 c0 e0  	jalr	-0x1f4(ra) <ekernel+0xffcd0184>
8021e380: aa 85        	mv	a1, a0
8021e382: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021e386: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021e38a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021e38e: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8021e390: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8021e394: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8021e398: 85 45        	li	a1, 0x1
8021e39a: 97 10 00 00  	auipc	ra, 0x1
8021e39e: e7 80 c0 e0  	jalr	-0x1f4(ra) <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h5ae6d4e78e8751d1E>
8021e3a2: aa 85        	mv	a1, a0
8021e3a4: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021e3a8: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021e3ac: 09 a0        	j	0x8021e3ae <_ZN7easy_fs3vfs5Inode15read_disk_inode17h85531edac8937d4dE+0x7a>
8021e3ae: 03 35 84 f7  	ld	a0, -0x88(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8021e3b2: 21 05        	addi	a0, a0, 0x8
8021e3b4: 89 45        	li	a1, 0x2
8021e3b6: a3 0b b4 fc  	sb	a1, -0x29(s0)
8021e3ba: 83 45 74 fd  	lbu	a1, -0x29(s0)
8021e3be: 97 10 00 00  	auipc	ra, 0x1
8021e3c2: e7 80 c0 d9  	jalr	-0x264(ra) <_ZN4core4sync6atomic11AtomicUsize4load17hfc2e9a6b1bc7c93eE>
8021e3c6: 83 35 04 f8  	ld	a1, -0x80(s0)
8021e3ca: 63 08 b5 00  	beq	a0, a1, 0x8021e3da <_ZN7easy_fs3vfs5Inode15read_disk_inode17h85531edac8937d4dE+0xa6>
8021e3ce: 09 a0        	j	0x8021e3d0 <_ZN7easy_fs3vfs5Inode15read_disk_inode17h85531edac8937d4dE+0x9c>
;             crate::relax();
8021e3d0: 97 10 00 00  	auipc	ra, 0x1
8021e3d4: e7 80 e0 e7  	jalr	-0x182(ra) <_ZN4core4sync6atomic14spin_loop_hint17h4e5930ee87a2d556E>
8021e3d8: d9 bf        	j	0x8021e3ae <_ZN7easy_fs3vfs5Inode15read_disk_inode17h85531edac8937d4dE+0x7a>
8021e3da: 83 35 04 f8  	ld	a1, -0x80(s0)
8021e3de: 03 35 84 f7  	ld	a0, -0x88(s0)
;             next_serving: &self.next_serving,
8021e3e2: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8021e3e6: 41 05        	addi	a0, a0, 0x10
8021e3e8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8021e3ec: 23 38 c4 fa  	sd	a2, -0x50(s0)
8021e3f0: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021e3f4: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8021e3f8: 03 35 04 fc  	ld	a0, -0x40(s0)
8021e3fc: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021e400: 03 35 84 fb  	ld	a0, -0x48(s0)
8021e404: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021e408: 03 35 04 fb  	ld	a0, -0x50(s0)
8021e40c: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021e410: 13 05 84 f8  	addi	a0, s0, -0x78
8021e414: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e418: 97 40 00 00  	auipc	ra, 0x4
8021e41c: e7 80 60 20  	jalr	0x206(ra) <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc9578c5254294c75E>
8021e420: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021e424: 03 36 84 f5  	ld	a2, -0xa8(s0)
;             .read(self.block_offset, f)
8021e428: 8c 71        	ld	a1, 0x20(a1)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e42a: 97 30 00 00  	auipc	ra, 0x3
8021e42e: e7 80 40 02  	jalr	0x24(ra) <_ZN7easy_fs11block_cache10BlockCache4read17h26928fb4c4b7c9f8E>
8021e432: aa 85        	mv	a1, a0
8021e434: 03 35 84 f4  	ld	a0, -0xb8(s0)
8021e438: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     }
8021e43c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e440: e7 80 a0 65  	jalr	0x65a(ra) <ekernel+0xffcd0a96>
8021e444: 13 05 04 fa  	addi	a0, s0, -0x60
8021e448: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e44c: e7 80 60 2e  	jalr	0x2e6(ra) <ekernel+0xffcd072e>
8021e450: 03 35 04 f5  	ld	a0, -0xb0(s0)
8021e454: ea 70        	ld	ra, 0xb8(sp)
8021e456: 4a 74        	ld	s0, 0xb0(sp)
8021e458: 29 61        	addi	sp, sp, 0xc0
8021e45a: 82 80        	ret

000000008021e45c <_ZN7easy_fs3vfs5Inode15read_disk_inode17hae59cb203dacf89fE>:
;     fn read_disk_inode<V>(&self, f: impl FnOnce(&DiskInode) -> V) -> V {
8021e45c: 31 71        	addi	sp, sp, -0xc0
8021e45e: 06 fd        	sd	ra, 0xb8(sp)
8021e460: 22 f9        	sd	s0, 0xb0(sp)
8021e462: 80 01        	addi	s0, sp, 0xc0
8021e464: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021e468: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021e46c: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e470: 0c 6d        	ld	a1, 0x18(a0)
8021e472: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e476: 21 05        	addi	a0, a0, 0x8
8021e478: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e47c: e7 80 80 c6  	jalr	-0x398(ra) <ekernel+0xffcd00e0>
8021e480: 2a 86        	mv	a2, a0
8021e482: 03 35 84 f6  	ld	a0, -0x98(s0)
8021e486: 23 38 c4 f6  	sd	a2, -0x90(s0)
8021e48a: 2e 86        	mv	a2, a1
8021e48c: 83 35 04 f7  	ld	a1, -0x90(s0)
8021e490: 97 80 00 00  	auipc	ra, 0x8
8021e494: e7 80 40 97  	jalr	-0x68c(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8021e498: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021e49c: 13 05 04 fa  	addi	a0, s0, -0x60
8021e4a0: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e4a4: e7 80 40 ce  	jalr	-0x31c(ra) <ekernel+0xffcd0184>
8021e4a8: aa 85        	mv	a1, a0
8021e4aa: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021e4ae: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021e4b2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021e4b6: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8021e4b8: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8021e4bc: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8021e4c0: 85 45        	li	a1, 0x1
8021e4c2: 97 10 00 00  	auipc	ra, 0x1
8021e4c6: e7 80 40 ce  	jalr	-0x31c(ra) <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h5ae6d4e78e8751d1E>
8021e4ca: aa 85        	mv	a1, a0
8021e4cc: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021e4d0: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021e4d4: 09 a0        	j	0x8021e4d6 <_ZN7easy_fs3vfs5Inode15read_disk_inode17hae59cb203dacf89fE+0x7a>
8021e4d6: 03 35 84 f7  	ld	a0, -0x88(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8021e4da: 21 05        	addi	a0, a0, 0x8
8021e4dc: 89 45        	li	a1, 0x2
8021e4de: a3 0b b4 fc  	sb	a1, -0x29(s0)
8021e4e2: 83 45 74 fd  	lbu	a1, -0x29(s0)
8021e4e6: 97 10 00 00  	auipc	ra, 0x1
8021e4ea: e7 80 40 c7  	jalr	-0x38c(ra) <_ZN4core4sync6atomic11AtomicUsize4load17hfc2e9a6b1bc7c93eE>
8021e4ee: 83 35 04 f8  	ld	a1, -0x80(s0)
8021e4f2: 63 08 b5 00  	beq	a0, a1, 0x8021e502 <_ZN7easy_fs3vfs5Inode15read_disk_inode17hae59cb203dacf89fE+0xa6>
8021e4f6: 09 a0        	j	0x8021e4f8 <_ZN7easy_fs3vfs5Inode15read_disk_inode17hae59cb203dacf89fE+0x9c>
;             crate::relax();
8021e4f8: 97 10 00 00  	auipc	ra, 0x1
8021e4fc: e7 80 60 d5  	jalr	-0x2aa(ra) <_ZN4core4sync6atomic14spin_loop_hint17h4e5930ee87a2d556E>
8021e500: d9 bf        	j	0x8021e4d6 <_ZN7easy_fs3vfs5Inode15read_disk_inode17hae59cb203dacf89fE+0x7a>
8021e502: 83 35 04 f8  	ld	a1, -0x80(s0)
8021e506: 03 35 84 f7  	ld	a0, -0x88(s0)
;             next_serving: &self.next_serving,
8021e50a: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8021e50e: 41 05        	addi	a0, a0, 0x10
8021e510: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8021e514: 23 38 c4 fa  	sd	a2, -0x50(s0)
8021e518: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021e51c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8021e520: 03 35 04 fc  	ld	a0, -0x40(s0)
8021e524: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021e528: 03 35 84 fb  	ld	a0, -0x48(s0)
8021e52c: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021e530: 03 35 04 fb  	ld	a0, -0x50(s0)
8021e534: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021e538: 13 05 84 f8  	addi	a0, s0, -0x78
8021e53c: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e540: 97 40 00 00  	auipc	ra, 0x4
8021e544: e7 80 e0 0d  	jalr	0xde(ra) <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc9578c5254294c75E>
8021e548: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021e54c: 03 36 84 f5  	ld	a2, -0xa8(s0)
;             .read(self.block_offset, f)
8021e550: 8c 71        	ld	a1, 0x20(a1)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e552: 97 30 00 00  	auipc	ra, 0x3
8021e556: e7 80 c0 ff  	jalr	-0x4(ra) <_ZN7easy_fs11block_cache10BlockCache4read17he7f82c9869b02e14E>
8021e55a: aa 85        	mv	a1, a0
8021e55c: 03 35 84 f4  	ld	a0, -0xb8(s0)
8021e560: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     }
8021e564: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e568: e7 80 20 53  	jalr	0x532(ra) <ekernel+0xffcd0a96>
8021e56c: 13 05 04 fa  	addi	a0, s0, -0x60
8021e570: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e574: e7 80 e0 1b  	jalr	0x1be(ra) <ekernel+0xffcd072e>
8021e578: 03 35 04 f5  	ld	a0, -0xb0(s0)
8021e57c: ea 70        	ld	ra, 0xb8(sp)
8021e57e: 4a 74        	ld	s0, 0xb0(sp)
8021e580: 29 61        	addi	sp, sp, 0xc0
8021e582: 82 80        	ret

000000008021e584 <_ZN7easy_fs3vfs5Inode15read_disk_inode17hcea57e8a4e938b58E>:
;     fn read_disk_inode<V>(&self, f: impl FnOnce(&DiskInode) -> V) -> V {
8021e584: 15 71        	addi	sp, sp, -0xe0
8021e586: 86 ed        	sd	ra, 0xd8(sp)
8021e588: a2 e9        	sd	s0, 0xd0(sp)
8021e58a: 80 11        	addi	s0, sp, 0xe0
8021e58c: 23 30 c4 f4  	sd	a2, -0xc0(s0)
8021e590: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8021e594: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021e598: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021e59c: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021e5a0: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e5a4: 0c 6d        	ld	a1, 0x18(a0)
8021e5a6: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021e5aa: 21 05        	addi	a0, a0, 0x8
8021e5ac: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e5b0: e7 80 40 b3  	jalr	-0x4cc(ra) <ekernel+0xffcd00e0>
8021e5b4: 2a 86        	mv	a2, a0
8021e5b6: 03 35 84 f5  	ld	a0, -0xa8(s0)
8021e5ba: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8021e5be: 2e 86        	mv	a2, a1
8021e5c0: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021e5c4: 97 80 00 00  	auipc	ra, 0x8
8021e5c8: e7 80 00 84  	jalr	-0x7c0(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8021e5cc: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021e5d0: 13 05 04 f9  	addi	a0, s0, -0x70
8021e5d4: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e5d8: e7 80 00 bb  	jalr	-0x450(ra) <ekernel+0xffcd0184>
8021e5dc: aa 85        	mv	a1, a0
8021e5de: 23 34 b4 f6  	sd	a1, -0x98(s0)
8021e5e2: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021e5e6: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021e5ea: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8021e5ec: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8021e5f0: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8021e5f4: 85 45        	li	a1, 0x1
8021e5f6: 97 10 00 00  	auipc	ra, 0x1
8021e5fa: e7 80 00 bb  	jalr	-0x450(ra) <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h5ae6d4e78e8751d1E>
8021e5fe: aa 85        	mv	a1, a0
8021e600: 23 38 b4 f6  	sd	a1, -0x90(s0)
8021e604: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021e608: 09 a0        	j	0x8021e60a <_ZN7easy_fs3vfs5Inode15read_disk_inode17hcea57e8a4e938b58E+0x86>
8021e60a: 03 35 84 f6  	ld	a0, -0x98(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8021e60e: 21 05        	addi	a0, a0, 0x8
8021e610: 89 45        	li	a1, 0x2
8021e612: a3 0b b4 fc  	sb	a1, -0x29(s0)
8021e616: 83 45 74 fd  	lbu	a1, -0x29(s0)
8021e61a: 97 10 00 00  	auipc	ra, 0x1
8021e61e: e7 80 00 b4  	jalr	-0x4c0(ra) <_ZN4core4sync6atomic11AtomicUsize4load17hfc2e9a6b1bc7c93eE>
8021e622: 83 35 04 f7  	ld	a1, -0x90(s0)
8021e626: 63 08 b5 00  	beq	a0, a1, 0x8021e636 <_ZN7easy_fs3vfs5Inode15read_disk_inode17hcea57e8a4e938b58E+0xb2>
8021e62a: 09 a0        	j	0x8021e62c <_ZN7easy_fs3vfs5Inode15read_disk_inode17hcea57e8a4e938b58E+0xa8>
;             crate::relax();
8021e62c: 97 10 00 00  	auipc	ra, 0x1
8021e630: e7 80 20 c2  	jalr	-0x3de(ra) <_ZN4core4sync6atomic14spin_loop_hint17h4e5930ee87a2d556E>
8021e634: d9 bf        	j	0x8021e60a <_ZN7easy_fs3vfs5Inode15read_disk_inode17hcea57e8a4e938b58E+0x86>
8021e636: 83 35 04 f7  	ld	a1, -0x90(s0)
8021e63a: 03 35 84 f6  	ld	a0, -0x98(s0)
;             next_serving: &self.next_serving,
8021e63e: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8021e642: 41 05        	addi	a0, a0, 0x10
8021e644: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8021e648: 23 38 c4 fa  	sd	a2, -0x50(s0)
8021e64c: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021e650: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8021e654: 03 35 04 fc  	ld	a0, -0x40(s0)
8021e658: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021e65c: 03 35 84 fb  	ld	a0, -0x48(s0)
8021e660: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021e664: 03 35 04 fb  	ld	a0, -0x50(s0)
8021e668: 23 3c a4 f6  	sd	a0, -0x88(s0)
8021e66c: 13 05 84 f7  	addi	a0, s0, -0x88
8021e670: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e674: 97 40 00 00  	auipc	ra, 0x4
8021e678: e7 80 a0 fa  	jalr	-0x56(ra) <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc9578c5254294c75E>
8021e67c: 83 35 04 f5  	ld	a1, -0xb0(s0)
8021e680: 03 36 84 f4  	ld	a2, -0xb8(s0)
8021e684: 83 36 04 f4  	ld	a3, -0xc0(s0)
;             .read(self.block_offset, f)
8021e688: 8c 71        	ld	a1, 0x20(a1)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e68a: 97 30 00 00  	auipc	ra, 0x3
8021e68e: e7 80 c0 e3  	jalr	-0x1c4(ra) <_ZN7easy_fs11block_cache10BlockCache4read17h3889f443830641e1E>
8021e692: 2a 86        	mv	a2, a0
8021e694: 03 35 84 f2  	ld	a0, -0xd8(s0)
8021e698: 23 38 c4 f2  	sd	a2, -0xd0(s0)
8021e69c: 23 3c b4 f2  	sd	a1, -0xc8(s0)
;     }
8021e6a0: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e6a4: e7 80 60 3f  	jalr	0x3f6(ra) <ekernel+0xffcd0a96>
8021e6a8: 13 05 04 f9  	addi	a0, s0, -0x70
8021e6ac: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e6b0: e7 80 20 08  	jalr	0x82(ra) <ekernel+0xffcd072e>
8021e6b4: 03 35 04 f3  	ld	a0, -0xd0(s0)
8021e6b8: 83 35 84 f3  	ld	a1, -0xc8(s0)
8021e6bc: ee 60        	ld	ra, 0xd8(sp)
8021e6be: 4e 64        	ld	s0, 0xd0(sp)
8021e6c0: 2d 61        	addi	sp, sp, 0xe0
8021e6c2: 82 80        	ret

000000008021e6c4 <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h5d0374687c57e46eE>:
;     fn modify_disk_inode<V>(&self, f: impl FnOnce(&mut DiskInode) -> V) -> V {
8021e6c4: 55 71        	addi	sp, sp, -0xd0
8021e6c6: 86 e5        	sd	ra, 0xc8(sp)
8021e6c8: a2 e1        	sd	s0, 0xc0(sp)
8021e6ca: 80 09        	addi	s0, sp, 0xd0
8021e6cc: 23 30 c4 f4  	sd	a2, -0xc0(s0)
8021e6d0: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8021e6d4: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021e6d8: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021e6dc: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021e6e0: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e6e4: 0c 6d        	ld	a1, 0x18(a0)
8021e6e6: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021e6ea: 21 05        	addi	a0, a0, 0x8
8021e6ec: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e6f0: e7 80 40 9f  	jalr	-0x60c(ra) <ekernel+0xffcd00e0>
8021e6f4: 2a 86        	mv	a2, a0
8021e6f6: 03 35 84 f5  	ld	a0, -0xa8(s0)
8021e6fa: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8021e6fe: 2e 86        	mv	a2, a1
8021e700: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021e704: 97 70 00 00  	auipc	ra, 0x7
8021e708: e7 80 00 70  	jalr	0x700(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8021e70c: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021e710: 13 05 04 f9  	addi	a0, s0, -0x70
8021e714: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e718: e7 80 00 a7  	jalr	-0x590(ra) <ekernel+0xffcd0184>
8021e71c: aa 85        	mv	a1, a0
8021e71e: 23 34 b4 f6  	sd	a1, -0x98(s0)
8021e722: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021e726: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021e72a: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8021e72c: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8021e730: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8021e734: 85 45        	li	a1, 0x1
8021e736: 97 10 00 00  	auipc	ra, 0x1
8021e73a: e7 80 00 a7  	jalr	-0x590(ra) <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h5ae6d4e78e8751d1E>
8021e73e: aa 85        	mv	a1, a0
8021e740: 23 38 b4 f6  	sd	a1, -0x90(s0)
8021e744: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021e748: 09 a0        	j	0x8021e74a <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h5d0374687c57e46eE+0x86>
8021e74a: 03 35 84 f6  	ld	a0, -0x98(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8021e74e: 21 05        	addi	a0, a0, 0x8
8021e750: 89 45        	li	a1, 0x2
8021e752: a3 0b b4 fc  	sb	a1, -0x29(s0)
8021e756: 83 45 74 fd  	lbu	a1, -0x29(s0)
8021e75a: 97 10 00 00  	auipc	ra, 0x1
8021e75e: e7 80 00 a0  	jalr	-0x600(ra) <_ZN4core4sync6atomic11AtomicUsize4load17hfc2e9a6b1bc7c93eE>
8021e762: 83 35 04 f7  	ld	a1, -0x90(s0)
8021e766: 63 08 b5 00  	beq	a0, a1, 0x8021e776 <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h5d0374687c57e46eE+0xb2>
8021e76a: 09 a0        	j	0x8021e76c <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h5d0374687c57e46eE+0xa8>
;             crate::relax();
8021e76c: 97 10 00 00  	auipc	ra, 0x1
8021e770: e7 80 20 ae  	jalr	-0x51e(ra) <_ZN4core4sync6atomic14spin_loop_hint17h4e5930ee87a2d556E>
8021e774: d9 bf        	j	0x8021e74a <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h5d0374687c57e46eE+0x86>
8021e776: 83 35 04 f7  	ld	a1, -0x90(s0)
8021e77a: 03 35 84 f6  	ld	a0, -0x98(s0)
;             next_serving: &self.next_serving,
8021e77e: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8021e782: 41 05        	addi	a0, a0, 0x10
8021e784: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8021e788: 23 38 c4 fa  	sd	a2, -0x50(s0)
8021e78c: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021e790: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8021e794: 03 35 04 fc  	ld	a0, -0x40(s0)
8021e798: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021e79c: 03 35 84 fb  	ld	a0, -0x48(s0)
8021e7a0: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021e7a4: 03 35 04 fb  	ld	a0, -0x50(s0)
8021e7a8: 23 3c a4 f6  	sd	a0, -0x88(s0)
8021e7ac: 13 05 84 f7  	addi	a0, s0, -0x88
8021e7b0: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e7b4: 97 40 00 00  	auipc	ra, 0x4
8021e7b8: e7 80 e0 eb  	jalr	-0x142(ra) <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4414d35563f79ba7E>
8021e7bc: 83 35 04 f5  	ld	a1, -0xb0(s0)
8021e7c0: 03 36 84 f4  	ld	a2, -0xb8(s0)
8021e7c4: 83 36 04 f4  	ld	a3, -0xc0(s0)
;             .modify(self.block_offset, f)
8021e7c8: 8c 71        	ld	a1, 0x20(a1)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e7ca: 97 30 00 00  	auipc	ra, 0x3
8021e7ce: e7 80 20 18  	jalr	0x182(ra) <_ZN7easy_fs11block_cache10BlockCache6modify17hc44275532053f9b1E>
8021e7d2: 03 35 84 f3  	ld	a0, -0xc8(s0)
;     }
8021e7d6: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e7da: e7 80 00 2c  	jalr	0x2c0(ra) <ekernel+0xffcd0a96>
8021e7de: 13 05 04 f9  	addi	a0, s0, -0x70
8021e7e2: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e7e6: e7 80 c0 f4  	jalr	-0xb4(ra) <ekernel+0xffcd072e>
8021e7ea: ae 60        	ld	ra, 0xc8(sp)
8021e7ec: 0e 64        	ld	s0, 0xc0(sp)
8021e7ee: 69 61        	addi	sp, sp, 0xd0
8021e7f0: 82 80        	ret

000000008021e7f2 <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h66295ff51b00568bE>:
;     fn modify_disk_inode<V>(&self, f: impl FnOnce(&mut DiskInode) -> V) -> V {
8021e7f2: 31 71        	addi	sp, sp, -0xc0
8021e7f4: 06 fd        	sd	ra, 0xb8(sp)
8021e7f6: 22 f9        	sd	s0, 0xb0(sp)
8021e7f8: 80 01        	addi	s0, sp, 0xc0
8021e7fa: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021e7fe: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021e802: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e806: 0c 6d        	ld	a1, 0x18(a0)
8021e808: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e80c: 21 05        	addi	a0, a0, 0x8
8021e80e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e812: e7 80 20 8d  	jalr	-0x72e(ra) <ekernel+0xffcd00e0>
8021e816: 2a 86        	mv	a2, a0
8021e818: 03 35 84 f6  	ld	a0, -0x98(s0)
8021e81c: 23 38 c4 f6  	sd	a2, -0x90(s0)
8021e820: 2e 86        	mv	a2, a1
8021e822: 83 35 04 f7  	ld	a1, -0x90(s0)
8021e826: 97 70 00 00  	auipc	ra, 0x7
8021e82a: e7 80 e0 5d  	jalr	0x5de(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8021e82e: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021e832: 13 05 04 fa  	addi	a0, s0, -0x60
8021e836: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e83a: e7 80 e0 94  	jalr	-0x6b2(ra) <ekernel+0xffcd0184>
8021e83e: aa 85        	mv	a1, a0
8021e840: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021e844: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021e848: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021e84c: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8021e84e: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8021e852: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8021e856: 85 45        	li	a1, 0x1
8021e858: 97 10 00 00  	auipc	ra, 0x1
8021e85c: e7 80 e0 94  	jalr	-0x6b2(ra) <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h5ae6d4e78e8751d1E>
8021e860: aa 85        	mv	a1, a0
8021e862: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021e866: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021e86a: 09 a0        	j	0x8021e86c <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h66295ff51b00568bE+0x7a>
8021e86c: 03 35 84 f7  	ld	a0, -0x88(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8021e870: 21 05        	addi	a0, a0, 0x8
8021e872: 89 45        	li	a1, 0x2
8021e874: a3 0b b4 fc  	sb	a1, -0x29(s0)
8021e878: 83 45 74 fd  	lbu	a1, -0x29(s0)
8021e87c: 97 10 00 00  	auipc	ra, 0x1
8021e880: e7 80 e0 8d  	jalr	-0x722(ra) <_ZN4core4sync6atomic11AtomicUsize4load17hfc2e9a6b1bc7c93eE>
8021e884: 83 35 04 f8  	ld	a1, -0x80(s0)
8021e888: 63 08 b5 00  	beq	a0, a1, 0x8021e898 <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h66295ff51b00568bE+0xa6>
8021e88c: 09 a0        	j	0x8021e88e <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h66295ff51b00568bE+0x9c>
;             crate::relax();
8021e88e: 97 10 00 00  	auipc	ra, 0x1
8021e892: e7 80 00 9c  	jalr	-0x640(ra) <_ZN4core4sync6atomic14spin_loop_hint17h4e5930ee87a2d556E>
8021e896: d9 bf        	j	0x8021e86c <_ZN7easy_fs3vfs5Inode17modify_disk_inode17h66295ff51b00568bE+0x7a>
8021e898: 83 35 04 f8  	ld	a1, -0x80(s0)
8021e89c: 03 35 84 f7  	ld	a0, -0x88(s0)
;             next_serving: &self.next_serving,
8021e8a0: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8021e8a4: 41 05        	addi	a0, a0, 0x10
8021e8a6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8021e8aa: 23 38 c4 fa  	sd	a2, -0x50(s0)
8021e8ae: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021e8b2: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8021e8b6: 03 35 04 fc  	ld	a0, -0x40(s0)
8021e8ba: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021e8be: 03 35 84 fb  	ld	a0, -0x48(s0)
8021e8c2: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021e8c6: 03 35 04 fb  	ld	a0, -0x50(s0)
8021e8ca: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021e8ce: 13 05 84 f8  	addi	a0, s0, -0x78
8021e8d2: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e8d6: 97 40 00 00  	auipc	ra, 0x4
8021e8da: e7 80 c0 d9  	jalr	-0x264(ra) <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4414d35563f79ba7E>
8021e8de: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021e8e2: 03 36 84 f5  	ld	a2, -0xa8(s0)
;             .modify(self.block_offset, f)
8021e8e6: 8c 71        	ld	a1, 0x20(a1)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e8e8: 97 30 00 00  	auipc	ra, 0x3
8021e8ec: e7 80 c0 f6  	jalr	-0x94(ra) <_ZN7easy_fs11block_cache10BlockCache6modify17h981c676e943508c9E>
8021e8f0: aa 85        	mv	a1, a0
8021e8f2: 03 35 84 f4  	ld	a0, -0xb8(s0)
8021e8f6: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     }
8021e8fa: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e8fe: e7 80 c0 19  	jalr	0x19c(ra) <ekernel+0xffcd0a96>
8021e902: 13 05 04 fa  	addi	a0, s0, -0x60
8021e906: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e90a: e7 80 80 e2  	jalr	-0x1d8(ra) <ekernel+0xffcd072e>
8021e90e: 03 35 04 f5  	ld	a0, -0xb0(s0)
8021e912: ea 70        	ld	ra, 0xb8(sp)
8021e914: 4a 74        	ld	s0, 0xb0(sp)
8021e916: 29 61        	addi	sp, sp, 0xc0
8021e918: 82 80        	ret

000000008021e91a <_ZN7easy_fs3vfs5Inode17modify_disk_inode17hb5e10b396f037d29E>:
;     fn modify_disk_inode<V>(&self, f: impl FnOnce(&mut DiskInode) -> V) -> V {
8021e91a: 71 71        	addi	sp, sp, -0xb0
8021e91c: 06 f5        	sd	ra, 0xa8(sp)
8021e91e: 22 f1        	sd	s0, 0xa0(sp)
8021e920: 00 19        	addi	s0, sp, 0xb0
8021e922: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021e926: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021e92a: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e92e: 0c 6d        	ld	a1, 0x18(a0)
8021e930: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e934: 21 05        	addi	a0, a0, 0x8
8021e936: 97 e0 ff ff  	auipc	ra, 0xffffe
8021e93a: e7 80 a0 7a  	jalr	0x7aa(ra) <ekernel+0xffcd00e0>
8021e93e: 2a 86        	mv	a2, a0
8021e940: 03 35 84 f6  	ld	a0, -0x98(s0)
8021e944: 23 38 c4 f6  	sd	a2, -0x90(s0)
8021e948: 2e 86        	mv	a2, a1
8021e94a: 83 35 04 f7  	ld	a1, -0x90(s0)
8021e94e: 97 70 00 00  	auipc	ra, 0x7
8021e952: e7 80 60 4b  	jalr	0x4b6(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8021e956: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021e95a: 13 05 04 fa  	addi	a0, s0, -0x60
8021e95e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021e962: e7 80 60 82  	jalr	-0x7da(ra) <ekernel+0xffcd0184>
8021e966: aa 85        	mv	a1, a0
8021e968: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021e96c: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021e970: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021e974: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8021e976: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8021e97a: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8021e97e: 85 45        	li	a1, 0x1
8021e980: 97 10 00 00  	auipc	ra, 0x1
8021e984: e7 80 60 82  	jalr	-0x7da(ra) <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h5ae6d4e78e8751d1E>
8021e988: aa 85        	mv	a1, a0
8021e98a: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021e98e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021e992: 09 a0        	j	0x8021e994 <_ZN7easy_fs3vfs5Inode17modify_disk_inode17hb5e10b396f037d29E+0x7a>
8021e994: 03 35 84 f7  	ld	a0, -0x88(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8021e998: 21 05        	addi	a0, a0, 0x8
8021e99a: 89 45        	li	a1, 0x2
8021e99c: a3 0b b4 fc  	sb	a1, -0x29(s0)
8021e9a0: 83 45 74 fd  	lbu	a1, -0x29(s0)
8021e9a4: 97 00 00 00  	auipc	ra, 0x0
8021e9a8: e7 80 60 7b  	jalr	0x7b6(ra) <_ZN4core4sync6atomic11AtomicUsize4load17hfc2e9a6b1bc7c93eE>
8021e9ac: 83 35 04 f8  	ld	a1, -0x80(s0)
8021e9b0: 63 08 b5 00  	beq	a0, a1, 0x8021e9c0 <_ZN7easy_fs3vfs5Inode17modify_disk_inode17hb5e10b396f037d29E+0xa6>
8021e9b4: 09 a0        	j	0x8021e9b6 <_ZN7easy_fs3vfs5Inode17modify_disk_inode17hb5e10b396f037d29E+0x9c>
;             crate::relax();
8021e9b6: 97 10 00 00  	auipc	ra, 0x1
8021e9ba: e7 80 80 89  	jalr	-0x768(ra) <_ZN4core4sync6atomic14spin_loop_hint17h4e5930ee87a2d556E>
8021e9be: d9 bf        	j	0x8021e994 <_ZN7easy_fs3vfs5Inode17modify_disk_inode17hb5e10b396f037d29E+0x7a>
8021e9c0: 83 35 04 f8  	ld	a1, -0x80(s0)
8021e9c4: 03 35 84 f7  	ld	a0, -0x88(s0)
;             next_serving: &self.next_serving,
8021e9c8: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8021e9cc: 41 05        	addi	a0, a0, 0x10
8021e9ce: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8021e9d2: 23 38 c4 fa  	sd	a2, -0x50(s0)
8021e9d6: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021e9da: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8021e9de: 03 35 04 fc  	ld	a0, -0x40(s0)
8021e9e2: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021e9e6: 03 35 84 fb  	ld	a0, -0x48(s0)
8021e9ea: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021e9ee: 03 35 04 fb  	ld	a0, -0x50(s0)
8021e9f2: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021e9f6: 13 05 84 f8  	addi	a0, s0, -0x78
8021e9fa: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021e9fe: 97 40 00 00  	auipc	ra, 0x4
8021ea02: e7 80 40 c7  	jalr	-0x38c(ra) <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4414d35563f79ba7E>
8021ea06: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021ea0a: 03 36 84 f5  	ld	a2, -0xa8(s0)
;             .modify(self.block_offset, f)
8021ea0e: 8c 71        	ld	a1, 0x20(a1)
;         get_block_cache(self.block_id, Arc::clone(&self.block_device))
8021ea10: 97 30 00 00  	auipc	ra, 0x3
8021ea14: e7 80 a0 c8  	jalr	-0x376(ra) <_ZN7easy_fs11block_cache10BlockCache6modify17h0e3177fee8179b77E>
8021ea18: 03 35 04 f5  	ld	a0, -0xb0(s0)
;     }
8021ea1c: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ea20: e7 80 a0 07  	jalr	0x7a(ra) <ekernel+0xffcd0a96>
8021ea24: 13 05 04 fa  	addi	a0, s0, -0x60
8021ea28: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ea2c: e7 80 60 d0  	jalr	-0x2fa(ra) <ekernel+0xffcd072e>
8021ea30: aa 70        	ld	ra, 0xa8(sp)
8021ea32: 0a 74        	ld	s0, 0xa0(sp)
8021ea34: 4d 61        	addi	sp, sp, 0xb0
8021ea36: 82 80        	ret

000000008021ea38 <_ZN7easy_fs3vfs5Inode4find28_$u7b$$u7b$closure$u7d$$u7d$17h31c41654089813e2E>:
;         self.read_disk_inode(|disk_inode| {
8021ea38: 79 71        	addi	sp, sp, -0x30
8021ea3a: 06 f4        	sd	ra, 0x28(sp)
8021ea3c: 22 f0        	sd	s0, 0x20(sp)
8021ea3e: 00 18        	addi	s0, sp, 0x30
8021ea40: ae 86        	mv	a3, a1
8021ea42: aa 85        	mv	a1, a0
8021ea44: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021ea48: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             self.find_inode_id(name, disk_inode).map(|inode_id| {
8021ea4c: 88 61        	ld	a0, 0x0(a1)
8021ea4e: 08 61        	ld	a0, 0x0(a0)
8021ea50: 90 65        	ld	a2, 0x8(a1)
8021ea52: 0c 62        	ld	a1, 0x0(a2)
8021ea54: 10 66        	ld	a2, 0x8(a2)
8021ea56: 97 90 00 00  	auipc	ra, 0x9
8021ea5a: e7 80 60 d4  	jalr	-0x2ba(ra) <_ZN7easy_fs3vfs5Inode13find_inode_id17h96253d0b3ee115a0E>
8021ea5e: 03 36 04 fd  	ld	a2, -0x30(s0)
8021ea62: 14 6a        	ld	a3, 0x10(a2)
8021ea64: 10 62        	ld	a2, 0x0(a2)
8021ea66: 23 3c d4 fc  	sd	a3, -0x28(s0)
8021ea6a: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021ea6e: 03 36 84 fd  	ld	a2, -0x28(s0)
8021ea72: 83 36 04 fe  	ld	a3, -0x20(s0)
8021ea76: 97 80 00 00  	auipc	ra, 0x8
8021ea7a: e7 80 60 92  	jalr	-0x6da(ra) <_ZN4core6option15Option$LT$T$GT$3map17h0be513986d494ce7E>
8021ea7e: a2 70        	ld	ra, 0x28(sp)
8021ea80: 02 74        	ld	s0, 0x20(sp)
;         })
8021ea82: 45 61        	addi	sp, sp, 0x30
8021ea84: 82 80        	ret

000000008021ea86 <_ZN7easy_fs3vfs5Inode4find28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hc1dca940d4af188eE>:
;             self.find_inode_id(name, disk_inode).map(|inode_id| {
8021ea86: 19 71        	addi	sp, sp, -0x80
8021ea88: 86 fc        	sd	ra, 0x78(sp)
8021ea8a: a2 f8        	sd	s0, 0x70(sp)
8021ea8c: 00 01        	addi	s0, sp, 0x80
8021ea8e: 23 30 c4 f8  	sd	a2, -0x80(s0)
8021ea92: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021ea96: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021ea9a: 23 20 c4 fe  	sw	a2, -0x20(s0)
;                 let (block_id, block_offset) = fs.get_disk_inode_pos(inode_id);
8021ea9e: 03 35 84 fa  	ld	a0, -0x58(s0)
8021eaa2: 97 40 00 00  	auipc	ra, 0x4
8021eaa6: e7 80 80 b9  	jalr	-0x468(ra) <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd7e976801336d70aE>
8021eaaa: 83 35 04 f8  	ld	a1, -0x80(s0)
8021eaae: 97 20 00 00  	auipc	ra, 0x2
8021eab2: e7 80 40 13  	jalr	0x134(ra) <_ZN7easy_fs3efs14EasyFileSystem18get_disk_inode_pos17hde2b388abb5ee396E>
8021eab6: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021eaba: 23 34 b4 f8  	sd	a1, -0x78(s0)
8021eabe: 23 22 a4 fe  	sw	a0, -0x1c(s0)
8021eac2: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     self.fs.clone(),
8021eac6: 03 35 04 fb  	ld	a0, -0x50(s0)
8021eaca: 08 61        	ld	a0, 0x0(a0)
8021eacc: 97 e0 ff ff  	auipc	ra, 0xffffe
8021ead0: e7 80 00 51  	jalr	0x510(ra) <ekernel+0xffccffdc>
8021ead4: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     self.block_device.clone(),
8021ead8: 03 35 04 fb  	ld	a0, -0x50(s0)
8021eadc: 08 61        	ld	a0, 0x0(a0)
8021eade: 21 05        	addi	a0, a0, 0x8
8021eae0: 97 e0 ff ff  	auipc	ra, 0xffffe
8021eae4: e7 80 00 60  	jalr	0x600(ra) <ekernel+0xffcd00e0>
8021eae8: 03 36 84 f8  	ld	a2, -0x78(s0)
8021eaec: 83 36 04 f9  	ld	a3, -0x70(s0)
8021eaf0: 2a 87        	mv	a4, a0
8021eaf2: ae 87        	mv	a5, a1
8021eaf4: 83 35 84 f9  	ld	a1, -0x68(s0)
8021eaf8: 13 05 84 fb  	addi	a0, s0, -0x48
8021eafc: 23 30 a4 fa  	sd	a0, -0x60(s0)
;                 Arc::new(Self::new(
8021eb00: 97 90 00 00  	auipc	ra, 0x9
8021eb04: e7 80 a0 c6  	jalr	-0x396(ra) <_ZN7easy_fs3vfs5Inode3new17h053268dced329ee4E>
8021eb08: 03 35 04 fa  	ld	a0, -0x60(s0)
8021eb0c: 97 e0 ff ff  	auipc	ra, 0xffffe
8021eb10: e7 80 c0 33  	jalr	0x33c(ra) <ekernel+0xffccfe48>
8021eb14: e6 70        	ld	ra, 0x78(sp)
8021eb16: 46 74        	ld	s0, 0x70(sp)
;             })
8021eb18: 09 61        	addi	sp, sp, 0x80
8021eb1a: 82 80        	ret

000000008021eb1c <_ZN7easy_fs3vfs5Inode6create28_$u7b$$u7b$closure$u7d$$u7d$17h3209846d6e48aae9E>:
;         let op = |root_inode: &DiskInode| {
8021eb1c: 79 71        	addi	sp, sp, -0x30
8021eb1e: 06 f4        	sd	ra, 0x28(sp)
8021eb20: 22 f0        	sd	s0, 0x20(sp)
8021eb22: 00 18        	addi	s0, sp, 0x30
8021eb24: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021eb28: aa 85        	mv	a1, a0
8021eb2a: 03 35 04 fd  	ld	a0, -0x30(s0)
8021eb2e: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021eb32: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021eb36: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert!(root_inode.is_dir());
8021eb3a: 97 50 00 00  	auipc	ra, 0x5
8021eb3e: e7 80 20 1f  	jalr	0x1f2(ra) <_ZN7easy_fs6layout9DiskInode6is_dir17hc040dec3455461d8E>
8021eb42: 05 e1        	bnez	a0, 0x8021eb62 <.Lpcrel_hi1+0x14>
8021eb44: 09 a0        	j	0x8021eb46 <.Lpcrel_hi0>

000000008021eb46 <.Lpcrel_hi0>:
8021eb46: 17 95 01 00  	auipc	a0, 0x19
8021eb4a: 13 05 65 7b  	addi	a0, a0, 0x7b6

000000008021eb4e <.Lpcrel_hi1>:
8021eb4e: 97 a5 01 00  	auipc	a1, 0x1a
8021eb52: 13 86 25 81  	addi	a2, a1, -0x7ee
8021eb56: 93 05 50 02  	li	a1, 0x25
8021eb5a: 97 10 01 00  	auipc	ra, 0x11
8021eb5e: e7 80 e0 6b  	jalr	0x6be(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021eb62: 83 36 04 fd  	ld	a3, -0x30(s0)
8021eb66: 83 35 84 fd  	ld	a1, -0x28(s0)
;             self.find_inode_id(name, root_inode)
8021eb6a: 88 61        	ld	a0, 0x0(a1)
8021eb6c: 08 61        	ld	a0, 0x0(a0)
8021eb6e: 90 65        	ld	a2, 0x8(a1)
8021eb70: 0c 62        	ld	a1, 0x0(a2)
8021eb72: 10 66        	ld	a2, 0x8(a2)
8021eb74: 97 90 00 00  	auipc	ra, 0x9
8021eb78: e7 80 80 c2  	jalr	-0x3d8(ra) <_ZN7easy_fs3vfs5Inode13find_inode_id17h96253d0b3ee115a0E>
8021eb7c: a2 70        	ld	ra, 0x28(sp)
8021eb7e: 02 74        	ld	s0, 0x20(sp)
;         };
8021eb80: 45 61        	addi	sp, sp, 0x30
8021eb82: 82 80        	ret

000000008021eb84 <_ZN7easy_fs3vfs5Inode6create28_$u7b$$u7b$closure$u7d$$u7d$17h05d88e8062320822E>:
;             .modify(new_inode_block_offset, |new_inode: &mut DiskInode| {
8021eb84: 01 11        	addi	sp, sp, -0x20
8021eb86: 06 ec        	sd	ra, 0x18(sp)
8021eb88: 22 e8        	sd	s0, 0x10(sp)
8021eb8a: 00 10        	addi	s0, sp, 0x20
8021eb8c: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021eb90: 81 45        	li	a1, 0x0
;                 new_inode.initialize(DiskInodeType::File);
8021eb92: 23 03 b4 fe  	sb	a1, -0x1a(s0)
8021eb96: 83 45 64 fe  	lbu	a1, -0x1a(s0)
8021eb9a: 97 50 00 00  	auipc	ra, 0x5
8021eb9e: e7 80 20 14  	jalr	0x142(ra) <_ZN7easy_fs6layout9DiskInode10initialize17h8f451ff33ed5afbfE>
8021eba2: e2 60        	ld	ra, 0x18(sp)
8021eba4: 42 64        	ld	s0, 0x10(sp)
;             });
8021eba6: 05 61        	addi	sp, sp, 0x20
8021eba8: 82 80        	ret

000000008021ebaa <_ZN7easy_fs3vfs5Inode6create28_$u7b$$u7b$closure$u7d$$u7d$17hb081f96613753b69E>:
;         self.modify_disk_inode(|root_inode| {
8021ebaa: 19 71        	addi	sp, sp, -0x80
8021ebac: 86 fc        	sd	ra, 0x78(sp)
8021ebae: a2 f8        	sd	s0, 0x70(sp)
8021ebb0: 00 01        	addi	s0, sp, 0x80
8021ebb2: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021ebb6: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021ebba: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             let file_count = (root_inode.size as usize) / DIRENT_SZ;
8021ebbe: 03 e5 05 00  	lwu	a0, 0x0(a1)
8021ebc2: 15 81        	srli	a0, a0, 0x5
8021ebc4: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021ebc8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             let new_size = (file_count + 1) * DIRENT_SZ;
8021ebcc: 05 05        	addi	a0, a0, 0x1
8021ebce: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021ebd2: 01 45        	li	a0, 0x0
8021ebd4: 11 ed        	bnez	a0, 0x8021ebf0 <.Lpcrel_hi2>
8021ebd6: 09 a0        	j	0x8021ebd8 <_ZN7easy_fs3vfs5Inode6create28_$u7b$$u7b$closure$u7d$$u7d$17hb081f96613753b69E+0x2e>
8021ebd8: 83 35 04 fb  	ld	a1, -0x50(s0)
;             let new_size = (file_count + 1) * DIRENT_SZ;
8021ebdc: 13 95 55 00  	slli	a0, a1, 0x5
8021ebe0: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021ebe4: 13 95 55 00  	slli	a0, a1, 0x5
8021ebe8: 15 81        	srli	a0, a0, 0x5
8021ebea: 63 18 b5 06  	bne	a0, a1, 0x8021ec5a <.Lpcrel_hi4>
8021ebee: 31 a8        	j	0x8021ec0a <.Lpcrel_hi3+0x12>

000000008021ebf0 <.Lpcrel_hi2>:
8021ebf0: 17 95 01 00  	auipc	a0, 0x19
8021ebf4: 13 05 05 7a  	addi	a0, a0, 0x7a0

000000008021ebf8 <.Lpcrel_hi3>:
8021ebf8: 97 95 01 00  	auipc	a1, 0x19
8021ebfc: 13 86 05 78  	addi	a2, a1, 0x780
8021ec00: f1 45        	li	a1, 0x1c
8021ec02: 97 10 01 00  	auipc	ra, 0x11
8021ec06: e7 80 60 61  	jalr	0x616(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021ec0a: 83 36 04 fa  	ld	a3, -0x60(s0)
8021ec0e: 03 36 84 f9  	ld	a2, -0x68(s0)
8021ec12: 83 35 04 f9  	ld	a1, -0x70(s0)
;             let new_size = (file_count + 1) * DIRENT_SZ;
8021ec16: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             self.increase_size(new_size as u32, root_inode, &mut fs);
8021ec1a: 88 62        	ld	a0, 0x0(a3)
8021ec1c: 08 61        	ld	a0, 0x0(a0)
8021ec1e: 94 66        	ld	a3, 0x8(a3)
8021ec20: 97 90 00 00  	auipc	ra, 0x9
8021ec24: e7 80 40 e4  	jalr	-0x1bc(ra) <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E>
8021ec28: 03 35 04 fa  	ld	a0, -0x60(s0)
;             let dirent = DirEntry::new(name, new_inode_id);
8021ec2c: 10 69        	ld	a2, 0x10(a0)
8021ec2e: 0c 62        	ld	a1, 0x0(a2)
8021ec30: 10 66        	ld	a2, 0x8(a2)
8021ec32: 08 6d        	ld	a0, 0x18(a0)
8021ec34: 14 41        	lw	a3, 0x0(a0)
8021ec36: 13 05 84 fb  	addi	a0, s0, -0x48
8021ec3a: 97 70 00 00  	auipc	ra, 0x7
8021ec3e: e7 80 20 8f  	jalr	-0x70e(ra) <_ZN7easy_fs6layout8DirEntry3new17he85cb933c89f6957E>
8021ec42: 83 35 84 fa  	ld	a1, -0x58(s0)
;                 file_count * DIRENT_SZ,
8021ec46: 13 95 55 00  	slli	a0, a1, 0x5
8021ec4a: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021ec4e: 13 95 55 00  	slli	a0, a1, 0x5
8021ec52: 15 81        	srli	a0, a0, 0x5
8021ec54: 63 1a b5 04  	bne	a0, a1, 0x8021eca8 <.Lpcrel_hi6>
8021ec58: 39 a8        	j	0x8021ec76 <.Lpcrel_hi5+0x14>

000000008021ec5a <.Lpcrel_hi4>:
;             let new_size = (file_count + 1) * DIRENT_SZ;
8021ec5a: 17 95 01 00  	auipc	a0, 0x19
8021ec5e: 13 05 65 75  	addi	a0, a0, 0x756

000000008021ec62 <.Lpcrel_hi5>:
8021ec62: 97 95 01 00  	auipc	a1, 0x19
8021ec66: 13 86 65 71  	addi	a2, a1, 0x716
8021ec6a: 93 05 10 02  	li	a1, 0x21
8021ec6e: 97 10 01 00  	auipc	ra, 0x11
8021ec72: e7 80 a0 5a  	jalr	0x5aa(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021ec76: 13 05 84 fb  	addi	a0, s0, -0x48
;                 dirent.as_bytes(),
8021ec7a: 97 70 00 00  	auipc	ra, 0x7
8021ec7e: e7 80 c0 97  	jalr	-0x684(ra) <_ZN7easy_fs6layout8DirEntry8as_bytes17hf9a323cbd0cf6dd8E>
8021ec82: 03 37 04 fa  	ld	a4, -0x60(s0)
8021ec86: 2a 86        	mv	a2, a0
8021ec88: 03 35 84 f9  	ld	a0, -0x68(s0)
8021ec8c: ae 86        	mv	a3, a1
8021ec8e: 83 35 84 f8  	ld	a1, -0x78(s0)
;                 &self.block_device,
8021ec92: 18 63        	ld	a4, 0x0(a4)
8021ec94: 18 63        	ld	a4, 0x0(a4)
8021ec96: 21 07        	addi	a4, a4, 0x8
;             root_inode.write_at(
8021ec98: 97 60 00 00  	auipc	ra, 0x6
8021ec9c: e7 80 40 53  	jalr	0x534(ra) <_ZN7easy_fs6layout9DiskInode8write_at17h08b7e4f4ebccefdfE>
8021eca0: e6 70        	ld	ra, 0x78(sp)
8021eca2: 46 74        	ld	s0, 0x70(sp)
;         });
8021eca4: 09 61        	addi	sp, sp, 0x80
8021eca6: 82 80        	ret

000000008021eca8 <.Lpcrel_hi6>:
;                 file_count * DIRENT_SZ,
8021eca8: 17 95 01 00  	auipc	a0, 0x19
8021ecac: 13 05 85 70  	addi	a0, a0, 0x708

000000008021ecb0 <.Lpcrel_hi7>:
8021ecb0: 97 95 01 00  	auipc	a1, 0x19
8021ecb4: 13 86 85 72  	addi	a2, a1, 0x728
8021ecb8: 93 05 10 02  	li	a1, 0x21
8021ecbc: 97 10 01 00  	auipc	ra, 0x11
8021ecc0: e7 80 c0 55  	jalr	0x55c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021ecc4 <_ZN7easy_fs3vfs5Inode2ls28_$u7b$$u7b$closure$u7d$$u7d$17hb40be1aacf298b0dE>:
;         self.read_disk_inode(|disk_inode| {
8021ecc4: 0d 71        	addi	sp, sp, -0x160
8021ecc6: 86 ee        	sd	ra, 0x158(sp)
8021ecc8: a2 ea        	sd	s0, 0x150(sp)
8021ecca: 80 12        	addi	s0, sp, 0x160
8021eccc: 23 3c c4 ec  	sd	a2, -0x128(s0)
8021ecd0: 23 30 a4 ee  	sd	a0, -0x120(s0)
8021ecd4: 23 38 b4 ee  	sd	a1, -0x110(s0)
8021ecd8: 23 34 c4 fc  	sd	a2, -0x38(s0)
;             let file_count = (disk_inode.size as usize) / DIRENT_SZ;
8021ecdc: 03 65 06 00  	lwu	a0, 0x0(a2)
8021ece0: 15 81        	srli	a0, a0, 0x5
8021ece2: 23 34 a4 ee  	sd	a0, -0x118(s0)
8021ece6: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021ecea: 13 05 84 ef  	addi	a0, s0, -0x108
;             let mut v: Vec<String> = Vec::new();
8021ecee: 97 40 00 00  	auipc	ra, 0x4
8021ecf2: e7 80 80 9d  	jalr	-0x628(ra) <_ZN5alloc3vec12Vec$LT$T$GT$3new17h9bd494bd89c735a6E>
8021ecf6: 03 35 84 ee  	ld	a0, -0x118(s0)
8021ecfa: 81 45        	li	a1, 0x0
;             for i in 0..file_count {
8021ecfc: 23 38 b4 f0  	sd	a1, -0xf0(s0)
8021ed00: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8021ed04: 03 35 04 f1  	ld	a0, -0xf0(s0)
8021ed08: 83 35 84 f1  	ld	a1, -0xe8(s0)
8021ed0c: 97 10 00 00  	auipc	ra, 0x1
8021ed10: e7 80 a0 9a  	jalr	-0x656(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h8c0f6167b2db80edE>
8021ed14: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8021ed18: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8021ed1c: 09 a0        	j	0x8021ed1e <_ZN7easy_fs3vfs5Inode2ls28_$u7b$$u7b$closure$u7d$$u7d$17hb40be1aacf298b0dE+0x5a>
8021ed1e: 13 05 04 f2  	addi	a0, s0, -0xe0
;             for i in 0..file_count {
8021ed22: 97 10 00 00  	auipc	ra, 0x1
8021ed26: e7 80 00 80  	jalr	-0x800(ra) <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hbed06482cd38729aE>
8021ed2a: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8021ed2e: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021ed32: 03 35 04 f3  	ld	a0, -0xd0(s0)
8021ed36: 0d e1        	bnez	a0, 0x8021ed58 <_ZN7easy_fs3vfs5Inode2ls28_$u7b$$u7b$closure$u7d$$u7d$17hb40be1aacf298b0dE+0x94>
8021ed38: 09 a0        	j	0x8021ed3a <_ZN7easy_fs3vfs5Inode2ls28_$u7b$$u7b$closure$u7d$$u7d$17hb40be1aacf298b0dE+0x76>
8021ed3a: 83 35 04 ee  	ld	a1, -0x120(s0)
;             v
8021ed3e: 03 35 84 f0  	ld	a0, -0xf8(s0)
8021ed42: 88 e9        	sd	a0, 0x10(a1)
8021ed44: 03 35 04 f0  	ld	a0, -0x100(s0)
8021ed48: 88 e5        	sd	a0, 0x8(a1)
8021ed4a: 03 35 84 ef  	ld	a0, -0x108(s0)
8021ed4e: 88 e1        	sd	a0, 0x0(a1)
8021ed50: f6 60        	ld	ra, 0x158(sp)
8021ed52: 56 64        	ld	s0, 0x150(sp)
;         })
8021ed54: 35 61        	addi	sp, sp, 0x160
8021ed56: 82 80        	ret
;             for i in 0..file_count {
8021ed58: 03 35 84 f3  	ld	a0, -0xc8(s0)
8021ed5c: 23 34 a4 ec  	sd	a0, -0x138(s0)
8021ed60: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021ed64: 13 05 04 f4  	addi	a0, s0, -0xc0
;                 let mut dirent = DirEntry::empty();
8021ed68: 97 60 00 00  	auipc	ra, 0x6
8021ed6c: e7 80 20 78  	jalr	0x782(ra) <_ZN7easy_fs6layout8DirEntry5empty17hc4efec947d508f9cE>
8021ed70: 83 35 84 ec  	ld	a1, -0x138(s0)
;                     disk_inode.read_at(i * DIRENT_SZ, dirent.as_bytes_mut(), &self.block_device,),
8021ed74: 13 95 55 00  	slli	a0, a1, 0x5
8021ed78: 23 38 a4 ec  	sd	a0, -0x130(s0)
8021ed7c: 13 95 55 00  	slli	a0, a1, 0x5
8021ed80: 15 81        	srli	a0, a0, 0x5
8021ed82: 63 14 b5 06  	bne	a0, a1, 0x8021edea <.Lpcrel_hi9>
8021ed86: 09 a0        	j	0x8021ed88 <_ZN7easy_fs3vfs5Inode2ls28_$u7b$$u7b$closure$u7d$$u7d$17hb40be1aacf298b0dE+0xc4>
8021ed88: 13 05 04 f4  	addi	a0, s0, -0xc0
;                     disk_inode.read_at(i * DIRENT_SZ, dirent.as_bytes_mut(), &self.block_device,),
8021ed8c: 97 70 00 00  	auipc	ra, 0x7
8021ed90: e7 80 a0 88  	jalr	-0x776(ra) <_ZN7easy_fs6layout8DirEntry12as_bytes_mut17h353d4411ff9e49edE>
8021ed94: 2a 86        	mv	a2, a0
8021ed96: 03 35 84 ed  	ld	a0, -0x128(s0)
8021ed9a: ae 86        	mv	a3, a1
8021ed9c: 83 35 04 ed  	ld	a1, -0x130(s0)
8021eda0: 03 37 04 ef  	ld	a4, -0x110(s0)
8021eda4: 18 63        	ld	a4, 0x0(a4)
8021eda6: 21 07        	addi	a4, a4, 0x8
8021eda8: 97 60 00 00  	auipc	ra, 0x6
8021edac: e7 80 20 09  	jalr	0x92(ra) <_ZN7easy_fs6layout9DiskInode7read_at17h6e23015e0ef2256bE>
8021edb0: 23 38 a4 f6  	sd	a0, -0x90(s0)
8021edb4: 13 05 04 f7  	addi	a0, s0, -0x90
;                 assert_eq!(
8021edb8: 23 30 a4 f6  	sd	a0, -0xa0(s0)

000000008021edbc <.Lpcrel_hi8>:
8021edbc: 17 45 01 00  	auipc	a0, 0x14
8021edc0: 13 05 c5 64  	addi	a0, a0, 0x64c
8021edc4: 23 34 a4 f6  	sd	a0, -0x98(s0)
8021edc8: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021edcc: 23 3c a4 ea  	sd	a0, -0x148(s0)
8021edd0: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021edd4: 83 35 84 f6  	ld	a1, -0x98(s0)
8021edd8: 23 30 b4 ec  	sd	a1, -0x140(s0)
8021eddc: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021ede0: 08 61        	ld	a0, 0x0(a0)
8021ede2: 8c 61        	ld	a1, 0x0(a1)
8021ede4: 63 06 b5 04  	beq	a0, a1, 0x8021ee30 <.Lpcrel_hi11+0x14>
8021ede8: 39 a8        	j	0x8021ee06 <.Lpcrel_hi10+0x14>

000000008021edea <.Lpcrel_hi9>:
;                     disk_inode.read_at(i * DIRENT_SZ, dirent.as_bytes_mut(), &self.block_device,),
8021edea: 17 95 01 00  	auipc	a0, 0x19
8021edee: 13 05 65 5c  	addi	a0, a0, 0x5c6

000000008021edf2 <.Lpcrel_hi10>:
8021edf2: 97 95 01 00  	auipc	a1, 0x19
8021edf6: 13 86 e5 5f  	addi	a2, a1, 0x5fe
8021edfa: 93 05 10 02  	li	a1, 0x21
8021edfe: 97 10 01 00  	auipc	ra, 0x11
8021ee02: e7 80 a0 41  	jalr	0x41a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021ee06: 03 36 04 ec  	ld	a2, -0x140(s0)
8021ee0a: 83 35 84 eb  	ld	a1, -0x148(s0)
8021ee0e: 01 45        	li	a0, 0x0
;                 assert_eq!(
8021ee10: a3 0f a4 f6  	sb	a0, -0x81(s0)
8021ee14: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021ee18: 03 45 f4 f7  	lbu	a0, -0x81(s0)

000000008021ee1c <.Lpcrel_hi11>:
8021ee1c: 97 96 01 00  	auipc	a3, 0x19
8021ee20: 13 87 c6 5e  	addi	a4, a3, 0x5ec
8021ee24: 93 06 04 f8  	addi	a3, s0, -0x80
8021ee28: 97 40 00 00  	auipc	ra, 0x4
8021ee2c: e7 80 20 a9  	jalr	-0x56e(ra) <_ZN4core9panicking13assert_failed17h453eaabdd9c00fd0E>
8021ee30: 13 05 04 f4  	addi	a0, s0, -0xc0
;                 v.push(String::from(dirent.name()));
8021ee34: 97 70 00 00  	auipc	ra, 0x7
8021ee38: e7 80 20 80  	jalr	-0x7fe(ra) <_ZN7easy_fs6layout8DirEntry4name17h81120e671954d290E>
8021ee3c: 23 34 a4 ea  	sd	a0, -0x158(s0)
8021ee40: 2e 86        	mv	a2, a1
8021ee42: 83 35 84 ea  	ld	a1, -0x158(s0)
8021ee46: 13 05 04 fb  	addi	a0, s0, -0x50
8021ee4a: 23 38 a4 ea  	sd	a0, -0x150(s0)
8021ee4e: 97 70 00 00  	auipc	ra, 0x7
8021ee52: e7 80 60 97  	jalr	-0x68a(ra) <_ZN76_$LT$alloc..string..String$u20$as$u20$core..convert..From$LT$$RF$str$GT$$GT$4from17h433318f142debb41E>
8021ee56: 83 35 04 eb  	ld	a1, -0x150(s0)
8021ee5a: 13 05 84 ef  	addi	a0, s0, -0x108
8021ee5e: 97 40 00 00  	auipc	ra, 0x4
8021ee62: e7 80 a0 89  	jalr	-0x766(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3975dd51a72ed048E>
8021ee66: 65 bd        	j	0x8021ed1e <_ZN7easy_fs3vfs5Inode2ls28_$u7b$$u7b$closure$u7d$$u7d$17hb40be1aacf298b0dE+0x5a>

000000008021ee68 <_ZN7easy_fs3vfs5Inode7read_at28_$u7b$$u7b$closure$u7d$$u7d$17hb84341421abb39e2E>:
;         self.read_disk_inode(|disk_inode| disk_inode.read_at(offset, buf, &self.block_device))
8021ee68: 01 11        	addi	sp, sp, -0x20
8021ee6a: 06 ec        	sd	ra, 0x18(sp)
8021ee6c: 22 e8        	sd	s0, 0x10(sp)
8021ee6e: 00 10        	addi	s0, sp, 0x20
8021ee70: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021ee74: 2a 87        	mv	a4, a0
8021ee76: 03 35 04 fe  	ld	a0, -0x20(s0)
8021ee7a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021ee7e: 0c 63        	ld	a1, 0x0(a4)
8021ee80: 8c 61        	ld	a1, 0x0(a1)
8021ee82: 14 67        	ld	a3, 0x8(a4)
8021ee84: 90 62        	ld	a2, 0x0(a3)
8021ee86: 94 66        	ld	a3, 0x8(a3)
8021ee88: 18 6b        	ld	a4, 0x10(a4)
8021ee8a: 18 63        	ld	a4, 0x0(a4)
8021ee8c: 21 07        	addi	a4, a4, 0x8
8021ee8e: 97 60 00 00  	auipc	ra, 0x6
8021ee92: e7 80 c0 fa  	jalr	-0x54(ra) <_ZN7easy_fs6layout9DiskInode7read_at17h6e23015e0ef2256bE>
8021ee96: e2 60        	ld	ra, 0x18(sp)
8021ee98: 42 64        	ld	s0, 0x10(sp)
8021ee9a: 05 61        	addi	sp, sp, 0x20
8021ee9c: 82 80        	ret

000000008021ee9e <_ZN7easy_fs3vfs5Inode8write_at28_$u7b$$u7b$closure$u7d$$u7d$17hf42e9721fce36336E>:
;         let size = self.modify_disk_inode(|disk_inode| {
8021ee9e: 39 71        	addi	sp, sp, -0x40
8021eea0: 06 fc        	sd	ra, 0x38(sp)
8021eea2: 22 f8        	sd	s0, 0x30(sp)
8021eea4: 80 00        	addi	s0, sp, 0x40
8021eea6: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021eeaa: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021eeae: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             self.increase_size((offset + buf.len()) as u32, disk_inode, &mut fs);
8021eeb2: 0c 61        	ld	a1, 0x0(a0)
8021eeb4: 8c 61        	ld	a1, 0x0(a1)
8021eeb6: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021eeba: 0c 65        	ld	a1, 0x8(a0)
8021eebc: 8c 61        	ld	a1, 0x0(a1)
8021eebe: 08 69        	ld	a0, 0x10(a0)
8021eec0: 08 65        	ld	a0, 0x8(a0)
8021eec2: 2e 95        	add	a0, a0, a1
8021eec4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021eec8: 63 64 b5 04  	bltu	a0, a1, 0x8021ef10 <.Lpcrel_hi12>
8021eecc: 09 a0        	j	0x8021eece <_ZN7easy_fs3vfs5Inode8write_at28_$u7b$$u7b$closure$u7d$$u7d$17hf42e9721fce36336E+0x30>
8021eece: 03 36 84 fc  	ld	a2, -0x38(s0)
8021eed2: 83 36 04 fd  	ld	a3, -0x30(s0)
8021eed6: 83 35 04 fe  	ld	a1, -0x20(s0)
8021eeda: 03 35 84 fd  	ld	a0, -0x28(s0)
;             self.increase_size((offset + buf.len()) as u32, disk_inode, &mut fs);
8021eede: 94 6e        	ld	a3, 0x18(a3)
8021eee0: 97 90 00 00  	auipc	ra, 0x9
8021eee4: e7 80 40 b8  	jalr	-0x47c(ra) <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E>
8021eee8: 03 37 04 fd  	ld	a4, -0x30(s0)
8021eeec: 03 35 84 fc  	ld	a0, -0x38(s0)
;             disk_inode.write_at(offset, buf, &self.block_device)
8021eef0: 0c 67        	ld	a1, 0x8(a4)
8021eef2: 8c 61        	ld	a1, 0x0(a1)
8021eef4: 14 6b        	ld	a3, 0x10(a4)
8021eef6: 90 62        	ld	a2, 0x0(a3)
8021eef8: 94 66        	ld	a3, 0x8(a3)
8021eefa: 18 63        	ld	a4, 0x0(a4)
8021eefc: 18 63        	ld	a4, 0x0(a4)
8021eefe: 21 07        	addi	a4, a4, 0x8
8021ef00: 97 60 00 00  	auipc	ra, 0x6
8021ef04: e7 80 c0 2c  	jalr	0x2cc(ra) <_ZN7easy_fs6layout9DiskInode8write_at17h08b7e4f4ebccefdfE>
8021ef08: e2 70        	ld	ra, 0x38(sp)
8021ef0a: 42 74        	ld	s0, 0x30(sp)
;         });
8021ef0c: 21 61        	addi	sp, sp, 0x40
8021ef0e: 82 80        	ret

000000008021ef10 <.Lpcrel_hi12>:
;             self.increase_size((offset + buf.len()) as u32, disk_inode, &mut fs);
8021ef10: 17 95 01 00  	auipc	a0, 0x19
8021ef14: 13 05 05 48  	addi	a0, a0, 0x480

000000008021ef18 <.Lpcrel_hi13>:
8021ef18: 97 95 01 00  	auipc	a1, 0x19
8021ef1c: 13 86 85 50  	addi	a2, a1, 0x508
8021ef20: f1 45        	li	a1, 0x1c
8021ef22: 97 10 01 00  	auipc	ra, 0x11
8021ef26: e7 80 60 2f  	jalr	0x2f6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021ef2a <_ZN7easy_fs3vfs5Inode5clear28_$u7b$$u7b$closure$u7d$$u7d$17h426c7d48a6187993E>:
;         self.modify_disk_inode(|disk_inode| {
8021ef2a: 11 71        	addi	sp, sp, -0x100
8021ef2c: 86 fd        	sd	ra, 0xf8(sp)
8021ef2e: a2 f9        	sd	s0, 0xf0(sp)
8021ef30: 00 02        	addi	s0, sp, 0x100
8021ef32: 23 38 c4 f0  	sd	a2, -0xf0(s0)
8021ef36: 2e 86        	mv	a2, a1
8021ef38: 83 35 04 f1  	ld	a1, -0xf0(s0)
8021ef3c: 23 3c c4 f0  	sd	a2, -0xe8(s0)
8021ef40: 2a 86        	mv	a2, a0
8021ef42: 03 35 84 f1  	ld	a0, -0xe8(s0)
8021ef46: 23 3c c4 f2  	sd	a2, -0xc8(s0)
8021ef4a: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8021ef4e: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             assert!(data_blocks_dealloc.len() == DiskInode::total_blocks(size) as usize);
8021ef52: 88 41        	lw	a0, 0x0(a1)
8021ef54: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;             let size = disk_inode.size;
8021ef58: 23 24 a4 fe  	sw	a0, -0x18(s0)
;             let data_blocks_dealloc = disk_inode.clear_size(&self.block_device);
8021ef5c: 03 35 84 f3  	ld	a0, -0xc8(s0)
8021ef60: 08 61        	ld	a0, 0x0(a0)
8021ef62: 13 06 85 00  	addi	a2, a0, 0x8
8021ef66: 13 05 84 f4  	addi	a0, s0, -0xb8
8021ef6a: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8021ef6e: 97 60 00 00  	auipc	ra, 0x6
8021ef72: e7 80 e0 a0  	jalr	-0x5f2(ra) <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E>
8021ef76: 03 35 04 f2  	ld	a0, -0xe0(s0)
;             assert!(data_blocks_dealloc.len() == DiskInode::total_blocks(size) as usize);
8021ef7a: 97 30 00 00  	auipc	ra, 0x3
8021ef7e: e7 80 80 76  	jalr	0x768(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h73b0358345d33c05E>
8021ef82: aa 85        	mv	a1, a0
8021ef84: 03 35 84 f2  	ld	a0, -0xd8(s0)
8021ef88: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8021ef8c: 97 50 00 00  	auipc	ra, 0x5
8021ef90: e7 80 c0 e5  	jalr	-0x1a4(ra) <_ZN7easy_fs6layout9DiskInode12total_blocks17hbbfe580984ef783dE>
8021ef94: aa 85        	mv	a1, a0
8021ef96: 03 35 04 f3  	ld	a0, -0xd0(s0)
8021ef9a: 82 15        	slli	a1, a1, 0x20
8021ef9c: 81 91        	srli	a1, a1, 0x20
8021ef9e: 63 01 b5 02  	beq	a0, a1, 0x8021efc0 <.Lpcrel_hi15+0x14>
8021efa2: 09 a0        	j	0x8021efa4 <.Lpcrel_hi14>

000000008021efa4 <.Lpcrel_hi14>:
8021efa4: 17 95 01 00  	auipc	a0, 0x19
8021efa8: 13 05 45 49  	addi	a0, a0, 0x494

000000008021efac <.Lpcrel_hi15>:
8021efac: 97 95 01 00  	auipc	a1, 0x19
8021efb0: 13 86 45 4e  	addi	a2, a1, 0x4e4
8021efb4: 93 05 50 05  	li	a1, 0x55
8021efb8: 97 10 01 00  	auipc	ra, 0x11
8021efbc: e7 80 00 26  	jalr	0x260(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;             for data_block in data_blocks_dealloc.into_iter() {
8021efc0: 03 35 84 f5  	ld	a0, -0xa8(s0)
8021efc4: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021efc8: 03 35 04 f5  	ld	a0, -0xb0(s0)
8021efcc: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021efd0: 03 35 84 f4  	ld	a0, -0xb8(s0)
8021efd4: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021efd8: 13 05 04 f8  	addi	a0, s0, -0x80
8021efdc: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8021efe0: 93 05 04 fa  	addi	a1, s0, -0x60
8021efe4: 97 40 00 00  	auipc	ra, 0x4
8021efe8: e7 80 80 82  	jalr	-0x7d8(ra) <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9ae2eb5b622b2642E>
8021efec: 83 35 84 f0  	ld	a1, -0xf8(s0)
8021eff0: 13 05 04 f6  	addi	a0, s0, -0xa0
8021eff4: 97 80 00 00  	auipc	ra, 0x8
8021eff8: e7 80 00 58  	jalr	0x580(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h94ef61dbdf157b6aE>
8021effc: 03 35 84 f7  	ld	a0, -0x88(s0)
8021f000: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021f004: 03 35 04 f7  	ld	a0, -0x90(s0)
8021f008: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021f00c: 03 35 84 f6  	ld	a0, -0x98(s0)
8021f010: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021f014: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021f018: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021f01c: 09 a0        	j	0x8021f01e <.Lpcrel_hi15+0x72>
8021f01e: 13 05 84 fb  	addi	a0, s0, -0x48
;             for data_block in data_blocks_dealloc.into_iter() {
8021f022: 97 80 00 00  	auipc	ra, 0x8
8021f026: e7 80 c0 34  	jalr	0x34c(ra) <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E>
8021f02a: 23 2c a4 fc  	sw	a0, -0x28(s0)
8021f02e: 23 2e b4 fc  	sw	a1, -0x24(s0)
8021f032: 03 25 84 fd  	lw	a0, -0x28(s0)
8021f036: 01 ed        	bnez	a0, 0x8021f04e <.Lpcrel_hi15+0xa2>
8021f038: 09 a0        	j	0x8021f03a <.Lpcrel_hi15+0x8e>
8021f03a: 13 05 84 fb  	addi	a0, s0, -0x48
;             for data_block in data_blocks_dealloc.into_iter() {
8021f03e: 97 f0 ff ff  	auipc	ra, 0xfffff
8021f042: e7 80 c0 9c  	jalr	-0x634(ra) <ekernel+0xffcd0a0a>
8021f046: ee 70        	ld	ra, 0xf8(sp)
8021f048: 4e 74        	ld	s0, 0xf0(sp)
;         });
8021f04a: 11 61        	addi	sp, sp, 0x100
8021f04c: 82 80        	ret
;                 fs.dealloc_data(data_block);
8021f04e: 03 25 c4 fd  	lw	a0, -0x24(s0)
8021f052: 23 30 a4 f0  	sd	a0, -0x100(s0)
;             for data_block in data_blocks_dealloc.into_iter() {
8021f056: 23 26 a4 fe  	sw	a0, -0x14(s0)
;                 fs.dealloc_data(data_block);
8021f05a: 03 35 04 f4  	ld	a0, -0xc0(s0)
8021f05e: 97 30 00 00  	auipc	ra, 0x3
8021f062: e7 80 80 5f  	jalr	0x5f8(ra) <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h27ef72a6edfe795fE>
8021f066: 83 35 04 f0  	ld	a1, -0x100(s0)
8021f06a: 97 20 00 00  	auipc	ra, 0x2
8021f06e: e7 80 40 d7  	jalr	-0x28c(ra) <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data17h354df4103d61d886E>
8021f072: 75 b7        	j	0x8021f01e <.Lpcrel_hi15+0x72>

000000008021f074 <_ZN4core4sync6atomic11AtomicUsize16compare_and_swap17hce2f67153e68784aE>:
;             pub fn compare_and_swap(&self,
8021f074: 75 71        	addi	sp, sp, -0x90
8021f076: 06 e5        	sd	ra, 0x88(sp)
8021f078: 22 e1        	sd	s0, 0x80(sp)
8021f07a: 00 09        	addi	s0, sp, 0x90
8021f07c: 23 3c c4 f6  	sd	a2, -0x88(s0)
8021f080: 23 30 b4 f8  	sd	a1, -0x80(s0)
8021f084: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021f088: a3 0f d4 f8  	sb	a3, -0x61(s0)
8021f08c: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021f090: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021f094: 23 38 c4 fc  	sd	a2, -0x30(s0)
;     match order {
8021f098: 03 45 f4 f9  	lbu	a0, -0x61(s0)
8021f09c: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021f0a0: 03 35 04 f9  	ld	a0, -0x70(s0)
;     match order {
8021f0a4: 0e 05        	slli	a0, a0, 0x3

000000008021f0a6 <.Lpcrel_hi0>:
8021f0a6: 97 95 01 00  	auipc	a1, 0x19
8021f0aa: 93 85 25 40  	addi	a1, a1, 0x402
8021f0ae: 2e 95        	add	a0, a0, a1
8021f0b0: 08 61        	ld	a0, 0x0(a0)
8021f0b2: 02 85        	jr	a0
;                 match self.compare_exchange(current,
8021f0b4: 00 00        	unimp

000000008021f0b6 <.LBB0_3>:
8021f0b6: 01 45        	li	a0, 0x0
;         Relaxed => Relaxed,
8021f0b8: a3 0f a4 fa  	sb	a0, -0x41(s0)
8021f0bc: 0d a0        	j	0x8021f0de <.LBB0_7+0x8>

000000008021f0be <.LBB0_4>:
8021f0be: 01 45        	li	a0, 0x0
;         Release => Relaxed,
8021f0c0: a3 0f a4 fa  	sb	a0, -0x41(s0)
8021f0c4: 29 a8        	j	0x8021f0de <.LBB0_7+0x8>

000000008021f0c6 <.LBB0_5>:
8021f0c6: 09 45        	li	a0, 0x2
;         Acquire => Acquire,
8021f0c8: a3 0f a4 fa  	sb	a0, -0x41(s0)
8021f0cc: 09 a8        	j	0x8021f0de <.LBB0_7+0x8>

000000008021f0ce <.LBB0_6>:
8021f0ce: 09 45        	li	a0, 0x2
;         AcqRel => Acquire,
8021f0d0: a3 0f a4 fa  	sb	a0, -0x41(s0)
8021f0d4: 29 a0        	j	0x8021f0de <.LBB0_7+0x8>

000000008021f0d6 <.LBB0_7>:
8021f0d6: 11 45        	li	a0, 0x4
;         SeqCst => SeqCst,
8021f0d8: a3 0f a4 fa  	sb	a0, -0x41(s0)
8021f0dc: 09 a0        	j	0x8021f0de <.LBB0_7+0x8>
8021f0de: 03 36 84 f7  	ld	a2, -0x88(s0)
8021f0e2: 83 35 04 f8  	ld	a1, -0x80(s0)
8021f0e6: 03 35 84 f8  	ld	a0, -0x78(s0)
;                 unsafe { atomic_compare_exchange(self.v.get(), current, new, success, failure) }
8021f0ea: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021f0ee: 03 47 f4 fb  	lbu	a4, -0x41(s0)
8021f0f2: 83 46 f4 f9  	lbu	a3, -0x61(s0)
8021f0f6: 97 40 00 00  	auipc	ra, 0x4
8021f0fa: e7 80 40 1c  	jalr	0x1c4(ra) <_ZN4core4sync6atomic23atomic_compare_exchange17hc21ff81ee1744d3fE>
8021f0fe: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021f102: 23 38 b4 fa  	sd	a1, -0x50(s0)
;                 match self.compare_exchange(current,
8021f106: 03 35 84 fa  	ld	a0, -0x58(s0)
8021f10a: 09 e9        	bnez	a0, 0x8021f11c <.LBB0_7+0x46>
8021f10c: 09 a0        	j	0x8021f10e <.LBB0_7+0x38>
;                     Ok(x) => x,
8021f10e: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f112: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f116: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021f11a: 01 a8        	j	0x8021f12a <.LBB0_7+0x54>
;                     Err(x) => x,
8021f11c: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f120: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021f124: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021f128: 09 a0        	j	0x8021f12a <.LBB0_7+0x54>
;             }
8021f12a: 03 35 04 fa  	ld	a0, -0x60(s0)
8021f12e: aa 60        	ld	ra, 0x88(sp)
8021f130: 0a 64        	ld	s0, 0x80(sp)
8021f132: 49 61        	addi	sp, sp, 0x90
8021f134: 82 80        	ret

000000008021f136 <_ZN4core4sync6atomic11AtomicUsize3new17h99f105a5aa09155fE>:
;             pub const fn new(v: $int_type) -> Self {
8021f136: 79 71        	addi	sp, sp, -0x30
8021f138: 06 f4        	sd	ra, 0x28(sp)
8021f13a: 22 f0        	sd	s0, 0x20(sp)
8021f13c: 00 18        	addi	s0, sp, 0x30
8021f13e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         UnsafeCell { value }
8021f142: 23 30 a4 fe  	sd	a0, -0x20(s0)
;                 Self {v: UnsafeCell::new(v)}
8021f146: 03 35 04 fe  	ld	a0, -0x20(s0)
8021f14a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             }
8021f14e: 03 35 84 fd  	ld	a0, -0x28(s0)
8021f152: a2 70        	ld	ra, 0x28(sp)
8021f154: 02 74        	ld	s0, 0x20(sp)
8021f156: 45 61        	addi	sp, sp, 0x30
8021f158: 82 80        	ret

000000008021f15a <_ZN4core4sync6atomic11AtomicUsize4load17hfc2e9a6b1bc7c93eE>:
;             pub fn load(&self, order: Ordering) -> $int_type {
8021f15a: 79 71        	addi	sp, sp, -0x30
8021f15c: 06 f4        	sd	ra, 0x28(sp)
8021f15e: 22 f0        	sd	s0, 0x20(sp)
8021f160: 00 18        	addi	s0, sp, 0x30
8021f162: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021f166: a3 03 b4 fe  	sb	a1, -0x19(s0)
;                 unsafe { atomic_load(self.v.get(), order) }
8021f16a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021f16e: 97 e0 00 00  	auipc	ra, 0xe
8021f172: e7 80 60 a7  	jalr	-0x58a(ra) <_ZN4core4sync6atomic11atomic_load17h21b744b61142d056E>
8021f176: a2 70        	ld	ra, 0x28(sp)
8021f178: 02 74        	ld	s0, 0x20(sp)
;             }
8021f17a: 45 61        	addi	sp, sp, 0x30
8021f17c: 82 80        	ret

000000008021f17e <_ZN4core4sync6atomic11AtomicUsize5store17h76998bf2a243cf56E>:
;             pub fn store(&self, val: $int_type, order: Ordering) {
8021f17e: 79 71        	addi	sp, sp, -0x30
8021f180: 06 f4        	sd	ra, 0x28(sp)
8021f182: 22 f0        	sd	s0, 0x20(sp)
8021f184: 00 18        	addi	s0, sp, 0x30
8021f186: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021f18a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021f18e: a3 03 c4 fe  	sb	a2, -0x19(s0)
;                 unsafe { atomic_store(self.v.get(), val, order); }
8021f192: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021f196: 97 e0 00 00  	auipc	ra, 0xe
8021f19a: e7 80 40 b6  	jalr	-0x49c(ra) <_ZN4core4sync6atomic12atomic_store17hb88dc25073c81290E>
8021f19e: a2 70        	ld	ra, 0x28(sp)
8021f1a0: 02 74        	ld	s0, 0x20(sp)
;             }
8021f1a2: 45 61        	addi	sp, sp, 0x30
8021f1a4: 82 80        	ret

000000008021f1a6 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h5ae6d4e78e8751d1E>:
;             pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
8021f1a6: 1d 71        	addi	sp, sp, -0x60
8021f1a8: 86 ec        	sd	ra, 0x58(sp)
8021f1aa: a2 e8        	sd	s0, 0x50(sp)
8021f1ac: 80 10        	addi	s0, sp, 0x60
8021f1ae: 23 34 b4 fa  	sd	a1, -0x58(s0)
8021f1b2: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021f1b6: a3 03 c4 fc  	sb	a2, -0x39(s0)
8021f1ba: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021f1be: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 unsafe { atomic_add(self.v.get(), val, order) }
8021f1c2: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8021f1c6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         match order {
8021f1ca: 03 45 74 fc  	lbu	a0, -0x39(s0)
8021f1ce: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021f1d2: 03 35 84 fb  	ld	a0, -0x48(s0)
;         match order {
8021f1d6: 0e 05        	slli	a0, a0, 0x3

000000008021f1d8 <.Lpcrel_hi1>:
8021f1d8: 97 95 01 00  	auipc	a1, 0x19
8021f1dc: 93 85 85 2f  	addi	a1, a1, 0x2f8
8021f1e0: 2e 95        	add	a0, a0, a1
8021f1e2: 08 61        	ld	a0, 0x0(a0)
8021f1e4: 02 85        	jr	a0
8021f1e6: 00 00        	unimp

000000008021f1e8 <.LBB4_3>:
8021f1e8: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f1ec: 83 35 84 fa  	ld	a1, -0x58(s0)
;             Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
8021f1f0: 2f 35 b5 00  	amoadd.d	a0, a1, (a0)
8021f1f4: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021f1f8: a9 a0        	j	0x8021f242 <.LBB4_7+0x12>

000000008021f1fa <.LBB4_4>:
8021f1fa: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f1fe: 83 35 84 fa  	ld	a1, -0x58(s0)
;             Release => intrinsics::atomic_xadd_release(dst, val),
8021f202: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
8021f206: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021f20a: 25 a8        	j	0x8021f242 <.LBB4_7+0x12>

000000008021f20c <.LBB4_5>:
8021f20c: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f210: 83 35 84 fa  	ld	a1, -0x58(s0)
;             Acquire => intrinsics::atomic_xadd_acquire(dst, val),
8021f214: 2f 35 b5 04  	amoadd.d.aq	a0, a1, (a0)
8021f218: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021f21c: 1d a0        	j	0x8021f242 <.LBB4_7+0x12>

000000008021f21e <.LBB4_6>:
8021f21e: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f222: 83 35 84 fa  	ld	a1, -0x58(s0)
;             AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
8021f226: 2f 35 b5 06  	amoadd.d.aqrl	a0, a1, (a0)
8021f22a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021f22e: 11 a8        	j	0x8021f242 <.LBB4_7+0x12>

000000008021f230 <.LBB4_7>:
8021f230: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f234: 83 35 84 fa  	ld	a1, -0x58(s0)
;             SeqCst => intrinsics::atomic_xadd_seqcst(dst, val),
8021f238: 2f 35 b5 06  	amoadd.d.aqrl	a0, a1, (a0)
8021f23c: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021f240: 09 a0        	j	0x8021f242 <.LBB4_7+0x12>
;             }
8021f242: 03 35 84 fc  	ld	a0, -0x38(s0)
8021f246: e6 60        	ld	ra, 0x58(sp)
8021f248: 46 64        	ld	s0, 0x50(sp)
8021f24a: 25 61        	addi	sp, sp, 0x60
8021f24c: 82 80        	ret

000000008021f24e <_ZN4core4sync6atomic14spin_loop_hint17h4e5930ee87a2d556E>:
; pub fn spin_loop_hint() {
8021f24e: 41 11        	addi	sp, sp, -0x10
8021f250: 06 e4        	sd	ra, 0x8(sp)
8021f252: 22 e0        	sd	s0, 0x0(sp)
8021f254: 00 08        	addi	s0, sp, 0x10
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
8021f256: 0f 00 00 01  	fence	w, 0
8021f25a: a2 60        	ld	ra, 0x8(sp)
8021f25c: 02 64        	ld	s0, 0x0(sp)
; }
8021f25e: 41 01        	addi	sp, sp, 0x10
8021f260: 82 80        	ret

000000008021f262 <_ZN100_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h3b56cdabfed3aaacE>:
;     fn start_bound(&self) -> Bound<&T> {
8021f262: 79 71        	addi	sp, sp, -0x30
8021f264: 06 f4        	sd	ra, 0x28(sp)
8021f266: 22 f0        	sd	s0, 0x20(sp)
8021f268: 00 18        	addi	s0, sp, 0x30
8021f26a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Included(&self.start)
8021f26e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f272: 01 45        	li	a0, 0x0
8021f274: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
8021f278: 03 35 84 fd  	ld	a0, -0x28(s0)
8021f27c: 83 35 04 fe  	ld	a1, -0x20(s0)
8021f280: a2 70        	ld	ra, 0x28(sp)
8021f282: 02 74        	ld	s0, 0x20(sp)
8021f284: 45 61        	addi	sp, sp, 0x30
8021f286: 82 80        	ret

000000008021f288 <_ZN100_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h40b4f65fa03260d1E>:
;     fn end_bound(&self) -> Bound<&T> {
8021f288: 79 71        	addi	sp, sp, -0x30
8021f28a: 06 f4        	sd	ra, 0x28(sp)
8021f28c: 22 f0        	sd	s0, 0x20(sp)
8021f28e: 00 18        	addi	s0, sp, 0x30
8021f290: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021f294: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.exhausted {
8021f298: 03 45 05 01  	lbu	a0, 0x10(a0)
8021f29c: 05 89        	andi	a0, a0, 0x1
8021f29e: 19 e9        	bnez	a0, 0x8021f2b4 <_ZN100_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h40b4f65fa03260d1E+0x2c>
8021f2a0: 09 a0        	j	0x8021f2a2 <_ZN100_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h40b4f65fa03260d1E+0x1a>
8021f2a2: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Included(&self.end)
8021f2a6: 21 05        	addi	a0, a0, 0x8
8021f2a8: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f2ac: 01 45        	li	a0, 0x0
8021f2ae: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if self.exhausted {
8021f2b2: 11 a8        	j	0x8021f2c6 <_ZN100_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h40b4f65fa03260d1E+0x3e>
8021f2b4: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Excluded(&self.end)
8021f2b8: 21 05        	addi	a0, a0, 0x8
8021f2ba: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f2be: 05 45        	li	a0, 0x1
8021f2c0: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if self.exhausted {
8021f2c4: 09 a0        	j	0x8021f2c6 <_ZN100_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17h40b4f65fa03260d1E+0x3e>
;     }
8021f2c6: 03 35 84 fd  	ld	a0, -0x28(s0)
8021f2ca: 83 35 04 fe  	ld	a1, -0x20(s0)
8021f2ce: a2 70        	ld	ra, 0x28(sp)
8021f2d0: 02 74        	ld	s0, 0x20(sp)
8021f2d2: 45 61        	addi	sp, sp, 0x30
8021f2d4: 82 80        	ret

000000008021f2d6 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9a67836c2d3a1b78E>:
;     unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
8021f2d6: 71 71        	addi	sp, sp, -0xb0
8021f2d8: 06 f5        	sd	ra, 0xa8(sp)
8021f2da: 22 f1        	sd	s0, 0xa0(sp)
8021f2dc: 00 19        	addi	s0, sp, 0xb0
8021f2de: 23 3c d4 f4  	sd	a3, -0xa8(s0)
8021f2e2: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8021f2e6: 23 34 b4 f6  	sd	a1, -0x98(s0)
8021f2ea: 23 38 a4 f6  	sd	a0, -0x90(s0)
8021f2ee: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021f2f2: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021f2f6: 23 3c c4 fa  	sd	a2, -0x48(s0)
8021f2fa: 23 30 d4 fc  	sd	a3, -0x40(s0)
;         assert_unsafe_precondition!(
8021f2fe: 09 a0        	j	0x8021f300 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9a67836c2d3a1b78E+0x2a>
8021f300: 83 35 84 f6  	ld	a1, -0x98(s0)
8021f304: 03 35 04 f7  	ld	a0, -0x90(s0)
8021f308: 03 36 84 f5  	ld	a2, -0xa8(s0)
8021f30c: 83 36 04 f6  	ld	a3, -0xa0(s0)
;     unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8021f310: 23 3c d4 f6  	sd	a3, -0x88(s0)
8021f314: 23 30 c4 f8  	sd	a2, -0x80(s0)
8021f318: 03 36 04 f8  	ld	a2, -0x80(s0)
;         assert_unsafe_precondition!(
8021f31c: 97 00 00 00  	auipc	ra, 0x0
8021f320: e7 80 00 53  	jalr	0x530(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h4faa23d82de0a489E>
8021f324: 09 a0        	j	0x8021f326 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h9a67836c2d3a1b78E+0x50>
8021f326: 83 35 04 f6  	ld	a1, -0xa0(s0)
8021f32a: 03 36 04 f7  	ld	a2, -0x90(s0)
8021f32e: 03 35 84 f6  	ld	a0, -0x98(s0)
;             let new_len = unchecked_sub(self.end, self.start);
8021f332: 23 34 c4 fc  	sd	a2, -0x38(s0)
8021f336: 11 8d        	sub	a0, a0, a2
8021f338: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self as *const T
8021f33c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { intrinsics::offset(self, count) }
8021f340: b2 95        	add	a1, a1, a2
8021f342: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         self as _
8021f346: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
8021f34a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8021f34e: 23 30 a4 fa  	sd	a0, -0x60(s0)
8021f352: 83 35 84 f9  	ld	a1, -0x68(s0)
8021f356: 03 35 04 fa  	ld	a0, -0x60(s0)
8021f35a: 23 34 b4 f8  	sd	a1, -0x78(s0)
8021f35e: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021f362: 03 35 84 f8  	ld	a0, -0x78(s0)
8021f366: 83 35 04 f9  	ld	a1, -0x70(s0)
8021f36a: aa 70        	ld	ra, 0xa8(sp)
8021f36c: 0a 74        	ld	s0, 0xa0(sp)
;     }
8021f36e: 4d 61        	addi	sp, sp, 0xb0
8021f370: 82 80        	ret

000000008021f372 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hd4b8b1076d4fa802E>:
;     unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
8021f372: 31 71        	addi	sp, sp, -0xc0
8021f374: 06 fd        	sd	ra, 0xb8(sp)
8021f376: 22 f9        	sd	s0, 0xb0(sp)
8021f378: 80 01        	addi	s0, sp, 0xc0
8021f37a: 23 34 d4 f4  	sd	a3, -0xb8(s0)
8021f37e: 23 38 c4 f4  	sd	a2, -0xb0(s0)
8021f382: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021f386: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021f38a: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021f38e: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021f392: 23 34 c4 fa  	sd	a2, -0x58(s0)
8021f396: 23 38 d4 fa  	sd	a3, -0x50(s0)
;         assert_unsafe_precondition!(
8021f39a: 09 a0        	j	0x8021f39c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hd4b8b1076d4fa802E+0x2a>
8021f39c: 83 35 84 f5  	ld	a1, -0xa8(s0)
8021f3a0: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021f3a4: 03 36 84 f4  	ld	a2, -0xb8(s0)
8021f3a8: 83 36 04 f5  	ld	a3, -0xb0(s0)
;         metadata(self)
8021f3ac: 23 3c d4 fa  	sd	a3, -0x48(s0)
8021f3b0: 23 30 c4 fc  	sd	a2, -0x40(s0)
;     unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8021f3b4: 23 34 d4 f6  	sd	a3, -0x98(s0)
8021f3b8: 23 38 c4 f6  	sd	a2, -0x90(s0)
8021f3bc: 03 36 04 f7  	ld	a2, -0x90(s0)
;         assert_unsafe_precondition!(
8021f3c0: 97 00 00 00  	auipc	ra, 0x0
8021f3c4: e7 80 80 4d  	jalr	0x4d8(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h225dfb6cf6b1c14cE>
8021f3c8: 09 a0        	j	0x8021f3ca <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hd4b8b1076d4fa802E+0x58>
8021f3ca: 83 35 04 f5  	ld	a1, -0xb0(s0)
8021f3ce: 03 36 04 f6  	ld	a2, -0xa0(s0)
8021f3d2: 03 35 84 f5  	ld	a0, -0xa8(s0)
;             let new_len = unchecked_sub(self.end, self.start);
8021f3d6: 23 34 c4 fc  	sd	a2, -0x38(s0)
8021f3da: 11 8d        	sub	a0, a0, a2
8021f3dc: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self as *mut T
8021f3e0: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { intrinsics::offset(self, count) }
8021f3e4: b2 95        	add	a1, a1, a2
8021f3e6: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         self as _
8021f3ea: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8021f3ee: 23 34 b4 f8  	sd	a1, -0x78(s0)
8021f3f2: 23 38 a4 f8  	sd	a0, -0x70(s0)
8021f3f6: 83 35 84 f8  	ld	a1, -0x78(s0)
8021f3fa: 03 35 04 f9  	ld	a0, -0x70(s0)
8021f3fe: 23 3c b4 f6  	sd	a1, -0x88(s0)
8021f402: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021f406: 03 35 84 f7  	ld	a0, -0x88(s0)
8021f40a: 83 35 04 f8  	ld	a1, -0x80(s0)
8021f40e: ea 70        	ld	ra, 0xb8(sp)
8021f410: 4a 74        	ld	s0, 0xb0(sp)
;     }
8021f412: 29 61        	addi	sp, sp, 0xc0
8021f414: 82 80        	ret

000000008021f416 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h8a1a44c50b882f6fE>:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
8021f416: 1d 71        	addi	sp, sp, -0x60
8021f418: 86 ec        	sd	ra, 0x58(sp)
8021f41a: a2 e8        	sd	s0, 0x50(sp)
8021f41c: 80 10        	addi	s0, sp, 0x60
8021f41e: 23 34 e4 fa  	sd	a4, -0x58(s0)
8021f422: 23 38 d4 fa  	sd	a3, -0x50(s0)
8021f426: 23 3c c4 fa  	sd	a2, -0x48(s0)
8021f42a: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021f42e: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021f432: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021f436: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021f43a: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021f43e: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         if self.start > self.end {
8021f442: 63 ea a5 00  	bltu	a1, a0, 0x8021f456 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h8a1a44c50b882f6fE+0x40>
8021f446: 09 a0        	j	0x8021f448 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h8a1a44c50b882f6fE+0x32>
8021f448: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f44c: 83 35 04 fc  	ld	a1, -0x40(s0)
;         } else if self.end > slice.len() {
8021f450: 63 6d b5 02  	bltu	a0, a1, 0x8021f48a <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h8a1a44c50b882f6fE+0x74>
8021f454: 19 a8        	j	0x8021f46a <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h8a1a44c50b882f6fE+0x54>
8021f456: 03 36 84 fa  	ld	a2, -0x58(s0)
8021f45a: 83 35 04 fc  	ld	a1, -0x40(s0)
8021f45e: 03 35 84 fc  	ld	a0, -0x38(s0)
;             slice_index_order_fail(self.start, self.end);
8021f462: 97 20 01 00  	auipc	ra, 0x12
8021f466: e7 80 20 28  	jalr	0x282(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
8021f46a: 83 36 04 fb  	ld	a3, -0x50(s0)
8021f46e: 03 36 84 fb  	ld	a2, -0x48(s0)
8021f472: 83 35 04 fc  	ld	a1, -0x40(s0)
8021f476: 03 35 84 fc  	ld	a0, -0x38(s0)
;         unsafe { &mut *self.get_unchecked_mut(slice) }
8021f47a: 97 00 00 00  	auipc	ra, 0x0
8021f47e: e7 80 80 ef  	jalr	-0x108(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hd4b8b1076d4fa802E>
8021f482: e6 60        	ld	ra, 0x58(sp)
8021f484: 46 64        	ld	s0, 0x50(sp)
;     }
8021f486: 25 61        	addi	sp, sp, 0x60
8021f488: 82 80        	ret
8021f48a: 03 36 84 fa  	ld	a2, -0x58(s0)
8021f48e: 83 35 04 fb  	ld	a1, -0x50(s0)
8021f492: 03 35 04 fc  	ld	a0, -0x40(s0)
;             slice_end_index_len_fail(self.end, slice.len());
8021f496: 97 20 01 00  	auipc	ra, 0x12
8021f49a: e7 80 a0 20  	jalr	0x20a(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>

000000008021f49e <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17heb9ac2db82c6e38cE>:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
8021f49e: 39 71        	addi	sp, sp, -0x40
8021f4a0: 06 fc        	sd	ra, 0x38(sp)
8021f4a2: 22 f8        	sd	s0, 0x30(sp)
8021f4a4: 80 00        	addi	s0, sp, 0x40
8021f4a6: 36 87        	mv	a4, a3
8021f4a8: b2 86        	mv	a3, a2
8021f4aa: 2e 86        	mv	a2, a1
8021f4ac: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021f4b0: 23 30 c4 fe  	sd	a2, -0x20(s0)
8021f4b4: 23 34 d4 fe  	sd	a3, -0x18(s0)
8021f4b8: 81 45        	li	a1, 0x0
;         (0..self.end).index_mut(slice)
8021f4ba: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021f4be: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021f4c2: 03 35 84 fc  	ld	a0, -0x38(s0)
8021f4c6: 83 35 04 fd  	ld	a1, -0x30(s0)
8021f4ca: 97 00 00 00  	auipc	ra, 0x0
8021f4ce: e7 80 c0 f4  	jalr	-0xb4(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h8a1a44c50b882f6fE>
8021f4d2: e2 70        	ld	ra, 0x38(sp)
8021f4d4: 42 74        	ld	s0, 0x30(sp)
;     }
8021f4d6: 21 61        	addi	sp, sp, 0x40
8021f4d8: 82 80        	ret

000000008021f4da <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17hdb53cc21ae08c1c5E>:
;     pub const fn new(start: Idx, end: Idx) -> Self {
8021f4da: 79 71        	addi	sp, sp, -0x30
8021f4dc: 06 f4        	sd	ra, 0x28(sp)
8021f4de: 22 f0        	sd	s0, 0x20(sp)
8021f4e0: 00 18        	addi	s0, sp, 0x30
8021f4e2: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021f4e6: aa 85        	mv	a1, a0
8021f4e8: 03 35 84 fd  	ld	a0, -0x28(s0)
8021f4ec: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f4f0: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         Self { start, end, exhausted: false }
8021f4f4: 88 e1        	sd	a0, 0x0(a1)
8021f4f6: 90 e5        	sd	a2, 0x8(a1)
8021f4f8: 01 45        	li	a0, 0x0
8021f4fa: 23 88 a5 00  	sb	a0, 0x10(a1)
8021f4fe: a2 70        	ld	ra, 0x28(sp)
8021f500: 02 74        	ld	s0, 0x20(sp)
;     }
8021f502: 45 61        	addi	sp, sp, 0x30
8021f504: 82 80        	ret

000000008021f506 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h7a050f6a90564633E>:
;     fn next(&mut self) -> Option<A> {
8021f506: 01 11        	addi	sp, sp, -0x20
8021f508: 06 ec        	sd	ra, 0x18(sp)
8021f50a: 22 e8        	sd	s0, 0x10(sp)
8021f50c: 00 10        	addi	s0, sp, 0x20
8021f50e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spec_next()
8021f512: 97 00 00 00  	auipc	ra, 0x0
8021f516: e7 80 60 27  	jalr	0x276(ra) <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5a22029f95e44216E>
8021f51a: e2 60        	ld	ra, 0x18(sp)
8021f51c: 42 64        	ld	s0, 0x10(sp)
;     }
8021f51e: 05 61        	addi	sp, sp, 0x20
8021f520: 82 80        	ret

000000008021f522 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hbed06482cd38729aE>:
;     fn next(&mut self) -> Option<A> {
8021f522: 01 11        	addi	sp, sp, -0x20
8021f524: 06 ec        	sd	ra, 0x18(sp)
8021f526: 22 e8        	sd	s0, 0x10(sp)
8021f528: 00 10        	addi	s0, sp, 0x20
8021f52a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spec_next()
8021f52e: 97 00 00 00  	auipc	ra, 0x0
8021f532: e7 80 40 1e  	jalr	0x1e4(ra) <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h3b939236bb64be38E>
8021f536: e2 60        	ld	ra, 0x18(sp)
8021f538: 42 64        	ld	s0, 0x10(sp)
;     }
8021f53a: 05 61        	addi	sp, sp, 0x20
8021f53c: 82 80        	ret

000000008021f53e <_ZN4core4iter5range105_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..RangeFrom$LT$A$GT$$GT$4next17h6d9986c06bec58d3E>:
;     fn next(&mut self) -> Option<A> {
8021f53e: 1d 71        	addi	sp, sp, -0x60
8021f540: 86 ec        	sd	ra, 0x58(sp)
8021f542: a2 e8        	sd	s0, 0x50(sp)
8021f544: 80 10        	addi	s0, sp, 0x60
8021f546: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021f54a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021f54e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         *self
8021f552: 08 61        	ld	a0, 0x0(a0)
8021f554: 85 45        	li	a1, 0x1
8021f556: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         let n = Step::forward(self.start.clone(), 1);
8021f55a: 97 00 00 00  	auipc	ra, 0x0
8021f55e: e7 80 20 3c  	jalr	0x3c2(ra) <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$7forward17h5e396adeb39dae30E>
8021f562: 83 36 84 fa  	ld	a3, -0x58(s0)
8021f566: 2a 86        	mv	a2, a0
8021f568: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f56c: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         Some(mem::replace(&mut self.start, n))
8021f570: 23 3c d4 fc  	sd	a3, -0x28(s0)
;         crate::intrinsics::read_via_copy(src)
8021f574: 8c 62        	ld	a1, 0x0(a3)
8021f576: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         intrinsics::write_via_move(dst, src)
8021f57a: 90 e2        	sd	a2, 0x0(a3)
;         Some(mem::replace(&mut self.start, n))
8021f57c: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021f580: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
8021f584: 03 35 84 fb  	ld	a0, -0x48(s0)
8021f588: 83 35 04 fc  	ld	a1, -0x40(s0)
8021f58c: e6 60        	ld	ra, 0x58(sp)
8021f58e: 46 64        	ld	s0, 0x50(sp)
8021f590: 25 61        	addi	sp, sp, 0x60
8021f592: 82 80        	ret

000000008021f594 <_ZN4core4iter6traits8iterator8Iterator4find17h0dc0f7f5b1bedbb7E>:
;     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
8021f594: 5d 71        	addi	sp, sp, -0x50
8021f596: 86 e4        	sd	ra, 0x48(sp)
8021f598: a2 e0        	sd	s0, 0x40(sp)
8021f59a: 80 08        	addi	s0, sp, 0x50
8021f59c: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021f5a0: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             move |(), x| {
8021f5a4: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.try_fold((), check(predicate)).break_value()
8021f5a8: 83 35 04 fd  	ld	a1, -0x30(s0)
8021f5ac: 97 00 00 00  	auipc	ra, 0x0
8021f5b0: e7 80 e0 04  	jalr	0x4e(ra) <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E>
8021f5b4: 23 30 a4 fc  	sd	a0, -0x40(s0)
8021f5b8: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match self {
8021f5bc: 03 35 04 fc  	ld	a0, -0x40(s0)
8021f5c0: 11 e5        	bnez	a0, 0x8021f5cc <_ZN4core4iter6traits8iterator8Iterator4find17h0dc0f7f5b1bedbb7E+0x38>
8021f5c2: 09 a0        	j	0x8021f5c4 <_ZN4core4iter6traits8iterator8Iterator4find17h0dc0f7f5b1bedbb7E+0x30>
8021f5c4: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(..) => None,
8021f5c6: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021f5ca: 19 a8        	j	0x8021f5e0 <_ZN4core4iter6traits8iterator8Iterator4find17h0dc0f7f5b1bedbb7E+0x4c>
;             ControlFlow::Break(x) => Some(x),
8021f5cc: 03 35 84 fc  	ld	a0, -0x38(s0)
8021f5d0: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021f5d4: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021f5d8: 05 45        	li	a0, 0x1
8021f5da: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021f5de: 09 a0        	j	0x8021f5e0 <_ZN4core4iter6traits8iterator8Iterator4find17h0dc0f7f5b1bedbb7E+0x4c>
;     }
8021f5e0: 03 35 04 fc  	ld	a0, -0x40(s0)
8021f5e4: 11 c9        	beqz	a0, 0x8021f5f8 <_ZN4core4iter6traits8iterator8Iterator4find17h0dc0f7f5b1bedbb7E+0x64>
8021f5e6: 09 a0        	j	0x8021f5e8 <_ZN4core4iter6traits8iterator8Iterator4find17h0dc0f7f5b1bedbb7E+0x54>
;     }
8021f5e8: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f5ec: 83 35 84 fb  	ld	a1, -0x48(s0)
8021f5f0: a6 60        	ld	ra, 0x48(sp)
8021f5f2: 06 64        	ld	s0, 0x40(sp)
8021f5f4: 61 61        	addi	sp, sp, 0x50
8021f5f6: 82 80        	ret
;     }
8021f5f8: c5 bf        	j	0x8021f5e8 <_ZN4core4iter6traits8iterator8Iterator4find17h0dc0f7f5b1bedbb7E+0x54>

000000008021f5fa <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E>:
;     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
8021f5fa: 19 71        	addi	sp, sp, -0x80
8021f5fc: 86 fc        	sd	ra, 0x78(sp)
8021f5fe: a2 f8        	sd	s0, 0x70(sp)
8021f600: 00 01        	addi	s0, sp, 0x80
8021f602: 23 34 a4 f8  	sd	a0, -0x78(s0)
8021f606: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021f60a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         while let Some(x) = self.next() {
8021f60e: 09 a0        	j	0x8021f610 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E+0x16>
8021f610: 03 35 84 f8  	ld	a0, -0x78(s0)
;         while let Some(x) = self.next() {
8021f614: 97 00 00 00  	auipc	ra, 0x0
8021f618: e7 80 a0 f2  	jalr	-0xd6(ra) <_ZN4core4iter5range105_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..RangeFrom$LT$A$GT$$GT$4next17h6d9986c06bec58d3E>
8021f61c: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021f620: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021f624: 03 35 84 fa  	ld	a0, -0x58(s0)
8021f628: 05 cd        	beqz	a0, 0x8021f660 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E+0x66>
8021f62a: 09 a0        	j	0x8021f62c <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E+0x32>
8021f62c: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f630: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             accum = f(accum, x)?;
8021f634: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021f638: 83 35 84 fc  	ld	a1, -0x38(s0)
8021f63c: 13 05 04 f9  	addi	a0, s0, -0x70
8021f640: 97 00 00 00  	auipc	ra, 0x0
8021f644: e7 80 80 3a  	jalr	0x3a8(ra) <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h6bc61968b743c035E>
8021f648: 97 30 00 00  	auipc	ra, 0x3
8021f64c: e7 80 00 88  	jalr	-0x780(ra) <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb2dda92780297961E>
8021f650: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021f654: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021f658: 03 35 84 fb  	ld	a0, -0x48(s0)
8021f65c: 19 c9        	beqz	a0, 0x8021f672 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E+0x78>
8021f65e: 19 a8        	j	0x8021f674 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E+0x7a>
;         try { accum }
8021f660: 97 20 00 00  	auipc	ra, 0x2
8021f664: e7 80 c0 75  	jalr	0x75c(ra) <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$11from_output17h7c96df3a57e5d9bbE>
8021f668: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021f66c: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
8021f670: 39 a8        	j	0x8021f68e <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E+0x94>
;         while let Some(x) = self.next() {
8021f672: 79 bf        	j	0x8021f610 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E+0x16>
;             accum = f(accum, x)?;
8021f674: 03 35 04 fc  	ld	a0, -0x40(s0)
8021f678: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021f67c: 97 20 00 00  	auipc	ra, 0x2
8021f680: e7 80 e0 67  	jalr	0x67e(ra) <_ZN104_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h2065911b56788f4aE>
8021f684: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021f688: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
8021f68c: 09 a0        	j	0x8021f68e <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf1f4bcacea8d6f27E+0x94>
8021f68e: 03 35 84 f9  	ld	a0, -0x68(s0)
8021f692: 83 35 04 fa  	ld	a1, -0x60(s0)
8021f696: e6 70        	ld	ra, 0x78(sp)
8021f698: 46 74        	ld	s0, 0x70(sp)
8021f69a: 09 61        	addi	sp, sp, 0x80
8021f69c: 82 80        	ret

000000008021f69e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h074e9796a28cb35dE>:
;     fn into_iter(self) -> I {
8021f69e: 01 11        	addi	sp, sp, -0x20
8021f6a0: 06 ec        	sd	ra, 0x18(sp)
8021f6a2: 22 e8        	sd	s0, 0x10(sp)
8021f6a4: 00 10        	addi	s0, sp, 0x20
8021f6a6: 23 24 a4 fe  	sw	a0, -0x18(s0)
8021f6aa: 23 26 b4 fe  	sw	a1, -0x14(s0)
8021f6ae: e2 60        	ld	ra, 0x18(sp)
8021f6b0: 42 64        	ld	s0, 0x10(sp)
;     }
8021f6b2: 05 61        	addi	sp, sp, 0x20
8021f6b4: 82 80        	ret

000000008021f6b6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h8c0f6167b2db80edE>:
;     fn into_iter(self) -> I {
8021f6b6: 01 11        	addi	sp, sp, -0x20
8021f6b8: 06 ec        	sd	ra, 0x18(sp)
8021f6ba: 22 e8        	sd	s0, 0x10(sp)
8021f6bc: 00 10        	addi	s0, sp, 0x20
8021f6be: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f6c2: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021f6c6: e2 60        	ld	ra, 0x18(sp)
8021f6c8: 42 64        	ld	s0, 0x10(sp)
;     }
8021f6ca: 05 61        	addi	sp, sp, 0x20
8021f6cc: 82 80        	ret

000000008021f6ce <_ZN86_$LT$core..ops..range..RangeFull$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h47f562922c0a44aeE>:
;     fn start_bound(&self) -> Bound<&T> {
8021f6ce: 79 71        	addi	sp, sp, -0x30
8021f6d0: 06 f4        	sd	ra, 0x28(sp)
8021f6d2: 22 f0        	sd	s0, 0x20(sp)
8021f6d4: 00 18        	addi	s0, sp, 0x30
8021f6d6: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021f6da: 09 45        	li	a0, 0x2
;         Unbounded
8021f6dc: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
8021f6e0: 03 35 84 fd  	ld	a0, -0x28(s0)
8021f6e4: 83 35 04 fe  	ld	a1, -0x20(s0)
8021f6e8: a2 70        	ld	ra, 0x28(sp)
8021f6ea: 02 74        	ld	s0, 0x20(sp)
8021f6ec: 45 61        	addi	sp, sp, 0x30
8021f6ee: 82 80        	ret

000000008021f6f0 <_ZN86_$LT$core..ops..range..RangeFull$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17hf6d2b0d886d4d715E>:
;     fn end_bound(&self) -> Bound<&T> {
8021f6f0: 79 71        	addi	sp, sp, -0x30
8021f6f2: 06 f4        	sd	ra, 0x28(sp)
8021f6f4: 22 f0        	sd	s0, 0x20(sp)
8021f6f6: 00 18        	addi	s0, sp, 0x30
8021f6f8: 23 34 a4 fe  	sd	a0, -0x18(s0)
8021f6fc: 09 45        	li	a0, 0x2
;         Unbounded
8021f6fe: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
8021f702: 03 35 84 fd  	ld	a0, -0x28(s0)
8021f706: 83 35 04 fe  	ld	a1, -0x20(s0)
8021f70a: a2 70        	ld	ra, 0x28(sp)
8021f70c: 02 74        	ld	s0, 0x20(sp)
8021f70e: 45 61        	addi	sp, sp, 0x30
8021f710: 82 80        	ret

000000008021f712 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h3b939236bb64be38E>:
;     fn spec_next(&mut self) -> Option<T> {
8021f712: 1d 71        	addi	sp, sp, -0x60
8021f714: 86 ec        	sd	ra, 0x58(sp)
8021f716: a2 e8        	sd	s0, 0x50(sp)
8021f718: 80 10        	addi	s0, sp, 0x60
8021f71a: aa 85        	mv	a1, a0
8021f71c: 23 3c b4 fa  	sd	a1, -0x48(s0)
8021f720: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         if self.start < self.end {
8021f724: 13 85 85 00  	addi	a0, a1, 0x8
8021f728: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021f72c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
8021f730: 88 61        	ld	a0, 0x0(a1)
8021f732: 8c 65        	ld	a1, 0x8(a1)
;         if self.start < self.end {
8021f734: 63 67 b5 00  	bltu	a0, a1, 0x8021f742 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h3b939236bb64be38E+0x30>
8021f738: 09 a0        	j	0x8021f73a <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h3b939236bb64be38E+0x28>
8021f73a: 01 45        	li	a0, 0x0
;             None
8021f73c: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if self.start < self.end {
8021f740: 25 a8        	j	0x8021f778 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h3b939236bb64be38E+0x66>
8021f742: 03 35 84 fb  	ld	a0, -0x48(s0)
;             let old = self.start;
8021f746: 08 61        	ld	a0, 0x0(a0)
8021f748: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021f74c: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021f750: 85 45        	li	a1, 0x1
8021f752: 23 38 b4 fa  	sd	a1, -0x50(s0)
;             self.start = unsafe { Step::forward_unchecked(old, 1) };
8021f756: 97 00 00 00  	auipc	ra, 0x0
8021f75a: e7 80 c0 1a  	jalr	0x1ac(ra) <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hefe2c1028d6c51f9E>
8021f75e: 83 36 84 fb  	ld	a3, -0x48(s0)
8021f762: 83 35 84 fa  	ld	a1, -0x58(s0)
8021f766: 2a 86        	mv	a2, a0
8021f768: 03 35 04 fb  	ld	a0, -0x50(s0)
8021f76c: 90 e2        	sd	a2, 0x0(a3)
;             Some(old)
8021f76e: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021f772: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if self.start < self.end {
8021f776: 09 a0        	j	0x8021f778 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h3b939236bb64be38E+0x66>
;     }
8021f778: 03 35 04 fc  	ld	a0, -0x40(s0)
8021f77c: 83 35 84 fc  	ld	a1, -0x38(s0)
8021f780: e6 60        	ld	ra, 0x58(sp)
8021f782: 46 64        	ld	s0, 0x50(sp)
8021f784: 25 61        	addi	sp, sp, 0x60
8021f786: 82 80        	ret

000000008021f788 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5a22029f95e44216E>:
;     fn spec_next(&mut self) -> Option<T> {
8021f788: 5d 71        	addi	sp, sp, -0x50
8021f78a: 86 e4        	sd	ra, 0x48(sp)
8021f78c: a2 e0        	sd	s0, 0x40(sp)
8021f78e: 80 08        	addi	s0, sp, 0x50
8021f790: aa 85        	mv	a1, a0
8021f792: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021f796: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         if self.start < self.end {
8021f79a: 13 85 45 00  	addi	a0, a1, 0x4
8021f79e: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021f7a2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
8021f7a6: 88 41        	lw	a0, 0x0(a1)
8021f7a8: cc 41        	lw	a1, 0x4(a1)
;         if self.start < self.end {
8021f7aa: 63 67 b5 00  	bltu	a0, a1, 0x8021f7b8 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5a22029f95e44216E+0x30>
8021f7ae: 09 a0        	j	0x8021f7b0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5a22029f95e44216E+0x28>
8021f7b0: 01 45        	li	a0, 0x0
;             None
8021f7b2: 23 24 a4 fc  	sw	a0, -0x38(s0)
;         if self.start < self.end {
8021f7b6: 25 a8        	j	0x8021f7ee <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5a22029f95e44216E+0x66>
8021f7b8: 03 35 04 fc  	ld	a0, -0x40(s0)
;             self.start = unsafe { Step::forward_unchecked(old, 1) };
8021f7bc: 08 41        	lw	a0, 0x0(a0)
8021f7be: 23 38 a4 fa  	sd	a0, -0x50(s0)
;             let old = self.start;
8021f7c2: 23 2e a4 fc  	sw	a0, -0x24(s0)
8021f7c6: 85 45        	li	a1, 0x1
8021f7c8: 23 3c b4 fa  	sd	a1, -0x48(s0)
;             self.start = unsafe { Step::forward_unchecked(old, 1) };
8021f7cc: 97 00 00 00  	auipc	ra, 0x0
8021f7d0: e7 80 80 11  	jalr	0x118(ra) <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h61393a1bb564ce24E>
8021f7d4: 83 36 04 fc  	ld	a3, -0x40(s0)
8021f7d8: 83 35 04 fb  	ld	a1, -0x50(s0)
8021f7dc: 2a 86        	mv	a2, a0
8021f7de: 03 35 84 fb  	ld	a0, -0x48(s0)
8021f7e2: 90 c2        	sw	a2, 0x0(a3)
;             Some(old)
8021f7e4: 23 26 b4 fc  	sw	a1, -0x34(s0)
8021f7e8: 23 24 a4 fc  	sw	a0, -0x38(s0)
;         if self.start < self.end {
8021f7ec: 09 a0        	j	0x8021f7ee <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h5a22029f95e44216E+0x66>
;     }
8021f7ee: 03 25 84 fc  	lw	a0, -0x38(s0)
8021f7f2: 83 25 c4 fc  	lw	a1, -0x34(s0)
8021f7f6: a6 60        	ld	ra, 0x48(sp)
8021f7f8: 06 64        	ld	s0, 0x40(sp)
8021f7fa: 61 61        	addi	sp, sp, 0x50
8021f7fc: 82 80        	ret

000000008021f7fe <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$11start_bound17h9ca6d9cc02762c64E>:
;     fn start_bound(&self) -> Bound<&T> {
8021f7fe: 79 71        	addi	sp, sp, -0x30
8021f800: 06 f4        	sd	ra, 0x28(sp)
8021f802: 22 f0        	sd	s0, 0x20(sp)
8021f804: 00 18        	addi	s0, sp, 0x30
8021f806: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Included(&self.start)
8021f80a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f80e: 01 45        	li	a0, 0x0
8021f810: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
8021f814: 03 35 84 fd  	ld	a0, -0x28(s0)
8021f818: 83 35 04 fe  	ld	a1, -0x20(s0)
8021f81c: a2 70        	ld	ra, 0x28(sp)
8021f81e: 02 74        	ld	s0, 0x20(sp)
8021f820: 45 61        	addi	sp, sp, 0x30
8021f822: 82 80        	ret

000000008021f824 <_ZN91_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..ops..range..RangeBounds$LT$T$GT$$GT$9end_bound17hd9b7d9b16c9d32f9E>:
;     fn end_bound(&self) -> Bound<&T> {
8021f824: 79 71        	addi	sp, sp, -0x30
8021f826: 06 f4        	sd	ra, 0x28(sp)
8021f828: 22 f0        	sd	s0, 0x20(sp)
8021f82a: 00 18        	addi	s0, sp, 0x30
8021f82c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Excluded(&self.end)
8021f830: 21 05        	addi	a0, a0, 0x8
8021f832: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f836: 05 45        	li	a0, 0x1
8021f838: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
8021f83c: 03 35 84 fd  	ld	a0, -0x28(s0)
8021f840: 83 35 04 fe  	ld	a1, -0x20(s0)
8021f844: a2 70        	ld	ra, 0x28(sp)
8021f846: 02 74        	ld	s0, 0x20(sp)
8021f848: 45 61        	addi	sp, sp, 0x30
8021f84a: 82 80        	ret

000000008021f84c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h4faa23d82de0a489E>:
;             const fn precondition_check($($name:$ty),*) {
8021f84c: 39 71        	addi	sp, sp, -0x40
8021f84e: 06 fc        	sd	ra, 0x38(sp)
8021f850: 22 f8        	sd	s0, 0x30(sp)
8021f852: 80 00        	addi	s0, sp, 0x40
8021f854: 23 34 c4 fc  	sd	a2, -0x38(s0)
8021f858: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021f85c: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021f860: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021f864: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             ) => end >= start && end <= len
8021f868: 63 fd a5 00  	bgeu	a1, a0, 0x8021f882 <.Lpcrel_hi0+0x14>
8021f86c: 09 a0        	j	0x8021f86e <.Lpcrel_hi0>

000000008021f86e <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
8021f86e: 17 95 01 00  	auipc	a0, 0x19
8021f872: 13 05 a5 c8  	addi	a0, a0, -0x376
8021f876: 93 05 10 06  	li	a1, 0x61
8021f87a: 97 10 01 00  	auipc	ra, 0x11
8021f87e: e7 80 60 9c  	jalr	-0x63a(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8021f882: 03 35 84 fc  	ld	a0, -0x38(s0)
8021f886: 83 35 04 fd  	ld	a1, -0x30(s0)
;             ) => end >= start && end <= len
8021f88a: e3 62 b5 fe  	bltu	a0, a1, 0x8021f86e <.Lpcrel_hi0>
8021f88e: 09 a0        	j	0x8021f890 <.Lpcrel_hi0+0x22>
8021f890: e2 70        	ld	ra, 0x38(sp)
8021f892: 42 74        	ld	s0, 0x30(sp)
;             }
8021f894: 21 61        	addi	sp, sp, 0x40
8021f896: 82 80        	ret

000000008021f898 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut18precondition_check17h225dfb6cf6b1c14cE>:
;             const fn precondition_check($($name:$ty),*) {
8021f898: 39 71        	addi	sp, sp, -0x40
8021f89a: 06 fc        	sd	ra, 0x38(sp)
8021f89c: 22 f8        	sd	s0, 0x30(sp)
8021f89e: 80 00        	addi	s0, sp, 0x40
8021f8a0: 23 34 c4 fc  	sd	a2, -0x38(s0)
8021f8a4: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021f8a8: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021f8ac: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021f8b0: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             ) => end >= start && end <= len
8021f8b4: 63 fd a5 00  	bgeu	a1, a0, 0x8021f8ce <.Lpcrel_hi1+0x14>
8021f8b8: 09 a0        	j	0x8021f8ba <.Lpcrel_hi1>

000000008021f8ba <.Lpcrel_hi1>:
;                     ::core::panicking::panic_nounwind(
8021f8ba: 17 95 01 00  	auipc	a0, 0x19
8021f8be: 13 05 f5 c9  	addi	a0, a0, -0x361
8021f8c2: 93 05 50 06  	li	a1, 0x65
8021f8c6: 97 10 01 00  	auipc	ra, 0x11
8021f8ca: e7 80 a0 97  	jalr	-0x686(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8021f8ce: 03 35 84 fc  	ld	a0, -0x38(s0)
8021f8d2: 83 35 04 fd  	ld	a1, -0x30(s0)
;             ) => end >= start && end <= len
8021f8d6: e3 62 b5 fe  	bltu	a0, a1, 0x8021f8ba <.Lpcrel_hi1>
8021f8da: 09 a0        	j	0x8021f8dc <.Lpcrel_hi1+0x22>
8021f8dc: e2 70        	ld	ra, 0x38(sp)
8021f8de: 42 74        	ld	s0, 0x30(sp)
;             }
8021f8e0: 21 61        	addi	sp, sp, 0x40
8021f8e2: 82 80        	ret

000000008021f8e4 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h61393a1bb564ce24E>:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
8021f8e4: 79 71        	addi	sp, sp, -0x30
8021f8e6: 06 f4        	sd	ra, 0x28(sp)
8021f8e8: 22 f0        	sd	s0, 0x20(sp)
8021f8ea: 00 18        	addi	s0, sp, 0x30
8021f8ec: 23 2e a4 fc  	sw	a0, -0x24(s0)
8021f8f0: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             unsafe { start.unchecked_add(n as Self) }
8021f8f4: 23 26 b4 fe  	sw	a1, -0x14(s0)
;     uint_impl! {
8021f8f8: 2d 9d        	addw	a0, a0, a1
8021f8fa: a2 70        	ld	ra, 0x28(sp)
8021f8fc: 02 74        	ld	s0, 0x20(sp)
;         }
8021f8fe: 45 61        	addi	sp, sp, 0x30
8021f900: 82 80        	ret

000000008021f902 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hefe2c1028d6c51f9E>:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
8021f902: 01 11        	addi	sp, sp, -0x20
8021f904: 06 ec        	sd	ra, 0x18(sp)
8021f906: 22 e8        	sd	s0, 0x10(sp)
8021f908: 00 10        	addi	s0, sp, 0x20
8021f90a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f90e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     uint_impl! {
8021f912: 2e 95        	add	a0, a0, a1
8021f914: e2 60        	ld	ra, 0x18(sp)
8021f916: 42 64        	ld	s0, 0x10(sp)
;         }
8021f918: 05 61        	addi	sp, sp, 0x20
8021f91a: 82 80        	ret

000000008021f91c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$7forward17h5e396adeb39dae30E>:
;         fn forward(start: Self, n: usize) -> Self {
8021f91c: 59 71        	addi	sp, sp, -0x70
8021f91e: 86 f4        	sd	ra, 0x68(sp)
8021f920: a2 f0        	sd	s0, 0x60(sp)
8021f922: 80 18        	addi	s0, sp, 0x70
8021f924: 23 38 b4 f8  	sd	a1, -0x70(s0)
8021f928: 23 3c a4 f8  	sd	a0, -0x68(s0)
8021f92c: 23 3c a4 fa  	sd	a0, -0x48(s0)
8021f930: 23 30 b4 fc  	sd	a1, -0x40(s0)
;     uint_impl! {
8021f934: aa 95        	add	a1, a1, a0
8021f936: 23 30 b4 fa  	sd	a1, -0x60(s0)
8021f93a: 33 b5 a5 00  	sltu	a0, a1, a0
8021f93e: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021f942: a3 0b a4 fc  	sb	a0, -0x29(s0)
8021f946: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021f94a: a3 03 a4 fe  	sb	a0, -0x19(s0)
8021f94e: 03 45 74 fe  	lbu	a0, -0x19(s0)
8021f952: 05 89        	andi	a0, a0, 0x1
8021f954: 11 e9        	bnez	a0, 0x8021f968 <.Lpcrel_hi0>
8021f956: 09 a0        	j	0x8021f958 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$7forward17h5e396adeb39dae30E+0x3c>
8021f958: 03 35 04 fa  	ld	a0, -0x60(s0)
;     uint_impl! {
8021f95c: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021f960: 05 45        	li	a0, 0x1
8021f962: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021f966: 21 a8        	j	0x8021f97e <.Lpcrel_hi0+0x16>

000000008021f968 <.Lpcrel_hi0>:
8021f968: 17 45 01 00  	auipc	a0, 0x14
8021f96c: 13 05 85 92  	addi	a0, a0, -0x6d8
8021f970: 0c 61        	ld	a1, 0x0(a0)
8021f972: 08 65        	ld	a0, 0x8(a0)
8021f974: 23 34 b4 fa  	sd	a1, -0x58(s0)
8021f978: 23 38 a4 fa  	sd	a0, -0x50(s0)
8021f97c: 09 a0        	j	0x8021f97e <.Lpcrel_hi0+0x16>
8021f97e: 13 05 84 fa  	addi	a0, s0, -0x58
;             if Self::forward_checked(start, n).is_none() {
8021f982: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         matches!(*self, Some(_))
8021f986: 03 35 84 fa  	ld	a0, -0x58(s0)
8021f98a: 19 c1        	beqz	a0, 0x8021f990 <.Lpcrel_hi0+0x28>
8021f98c: 09 a0        	j	0x8021f98e <.Lpcrel_hi0+0x26>
;             if Self::forward_checked(start, n).is_none() {
8021f98e: 21 a0        	j	0x8021f996 <.Lpcrel_hi0+0x2e>
8021f990: 05 45        	li	a0, 0x1
;                 let _ = Self::MAX + 1;
8021f992: 19 e9        	bnez	a0, 0x8021f9a8 <.Lpcrel_hi1>
8021f994: 09 a0        	j	0x8021f996 <.Lpcrel_hi0+0x2e>
8021f996: 03 35 84 f9  	ld	a0, -0x68(s0)
8021f99a: 83 35 04 f9  	ld	a1, -0x70(s0)
;     uint_impl! {
8021f99e: 2e 95        	add	a0, a0, a1
8021f9a0: a6 70        	ld	ra, 0x68(sp)
8021f9a2: 06 74        	ld	s0, 0x60(sp)
;         }
8021f9a4: 65 61        	addi	sp, sp, 0x70
8021f9a6: 82 80        	ret

000000008021f9a8 <.Lpcrel_hi1>:
;                 let _ = Self::MAX + 1;
8021f9a8: 17 95 01 00  	auipc	a0, 0x19
8021f9ac: 13 05 85 ca  	addi	a0, a0, -0x358

000000008021f9b0 <.Lpcrel_hi2>:
8021f9b0: 97 95 01 00  	auipc	a1, 0x19
8021f9b4: 13 86 85 c8  	addi	a2, a1, -0x378
8021f9b8: f1 45        	li	a1, 0x1c
8021f9ba: 97 10 01 00  	auipc	ra, 0x11
8021f9be: e7 80 e0 85  	jalr	-0x7a2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021f9c2 <_ZN4core3ops8function5impls79_$LT$impl$u20$core..ops..function..FnMut$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$8call_mut17hb97cfaffc931d2b7E>:
;         extern "rust-call" fn call_mut(&mut self, args: A) -> F::Output {
8021f9c2: 01 11        	addi	sp, sp, -0x20
8021f9c4: 06 ec        	sd	ra, 0x18(sp)
8021f9c6: 22 e8        	sd	s0, 0x10(sp)
8021f9c8: 00 10        	addi	s0, sp, 0x20
8021f9ca: 23 30 b4 fe  	sd	a1, -0x20(s0)
8021f9ce: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             (*self).call_mut(args)
8021f9d2: 08 61        	ld	a0, 0x0(a0)
8021f9d4: 83 35 04 fe  	ld	a1, -0x20(s0)
8021f9d8: 97 00 00 00  	auipc	ra, 0x0
8021f9dc: e7 80 60 0b  	jalr	0xb6(ra) <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hb6490c484f9bc75eE>
8021f9e0: e2 60        	ld	ra, 0x18(sp)
8021f9e2: 42 64        	ld	s0, 0x10(sp)
;         }
8021f9e4: 05 61        	addi	sp, sp, 0x20
8021f9e6: 82 80        	ret

000000008021f9e8 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h6bc61968b743c035E>:
;             move |(), x| {
8021f9e8: 39 71        	addi	sp, sp, -0x40
8021f9ea: 06 fc        	sd	ra, 0x38(sp)
8021f9ec: 22 f8        	sd	s0, 0x30(sp)
8021f9ee: 80 00        	addi	s0, sp, 0x40
8021f9f0: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021f9f4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021f9f8: 93 05 04 fc  	addi	a1, s0, -0x40
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021f9fc: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021fa00: 83 35 84 fd  	ld	a1, -0x28(s0)
8021fa04: 97 10 00 00  	auipc	ra, 0x1
8021fa08: e7 80 40 e6  	jalr	-0x19c(ra) <_ZN7easy_fs6layout8DirEntry4name28_$u7b$$u7b$closure$u7d$$u7d$17h5b244563f6cf133cE>
8021fa0c: 11 e5        	bnez	a0, 0x8021fa18 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h6bc61968b743c035E+0x30>
8021fa0e: 09 a0        	j	0x8021fa10 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h6bc61968b743c035E+0x28>
8021fa10: 01 45        	li	a0, 0x0
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021fa12: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             }
8021fa16: 09 a8        	j	0x8021fa28 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h6bc61968b743c035E+0x40>
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021fa18: 03 35 04 fc  	ld	a0, -0x40(s0)
8021fa1c: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021fa20: 05 45        	li	a0, 0x1
8021fa22: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             }
8021fa26: 09 a0        	j	0x8021fa28 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h6bc61968b743c035E+0x40>
8021fa28: 03 35 84 fc  	ld	a0, -0x38(s0)
8021fa2c: 83 35 04 fd  	ld	a1, -0x30(s0)
8021fa30: e2 70        	ld	ra, 0x38(sp)
8021fa32: 42 74        	ld	s0, 0x30(sp)
8021fa34: 21 61        	addi	sp, sp, 0x40
8021fa36: 82 80        	ret

000000008021fa38 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h7a14cdd5524297dfE>:
;             move |(), x| {
8021fa38: 5d 71        	addi	sp, sp, -0x50
8021fa3a: 86 e4        	sd	ra, 0x48(sp)
8021fa3c: a2 e0        	sd	s0, 0x40(sp)
8021fa3e: 80 08        	addi	s0, sp, 0x50
8021fa40: 23 3c b4 fa  	sd	a1, -0x48(s0)
8021fa44: 23 30 c4 fc  	sd	a2, -0x40(s0)
8021fa48: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021fa4c: 93 05 84 fb  	addi	a1, s0, -0x48
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021fa50: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021fa54: 83 35 84 fd  	ld	a1, -0x28(s0)
8021fa58: 97 20 00 00  	auipc	ra, 0x2
8021fa5c: e7 80 60 6f  	jalr	0x6f6(ra) <_ZN7easy_fs6bitmap6Bitmap5alloc28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h27ee26d0dbe1dc0aE>
8021fa60: 11 e5        	bnez	a0, 0x8021fa6c <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h7a14cdd5524297dfE+0x34>
8021fa62: 09 a0        	j	0x8021fa64 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h7a14cdd5524297dfE+0x2c>
8021fa64: 01 45        	li	a0, 0x0
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021fa66: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             }
8021fa6a: 11 a8        	j	0x8021fa7e <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h7a14cdd5524297dfE+0x46>
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021fa6c: 83 35 84 fb  	ld	a1, -0x48(s0)
8021fa70: 03 35 04 fc  	ld	a0, -0x40(s0)
8021fa74: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021fa78: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             }
8021fa7c: 09 a0        	j	0x8021fa7e <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17h7a14cdd5524297dfE+0x46>
8021fa7e: 03 35 84 fc  	ld	a0, -0x38(s0)
8021fa82: 83 35 04 fd  	ld	a1, -0x30(s0)
8021fa86: a6 60        	ld	ra, 0x48(sp)
8021fa88: 06 64        	ld	s0, 0x40(sp)
8021fa8a: 61 61        	addi	sp, sp, 0x50
8021fa8c: 82 80        	ret

000000008021fa8e <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hb6490c484f9bc75eE>:
;             move |(), x| {
8021fa8e: 39 71        	addi	sp, sp, -0x40
8021fa90: 06 fc        	sd	ra, 0x38(sp)
8021fa92: 22 f8        	sd	s0, 0x30(sp)
8021fa94: 80 00        	addi	s0, sp, 0x40
8021fa96: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021fa9a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021fa9e: 93 05 84 fc  	addi	a1, s0, -0x38
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021faa2: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021faa6: 83 35 84 fd  	ld	a1, -0x28(s0)
8021faaa: 97 20 00 00  	auipc	ra, 0x2
8021faae: e7 80 c0 f1  	jalr	-0xe4(ra) <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache28_$u7b$$u7b$closure$u7d$$u7d$17h50e763f814c0796aE>
8021fab2: 11 e5        	bnez	a0, 0x8021fabe <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hb6490c484f9bc75eE+0x30>
8021fab4: 09 a0        	j	0x8021fab6 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hb6490c484f9bc75eE+0x28>
8021fab6: 01 45        	li	a0, 0x0
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021fab8: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             }
8021fabc: 31 a0        	j	0x8021fac8 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hb6490c484f9bc75eE+0x3a>
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021fabe: 03 35 84 fc  	ld	a0, -0x38(s0)
8021fac2: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             }
8021fac6: 09 a0        	j	0x8021fac8 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hb6490c484f9bc75eE+0x3a>
8021fac8: 03 35 04 fd  	ld	a0, -0x30(s0)
8021facc: e2 70        	ld	ra, 0x38(sp)
8021face: 42 74        	ld	s0, 0x30(sp)
8021fad0: 21 61        	addi	sp, sp, 0x40
8021fad2: 82 80        	ret

000000008021fad4 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hd3cdb4f6e86845d3E>:
;             move |(), x| {
8021fad4: 5d 71        	addi	sp, sp, -0x50
8021fad6: 86 e4        	sd	ra, 0x48(sp)
8021fad8: a2 e0        	sd	s0, 0x40(sp)
8021fada: 80 08        	addi	s0, sp, 0x50
8021fadc: 23 3c b4 fa  	sd	a1, -0x48(s0)
8021fae0: 23 30 c4 fc  	sd	a2, -0x40(s0)
8021fae4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021fae8: 93 05 84 fb  	addi	a1, s0, -0x48
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021faec: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021faf0: 83 35 84 fd  	ld	a1, -0x28(s0)
8021faf4: 97 20 00 00  	auipc	ra, 0x2
8021faf8: e7 80 20 f0  	jalr	-0xfe(ra) <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache28_$u7b$$u7b$closure$u7d$$u7d$17h7decd9888b0c50e5E>
8021fafc: 11 e5        	bnez	a0, 0x8021fb08 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hd3cdb4f6e86845d3E+0x34>
8021fafe: 09 a0        	j	0x8021fb00 <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hd3cdb4f6e86845d3E+0x2c>
8021fb00: 01 45        	li	a0, 0x0
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021fb02: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             }
8021fb06: 11 a8        	j	0x8021fb1a <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hd3cdb4f6e86845d3E+0x46>
;                 if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
8021fb08: 83 35 84 fb  	ld	a1, -0x48(s0)
8021fb0c: 03 35 04 fc  	ld	a0, -0x40(s0)
8021fb10: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021fb14: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             }
8021fb18: 09 a0        	j	0x8021fb1a <_ZN4core4iter6traits8iterator8Iterator4find5check28_$u7b$$u7b$closure$u7d$$u7d$17hd3cdb4f6e86845d3E+0x46>
8021fb1a: 03 35 84 fc  	ld	a0, -0x38(s0)
8021fb1e: 83 35 04 fd  	ld	a1, -0x30(s0)
8021fb22: a6 60        	ld	ra, 0x48(sp)
8021fb24: 06 64        	ld	s0, 0x40(sp)
8021fb26: 61 61        	addi	sp, sp, 0x50
8021fb28: 82 80        	ret

000000008021fb2a <_ZN7easy_fs6layout9DiskInode10initialize28_$u7b$$u7b$closure$u7d$$u7d$17hb65f0716ac283391E>:
;         self.direct.iter_mut().for_each(|v| *v = 0);
8021fb2a: 01 11        	addi	sp, sp, -0x20
8021fb2c: 06 ec        	sd	ra, 0x18(sp)
8021fb2e: 22 e8        	sd	s0, 0x10(sp)
8021fb30: 00 10        	addi	s0, sp, 0x20
8021fb32: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021fb36: 23 34 b4 fe  	sd	a1, -0x18(s0)
8021fb3a: 01 45        	li	a0, 0x0
8021fb3c: 88 c1        	sw	a0, 0x0(a1)
8021fb3e: e2 60        	ld	ra, 0x18(sp)
8021fb40: 42 64        	ld	s0, 0x10(sp)
8021fb42: 05 61        	addi	sp, sp, 0x20
8021fb44: 82 80        	ret

000000008021fb46 <_ZN7easy_fs6layout9DiskInode12get_block_id28_$u7b$$u7b$closure$u7d$$u7d$17h4d24bab22ba017beE>:
;                 .read(0, |indirect_block: &IndirectBlock| {
8021fb46: 79 71        	addi	sp, sp, -0x30
8021fb48: 06 f4        	sd	ra, 0x28(sp)
8021fb4a: 22 f0        	sd	s0, 0x20(sp)
8021fb4c: 00 18        	addi	s0, sp, 0x30
8021fb4e: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021fb52: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021fb56: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     indirect_block[inner_id - INODE_DIRECT_COUNT]
8021fb5a: 03 35 04 fe  	ld	a0, -0x20(s0)
8021fb5e: 08 61        	ld	a0, 0x0(a0)
8021fb60: 93 05 45 fe  	addi	a1, a0, -0x1c
8021fb64: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021fb68: f1 45        	li	a1, 0x1c
8021fb6a: 63 6a b5 00  	bltu	a0, a1, 0x8021fb7e <.Lpcrel_hi0>
8021fb6e: 09 a0        	j	0x8021fb70 <_ZN7easy_fs6layout9DiskInode12get_block_id28_$u7b$$u7b$closure$u7d$$u7d$17h4d24bab22ba017beE+0x2a>
8021fb70: 03 35 84 fd  	ld	a0, -0x28(s0)
8021fb74: 93 05 00 08  	li	a1, 0x80
;                     indirect_block[inner_id - INODE_DIRECT_COUNT]
8021fb78: 63 61 b5 02  	bltu	a0, a1, 0x8021fb9a <.Lpcrel_hi1+0x14>
8021fb7c: 15 a8        	j	0x8021fbb0 <.Lpcrel_hi1+0x2a>

000000008021fb7e <.Lpcrel_hi0>:
8021fb7e: 17 95 01 00  	auipc	a0, 0x19
8021fb82: 13 05 25 b5  	addi	a0, a0, -0x4ae

000000008021fb86 <.Lpcrel_hi1>:
8021fb86: 97 95 01 00  	auipc	a1, 0x19
8021fb8a: 13 86 a5 b2  	addi	a2, a1, -0x4d6
8021fb8e: 93 05 10 02  	li	a1, 0x21
8021fb92: 97 00 01 00  	auipc	ra, 0x10
8021fb96: e7 80 60 68  	jalr	0x686(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021fb9a: 03 35 04 fd  	ld	a0, -0x30(s0)
8021fb9e: 83 35 84 fd  	ld	a1, -0x28(s0)
;                     indirect_block[inner_id - INODE_DIRECT_COUNT]
8021fba2: 8a 05        	slli	a1, a1, 0x2
8021fba4: 2e 95        	add	a0, a0, a1
;                 })
8021fba6: 08 41        	lw	a0, 0x0(a0)
8021fba8: a2 70        	ld	ra, 0x28(sp)
8021fbaa: 02 74        	ld	s0, 0x20(sp)
8021fbac: 45 61        	addi	sp, sp, 0x30
8021fbae: 82 80        	ret
8021fbb0: 03 35 84 fd  	ld	a0, -0x28(s0)

000000008021fbb4 <.Lpcrel_hi2>:
;                     indirect_block[inner_id - INODE_DIRECT_COUNT]
8021fbb4: 97 95 01 00  	auipc	a1, 0x19
8021fbb8: 13 86 45 b4  	addi	a2, a1, -0x4bc
8021fbbc: 93 05 00 08  	li	a1, 0x80
8021fbc0: 97 00 01 00  	auipc	ra, 0x10
8021fbc4: e7 80 00 6f  	jalr	0x6f0(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008021fbc8 <_ZN7easy_fs6layout9DiskInode12get_block_id28_$u7b$$u7b$closure$u7d$$u7d$17h52276b493fa0259fE>:
;                 .read(0, |indirect2: &IndirectBlock| {
8021fbc8: 79 71        	addi	sp, sp, -0x30
8021fbca: 06 f4        	sd	ra, 0x28(sp)
8021fbcc: 22 f0        	sd	s0, 0x20(sp)
8021fbce: 00 18        	addi	s0, sp, 0x30
8021fbd0: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021fbd4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021fbd8: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     indirect2[last / INODE_INDIRECT1_COUNT]
8021fbdc: 03 35 04 fe  	ld	a0, -0x20(s0)
8021fbe0: 08 61        	ld	a0, 0x0(a0)
8021fbe2: 93 55 75 00  	srli	a1, a0, 0x7
8021fbe6: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021fbea: 13 05 f0 07  	li	a0, 0x7f
8021fbee: 63 6e b5 00  	bltu	a0, a1, 0x8021fc0a <_ZN7easy_fs6layout9DiskInode12get_block_id28_$u7b$$u7b$closure$u7d$$u7d$17h52276b493fa0259fE+0x42>
8021fbf2: 09 a0        	j	0x8021fbf4 <_ZN7easy_fs6layout9DiskInode12get_block_id28_$u7b$$u7b$closure$u7d$$u7d$17h52276b493fa0259fE+0x2c>
8021fbf4: 03 35 04 fd  	ld	a0, -0x30(s0)
8021fbf8: 83 35 84 fd  	ld	a1, -0x28(s0)
;                     indirect2[last / INODE_INDIRECT1_COUNT]
8021fbfc: 8a 05        	slli	a1, a1, 0x2
8021fbfe: 2e 95        	add	a0, a0, a1
;                 });
8021fc00: 08 41        	lw	a0, 0x0(a0)
8021fc02: a2 70        	ld	ra, 0x28(sp)
8021fc04: 02 74        	ld	s0, 0x20(sp)
8021fc06: 45 61        	addi	sp, sp, 0x30
8021fc08: 82 80        	ret
8021fc0a: 03 35 84 fd  	ld	a0, -0x28(s0)

000000008021fc0e <.Lpcrel_hi3>:
;                     indirect2[last / INODE_INDIRECT1_COUNT]
8021fc0e: 97 95 01 00  	auipc	a1, 0x19
8021fc12: 13 86 25 b0  	addi	a2, a1, -0x4fe
8021fc16: 93 05 00 08  	li	a1, 0x80
8021fc1a: 97 00 01 00  	auipc	ra, 0x10
8021fc1e: e7 80 60 69  	jalr	0x696(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008021fc22 <_ZN7easy_fs6layout9DiskInode12get_block_id28_$u7b$$u7b$closure$u7d$$u7d$17h38c0a6f9e8750ea5E>:
;                 .read(0, |indirect1: &IndirectBlock| {
8021fc22: 79 71        	addi	sp, sp, -0x30
8021fc24: 06 f4        	sd	ra, 0x28(sp)
8021fc26: 22 f0        	sd	s0, 0x20(sp)
8021fc28: 00 18        	addi	s0, sp, 0x30
8021fc2a: 23 38 b4 fc  	sd	a1, -0x30(s0)
8021fc2e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021fc32: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     indirect1[last % INODE_INDIRECT1_COUNT]
8021fc36: 03 35 04 fe  	ld	a0, -0x20(s0)
8021fc3a: 08 61        	ld	a0, 0x0(a0)
8021fc3c: 93 75 f5 07  	andi	a1, a0, 0x7f
8021fc40: 23 3c b4 fc  	sd	a1, -0x28(s0)
8021fc44: 13 05 f0 07  	li	a0, 0x7f
8021fc48: 63 6e b5 00  	bltu	a0, a1, 0x8021fc64 <_ZN7easy_fs6layout9DiskInode12get_block_id28_$u7b$$u7b$closure$u7d$$u7d$17h38c0a6f9e8750ea5E+0x42>
8021fc4c: 09 a0        	j	0x8021fc4e <_ZN7easy_fs6layout9DiskInode12get_block_id28_$u7b$$u7b$closure$u7d$$u7d$17h38c0a6f9e8750ea5E+0x2c>
8021fc4e: 03 35 04 fd  	ld	a0, -0x30(s0)
8021fc52: 83 35 84 fd  	ld	a1, -0x28(s0)
;                     indirect1[last % INODE_INDIRECT1_COUNT]
8021fc56: 8a 05        	slli	a1, a1, 0x2
8021fc58: 2e 95        	add	a0, a0, a1
;                 })
8021fc5a: 08 41        	lw	a0, 0x0(a0)
8021fc5c: a2 70        	ld	ra, 0x28(sp)
8021fc5e: 02 74        	ld	s0, 0x20(sp)
8021fc60: 45 61        	addi	sp, sp, 0x30
8021fc62: 82 80        	ret
8021fc64: 03 35 84 fd  	ld	a0, -0x28(s0)

000000008021fc68 <.Lpcrel_hi4>:
;                     indirect1[last % INODE_INDIRECT1_COUNT]
8021fc68: 97 95 01 00  	auipc	a1, 0x19
8021fc6c: 13 86 05 ac  	addi	a2, a1, -0x540
8021fc70: 93 05 00 08  	li	a1, 0x80
8021fc74: 97 00 01 00  	auipc	ra, 0x10
8021fc78: e7 80 c0 63  	jalr	0x63c(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008021fc7c <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17haa734eb3061929baE>:
;             .modify(0, |indirect1: &mut IndirectBlock| {
8021fc7c: 1d 71        	addi	sp, sp, -0x60
8021fc7e: 86 ec        	sd	ra, 0x58(sp)
8021fc80: a2 e8        	sd	s0, 0x50(sp)
8021fc82: 80 10        	addi	s0, sp, 0x60
8021fc84: 23 34 b4 fc  	sd	a1, -0x38(s0)
8021fc88: 23 38 a4 fc  	sd	a0, -0x30(s0)
8021fc8c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 while current_blocks < total_blocks.min(INODE_INDIRECT1_COUNT as u32) {
8021fc90: 09 a0        	j	0x8021fc92 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17haa734eb3061929baE+0x16>
8021fc92: 03 35 04 fd  	ld	a0, -0x30(s0)
;                 while current_blocks < total_blocks.min(INODE_INDIRECT1_COUNT as u32) {
8021fc96: 0c 61        	ld	a1, 0x0(a0)
8021fc98: 8c 41        	lw	a1, 0x0(a1)
8021fc9a: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021fc9e: 08 65        	ld	a0, 0x8(a0)
8021fca0: 08 41        	lw	a0, 0x0(a0)
8021fca2: 93 05 00 08  	li	a1, 0x80
8021fca6: 97 80 00 00  	auipc	ra, 0x8
8021fcaa: e7 80 c0 99  	jalr	-0x664(ra) <_ZN4core3cmp3Ord3min17ha7e41dbc60ab1826E>
8021fcae: aa 85        	mv	a1, a0
8021fcb0: 03 35 04 fc  	ld	a0, -0x40(s0)
8021fcb4: 81 25        	sext.w	a1, a1
8021fcb6: 63 67 b5 00  	bltu	a0, a1, 0x8021fcc4 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17haa734eb3061929baE+0x48>
8021fcba: 09 a0        	j	0x8021fcbc <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17haa734eb3061929baE+0x40>
8021fcbc: e6 60        	ld	ra, 0x58(sp)
8021fcbe: 46 64        	ld	s0, 0x50(sp)
;             });
8021fcc0: 25 61        	addi	sp, sp, 0x60
8021fcc2: 82 80        	ret
8021fcc4: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     indirect1[current_blocks as usize] = new_blocks.next().unwrap();
8021fcc8: 08 69        	ld	a0, 0x10(a0)
8021fcca: 97 70 00 00  	auipc	ra, 0x7
8021fcce: e7 80 40 6a  	jalr	0x6a4(ra) <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E>
8021fcd2: 23 22 a4 fe  	sw	a0, -0x1c(s0)
8021fcd6: 23 24 b4 fe  	sw	a1, -0x18(s0)
;         match self {
8021fcda: 03 25 44 fe  	lw	a0, -0x1c(s0)
8021fcde: 11 e9        	bnez	a0, 0x8021fcf2 <.Lpcrel_hi5+0x10>
8021fce0: 09 a0        	j	0x8021fce2 <.Lpcrel_hi5>

000000008021fce2 <.Lpcrel_hi5>:
;             None => unwrap_failed(),
8021fce2: 17 95 01 00  	auipc	a0, 0x19
8021fce6: 13 05 e5 a5  	addi	a0, a0, -0x5a2
8021fcea: 97 10 01 00  	auipc	ra, 0x11
8021fcee: e7 80 e0 fd  	jalr	-0x22(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
8021fcf2: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Some(val) => val,
8021fcf6: 83 25 84 fe  	lw	a1, -0x18(s0)
8021fcfa: 23 38 b4 fa  	sd	a1, -0x50(s0)
8021fcfe: 23 26 b4 fe  	sw	a1, -0x14(s0)
;                     indirect1[current_blocks as usize] = new_blocks.next().unwrap();
8021fd02: 08 61        	ld	a0, 0x0(a0)
8021fd04: 83 65 05 00  	lwu	a1, 0x0(a0)
8021fd08: 23 3c b4 fa  	sd	a1, -0x48(s0)
8021fd0c: 13 05 f0 07  	li	a0, 0x7f
8021fd10: 63 65 b5 02  	bltu	a0, a1, 0x8021fd3a <.Lpcrel_hi5+0x58>
8021fd14: 09 a0        	j	0x8021fd16 <.Lpcrel_hi5+0x34>
8021fd16: 03 35 04 fd  	ld	a0, -0x30(s0)
8021fd1a: 83 35 04 fb  	ld	a1, -0x50(s0)
8021fd1e: 03 36 84 fc  	ld	a2, -0x38(s0)
8021fd22: 83 36 84 fb  	ld	a3, -0x48(s0)
;                     indirect1[current_blocks as usize] = new_blocks.next().unwrap();
8021fd26: 8a 06        	slli	a3, a3, 0x2
8021fd28: 36 96        	add	a2, a2, a3
8021fd2a: 0c c2        	sw	a1, 0x0(a2)
;                     current_blocks += 1;
8021fd2c: 08 61        	ld	a0, 0x0(a0)
8021fd2e: 08 41        	lw	a0, 0x0(a0)
8021fd30: 05 25        	addiw	a0, a0, 0x1
8021fd32: 23 34 a4 fa  	sd	a0, -0x58(s0)
8021fd36: 0d c5        	beqz	a0, 0x8021fd60 <.Lpcrel_hi7>
8021fd38: 29 a8        	j	0x8021fd52 <.Lpcrel_hi6+0x14>
8021fd3a: 03 35 84 fb  	ld	a0, -0x48(s0)

000000008021fd3e <.Lpcrel_hi6>:
;                     indirect1[current_blocks as usize] = new_blocks.next().unwrap();
8021fd3e: 97 95 01 00  	auipc	a1, 0x19
8021fd42: 13 86 a5 a1  	addi	a2, a1, -0x5e6
8021fd46: 93 05 00 08  	li	a1, 0x80
8021fd4a: 97 00 01 00  	auipc	ra, 0x10
8021fd4e: e7 80 60 56  	jalr	0x566(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8021fd52: 03 35 84 fa  	ld	a0, -0x58(s0)
8021fd56: 83 35 04 fd  	ld	a1, -0x30(s0)
;                     current_blocks += 1;
8021fd5a: 8c 61        	ld	a1, 0x0(a1)
8021fd5c: 88 c1        	sw	a0, 0x0(a1)
;                 while current_blocks < total_blocks.min(INODE_INDIRECT1_COUNT as u32) {
8021fd5e: 15 bf        	j	0x8021fc92 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17haa734eb3061929baE+0x16>

000000008021fd60 <.Lpcrel_hi7>:
;                     current_blocks += 1;
8021fd60: 17 95 01 00  	auipc	a0, 0x19
8021fd64: 13 05 05 a3  	addi	a0, a0, -0x5d0

000000008021fd68 <.Lpcrel_hi8>:
8021fd68: 97 95 01 00  	auipc	a1, 0x19
8021fd6c: 13 86 85 a0  	addi	a2, a1, -0x5f8
8021fd70: f1 45        	li	a1, 0x1c
8021fd72: 97 00 01 00  	auipc	ra, 0x10
8021fd76: e7 80 60 4a  	jalr	0x4a6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008021fd7a <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E>:
;             .modify(0, |indirect2: &mut IndirectBlock| {
8021fd7a: 11 71        	addi	sp, sp, -0x100
8021fd7c: 86 fd        	sd	ra, 0xf8(sp)
8021fd7e: a2 f9        	sd	s0, 0xf0(sp)
8021fd80: 00 02        	addi	s0, sp, 0x100
8021fd82: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8021fd86: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8021fd8a: 23 3c b4 f8  	sd	a1, -0x68(s0)
;                 while (a0 < a1) || (a0 == a1 && b0 < b1) {
8021fd8e: 09 a0        	j	0x8021fd90 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x16>
8021fd90: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                 while (a0 < a1) || (a0 == a1 && b0 < b1) {
8021fd94: 88 61        	ld	a0, 0x0(a1)
8021fd96: 08 61        	ld	a0, 0x0(a0)
8021fd98: 8c 65        	ld	a1, 0x8(a1)
8021fd9a: 8c 61        	ld	a1, 0x0(a1)
8021fd9c: 63 6c b5 00  	bltu	a0, a1, 0x8021fdb4 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x3a>
8021fda0: 09 a0        	j	0x8021fda2 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x28>
8021fda2: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                 while (a0 < a1) || (a0 == a1 && b0 < b1) {
8021fda6: 88 61        	ld	a0, 0x0(a1)
8021fda8: 08 61        	ld	a0, 0x0(a0)
8021fdaa: 8c 65        	ld	a1, 0x8(a1)
8021fdac: 8c 61        	ld	a1, 0x0(a1)
8021fdae: 63 0d b5 00  	beq	a0, a1, 0x8021fdc8 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x4e>
8021fdb2: 39 a0        	j	0x8021fdc0 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x46>
8021fdb4: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                     if b0 == 0 {
8021fdb8: 08 69        	ld	a0, 0x10(a0)
8021fdba: 08 61        	ld	a0, 0x0(a0)
8021fdbc: 19 cd        	beqz	a0, 0x8021fdda <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x60>
8021fdbe: b5 a0        	j	0x8021fe2a <.Lpcrel_hi9+0x32>
8021fdc0: ee 70        	ld	ra, 0xf8(sp)
8021fdc2: 4e 74        	ld	s0, 0xf0(sp)
;             });
8021fdc4: 11 61        	addi	sp, sp, 0x100
8021fdc6: 82 80        	ret
8021fdc8: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                 while (a0 < a1) || (a0 == a1 && b0 < b1) {
8021fdcc: 88 69        	ld	a0, 0x10(a1)
8021fdce: 08 61        	ld	a0, 0x0(a0)
8021fdd0: 8c 6d        	ld	a1, 0x18(a1)
8021fdd2: 8c 61        	ld	a1, 0x0(a1)
8021fdd4: e3 60 b5 fe  	bltu	a0, a1, 0x8021fdb4 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x3a>
8021fdd8: e5 b7        	j	0x8021fdc0 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x46>
8021fdda: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                         indirect2[a0] = new_blocks.next().unwrap();
8021fdde: 08 71        	ld	a0, 0x20(a0)
8021fde0: 97 70 00 00  	auipc	ra, 0x7
8021fde4: e7 80 e0 58  	jalr	0x58e(ra) <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E>
8021fde8: 23 22 a4 fa  	sw	a0, -0x5c(s0)
8021fdec: 23 24 b4 fa  	sw	a1, -0x58(s0)
;         match self {
8021fdf0: 03 25 44 fa  	lw	a0, -0x5c(s0)
8021fdf4: 11 e9        	bnez	a0, 0x8021fe08 <.Lpcrel_hi9+0x10>
8021fdf6: 09 a0        	j	0x8021fdf8 <.Lpcrel_hi9>

000000008021fdf8 <.Lpcrel_hi9>:
;             None => unwrap_failed(),
8021fdf8: 17 95 01 00  	auipc	a0, 0x19
8021fdfc: 13 05 85 9b  	addi	a0, a0, -0x648
8021fe00: 97 10 01 00  	auipc	ra, 0x11
8021fe04: e7 80 80 ec  	jalr	-0x138(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
8021fe08: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             Some(val) => val,
8021fe0c: 83 25 84 fa  	lw	a1, -0x58(s0)
8021fe10: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8021fe14: 23 26 b4 fa  	sw	a1, -0x54(s0)
;                         indirect2[a0] = new_blocks.next().unwrap();
8021fe18: 08 61        	ld	a0, 0x0(a0)
8021fe1a: 08 61        	ld	a0, 0x0(a0)
8021fe1c: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8021fe20: 93 05 00 08  	li	a1, 0x80
8021fe24: 63 6e b5 00  	bltu	a0, a1, 0x8021fe40 <.Lpcrel_hi9+0x48>
8021fe28: 35 a0        	j	0x8021fe54 <.Lpcrel_hi9+0x5c>
8021fe2a: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                     get_block_cache(indirect2[a0] as usize, Arc::clone(block_device))
8021fe2e: 08 61        	ld	a0, 0x0(a0)
8021fe30: 08 61        	ld	a0, 0x0(a0)
8021fe32: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8021fe36: 93 05 00 08  	li	a1, 0x80
8021fe3a: 63 69 b5 02  	bltu	a0, a1, 0x8021fe6c <.Lpcrel_hi10+0x14>
8021fe3e: 9d a2        	j	0x8021ffa4 <.Lpcrel_hi10+0x14c>
8021fe40: 03 35 84 f4  	ld	a0, -0xb8(s0)
8021fe44: 83 35 84 f5  	ld	a1, -0xa8(s0)
8021fe48: 03 36 04 f5  	ld	a2, -0xb0(s0)
;                         indirect2[a0] = new_blocks.next().unwrap();
8021fe4c: 0a 06        	slli	a2, a2, 0x2
8021fe4e: b2 95        	add	a1, a1, a2
8021fe50: 88 c1        	sw	a0, 0x0(a1)
;                     if b0 == 0 {
8021fe52: e1 bf        	j	0x8021fe2a <.Lpcrel_hi9+0x32>
8021fe54: 03 35 04 f5  	ld	a0, -0xb0(s0)

000000008021fe58 <.Lpcrel_hi10>:
;                         indirect2[a0] = new_blocks.next().unwrap();
8021fe58: 97 95 01 00  	auipc	a1, 0x19
8021fe5c: 13 86 05 97  	addi	a2, a1, -0x690
8021fe60: 93 05 00 08  	li	a1, 0x80
8021fe64: 97 00 01 00  	auipc	ra, 0x10
8021fe68: e7 80 c0 44  	jalr	0x44c(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8021fe6c: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021fe70: 83 35 84 f5  	ld	a1, -0xa8(s0)
8021fe74: 03 36 04 f4  	ld	a2, -0xc0(s0)
;                     get_block_cache(indirect2[a0] as usize, Arc::clone(block_device))
8021fe78: 0a 06        	slli	a2, a2, 0x2
8021fe7a: b2 95        	add	a1, a1, a2
8021fe7c: 83 e5 05 00  	lwu	a1, 0x0(a1)
8021fe80: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8021fe84: 08 75        	ld	a0, 0x28(a0)
8021fe86: 08 61        	ld	a0, 0x0(a0)
8021fe88: 97 d0 ff ff  	auipc	ra, 0xffffd
8021fe8c: e7 80 80 25  	jalr	0x258(ra) <ekernel+0xffcd00e0>
8021fe90: 2a 86        	mv	a2, a0
8021fe92: 03 35 04 f2  	ld	a0, -0xe0(s0)
8021fe96: 23 34 c4 f2  	sd	a2, -0xd8(s0)
8021fe9a: 2e 86        	mv	a2, a1
8021fe9c: 83 35 84 f2  	ld	a1, -0xd8(s0)
8021fea0: 97 60 00 00  	auipc	ra, 0x6
8021fea4: e7 80 40 f6  	jalr	-0x9c(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8021fea8: 23 30 a4 f8  	sd	a0, -0x80(s0)
8021feac: 13 05 04 f8  	addi	a0, s0, -0x80
8021feb0: 97 d0 ff ff  	auipc	ra, 0xffffd
8021feb4: e7 80 40 2d  	jalr	0x2d4(ra) <ekernel+0xffcd0184>
8021feb8: aa 85        	mv	a1, a0
8021feba: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8021febe: 23 34 a4 fc  	sd	a0, -0x38(s0)
8021fec2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8021fec6: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8021fec8: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8021fecc: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8021fed0: 85 45        	li	a1, 0x1
8021fed2: 97 f0 ff ff  	auipc	ra, 0xfffff
8021fed6: e7 80 40 2d  	jalr	0x2d4(ra) <ekernel+0xffcd21a6>
8021feda: aa 85        	mv	a1, a0
8021fedc: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8021fee0: 23 30 a4 fe  	sd	a0, -0x20(s0)
8021fee4: 09 a0        	j	0x8021fee6 <.Lpcrel_hi10+0x8e>
8021fee6: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8021feea: 21 05        	addi	a0, a0, 0x8
8021feec: 89 45        	li	a1, 0x2
8021feee: a3 0b b4 fc  	sb	a1, -0x29(s0)
8021fef2: 83 45 74 fd  	lbu	a1, -0x29(s0)
8021fef6: 97 f0 ff ff  	auipc	ra, 0xfffff
8021fefa: e7 80 40 26  	jalr	0x264(ra) <ekernel+0xffcd215a>
8021fefe: 83 35 84 f3  	ld	a1, -0xc8(s0)
8021ff02: 63 08 b5 00  	beq	a0, a1, 0x8021ff12 <.Lpcrel_hi10+0xba>
8021ff06: 09 a0        	j	0x8021ff08 <.Lpcrel_hi10+0xb0>
;             crate::relax();
8021ff08: 97 f0 ff ff  	auipc	ra, 0xfffff
8021ff0c: e7 80 60 34  	jalr	0x346(ra) <ekernel+0xffcd224e>
8021ff10: d9 bf        	j	0x8021fee6 <.Lpcrel_hi10+0x8e>
8021ff12: 83 35 84 f3  	ld	a1, -0xc8(s0)
8021ff16: 03 35 04 f3  	ld	a0, -0xd0(s0)
;             next_serving: &self.next_serving,
8021ff1a: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8021ff1e: 41 05        	addi	a0, a0, 0x10
8021ff20: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8021ff24: 23 38 c4 fa  	sd	a2, -0x50(s0)
8021ff28: 23 30 b4 fc  	sd	a1, -0x40(s0)
8021ff2c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8021ff30: 03 35 04 fc  	ld	a0, -0x40(s0)
8021ff34: 23 3c a4 f6  	sd	a0, -0x88(s0)
8021ff38: 03 35 84 fb  	ld	a0, -0x48(s0)
8021ff3c: 23 38 a4 f6  	sd	a0, -0x90(s0)
8021ff40: 03 35 04 fb  	ld	a0, -0x50(s0)
8021ff44: 23 34 a4 f6  	sd	a0, -0x98(s0)
8021ff48: 13 05 84 f6  	addi	a0, s0, -0x98
8021ff4c: 23 38 a4 f0  	sd	a0, -0xf0(s0)
;                     get_block_cache(indirect2[a0] as usize, Arc::clone(block_device))
8021ff50: 97 20 00 00  	auipc	ra, 0x2
8021ff54: e7 80 20 72  	jalr	0x722(ra) <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4414d35563f79ba7E>
8021ff58: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                         .modify(0, |indirect1: &mut IndirectBlock| {
8021ff5c: 90 69        	ld	a2, 0x10(a1)
8021ff5e: 8c 71        	ld	a1, 0x20(a1)
8021ff60: 23 34 c4 f8  	sd	a2, -0x78(s0)
8021ff64: 23 38 b4 f8  	sd	a1, -0x70(s0)
;                     get_block_cache(indirect2[a0] as usize, Arc::clone(block_device))
8021ff68: 03 36 84 f8  	ld	a2, -0x78(s0)
8021ff6c: 83 36 04 f9  	ld	a3, -0x70(s0)
8021ff70: 81 45        	li	a1, 0x0
8021ff72: 97 20 00 00  	auipc	ra, 0x2
8021ff76: e7 80 c0 91  	jalr	-0x6e4(ra) <_ZN7easy_fs11block_cache10BlockCache6modify17haff49e143f23423eE>
8021ff7a: 03 35 04 f1  	ld	a0, -0xf0(s0)
;                         });
8021ff7e: 97 e0 ff ff  	auipc	ra, 0xffffe
8021ff82: e7 80 80 b1  	jalr	-0x4e8(ra) <ekernel+0xffcd0a96>
8021ff86: 13 05 04 f8  	addi	a0, s0, -0x80
8021ff8a: 97 d0 ff ff  	auipc	ra, 0xffffd
8021ff8e: e7 80 40 7a  	jalr	0x7a4(ra) <ekernel+0xffcd072e>
8021ff92: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                     b0 += 1;
8021ff96: 08 69        	ld	a0, 0x10(a0)
8021ff98: 08 61        	ld	a0, 0x0(a0)
8021ff9a: 05 05        	addi	a0, a0, 0x1
8021ff9c: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8021ffa0: 1d c9        	beqz	a0, 0x8021ffd6 <.Lpcrel_hi12>
8021ffa2: 29 a8        	j	0x8021ffbc <.Lpcrel_hi11+0x14>
8021ffa4: 03 35 04 f4  	ld	a0, -0xc0(s0)

000000008021ffa8 <.Lpcrel_hi11>:
;                     get_block_cache(indirect2[a0] as usize, Arc::clone(block_device))
8021ffa8: 97 95 01 00  	auipc	a1, 0x19
8021ffac: 13 86 85 83  	addi	a2, a1, -0x7c8
8021ffb0: 93 05 00 08  	li	a1, 0x80
8021ffb4: 97 00 01 00  	auipc	ra, 0x10
8021ffb8: e7 80 c0 2f  	jalr	0x2fc(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8021ffbc: 03 35 04 f6  	ld	a0, -0xa0(s0)
8021ffc0: 83 35 84 f1  	ld	a1, -0xe8(s0)
;                     b0 += 1;
8021ffc4: 10 69        	ld	a2, 0x10(a0)
8021ffc6: 0c e2        	sd	a1, 0x0(a2)
;                     if b0 == INODE_INDIRECT1_COUNT {
8021ffc8: 08 69        	ld	a0, 0x10(a0)
8021ffca: 08 61        	ld	a0, 0x0(a0)
8021ffcc: 93 05 00 08  	li	a1, 0x80
8021ffd0: 63 00 b5 02  	beq	a0, a1, 0x8021fff0 <.Lpcrel_hi13+0x12>
8021ffd4: 75 bb        	j	0x8021fd90 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x16>

000000008021ffd6 <.Lpcrel_hi12>:
;                     b0 += 1;
8021ffd6: 17 85 01 00  	auipc	a0, 0x18
8021ffda: 13 05 a5 7b  	addi	a0, a0, 0x7ba

000000008021ffde <.Lpcrel_hi13>:
8021ffde: 97 95 01 00  	auipc	a1, 0x19
8021ffe2: 13 86 a5 81  	addi	a2, a1, -0x7e6
8021ffe6: f1 45        	li	a1, 0x1c
8021ffe8: 97 00 01 00  	auipc	ra, 0x10
8021ffec: e7 80 00 23  	jalr	0x230(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8021fff0: 03 35 04 f6  	ld	a0, -0xa0(s0)
;                         b0 = 0;
8021fff4: 10 69        	ld	a2, 0x10(a0)
8021fff6: 81 45        	li	a1, 0x0
8021fff8: 0c e2        	sd	a1, 0x0(a2)
;                         a0 += 1;
8021fffa: 08 61        	ld	a0, 0x0(a0)
8021fffc: 08 61        	ld	a0, 0x0(a0)
8021fffe: 05 05        	addi	a0, a0, 0x1
80220000: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80220004: 09 c9        	beqz	a0, 0x80220016 <.Lpcrel_hi14>
80220006: 09 a0        	j	0x80220008 <.Lpcrel_hi13+0x2a>
80220008: 03 35 84 f0  	ld	a0, -0xf8(s0)
8022000c: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                         a0 += 1;
80220010: 8c 61        	ld	a1, 0x0(a1)
80220012: 88 e1        	sd	a0, 0x0(a1)
;                     if b0 == INODE_INDIRECT1_COUNT {
80220014: b5 bb        	j	0x8021fd90 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$17hc372e6758e6a2ac5E+0x16>

0000000080220016 <.Lpcrel_hi14>:
;                         a0 += 1;
80220016: 17 85 01 00  	auipc	a0, 0x18
8022001a: 13 05 a5 77  	addi	a0, a0, 0x77a

000000008022001e <.Lpcrel_hi15>:
8022001e: 97 85 01 00  	auipc	a1, 0x18
80220022: 13 86 25 7f  	addi	a2, a1, 0x7f2
80220026: f1 45        	li	a1, 0x1c
80220028: 97 00 01 00  	auipc	ra, 0x10
8022002c: e7 80 00 1f  	jalr	0x1f0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080220030 <_ZN7easy_fs6layout9DiskInode13increase_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hbcfea813bbef6cc5E>:
;                         .modify(0, |indirect1: &mut IndirectBlock| {
80220030: 5d 71        	addi	sp, sp, -0x50
80220032: 86 e4        	sd	ra, 0x48(sp)
80220034: a2 e0        	sd	s0, 0x40(sp)
80220036: 80 08        	addi	s0, sp, 0x50
80220038: 23 30 c4 fc  	sd	a2, -0x40(s0)
8022003c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80220040: 23 38 b4 fc  	sd	a1, -0x30(s0)
80220044: 23 3c c4 fc  	sd	a2, -0x28(s0)
;                             indirect1[b0] = new_blocks.next().unwrap();
80220048: 03 35 04 fd  	ld	a0, -0x30(s0)
8022004c: 97 70 00 00  	auipc	ra, 0x7
80220050: e7 80 20 32  	jalr	0x322(ra) <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E>
80220054: 23 22 a4 fe  	sw	a0, -0x1c(s0)
80220058: 23 24 b4 fe  	sw	a1, -0x18(s0)
;         match self {
8022005c: 03 25 44 fe  	lw	a0, -0x1c(s0)
80220060: 11 e9        	bnez	a0, 0x80220074 <.Lpcrel_hi16+0x10>
80220062: 09 a0        	j	0x80220064 <.Lpcrel_hi16>

0000000080220064 <.Lpcrel_hi16>:
;             None => unwrap_failed(),
80220064: 17 85 01 00  	auipc	a0, 0x18
80220068: 13 05 45 7c  	addi	a0, a0, 0x7c4
8022006c: 97 10 01 00  	auipc	ra, 0x11
80220070: e7 80 c0 c5  	jalr	-0x3a4(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80220074: 03 25 84 fe  	lw	a0, -0x18(s0)
80220078: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022007c: 23 26 a4 fe  	sw	a0, -0x14(s0)
;                             indirect1[b0] = new_blocks.next().unwrap();
80220080: 03 35 84 fc  	ld	a0, -0x38(s0)
80220084: 0c 61        	ld	a1, 0x0(a0)
80220086: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022008a: 13 05 f0 07  	li	a0, 0x7f
8022008e: 63 60 b5 02  	bltu	a0, a1, 0x802200ae <.Lpcrel_hi16+0x4a>
80220092: 09 a0        	j	0x80220094 <.Lpcrel_hi16+0x30>
80220094: 03 35 04 fb  	ld	a0, -0x50(s0)
80220098: 83 35 04 fc  	ld	a1, -0x40(s0)
8022009c: 03 36 84 fb  	ld	a2, -0x48(s0)
;                             indirect1[b0] = new_blocks.next().unwrap();
802200a0: 0a 06        	slli	a2, a2, 0x2
802200a2: b2 95        	add	a1, a1, a2
802200a4: 88 c1        	sw	a0, 0x0(a1)
802200a6: a6 60        	ld	ra, 0x48(sp)
802200a8: 06 64        	ld	s0, 0x40(sp)
;                         });
802200aa: 61 61        	addi	sp, sp, 0x50
802200ac: 82 80        	ret
802200ae: 03 35 84 fb  	ld	a0, -0x48(s0)

00000000802200b2 <.Lpcrel_hi17>:
;                             indirect1[b0] = new_blocks.next().unwrap();
802200b2: 97 85 01 00  	auipc	a1, 0x18
802200b6: 13 86 e5 78  	addi	a2, a1, 0x78e
802200ba: 93 05 00 08  	li	a1, 0x80
802200be: 97 00 01 00  	auipc	ra, 0x10
802200c2: e7 80 20 1f  	jalr	0x1f2(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

00000000802200c6 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17h932beb611ff8af94E>:
;             .modify(0, |indirect1: &mut IndirectBlock| {
802200c6: 5d 71        	addi	sp, sp, -0x50
802200c8: 86 e4        	sd	ra, 0x48(sp)
802200ca: a2 e0        	sd	s0, 0x40(sp)
802200cc: 80 08        	addi	s0, sp, 0x50
802200ce: 23 3c b4 fc  	sd	a1, -0x28(s0)
802200d2: 23 30 a4 fe  	sd	a0, -0x20(s0)
802200d6: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 while current_blocks < data_blocks.min(INODE_INDIRECT1_COUNT) {
802200da: 09 a0        	j	0x802200dc <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17h932beb611ff8af94E+0x16>
802200dc: 03 35 04 fe  	ld	a0, -0x20(s0)
;                 while current_blocks < data_blocks.min(INODE_INDIRECT1_COUNT) {
802200e0: 0c 61        	ld	a1, 0x0(a0)
802200e2: 8c 61        	ld	a1, 0x0(a1)
802200e4: 23 38 b4 fc  	sd	a1, -0x30(s0)
802200e8: 08 65        	ld	a0, 0x8(a0)
802200ea: 08 61        	ld	a0, 0x0(a0)
802200ec: 93 05 00 08  	li	a1, 0x80
802200f0: 97 70 00 00  	auipc	ra, 0x7
802200f4: e7 80 20 53  	jalr	0x532(ra) <_ZN4core3cmp3Ord3min17h761e5a0d4bbde9abE>
802200f8: aa 85        	mv	a1, a0
802200fa: 03 35 04 fd  	ld	a0, -0x30(s0)
802200fe: 63 67 b5 00  	bltu	a0, a1, 0x8022010c <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17h932beb611ff8af94E+0x46>
80220102: 09 a0        	j	0x80220104 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17h932beb611ff8af94E+0x3e>
80220104: a6 60        	ld	ra, 0x48(sp)
80220106: 06 64        	ld	s0, 0x40(sp)
;             });
80220108: 61 61        	addi	sp, sp, 0x50
8022010a: 82 80        	ret
8022010c: 03 35 04 fe  	ld	a0, -0x20(s0)
;                     v.push(indirect1[current_blocks]);
80220110: 0c 69        	ld	a1, 0x10(a0)
80220112: 23 30 b4 fc  	sd	a1, -0x40(s0)
80220116: 08 61        	ld	a0, 0x0(a0)
80220118: 0c 61        	ld	a1, 0x0(a0)
8022011a: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022011e: 13 05 f0 07  	li	a0, 0x7f
80220122: 63 69 b5 02  	bltu	a0, a1, 0x80220154 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17h932beb611ff8af94E+0x8e>
80220126: 09 a0        	j	0x80220128 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17h932beb611ff8af94E+0x62>
80220128: 03 35 04 fc  	ld	a0, -0x40(s0)
8022012c: 83 35 84 fd  	ld	a1, -0x28(s0)
80220130: 03 36 84 fc  	ld	a2, -0x38(s0)
;                     v.push(indirect1[current_blocks]);
80220134: 0a 06        	slli	a2, a2, 0x2
80220136: b2 95        	add	a1, a1, a2
80220138: 8c 41        	lw	a1, 0x0(a1)
8022013a: 97 20 00 00  	auipc	ra, 0x2
8022013e: e7 80 c0 64  	jalr	0x64c(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E>
80220142: 03 35 04 fe  	ld	a0, -0x20(s0)
;                     current_blocks += 1;
80220146: 08 61        	ld	a0, 0x0(a0)
80220148: 08 61        	ld	a0, 0x0(a0)
8022014a: 05 05        	addi	a0, a0, 0x1
8022014c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80220150: 0d c5        	beqz	a0, 0x8022017a <.Lpcrel_hi19>
80220152: 29 a8        	j	0x8022016c <.Lpcrel_hi18+0x14>
80220154: 03 35 84 fc  	ld	a0, -0x38(s0)

0000000080220158 <.Lpcrel_hi18>:
;                     v.push(indirect1[current_blocks]);
80220158: 97 85 01 00  	auipc	a1, 0x18
8022015c: 13 86 05 70  	addi	a2, a1, 0x700
80220160: 93 05 00 08  	li	a1, 0x80
80220164: 97 00 01 00  	auipc	ra, 0x10
80220168: e7 80 c0 14  	jalr	0x14c(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8022016c: 03 35 84 fb  	ld	a0, -0x48(s0)
80220170: 83 35 04 fe  	ld	a1, -0x20(s0)
;                     current_blocks += 1;
80220174: 8c 61        	ld	a1, 0x0(a1)
80220176: 88 e1        	sd	a0, 0x0(a1)
;                 while current_blocks < data_blocks.min(INODE_INDIRECT1_COUNT) {
80220178: 95 b7        	j	0x802200dc <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17h932beb611ff8af94E+0x16>

000000008022017a <.Lpcrel_hi19>:
;                     current_blocks += 1;
8022017a: 17 85 01 00  	auipc	a0, 0x18
8022017e: 13 05 65 61  	addi	a0, a0, 0x616

0000000080220182 <.Lpcrel_hi20>:
80220182: 97 85 01 00  	auipc	a1, 0x18
80220186: 13 86 e5 6e  	addi	a2, a1, 0x6ee
8022018a: f1 45        	li	a1, 0x1c
8022018c: 97 00 01 00  	auipc	ra, 0x10
80220190: e7 80 c0 08  	jalr	0x8c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080220194 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E>:
;             .modify(0, |indirect2: &mut IndirectBlock| {
80220194: 05 71        	addi	sp, sp, -0x1e0
80220196: 86 ef        	sd	ra, 0x1d8(sp)
80220198: a2 eb        	sd	s0, 0x1d0(sp)
8022019a: 80 13        	addi	s0, sp, 0x1e0
8022019c: 23 3c b4 e8  	sd	a1, -0x168(s0)
802201a0: aa 85        	mv	a1, a0
802201a2: 03 35 84 e9  	ld	a0, -0x168(s0)
802201a6: 23 30 b4 ea  	sd	a1, -0x160(s0)
802201aa: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802201ae: 93 05 00 08  	li	a1, 0x80
;                 for entry in indirect2.iter_mut().take(a1) {
802201b2: 97 d0 ff ff  	auipc	ra, 0xffffd
802201b6: e7 80 40 20  	jalr	0x204(ra) <ekernel+0xffcd03b6>
802201ba: 2a 86        	mv	a2, a0
802201bc: 03 35 04 ea  	ld	a0, -0x160(s0)
802201c0: 23 34 c4 ea  	sd	a2, -0x158(s0)
802201c4: 2e 86        	mv	a2, a1
802201c6: 83 35 84 ea  	ld	a1, -0x158(s0)
802201ca: 08 61        	ld	a0, 0x0(a0)
802201cc: 14 61        	ld	a3, 0x0(a0)
802201ce: 13 05 04 ed  	addi	a0, s0, -0x130
802201d2: 23 38 a4 ea  	sd	a0, -0x150(s0)
802201d6: 97 80 00 00  	auipc	ra, 0x8
802201da: e7 80 e0 41  	jalr	0x41e(ra) <_ZN4core4iter6traits8iterator8Iterator4take17h376ef9b53c9c5b27E>
802201de: 83 35 04 eb  	ld	a1, -0x150(s0)
802201e2: 13 05 84 eb  	addi	a0, s0, -0x148
802201e6: 97 50 00 00  	auipc	ra, 0x5
802201ea: e7 80 80 6a  	jalr	0x6a8(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0829adbd2e9b0a81E>
802201ee: 03 35 84 ec  	ld	a0, -0x138(s0)
802201f2: 23 3c a4 ee  	sd	a0, -0x108(s0)
802201f6: 03 35 04 ec  	ld	a0, -0x140(s0)
802201fa: 23 38 a4 ee  	sd	a0, -0x110(s0)
802201fe: 03 35 84 eb  	ld	a0, -0x148(s0)
80220202: 23 34 a4 ee  	sd	a0, -0x118(s0)
80220206: 09 a0        	j	0x80220208 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x74>
80220208: 13 05 84 ee  	addi	a0, s0, -0x118
;                 for entry in indirect2.iter_mut().take(a1) {
8022020c: 97 50 00 00  	auipc	ra, 0x5
80220210: e7 80 00 64  	jalr	0x640(ra) <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11c1b2c1ebcea1fcE>
80220214: 23 30 a4 f0  	sd	a0, -0x100(s0)
80220218: 03 35 04 f0  	ld	a0, -0x100(s0)
8022021c: 09 e9        	bnez	a0, 0x8022022e <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x9a>
8022021e: 09 a0        	j	0x80220220 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x8c>
80220220: 03 35 04 ea  	ld	a0, -0x160(s0)
;                 if b1 > 0 {
80220224: 08 6d        	ld	a0, 0x18(a0)
80220226: 08 61        	ld	a0, 0x0(a0)
80220228: 63 10 05 14  	bnez	a0, 0x80220368 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x1d4>
8022022c: 15 aa        	j	0x80220360 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x1cc>
8022022e: 03 35 04 ea  	ld	a0, -0x160(s0)
;                 for entry in indirect2.iter_mut().take(a1) {
80220232: 83 35 04 f0  	ld	a1, -0x100(s0)
80220236: 23 38 b4 e6  	sd	a1, -0x190(s0)
8022023a: 23 34 b4 f6  	sd	a1, -0x98(s0)
;                     v.push(*entry);
8022023e: 08 65        	ld	a0, 0x8(a0)
80220240: 8c 41        	lw	a1, 0x0(a1)
80220242: 97 20 00 00  	auipc	ra, 0x2
80220246: e7 80 40 54  	jalr	0x544(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E>
8022024a: 83 35 04 e7  	ld	a1, -0x190(s0)
8022024e: 03 35 04 ea  	ld	a0, -0x160(s0)
;                     get_block_cache(*entry as usize, Arc::clone(block_device))
80220252: 83 e5 05 00  	lwu	a1, 0x0(a1)
80220256: 23 3c b4 e6  	sd	a1, -0x188(s0)
8022025a: 08 69        	ld	a0, 0x10(a0)
8022025c: 08 61        	ld	a0, 0x0(a0)
8022025e: 97 d0 ff ff  	auipc	ra, 0xffffd
80220262: e7 80 20 e8  	jalr	-0x17e(ra) <ekernel+0xffcd00e0>
80220266: 2a 86        	mv	a2, a0
80220268: 03 35 84 e7  	ld	a0, -0x188(s0)
8022026c: 23 30 c4 e8  	sd	a2, -0x180(s0)
80220270: 2e 86        	mv	a2, a1
80220272: 83 35 04 e8  	ld	a1, -0x180(s0)
80220276: 97 60 00 00  	auipc	ra, 0x6
8022027a: e7 80 e0 b8  	jalr	-0x472(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8022027e: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80220282: 13 05 04 f2  	addi	a0, s0, -0xe0
80220286: 97 d0 ff ff  	auipc	ra, 0xffffd
8022028a: e7 80 e0 ef  	jalr	-0x102(ra) <ekernel+0xffcd0184>
8022028e: aa 85        	mv	a1, a0
80220290: 23 34 b4 e8  	sd	a1, -0x178(s0)
80220294: 23 34 a4 f8  	sd	a0, -0x78(s0)
80220298: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022029c: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8022029e: 23 0b b4 fc  	sb	a1, -0x2a(s0)
802202a2: 03 46 64 fd  	lbu	a2, -0x2a(s0)
802202a6: 85 45        	li	a1, 0x1
802202a8: 97 f0 ff ff  	auipc	ra, 0xfffff
802202ac: e7 80 e0 ef  	jalr	-0x102(ra) <ekernel+0xffcd21a6>
802202b0: aa 85        	mv	a1, a0
802202b2: 23 38 b4 e8  	sd	a1, -0x170(s0)
802202b6: 23 30 a4 fe  	sd	a0, -0x20(s0)
802202ba: 09 a0        	j	0x802202bc <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x128>
802202bc: 03 35 84 e8  	ld	a0, -0x178(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
802202c0: 21 05        	addi	a0, a0, 0x8
802202c2: 89 45        	li	a1, 0x2
802202c4: a3 0b b4 fc  	sb	a1, -0x29(s0)
802202c8: 83 45 74 fd  	lbu	a1, -0x29(s0)
802202cc: 97 f0 ff ff  	auipc	ra, 0xfffff
802202d0: e7 80 e0 e8  	jalr	-0x172(ra) <ekernel+0xffcd215a>
802202d4: 83 35 04 e9  	ld	a1, -0x170(s0)
802202d8: 63 08 b5 00  	beq	a0, a1, 0x802202e8 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x154>
802202dc: 09 a0        	j	0x802202de <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x14a>
;             crate::relax();
802202de: 97 f0 ff ff  	auipc	ra, 0xfffff
802202e2: e7 80 00 f7  	jalr	-0x90(ra) <ekernel+0xffcd224e>
802202e6: d9 bf        	j	0x802202bc <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x128>
802202e8: 83 35 04 e9  	ld	a1, -0x170(s0)
802202ec: 03 35 84 e8  	ld	a0, -0x178(s0)
;             next_serving: &self.next_serving,
802202f0: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
802202f4: 41 05        	addi	a0, a0, 0x10
802202f6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
802202fa: 23 38 c4 f6  	sd	a2, -0x90(s0)
802202fe: 23 30 b4 f8  	sd	a1, -0x80(s0)
80220302: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         MutexGuard {
80220306: 03 35 04 f8  	ld	a0, -0x80(s0)
8022030a: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8022030e: 03 35 84 f7  	ld	a0, -0x88(s0)
80220312: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80220316: 03 35 04 f7  	ld	a0, -0x90(s0)
8022031a: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8022031e: 13 05 84 f0  	addi	a0, s0, -0xf8
80220322: 23 34 a4 e6  	sd	a0, -0x198(s0)
;                     get_block_cache(*entry as usize, Arc::clone(block_device))
80220326: 97 20 00 00  	auipc	ra, 0x2
8022032a: e7 80 c0 34  	jalr	0x34c(ra) <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4414d35563f79ba7E>
8022032e: 83 35 04 ea  	ld	a1, -0x160(s0)
;                         .modify(0, |indirect1: &mut IndirectBlock| {
80220332: 8c 65        	ld	a1, 0x8(a1)
80220334: 23 34 b4 f2  	sd	a1, -0xd8(s0)
;                     get_block_cache(*entry as usize, Arc::clone(block_device))
80220338: 03 36 84 f2  	ld	a2, -0xd8(s0)
8022033c: 81 45        	li	a1, 0x0
8022033e: 97 10 00 00  	auipc	ra, 0x1
80220342: e7 80 40 45  	jalr	0x454(ra) <_ZN7easy_fs11block_cache10BlockCache6modify17h555ce3c8f582ffeeE>
80220346: 03 35 84 e6  	ld	a0, -0x198(s0)
;                         });
8022034a: 97 d0 ff ff  	auipc	ra, 0xffffd
8022034e: e7 80 c0 74  	jalr	0x74c(ra) <ekernel+0xffcd0a96>
80220352: 13 05 04 f2  	addi	a0, s0, -0xe0
80220356: 97 d0 ff ff  	auipc	ra, 0xffffd
8022035a: e7 80 80 3d  	jalr	0x3d8(ra) <ekernel+0xffcd072e>
8022035e: 6d b5        	j	0x80220208 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x74>
80220360: fe 60        	ld	ra, 0x1d8(sp)
80220362: 5e 64        	ld	s0, 0x1d0(sp)
;             });
80220364: 3d 61        	addi	sp, sp, 0x1e0
80220366: 82 80        	ret
80220368: 03 35 04 ea  	ld	a0, -0x160(s0)
;                     v.push(indirect2[a1]);
8022036c: 0c 65        	ld	a1, 0x8(a0)
8022036e: 23 3c b4 e4  	sd	a1, -0x1a8(s0)
80220372: 08 61        	ld	a0, 0x0(a0)
80220374: 0c 61        	ld	a1, 0x0(a0)
80220376: 23 30 b4 e6  	sd	a1, -0x1a0(s0)
8022037a: 13 05 f0 07  	li	a0, 0x7f
8022037e: 63 6b b5 02  	bltu	a0, a1, 0x802203b4 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x220>
80220382: 09 a0        	j	0x80220384 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x1f0>
80220384: 03 35 84 e5  	ld	a0, -0x1a8(s0)
80220388: 83 35 84 e9  	ld	a1, -0x168(s0)
8022038c: 03 36 04 e6  	ld	a2, -0x1a0(s0)
;                     v.push(indirect2[a1]);
80220390: 0a 06        	slli	a2, a2, 0x2
80220392: b2 95        	add	a1, a1, a2
80220394: 8c 41        	lw	a1, 0x0(a1)
80220396: 97 20 00 00  	auipc	ra, 0x2
8022039a: e7 80 00 3f  	jalr	0x3f0(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E>
8022039e: 03 35 04 ea  	ld	a0, -0x160(s0)
;                     get_block_cache(indirect2[a1] as usize, Arc::clone(block_device))
802203a2: 08 61        	ld	a0, 0x0(a0)
802203a4: 08 61        	ld	a0, 0x0(a0)
802203a6: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
802203aa: 93 05 00 08  	li	a1, 0x80
802203ae: 63 6f b5 00  	bltu	a0, a1, 0x802203cc <.Lpcrel_hi21+0x14>
802203b2: 89 a2        	j	0x802204f4 <.Lpcrel_hi21+0x13c>
802203b4: 03 35 04 e6  	ld	a0, -0x1a0(s0)

00000000802203b8 <.Lpcrel_hi21>:
;                     v.push(indirect2[a1]);
802203b8: 97 85 01 00  	auipc	a1, 0x18
802203bc: 13 86 05 4d  	addi	a2, a1, 0x4d0
802203c0: 93 05 00 08  	li	a1, 0x80
802203c4: 97 00 01 00  	auipc	ra, 0x10
802203c8: e7 80 c0 ee  	jalr	-0x114(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
802203cc: 03 35 04 ea  	ld	a0, -0x160(s0)
802203d0: 83 35 84 e9  	ld	a1, -0x168(s0)
802203d4: 03 36 04 e5  	ld	a2, -0x1b0(s0)
;                     get_block_cache(indirect2[a1] as usize, Arc::clone(block_device))
802203d8: 0a 06        	slli	a2, a2, 0x2
802203da: b2 95        	add	a1, a1, a2
802203dc: 83 e5 05 00  	lwu	a1, 0x0(a1)
802203e0: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
802203e4: 08 69        	ld	a0, 0x10(a0)
802203e6: 08 61        	ld	a0, 0x0(a0)
802203e8: 97 d0 ff ff  	auipc	ra, 0xffffd
802203ec: e7 80 80 cf  	jalr	-0x308(ra) <ekernel+0xffcd00e0>
802203f0: 2a 86        	mv	a2, a0
802203f2: 03 35 04 e3  	ld	a0, -0x1d0(s0)
802203f6: 23 3c c4 e2  	sd	a2, -0x1c8(s0)
802203fa: 2e 86        	mv	a2, a1
802203fc: 83 35 84 e3  	ld	a1, -0x1c8(s0)
80220400: 97 60 00 00  	auipc	ra, 0x6
80220404: e7 80 40 a0  	jalr	-0x5fc(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
80220408: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022040c: 13 05 84 f4  	addi	a0, s0, -0xb8
80220410: 97 d0 ff ff  	auipc	ra, 0xffffd
80220414: e7 80 40 d7  	jalr	-0x28c(ra) <ekernel+0xffcd0184>
80220418: aa 85        	mv	a1, a0
8022041a: 23 30 b4 e4  	sd	a1, -0x1c0(s0)
8022041e: 23 34 a4 fa  	sd	a0, -0x58(s0)
80220422: 23 3c a4 fa  	sd	a0, -0x48(s0)
80220426: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80220428: 23 0b b4 fa  	sb	a1, -0x4a(s0)
8022042c: 03 46 64 fb  	lbu	a2, -0x4a(s0)
80220430: 85 45        	li	a1, 0x1
80220432: 97 f0 ff ff  	auipc	ra, 0xfffff
80220436: e7 80 40 d7  	jalr	-0x28c(ra) <ekernel+0xffcd21a6>
8022043a: aa 85        	mv	a1, a0
8022043c: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
80220440: 23 30 a4 fc  	sd	a0, -0x40(s0)
80220444: 09 a0        	j	0x80220446 <.Lpcrel_hi21+0x8e>
80220446: 03 35 04 e4  	ld	a0, -0x1c0(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8022044a: 21 05        	addi	a0, a0, 0x8
8022044c: 89 45        	li	a1, 0x2
8022044e: a3 0b b4 fa  	sb	a1, -0x49(s0)
80220452: 83 45 74 fb  	lbu	a1, -0x49(s0)
80220456: 97 f0 ff ff  	auipc	ra, 0xfffff
8022045a: e7 80 40 d0  	jalr	-0x2fc(ra) <ekernel+0xffcd215a>
8022045e: 83 35 84 e4  	ld	a1, -0x1b8(s0)
80220462: 63 08 b5 00  	beq	a0, a1, 0x80220472 <.Lpcrel_hi21+0xba>
80220466: 09 a0        	j	0x80220468 <.Lpcrel_hi21+0xb0>
;             crate::relax();
80220468: 97 f0 ff ff  	auipc	ra, 0xfffff
8022046c: e7 80 60 de  	jalr	-0x21a(ra) <ekernel+0xffcd224e>
80220470: d9 bf        	j	0x80220446 <.Lpcrel_hi21+0x8e>
80220472: 83 35 84 e4  	ld	a1, -0x1b8(s0)
80220476: 03 35 04 e4  	ld	a0, -0x1c0(s0)
;             next_serving: &self.next_serving,
8022047a: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8022047e: 41 05        	addi	a0, a0, 0x10
80220480: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         TicketMutexGuard {
80220484: 23 38 c4 f8  	sd	a2, -0x70(s0)
80220488: 23 30 b4 fa  	sd	a1, -0x60(s0)
8022048c: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         MutexGuard {
80220490: 03 35 04 fa  	ld	a0, -0x60(s0)
80220494: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80220498: 03 35 84 f9  	ld	a0, -0x68(s0)
8022049c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
802204a0: 03 35 04 f9  	ld	a0, -0x70(s0)
802204a4: 23 38 a4 f2  	sd	a0, -0xd0(s0)
802204a8: 13 05 04 f3  	addi	a0, s0, -0xd0
802204ac: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
;                     get_block_cache(indirect2[a1] as usize, Arc::clone(block_device))
802204b0: 97 20 00 00  	auipc	ra, 0x2
802204b4: e7 80 20 1c  	jalr	0x1c2(ra) <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4414d35563f79ba7E>
802204b8: 83 35 04 ea  	ld	a1, -0x160(s0)
;                         .modify(0, |indirect1: &mut IndirectBlock| {
802204bc: 90 6d        	ld	a2, 0x18(a1)
802204be: 8c 65        	ld	a1, 0x8(a1)
802204c0: 23 38 c4 f4  	sd	a2, -0xb0(s0)
802204c4: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;                     get_block_cache(indirect2[a1] as usize, Arc::clone(block_device))
802204c8: 03 36 04 f5  	ld	a2, -0xb0(s0)
802204cc: 83 36 84 f5  	ld	a3, -0xa8(s0)
802204d0: 81 45        	li	a1, 0x0
802204d2: 97 10 00 00  	auipc	ra, 0x1
802204d6: e7 80 c0 23  	jalr	0x23c(ra) <_ZN7easy_fs11block_cache10BlockCache6modify17h24d384a5a88c7471E>
802204da: 03 35 84 e2  	ld	a0, -0x1d8(s0)
;                         });
802204de: 97 d0 ff ff  	auipc	ra, 0xffffd
802204e2: e7 80 80 5b  	jalr	0x5b8(ra) <ekernel+0xffcd0a96>
802204e6: 13 05 84 f4  	addi	a0, s0, -0xb8
802204ea: 97 d0 ff ff  	auipc	ra, 0xffffd
802204ee: e7 80 40 24  	jalr	0x244(ra) <ekernel+0xffcd072e>
802204f2: bd b5        	j	0x80220360 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$17hee92767349bae046E+0x1cc>
802204f4: 03 35 04 e5  	ld	a0, -0x1b0(s0)

00000000802204f8 <.Lpcrel_hi22>:
;                     get_block_cache(indirect2[a1] as usize, Arc::clone(block_device))
802204f8: 97 85 01 00  	auipc	a1, 0x18
802204fc: 13 86 85 3a  	addi	a2, a1, 0x3a8
80220500: 93 05 00 08  	li	a1, 0x80
80220504: 97 00 01 00  	auipc	ra, 0x10
80220508: e7 80 c0 da  	jalr	-0x254(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008022050c <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hf2830fa19874a9eaE>:
;                         .modify(0, |indirect1: &mut IndirectBlock| {
8022050c: 5d 71        	addi	sp, sp, -0x50
8022050e: 86 e4        	sd	ra, 0x48(sp)
80220510: a2 e0        	sd	s0, 0x40(sp)
80220512: 80 08        	addi	s0, sp, 0x50
80220514: 23 3c b4 fa  	sd	a1, -0x48(s0)
80220518: aa 85        	mv	a1, a0
8022051a: 03 35 84 fb  	ld	a0, -0x48(s0)
8022051e: 23 30 b4 fc  	sd	a1, -0x40(s0)
80220522: 23 30 a4 fe  	sd	a0, -0x20(s0)
80220526: 93 05 00 08  	li	a1, 0x80
;                             for entry in indirect1.iter() {
8022052a: 97 d0 ff ff  	auipc	ra, 0xffffd
8022052e: e7 80 e0 dc  	jalr	-0x232(ra) <ekernel+0xffcd02f8>
80220532: 97 80 00 00  	auipc	ra, 0x8
80220536: e7 80 00 31  	jalr	0x310(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6cb43cd67448be0dE>
8022053a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022053e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80220542: 09 a0        	j	0x80220544 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hf2830fa19874a9eaE+0x38>
80220544: 13 05 84 fc  	addi	a0, s0, -0x38
;                             for entry in indirect1.iter() {
80220548: 97 80 00 00  	auipc	ra, 0x8
8022054c: e7 80 20 49  	jalr	0x492(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE>
80220550: 23 3c a4 fc  	sd	a0, -0x28(s0)
80220554: 03 35 84 fd  	ld	a0, -0x28(s0)
80220558: 11 e5        	bnez	a0, 0x80220564 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hf2830fa19874a9eaE+0x58>
8022055a: 09 a0        	j	0x8022055c <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hf2830fa19874a9eaE+0x50>
8022055c: a6 60        	ld	ra, 0x48(sp)
8022055e: 06 64        	ld	s0, 0x40(sp)
;                         });
80220560: 61 61        	addi	sp, sp, 0x50
80220562: 82 80        	ret
;                             for entry in indirect1.iter() {
80220564: 83 35 84 fd  	ld	a1, -0x28(s0)
80220568: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                                 v.push(*entry);
8022056c: 03 35 04 fc  	ld	a0, -0x40(s0)
80220570: 8c 41        	lw	a1, 0x0(a1)
80220572: 97 20 00 00  	auipc	ra, 0x2
80220576: e7 80 40 21  	jalr	0x214(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E>
8022057a: e9 b7        	j	0x80220544 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hf2830fa19874a9eaE+0x38>

000000008022057c <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb4d474b2b4e454aeE>:
;                         .modify(0, |indirect1: &mut IndirectBlock| {
8022057c: 35 71        	addi	sp, sp, -0xa0
8022057e: 06 ed        	sd	ra, 0x98(sp)
80220580: 22 e9        	sd	s0, 0x90(sp)
80220582: 00 11        	addi	s0, sp, 0xa0
80220584: 23 34 c4 f6  	sd	a2, -0x98(s0)
80220588: 2a 86        	mv	a2, a0
8022058a: 03 35 84 f6  	ld	a0, -0x98(s0)
8022058e: 23 30 c4 f8  	sd	a2, -0x80(s0)
80220592: 23 34 b4 f8  	sd	a1, -0x78(s0)
80220596: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022059a: 93 05 00 08  	li	a1, 0x80
;                             for entry in indirect1.iter().take(b1) {
8022059e: 97 d0 ff ff  	auipc	ra, 0xffffd
802205a2: e7 80 a0 d5  	jalr	-0x2a6(ra) <ekernel+0xffcd02f8>
802205a6: 23 38 a4 f6  	sd	a0, -0x90(s0)
802205aa: 2e 86        	mv	a2, a1
802205ac: 83 35 04 f7  	ld	a1, -0x90(s0)
802205b0: 03 35 04 f8  	ld	a0, -0x80(s0)
802205b4: 14 61        	ld	a3, 0x0(a0)
802205b6: 13 05 84 fa  	addi	a0, s0, -0x58
802205ba: 23 3c a4 f6  	sd	a0, -0x88(s0)
802205be: 97 80 00 00  	auipc	ra, 0x8
802205c2: e7 80 80 05  	jalr	0x58(ra) <_ZN4core4iter6traits8iterator8Iterator4take17h610ec437043bfb43E>
802205c6: 83 35 84 f7  	ld	a1, -0x88(s0)
802205ca: 13 05 04 f9  	addi	a0, s0, -0x70
802205ce: 97 50 00 00  	auipc	ra, 0x5
802205d2: e7 80 60 2e  	jalr	0x2e6(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfe7969ed5288dddeE>
802205d6: 03 35 04 fa  	ld	a0, -0x60(s0)
802205da: 23 38 a4 fc  	sd	a0, -0x30(s0)
802205de: 03 35 84 f9  	ld	a0, -0x68(s0)
802205e2: 23 34 a4 fc  	sd	a0, -0x38(s0)
802205e6: 03 35 04 f9  	ld	a0, -0x70(s0)
802205ea: 23 30 a4 fc  	sd	a0, -0x40(s0)
802205ee: 09 a0        	j	0x802205f0 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb4d474b2b4e454aeE+0x74>
802205f0: 13 05 04 fc  	addi	a0, s0, -0x40
;                             for entry in indirect1.iter().take(b1) {
802205f4: 97 50 00 00  	auipc	ra, 0x5
802205f8: e7 80 60 21  	jalr	0x216(ra) <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h05658715eedd082bE>
802205fc: 23 3c a4 fc  	sd	a0, -0x28(s0)
80220600: 03 35 84 fd  	ld	a0, -0x28(s0)
80220604: 11 e5        	bnez	a0, 0x80220610 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb4d474b2b4e454aeE+0x94>
80220606: 09 a0        	j	0x80220608 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb4d474b2b4e454aeE+0x8c>
80220608: ea 60        	ld	ra, 0x98(sp)
8022060a: 4a 64        	ld	s0, 0x90(sp)
;                         });
8022060c: 0d 61        	addi	sp, sp, 0xa0
8022060e: 82 80        	ret
;                             for entry in indirect1.iter().take(b1) {
80220610: 83 35 84 fd  	ld	a1, -0x28(s0)
80220614: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                                 v.push(*entry);
80220618: 03 35 84 f8  	ld	a0, -0x78(s0)
8022061c: 8c 41        	lw	a1, 0x0(a1)
8022061e: 97 20 00 00  	auipc	ra, 0x2
80220622: e7 80 80 16  	jalr	0x168(ra) <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E>
80220626: e9 b7        	j	0x802205f0 <_ZN7easy_fs6layout9DiskInode10clear_size28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb4d474b2b4e454aeE+0x74>

0000000080220628 <_ZN7easy_fs6layout9DiskInode7read_at28_$u7b$$u7b$closure$u7d$$u7d$17h5dc14f09482fc581E>:
;             .read(0, |data_block: &DataBlock| {
80220628: 1d 71        	addi	sp, sp, -0x60
8022062a: 86 ec        	sd	ra, 0x58(sp)
8022062c: a2 e8        	sd	s0, 0x50(sp)
8022062e: 80 10        	addi	s0, sp, 0x60
80220630: 23 34 b4 fa  	sd	a1, -0x58(s0)
80220634: 23 38 a4 fa  	sd	a0, -0x50(s0)
80220638: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 let src = &data_block[start % BLOCK_SZ..(start % BLOCK_SZ + block_read_size)];
8022063c: 0c 61        	ld	a1, 0x0(a0)
8022063e: 8c 61        	ld	a1, 0x0(a1)
80220640: 93 f5 f5 1f  	andi	a1, a1, 0x1ff
80220644: 23 3c b4 fa  	sd	a1, -0x48(s0)
80220648: 08 65        	ld	a0, 0x8(a0)
8022064a: 08 61        	ld	a0, 0x0(a0)
8022064c: 2e 95        	add	a0, a0, a1
8022064e: 23 30 a4 fc  	sd	a0, -0x40(s0)
80220652: 63 60 b5 06  	bltu	a0, a1, 0x802206b2 <.Lpcrel_hi25>
80220656: 09 a0        	j	0x80220658 <_ZN7easy_fs6layout9DiskInode7read_at28_$u7b$$u7b$closure$u7d$$u7d$17h5dc14f09482fc581E+0x30>
80220658: 03 35 84 fa  	ld	a0, -0x58(s0)
8022065c: 83 35 04 fc  	ld	a1, -0x40(s0)
80220660: 03 36 84 fb  	ld	a2, -0x48(s0)
;                 let src = &data_block[start % BLOCK_SZ..(start % BLOCK_SZ + block_read_size)];
80220664: 23 34 c4 fc  	sd	a2, -0x38(s0)
80220668: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022066c: 83 35 84 fc  	ld	a1, -0x38(s0)
80220670: 03 36 04 fd  	ld	a2, -0x30(s0)

0000000080220674 <.Lpcrel_hi23>:
80220674: 97 86 01 00  	auipc	a3, 0x18
80220678: 93 86 c6 25  	addi	a3, a3, 0x25c
8022067c: 97 30 00 00  	auipc	ra, 0x3
80220680: e7 80 c0 45  	jalr	0x45c(ra) <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb3f1b4c63a96d16cE>
80220684: 2a 86        	mv	a2, a0
80220686: 03 35 04 fb  	ld	a0, -0x50(s0)
8022068a: ae 86        	mv	a3, a1
8022068c: 23 30 c4 fe  	sd	a2, -0x20(s0)
80220690: 23 34 d4 fe  	sd	a3, -0x18(s0)
;                 dst.copy_from_slice(src);
80220694: 0c 69        	ld	a1, 0x10(a0)
80220696: 88 61        	ld	a0, 0x0(a1)
80220698: 8c 65        	ld	a1, 0x8(a1)

000000008022069a <.Lpcrel_hi24>:
8022069a: 17 87 01 00  	auipc	a4, 0x18
8022069e: 13 07 e7 24  	addi	a4, a4, 0x24e
802206a2: 97 d0 ff ff  	auipc	ra, 0xffffd
802206a6: e7 80 00 b6  	jalr	-0x4a0(ra) <ekernel+0xffcd0202>
802206aa: e6 60        	ld	ra, 0x58(sp)
802206ac: 46 64        	ld	s0, 0x50(sp)
;             });
802206ae: 25 61        	addi	sp, sp, 0x60
802206b0: 82 80        	ret

00000000802206b2 <.Lpcrel_hi25>:
;                 let src = &data_block[start % BLOCK_SZ..(start % BLOCK_SZ + block_read_size)];
802206b2: 17 85 01 00  	auipc	a0, 0x18
802206b6: 13 05 e5 0d  	addi	a0, a0, 0xde

00000000802206ba <.Lpcrel_hi26>:
802206ba: 97 85 01 00  	auipc	a1, 0x18
802206be: 13 86 e5 1f  	addi	a2, a1, 0x1fe
802206c2: f1 45        	li	a1, 0x1c
802206c4: 97 00 01 00  	auipc	ra, 0x10
802206c8: e7 80 40 b5  	jalr	-0x4ac(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802206cc <_ZN7easy_fs6layout9DiskInode8write_at28_$u7b$$u7b$closure$u7d$$u7d$17h75e06e71fb31536bE>:
;             .modify(0, |data_block: &mut DataBlock| {
802206cc: 11 71        	addi	sp, sp, -0x100
802206ce: 86 fd        	sd	ra, 0xf8(sp)
802206d0: a2 f9        	sd	s0, 0xf0(sp)
802206d2: 00 02        	addi	s0, sp, 0x100
802206d4: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802206d8: 23 30 a4 f4  	sd	a0, -0xc0(s0)
802206dc: 23 34 b4 f8  	sd	a1, -0x78(s0)
;                 let src = &buf[write_size..write_size + block_write_size];
802206e0: 0c 61        	ld	a1, 0x0(a0)
802206e2: 90 61        	ld	a2, 0x0(a1)
802206e4: 23 34 c4 f4  	sd	a2, -0xb8(s0)
802206e8: 8c 65        	ld	a1, 0x8(a1)
802206ea: 23 38 b4 f4  	sd	a1, -0xb0(s0)
802206ee: 0c 65        	ld	a1, 0x8(a0)
802206f0: 8c 61        	ld	a1, 0x0(a1)
802206f2: 23 3c b4 f4  	sd	a1, -0xa8(s0)
802206f6: 08 69        	ld	a0, 0x10(a0)
802206f8: 08 61        	ld	a0, 0x0(a0)
802206fa: 2e 95        	add	a0, a0, a1
802206fc: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80220700: 63 60 b5 0e  	bltu	a0, a1, 0x802207e0 <.Lpcrel_hi29>
80220704: 09 a0        	j	0x80220706 <_ZN7easy_fs6layout9DiskInode8write_at28_$u7b$$u7b$closure$u7d$$u7d$17h75e06e71fb31536bE+0x3a>
80220706: 03 36 04 f5  	ld	a2, -0xb0(s0)
8022070a: 83 36 84 f4  	ld	a3, -0xb8(s0)
8022070e: 03 35 04 f6  	ld	a0, -0xa0(s0)
80220712: 83 35 84 f5  	ld	a1, -0xa8(s0)
;                 let src = &buf[write_size..write_size + block_write_size];
80220716: 23 34 b4 f6  	sd	a1, -0x98(s0)
8022071a: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022071e: 83 35 84 f6  	ld	a1, -0x98(s0)
80220722: 23 34 b4 f2  	sd	a1, -0xd8(s0)
80220726: 03 35 04 f7  	ld	a0, -0x90(s0)
8022072a: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8022072e: 23 38 d4 fa  	sd	a3, -0x50(s0)
80220732: 23 3c c4 fa  	sd	a2, -0x48(s0)
80220736: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022073a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022073e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80220742: 23 3c a4 fc  	sd	a0, -0x28(s0)
80220746: 23 30 d4 fe  	sd	a3, -0x20(s0)
8022074a: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         if self.start > self.end {
8022074e: 63 6a b5 00  	bltu	a0, a1, 0x80220762 <_ZN7easy_fs6layout9DiskInode8write_at28_$u7b$$u7b$closure$u7d$$u7d$17h75e06e71fb31536bE+0x96>
80220752: 09 a0        	j	0x80220754 <_ZN7easy_fs6layout9DiskInode8write_at28_$u7b$$u7b$closure$u7d$$u7d$17h75e06e71fb31536bE+0x88>
80220754: 03 35 04 f5  	ld	a0, -0xb0(s0)
80220758: 83 35 04 f3  	ld	a1, -0xd0(s0)
;         } else if self.end > slice.len() {
8022075c: 63 6f b5 00  	bltu	a0, a1, 0x8022077a <.Lpcrel_hi27+0x10>
80220760: 0d a8        	j	0x80220792 <.Lpcrel_hi28+0x10>
80220762: 83 35 04 f3  	ld	a1, -0xd0(s0)
80220766: 03 35 84 f2  	ld	a0, -0xd8(s0)

000000008022076a <.Lpcrel_hi27>:
;             slice_index_order_fail(self.start, self.end);
8022076a: 17 86 01 00  	auipc	a2, 0x18
8022076e: 13 06 e6 1a  	addi	a2, a2, 0x1ae
80220772: 97 10 01 00  	auipc	ra, 0x11
80220776: e7 80 20 f7  	jalr	-0x8e(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
8022077a: 83 35 04 f5  	ld	a1, -0xb0(s0)
8022077e: 03 35 04 f3  	ld	a0, -0xd0(s0)

0000000080220782 <.Lpcrel_hi28>:
;             slice_end_index_len_fail(self.end, slice.len());
80220782: 17 86 01 00  	auipc	a2, 0x18
80220786: 13 06 66 19  	addi	a2, a2, 0x196
8022078a: 97 10 01 00  	auipc	ra, 0x11
8022078e: e7 80 60 f1  	jalr	-0xea(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
80220792: 83 36 04 f5  	ld	a3, -0xb0(s0)
80220796: 03 36 84 f4  	ld	a2, -0xb8(s0)
8022079a: 83 35 04 f3  	ld	a1, -0xd0(s0)
8022079e: 03 35 84 f2  	ld	a0, -0xd8(s0)
;         unsafe { &*self.get_unchecked(slice) }
802207a2: 97 f0 ff ff  	auipc	ra, 0xfffff
802207a6: e7 80 40 b3  	jalr	-0x4cc(ra) <ekernel+0xffcd22d6>
802207aa: 2a 86        	mv	a2, a0
802207ac: 03 35 04 f4  	ld	a0, -0xc0(s0)
;                 let src = &buf[write_size..write_size + block_write_size];
802207b0: b2 86        	mv	a3, a2
802207b2: 23 34 d4 f0  	sd	a3, -0xf8(s0)
802207b6: ae 86        	mv	a3, a1
802207b8: 23 38 d4 f0  	sd	a3, -0xf0(s0)
802207bc: 23 38 c4 f8  	sd	a2, -0x70(s0)
802207c0: 23 3c b4 f8  	sd	a1, -0x68(s0)
;                 let dst = &mut data_block[start % BLOCK_SZ..start % BLOCK_SZ + block_write_size];
802207c4: 0c 6d        	ld	a1, 0x18(a0)
802207c6: 8c 61        	ld	a1, 0x0(a1)
802207c8: 93 f5 f5 1f  	andi	a1, a1, 0x1ff
802207cc: 23 3c b4 f0  	sd	a1, -0xe8(s0)
802207d0: 08 69        	ld	a0, 0x10(a0)
802207d2: 08 61        	ld	a0, 0x0(a0)
802207d4: 2e 95        	add	a0, a0, a1
802207d6: 23 30 a4 f2  	sd	a0, -0xe0(s0)
802207da: 63 6a b5 06  	bltu	a0, a1, 0x8022084e <.Lpcrel_hi33>
802207de: 31 a8        	j	0x802207fa <.Lpcrel_hi30+0x12>

00000000802207e0 <.Lpcrel_hi29>:
;                 let src = &buf[write_size..write_size + block_write_size];
802207e0: 17 85 01 00  	auipc	a0, 0x18
802207e4: 13 05 05 fb  	addi	a0, a0, -0x50

00000000802207e8 <.Lpcrel_hi30>:
802207e8: 97 85 01 00  	auipc	a1, 0x18
802207ec: 13 86 85 11  	addi	a2, a1, 0x118
802207f0: f1 45        	li	a1, 0x1c
802207f2: 97 00 01 00  	auipc	ra, 0x10
802207f6: e7 80 60 a2  	jalr	-0x5da(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802207fa: 03 35 84 f3  	ld	a0, -0xc8(s0)
802207fe: 83 35 04 f2  	ld	a1, -0xe0(s0)
80220802: 03 36 84 f1  	ld	a2, -0xe8(s0)
;                 let dst = &mut data_block[start % BLOCK_SZ..start % BLOCK_SZ + block_write_size];
80220806: 23 3c c4 f6  	sd	a2, -0x88(s0)
8022080a: 23 30 b4 f8  	sd	a1, -0x80(s0)
8022080e: 83 35 84 f7  	ld	a1, -0x88(s0)
80220812: 03 36 04 f8  	ld	a2, -0x80(s0)

0000000080220816 <.Lpcrel_hi31>:
80220816: 97 86 01 00  	auipc	a3, 0x18
8022081a: 93 86 26 13  	addi	a3, a3, 0x132
8022081e: 97 30 00 00  	auipc	ra, 0x3
80220822: e7 80 e0 44  	jalr	0x44e(ra) <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17hcb15cc90ee060704E>
80220826: 03 36 84 f0  	ld	a2, -0xf8(s0)
8022082a: 83 36 04 f1  	ld	a3, -0xf0(s0)
8022082e: 23 30 a4 fa  	sd	a0, -0x60(s0)
80220832: 23 34 b4 fa  	sd	a1, -0x58(s0)

0000000080220836 <.Lpcrel_hi32>:
;                 dst.copy_from_slice(src);
80220836: 17 87 01 00  	auipc	a4, 0x18
8022083a: 13 07 a7 12  	addi	a4, a4, 0x12a
8022083e: 97 d0 ff ff  	auipc	ra, 0xffffd
80220842: e7 80 40 9c  	jalr	-0x63c(ra) <ekernel+0xffcd0202>
80220846: ee 70        	ld	ra, 0xf8(sp)
80220848: 4e 74        	ld	s0, 0xf0(sp)
;             });
8022084a: 11 61        	addi	sp, sp, 0x100
8022084c: 82 80        	ret

000000008022084e <.Lpcrel_hi33>:
;                 let dst = &mut data_block[start % BLOCK_SZ..start % BLOCK_SZ + block_write_size];
8022084e: 17 85 01 00  	auipc	a0, 0x18
80220852: 13 05 25 f4  	addi	a0, a0, -0xbe

0000000080220856 <.Lpcrel_hi34>:
80220856: 97 85 01 00  	auipc	a1, 0x18
8022085a: 13 86 a5 0d  	addi	a2, a1, 0xda
8022085e: f1 45        	li	a1, 0x1c
80220860: 97 00 01 00  	auipc	ra, 0x10
80220864: e7 80 80 9b  	jalr	-0x648(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080220868 <_ZN7easy_fs6layout8DirEntry4name28_$u7b$$u7b$closure$u7d$$u7d$17h5b244563f6cf133cE>:
;         let len = (0usize..).find(|i| self.name[*i] == 0).unwrap();
80220868: 79 71        	addi	sp, sp, -0x30
8022086a: 06 f4        	sd	ra, 0x28(sp)
8022086c: 22 f0        	sd	s0, 0x20(sp)
8022086e: 00 18        	addi	s0, sp, 0x30
80220870: 23 38 a4 fc  	sd	a0, -0x30(s0)
80220874: 23 30 a4 fe  	sd	a0, -0x20(s0)
80220878: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022087c: 8c 61        	ld	a1, 0x0(a1)
8022087e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80220882: 6d 45        	li	a0, 0x1b
80220884: 63 62 b5 02  	bltu	a0, a1, 0x802208a8 <_ZN7easy_fs6layout8DirEntry4name28_$u7b$$u7b$closure$u7d$$u7d$17h5b244563f6cf133cE+0x40>
80220888: 09 a0        	j	0x8022088a <_ZN7easy_fs6layout8DirEntry4name28_$u7b$$u7b$closure$u7d$$u7d$17h5b244563f6cf133cE+0x22>
8022088a: 83 35 84 fd  	ld	a1, -0x28(s0)
8022088e: 03 35 04 fd  	ld	a0, -0x30(s0)
;         let len = (0usize..).find(|i| self.name[*i] == 0).unwrap();
80220892: 08 61        	ld	a0, 0x0(a0)
80220894: 08 61        	ld	a0, 0x0(a0)
80220896: 2e 95        	add	a0, a0, a1
80220898: 03 45 05 00  	lbu	a0, 0x0(a0)
8022089c: 13 35 15 00  	seqz	a0, a0
802208a0: a2 70        	ld	ra, 0x28(sp)
802208a2: 02 74        	ld	s0, 0x20(sp)
802208a4: 45 61        	addi	sp, sp, 0x30
802208a6: 82 80        	ret
802208a8: 03 35 84 fd  	ld	a0, -0x28(s0)

00000000802208ac <.Lpcrel_hi35>:
;         let len = (0usize..).find(|i| self.name[*i] == 0).unwrap();
802208ac: 97 85 01 00  	auipc	a1, 0x18
802208b0: 13 86 c5 0c  	addi	a2, a1, 0xcc
802208b4: f1 45        	li	a1, 0x1c
802208b6: 97 00 01 00  	auipc	ra, 0x10
802208ba: e7 80 a0 9f  	jalr	-0x606(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

00000000802208be <_ZN7easy_fs3efs14EasyFileSystem4open17h306860e803e985d2E>:
;     pub fn open(block_device: Arc<dyn BlockDevice>) -> Arc<Mutex<Self>> {
802208be: 31 71        	addi	sp, sp, -0xc0
802208c0: 06 fd        	sd	ra, 0xb8(sp)
802208c2: 22 f9        	sd	s0, 0xb0(sp)
802208c4: 80 01        	addi	s0, sp, 0xc0
802208c6: 23 38 a4 f6  	sd	a0, -0x90(s0)
802208ca: 23 3c b4 f6  	sd	a1, -0x88(s0)
802208ce: 13 05 04 f7  	addi	a0, s0, -0x90
;         get_block_cache(0, Arc::clone(&block_device))
802208d2: 97 d0 ff ff  	auipc	ra, 0xffffd
802208d6: e7 80 e0 80  	jalr	-0x7f2(ra) <ekernel+0xffcd00e0>
802208da: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802208de: 2e 86        	mv	a2, a1
802208e0: 83 35 04 f5  	ld	a1, -0xb0(s0)
802208e4: 01 45        	li	a0, 0x0
802208e6: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802208ea: 97 50 00 00  	auipc	ra, 0x5
802208ee: e7 80 a0 51  	jalr	0x51a(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
802208f2: 23 3c a4 f8  	sd	a0, -0x68(s0)
802208f6: 13 05 84 f9  	addi	a0, s0, -0x68
802208fa: 97 d0 ff ff  	auipc	ra, 0xffffd
802208fe: e7 80 a0 88  	jalr	-0x776(ra) <ekernel+0xffcd0184>
80220902: 83 35 84 f5  	ld	a1, -0xa8(s0)
80220906: 2a 86        	mv	a2, a0
80220908: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8022090c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80220910: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80220914: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80220918: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8022091c: 85 45        	li	a1, 0x1
8022091e: 97 f0 ff ff  	auipc	ra, 0xfffff
80220922: e7 80 80 88  	jalr	-0x778(ra) <ekernel+0xffcd21a6>
80220926: aa 85        	mv	a1, a0
80220928: 23 34 b4 f6  	sd	a1, -0x98(s0)
8022092c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80220930: 09 a0        	j	0x80220932 <_ZN7easy_fs3efs14EasyFileSystem4open17h306860e803e985d2E+0x74>
80220932: 03 35 04 f6  	ld	a0, -0xa0(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80220936: 21 05        	addi	a0, a0, 0x8
80220938: 89 45        	li	a1, 0x2
8022093a: a3 0b b4 fc  	sb	a1, -0x29(s0)
8022093e: 83 45 74 fd  	lbu	a1, -0x29(s0)
80220942: 97 f0 ff ff  	auipc	ra, 0xfffff
80220946: e7 80 80 81  	jalr	-0x7e8(ra) <ekernel+0xffcd215a>
8022094a: 83 35 84 f6  	ld	a1, -0x98(s0)
8022094e: 63 08 b5 00  	beq	a0, a1, 0x8022095e <_ZN7easy_fs3efs14EasyFileSystem4open17h306860e803e985d2E+0xa0>
80220952: 09 a0        	j	0x80220954 <_ZN7easy_fs3efs14EasyFileSystem4open17h306860e803e985d2E+0x96>
;             crate::relax();
80220954: 97 f0 ff ff  	auipc	ra, 0xfffff
80220958: e7 80 a0 8f  	jalr	-0x706(ra) <ekernel+0xffcd224e>
8022095c: d9 bf        	j	0x80220932 <_ZN7easy_fs3efs14EasyFileSystem4open17h306860e803e985d2E+0x74>
8022095e: 83 35 84 f6  	ld	a1, -0x98(s0)
80220962: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             next_serving: &self.next_serving,
80220966: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8022096a: 41 05        	addi	a0, a0, 0x10
8022096c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
80220970: 23 38 c4 fa  	sd	a2, -0x50(s0)
80220974: 23 30 b4 fc  	sd	a1, -0x40(s0)
80220978: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8022097c: 03 35 04 fc  	ld	a0, -0x40(s0)
80220980: 23 38 a4 f8  	sd	a0, -0x70(s0)
80220984: 03 35 84 fb  	ld	a0, -0x48(s0)
80220988: 23 34 a4 f8  	sd	a0, -0x78(s0)
8022098c: 03 35 04 fb  	ld	a0, -0x50(s0)
80220990: 23 30 a4 f8  	sd	a0, -0x80(s0)
80220994: 13 05 04 f8  	addi	a0, s0, -0x80
80220998: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;         get_block_cache(0, Arc::clone(&block_device))
8022099c: 97 20 00 00  	auipc	ra, 0x2
802209a0: e7 80 20 c8  	jalr	-0x37e(ra) <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc9578c5254294c75E>
;             .read(0, |super_block: &SuperBlock| {
802209a4: 03 36 04 f7  	ld	a2, -0x90(s0)
802209a8: 83 35 84 f7  	ld	a1, -0x88(s0)
802209ac: 23 30 c4 fa  	sd	a2, -0x60(s0)
802209b0: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         get_block_cache(0, Arc::clone(&block_device))
802209b4: 03 36 04 fa  	ld	a2, -0x60(s0)
802209b8: 83 36 84 fa  	ld	a3, -0x58(s0)
802209bc: 81 45        	li	a1, 0x0
802209be: 97 10 00 00  	auipc	ra, 0x1
802209c2: e7 80 40 c2  	jalr	-0x3dc(ra) <_ZN7easy_fs11block_cache10BlockCache4read17hf78c0c125f437f89E>
802209c6: aa 85        	mv	a1, a0
802209c8: 03 35 04 f4  	ld	a0, -0xc0(s0)
802209cc: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;     }
802209d0: 97 d0 ff ff  	auipc	ra, 0xffffd
802209d4: e7 80 60 0c  	jalr	0xc6(ra) <ekernel+0xffcd0a96>
802209d8: 13 05 84 f9  	addi	a0, s0, -0x68
802209dc: 97 d0 ff ff  	auipc	ra, 0xffffd
802209e0: e7 80 20 d5  	jalr	-0x2ae(ra) <ekernel+0xffcd072e>
802209e4: 03 35 84 f4  	ld	a0, -0xb8(s0)
802209e8: ea 70        	ld	ra, 0xb8(sp)
802209ea: 4a 74        	ld	s0, 0xb0(sp)
802209ec: 29 61        	addi	sp, sp, 0xc0
802209ee: 82 80        	ret

00000000802209f0 <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E>:
;     pub fn root_inode(efs: &Arc<Mutex<Self>>) -> Inode {
802209f0: 4d 71        	addi	sp, sp, -0x150
802209f2: 86 e6        	sd	ra, 0x148(sp)
802209f4: a2 e2        	sd	s0, 0x140(sp)
802209f6: 80 0a        	addi	s0, sp, 0x150
802209f8: 23 3c b4 ee  	sd	a1, -0x108(s0)
802209fc: aa 85        	mv	a1, a0
802209fe: 03 35 84 ef  	ld	a0, -0x108(s0)
80220a02: 23 30 b4 f0  	sd	a1, -0x100(s0)
80220a06: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;         let block_device = Arc::clone(&efs.lock().block_device);
80220a0a: 97 c0 ff ff  	auipc	ra, 0xffffc
80220a0e: e7 80 e0 79  	jalr	0x79e(ra) <ekernel+0xffcd01a8>
80220a12: aa 85        	mv	a1, a0
80220a14: 23 34 b4 f0  	sd	a1, -0xf8(s0)
80220a18: 23 34 a4 fa  	sd	a0, -0x58(s0)
80220a1c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80220a20: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80220a22: 23 0b b4 fa  	sb	a1, -0x4a(s0)
80220a26: 03 46 64 fb  	lbu	a2, -0x4a(s0)
80220a2a: 85 45        	li	a1, 0x1
80220a2c: 97 e0 ff ff  	auipc	ra, 0xffffe
80220a30: e7 80 a0 77  	jalr	0x77a(ra) <ekernel+0xffcd21a6>
80220a34: aa 85        	mv	a1, a0
80220a36: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80220a3a: 23 30 a4 fc  	sd	a0, -0x40(s0)
80220a3e: 09 a0        	j	0x80220a40 <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E+0x50>
80220a40: 03 35 84 f0  	ld	a0, -0xf8(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80220a44: 21 05        	addi	a0, a0, 0x8
80220a46: 89 45        	li	a1, 0x2
80220a48: a3 0b b4 fa  	sb	a1, -0x49(s0)
80220a4c: 83 45 74 fb  	lbu	a1, -0x49(s0)
80220a50: 97 e0 ff ff  	auipc	ra, 0xffffe
80220a54: e7 80 a0 70  	jalr	0x70a(ra) <ekernel+0xffcd215a>
80220a58: 83 35 04 f1  	ld	a1, -0xf0(s0)
80220a5c: 63 08 b5 00  	beq	a0, a1, 0x80220a6c <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E+0x7c>
80220a60: 09 a0        	j	0x80220a62 <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E+0x72>
;             crate::relax();
80220a62: 97 e0 ff ff  	auipc	ra, 0xffffe
80220a66: e7 80 c0 7e  	jalr	0x7ec(ra) <ekernel+0xffcd224e>
80220a6a: d9 bf        	j	0x80220a40 <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E+0x50>
80220a6c: 83 35 04 f1  	ld	a1, -0xf0(s0)
80220a70: 03 35 84 f0  	ld	a0, -0xf8(s0)
;             next_serving: &self.next_serving,
80220a74: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80220a78: 41 05        	addi	a0, a0, 0x10
80220a7a: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         TicketMutexGuard {
80220a7e: 23 38 c4 f8  	sd	a2, -0x70(s0)
80220a82: 23 30 b4 fa  	sd	a1, -0x60(s0)
80220a86: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         MutexGuard {
80220a8a: 03 35 04 fa  	ld	a0, -0x60(s0)
80220a8e: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80220a92: 03 35 84 f9  	ld	a0, -0x68(s0)
80220a96: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80220a9a: 03 35 04 f9  	ld	a0, -0x70(s0)
80220a9e: 23 3c a4 f0  	sd	a0, -0xe8(s0)
80220aa2: 13 05 84 f1  	addi	a0, s0, -0xe8
80220aa6: 23 38 a4 ec  	sd	a0, -0x130(s0)
;         let block_device = Arc::clone(&efs.lock().block_device);
80220aaa: 97 20 00 00  	auipc	ra, 0x2
80220aae: e7 80 00 b9  	jalr	-0x470(ra) <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd7e976801336d70aE>
80220ab2: 97 c0 ff ff  	auipc	ra, 0xffffc
80220ab6: e7 80 e0 62  	jalr	0x62e(ra) <ekernel+0xffcd00e0>
80220aba: 2a 86        	mv	a2, a0
80220abc: 03 35 04 ed  	ld	a0, -0x130(s0)
80220ac0: b2 86        	mv	a3, a2
80220ac2: 23 3c d4 ec  	sd	a3, -0x128(s0)
80220ac6: ae 86        	mv	a3, a1
80220ac8: 23 30 d4 ee  	sd	a3, -0x120(s0)
80220acc: 23 38 c4 f4  	sd	a2, -0xb0(s0)
80220ad0: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80220ad4: 97 d0 ff ff  	auipc	ra, 0xffffd
80220ad8: e7 80 e0 f6  	jalr	-0x92(ra) <ekernel+0xffcd0a42>
80220adc: 03 35 84 ef  	ld	a0, -0x108(s0)
;         let (block_id, block_offset) = efs.lock().get_disk_inode_pos(0);
80220ae0: 97 c0 ff ff  	auipc	ra, 0xffffc
80220ae4: e7 80 80 6c  	jalr	0x6c8(ra) <ekernel+0xffcd01a8>
80220ae8: aa 85        	mv	a1, a0
80220aea: 23 34 b4 ee  	sd	a1, -0x118(s0)
80220aee: 23 34 a4 f8  	sd	a0, -0x78(s0)
80220af2: 23 3c a4 fc  	sd	a0, -0x28(s0)
80220af6: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80220af8: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80220afc: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80220b00: 85 45        	li	a1, 0x1
80220b02: 97 e0 ff ff  	auipc	ra, 0xffffe
80220b06: e7 80 40 6a  	jalr	0x6a4(ra) <ekernel+0xffcd21a6>
80220b0a: aa 85        	mv	a1, a0
80220b0c: 23 38 b4 ee  	sd	a1, -0x110(s0)
80220b10: 23 30 a4 fe  	sd	a0, -0x20(s0)
80220b14: 09 a0        	j	0x80220b16 <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E+0x126>
80220b16: 03 35 84 ee  	ld	a0, -0x118(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80220b1a: 21 05        	addi	a0, a0, 0x8
80220b1c: 89 45        	li	a1, 0x2
80220b1e: a3 0b b4 fc  	sb	a1, -0x29(s0)
80220b22: 83 45 74 fd  	lbu	a1, -0x29(s0)
80220b26: 97 e0 ff ff  	auipc	ra, 0xffffe
80220b2a: e7 80 40 63  	jalr	0x634(ra) <ekernel+0xffcd215a>
80220b2e: 83 35 04 ef  	ld	a1, -0x110(s0)
80220b32: 63 08 b5 00  	beq	a0, a1, 0x80220b42 <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E+0x152>
80220b36: 09 a0        	j	0x80220b38 <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E+0x148>
;             crate::relax();
80220b38: 97 e0 ff ff  	auipc	ra, 0xffffe
80220b3c: e7 80 60 71  	jalr	0x716(ra) <ekernel+0xffcd224e>
80220b40: d9 bf        	j	0x80220b16 <_ZN7easy_fs3efs14EasyFileSystem10root_inode17hff4383e6dce8af85E+0x126>
80220b42: 83 35 04 ef  	ld	a1, -0x110(s0)
80220b46: 03 35 84 ee  	ld	a0, -0x118(s0)
;             next_serving: &self.next_serving,
80220b4a: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80220b4e: 41 05        	addi	a0, a0, 0x10
80220b50: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
80220b54: 23 38 c4 f6  	sd	a2, -0x90(s0)
80220b58: 23 30 b4 f8  	sd	a1, -0x80(s0)
80220b5c: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         MutexGuard {
80220b60: 03 35 04 f8  	ld	a0, -0x80(s0)
80220b64: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80220b68: 03 35 84 f7  	ld	a0, -0x88(s0)
80220b6c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80220b70: 03 35 04 f7  	ld	a0, -0x90(s0)
80220b74: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80220b78: 13 05 04 f3  	addi	a0, s0, -0xd0
80220b7c: 23 3c a4 ea  	sd	a0, -0x148(s0)
;         let (block_id, block_offset) = efs.lock().get_disk_inode_pos(0);
80220b80: 97 20 00 00  	auipc	ra, 0x2
80220b84: e7 80 a0 ab  	jalr	-0x546(ra) <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd7e976801336d70aE>
80220b88: 81 45        	li	a1, 0x0
80220b8a: 97 00 00 00  	auipc	ra, 0x0
80220b8e: e7 80 80 05  	jalr	0x58(ra) <_ZN7easy_fs3efs14EasyFileSystem18get_disk_inode_pos17hde2b388abb5ee396E>
80220b92: 2a 86        	mv	a2, a0
80220b94: 03 35 84 eb  	ld	a0, -0x148(s0)
80220b98: 23 30 c4 ec  	sd	a2, -0x140(s0)
80220b9c: 23 34 b4 ec  	sd	a1, -0x138(s0)
80220ba0: 23 22 c4 f6  	sw	a2, -0x9c(s0)
80220ba4: 23 34 b4 f6  	sd	a1, -0x98(s0)
80220ba8: 97 d0 ff ff  	auipc	ra, 0xffffd
80220bac: e7 80 a0 e9  	jalr	-0x166(ra) <ekernel+0xffcd0a42>
80220bb0: 03 35 84 ef  	ld	a0, -0x108(s0)
;         Inode::new(block_id, block_offset, Arc::clone(efs), block_device)
80220bb4: 97 c0 ff ff  	auipc	ra, 0xffffc
80220bb8: e7 80 80 42  	jalr	0x428(ra) <ekernel+0xffccffdc>
80220bbc: 83 35 04 ec  	ld	a1, -0x140(s0)
80220bc0: 03 36 84 ec  	ld	a2, -0x138(s0)
80220bc4: 03 37 84 ed  	ld	a4, -0x128(s0)
80220bc8: 83 37 04 ee  	ld	a5, -0x120(s0)
80220bcc: aa 86        	mv	a3, a0
80220bce: 03 35 04 f0  	ld	a0, -0x100(s0)
80220bd2: 97 70 00 00  	auipc	ra, 0x7
80220bd6: e7 80 80 b9  	jalr	-0x468(ra) <_ZN7easy_fs3vfs5Inode3new17h053268dced329ee4E>
80220bda: b6 60        	ld	ra, 0x148(sp)
80220bdc: 16 64        	ld	s0, 0x140(sp)
;     }
80220bde: 71 61        	addi	sp, sp, 0x150
80220be0: 82 80        	ret

0000000080220be2 <_ZN7easy_fs3efs14EasyFileSystem18get_disk_inode_pos17hde2b388abb5ee396E>:
;     pub fn get_disk_inode_pos(&self, inode_id: u32) -> (u32, usize) {
80220be2: 59 71        	addi	sp, sp, -0x70
80220be4: 86 f4        	sd	ra, 0x68(sp)
80220be6: a2 f0        	sd	s0, 0x60(sp)
80220be8: 80 18        	addi	s0, sp, 0x70
80220bea: 23 38 a4 fa  	sd	a0, -0x50(s0)
80220bee: 2e 86        	mv	a2, a1
80220bf0: 23 3c c4 fa  	sd	a2, -0x48(s0)
80220bf4: 23 38 a4 fc  	sd	a0, -0x30(s0)
80220bf8: 23 2e b4 fc  	sw	a1, -0x24(s0)
80220bfc: 13 05 00 08  	li	a0, 0x80
;         let inode_size = core::mem::size_of::<DiskInode>();
80220c00: 23 30 a4 fe  	sd	a0, -0x20(s0)
80220c04: 01 45        	li	a0, 0x0
;         let inodes_per_block = (BLOCK_SZ / inode_size) as u32;
80220c06: 19 ed        	bnez	a0, 0x80220c24 <.Lpcrel_hi28>
80220c08: 09 a0        	j	0x80220c0a <_ZN7easy_fs3efs14EasyFileSystem18get_disk_inode_pos17hde2b388abb5ee396E+0x28>
80220c0a: 03 35 04 fb  	ld	a0, -0x50(s0)
80220c0e: 91 45        	li	a1, 0x4
80220c10: 23 30 b4 fa  	sd	a1, -0x60(s0)
;         let inodes_per_block = (BLOCK_SZ / inode_size) as u32;
80220c14: 23 24 b4 fe  	sw	a1, -0x18(s0)
;         let block_id = self.inode_area_start_block + inode_id / inodes_per_block;
80220c18: 08 59        	lw	a0, 0x30(a0)
80220c1a: 23 34 a4 fa  	sd	a0, -0x58(s0)
80220c1e: 01 45        	li	a0, 0x0
80220c20: 15 ed        	bnez	a0, 0x80220c5c <.Lpcrel_hi30>
80220c22: 31 a8        	j	0x80220c3e <.Lpcrel_hi29+0x12>

0000000080220c24 <.Lpcrel_hi28>:
;         let inodes_per_block = (BLOCK_SZ / inode_size) as u32;
80220c24: 17 85 01 00  	auipc	a0, 0x18
80220c28: 13 05 c5 e3  	addi	a0, a0, -0x1c4

0000000080220c2c <.Lpcrel_hi29>:
80220c2c: 97 85 01 00  	auipc	a1, 0x18
80220c30: 13 86 c5 e1  	addi	a2, a1, -0x1e4
80220c34: e5 45        	li	a1, 0x19
80220c36: 97 f0 00 00  	auipc	ra, 0xf
80220c3a: e7 80 20 5e  	jalr	0x5e2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80220c3e: 83 35 84 fa  	ld	a1, -0x58(s0)
80220c42: 03 35 84 fb  	ld	a0, -0x48(s0)
80220c46: 03 36 04 fa  	ld	a2, -0x60(s0)
;         let block_id = self.inode_area_start_block + inode_id / inodes_per_block;
80220c4a: 3b 55 c5 02  	divuw	a0, a0, a2
80220c4e: 2d 9d        	addw	a0, a0, a1
80220c50: 23 3c a4 f8  	sd	a0, -0x68(s0)
80220c54: 81 25        	sext.w	a1, a1
80220c56: 63 69 b5 02  	bltu	a0, a1, 0x80220c88 <.Lpcrel_hi32>
80220c5a: 31 a8        	j	0x80220c76 <.Lpcrel_hi31+0x12>

0000000080220c5c <.Lpcrel_hi30>:
80220c5c: 17 85 01 00  	auipc	a0, 0x18
80220c60: 13 05 45 e0  	addi	a0, a0, -0x1fc

0000000080220c64 <.Lpcrel_hi31>:
80220c64: 97 85 01 00  	auipc	a1, 0x18
80220c68: 13 86 c5 e1  	addi	a2, a1, -0x1e4
80220c6c: e5 45        	li	a1, 0x19
80220c6e: 97 f0 00 00  	auipc	ra, 0xf
80220c72: e7 80 a0 5a  	jalr	0x5aa(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80220c76: 03 35 04 fa  	ld	a0, -0x60(s0)
80220c7a: 83 35 84 f9  	ld	a1, -0x68(s0)
;         let block_id = self.inode_area_start_block + inode_id / inodes_per_block;
80220c7e: 23 26 b4 fe  	sw	a1, -0x14(s0)
;             (inode_id % inodes_per_block) as usize * inode_size,
80220c82: 01 25        	sext.w	a0, a0
80220c84: 05 cd        	beqz	a0, 0x80220cbc <.Lpcrel_hi34>
80220c86: 31 a8        	j	0x80220ca2 <.Lpcrel_hi33+0x12>

0000000080220c88 <.Lpcrel_hi32>:
;         let block_id = self.inode_area_start_block + inode_id / inodes_per_block;
80220c88: 17 85 01 00  	auipc	a0, 0x18
80220c8c: 13 05 85 d7  	addi	a0, a0, -0x288

0000000080220c90 <.Lpcrel_hi33>:
80220c90: 97 85 01 00  	auipc	a1, 0x18
80220c94: 13 86 85 e0  	addi	a2, a1, -0x1f8
80220c98: f1 45        	li	a1, 0x1c
80220c9a: 97 f0 00 00  	auipc	ra, 0xf
80220c9e: e7 80 e0 57  	jalr	0x57e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80220ca2: 03 35 84 fb  	ld	a0, -0x48(s0)
80220ca6: 83 35 04 fa  	ld	a1, -0x60(s0)
;             (inode_id % inodes_per_block) as usize * inode_size,
80220caa: 3b 75 b5 02  	remuw	a0, a0, a1
80220cae: 02 15        	slli	a0, a0, 0x20
80220cb0: 65 81        	srli	a0, a0, 0x19
80220cb2: 23 38 a4 f8  	sd	a0, -0x70(s0)
80220cb6: 01 45        	li	a0, 0x0
80220cb8: 21 e1        	bnez	a0, 0x80220cf8 <.Lpcrel_hi36>
80220cba: 39 a8        	j	0x80220cd8 <.Lpcrel_hi35+0x14>

0000000080220cbc <.Lpcrel_hi34>:
80220cbc: 17 85 01 00  	auipc	a0, 0x18
80220cc0: 13 05 45 e1  	addi	a0, a0, -0x1ec

0000000080220cc4 <.Lpcrel_hi35>:
80220cc4: 97 85 01 00  	auipc	a1, 0x18
80220cc8: 13 86 c5 de  	addi	a2, a1, -0x214
80220ccc: 93 05 90 03  	li	a1, 0x39
80220cd0: 97 f0 00 00  	auipc	ra, 0xf
80220cd4: e7 80 80 54  	jalr	0x548(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80220cd8: 03 35 04 f9  	ld	a0, -0x70(s0)
80220cdc: 83 35 84 f9  	ld	a1, -0x68(s0)
;         (
80220ce0: 23 20 b4 fc  	sw	a1, -0x40(s0)
80220ce4: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     }
80220ce8: 83 35 84 fc  	ld	a1, -0x38(s0)
80220cec: 03 25 04 fc  	lw	a0, -0x40(s0)
80220cf0: a6 70        	ld	ra, 0x68(sp)
80220cf2: 06 74        	ld	s0, 0x60(sp)
80220cf4: 65 61        	addi	sp, sp, 0x70
80220cf6: 82 80        	ret

0000000080220cf8 <.Lpcrel_hi36>:
;             (inode_id % inodes_per_block) as usize * inode_size,
80220cf8: 17 85 01 00  	auipc	a0, 0x18
80220cfc: 13 05 85 cd  	addi	a0, a0, -0x328

0000000080220d00 <.Lpcrel_hi37>:
80220d00: 97 85 01 00  	auipc	a1, 0x18
80220d04: 13 86 05 db  	addi	a2, a1, -0x250
80220d08: 93 05 10 02  	li	a1, 0x21
80220d0c: 97 f0 00 00  	auipc	ra, 0xf
80220d10: e7 80 c0 50  	jalr	0x50c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080220d14 <_ZN7easy_fs3efs14EasyFileSystem11alloc_inode17h0a5a093693cba937E>:
;     pub fn alloc_inode(&mut self) -> u32 {
80220d14: 79 71        	addi	sp, sp, -0x30
80220d16: 06 f4        	sd	ra, 0x28(sp)
80220d18: 22 f0        	sd	s0, 0x20(sp)
80220d1a: 00 18        	addi	s0, sp, 0x30
80220d1c: aa 85        	mv	a1, a0
80220d1e: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.inode_bitmap.alloc(&self.block_device).unwrap() as u32
80220d22: 13 85 05 01  	addi	a0, a1, 0x10
80220d26: 97 a0 00 00  	auipc	ra, 0xa
80220d2a: e7 80 e0 9a  	jalr	-0x652(ra) <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E>
80220d2e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80220d32: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
80220d36: 03 35 84 fd  	ld	a0, -0x28(s0)
80220d3a: 11 e9        	bnez	a0, 0x80220d4e <.Lpcrel_hi40+0x10>
80220d3c: 09 a0        	j	0x80220d3e <.Lpcrel_hi40>

0000000080220d3e <.Lpcrel_hi40>:
;             None => unwrap_failed(),
80220d3e: 17 85 01 00  	auipc	a0, 0x18
80220d42: 13 05 25 dd  	addi	a0, a0, -0x22e
80220d46: 97 00 01 00  	auipc	ra, 0x10
80220d4a: e7 80 20 f8  	jalr	-0x7e(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80220d4e: 03 35 04 fe  	ld	a0, -0x20(s0)
80220d52: 23 34 a4 fe  	sd	a0, -0x18(s0)
80220d56: a2 70        	ld	ra, 0x28(sp)
80220d58: 02 74        	ld	s0, 0x20(sp)
;     }
80220d5a: 45 61        	addi	sp, sp, 0x30
80220d5c: 82 80        	ret

0000000080220d5e <_ZN7easy_fs3efs14EasyFileSystem10alloc_data17hf7a100b850106ef3E>:
;     pub fn alloc_data(&mut self) -> u32 {
80220d5e: 39 71        	addi	sp, sp, -0x40
80220d60: 06 fc        	sd	ra, 0x38(sp)
80220d62: 22 f8        	sd	s0, 0x30(sp)
80220d64: 80 00        	addi	s0, sp, 0x40
80220d66: aa 85        	mv	a1, a0
80220d68: 23 34 b4 fc  	sd	a1, -0x38(s0)
80220d6c: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.data_bitmap.alloc(&self.block_device).unwrap() as u32 + self.data_area_start_block
80220d70: 13 85 05 02  	addi	a0, a1, 0x20
80220d74: 97 a0 00 00  	auipc	ra, 0xa
80220d78: e7 80 00 96  	jalr	-0x6a0(ra) <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E>
80220d7c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80220d80: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         match self {
80220d84: 03 35 84 fd  	ld	a0, -0x28(s0)
80220d88: 11 e9        	bnez	a0, 0x80220d9c <.Lpcrel_hi41+0x10>
80220d8a: 09 a0        	j	0x80220d8c <.Lpcrel_hi41>

0000000080220d8c <.Lpcrel_hi41>:
;             None => unwrap_failed(),
80220d8c: 17 85 01 00  	auipc	a0, 0x18
80220d90: 13 05 c5 d9  	addi	a0, a0, -0x264
80220d94: 97 00 01 00  	auipc	ra, 0x10
80220d98: e7 80 40 f3  	jalr	-0xcc(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
80220d9c: 03 35 84 fc  	ld	a0, -0x38(s0)
;             Some(val) => val,
80220da0: 83 35 04 fe  	ld	a1, -0x20(s0)
80220da4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.data_bitmap.alloc(&self.block_device).unwrap() as u32 + self.data_area_start_block
80220da8: 48 59        	lw	a0, 0x34(a0)
80220daa: 2d 9d        	addw	a0, a0, a1
80220dac: 23 30 a4 fc  	sd	a0, -0x40(s0)
80220db0: 81 25        	sext.w	a1, a1
80220db2: 63 69 b5 00  	bltu	a0, a1, 0x80220dc4 <.Lpcrel_hi42>
80220db6: 09 a0        	j	0x80220db8 <.Lpcrel_hi41+0x2c>
80220db8: 03 35 04 fc  	ld	a0, -0x40(s0)
80220dbc: e2 70        	ld	ra, 0x38(sp)
80220dbe: 42 74        	ld	s0, 0x30(sp)
;     }
80220dc0: 21 61        	addi	sp, sp, 0x40
80220dc2: 82 80        	ret

0000000080220dc4 <.Lpcrel_hi42>:
;         self.data_bitmap.alloc(&self.block_device).unwrap() as u32 + self.data_area_start_block
80220dc4: 17 85 01 00  	auipc	a0, 0x18
80220dc8: 13 05 c5 c3  	addi	a0, a0, -0x3c4

0000000080220dcc <.Lpcrel_hi43>:
80220dcc: 97 85 01 00  	auipc	a1, 0x18
80220dd0: 13 86 45 d7  	addi	a2, a1, -0x28c
80220dd4: f1 45        	li	a1, 0x1c
80220dd6: 97 f0 00 00  	auipc	ra, 0xf
80220dda: e7 80 20 44  	jalr	0x442(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080220dde <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data17h354df4103d61d886E>:
;     pub fn dealloc_data(&mut self, block_id: u32) {
80220dde: 55 71        	addi	sp, sp, -0xd0
80220de0: 86 e5        	sd	ra, 0xc8(sp)
80220de2: a2 e1        	sd	s0, 0xc0(sp)
80220de4: 80 09        	addi	s0, sp, 0xd0
80220de6: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80220dea: 2e 86        	mv	a2, a1
80220dec: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80220df0: 23 30 a4 fa  	sd	a0, -0x60(s0)
80220df4: 23 26 b4 fa  	sw	a1, -0x54(s0)
;         get_block_cache(block_id as usize, Arc::clone(&self.block_device))
80220df8: 82 15        	slli	a1, a1, 0x20
80220dfa: 81 91        	srli	a1, a1, 0x20
80220dfc: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80220e00: 97 c0 ff ff  	auipc	ra, 0xffffc
80220e04: e7 80 00 2e  	jalr	0x2e0(ra) <ekernel+0xffcd00e0>
80220e08: 2a 86        	mv	a2, a0
80220e0a: 03 35 04 f6  	ld	a0, -0xa0(s0)
80220e0e: 23 34 c4 f6  	sd	a2, -0x98(s0)
80220e12: 2e 86        	mv	a2, a1
80220e14: 83 35 84 f6  	ld	a1, -0x98(s0)
80220e18: 97 50 00 00  	auipc	ra, 0x5
80220e1c: e7 80 c0 fe  	jalr	-0x14(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
80220e20: 23 3c a4 f8  	sd	a0, -0x68(s0)
80220e24: 13 05 84 f9  	addi	a0, s0, -0x68
80220e28: 97 c0 ff ff  	auipc	ra, 0xffffc
80220e2c: e7 80 c0 35  	jalr	0x35c(ra) <ekernel+0xffcd0184>
80220e30: aa 85        	mv	a1, a0
80220e32: 23 38 b4 f6  	sd	a1, -0x90(s0)
80220e36: 23 34 a4 fc  	sd	a0, -0x38(s0)
80220e3a: 23 3c a4 fc  	sd	a0, -0x28(s0)
80220e3e: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80220e40: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80220e44: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80220e48: 85 45        	li	a1, 0x1
80220e4a: 97 e0 ff ff  	auipc	ra, 0xffffe
80220e4e: e7 80 c0 35  	jalr	0x35c(ra) <ekernel+0xffcd21a6>
80220e52: aa 85        	mv	a1, a0
80220e54: 23 3c b4 f6  	sd	a1, -0x88(s0)
80220e58: 23 30 a4 fe  	sd	a0, -0x20(s0)
80220e5c: 09 a0        	j	0x80220e5e <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data17h354df4103d61d886E+0x80>
80220e5e: 03 35 04 f7  	ld	a0, -0x90(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80220e62: 21 05        	addi	a0, a0, 0x8
80220e64: 89 45        	li	a1, 0x2
80220e66: a3 0b b4 fc  	sb	a1, -0x29(s0)
80220e6a: 83 45 74 fd  	lbu	a1, -0x29(s0)
80220e6e: 97 e0 ff ff  	auipc	ra, 0xffffe
80220e72: e7 80 c0 2e  	jalr	0x2ec(ra) <ekernel+0xffcd215a>
80220e76: 83 35 84 f7  	ld	a1, -0x88(s0)
80220e7a: 63 08 b5 00  	beq	a0, a1, 0x80220e8a <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data17h354df4103d61d886E+0xac>
80220e7e: 09 a0        	j	0x80220e80 <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data17h354df4103d61d886E+0xa2>
;             crate::relax();
80220e80: 97 e0 ff ff  	auipc	ra, 0xffffe
80220e84: e7 80 e0 3c  	jalr	0x3ce(ra) <ekernel+0xffcd224e>
80220e88: d9 bf        	j	0x80220e5e <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data17h354df4103d61d886E+0x80>
80220e8a: 83 35 84 f7  	ld	a1, -0x88(s0)
80220e8e: 03 35 04 f7  	ld	a0, -0x90(s0)
;             next_serving: &self.next_serving,
80220e92: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80220e96: 41 05        	addi	a0, a0, 0x10
80220e98: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
80220e9c: 23 38 c4 fa  	sd	a2, -0x50(s0)
80220ea0: 23 30 b4 fc  	sd	a1, -0x40(s0)
80220ea4: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
80220ea8: 03 35 04 fc  	ld	a0, -0x40(s0)
80220eac: 23 38 a4 f8  	sd	a0, -0x70(s0)
80220eb0: 03 35 84 fb  	ld	a0, -0x48(s0)
80220eb4: 23 34 a4 f8  	sd	a0, -0x78(s0)
80220eb8: 03 35 04 fb  	ld	a0, -0x50(s0)
80220ebc: 23 30 a4 f8  	sd	a0, -0x80(s0)
80220ec0: 13 05 04 f8  	addi	a0, s0, -0x80
80220ec4: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         get_block_cache(block_id as usize, Arc::clone(&self.block_device))
80220ec8: 97 10 00 00  	auipc	ra, 0x1
80220ecc: e7 80 a0 7a  	jalr	0x7aa(ra) <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4414d35563f79ba7E>
80220ed0: 81 45        	li	a1, 0x0
80220ed2: 97 00 00 00  	auipc	ra, 0x0
80220ed6: e7 80 80 79  	jalr	0x798(ra) <_ZN7easy_fs11block_cache10BlockCache6modify17h072b588f9f501dd9E>
80220eda: 03 35 84 f3  	ld	a0, -0xc8(s0)
;             });
80220ede: 97 d0 ff ff  	auipc	ra, 0xffffd
80220ee2: e7 80 80 bb  	jalr	-0x448(ra) <ekernel+0xffcd0a96>
80220ee6: 13 05 84 f9  	addi	a0, s0, -0x68
80220eea: 97 d0 ff ff  	auipc	ra, 0xffffd
80220eee: e7 80 40 84  	jalr	-0x7bc(ra) <ekernel+0xffcd072e>
80220ef2: 83 35 04 f5  	ld	a1, -0xb0(s0)
80220ef6: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         self.data_bitmap.dealloc(
80220efa: 13 86 05 02  	addi	a2, a1, 0x20
80220efe: 23 30 c4 f4  	sd	a2, -0xc0(s0)
;             (block_id - self.data_area_start_block) as usize,
80220f02: cc 59        	lw	a1, 0x34(a1)
80220f04: 3b 06 b5 40  	subw	a2, a0, a1
80220f08: 23 34 c4 f4  	sd	a2, -0xb8(s0)
80220f0c: 01 25        	sext.w	a0, a0
80220f0e: 63 63 b5 02  	bltu	a0, a1, 0x80220f34 <.Lpcrel_hi44>
80220f12: 09 a0        	j	0x80220f14 <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data17h354df4103d61d886E+0x136>
80220f14: 83 35 04 f5  	ld	a1, -0xb0(s0)
80220f18: 03 35 04 f4  	ld	a0, -0xc0(s0)
80220f1c: 03 36 84 f4  	ld	a2, -0xb8(s0)
;             (block_id - self.data_area_start_block) as usize,
80220f20: 02 16        	slli	a2, a2, 0x20
80220f22: 01 92        	srli	a2, a2, 0x20
;         self.data_bitmap.dealloc(
80220f24: 97 a0 00 00  	auipc	ra, 0xa
80220f28: e7 80 80 98  	jalr	-0x678(ra) <_ZN7easy_fs6bitmap6Bitmap7dealloc17hea8e70db31b6a23aE>
80220f2c: ae 60        	ld	ra, 0xc8(sp)
80220f2e: 0e 64        	ld	s0, 0xc0(sp)
;     }
80220f30: 69 61        	addi	sp, sp, 0xd0
80220f32: 82 80        	ret

0000000080220f34 <.Lpcrel_hi44>:
;             (block_id - self.data_area_start_block) as usize,
80220f34: 17 85 01 00  	auipc	a0, 0x18
80220f38: 13 05 c5 ae  	addi	a0, a0, -0x514

0000000080220f3c <.Lpcrel_hi45>:
80220f3c: 97 85 01 00  	auipc	a1, 0x18
80220f40: 13 86 c5 c1  	addi	a2, a1, -0x3e4
80220f44: 93 05 10 02  	li	a1, 0x21
80220f48: 97 f0 00 00  	auipc	ra, 0xf
80220f4c: e7 80 00 2d  	jalr	0x2d0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080220f50 <_ZN7easy_fs11block_cache10BlockCache7get_ref17h36ff9c4a8d608436E>:
;     pub fn get_ref<T>(&self, offset: usize) -> &T
80220f50: 5d 71        	addi	sp, sp, -0x50
80220f52: 86 e4        	sd	ra, 0x48(sp)
80220f54: a2 e0        	sd	s0, 0x40(sp)
80220f56: 80 08        	addi	s0, sp, 0x50
80220f58: 23 3c b4 fa  	sd	a1, -0x48(s0)
80220f5c: 23 30 a4 fc  	sd	a0, -0x40(s0)
80220f60: 23 38 a4 fc  	sd	a0, -0x30(s0)
80220f64: 23 3c b4 fc  	sd	a1, -0x28(s0)
80220f68: 61 45        	li	a0, 0x18
;         let type_size = core::mem::size_of::<T>();
80220f6a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(offset + type_size <= BLOCK_SZ);
80220f6e: 13 85 85 01  	addi	a0, a1, 0x18
80220f72: 23 34 a4 fc  	sd	a0, -0x38(s0)
80220f76: 63 6a b5 00  	bltu	a0, a1, 0x80220f8a <.Lpcrel_hi0>
80220f7a: 09 a0        	j	0x80220f7c <_ZN7easy_fs11block_cache10BlockCache7get_ref17h36ff9c4a8d608436E+0x2c>
80220f7c: 03 35 84 fc  	ld	a0, -0x38(s0)
80220f80: 93 05 10 20  	li	a1, 0x201
;         assert!(offset + type_size <= BLOCK_SZ);
80220f84: 63 6e b5 02  	bltu	a0, a1, 0x80220fc0 <.Lpcrel_hi3+0x14>
80220f88: 31 a8        	j	0x80220fa4 <.Lpcrel_hi2>

0000000080220f8a <.Lpcrel_hi0>:
80220f8a: 17 85 01 00  	auipc	a0, 0x18
80220f8e: 13 05 65 c4  	addi	a0, a0, -0x3ba

0000000080220f92 <.Lpcrel_hi1>:
80220f92: 97 85 01 00  	auipc	a1, 0x18
80220f96: 13 86 65 c2  	addi	a2, a1, -0x3da
80220f9a: f1 45        	li	a1, 0x1c
80220f9c: 97 f0 00 00  	auipc	ra, 0xf
80220fa0: e7 80 c0 27  	jalr	0x27c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080220fa4 <.Lpcrel_hi2>:
80220fa4: 17 85 01 00  	auipc	a0, 0x18
80220fa8: 13 05 85 c4  	addi	a0, a0, -0x3b8

0000000080220fac <.Lpcrel_hi3>:
80220fac: 97 85 01 00  	auipc	a1, 0x18
80220fb0: 13 86 45 c7  	addi	a2, a1, -0x38c
80220fb4: 93 05 00 03  	li	a1, 0x30
80220fb8: 97 f0 00 00  	auipc	ra, 0xf
80220fbc: e7 80 00 26  	jalr	0x260(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80220fc0: 83 35 84 fb  	ld	a1, -0x48(s0)
80220fc4: 03 35 04 fc  	ld	a0, -0x40(s0)
;         let addr = self.addr_of_offset(offset);
80220fc8: 97 50 00 00  	auipc	ra, 0x5
80220fcc: e7 80 e0 9d  	jalr	-0x622(ra) <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E>
80220fd0: 23 34 a4 fe  	sd	a0, -0x18(s0)
80220fd4: a6 60        	ld	ra, 0x48(sp)
80220fd6: 06 64        	ld	s0, 0x40(sp)
;     }
80220fd8: 61 61        	addi	sp, sp, 0x50
80220fda: 82 80        	ret

0000000080220fdc <_ZN7easy_fs11block_cache10BlockCache7get_ref17h53bebf3c513dc09bE>:
;     pub fn get_ref<T>(&self, offset: usize) -> &T
80220fdc: 5d 71        	addi	sp, sp, -0x50
80220fde: 86 e4        	sd	ra, 0x48(sp)
80220fe0: a2 e0        	sd	s0, 0x40(sp)
80220fe2: 80 08        	addi	s0, sp, 0x50
80220fe4: 23 3c b4 fa  	sd	a1, -0x48(s0)
80220fe8: 23 30 a4 fc  	sd	a0, -0x40(s0)
80220fec: 23 38 a4 fc  	sd	a0, -0x30(s0)
80220ff0: 23 3c b4 fc  	sd	a1, -0x28(s0)
80220ff4: 13 05 00 08  	li	a0, 0x80
;         let type_size = core::mem::size_of::<T>();
80220ff8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(offset + type_size <= BLOCK_SZ);
80220ffc: 13 85 05 08  	addi	a0, a1, 0x80
80221000: 23 34 a4 fc  	sd	a0, -0x38(s0)
80221004: 63 6a b5 00  	bltu	a0, a1, 0x80221018 <.Lpcrel_hi4>
80221008: 09 a0        	j	0x8022100a <_ZN7easy_fs11block_cache10BlockCache7get_ref17h53bebf3c513dc09bE+0x2e>
8022100a: 03 35 84 fc  	ld	a0, -0x38(s0)
8022100e: 93 05 10 20  	li	a1, 0x201
;         assert!(offset + type_size <= BLOCK_SZ);
80221012: 63 6e b5 02  	bltu	a0, a1, 0x8022104e <.Lpcrel_hi7+0x14>
80221016: 31 a8        	j	0x80221032 <.Lpcrel_hi6>

0000000080221018 <.Lpcrel_hi4>:
80221018: 17 85 01 00  	auipc	a0, 0x18
8022101c: 13 05 85 bb  	addi	a0, a0, -0x448

0000000080221020 <.Lpcrel_hi5>:
80221020: 97 85 01 00  	auipc	a1, 0x18
80221024: 13 86 85 b9  	addi	a2, a1, -0x468
80221028: f1 45        	li	a1, 0x1c
8022102a: 97 f0 00 00  	auipc	ra, 0xf
8022102e: e7 80 e0 1e  	jalr	0x1ee(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080221032 <.Lpcrel_hi6>:
80221032: 17 85 01 00  	auipc	a0, 0x18
80221036: 13 05 a5 bb  	addi	a0, a0, -0x446

000000008022103a <.Lpcrel_hi7>:
8022103a: 97 85 01 00  	auipc	a1, 0x18
8022103e: 13 86 65 be  	addi	a2, a1, -0x41a
80221042: 93 05 00 03  	li	a1, 0x30
80221046: 97 f0 00 00  	auipc	ra, 0xf
8022104a: e7 80 20 1d  	jalr	0x1d2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022104e: 83 35 84 fb  	ld	a1, -0x48(s0)
80221052: 03 35 04 fc  	ld	a0, -0x40(s0)
;         let addr = self.addr_of_offset(offset);
80221056: 97 50 00 00  	auipc	ra, 0x5
8022105a: e7 80 00 95  	jalr	-0x6b0(ra) <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E>
8022105e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221062: a6 60        	ld	ra, 0x48(sp)
80221064: 06 64        	ld	s0, 0x40(sp)
;     }
80221066: 61 61        	addi	sp, sp, 0x50
80221068: 82 80        	ret

000000008022106a <_ZN7easy_fs11block_cache10BlockCache7get_ref17h6979ab6aa6086320E>:
;     pub fn get_ref<T>(&self, offset: usize) -> &T
8022106a: 5d 71        	addi	sp, sp, -0x50
8022106c: 86 e4        	sd	ra, 0x48(sp)
8022106e: a2 e0        	sd	s0, 0x40(sp)
80221070: 80 08        	addi	s0, sp, 0x50
80221072: 23 3c b4 fa  	sd	a1, -0x48(s0)
80221076: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022107a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022107e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80221082: 13 05 00 20  	li	a0, 0x200
;         let type_size = core::mem::size_of::<T>();
80221086: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(offset + type_size <= BLOCK_SZ);
8022108a: 13 85 05 20  	addi	a0, a1, 0x200
8022108e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80221092: 63 6a b5 00  	bltu	a0, a1, 0x802210a6 <.Lpcrel_hi8>
80221096: 09 a0        	j	0x80221098 <_ZN7easy_fs11block_cache10BlockCache7get_ref17h6979ab6aa6086320E+0x2e>
80221098: 03 35 84 fc  	ld	a0, -0x38(s0)
8022109c: 93 05 10 20  	li	a1, 0x201
;         assert!(offset + type_size <= BLOCK_SZ);
802210a0: 63 6e b5 02  	bltu	a0, a1, 0x802210dc <.Lpcrel_hi11+0x14>
802210a4: 31 a8        	j	0x802210c0 <.Lpcrel_hi10>

00000000802210a6 <.Lpcrel_hi8>:
802210a6: 17 85 01 00  	auipc	a0, 0x18
802210aa: 13 05 a5 b2  	addi	a0, a0, -0x4d6

00000000802210ae <.Lpcrel_hi9>:
802210ae: 97 85 01 00  	auipc	a1, 0x18
802210b2: 13 86 a5 b0  	addi	a2, a1, -0x4f6
802210b6: f1 45        	li	a1, 0x1c
802210b8: 97 f0 00 00  	auipc	ra, 0xf
802210bc: e7 80 00 16  	jalr	0x160(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802210c0 <.Lpcrel_hi10>:
802210c0: 17 85 01 00  	auipc	a0, 0x18
802210c4: 13 05 c5 b2  	addi	a0, a0, -0x4d4

00000000802210c8 <.Lpcrel_hi11>:
802210c8: 97 85 01 00  	auipc	a1, 0x18
802210cc: 13 86 85 b5  	addi	a2, a1, -0x4a8
802210d0: 93 05 00 03  	li	a1, 0x30
802210d4: 97 f0 00 00  	auipc	ra, 0xf
802210d8: e7 80 40 14  	jalr	0x144(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802210dc: 83 35 84 fb  	ld	a1, -0x48(s0)
802210e0: 03 35 04 fc  	ld	a0, -0x40(s0)
;         let addr = self.addr_of_offset(offset);
802210e4: 97 50 00 00  	auipc	ra, 0x5
802210e8: e7 80 20 8c  	jalr	-0x73e(ra) <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E>
802210ec: 23 34 a4 fe  	sd	a0, -0x18(s0)
802210f0: a6 60        	ld	ra, 0x48(sp)
802210f2: 06 64        	ld	s0, 0x40(sp)
;     }
802210f4: 61 61        	addi	sp, sp, 0x50
802210f6: 82 80        	ret

00000000802210f8 <_ZN7easy_fs11block_cache10BlockCache7get_ref17hfc8bfc26aeb546b5E>:
;     pub fn get_ref<T>(&self, offset: usize) -> &T
802210f8: 5d 71        	addi	sp, sp, -0x50
802210fa: 86 e4        	sd	ra, 0x48(sp)
802210fc: a2 e0        	sd	s0, 0x40(sp)
802210fe: 80 08        	addi	s0, sp, 0x50
80221100: 23 3c b4 fa  	sd	a1, -0x48(s0)
80221104: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221108: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022110c: 23 3c b4 fc  	sd	a1, -0x28(s0)
80221110: 13 05 00 20  	li	a0, 0x200
;         let type_size = core::mem::size_of::<T>();
80221114: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(offset + type_size <= BLOCK_SZ);
80221118: 13 85 05 20  	addi	a0, a1, 0x200
8022111c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80221120: 63 6a b5 00  	bltu	a0, a1, 0x80221134 <.Lpcrel_hi12>
80221124: 09 a0        	j	0x80221126 <_ZN7easy_fs11block_cache10BlockCache7get_ref17hfc8bfc26aeb546b5E+0x2e>
80221126: 03 35 84 fc  	ld	a0, -0x38(s0)
8022112a: 93 05 10 20  	li	a1, 0x201
;         assert!(offset + type_size <= BLOCK_SZ);
8022112e: 63 6e b5 02  	bltu	a0, a1, 0x8022116a <.Lpcrel_hi15+0x14>
80221132: 31 a8        	j	0x8022114e <.Lpcrel_hi14>

0000000080221134 <.Lpcrel_hi12>:
80221134: 17 85 01 00  	auipc	a0, 0x18
80221138: 13 05 c5 a9  	addi	a0, a0, -0x564

000000008022113c <.Lpcrel_hi13>:
8022113c: 97 85 01 00  	auipc	a1, 0x18
80221140: 13 86 c5 a7  	addi	a2, a1, -0x584
80221144: f1 45        	li	a1, 0x1c
80221146: 97 f0 00 00  	auipc	ra, 0xf
8022114a: e7 80 20 0d  	jalr	0xd2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022114e <.Lpcrel_hi14>:
8022114e: 17 85 01 00  	auipc	a0, 0x18
80221152: 13 05 e5 a9  	addi	a0, a0, -0x562

0000000080221156 <.Lpcrel_hi15>:
80221156: 97 85 01 00  	auipc	a1, 0x18
8022115a: 13 86 a5 ac  	addi	a2, a1, -0x536
8022115e: 93 05 00 03  	li	a1, 0x30
80221162: 97 f0 00 00  	auipc	ra, 0xf
80221166: e7 80 60 0b  	jalr	0xb6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022116a: 83 35 84 fb  	ld	a1, -0x48(s0)
8022116e: 03 35 04 fc  	ld	a0, -0x40(s0)
;         let addr = self.addr_of_offset(offset);
80221172: 97 50 00 00  	auipc	ra, 0x5
80221176: e7 80 40 83  	jalr	-0x7cc(ra) <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E>
8022117a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022117e: a6 60        	ld	ra, 0x48(sp)
80221180: 06 64        	ld	s0, 0x40(sp)
;     }
80221182: 61 61        	addi	sp, sp, 0x50
80221184: 82 80        	ret

0000000080221186 <_ZN7easy_fs11block_cache10BlockCache7get_mut17h804d884f91f5495cE>:
;     pub fn get_mut<T>(&mut self, offset: usize) -> &mut T
80221186: 5d 71        	addi	sp, sp, -0x50
80221188: 86 e4        	sd	ra, 0x48(sp)
8022118a: a2 e0        	sd	s0, 0x40(sp)
8022118c: 80 08        	addi	s0, sp, 0x50
8022118e: 23 3c b4 fa  	sd	a1, -0x48(s0)
80221192: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221196: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022119a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022119e: 13 05 00 20  	li	a0, 0x200
;         let type_size = core::mem::size_of::<T>();
802211a2: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(offset + type_size <= BLOCK_SZ);
802211a6: 13 85 05 20  	addi	a0, a1, 0x200
802211aa: 23 34 a4 fc  	sd	a0, -0x38(s0)
802211ae: 63 6a b5 00  	bltu	a0, a1, 0x802211c2 <.Lpcrel_hi20>
802211b2: 09 a0        	j	0x802211b4 <_ZN7easy_fs11block_cache10BlockCache7get_mut17h804d884f91f5495cE+0x2e>
802211b4: 03 35 84 fc  	ld	a0, -0x38(s0)
802211b8: 93 05 10 20  	li	a1, 0x201
;         assert!(offset + type_size <= BLOCK_SZ);
802211bc: 63 6e b5 02  	bltu	a0, a1, 0x802211f8 <.Lpcrel_hi23+0x14>
802211c0: 31 a8        	j	0x802211dc <.Lpcrel_hi22>

00000000802211c2 <.Lpcrel_hi20>:
802211c2: 17 85 01 00  	auipc	a0, 0x18
802211c6: 13 05 e5 a0  	addi	a0, a0, -0x5f2

00000000802211ca <.Lpcrel_hi21>:
802211ca: 97 85 01 00  	auipc	a1, 0x18
802211ce: 13 86 e5 a6  	addi	a2, a1, -0x592
802211d2: f1 45        	li	a1, 0x1c
802211d4: 97 f0 00 00  	auipc	ra, 0xf
802211d8: e7 80 40 04  	jalr	0x44(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802211dc <.Lpcrel_hi22>:
802211dc: 17 85 01 00  	auipc	a0, 0x18
802211e0: 13 05 05 a1  	addi	a0, a0, -0x5f0

00000000802211e4 <.Lpcrel_hi23>:
802211e4: 97 85 01 00  	auipc	a1, 0x18
802211e8: 13 86 c5 a6  	addi	a2, a1, -0x594
802211ec: 93 05 00 03  	li	a1, 0x30
802211f0: 97 f0 00 00  	auipc	ra, 0xf
802211f4: e7 80 80 02  	jalr	0x28(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802211f8: 83 35 84 fb  	ld	a1, -0x48(s0)
802211fc: 03 35 04 fc  	ld	a0, -0x40(s0)
80221200: 05 46        	li	a2, 0x1
;         self.modified = true;
80221202: 23 0c c5 20  	sb	a2, 0x218(a0)
;         let addr = self.addr_of_offset(offset);
80221206: 97 40 00 00  	auipc	ra, 0x4
8022120a: e7 80 00 7a  	jalr	0x7a0(ra) <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E>
8022120e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221212: a6 60        	ld	ra, 0x48(sp)
80221214: 06 64        	ld	s0, 0x40(sp)
;     }
80221216: 61 61        	addi	sp, sp, 0x50
80221218: 82 80        	ret

000000008022121a <_ZN7easy_fs11block_cache10BlockCache7get_mut17h8ca36b6d1611bed6E>:
;     pub fn get_mut<T>(&mut self, offset: usize) -> &mut T
8022121a: 5d 71        	addi	sp, sp, -0x50
8022121c: 86 e4        	sd	ra, 0x48(sp)
8022121e: a2 e0        	sd	s0, 0x40(sp)
80221220: 80 08        	addi	s0, sp, 0x50
80221222: 23 3c b4 fa  	sd	a1, -0x48(s0)
80221226: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022122a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022122e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80221232: 13 05 00 20  	li	a0, 0x200
;         let type_size = core::mem::size_of::<T>();
80221236: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(offset + type_size <= BLOCK_SZ);
8022123a: 13 85 05 20  	addi	a0, a1, 0x200
8022123e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80221242: 63 6a b5 00  	bltu	a0, a1, 0x80221256 <.Lpcrel_hi24>
80221246: 09 a0        	j	0x80221248 <_ZN7easy_fs11block_cache10BlockCache7get_mut17h8ca36b6d1611bed6E+0x2e>
80221248: 03 35 84 fc  	ld	a0, -0x38(s0)
8022124c: 93 05 10 20  	li	a1, 0x201
;         assert!(offset + type_size <= BLOCK_SZ);
80221250: 63 6e b5 02  	bltu	a0, a1, 0x8022128c <.Lpcrel_hi27+0x14>
80221254: 31 a8        	j	0x80221270 <.Lpcrel_hi26>

0000000080221256 <.Lpcrel_hi24>:
80221256: 17 85 01 00  	auipc	a0, 0x18
8022125a: 13 05 a5 97  	addi	a0, a0, -0x686

000000008022125e <.Lpcrel_hi25>:
8022125e: 97 85 01 00  	auipc	a1, 0x18
80221262: 13 86 a5 9d  	addi	a2, a1, -0x626
80221266: f1 45        	li	a1, 0x1c
80221268: 97 f0 00 00  	auipc	ra, 0xf
8022126c: e7 80 00 fb  	jalr	-0x50(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080221270 <.Lpcrel_hi26>:
80221270: 17 85 01 00  	auipc	a0, 0x18
80221274: 13 05 c5 97  	addi	a0, a0, -0x684

0000000080221278 <.Lpcrel_hi27>:
80221278: 97 85 01 00  	auipc	a1, 0x18
8022127c: 13 86 85 9d  	addi	a2, a1, -0x628
80221280: 93 05 00 03  	li	a1, 0x30
80221284: 97 f0 00 00  	auipc	ra, 0xf
80221288: e7 80 40 f9  	jalr	-0x6c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022128c: 83 35 84 fb  	ld	a1, -0x48(s0)
80221290: 03 35 04 fc  	ld	a0, -0x40(s0)
80221294: 05 46        	li	a2, 0x1
;         self.modified = true;
80221296: 23 0c c5 20  	sb	a2, 0x218(a0)
;         let addr = self.addr_of_offset(offset);
8022129a: 97 40 00 00  	auipc	ra, 0x4
8022129e: e7 80 c0 70  	jalr	0x70c(ra) <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E>
802212a2: 23 34 a4 fe  	sd	a0, -0x18(s0)
802212a6: a6 60        	ld	ra, 0x48(sp)
802212a8: 06 64        	ld	s0, 0x40(sp)
;     }
802212aa: 61 61        	addi	sp, sp, 0x50
802212ac: 82 80        	ret

00000000802212ae <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc1653b1b84094de5E>:
;     pub fn get_mut<T>(&mut self, offset: usize) -> &mut T
802212ae: 5d 71        	addi	sp, sp, -0x50
802212b0: 86 e4        	sd	ra, 0x48(sp)
802212b2: a2 e0        	sd	s0, 0x40(sp)
802212b4: 80 08        	addi	s0, sp, 0x50
802212b6: 23 3c b4 fa  	sd	a1, -0x48(s0)
802212ba: 23 30 a4 fc  	sd	a0, -0x40(s0)
802212be: 23 38 a4 fc  	sd	a0, -0x30(s0)
802212c2: 23 3c b4 fc  	sd	a1, -0x28(s0)
802212c6: 13 05 00 20  	li	a0, 0x200
;         let type_size = core::mem::size_of::<T>();
802212ca: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(offset + type_size <= BLOCK_SZ);
802212ce: 13 85 05 20  	addi	a0, a1, 0x200
802212d2: 23 34 a4 fc  	sd	a0, -0x38(s0)
802212d6: 63 6a b5 00  	bltu	a0, a1, 0x802212ea <.Lpcrel_hi28>
802212da: 09 a0        	j	0x802212dc <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc1653b1b84094de5E+0x2e>
802212dc: 03 35 84 fc  	ld	a0, -0x38(s0)
802212e0: 93 05 10 20  	li	a1, 0x201
;         assert!(offset + type_size <= BLOCK_SZ);
802212e4: 63 6e b5 02  	bltu	a0, a1, 0x80221320 <.Lpcrel_hi31+0x14>
802212e8: 31 a8        	j	0x80221304 <.Lpcrel_hi30>

00000000802212ea <.Lpcrel_hi28>:
802212ea: 17 85 01 00  	auipc	a0, 0x18
802212ee: 13 05 65 8e  	addi	a0, a0, -0x71a

00000000802212f2 <.Lpcrel_hi29>:
802212f2: 97 85 01 00  	auipc	a1, 0x18
802212f6: 13 86 65 94  	addi	a2, a1, -0x6ba
802212fa: f1 45        	li	a1, 0x1c
802212fc: 97 f0 00 00  	auipc	ra, 0xf
80221300: e7 80 c0 f1  	jalr	-0xe4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080221304 <.Lpcrel_hi30>:
80221304: 17 85 01 00  	auipc	a0, 0x18
80221308: 13 05 85 8e  	addi	a0, a0, -0x718

000000008022130c <.Lpcrel_hi31>:
8022130c: 97 85 01 00  	auipc	a1, 0x18
80221310: 13 86 45 94  	addi	a2, a1, -0x6bc
80221314: 93 05 00 03  	li	a1, 0x30
80221318: 97 f0 00 00  	auipc	ra, 0xf
8022131c: e7 80 00 f0  	jalr	-0x100(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80221320: 83 35 84 fb  	ld	a1, -0x48(s0)
80221324: 03 35 04 fc  	ld	a0, -0x40(s0)
80221328: 05 46        	li	a2, 0x1
;         self.modified = true;
8022132a: 23 0c c5 20  	sb	a2, 0x218(a0)
;         let addr = self.addr_of_offset(offset);
8022132e: 97 40 00 00  	auipc	ra, 0x4
80221332: e7 80 80 67  	jalr	0x678(ra) <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E>
80221336: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022133a: a6 60        	ld	ra, 0x48(sp)
8022133c: 06 64        	ld	s0, 0x40(sp)
;     }
8022133e: 61 61        	addi	sp, sp, 0x50
80221340: 82 80        	ret

0000000080221342 <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc482d8c8ce3977acE>:
;     pub fn get_mut<T>(&mut self, offset: usize) -> &mut T
80221342: 5d 71        	addi	sp, sp, -0x50
80221344: 86 e4        	sd	ra, 0x48(sp)
80221346: a2 e0        	sd	s0, 0x40(sp)
80221348: 80 08        	addi	s0, sp, 0x50
8022134a: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022134e: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221352: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221356: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022135a: 13 05 00 08  	li	a0, 0x80
;         let type_size = core::mem::size_of::<T>();
8022135e: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(offset + type_size <= BLOCK_SZ);
80221362: 13 85 05 08  	addi	a0, a1, 0x80
80221366: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022136a: 63 6a b5 00  	bltu	a0, a1, 0x8022137e <.Lpcrel_hi32>
8022136e: 09 a0        	j	0x80221370 <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc482d8c8ce3977acE+0x2e>
80221370: 03 35 84 fc  	ld	a0, -0x38(s0)
80221374: 93 05 10 20  	li	a1, 0x201
;         assert!(offset + type_size <= BLOCK_SZ);
80221378: 63 6e b5 02  	bltu	a0, a1, 0x802213b4 <.Lpcrel_hi35+0x14>
8022137c: 31 a8        	j	0x80221398 <.Lpcrel_hi34>

000000008022137e <.Lpcrel_hi32>:
8022137e: 17 85 01 00  	auipc	a0, 0x18
80221382: 13 05 25 85  	addi	a0, a0, -0x7ae

0000000080221386 <.Lpcrel_hi33>:
80221386: 97 85 01 00  	auipc	a1, 0x18
8022138a: 13 86 25 8b  	addi	a2, a1, -0x74e
8022138e: f1 45        	li	a1, 0x1c
80221390: 97 f0 00 00  	auipc	ra, 0xf
80221394: e7 80 80 e8  	jalr	-0x178(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080221398 <.Lpcrel_hi34>:
80221398: 17 85 01 00  	auipc	a0, 0x18
8022139c: 13 05 45 85  	addi	a0, a0, -0x7ac

00000000802213a0 <.Lpcrel_hi35>:
802213a0: 97 85 01 00  	auipc	a1, 0x18
802213a4: 13 86 05 8b  	addi	a2, a1, -0x750
802213a8: 93 05 00 03  	li	a1, 0x30
802213ac: 97 f0 00 00  	auipc	ra, 0xf
802213b0: e7 80 c0 e6  	jalr	-0x194(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802213b4: 83 35 84 fb  	ld	a1, -0x48(s0)
802213b8: 03 35 04 fc  	ld	a0, -0x40(s0)
802213bc: 05 46        	li	a2, 0x1
;         self.modified = true;
802213be: 23 0c c5 20  	sb	a2, 0x218(a0)
;         let addr = self.addr_of_offset(offset);
802213c2: 97 40 00 00  	auipc	ra, 0x4
802213c6: e7 80 40 5e  	jalr	0x5e4(ra) <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E>
802213ca: 23 34 a4 fe  	sd	a0, -0x18(s0)
802213ce: a6 60        	ld	ra, 0x48(sp)
802213d0: 06 64        	ld	s0, 0x40(sp)
;     }
802213d2: 61 61        	addi	sp, sp, 0x50
802213d4: 82 80        	ret

00000000802213d6 <_ZN7easy_fs11block_cache10BlockCache4read17h0f53c10f82fb458bE>:
;     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
802213d6: 39 71        	addi	sp, sp, -0x40
802213d8: 06 fc        	sd	ra, 0x38(sp)
802213da: 22 f8        	sd	s0, 0x30(sp)
802213dc: 80 00        	addi	s0, sp, 0x40
802213de: 23 34 c4 fc  	sd	a2, -0x38(s0)
802213e2: 23 3c a4 fc  	sd	a0, -0x28(s0)
802213e6: 23 30 b4 fe  	sd	a1, -0x20(s0)
802213ea: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         f(self.get_ref(offset))
802213ee: 97 00 00 00  	auipc	ra, 0x0
802213f2: e7 80 a0 d0  	jalr	-0x2f6(ra) <_ZN7easy_fs11block_cache10BlockCache7get_ref17hfc8bfc26aeb546b5E>
802213f6: aa 85        	mv	a1, a0
802213f8: 03 35 84 fc  	ld	a0, -0x38(s0)
802213fc: 23 38 b4 fc  	sd	a1, -0x30(s0)
80221400: 83 35 04 fd  	ld	a1, -0x30(s0)
80221404: 97 e0 ff ff  	auipc	ra, 0xffffe
80221408: e7 80 40 7c  	jalr	0x7c4(ra) <ekernel+0xffcd2bc8>
8022140c: e2 70        	ld	ra, 0x38(sp)
8022140e: 42 74        	ld	s0, 0x30(sp)
;     }
80221410: 21 61        	addi	sp, sp, 0x40
80221412: 82 80        	ret

0000000080221414 <_ZN7easy_fs11block_cache10BlockCache4read17h166556c9bfbc502eE>:
;     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
80221414: 79 71        	addi	sp, sp, -0x30
80221416: 06 f4        	sd	ra, 0x28(sp)
80221418: 22 f0        	sd	s0, 0x20(sp)
8022141a: 00 18        	addi	s0, sp, 0x30
8022141c: 23 38 c4 fc  	sd	a2, -0x30(s0)
80221420: 23 30 a4 fe  	sd	a0, -0x20(s0)
80221424: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_ref(offset))
80221428: 97 00 00 00  	auipc	ra, 0x0
8022142c: e7 80 20 c4  	jalr	-0x3be(ra) <_ZN7easy_fs11block_cache10BlockCache7get_ref17h6979ab6aa6086320E>
80221430: aa 85        	mv	a1, a0
80221432: 03 35 04 fd  	ld	a0, -0x30(s0)
80221436: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022143a: 83 35 84 fd  	ld	a1, -0x28(s0)
8022143e: 97 f0 ff ff  	auipc	ra, 0xfffff
80221442: e7 80 a0 1e  	jalr	0x1ea(ra) <ekernel+0xffcd3628>
80221446: a2 70        	ld	ra, 0x28(sp)
80221448: 02 74        	ld	s0, 0x20(sp)
;     }
8022144a: 45 61        	addi	sp, sp, 0x30
8022144c: 82 80        	ret

000000008022144e <_ZN7easy_fs11block_cache10BlockCache4read17h26928fb4c4b7c9f8E>:
;     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
8022144e: 79 71        	addi	sp, sp, -0x30
80221450: 06 f4        	sd	ra, 0x28(sp)
80221452: 22 f0        	sd	s0, 0x20(sp)
80221454: 00 18        	addi	s0, sp, 0x30
80221456: 23 38 c4 fc  	sd	a2, -0x30(s0)
8022145a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022145e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_ref(offset))
80221462: 97 00 00 00  	auipc	ra, 0x0
80221466: e7 80 a0 b7  	jalr	-0x486(ra) <_ZN7easy_fs11block_cache10BlockCache7get_ref17h53bebf3c513dc09bE>
8022146a: aa 85        	mv	a1, a0
8022146c: 03 35 04 fd  	ld	a0, -0x30(s0)
80221470: 23 3c b4 fc  	sd	a1, -0x28(s0)
80221474: 83 35 84 fd  	ld	a1, -0x28(s0)
80221478: 97 d0 ff ff  	auipc	ra, 0xffffd
8022147c: e7 80 00 5c  	jalr	0x5c0(ra) <ekernel+0xffcd1a38>
80221480: a2 70        	ld	ra, 0x28(sp)
80221482: 02 74        	ld	s0, 0x20(sp)
;     }
80221484: 45 61        	addi	sp, sp, 0x30
80221486: 82 80        	ret

0000000080221488 <_ZN7easy_fs11block_cache10BlockCache4read17h2a9e593306d27be5E>:
;     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
80221488: 39 71        	addi	sp, sp, -0x40
8022148a: 06 fc        	sd	ra, 0x38(sp)
8022148c: 22 f8        	sd	s0, 0x30(sp)
8022148e: 80 00        	addi	s0, sp, 0x40
80221490: 23 34 c4 fc  	sd	a2, -0x38(s0)
80221494: 23 3c a4 fc  	sd	a0, -0x28(s0)
80221498: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022149c: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         f(self.get_ref(offset))
802214a0: 97 00 00 00  	auipc	ra, 0x0
802214a4: e7 80 80 c5  	jalr	-0x3a8(ra) <_ZN7easy_fs11block_cache10BlockCache7get_ref17hfc8bfc26aeb546b5E>
802214a8: aa 85        	mv	a1, a0
802214aa: 03 35 84 fc  	ld	a0, -0x38(s0)
802214ae: 23 38 b4 fc  	sd	a1, -0x30(s0)
802214b2: 83 35 04 fd  	ld	a1, -0x30(s0)
802214b6: 97 e0 ff ff  	auipc	ra, 0xffffe
802214ba: e7 80 00 69  	jalr	0x690(ra) <ekernel+0xffcd2b46>
802214be: e2 70        	ld	ra, 0x38(sp)
802214c0: 42 74        	ld	s0, 0x30(sp)
;     }
802214c2: 21 61        	addi	sp, sp, 0x40
802214c4: 82 80        	ret

00000000802214c6 <_ZN7easy_fs11block_cache10BlockCache4read17h3889f443830641e1E>:
;     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
802214c6: 5d 71        	addi	sp, sp, -0x50
802214c8: 86 e4        	sd	ra, 0x48(sp)
802214ca: a2 e0        	sd	s0, 0x40(sp)
802214cc: 80 08        	addi	s0, sp, 0x50
802214ce: 23 3c d4 fa  	sd	a3, -0x48(s0)
802214d2: 23 30 c4 fc  	sd	a2, -0x40(s0)
802214d6: 23 38 a4 fc  	sd	a0, -0x30(s0)
802214da: 23 3c b4 fc  	sd	a1, -0x28(s0)
802214de: 23 30 c4 fe  	sd	a2, -0x20(s0)
802214e2: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         f(self.get_ref(offset))
802214e6: 97 00 00 00  	auipc	ra, 0x0
802214ea: e7 80 60 af  	jalr	-0x50a(ra) <_ZN7easy_fs11block_cache10BlockCache7get_ref17h53bebf3c513dc09bE>
802214ee: 83 35 84 fb  	ld	a1, -0x48(s0)
802214f2: 2a 86        	mv	a2, a0
802214f4: 03 35 04 fc  	ld	a0, -0x40(s0)
802214f8: 23 34 c4 fc  	sd	a2, -0x38(s0)
802214fc: 03 36 84 fc  	ld	a2, -0x38(s0)
80221500: 97 c0 ff ff  	auipc	ra, 0xffffc
80221504: e7 80 80 0c  	jalr	0xc8(ra) <ekernel+0xffcd05c8>
80221508: a6 60        	ld	ra, 0x48(sp)
8022150a: 06 64        	ld	s0, 0x40(sp)
;     }
8022150c: 61 61        	addi	sp, sp, 0x50
8022150e: 82 80        	ret

0000000080221510 <_ZN7easy_fs11block_cache10BlockCache4read17hb00fb970c04ecfdcE>:
;     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
80221510: 39 71        	addi	sp, sp, -0x40
80221512: 06 fc        	sd	ra, 0x38(sp)
80221514: 22 f8        	sd	s0, 0x30(sp)
80221516: 80 00        	addi	s0, sp, 0x40
80221518: 23 34 c4 fc  	sd	a2, -0x38(s0)
8022151c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80221520: 23 30 b4 fe  	sd	a1, -0x20(s0)
80221524: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         f(self.get_ref(offset))
80221528: 97 00 00 00  	auipc	ra, 0x0
8022152c: e7 80 00 bd  	jalr	-0x430(ra) <_ZN7easy_fs11block_cache10BlockCache7get_ref17hfc8bfc26aeb546b5E>
80221530: aa 85        	mv	a1, a0
80221532: 03 35 84 fc  	ld	a0, -0x38(s0)
80221536: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022153a: 83 35 04 fd  	ld	a1, -0x30(s0)
8022153e: 97 e0 ff ff  	auipc	ra, 0xffffe
80221542: e7 80 40 6e  	jalr	0x6e4(ra) <ekernel+0xffcd2c22>
80221546: e2 70        	ld	ra, 0x38(sp)
80221548: 42 74        	ld	s0, 0x30(sp)
;     }
8022154a: 21 61        	addi	sp, sp, 0x40
8022154c: 82 80        	ret

000000008022154e <_ZN7easy_fs11block_cache10BlockCache4read17he7f82c9869b02e14E>:
;     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
8022154e: 79 71        	addi	sp, sp, -0x30
80221550: 06 f4        	sd	ra, 0x28(sp)
80221552: 22 f0        	sd	s0, 0x20(sp)
80221554: 00 18        	addi	s0, sp, 0x30
80221556: 23 38 c4 fc  	sd	a2, -0x30(s0)
8022155a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022155e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_ref(offset))
80221562: 97 00 00 00  	auipc	ra, 0x0
80221566: e7 80 a0 a7  	jalr	-0x586(ra) <_ZN7easy_fs11block_cache10BlockCache7get_ref17h53bebf3c513dc09bE>
8022156a: aa 85        	mv	a1, a0
8022156c: 03 35 04 fd  	ld	a0, -0x30(s0)
80221570: 23 3c b4 fc  	sd	a1, -0x28(s0)
80221574: 83 35 84 fd  	ld	a1, -0x28(s0)
80221578: 97 e0 ff ff  	auipc	ra, 0xffffe
8022157c: e7 80 00 8f  	jalr	-0x710(ra) <ekernel+0xffcd1e68>
80221580: a2 70        	ld	ra, 0x28(sp)
80221582: 02 74        	ld	s0, 0x20(sp)
;     }
80221584: 45 61        	addi	sp, sp, 0x30
80221586: 82 80        	ret

0000000080221588 <_ZN7easy_fs11block_cache10BlockCache4read17heb32c9ad43ba564bE>:
;     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
80221588: 5d 71        	addi	sp, sp, -0x50
8022158a: 86 e4        	sd	ra, 0x48(sp)
8022158c: a2 e0        	sd	s0, 0x40(sp)
8022158e: 80 08        	addi	s0, sp, 0x50
80221590: 23 30 d4 fc  	sd	a3, -0x40(s0)
80221594: 23 38 c4 fa  	sd	a2, -0x50(s0)
80221598: 2e 86        	mv	a2, a1
8022159a: 83 35 04 fb  	ld	a1, -0x50(s0)
8022159e: 23 3c c4 fa  	sd	a2, -0x48(s0)
802215a2: 2a 86        	mv	a2, a0
802215a4: 03 35 84 fb  	ld	a0, -0x48(s0)
802215a8: 23 34 c4 fc  	sd	a2, -0x38(s0)
802215ac: 23 3c a4 fc  	sd	a0, -0x28(s0)
802215b0: 23 30 b4 fe  	sd	a1, -0x20(s0)
802215b4: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         f(self.get_ref(offset))
802215b8: 97 00 00 00  	auipc	ra, 0x0
802215bc: e7 80 40 a2  	jalr	-0x5dc(ra) <_ZN7easy_fs11block_cache10BlockCache7get_ref17h53bebf3c513dc09bE>
802215c0: 83 35 04 fc  	ld	a1, -0x40(s0)
802215c4: 2a 86        	mv	a2, a0
802215c6: 03 35 84 fc  	ld	a0, -0x38(s0)
802215ca: 23 38 c4 fc  	sd	a2, -0x30(s0)
802215ce: 03 36 04 fd  	ld	a2, -0x30(s0)
802215d2: 97 d0 ff ff  	auipc	ra, 0xffffd
802215d6: e7 80 20 6f  	jalr	0x6f2(ra) <ekernel+0xffcd1cc4>
802215da: a6 60        	ld	ra, 0x48(sp)
802215dc: 06 64        	ld	s0, 0x40(sp)
;     }
802215de: 61 61        	addi	sp, sp, 0x50
802215e0: 82 80        	ret

00000000802215e2 <_ZN7easy_fs11block_cache10BlockCache4read17hf78c0c125f437f89E>:
;     pub fn read<T, V>(&self, offset: usize, f: impl FnOnce(&T) -> V) -> V {
802215e2: 5d 71        	addi	sp, sp, -0x50
802215e4: 86 e4        	sd	ra, 0x48(sp)
802215e6: a2 e0        	sd	s0, 0x40(sp)
802215e8: 80 08        	addi	s0, sp, 0x50
802215ea: 23 3c d4 fa  	sd	a3, -0x48(s0)
802215ee: 23 30 c4 fc  	sd	a2, -0x40(s0)
802215f2: 23 38 a4 fc  	sd	a0, -0x30(s0)
802215f6: 23 3c b4 fc  	sd	a1, -0x28(s0)
802215fa: 23 30 c4 fe  	sd	a2, -0x20(s0)
802215fe: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         f(self.get_ref(offset))
80221602: 97 00 00 00  	auipc	ra, 0x0
80221606: e7 80 e0 94  	jalr	-0x6b2(ra) <_ZN7easy_fs11block_cache10BlockCache7get_ref17h36ff9c4a8d608436E>
8022160a: 83 35 84 fb  	ld	a1, -0x48(s0)
8022160e: 2a 86        	mv	a2, a0
80221610: 03 35 04 fc  	ld	a0, -0x40(s0)
80221614: 23 34 c4 fc  	sd	a2, -0x38(s0)
80221618: 03 36 84 fc  	ld	a2, -0x38(s0)
8022161c: 97 00 00 00  	auipc	ra, 0x0
80221620: e7 80 c0 40  	jalr	0x40c(ra) <_ZN7easy_fs3efs14EasyFileSystem4open28_$u7b$$u7b$closure$u7d$$u7d$17h3027ffa216890329E>
80221624: a6 60        	ld	ra, 0x48(sp)
80221626: 06 64        	ld	s0, 0x40(sp)
;     }
80221628: 61 61        	addi	sp, sp, 0x50
8022162a: 82 80        	ret

000000008022162c <_ZN7easy_fs11block_cache10BlockCache6modify17h015329cab75b7256E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
8022162c: 39 71        	addi	sp, sp, -0x40
8022162e: 06 fc        	sd	ra, 0x38(sp)
80221630: 22 f8        	sd	s0, 0x30(sp)
80221632: 80 00        	addi	s0, sp, 0x40
80221634: 23 34 c4 fc  	sd	a2, -0x38(s0)
80221638: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022163c: 23 30 b4 fe  	sd	a1, -0x20(s0)
80221640: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         f(self.get_mut(offset))
80221644: 97 00 00 00  	auipc	ra, 0x0
80221648: e7 80 a0 c6  	jalr	-0x396(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc1653b1b84094de5E>
8022164c: aa 85        	mv	a1, a0
8022164e: 03 35 84 fc  	ld	a0, -0x38(s0)
80221652: 23 38 b4 fc  	sd	a1, -0x30(s0)
80221656: 83 35 04 fd  	ld	a1, -0x30(s0)
8022165a: 97 10 00 00  	auipc	ra, 0x1
8022165e: e7 80 40 91  	jalr	-0x6ec(ra) <_ZN7easy_fs6bitmap6Bitmap5alloc28_$u7b$$u7b$closure$u7d$$u7d$17hcb9e5d7faa6f26eeE>
80221662: e2 70        	ld	ra, 0x38(sp)
80221664: 42 74        	ld	s0, 0x30(sp)
;     }
80221666: 21 61        	addi	sp, sp, 0x40
80221668: 82 80        	ret

000000008022166a <_ZN7easy_fs11block_cache10BlockCache6modify17h072b588f9f501dd9E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
8022166a: 79 71        	addi	sp, sp, -0x30
8022166c: 06 f4        	sd	ra, 0x28(sp)
8022166e: 22 f0        	sd	s0, 0x20(sp)
80221670: 00 18        	addi	s0, sp, 0x30
80221672: 23 3c a4 fc  	sd	a0, -0x28(s0)
80221676: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         f(self.get_mut(offset))
8022167a: 97 00 00 00  	auipc	ra, 0x0
8022167e: e7 80 00 ba  	jalr	-0x460(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17h8ca36b6d1611bed6E>
80221682: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221686: 03 35 04 fd  	ld	a0, -0x30(s0)
8022168a: 97 00 00 00  	auipc	ra, 0x0
8022168e: e7 80 a0 62  	jalr	0x62a(ra) <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data28_$u7b$$u7b$closure$u7d$$u7d$17hfd6cb50ff1c2cd7dE>
80221692: a2 70        	ld	ra, 0x28(sp)
80221694: 02 74        	ld	s0, 0x20(sp)
;     }
80221696: 45 61        	addi	sp, sp, 0x30
80221698: 82 80        	ret

000000008022169a <_ZN7easy_fs11block_cache10BlockCache6modify17h0e3177fee8179b77E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
8022169a: 79 71        	addi	sp, sp, -0x30
8022169c: 06 f4        	sd	ra, 0x28(sp)
8022169e: 22 f0        	sd	s0, 0x20(sp)
802216a0: 00 18        	addi	s0, sp, 0x30
802216a2: 23 38 c4 fc  	sd	a2, -0x30(s0)
802216a6: 23 30 a4 fe  	sd	a0, -0x20(s0)
802216aa: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_mut(offset))
802216ae: 97 00 00 00  	auipc	ra, 0x0
802216b2: e7 80 40 c9  	jalr	-0x36c(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc482d8c8ce3977acE>
802216b6: aa 85        	mv	a1, a0
802216b8: 03 35 04 fd  	ld	a0, -0x30(s0)
802216bc: 23 3c b4 fc  	sd	a1, -0x28(s0)
802216c0: 83 35 84 fd  	ld	a1, -0x28(s0)
802216c4: 97 d0 ff ff  	auipc	ra, 0xffffd
802216c8: e7 80 60 4e  	jalr	0x4e6(ra) <ekernel+0xffcd1baa>
802216cc: a2 70        	ld	ra, 0x28(sp)
802216ce: 02 74        	ld	s0, 0x20(sp)
;     }
802216d0: 45 61        	addi	sp, sp, 0x30
802216d2: 82 80        	ret

00000000802216d4 <_ZN7easy_fs11block_cache10BlockCache6modify17h21481113ec5570c7E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
802216d4: 79 71        	addi	sp, sp, -0x30
802216d6: 06 f4        	sd	ra, 0x28(sp)
802216d8: 22 f0        	sd	s0, 0x20(sp)
802216da: 00 18        	addi	s0, sp, 0x30
802216dc: 23 38 c4 fc  	sd	a2, -0x30(s0)
802216e0: 23 30 a4 fe  	sd	a0, -0x20(s0)
802216e4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_mut(offset))
802216e8: 97 00 00 00  	auipc	ra, 0x0
802216ec: e7 80 e0 a9  	jalr	-0x562(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17h804d884f91f5495cE>
802216f0: aa 85        	mv	a1, a0
802216f2: 03 35 04 fd  	ld	a0, -0x30(s0)
802216f6: 23 3c b4 fc  	sd	a1, -0x28(s0)
802216fa: 83 35 84 fd  	ld	a1, -0x28(s0)
802216fe: 97 f0 ff ff  	auipc	ra, 0xfffff
80221702: e7 80 60 a9  	jalr	-0x56a(ra) <ekernel+0xffcd3194>
80221706: a2 70        	ld	ra, 0x28(sp)
80221708: 02 74        	ld	s0, 0x20(sp)
;     }
8022170a: 45 61        	addi	sp, sp, 0x30
8022170c: 82 80        	ret

000000008022170e <_ZN7easy_fs11block_cache10BlockCache6modify17h24d384a5a88c7471E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
8022170e: 5d 71        	addi	sp, sp, -0x50
80221710: 86 e4        	sd	ra, 0x48(sp)
80221712: a2 e0        	sd	s0, 0x40(sp)
80221714: 80 08        	addi	s0, sp, 0x50
80221716: 23 3c d4 fa  	sd	a3, -0x48(s0)
8022171a: 23 30 c4 fc  	sd	a2, -0x40(s0)
8022171e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221722: 23 3c b4 fc  	sd	a1, -0x28(s0)
80221726: 23 30 c4 fe  	sd	a2, -0x20(s0)
8022172a: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         f(self.get_mut(offset))
8022172e: 97 00 00 00  	auipc	ra, 0x0
80221732: e7 80 80 a5  	jalr	-0x5a8(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17h804d884f91f5495cE>
80221736: 83 35 84 fb  	ld	a1, -0x48(s0)
8022173a: 2a 86        	mv	a2, a0
8022173c: 03 35 04 fc  	ld	a0, -0x40(s0)
80221740: 23 34 c4 fc  	sd	a2, -0x38(s0)
80221744: 03 36 84 fc  	ld	a2, -0x38(s0)
80221748: 97 f0 ff ff  	auipc	ra, 0xfffff
8022174c: e7 80 40 e3  	jalr	-0x1cc(ra) <ekernel+0xffcd357c>
80221750: a6 60        	ld	ra, 0x48(sp)
80221752: 06 64        	ld	s0, 0x40(sp)
;     }
80221754: 61 61        	addi	sp, sp, 0x50
80221756: 82 80        	ret

0000000080221758 <_ZN7easy_fs11block_cache10BlockCache6modify17h497a4806b96c42e7E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
80221758: 79 71        	addi	sp, sp, -0x30
8022175a: 06 f4        	sd	ra, 0x28(sp)
8022175c: 22 f0        	sd	s0, 0x20(sp)
8022175e: 00 18        	addi	s0, sp, 0x30
80221760: 23 38 c4 fc  	sd	a2, -0x30(s0)
80221764: 23 30 a4 fe  	sd	a0, -0x20(s0)
80221768: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_mut(offset))
8022176c: 97 00 00 00  	auipc	ra, 0x0
80221770: e7 80 a0 a1  	jalr	-0x5e6(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17h804d884f91f5495cE>
80221774: aa 85        	mv	a1, a0
80221776: 03 35 04 fd  	ld	a0, -0x30(s0)
8022177a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022177e: 83 35 84 fd  	ld	a1, -0x28(s0)
80221782: 97 e0 ff ff  	auipc	ra, 0xffffe
80221786: e7 80 80 5f  	jalr	0x5f8(ra) <ekernel+0xffcd2d7a>
8022178a: a2 70        	ld	ra, 0x28(sp)
8022178c: 02 74        	ld	s0, 0x20(sp)
;     }
8022178e: 45 61        	addi	sp, sp, 0x30
80221790: 82 80        	ret

0000000080221792 <_ZN7easy_fs11block_cache10BlockCache6modify17h555ce3c8f582ffeeE>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
80221792: 39 71        	addi	sp, sp, -0x40
80221794: 06 fc        	sd	ra, 0x38(sp)
80221796: 22 f8        	sd	s0, 0x30(sp)
80221798: 80 00        	addi	s0, sp, 0x40
8022179a: 23 34 c4 fc  	sd	a2, -0x38(s0)
8022179e: 23 3c a4 fc  	sd	a0, -0x28(s0)
802217a2: 23 30 b4 fe  	sd	a1, -0x20(s0)
802217a6: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         f(self.get_mut(offset))
802217aa: 97 00 00 00  	auipc	ra, 0x0
802217ae: e7 80 c0 9d  	jalr	-0x624(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17h804d884f91f5495cE>
802217b2: aa 85        	mv	a1, a0
802217b4: 03 35 84 fc  	ld	a0, -0x38(s0)
802217b8: 23 38 b4 fc  	sd	a1, -0x30(s0)
802217bc: 83 35 04 fd  	ld	a1, -0x30(s0)
802217c0: 97 f0 ff ff  	auipc	ra, 0xfffff
802217c4: e7 80 c0 d4  	jalr	-0x2b4(ra) <ekernel+0xffcd350c>
802217c8: e2 70        	ld	ra, 0x38(sp)
802217ca: 42 74        	ld	s0, 0x30(sp)
;     }
802217cc: 21 61        	addi	sp, sp, 0x40
802217ce: 82 80        	ret

00000000802217d0 <_ZN7easy_fs11block_cache10BlockCache6modify17h7212b800299603b0E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
802217d0: 79 71        	addi	sp, sp, -0x30
802217d2: 06 f4        	sd	ra, 0x28(sp)
802217d4: 22 f0        	sd	s0, 0x20(sp)
802217d6: 00 18        	addi	s0, sp, 0x30
802217d8: 23 38 c4 fc  	sd	a2, -0x30(s0)
802217dc: 23 30 a4 fe  	sd	a0, -0x20(s0)
802217e0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_mut(offset))
802217e4: 97 00 00 00  	auipc	ra, 0x0
802217e8: e7 80 20 9a  	jalr	-0x65e(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17h804d884f91f5495cE>
802217ec: aa 85        	mv	a1, a0
802217ee: 03 35 04 fd  	ld	a0, -0x30(s0)
802217f2: 23 3c b4 fc  	sd	a1, -0x28(s0)
802217f6: 83 35 84 fd  	ld	a1, -0x28(s0)
802217fa: 97 f0 ff ff  	auipc	ra, 0xfffff
802217fe: e7 80 c0 8c  	jalr	-0x734(ra) <ekernel+0xffcd30c6>
80221802: a2 70        	ld	ra, 0x28(sp)
80221804: 02 74        	ld	s0, 0x20(sp)
;     }
80221806: 45 61        	addi	sp, sp, 0x30
80221808: 82 80        	ret

000000008022180a <_ZN7easy_fs11block_cache10BlockCache6modify17h82a41278fe39d894E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
8022180a: 5d 71        	addi	sp, sp, -0x50
8022180c: 86 e4        	sd	ra, 0x48(sp)
8022180e: a2 e0        	sd	s0, 0x40(sp)
80221810: 80 08        	addi	s0, sp, 0x50
80221812: 23 3c d4 fa  	sd	a3, -0x48(s0)
80221816: 23 30 c4 fc  	sd	a2, -0x40(s0)
8022181a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022181e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80221822: 23 30 c4 fe  	sd	a2, -0x20(s0)
80221826: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         f(self.get_mut(offset))
8022182a: 97 00 00 00  	auipc	ra, 0x0
8022182e: e7 80 40 a8  	jalr	-0x57c(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc1653b1b84094de5E>
80221832: 83 35 84 fb  	ld	a1, -0x48(s0)
80221836: 2a 86        	mv	a2, a0
80221838: 03 35 04 fc  	ld	a0, -0x40(s0)
8022183c: 23 34 c4 fc  	sd	a2, -0x38(s0)
80221840: 03 36 84 fc  	ld	a2, -0x38(s0)
80221844: 97 10 00 00  	auipc	ra, 0x1
80221848: e7 80 40 9c  	jalr	-0x63c(ra) <_ZN7easy_fs6bitmap6Bitmap7dealloc28_$u7b$$u7b$closure$u7d$$u7d$17h984ae1687c339893E>
8022184c: a6 60        	ld	ra, 0x48(sp)
8022184e: 06 64        	ld	s0, 0x40(sp)
;     }
80221850: 61 61        	addi	sp, sp, 0x50
80221852: 82 80        	ret

0000000080221854 <_ZN7easy_fs11block_cache10BlockCache6modify17h981c676e943508c9E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
80221854: 79 71        	addi	sp, sp, -0x30
80221856: 06 f4        	sd	ra, 0x28(sp)
80221858: 22 f0        	sd	s0, 0x20(sp)
8022185a: 00 18        	addi	s0, sp, 0x30
8022185c: 23 38 c4 fc  	sd	a2, -0x30(s0)
80221860: 23 30 a4 fe  	sd	a0, -0x20(s0)
80221864: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_mut(offset))
80221868: 97 00 00 00  	auipc	ra, 0x0
8022186c: e7 80 a0 ad  	jalr	-0x526(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc482d8c8ce3977acE>
80221870: aa 85        	mv	a1, a0
80221872: 03 35 04 fd  	ld	a0, -0x30(s0)
80221876: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022187a: 83 35 84 fd  	ld	a1, -0x28(s0)
8022187e: 97 d0 ff ff  	auipc	ra, 0xffffd
80221882: e7 80 00 62  	jalr	0x620(ra) <ekernel+0xffcd1e9e>
80221886: a2 70        	ld	ra, 0x28(sp)
80221888: 02 74        	ld	s0, 0x20(sp)
;     }
8022188a: 45 61        	addi	sp, sp, 0x30
8022188c: 82 80        	ret

000000008022188e <_ZN7easy_fs11block_cache10BlockCache6modify17haff49e143f23423eE>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
8022188e: 5d 71        	addi	sp, sp, -0x50
80221890: 86 e4        	sd	ra, 0x48(sp)
80221892: a2 e0        	sd	s0, 0x40(sp)
80221894: 80 08        	addi	s0, sp, 0x50
80221896: 23 3c d4 fa  	sd	a3, -0x48(s0)
8022189a: 23 30 c4 fc  	sd	a2, -0x40(s0)
8022189e: 23 38 a4 fc  	sd	a0, -0x30(s0)
802218a2: 23 3c b4 fc  	sd	a1, -0x28(s0)
802218a6: 23 30 c4 fe  	sd	a2, -0x20(s0)
802218aa: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         f(self.get_mut(offset))
802218ae: 97 00 00 00  	auipc	ra, 0x0
802218b2: e7 80 80 8d  	jalr	-0x728(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17h804d884f91f5495cE>
802218b6: 83 35 84 fb  	ld	a1, -0x48(s0)
802218ba: 2a 86        	mv	a2, a0
802218bc: 03 35 04 fc  	ld	a0, -0x40(s0)
802218c0: 23 34 c4 fc  	sd	a2, -0x38(s0)
802218c4: 03 36 84 fc  	ld	a2, -0x38(s0)
802218c8: 97 e0 ff ff  	auipc	ra, 0xffffe
802218cc: e7 80 80 76  	jalr	0x768(ra) <ekernel+0xffcd3030>
802218d0: a6 60        	ld	ra, 0x48(sp)
802218d2: 06 64        	ld	s0, 0x40(sp)
;     }
802218d4: 61 61        	addi	sp, sp, 0x50
802218d6: 82 80        	ret

00000000802218d8 <_ZN7easy_fs11block_cache10BlockCache6modify17hb064be62a6e90396E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
802218d8: 79 71        	addi	sp, sp, -0x30
802218da: 06 f4        	sd	ra, 0x28(sp)
802218dc: 22 f0        	sd	s0, 0x20(sp)
802218de: 00 18        	addi	s0, sp, 0x30
802218e0: 23 38 c4 fc  	sd	a2, -0x30(s0)
802218e4: 23 30 a4 fe  	sd	a0, -0x20(s0)
802218e8: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_mut(offset))
802218ec: 97 00 00 00  	auipc	ra, 0x0
802218f0: e7 80 a0 89  	jalr	-0x766(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17h804d884f91f5495cE>
802218f4: aa 85        	mv	a1, a0
802218f6: 03 35 04 fd  	ld	a0, -0x30(s0)
802218fa: 23 3c b4 fc  	sd	a1, -0x28(s0)
802218fe: 83 35 84 fd  	ld	a1, -0x28(s0)
80221902: 97 e0 ff ff  	auipc	ra, 0xffffe
80221906: e7 80 a0 37  	jalr	0x37a(ra) <ekernel+0xffcd2c7c>
8022190a: a2 70        	ld	ra, 0x28(sp)
8022190c: 02 74        	ld	s0, 0x20(sp)
;     }
8022190e: 45 61        	addi	sp, sp, 0x30
80221910: 82 80        	ret

0000000080221912 <_ZN7easy_fs11block_cache10BlockCache6modify17hbdacfc6b2ff6be67E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
80221912: 79 71        	addi	sp, sp, -0x30
80221914: 06 f4        	sd	ra, 0x28(sp)
80221916: 22 f0        	sd	s0, 0x20(sp)
80221918: 00 18        	addi	s0, sp, 0x30
8022191a: 23 38 c4 fc  	sd	a2, -0x30(s0)
8022191e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80221922: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         f(self.get_mut(offset))
80221926: 97 00 00 00  	auipc	ra, 0x0
8022192a: e7 80 40 8f  	jalr	-0x70c(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17h8ca36b6d1611bed6E>
8022192e: aa 85        	mv	a1, a0
80221930: 03 35 04 fd  	ld	a0, -0x30(s0)
80221934: 23 3c b4 fc  	sd	a1, -0x28(s0)
80221938: 83 35 84 fd  	ld	a1, -0x28(s0)
8022193c: 97 f0 ff ff  	auipc	ra, 0xfffff
80221940: e7 80 00 d9  	jalr	-0x270(ra) <ekernel+0xffcd36cc>
80221944: a2 70        	ld	ra, 0x28(sp)
80221946: 02 74        	ld	s0, 0x20(sp)
;     }
80221948: 45 61        	addi	sp, sp, 0x30
8022194a: 82 80        	ret

000000008022194c <_ZN7easy_fs11block_cache10BlockCache6modify17hc44275532053f9b1E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
8022194c: 5d 71        	addi	sp, sp, -0x50
8022194e: 86 e4        	sd	ra, 0x48(sp)
80221950: a2 e0        	sd	s0, 0x40(sp)
80221952: 80 08        	addi	s0, sp, 0x50
80221954: 23 3c d4 fa  	sd	a3, -0x48(s0)
80221958: 23 30 c4 fc  	sd	a2, -0x40(s0)
8022195c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221960: 23 3c b4 fc  	sd	a1, -0x28(s0)
80221964: 23 30 c4 fe  	sd	a2, -0x20(s0)
80221968: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         f(self.get_mut(offset))
8022196c: 97 00 00 00  	auipc	ra, 0x0
80221970: e7 80 60 9d  	jalr	-0x62a(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc482d8c8ce3977acE>
80221974: 83 35 84 fb  	ld	a1, -0x48(s0)
80221978: 2a 86        	mv	a2, a0
8022197a: 03 35 04 fc  	ld	a0, -0x40(s0)
8022197e: 23 34 c4 fc  	sd	a2, -0x38(s0)
80221982: 03 36 84 fc  	ld	a2, -0x38(s0)
80221986: 97 d0 ff ff  	auipc	ra, 0xffffd
8022198a: e7 80 40 5a  	jalr	0x5a4(ra) <ekernel+0xffcd1f2a>
8022198e: a6 60        	ld	ra, 0x48(sp)
80221990: 06 64        	ld	s0, 0x40(sp)
;     }
80221992: 61 61        	addi	sp, sp, 0x50
80221994: 82 80        	ret

0000000080221996 <_ZN7easy_fs11block_cache10BlockCache6modify17hec274d8e549b65f5E>:
;     pub fn modify<T, V>(&mut self, offset: usize, f: impl FnOnce(&mut T) -> V) -> V {
80221996: 79 71        	addi	sp, sp, -0x30
80221998: 06 f4        	sd	ra, 0x28(sp)
8022199a: 22 f0        	sd	s0, 0x20(sp)
8022199c: 00 18        	addi	s0, sp, 0x30
8022199e: 23 3c a4 fc  	sd	a0, -0x28(s0)
802219a2: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         f(self.get_mut(offset))
802219a6: 97 00 00 00  	auipc	ra, 0x0
802219aa: e7 80 c0 99  	jalr	-0x664(ra) <_ZN7easy_fs11block_cache10BlockCache7get_mut17hc482d8c8ce3977acE>
802219ae: 23 38 a4 fc  	sd	a0, -0x30(s0)
802219b2: 03 35 04 fd  	ld	a0, -0x30(s0)
802219b6: 97 d0 ff ff  	auipc	ra, 0xffffd
802219ba: e7 80 e0 1c  	jalr	0x1ce(ra) <ekernel+0xffcd1b84>
802219be: a2 70        	ld	ra, 0x28(sp)
802219c0: 02 74        	ld	s0, 0x20(sp)
;     }
802219c2: 45 61        	addi	sp, sp, 0x30
802219c4: 82 80        	ret

00000000802219c6 <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache28_$u7b$$u7b$closure$u7d$$u7d$17h50e763f814c0796aE>:
;         if let Some(pair) = self.queue.iter().find(|pair| pair.0 == block_id) {
802219c6: 79 71        	addi	sp, sp, -0x30
802219c8: 06 f4        	sd	ra, 0x28(sp)
802219ca: 22 f0        	sd	s0, 0x20(sp)
802219cc: 00 18        	addi	s0, sp, 0x30
802219ce: 23 3c b4 fc  	sd	a1, -0x28(s0)
802219d2: aa 85        	mv	a1, a0
802219d4: 03 35 84 fd  	ld	a0, -0x28(s0)
802219d8: 23 30 b4 fe  	sd	a1, -0x20(s0)
802219dc: 23 34 a4 fe  	sd	a0, -0x18(s0)
802219e0: 08 61        	ld	a0, 0x0(a0)
802219e2: 08 61        	ld	a0, 0x0(a0)
802219e4: 8c 61        	ld	a1, 0x0(a1)
802219e6: 8c 61        	ld	a1, 0x0(a1)
802219e8: 2d 8d        	xor	a0, a0, a1
802219ea: 13 35 15 00  	seqz	a0, a0
802219ee: a2 70        	ld	ra, 0x28(sp)
802219f0: 02 74        	ld	s0, 0x20(sp)
802219f2: 45 61        	addi	sp, sp, 0x30
802219f4: 82 80        	ret

00000000802219f6 <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache28_$u7b$$u7b$closure$u7d$$u7d$17h7decd9888b0c50e5E>:
;                     .find(|(_, pair)| Arc::strong_count(&pair.1) == 1)
802219f6: 79 71        	addi	sp, sp, -0x30
802219f8: 06 f4        	sd	ra, 0x28(sp)
802219fa: 22 f0        	sd	s0, 0x20(sp)
802219fc: 00 18        	addi	s0, sp, 0x30
802219fe: 23 3c a4 fc  	sd	a0, -0x28(s0)
80221a02: 23 30 b4 fe  	sd	a1, -0x20(s0)
80221a06: 13 85 85 00  	addi	a0, a1, 0x8
80221a0a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221a0e: 88 65        	ld	a0, 0x8(a1)
80221a10: 21 05        	addi	a0, a0, 0x8
80221a12: 97 b0 ff ff  	auipc	ra, 0xffffb
80221a16: e7 80 60 4f  	jalr	0x4f6(ra) <ekernel+0xffccff08>
80221a1a: 7d 15        	addi	a0, a0, -0x1
80221a1c: 13 35 15 00  	seqz	a0, a0
80221a20: a2 70        	ld	ra, 0x28(sp)
80221a22: 02 74        	ld	s0, 0x20(sp)
80221a24: 45 61        	addi	sp, sp, 0x30
80221a26: 82 80        	ret

0000000080221a28 <_ZN7easy_fs3efs14EasyFileSystem4open28_$u7b$$u7b$closure$u7d$$u7d$17h3027ffa216890329E>:
;             .read(0, |super_block: &SuperBlock| {
80221a28: 21 71        	addi	sp, sp, -0x1c0
80221a2a: 06 ff        	sd	ra, 0x1b8(sp)
80221a2c: 22 fb        	sd	s0, 0x1b0(sp)
80221a2e: 80 03        	addi	s0, sp, 0x1c0
80221a30: 23 30 c4 ea  	sd	a2, -0x160(s0)
80221a34: 23 3c b4 e8  	sd	a1, -0x168(s0)
80221a38: 2a 86        	mv	a2, a0
80221a3a: 03 35 04 ea  	ld	a0, -0x160(s0)
80221a3e: 23 34 c4 ea  	sd	a2, -0x158(s0)
80221a42: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80221a46: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80221a4a: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;                 assert!(super_block.is_valid(), "Error loading EFS!");
80221a4e: 97 20 00 00  	auipc	ra, 0x2
80221a52: e7 80 c0 26  	jalr	0x26c(ra) <_ZN7easy_fs6layout10SuperBlock8is_valid17ha984d1390257b39cE>
80221a56: 19 ed        	bnez	a0, 0x80221a74 <.Lpcrel_hi1+0x12>
80221a58: 09 a0        	j	0x80221a5a <.Lpcrel_hi0>

0000000080221a5a <.Lpcrel_hi0>:
80221a5a: 17 75 01 00  	auipc	a0, 0x17
80221a5e: 13 05 e5 20  	addi	a0, a0, 0x20e

0000000080221a62 <.Lpcrel_hi1>:
80221a62: 97 75 01 00  	auipc	a1, 0x17
80221a66: 13 86 e5 25  	addi	a2, a1, 0x25e
80221a6a: c9 45        	li	a1, 0x12
80221a6c: 97 e0 00 00  	auipc	ra, 0xe
80221a70: e7 80 c0 7a  	jalr	0x7ac(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80221a74: 03 35 04 ea  	ld	a0, -0x160(s0)
;                     super_block.inode_bitmap_blocks + super_block.inode_area_blocks;
80221a78: 0c 45        	lw	a1, 0x8(a0)
80221a7a: 48 45        	lw	a0, 0xc(a0)
80221a7c: 2d 9d        	addw	a0, a0, a1
80221a7e: 23 38 a4 e8  	sd	a0, -0x170(s0)
80221a82: 63 6c b5 02  	bltu	a0, a1, 0x80221aba <.Lpcrel_hi2>
80221a86: 09 a0        	j	0x80221a88 <.Lpcrel_hi1+0x26>
80221a88: 83 35 04 e9  	ld	a1, -0x170(s0)
80221a8c: 03 35 04 ea  	ld	a0, -0x160(s0)
;                     super_block.inode_bitmap_blocks + super_block.inode_area_blocks;
80221a90: 23 26 b4 f4  	sw	a1, -0xb4(s0)
;                     inode_bitmap: Bitmap::new(1, super_block.inode_bitmap_blocks as usize),
80221a94: 83 65 85 00  	lwu	a1, 0x8(a0)
80221a98: 05 45        	li	a0, 0x1
80221a9a: 97 90 00 00  	auipc	ra, 0x9
80221a9e: e7 80 20 c1  	jalr	-0x3ee(ra) <_ZN7easy_fs6bitmap6Bitmap3new17h1343b24cc2c2f3f5E>
80221aa2: 2a 86        	mv	a2, a0
80221aa4: 03 35 04 e9  	ld	a0, -0x170(s0)
80221aa8: 23 3c c4 e6  	sd	a2, -0x188(s0)
80221aac: 23 30 b4 e8  	sd	a1, -0x180(s0)
;                         (1 + inode_total_blocks) as usize,
80221ab0: 05 25        	addiw	a0, a0, 0x1
80221ab2: 23 34 a4 e8  	sd	a0, -0x178(s0)
80221ab6: 21 c9        	beqz	a0, 0x80221b06 <.Lpcrel_hi4>
80221ab8: 31 a8        	j	0x80221ad4 <.Lpcrel_hi3+0x12>

0000000080221aba <.Lpcrel_hi2>:
;                     super_block.inode_bitmap_blocks + super_block.inode_area_blocks;
80221aba: 17 75 01 00  	auipc	a0, 0x17
80221abe: 13 05 65 23  	addi	a0, a0, 0x236

0000000080221ac2 <.Lpcrel_hi3>:
80221ac2: 97 75 01 00  	auipc	a1, 0x17
80221ac6: 13 86 65 21  	addi	a2, a1, 0x216
80221aca: f1 45        	li	a1, 0x1c
80221acc: 97 e0 00 00  	auipc	ra, 0xe
80221ad0: e7 80 c0 74  	jalr	0x74c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80221ad4: 83 35 04 ea  	ld	a1, -0x160(s0)
80221ad8: 03 35 84 e8  	ld	a0, -0x178(s0)
;                         (1 + inode_total_blocks) as usize,
80221adc: 02 15        	slli	a0, a0, 0x20
80221ade: 01 91        	srli	a0, a0, 0x20
;                         super_block.data_bitmap_blocks as usize,
80221ae0: 83 e5 05 01  	lwu	a1, 0x10(a1)
;                     data_bitmap: Bitmap::new(
80221ae4: 97 90 00 00  	auipc	ra, 0x9
80221ae8: e7 80 80 bc  	jalr	-0x438(ra) <_ZN7easy_fs6bitmap6Bitmap3new17h1343b24cc2c2f3f5E>
80221aec: 2a 86        	mv	a2, a0
80221aee: 03 35 04 ea  	ld	a0, -0x160(s0)
80221af2: 23 30 c4 e6  	sd	a2, -0x1a0(s0)
80221af6: 23 34 b4 e6  	sd	a1, -0x198(s0)
;                     inode_area_start_block: 1 + super_block.inode_bitmap_blocks,
80221afa: 08 45        	lw	a0, 0x8(a0)
80221afc: 05 25        	addiw	a0, a0, 0x1
80221afe: 23 38 a4 e6  	sd	a0, -0x190(s0)
80221b02: 15 c5        	beqz	a0, 0x80221b2e <.Lpcrel_hi6>
80221b04: 31 a8        	j	0x80221b20 <.Lpcrel_hi5+0x12>

0000000080221b06 <.Lpcrel_hi4>:
;                         (1 + inode_total_blocks) as usize,
80221b06: 17 75 01 00  	auipc	a0, 0x17
80221b0a: 13 05 a5 1e  	addi	a0, a0, 0x1ea

0000000080221b0e <.Lpcrel_hi5>:
80221b0e: 97 75 01 00  	auipc	a1, 0x17
80221b12: 13 86 25 20  	addi	a2, a1, 0x202
80221b16: f1 45        	li	a1, 0x1c
80221b18: 97 e0 00 00  	auipc	ra, 0xe
80221b1c: e7 80 00 70  	jalr	0x700(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80221b20: 03 35 04 e9  	ld	a0, -0x170(s0)
;                     data_area_start_block: 1 + inode_total_blocks + super_block.data_bitmap_blocks,
80221b24: 05 25        	addiw	a0, a0, 0x1
80221b26: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
80221b2a: 1d c9        	beqz	a0, 0x80221b60 <.Lpcrel_hi8>
80221b2c: 31 a8        	j	0x80221b48 <.Lpcrel_hi7+0x12>

0000000080221b2e <.Lpcrel_hi6>:
;                     inode_area_start_block: 1 + super_block.inode_bitmap_blocks,
80221b2e: 17 75 01 00  	auipc	a0, 0x17
80221b32: 13 05 25 1c  	addi	a0, a0, 0x1c2

0000000080221b36 <.Lpcrel_hi7>:
80221b36: 97 75 01 00  	auipc	a1, 0x17
80221b3a: 13 86 25 1f  	addi	a2, a1, 0x1f2
80221b3e: f1 45        	li	a1, 0x1c
80221b40: 97 e0 00 00  	auipc	ra, 0xe
80221b44: e7 80 80 6d  	jalr	0x6d8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80221b48: 83 35 84 e5  	ld	a1, -0x1a8(s0)
80221b4c: 03 35 04 ea  	ld	a0, -0x160(s0)
;                     data_area_start_block: 1 + inode_total_blocks + super_block.data_bitmap_blocks,
80221b50: 08 49        	lw	a0, 0x10(a0)
80221b52: 2d 9d        	addw	a0, a0, a1
80221b54: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80221b58: 81 25        	sext.w	a1, a1
80221b5a: 63 60 b5 14  	bltu	a0, a1, 0x80221c9a <.Lpcrel_hi10>
80221b5e: 31 a8        	j	0x80221b7a <.Lpcrel_hi9+0x12>

0000000080221b60 <.Lpcrel_hi8>:
80221b60: 17 75 01 00  	auipc	a0, 0x17
80221b64: 13 05 05 19  	addi	a0, a0, 0x190

0000000080221b68 <.Lpcrel_hi9>:
80221b68: 97 75 01 00  	auipc	a1, 0x17
80221b6c: 13 86 85 1d  	addi	a2, a1, 0x1d8
80221b70: f1 45        	li	a1, 0x1c
80221b72: 97 e0 00 00  	auipc	ra, 0xe
80221b76: e7 80 60 6a  	jalr	0x6a6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80221b7a: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80221b7e: 83 35 04 e7  	ld	a1, -0x190(s0)
80221b82: 03 36 84 e6  	ld	a2, -0x198(s0)
80221b86: 83 36 04 e6  	ld	a3, -0x1a0(s0)
80221b8a: 03 37 04 e8  	ld	a4, -0x180(s0)
80221b8e: 83 37 84 e7  	ld	a5, -0x188(s0)
80221b92: 03 38 84 e9  	ld	a6, -0x168(s0)
80221b96: 83 38 84 ea  	ld	a7, -0x158(s0)
;                 let efs = Self {
80221b9a: 23 38 14 eb  	sd	a7, -0x150(s0)
80221b9e: 23 3c 04 eb  	sd	a6, -0x148(s0)
80221ba2: 23 30 f4 ec  	sd	a5, -0x140(s0)
80221ba6: 23 34 e4 ec  	sd	a4, -0x138(s0)
80221baa: 23 38 d4 ec  	sd	a3, -0x130(s0)
80221bae: 23 3c c4 ec  	sd	a2, -0x128(s0)
80221bb2: 23 20 b4 ee  	sw	a1, -0x120(s0)
80221bb6: 23 22 a4 ee  	sw	a0, -0x11c(s0)
80221bba: 01 45        	li	a0, 0x0
80221bbc: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;             next_ticket: AtomicUsize::new(0),
80221bc0: 97 d0 ff ff  	auipc	ra, 0xffffd
80221bc4: e7 80 60 57  	jalr	0x576(ra) <ekernel+0xffcd2136>
80221bc8: aa 85        	mv	a1, a0
80221bca: 03 35 04 e4  	ld	a0, -0x1c0(s0)
80221bce: 23 30 b4 fe  	sd	a1, -0x20(s0)
80221bd2: 83 35 04 fe  	ld	a1, -0x20(s0)
80221bd6: 23 3c b4 f8  	sd	a1, -0x68(s0)
;             next_serving: AtomicUsize::new(0),
80221bda: 97 d0 ff ff  	auipc	ra, 0xffffd
80221bde: e7 80 c0 55  	jalr	0x55c(ra) <ekernel+0xffcd2136>
80221be2: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221be6: 03 35 84 fe  	ld	a0, -0x18(s0)
80221bea: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         UnsafeCell { value }
80221bee: 03 35 04 ee  	ld	a0, -0x120(s0)
80221bf2: 23 3c a4 fc  	sd	a0, -0x28(s0)
80221bf6: 03 35 84 ed  	ld	a0, -0x128(s0)
80221bfa: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221bfe: 03 35 04 ed  	ld	a0, -0x130(s0)
80221c02: 23 34 a4 fc  	sd	a0, -0x38(s0)
80221c06: 03 35 84 ec  	ld	a0, -0x138(s0)
80221c0a: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221c0e: 03 35 04 ec  	ld	a0, -0x140(s0)
80221c12: 23 3c a4 fa  	sd	a0, -0x48(s0)
80221c16: 03 35 84 eb  	ld	a0, -0x148(s0)
80221c1a: 23 38 a4 fa  	sd	a0, -0x50(s0)
80221c1e: 03 35 04 eb  	ld	a0, -0x150(s0)
80221c22: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         Self {
80221c26: 03 35 84 f9  	ld	a0, -0x68(s0)
80221c2a: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80221c2e: 03 35 04 fa  	ld	a0, -0x60(s0)
80221c32: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80221c36: 03 35 84 fd  	ld	a0, -0x28(s0)
80221c3a: 23 38 a4 f8  	sd	a0, -0x70(s0)
80221c3e: 03 35 04 fd  	ld	a0, -0x30(s0)
80221c42: 23 34 a4 f8  	sd	a0, -0x78(s0)
80221c46: 03 35 84 fc  	ld	a0, -0x38(s0)
80221c4a: 23 30 a4 f8  	sd	a0, -0x80(s0)
80221c4e: 03 35 04 fc  	ld	a0, -0x40(s0)
80221c52: 23 3c a4 f6  	sd	a0, -0x88(s0)
80221c56: 03 35 84 fb  	ld	a0, -0x48(s0)
80221c5a: 23 38 a4 f6  	sd	a0, -0x90(s0)
80221c5e: 03 35 04 fb  	ld	a0, -0x50(s0)
80221c62: 23 34 a4 f6  	sd	a0, -0x98(s0)
80221c66: 03 35 84 fa  	ld	a0, -0x58(s0)
80221c6a: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80221c6e: 13 05 84 ee  	addi	a0, s0, -0x118
80221c72: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
80221c76: 93 05 04 f5  	addi	a1, s0, -0xb0
80221c7a: 13 06 80 04  	li	a2, 0x48
;         Self { inner: InnerMutex::new(value) }
80221c7e: 97 00 01 00  	auipc	ra, 0x10
80221c82: e7 80 00 ff  	jalr	-0x10(ra) <memcpy>
80221c86: 03 35 84 e4  	ld	a0, -0x1b8(s0)
;                 Arc::new(Mutex::new(efs))
80221c8a: 97 b0 ff ff  	auipc	ra, 0xffffb
80221c8e: e7 80 80 11  	jalr	0x118(ra) <ekernel+0xffccfda2>
80221c92: fa 70        	ld	ra, 0x1b8(sp)
80221c94: 5a 74        	ld	s0, 0x1b0(sp)
;             })
80221c96: 39 61        	addi	sp, sp, 0x1c0
80221c98: 82 80        	ret

0000000080221c9a <.Lpcrel_hi10>:
;                     data_area_start_block: 1 + inode_total_blocks + super_block.data_bitmap_blocks,
80221c9a: 17 75 01 00  	auipc	a0, 0x17
80221c9e: 13 05 65 05  	addi	a0, a0, 0x56

0000000080221ca2 <.Lpcrel_hi11>:
80221ca2: 97 75 01 00  	auipc	a1, 0x17
80221ca6: 13 86 e5 09  	addi	a2, a1, 0x9e
80221caa: f1 45        	li	a1, 0x1c
80221cac: 97 e0 00 00  	auipc	ra, 0xe
80221cb0: e7 80 c0 56  	jalr	0x56c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080221cb4 <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data28_$u7b$$u7b$closure$u7d$$u7d$17hfd6cb50ff1c2cd7dE>:
;             .modify(0, |data_block: &mut DataBlock| {
80221cb4: 01 11        	addi	sp, sp, -0x20
80221cb6: 06 ec        	sd	ra, 0x18(sp)
80221cb8: 22 e8        	sd	s0, 0x10(sp)
80221cba: 00 10        	addi	s0, sp, 0x20
80221cbc: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221cc0: 93 05 00 20  	li	a1, 0x200
;                 data_block.iter_mut().for_each(|p| {
80221cc4: 97 b0 ff ff  	auipc	ra, 0xffffb
80221cc8: e7 80 40 69  	jalr	0x694(ra) <ekernel+0xffcd0358>
80221ccc: 97 70 00 00  	auipc	ra, 0x7
80221cd0: e7 80 60 f9  	jalr	-0x6a(ra) <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hcb3888c16e94b73aE>
80221cd4: e2 60        	ld	ra, 0x18(sp)
80221cd6: 42 64        	ld	s0, 0x10(sp)
;             });
80221cd8: 05 61        	addi	sp, sp, 0x20
80221cda: 82 80        	ret

0000000080221cdc <_ZN7easy_fs3efs14EasyFileSystem12dealloc_data28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h9738efac5fbe2cc2E>:
;                 data_block.iter_mut().for_each(|p| {
80221cdc: 01 11        	addi	sp, sp, -0x20
80221cde: 06 ec        	sd	ra, 0x18(sp)
80221ce0: 22 e8        	sd	s0, 0x10(sp)
80221ce2: 00 10        	addi	s0, sp, 0x20
80221ce4: 23 30 a4 fe  	sd	a0, -0x20(s0)
80221ce8: 23 34 b4 fe  	sd	a1, -0x18(s0)
80221cec: 01 45        	li	a0, 0x0
;                     *p = 0;
80221cee: 23 80 a5 00  	sb	a0, 0x0(a1)
80221cf2: e2 60        	ld	ra, 0x18(sp)
80221cf4: 42 64        	ld	s0, 0x10(sp)
;                 })
80221cf6: 05 61        	addi	sp, sp, 0x20
80221cf8: 82 80        	ret

0000000080221cfa <_ZN104_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h2065911b56788f4aE>:
;     fn from_residual(residual: ControlFlow<B, convert::Infallible>) -> Self {
80221cfa: 79 71        	addi	sp, sp, -0x30
80221cfc: 06 f4        	sd	ra, 0x28(sp)
80221cfe: 22 f0        	sd	s0, 0x20(sp)
80221d00: 00 18        	addi	s0, sp, 0x30
80221d02: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             ControlFlow::Break(b) => ControlFlow::Break(b),
80221d06: 03 35 04 fd  	ld	a0, -0x30(s0)
80221d0a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221d0e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80221d12: 05 45        	li	a0, 0x1
80221d14: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80221d18: 03 35 84 fd  	ld	a0, -0x28(s0)
80221d1c: 83 35 04 fe  	ld	a1, -0x20(s0)
80221d20: a2 70        	ld	ra, 0x28(sp)
80221d22: 02 74        	ld	s0, 0x20(sp)
80221d24: 45 61        	addi	sp, sp, 0x30
80221d26: 82 80        	ret

0000000080221d28 <_ZN104_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17h925f069b28a5e8d5E>:
;     fn from_residual(residual: ControlFlow<B, convert::Infallible>) -> Self {
80221d28: 39 71        	addi	sp, sp, -0x40
80221d2a: 06 fc        	sd	ra, 0x38(sp)
80221d2c: 22 f8        	sd	s0, 0x30(sp)
80221d2e: 80 00        	addi	s0, sp, 0x40
80221d30: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221d34: 23 34 b4 fc  	sd	a1, -0x38(s0)
;             ControlFlow::Break(b) => ControlFlow::Break(b),
80221d38: 83 35 04 fc  	ld	a1, -0x40(s0)
80221d3c: 03 35 84 fc  	ld	a0, -0x38(s0)
80221d40: 23 30 b4 fe  	sd	a1, -0x20(s0)
80221d44: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221d48: 23 38 b4 fc  	sd	a1, -0x30(s0)
80221d4c: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80221d50: 03 35 04 fd  	ld	a0, -0x30(s0)
80221d54: 83 35 84 fd  	ld	a1, -0x28(s0)
80221d58: e2 70        	ld	ra, 0x38(sp)
80221d5a: 42 74        	ld	s0, 0x30(sp)
80221d5c: 21 61        	addi	sp, sp, 0x40
80221d5e: 82 80        	ret

0000000080221d60 <_ZN104_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17hc4d82ae4ca2fcbf6E>:
;     fn from_residual(residual: ControlFlow<B, convert::Infallible>) -> Self {
80221d60: 79 71        	addi	sp, sp, -0x30
80221d62: 06 f4        	sd	ra, 0x28(sp)
80221d64: 22 f0        	sd	s0, 0x20(sp)
80221d66: 00 18        	addi	s0, sp, 0x30
80221d68: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             ControlFlow::Break(b) => ControlFlow::Break(b),
80221d6c: 03 35 84 fd  	ld	a0, -0x28(s0)
80221d70: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221d74: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     }
80221d78: 03 35 04 fe  	ld	a0, -0x20(s0)
80221d7c: a2 70        	ld	ra, 0x28(sp)
80221d7e: 02 74        	ld	s0, 0x20(sp)
80221d80: 45 61        	addi	sp, sp, 0x30
80221d82: 82 80        	ret

0000000080221d84 <_ZN104_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..FromResidual$GT$13from_residual17hee522a7b4a22f30fE>:
;     fn from_residual(residual: ControlFlow<B, convert::Infallible>) -> Self {
80221d84: 39 71        	addi	sp, sp, -0x40
80221d86: 06 fc        	sd	ra, 0x38(sp)
80221d88: 22 f8        	sd	s0, 0x30(sp)
80221d8a: 80 00        	addi	s0, sp, 0x40
80221d8c: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221d90: 23 34 b4 fc  	sd	a1, -0x38(s0)
;             ControlFlow::Break(b) => ControlFlow::Break(b),
80221d94: 83 35 04 fc  	ld	a1, -0x40(s0)
80221d98: 03 35 84 fc  	ld	a0, -0x38(s0)
80221d9c: 23 30 b4 fe  	sd	a1, -0x20(s0)
80221da0: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221da4: 23 38 b4 fc  	sd	a1, -0x30(s0)
80221da8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80221dac: 03 35 04 fd  	ld	a0, -0x30(s0)
80221db0: 83 35 84 fd  	ld	a1, -0x28(s0)
80221db4: e2 70        	ld	ra, 0x38(sp)
80221db6: 42 74        	ld	s0, 0x30(sp)
80221db8: 21 61        	addi	sp, sp, 0x40
80221dba: 82 80        	ret

0000000080221dbc <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$11from_output17h7c96df3a57e5d9bbE>:
;     fn from_output(output: Self::Output) -> Self {
80221dbc: 79 71        	addi	sp, sp, -0x30
80221dbe: 06 f4        	sd	ra, 0x28(sp)
80221dc0: 22 f0        	sd	s0, 0x20(sp)
80221dc2: 00 18        	addi	s0, sp, 0x30
80221dc4: 01 45        	li	a0, 0x0
;         ControlFlow::Continue(output)
80221dc6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     }
80221dca: 03 35 84 fd  	ld	a0, -0x28(s0)
80221dce: 83 35 04 fe  	ld	a1, -0x20(s0)
80221dd2: a2 70        	ld	ra, 0x28(sp)
80221dd4: 02 74        	ld	s0, 0x20(sp)
80221dd6: 45 61        	addi	sp, sp, 0x30
80221dd8: 82 80        	ret

0000000080221dda <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$11from_output17h9e302c2aef51bab8E>:
;     fn from_output(output: Self::Output) -> Self {
80221dda: 79 71        	addi	sp, sp, -0x30
80221ddc: 06 f4        	sd	ra, 0x28(sp)
80221dde: 22 f0        	sd	s0, 0x20(sp)
80221de0: 00 18        	addi	s0, sp, 0x30
80221de2: 01 45        	li	a0, 0x0
;         ControlFlow::Continue(output)
80221de4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     }
80221de8: 03 35 84 fd  	ld	a0, -0x28(s0)
80221dec: 83 35 04 fe  	ld	a1, -0x20(s0)
80221df0: a2 70        	ld	ra, 0x28(sp)
80221df2: 02 74        	ld	s0, 0x20(sp)
80221df4: 45 61        	addi	sp, sp, 0x30
80221df6: 82 80        	ret

0000000080221df8 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$11from_output17hb59407bc44bd5925E>:
;     fn from_output(output: Self::Output) -> Self {
80221df8: 79 71        	addi	sp, sp, -0x30
80221dfa: 06 f4        	sd	ra, 0x28(sp)
80221dfc: 22 f0        	sd	s0, 0x20(sp)
80221dfe: 00 18        	addi	s0, sp, 0x30
80221e00: 01 45        	li	a0, 0x0
;         ControlFlow::Continue(output)
80221e02: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     }
80221e06: 03 35 84 fd  	ld	a0, -0x28(s0)
80221e0a: 83 35 04 fe  	ld	a1, -0x20(s0)
80221e0e: a2 70        	ld	ra, 0x28(sp)
80221e10: 02 74        	ld	s0, 0x20(sp)
80221e12: 45 61        	addi	sp, sp, 0x30
80221e14: 82 80        	ret

0000000080221e16 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$11from_output17hc388851bf9bd35a7E>:
;     fn from_output(output: Self::Output) -> Self {
80221e16: 01 11        	addi	sp, sp, -0x20
80221e18: 06 ec        	sd	ra, 0x18(sp)
80221e1a: 22 e8        	sd	s0, 0x10(sp)
80221e1c: 00 10        	addi	s0, sp, 0x20
80221e1e: 01 45        	li	a0, 0x0
;         ControlFlow::Continue(output)
80221e20: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     }
80221e24: 03 35 04 fe  	ld	a0, -0x20(s0)
80221e28: e2 60        	ld	ra, 0x18(sp)
80221e2a: 42 64        	ld	s0, 0x10(sp)
80221e2c: 05 61        	addi	sp, sp, 0x20
80221e2e: 82 80        	ret

0000000080221e30 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h69921587cbee94e0E>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80221e30: 39 71        	addi	sp, sp, -0x40
80221e32: 06 fc        	sd	ra, 0x38(sp)
80221e34: 22 f8        	sd	s0, 0x30(sp)
80221e36: 80 00        	addi	s0, sp, 0x40
80221e38: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         match self {
80221e3c: 03 35 84 fc  	ld	a0, -0x38(s0)
80221e40: 11 e5        	bnez	a0, 0x80221e4c <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h69921587cbee94e0E+0x1c>
80221e42: 09 a0        	j	0x80221e44 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h69921587cbee94e0E+0x14>
80221e44: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(c) => ControlFlow::Continue(c),
80221e46: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221e4a: 21 a8        	j	0x80221e62 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h69921587cbee94e0E+0x32>
;             ControlFlow::Break(b) => ControlFlow::Break(ControlFlow::Break(b)),
80221e4c: 03 35 84 fc  	ld	a0, -0x38(s0)
80221e50: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221e54: 23 3c a4 fc  	sd	a0, -0x28(s0)
80221e58: 03 35 84 fd  	ld	a0, -0x28(s0)
80221e5c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221e60: 09 a0        	j	0x80221e62 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h69921587cbee94e0E+0x32>
;     }
80221e62: 03 35 04 fd  	ld	a0, -0x30(s0)
80221e66: e2 70        	ld	ra, 0x38(sp)
80221e68: 42 74        	ld	s0, 0x30(sp)
80221e6a: 21 61        	addi	sp, sp, 0x40
80221e6c: 82 80        	ret

0000000080221e6e <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9976184d3fee8f22E>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80221e6e: 1d 71        	addi	sp, sp, -0x60
80221e70: 86 ec        	sd	ra, 0x58(sp)
80221e72: a2 e8        	sd	s0, 0x50(sp)
80221e74: 80 10        	addi	s0, sp, 0x60
80221e76: 23 34 a4 fa  	sd	a0, -0x58(s0)
80221e7a: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         match self {
80221e7e: 03 35 04 fb  	ld	a0, -0x50(s0)
80221e82: 11 e5        	bnez	a0, 0x80221e8e <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9976184d3fee8f22E+0x20>
80221e84: 09 a0        	j	0x80221e86 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9976184d3fee8f22E+0x18>
80221e86: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(c) => ControlFlow::Continue(c),
80221e88: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221e8c: 35 a0        	j	0x80221eb8 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9976184d3fee8f22E+0x4a>
;             ControlFlow::Break(b) => ControlFlow::Break(ControlFlow::Break(b)),
80221e8e: 83 35 84 fa  	ld	a1, -0x58(s0)
80221e92: 03 35 04 fb  	ld	a0, -0x50(s0)
80221e96: 23 30 b4 fe  	sd	a1, -0x20(s0)
80221e9a: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221e9e: 23 34 b4 fc  	sd	a1, -0x38(s0)
80221ea2: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221ea6: 83 35 84 fc  	ld	a1, -0x38(s0)
80221eaa: 03 35 04 fd  	ld	a0, -0x30(s0)
80221eae: 23 3c b4 fa  	sd	a1, -0x48(s0)
80221eb2: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221eb6: 09 a0        	j	0x80221eb8 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h9976184d3fee8f22E+0x4a>
;     }
80221eb8: 03 35 84 fb  	ld	a0, -0x48(s0)
80221ebc: 83 35 04 fc  	ld	a1, -0x40(s0)
80221ec0: e6 60        	ld	ra, 0x58(sp)
80221ec2: 46 64        	ld	s0, 0x50(sp)
80221ec4: 25 61        	addi	sp, sp, 0x60
80221ec6: 82 80        	ret

0000000080221ec8 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb2dda92780297961E>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80221ec8: 5d 71        	addi	sp, sp, -0x50
80221eca: 86 e4        	sd	ra, 0x48(sp)
80221ecc: a2 e0        	sd	s0, 0x40(sp)
80221ece: 80 08        	addi	s0, sp, 0x50
80221ed0: 23 3c a4 fa  	sd	a0, -0x48(s0)
80221ed4: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         match self {
80221ed8: 03 35 84 fb  	ld	a0, -0x48(s0)
80221edc: 11 e5        	bnez	a0, 0x80221ee8 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb2dda92780297961E+0x20>
80221ede: 09 a0        	j	0x80221ee0 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb2dda92780297961E+0x18>
80221ee0: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(c) => ControlFlow::Continue(c),
80221ee2: 23 34 a4 fc  	sd	a0, -0x38(s0)
80221ee6: 39 a8        	j	0x80221f04 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb2dda92780297961E+0x3c>
;             ControlFlow::Break(b) => ControlFlow::Break(ControlFlow::Break(b)),
80221ee8: 03 35 04 fc  	ld	a0, -0x40(s0)
80221eec: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221ef0: 23 3c a4 fc  	sd	a0, -0x28(s0)
80221ef4: 03 35 84 fd  	ld	a0, -0x28(s0)
80221ef8: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221efc: 05 45        	li	a0, 0x1
80221efe: 23 34 a4 fc  	sd	a0, -0x38(s0)
80221f02: 09 a0        	j	0x80221f04 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb2dda92780297961E+0x3c>
;     }
80221f04: 03 35 84 fc  	ld	a0, -0x38(s0)
80221f08: 83 35 04 fd  	ld	a1, -0x30(s0)
80221f0c: a6 60        	ld	ra, 0x48(sp)
80221f0e: 06 64        	ld	s0, 0x40(sp)
80221f10: 61 61        	addi	sp, sp, 0x50
80221f12: 82 80        	ret

0000000080221f14 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb70197b41f6052dcE>:
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
80221f14: 1d 71        	addi	sp, sp, -0x60
80221f16: 86 ec        	sd	ra, 0x58(sp)
80221f18: a2 e8        	sd	s0, 0x50(sp)
80221f1a: 80 10        	addi	s0, sp, 0x60
80221f1c: 23 34 a4 fa  	sd	a0, -0x58(s0)
80221f20: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         match self {
80221f24: 03 35 04 fb  	ld	a0, -0x50(s0)
80221f28: 11 e5        	bnez	a0, 0x80221f34 <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb70197b41f6052dcE+0x20>
80221f2a: 09 a0        	j	0x80221f2c <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb70197b41f6052dcE+0x18>
80221f2c: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(c) => ControlFlow::Continue(c),
80221f2e: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221f32: 35 a0        	j	0x80221f5e <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb70197b41f6052dcE+0x4a>
;             ControlFlow::Break(b) => ControlFlow::Break(ControlFlow::Break(b)),
80221f34: 83 35 84 fa  	ld	a1, -0x58(s0)
80221f38: 03 35 04 fb  	ld	a0, -0x50(s0)
80221f3c: 23 30 b4 fe  	sd	a1, -0x20(s0)
80221f40: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221f44: 23 34 b4 fc  	sd	a1, -0x38(s0)
80221f48: 23 38 a4 fc  	sd	a0, -0x30(s0)
80221f4c: 83 35 84 fc  	ld	a1, -0x38(s0)
80221f50: 03 35 04 fd  	ld	a0, -0x30(s0)
80221f54: 23 3c b4 fa  	sd	a1, -0x48(s0)
80221f58: 23 30 a4 fc  	sd	a0, -0x40(s0)
80221f5c: 09 a0        	j	0x80221f5e <_ZN95_$LT$core..ops..control_flow..ControlFlow$LT$B$C$C$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hb70197b41f6052dcE+0x4a>
;     }
80221f5e: 03 35 84 fb  	ld	a0, -0x48(s0)
80221f62: 83 35 04 fc  	ld	a1, -0x40(s0)
80221f66: e6 60        	ld	ra, 0x58(sp)
80221f68: 46 64        	ld	s0, 0x50(sp)
80221f6a: 25 61        	addi	sp, sp, 0x60
80221f6c: 82 80        	ret

0000000080221f6e <_ZN7easy_fs6bitmap6Bitmap5alloc28_$u7b$$u7b$closure$u7d$$u7d$17hcb9e5d7faa6f26eeE>:
;             .modify(0, |bitmap_block: &mut BitmapBlock| {
80221f6e: 55 71        	addi	sp, sp, -0xd0
80221f70: 86 e5        	sd	ra, 0xc8(sp)
80221f72: a2 e1        	sd	s0, 0xc0(sp)
80221f74: 80 09        	addi	s0, sp, 0xd0
80221f76: 23 38 b4 f6  	sd	a1, -0x90(s0)
80221f7a: aa 85        	mv	a1, a0
80221f7c: 03 35 04 f7  	ld	a0, -0x90(s0)
80221f80: 23 38 b4 f8  	sd	a1, -0x70(s0)
80221f84: 23 3c a4 fc  	sd	a0, -0x28(s0)
80221f88: 93 05 00 04  	li	a1, 0x40
;                 if let Some((bits64_pos, inner_pos)) = bitmap_block
80221f8c: 97 b0 ff ff  	auipc	ra, 0xffffb
80221f90: e7 80 c0 30  	jalr	0x30c(ra) <ekernel+0xffcd0298>
80221f94: 23 3c a4 f6  	sd	a0, -0x88(s0)
80221f98: 2e 86        	mv	a2, a1
80221f9a: 83 35 84 f7  	ld	a1, -0x88(s0)
80221f9e: 13 05 04 fc  	addi	a0, s0, -0x40
80221fa2: 23 30 a4 f8  	sd	a0, -0x80(s0)
80221fa6: 97 70 00 00  	auipc	ra, 0x7
80221faa: e7 80 20 87  	jalr	-0x78e(ra) <_ZN4core4iter6traits8iterator8Iterator9enumerate17h83f5ff706b15ac75E>
80221fae: 03 35 04 f8  	ld	a0, -0x80(s0)
80221fb2: 97 00 00 00  	auipc	ra, 0x0
80221fb6: e7 80 00 59  	jalr	0x590(ra) <_ZN4core4iter6traits8iterator8Iterator4find17h8812a842edb2f4f6E>
80221fba: 23 34 a4 f8  	sd	a0, -0x78(s0)
80221fbe: 2e 86        	mv	a2, a1
80221fc0: 83 35 84 f8  	ld	a1, -0x78(s0)
80221fc4: 13 05 84 fa  	addi	a0, s0, -0x58
80221fc8: 97 40 00 00  	auipc	ra, 0x4
80221fcc: e7 80 60 43  	jalr	0x436(ra) <_ZN4core6option15Option$LT$T$GT$3map17h5500e74cc61da3b4E>
80221fd0: 03 35 84 fa  	ld	a0, -0x58(s0)
80221fd4: 1d c1        	beqz	a0, 0x80221ffa <_ZN7easy_fs6bitmap6Bitmap5alloc28_$u7b$$u7b$closure$u7d$$u7d$17hcb9e5d7faa6f26eeE+0x8c>
80221fd6: 09 a0        	j	0x80221fd8 <_ZN7easy_fs6bitmap6Bitmap5alloc28_$u7b$$u7b$closure$u7d$$u7d$17hcb9e5d7faa6f26eeE+0x6a>
80221fd8: 03 35 04 fb  	ld	a0, -0x50(s0)
80221fdc: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80221fe0: 23 30 a4 fe  	sd	a0, -0x20(s0)
80221fe4: 03 35 84 fb  	ld	a0, -0x48(s0)
80221fe8: 23 34 a4 f6  	sd	a0, -0x98(s0)
80221fec: 23 34 a4 fe  	sd	a0, -0x18(s0)
80221ff0: 93 05 00 04  	li	a1, 0x40
;                     bitmap_block[bits64_pos] |= 1u64 << inner_pos;
80221ff4: 63 67 b5 00  	bltu	a0, a1, 0x80222002 <_ZN7easy_fs6bitmap6Bitmap5alloc28_$u7b$$u7b$closure$u7d$$u7d$17hcb9e5d7faa6f26eeE+0x94>
80221ff8: 1d a0        	j	0x8022201e <.Lpcrel_hi0>
80221ffa: 01 45        	li	a0, 0x0
;                     None
80221ffc: 23 3c a4 f8  	sd	a0, -0x68(s0)
;                 if let Some((bits64_pos, inner_pos)) = bitmap_block
80222000: 3d aa        	j	0x8022213e <.Lpcrel_hi10+0x12>
80222002: 03 35 04 f6  	ld	a0, -0xa0(s0)
80222006: 03 36 84 f6  	ld	a2, -0x98(s0)
8022200a: 85 45        	li	a1, 0x1
;                     bitmap_block[bits64_pos] |= 1u64 << inner_pos;
8022200c: b3 95 c5 00  	sll	a1, a1, a2
80222010: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80222014: 93 05 00 04  	li	a1, 0x40
80222018: 63 61 b5 02  	bltu	a0, a1, 0x8022203a <.Lpcrel_hi1+0x14>
8022201c: b9 a0        	j	0x8022206a <.Lpcrel_hi1+0x44>

000000008022201e <.Lpcrel_hi0>:
8022201e: 17 75 01 00  	auipc	a0, 0x17
80222022: 13 05 25 de  	addi	a0, a0, -0x21e

0000000080222026 <.Lpcrel_hi1>:
80222026: 97 75 01 00  	auipc	a1, 0x17
8022202a: 13 86 a5 db  	addi	a2, a1, -0x246
8022202e: 93 05 30 02  	li	a1, 0x23
80222032: 97 e0 00 00  	auipc	ra, 0xe
80222036: e7 80 60 1e  	jalr	0x1e6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022203a: 03 36 84 f5  	ld	a2, -0xa8(s0)
8022203e: 03 35 04 f7  	ld	a0, -0x90(s0)
80222042: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                     bitmap_block[bits64_pos] |= 1u64 << inner_pos;
80222046: 8e 05        	slli	a1, a1, 0x3
80222048: aa 95        	add	a1, a1, a0
8022204a: 88 61        	ld	a0, 0x0(a1)
8022204c: 51 8d        	or	a0, a0, a2
8022204e: 88 e1        	sd	a0, 0x0(a1)
;                     Some(block_id * BLOCK_BITS + bits64_pos * 64 + inner_pos as usize)
80222050: 03 35 04 f9  	ld	a0, -0x70(s0)
80222054: 0c 61        	ld	a1, 0x0(a0)
80222056: 13 95 c5 00  	slli	a0, a1, 0xc
8022205a: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8022205e: 13 95 c5 00  	slli	a0, a1, 0xc
80222062: 31 81        	srli	a0, a0, 0xc
80222064: 63 1b b5 02  	bne	a0, a1, 0x8022209a <.Lpcrel_hi3>
80222068: 29 a8        	j	0x80222082 <.Lpcrel_hi2+0x14>
8022206a: 03 35 04 f6  	ld	a0, -0xa0(s0)

000000008022206e <.Lpcrel_hi2>:
;                     bitmap_block[bits64_pos] |= 1u64 << inner_pos;
8022206e: 97 75 01 00  	auipc	a1, 0x17
80222072: 13 86 a5 db  	addi	a2, a1, -0x246
80222076: 93 05 00 04  	li	a1, 0x40
8022207a: 97 e0 00 00  	auipc	ra, 0xe
8022207e: e7 80 60 23  	jalr	0x236(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
80222082: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                     Some(block_id * BLOCK_BITS + bits64_pos * 64 + inner_pos as usize)
80222086: 13 95 65 00  	slli	a0, a1, 0x6
8022208a: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022208e: 13 95 65 00  	slli	a0, a1, 0x6
80222092: 19 81        	srli	a0, a0, 0x6
80222094: 63 1b b5 02  	bne	a0, a1, 0x802220ca <.Lpcrel_hi5>
80222098: 39 a8        	j	0x802220b6 <.Lpcrel_hi4+0x14>

000000008022209a <.Lpcrel_hi3>:
8022209a: 17 75 01 00  	auipc	a0, 0x17
8022209e: 13 05 65 dc  	addi	a0, a0, -0x23a

00000000802220a2 <.Lpcrel_hi4>:
802220a2: 97 75 01 00  	auipc	a1, 0x17
802220a6: 13 86 e5 d9  	addi	a2, a1, -0x262
802220aa: 93 05 10 02  	li	a1, 0x21
802220ae: 97 e0 00 00  	auipc	ra, 0xe
802220b2: e7 80 a0 16  	jalr	0x16a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802220b6: 83 35 04 f5  	ld	a1, -0xb0(s0)
802220ba: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     Some(block_id * BLOCK_BITS + bits64_pos * 64 + inner_pos as usize)
802220be: 2e 95        	add	a0, a0, a1
802220c0: 23 30 a4 f4  	sd	a0, -0xc0(s0)
802220c4: 63 6b b5 02  	bltu	a0, a1, 0x802220fa <.Lpcrel_hi7>
802220c8: 39 a8        	j	0x802220e6 <.Lpcrel_hi6+0x14>

00000000802220ca <.Lpcrel_hi5>:
802220ca: 17 75 01 00  	auipc	a0, 0x17
802220ce: 13 05 65 d9  	addi	a0, a0, -0x26a

00000000802220d2 <.Lpcrel_hi6>:
802220d2: 97 75 01 00  	auipc	a1, 0x17
802220d6: 13 86 65 db  	addi	a2, a1, -0x24a
802220da: 93 05 10 02  	li	a1, 0x21
802220de: 97 e0 00 00  	auipc	ra, 0xe
802220e2: e7 80 a0 13  	jalr	0x13a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802220e6: 83 35 04 f4  	ld	a1, -0xc0(s0)
802220ea: 03 35 84 f6  	ld	a0, -0x98(s0)
;                     Some(block_id * BLOCK_BITS + bits64_pos * 64 + inner_pos as usize)
802220ee: 2e 95        	add	a0, a0, a1
802220f0: 23 3c a4 f2  	sd	a0, -0xc8(s0)
802220f4: 63 68 b5 02  	bltu	a0, a1, 0x80222124 <.Lpcrel_hi9>
802220f8: 31 a8        	j	0x80222114 <.Lpcrel_hi8+0x12>

00000000802220fa <.Lpcrel_hi7>:
802220fa: 17 75 01 00  	auipc	a0, 0x17
802220fe: 13 05 65 da  	addi	a0, a0, -0x25a

0000000080222102 <.Lpcrel_hi8>:
80222102: 97 75 01 00  	auipc	a1, 0x17
80222106: 13 86 e5 d3  	addi	a2, a1, -0x2c2
8022210a: f1 45        	li	a1, 0x1c
8022210c: 97 e0 00 00  	auipc	ra, 0xe
80222110: e7 80 c0 10  	jalr	0x10c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80222114: 03 35 84 f3  	ld	a0, -0xc8(s0)
;                     Some(block_id * BLOCK_BITS + bits64_pos * 64 + inner_pos as usize)
80222118: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022211c: 05 45        	li	a0, 0x1
8022211e: 23 3c a4 f8  	sd	a0, -0x68(s0)
;                 if let Some((bits64_pos, inner_pos)) = bitmap_block
80222122: 31 a8        	j	0x8022213e <.Lpcrel_hi10+0x12>

0000000080222124 <.Lpcrel_hi9>:
;                     Some(block_id * BLOCK_BITS + bits64_pos * 64 + inner_pos as usize)
80222124: 17 75 01 00  	auipc	a0, 0x17
80222128: 13 05 c5 d7  	addi	a0, a0, -0x284

000000008022212c <.Lpcrel_hi10>:
8022212c: 97 75 01 00  	auipc	a1, 0x17
80222130: 13 86 45 d1  	addi	a2, a1, -0x2ec
80222134: f1 45        	li	a1, 0x1c
80222136: 97 e0 00 00  	auipc	ra, 0xe
8022213a: e7 80 20 0e  	jalr	0xe2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;             });
8022213e: 03 35 84 f9  	ld	a0, -0x68(s0)
80222142: 83 35 04 fa  	ld	a1, -0x60(s0)
80222146: ae 60        	ld	ra, 0xc8(sp)
80222148: 0e 64        	ld	s0, 0xc0(sp)
8022214a: 69 61        	addi	sp, sp, 0xd0
8022214c: 82 80        	ret

000000008022214e <_ZN7easy_fs6bitmap6Bitmap5alloc28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h27ee26d0dbe1dc0aE>:
;                     .find(|(_, bits64)| **bits64 != u64::MAX)
8022214e: 79 71        	addi	sp, sp, -0x30
80222150: 06 f4        	sd	ra, 0x28(sp)
80222152: 22 f0        	sd	s0, 0x20(sp)
80222154: 00 18        	addi	s0, sp, 0x30
80222156: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022215a: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022215e: 13 85 85 00  	addi	a0, a1, 0x8
80222162: 23 34 a4 fe  	sd	a0, -0x18(s0)
80222166: 88 65        	ld	a0, 0x8(a1)
80222168: 08 61        	ld	a0, 0x0(a0)
8022216a: 13 35 f5 ff  	sltiu	a0, a0, -0x1
8022216e: a2 70        	ld	ra, 0x28(sp)
80222170: 02 74        	ld	s0, 0x20(sp)
80222172: 45 61        	addi	sp, sp, 0x30
80222174: 82 80        	ret

0000000080222176 <_ZN7easy_fs6bitmap6Bitmap5alloc28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hfbda16e999706f24E>:
;                     .map(|(bits64_pos, bits64)| (bits64_pos, bits64.trailing_ones() as usize))
80222176: 19 71        	addi	sp, sp, -0x80
80222178: 86 fc        	sd	ra, 0x78(sp)
8022217a: a2 f8        	sd	s0, 0x70(sp)
8022217c: 00 01        	addi	s0, sp, 0x80
8022217e: 23 34 a4 f8  	sd	a0, -0x78(s0)
80222182: 23 3c a4 fa  	sd	a0, -0x48(s0)
80222186: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022218a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022218e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80222192: 88 61        	ld	a0, 0x0(a1)
80222194: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             (!self).trailing_zeros()
80222198: 93 45 f5 ff  	not	a1, a0
8022219c: 23 30 b4 fe  	sd	a1, -0x20(s0)
802221a0: 01 46        	li	a2, 0x0
;             intrinsics::cttz(self) as u32
802221a2: 0d 8e        	sub	a2, a2, a1
802221a4: f1 8d        	and	a1, a1, a2

00000000802221a6 <.Lpcrel_hi11>:
802221a6: 17 46 02 00  	auipc	a2, 0x24
802221aa: 13 06 a6 d5  	addi	a2, a2, -0x2a6
802221ae: 10 62        	ld	a2, 0x0(a2)
802221b0: b3 85 c5 02  	mul	a1, a1, a2
802221b4: 13 d6 a5 03  	srli	a2, a1, 0x3a

00000000802221b8 <.Lpcrel_hi12>:
802221b8: 97 75 01 00  	auipc	a1, 0x17
802221bc: 93 85 05 ba  	addi	a1, a1, -0x460
802221c0: b2 95        	add	a1, a1, a2
802221c2: 03 c6 05 00  	lbu	a2, 0x0(a1)
802221c6: 93 05 00 04  	li	a1, 0x40
802221ca: 23 38 b4 f8  	sd	a1, -0x70(s0)
802221ce: fd 55        	li	a1, -0x1
802221d0: 23 3c c4 f8  	sd	a2, -0x68(s0)
802221d4: 63 16 b5 00  	bne	a0, a1, 0x802221e0 <.Lpcrel_hi12+0x28>
802221d8: 03 35 04 f9  	ld	a0, -0x70(s0)
802221dc: 23 3c a4 f8  	sd	a0, -0x68(s0)
802221e0: 83 35 84 f8  	ld	a1, -0x78(s0)
802221e4: 03 35 84 f9  	ld	a0, -0x68(s0)
;             intrinsics::cttz(self) as u32
802221e8: 23 34 a4 fe  	sd	a0, -0x18(s0)
802221ec: 03 65 84 fe  	lwu	a0, -0x18(s0)
;                     .map(|(bits64_pos, bits64)| (bits64_pos, bits64.trailing_ones() as usize))
802221f0: 23 30 b4 fa  	sd	a1, -0x60(s0)
802221f4: 23 34 a4 fa  	sd	a0, -0x58(s0)
802221f8: 03 35 04 fa  	ld	a0, -0x60(s0)
802221fc: 83 35 84 fa  	ld	a1, -0x58(s0)
80222200: e6 70        	ld	ra, 0x78(sp)
80222202: 46 74        	ld	s0, 0x70(sp)
80222204: 09 61        	addi	sp, sp, 0x80
80222206: 82 80        	ret

0000000080222208 <_ZN7easy_fs6bitmap6Bitmap7dealloc28_$u7b$$u7b$closure$u7d$$u7d$17h984ae1687c339893E>:
;             .modify(0, |bitmap_block: &mut BitmapBlock| {
80222208: 59 71        	addi	sp, sp, -0x70
8022220a: 86 f4        	sd	ra, 0x68(sp)
8022220c: a2 f0        	sd	s0, 0x60(sp)
8022220e: 80 18        	addi	s0, sp, 0x70
80222210: 23 34 c4 fc  	sd	a2, -0x38(s0)
80222214: 23 3c a4 fc  	sd	a0, -0x28(s0)
80222218: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022221c: 23 34 c4 fe  	sd	a2, -0x18(s0)
;                 assert!(bitmap_block[bits64_pos] & (1u64 << inner_pos) > 0);
80222220: 03 35 84 fd  	ld	a0, -0x28(s0)
80222224: 0c 61        	ld	a1, 0x0(a0)
80222226: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022222a: 13 05 f0 03  	li	a0, 0x3f
8022222e: 63 66 b5 02  	bltu	a0, a1, 0x8022225a <_ZN7easy_fs6bitmap6Bitmap7dealloc28_$u7b$$u7b$closure$u7d$$u7d$17h984ae1687c339893E+0x52>
80222232: 09 a0        	j	0x80222234 <_ZN7easy_fs6bitmap6Bitmap7dealloc28_$u7b$$u7b$closure$u7d$$u7d$17h984ae1687c339893E+0x2c>
80222234: 03 35 84 fc  	ld	a0, -0x38(s0)
80222238: 83 35 04 fd  	ld	a1, -0x30(s0)
;                 assert!(bitmap_block[bits64_pos] & (1u64 << inner_pos) > 0);
8022223c: 8e 05        	slli	a1, a1, 0x3
8022223e: 2e 95        	add	a0, a0, a1
80222240: 08 61        	ld	a0, 0x0(a0)
80222242: 23 3c a4 fa  	sd	a0, -0x48(s0)
80222246: 03 35 04 fe  	ld	a0, -0x20(s0)
8022224a: 08 61        	ld	a0, 0x0(a0)
8022224c: 23 30 a4 fc  	sd	a0, -0x40(s0)
80222250: 93 05 00 04  	li	a1, 0x40
80222254: 63 6f b5 00  	bltu	a0, a1, 0x80222272 <.Lpcrel_hi13+0x14>
80222258: 35 a0        	j	0x80222284 <.Lpcrel_hi14>
8022225a: 03 35 04 fd  	ld	a0, -0x30(s0)

000000008022225e <.Lpcrel_hi13>:
;                 assert!(bitmap_block[bits64_pos] & (1u64 << inner_pos) > 0);
8022225e: 97 75 01 00  	auipc	a1, 0x17
80222262: 13 86 25 c6  	addi	a2, a1, -0x39e
80222266: 93 05 00 04  	li	a1, 0x40
8022226a: 97 e0 00 00  	auipc	ra, 0xe
8022226e: e7 80 60 04  	jalr	0x46(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
80222272: 03 35 84 fb  	ld	a0, -0x48(s0)
80222276: 83 35 04 fc  	ld	a1, -0x40(s0)
;                 assert!(bitmap_block[bits64_pos] & (1u64 << inner_pos) > 0);
8022227a: 33 55 b5 00  	srl	a0, a0, a1
8022227e: 05 89        	andi	a0, a0, 0x1
80222280: 15 ed        	bnez	a0, 0x802222bc <.Lpcrel_hi17+0x14>
80222282: 39 a8        	j	0x802222a0 <.Lpcrel_hi16>

0000000080222284 <.Lpcrel_hi14>:
80222284: 17 75 01 00  	auipc	a0, 0x17
80222288: 13 05 c5 b7  	addi	a0, a0, -0x484

000000008022228c <.Lpcrel_hi15>:
8022228c: 97 75 01 00  	auipc	a1, 0x17
80222290: 13 86 c5 c4  	addi	a2, a1, -0x3b4
80222294: 93 05 30 02  	li	a1, 0x23
80222298: 97 e0 00 00  	auipc	ra, 0xe
8022229c: e7 80 00 f8  	jalr	-0x80(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802222a0 <.Lpcrel_hi16>:
802222a0: 17 75 01 00  	auipc	a0, 0x17
802222a4: 13 05 05 c5  	addi	a0, a0, -0x3b0

00000000802222a8 <.Lpcrel_hi17>:
802222a8: 97 75 01 00  	auipc	a1, 0x17
802222ac: 13 86 05 c9  	addi	a2, a1, -0x370
802222b0: 93 05 40 04  	li	a1, 0x44
802222b4: 97 e0 00 00  	auipc	ra, 0xe
802222b8: e7 80 40 f6  	jalr	-0x9c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;                 bitmap_block[bits64_pos] -= 1u64 << inner_pos;
802222bc: 03 35 04 fe  	ld	a0, -0x20(s0)
802222c0: 0c 61        	ld	a1, 0x0(a0)
802222c2: 23 38 b4 fa  	sd	a1, -0x50(s0)
802222c6: 13 05 f0 03  	li	a0, 0x3f
802222ca: 63 64 b5 02  	bltu	a0, a1, 0x802222f2 <.Lpcrel_hi18>
802222ce: 09 a0        	j	0x802222d0 <.Lpcrel_hi17+0x28>
802222d0: 83 35 04 fb  	ld	a1, -0x50(s0)
802222d4: 05 45        	li	a0, 0x1
;                 bitmap_block[bits64_pos] -= 1u64 << inner_pos;
802222d6: 33 15 b5 00  	sll	a0, a0, a1
802222da: 23 30 a4 fa  	sd	a0, -0x60(s0)
802222de: 03 35 84 fd  	ld	a0, -0x28(s0)
802222e2: 08 61        	ld	a0, 0x0(a0)
802222e4: 23 34 a4 fa  	sd	a0, -0x58(s0)
802222e8: 93 05 00 04  	li	a1, 0x40
802222ec: 63 61 b5 02  	bltu	a0, a1, 0x8022230e <.Lpcrel_hi19+0x14>
802222f0: 3d a8        	j	0x8022232e <.Lpcrel_hi19+0x34>

00000000802222f2 <.Lpcrel_hi18>:
802222f2: 17 75 01 00  	auipc	a0, 0x17
802222f6: 13 05 e5 b0  	addi	a0, a0, -0x4f2

00000000802222fa <.Lpcrel_hi19>:
802222fa: 97 75 01 00  	auipc	a1, 0x17
802222fe: 13 86 65 c5  	addi	a2, a1, -0x3aa
80222302: 93 05 30 02  	li	a1, 0x23
80222306: 97 e0 00 00  	auipc	ra, 0xe
8022230a: e7 80 20 f1  	jalr	-0xee(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022230e: 83 35 04 fa  	ld	a1, -0x60(s0)
80222312: 03 35 84 fc  	ld	a0, -0x38(s0)
80222316: 03 36 84 fa  	ld	a2, -0x58(s0)
;                 bitmap_block[bits64_pos] -= 1u64 << inner_pos;
8022231a: 0e 06        	slli	a2, a2, 0x3
8022231c: 32 95        	add	a0, a0, a2
8022231e: 08 61        	ld	a0, 0x0(a0)
80222320: 33 06 b5 40  	sub	a2, a0, a1
80222324: 23 3c c4 f8  	sd	a2, -0x68(s0)
80222328: 63 6c b5 02  	bltu	a0, a1, 0x80222360 <.Lpcrel_hi21>
8022232c: 29 a8        	j	0x80222346 <.Lpcrel_hi20+0x14>
8022232e: 03 35 84 fa  	ld	a0, -0x58(s0)

0000000080222332 <.Lpcrel_hi20>:
;                 bitmap_block[bits64_pos] -= 1u64 << inner_pos;
80222332: 97 75 01 00  	auipc	a1, 0x17
80222336: 13 86 65 c3  	addi	a2, a1, -0x3ca
8022233a: 93 05 00 04  	li	a1, 0x40
8022233e: 97 e0 00 00  	auipc	ra, 0xe
80222342: e7 80 20 f7  	jalr	-0x8e(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
80222346: 03 35 84 f9  	ld	a0, -0x68(s0)
8022234a: 83 35 84 fc  	ld	a1, -0x38(s0)
8022234e: 03 36 84 fa  	ld	a2, -0x58(s0)
;                 bitmap_block[bits64_pos] -= 1u64 << inner_pos;
80222352: 0e 06        	slli	a2, a2, 0x3
80222354: b2 95        	add	a1, a1, a2
80222356: 88 e1        	sd	a0, 0x0(a1)
80222358: a6 70        	ld	ra, 0x68(sp)
8022235a: 06 74        	ld	s0, 0x60(sp)
;             });
8022235c: 65 61        	addi	sp, sp, 0x70
8022235e: 82 80        	ret

0000000080222360 <.Lpcrel_hi21>:
;                 bitmap_block[bits64_pos] -= 1u64 << inner_pos;
80222360: 17 75 01 00  	auipc	a0, 0x17
80222364: 13 05 05 c2  	addi	a0, a0, -0x3e0

0000000080222368 <.Lpcrel_hi22>:
80222368: 97 75 01 00  	auipc	a1, 0x17
8022236c: 13 86 05 c0  	addi	a2, a1, -0x400
80222370: 93 05 10 02  	li	a1, 0x21
80222374: 97 e0 00 00  	auipc	ra, 0xe
80222378: e7 80 40 ea  	jalr	-0x15c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022237c <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h3a3ce0be0e718fc5E>:
;     fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R
8022237c: 79 71        	addi	sp, sp, -0x30
8022237e: 06 f4        	sd	ra, 0x28(sp)
80222380: 22 f0        	sd	s0, 0x20(sp)
80222382: 00 18        	addi	s0, sp, 0x30
80222384: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.iter.try_fold(init, enumerate(&mut self.count, fold))
80222388: 93 05 05 01  	addi	a1, a0, 0x10
8022238c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             move |acc, item| {
80222390: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.iter.try_fold(init, enumerate(&mut self.count, fold))
80222394: 83 35 04 fd  	ld	a1, -0x30(s0)
80222398: 97 60 00 00  	auipc	ra, 0x6
8022239c: e7 80 80 3d  	jalr	0x3d8(ra) <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E>
802223a0: a2 70        	ld	ra, 0x28(sp)
802223a2: 02 74        	ld	s0, 0x20(sp)
;     }
802223a4: 45 61        	addi	sp, sp, 0x30
802223a6: 82 80        	ret

00000000802223a8 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17hc4da19314632e5b1E>:
;     fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R
802223a8: 79 71        	addi	sp, sp, -0x30
802223aa: 06 f4        	sd	ra, 0x28(sp)
802223ac: 22 f0        	sd	s0, 0x20(sp)
802223ae: 00 18        	addi	s0, sp, 0x30
802223b0: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.iter.try_fold(init, enumerate(&mut self.count, fold))
802223b4: 93 05 05 02  	addi	a1, a0, 0x20
802223b8: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             move |acc, item| {
802223bc: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.iter.try_fold(init, enumerate(&mut self.count, fold))
802223c0: 83 35 04 fd  	ld	a1, -0x30(s0)
802223c4: 97 60 00 00  	auipc	ra, 0x6
802223c8: e7 80 c0 08  	jalr	0x8c(ra) <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h7e1f66ce3c992d2aE>
802223cc: a2 70        	ld	ra, 0x28(sp)
802223ce: 02 74        	ld	s0, 0x20(sp)
;     }
802223d0: 45 61        	addi	sp, sp, 0x30
802223d2: 82 80        	ret

00000000802223d4 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17h04a24432ac1914feE>:
;             move |acc, item| {
802223d4: 19 71        	addi	sp, sp, -0x80
802223d6: 86 fc        	sd	ra, 0x78(sp)
802223d8: a2 f8        	sd	s0, 0x70(sp)
802223da: 00 01        	addi	s0, sp, 0x80
802223dc: 2a 86        	mv	a2, a0
802223de: 23 34 c4 f8  	sd	a2, -0x78(s0)
802223e2: 23 34 c4 fc  	sd	a2, -0x38(s0)
802223e6: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 let acc = fold(acc, (*count, item));
802223ea: 13 05 86 00  	addi	a0, a2, 0x8
802223ee: 10 62        	ld	a2, 0x0(a2)
802223f0: 10 62        	ld	a2, 0x0(a2)
802223f2: 23 3c c4 fa  	sd	a2, -0x48(s0)
802223f6: 23 30 b4 fc  	sd	a1, -0x40(s0)
802223fa: 03 36 84 fb  	ld	a2, -0x48(s0)
802223fe: 83 35 04 fc  	ld	a1, -0x40(s0)
80222402: 23 34 c4 fa  	sd	a2, -0x58(s0)
80222406: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022240a: 83 35 84 fa  	ld	a1, -0x58(s0)
8022240e: 03 36 04 fb  	ld	a2, -0x50(s0)
80222412: 97 d0 ff ff  	auipc	ra, 0xffffd
80222416: e7 80 60 62  	jalr	0x626(ra) <ekernel+0xffcd2a38>
8022241a: 2a 86        	mv	a2, a0
8022241c: 03 35 84 f8  	ld	a0, -0x78(s0)
80222420: b2 86        	mv	a3, a2
80222422: 23 38 d4 f8  	sd	a3, -0x70(s0)
80222426: ae 86        	mv	a3, a1
80222428: 23 3c d4 f8  	sd	a3, -0x68(s0)
8022242c: 23 30 c4 fe  	sd	a2, -0x20(s0)
80222430: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 *count += 1;
80222434: 08 61        	ld	a0, 0x0(a0)
80222436: 08 61        	ld	a0, 0x0(a0)
80222438: 05 05        	addi	a0, a0, 0x1
8022243a: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022243e: 05 c1        	beqz	a0, 0x8022245e <.Lpcrel_hi0>
80222440: 09 a0        	j	0x80222442 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17h04a24432ac1914feE+0x6e>
80222442: 83 35 84 f9  	ld	a1, -0x68(s0)
80222446: 03 35 04 f9  	ld	a0, -0x70(s0)
8022244a: 03 36 04 fa  	ld	a2, -0x60(s0)
8022244e: 83 36 84 f8  	ld	a3, -0x78(s0)
;                 *count += 1;
80222452: 94 62        	ld	a3, 0x0(a3)
80222454: 90 e2        	sd	a2, 0x0(a3)
80222456: e6 70        	ld	ra, 0x78(sp)
80222458: 46 74        	ld	s0, 0x70(sp)
;             }
8022245a: 09 61        	addi	sp, sp, 0x80
8022245c: 82 80        	ret

000000008022245e <.Lpcrel_hi0>:
;                 *count += 1;
8022245e: 17 75 01 00  	auipc	a0, 0x17
80222462: 13 05 25 be  	addi	a0, a0, -0x41e

0000000080222466 <.Lpcrel_hi1>:
80222466: 97 75 01 00  	auipc	a1, 0x17
8022246a: 13 86 25 bc  	addi	a2, a1, -0x43e
8022246e: f1 45        	li	a1, 0x1c
80222470: 97 e0 00 00  	auipc	ra, 0xe
80222474: e7 80 80 da  	jalr	-0x258(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080222478 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hf92cdbb67e08110fE>:
;             move |acc, item| {
80222478: 19 71        	addi	sp, sp, -0x80
8022247a: 86 fc        	sd	ra, 0x78(sp)
8022247c: a2 f8        	sd	s0, 0x70(sp)
8022247e: 00 01        	addi	s0, sp, 0x80
80222480: 2a 86        	mv	a2, a0
80222482: 23 34 c4 f8  	sd	a2, -0x78(s0)
80222486: 23 34 c4 fc  	sd	a2, -0x38(s0)
8022248a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 let acc = fold(acc, (*count, item));
8022248e: 13 05 86 00  	addi	a0, a2, 0x8
80222492: 10 62        	ld	a2, 0x0(a2)
80222494: 10 62        	ld	a2, 0x0(a2)
80222496: 23 3c c4 fa  	sd	a2, -0x48(s0)
8022249a: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022249e: 03 36 84 fb  	ld	a2, -0x48(s0)
802224a2: 83 35 04 fc  	ld	a1, -0x40(s0)
802224a6: 23 34 c4 fa  	sd	a2, -0x58(s0)
802224aa: 23 38 b4 fa  	sd	a1, -0x50(s0)
802224ae: 83 35 84 fa  	ld	a1, -0x58(s0)
802224b2: 03 36 04 fb  	ld	a2, -0x50(s0)
802224b6: 97 d0 ff ff  	auipc	ra, 0xffffd
802224ba: e7 80 e0 61  	jalr	0x61e(ra) <ekernel+0xffcd2ad4>
802224be: 2a 86        	mv	a2, a0
802224c0: 03 35 84 f8  	ld	a0, -0x78(s0)
802224c4: b2 86        	mv	a3, a2
802224c6: 23 38 d4 f8  	sd	a3, -0x70(s0)
802224ca: ae 86        	mv	a3, a1
802224cc: 23 3c d4 f8  	sd	a3, -0x68(s0)
802224d0: 23 30 c4 fe  	sd	a2, -0x20(s0)
802224d4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 *count += 1;
802224d8: 08 61        	ld	a0, 0x0(a0)
802224da: 08 61        	ld	a0, 0x0(a0)
802224dc: 05 05        	addi	a0, a0, 0x1
802224de: 23 30 a4 fa  	sd	a0, -0x60(s0)
802224e2: 05 c1        	beqz	a0, 0x80222502 <.Lpcrel_hi2>
802224e4: 09 a0        	j	0x802224e6 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hf92cdbb67e08110fE+0x6e>
802224e6: 83 35 84 f9  	ld	a1, -0x68(s0)
802224ea: 03 35 04 f9  	ld	a0, -0x70(s0)
802224ee: 03 36 04 fa  	ld	a2, -0x60(s0)
802224f2: 83 36 84 f8  	ld	a3, -0x78(s0)
;                 *count += 1;
802224f6: 94 62        	ld	a3, 0x0(a3)
802224f8: 90 e2        	sd	a2, 0x0(a3)
802224fa: e6 70        	ld	ra, 0x78(sp)
802224fc: 46 74        	ld	s0, 0x70(sp)
;             }
802224fe: 09 61        	addi	sp, sp, 0x80
80222500: 82 80        	ret

0000000080222502 <.Lpcrel_hi2>:
;                 *count += 1;
80222502: 17 75 01 00  	auipc	a0, 0x17
80222506: 13 05 e5 b3  	addi	a0, a0, -0x4c2

000000008022250a <.Lpcrel_hi3>:
8022250a: 97 75 01 00  	auipc	a1, 0x17
8022250e: 13 86 e5 b1  	addi	a2, a1, -0x4e2
80222512: f1 45        	li	a1, 0x1c
80222514: 97 e0 00 00  	auipc	ra, 0xe
80222518: e7 80 40 d0  	jalr	-0x2fc(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022251c <_ZN4core3ops8function5impls79_$LT$impl$u20$core..ops..function..FnMut$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$8call_mut17h82b85fe92733c8c1E>:
;         extern "rust-call" fn call_mut(&mut self, args: A) -> F::Output {
8022251c: 01 11        	addi	sp, sp, -0x20
8022251e: 06 ec        	sd	ra, 0x18(sp)
80222520: 22 e8        	sd	s0, 0x10(sp)
80222522: 00 10        	addi	s0, sp, 0x20
80222524: 23 30 b4 fe  	sd	a1, -0x20(s0)
80222528: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             (*self).call_mut(args)
8022252c: 08 61        	ld	a0, 0x0(a0)
8022252e: 83 35 04 fe  	ld	a1, -0x20(s0)
80222532: 97 00 00 00  	auipc	ra, 0x0
80222536: e7 80 60 f4  	jalr	-0xba(ra) <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hf92cdbb67e08110fE>
8022253a: e2 60        	ld	ra, 0x18(sp)
8022253c: 42 64        	ld	s0, 0x10(sp)
;         }
8022253e: 05 61        	addi	sp, sp, 0x20
80222540: 82 80        	ret

0000000080222542 <_ZN4core4iter6traits8iterator8Iterator4find17h8812a842edb2f4f6E>:
;     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
80222542: 5d 71        	addi	sp, sp, -0x50
80222544: 86 e4        	sd	ra, 0x48(sp)
80222546: a2 e0        	sd	s0, 0x40(sp)
80222548: 80 08        	addi	s0, sp, 0x50
8022254a: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.try_fold((), check(predicate)).break_value()
8022254e: 97 00 00 00  	auipc	ra, 0x0
80222552: e7 80 e0 e2  	jalr	-0x1d2(ra) <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h3a3ce0be0e718fc5E>
80222556: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022255a: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match self {
8022255e: 03 35 84 fc  	ld	a0, -0x38(s0)
80222562: 11 e5        	bnez	a0, 0x8022256e <_ZN4core4iter6traits8iterator8Iterator4find17h8812a842edb2f4f6E+0x2c>
80222564: 09 a0        	j	0x80222566 <_ZN4core4iter6traits8iterator8Iterator4find17h8812a842edb2f4f6E+0x24>
80222566: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(..) => None,
80222568: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022256c: 31 a8        	j	0x80222588 <_ZN4core4iter6traits8iterator8Iterator4find17h8812a842edb2f4f6E+0x46>
;             ControlFlow::Break(x) => Some(x),
8022256e: 83 35 04 fc  	ld	a1, -0x40(s0)
80222572: 03 35 84 fc  	ld	a0, -0x38(s0)
80222576: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022257a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022257e: 23 38 b4 fa  	sd	a1, -0x50(s0)
80222582: 23 3c a4 fa  	sd	a0, -0x48(s0)
80222586: 09 a0        	j	0x80222588 <_ZN4core4iter6traits8iterator8Iterator4find17h8812a842edb2f4f6E+0x46>
;     }
80222588: 03 35 84 fc  	ld	a0, -0x38(s0)
8022258c: 11 c9        	beqz	a0, 0x802225a0 <_ZN4core4iter6traits8iterator8Iterator4find17h8812a842edb2f4f6E+0x5e>
8022258e: 09 a0        	j	0x80222590 <_ZN4core4iter6traits8iterator8Iterator4find17h8812a842edb2f4f6E+0x4e>
;     }
80222590: 03 35 04 fb  	ld	a0, -0x50(s0)
80222594: 83 35 84 fb  	ld	a1, -0x48(s0)
80222598: a6 60        	ld	ra, 0x48(sp)
8022259a: 06 64        	ld	s0, 0x40(sp)
8022259c: 61 61        	addi	sp, sp, 0x50
8022259e: 82 80        	ret
;     }
802225a0: c5 bf        	j	0x80222590 <_ZN4core4iter6traits8iterator8Iterator4find17h8812a842edb2f4f6E+0x4e>

00000000802225a2 <_ZN4core4iter6traits8iterator8Iterator4find17ha945afbe82090793E>:
;     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
802225a2: 5d 71        	addi	sp, sp, -0x50
802225a4: 86 e4        	sd	ra, 0x48(sp)
802225a6: a2 e0        	sd	s0, 0x40(sp)
802225a8: 80 08        	addi	s0, sp, 0x50
802225aa: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.try_fold((), check(predicate)).break_value()
802225ae: 97 00 00 00  	auipc	ra, 0x0
802225b2: e7 80 a0 df  	jalr	-0x206(ra) <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17hc4da19314632e5b1E>
802225b6: 23 30 a4 fc  	sd	a0, -0x40(s0)
802225ba: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match self {
802225be: 03 35 84 fc  	ld	a0, -0x38(s0)
802225c2: 11 e5        	bnez	a0, 0x802225ce <_ZN4core4iter6traits8iterator8Iterator4find17ha945afbe82090793E+0x2c>
802225c4: 09 a0        	j	0x802225c6 <_ZN4core4iter6traits8iterator8Iterator4find17ha945afbe82090793E+0x24>
802225c6: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(..) => None,
802225c8: 23 3c a4 fa  	sd	a0, -0x48(s0)
802225cc: 31 a8        	j	0x802225e8 <_ZN4core4iter6traits8iterator8Iterator4find17ha945afbe82090793E+0x46>
;             ControlFlow::Break(x) => Some(x),
802225ce: 83 35 04 fc  	ld	a1, -0x40(s0)
802225d2: 03 35 84 fc  	ld	a0, -0x38(s0)
802225d6: 23 30 b4 fe  	sd	a1, -0x20(s0)
802225da: 23 34 a4 fe  	sd	a0, -0x18(s0)
802225de: 23 38 b4 fa  	sd	a1, -0x50(s0)
802225e2: 23 3c a4 fa  	sd	a0, -0x48(s0)
802225e6: 09 a0        	j	0x802225e8 <_ZN4core4iter6traits8iterator8Iterator4find17ha945afbe82090793E+0x46>
;     }
802225e8: 03 35 84 fc  	ld	a0, -0x38(s0)
802225ec: 11 c9        	beqz	a0, 0x80222600 <_ZN4core4iter6traits8iterator8Iterator4find17ha945afbe82090793E+0x5e>
802225ee: 09 a0        	j	0x802225f0 <_ZN4core4iter6traits8iterator8Iterator4find17ha945afbe82090793E+0x4e>
;     }
802225f0: 03 35 04 fb  	ld	a0, -0x50(s0)
802225f4: 83 35 84 fb  	ld	a1, -0x48(s0)
802225f8: a6 60        	ld	ra, 0x48(sp)
802225fa: 06 64        	ld	s0, 0x40(sp)
802225fc: 61 61        	addi	sp, sp, 0x50
802225fe: 82 80        	ret
;     }
80222600: c5 bf        	j	0x802225f0 <_ZN4core4iter6traits8iterator8Iterator4find17ha945afbe82090793E+0x4e>

0000000080222602 <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17ha5226c97bcf9263eE>:
;     fn deref(&self) -> &T {
80222602: 01 11        	addi	sp, sp, -0x20
80222604: 06 ec        	sd	ra, 0x18(sp)
80222606: 22 e8        	sd	s0, 0x10(sp)
80222608: 00 10        	addi	s0, sp, 0x20
8022260a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &*self.inner
8022260e: 97 60 00 00  	auipc	ra, 0x6
80222612: e7 80 e0 d6  	jalr	-0x292(ra) <_ZN90_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf0d1084dacc54ba3E>
80222616: e2 60        	ld	ra, 0x18(sp)
80222618: 42 64        	ld	s0, 0x10(sp)
;     }
8022261a: 05 61        	addi	sp, sp, 0x20
8022261c: 82 80        	ret

000000008022261e <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc9578c5254294c75E>:
;     fn deref(&self) -> &T {
8022261e: 01 11        	addi	sp, sp, -0x20
80222620: 06 ec        	sd	ra, 0x18(sp)
80222622: 22 e8        	sd	s0, 0x10(sp)
80222624: 00 10        	addi	s0, sp, 0x20
80222626: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &*self.inner
8022262a: 97 60 00 00  	auipc	ra, 0x6
8022262e: e7 80 60 d2  	jalr	-0x2da(ra) <_ZN90_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h67dee9206827e00eE>
80222632: e2 60        	ld	ra, 0x18(sp)
80222634: 42 64        	ld	s0, 0x10(sp)
;     }
80222636: 05 61        	addi	sp, sp, 0x20
80222638: 82 80        	ret

000000008022263a <_ZN76_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd7e976801336d70aE>:
;     fn deref(&self) -> &T {
8022263a: 01 11        	addi	sp, sp, -0x20
8022263c: 06 ec        	sd	ra, 0x18(sp)
8022263e: 22 e8        	sd	s0, 0x10(sp)
80222640: 00 10        	addi	s0, sp, 0x20
80222642: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &*self.inner
80222646: 97 60 00 00  	auipc	ra, 0x6
8022264a: e7 80 00 d2  	jalr	-0x2e0(ra) <_ZN90_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h96440d76b5448ae9E>
8022264e: e2 60        	ld	ra, 0x18(sp)
80222650: 42 64        	ld	s0, 0x10(sp)
;     }
80222652: 05 61        	addi	sp, sp, 0x20
80222654: 82 80        	ret

0000000080222656 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h27ef72a6edfe795fE>:
;     fn deref_mut(&mut self) -> &mut T {
80222656: 01 11        	addi	sp, sp, -0x20
80222658: 06 ec        	sd	ra, 0x18(sp)
8022265a: 22 e8        	sd	s0, 0x10(sp)
8022265c: 00 10        	addi	s0, sp, 0x20
8022265e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &mut *self.inner
80222662: 97 60 00 00  	auipc	ra, 0x6
80222666: e7 80 c0 d5  	jalr	-0x2a4(ra) <_ZN93_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h9b038b059181c1b6E>
8022266a: e2 60        	ld	ra, 0x18(sp)
8022266c: 42 64        	ld	s0, 0x10(sp)
;     }
8022266e: 05 61        	addi	sp, sp, 0x20
80222670: 82 80        	ret

0000000080222672 <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4414d35563f79ba7E>:
;     fn deref_mut(&mut self) -> &mut T {
80222672: 01 11        	addi	sp, sp, -0x20
80222674: 06 ec        	sd	ra, 0x18(sp)
80222676: 22 e8        	sd	s0, 0x10(sp)
80222678: 00 10        	addi	s0, sp, 0x20
8022267a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &mut *self.inner
8022267e: 97 60 00 00  	auipc	ra, 0x6
80222682: e7 80 a0 d2  	jalr	-0x2d6(ra) <_ZN93_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4c9baa5c1828acfcE>
80222686: e2 60        	ld	ra, 0x18(sp)
80222688: 42 64        	ld	s0, 0x10(sp)
;     }
8022268a: 05 61        	addi	sp, sp, 0x20
8022268c: 82 80        	ret

000000008022268e <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h98fbe6e6313825f8E>:
;     fn deref_mut(&mut self) -> &mut T {
8022268e: 01 11        	addi	sp, sp, -0x20
80222690: 06 ec        	sd	ra, 0x18(sp)
80222692: 22 e8        	sd	s0, 0x10(sp)
80222694: 00 10        	addi	s0, sp, 0x20
80222696: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &mut *self.inner
8022269a: 97 60 00 00  	auipc	ra, 0x6
8022269e: e7 80 80 cf  	jalr	-0x308(ra) <_ZN93_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h34607aa98925ec95E>
802226a2: e2 60        	ld	ra, 0x18(sp)
802226a4: 42 64        	ld	s0, 0x10(sp)
;     }
802226a6: 05 61        	addi	sp, sp, 0x20
802226a8: 82 80        	ret

00000000802226aa <_ZN5alloc3vec12Vec$LT$T$GT$3new17h85367f9245e30921E>:
;     pub const fn new() -> Self {
802226aa: 41 11        	addi	sp, sp, -0x10
802226ac: 06 e4        	sd	ra, 0x8(sp)
802226ae: 22 e0        	sd	s0, 0x0(sp)
802226b0: 00 08        	addi	s0, sp, 0x10
802226b2: aa 85        	mv	a1, a0
802226b4: 01 45        	li	a0, 0x0
;         Vec { buf: RawVec::NEW, len: 0 }
802226b6: 88 e1        	sd	a0, 0x0(a1)
802226b8: 11 46        	li	a2, 0x4
802226ba: 90 e5        	sd	a2, 0x8(a1)
802226bc: 88 e9        	sd	a0, 0x10(a1)
802226be: a2 60        	ld	ra, 0x8(sp)
802226c0: 02 64        	ld	s0, 0x0(sp)
;     }
802226c2: 41 01        	addi	sp, sp, 0x10
802226c4: 82 80        	ret

00000000802226c6 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h9bd494bd89c735a6E>:
;     pub const fn new() -> Self {
802226c6: 41 11        	addi	sp, sp, -0x10
802226c8: 06 e4        	sd	ra, 0x8(sp)
802226ca: 22 e0        	sd	s0, 0x0(sp)
802226cc: 00 08        	addi	s0, sp, 0x10
802226ce: aa 85        	mv	a1, a0
802226d0: 01 45        	li	a0, 0x0
;         Vec { buf: RawVec::NEW, len: 0 }
802226d2: 88 e1        	sd	a0, 0x0(a1)
802226d4: 21 46        	li	a2, 0x8
802226d6: 90 e5        	sd	a2, 0x8(a1)
802226d8: 88 e9        	sd	a0, 0x10(a1)
802226da: a2 60        	ld	ra, 0x8(sp)
802226dc: 02 64        	ld	s0, 0x0(sp)
;     }
802226de: 41 01        	addi	sp, sp, 0x10
802226e0: 82 80        	ret

00000000802226e2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h73b0358345d33c05E>:
;     pub fn len(&self) -> usize {
802226e2: 01 11        	addi	sp, sp, -0x20
802226e4: 06 ec        	sd	ra, 0x18(sp)
802226e6: 22 e8        	sd	s0, 0x10(sp)
802226e8: 00 10        	addi	s0, sp, 0x20
802226ea: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.len
802226ee: 08 69        	ld	a0, 0x10(a0)
802226f0: e2 60        	ld	ra, 0x18(sp)
802226f2: 42 64        	ld	s0, 0x10(sp)
;     }
802226f4: 05 61        	addi	sp, sp, 0x20
802226f6: 82 80        	ret

00000000802226f8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3975dd51a72ed048E>:
;     pub fn push(&mut self, value: T) {
802226f8: 59 71        	addi	sp, sp, -0x70
802226fa: 86 f4        	sd	ra, 0x68(sp)
802226fc: a2 f0        	sd	s0, 0x60(sp)
802226fe: 80 18        	addi	s0, sp, 0x70
80222700: 23 3c b4 f8  	sd	a1, -0x68(s0)
80222704: 23 30 a4 fa  	sd	a0, -0x60(s0)
80222708: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         if self.len == self.buf.capacity() {
8022270c: 0c 69        	ld	a1, 0x10(a0)
8022270e: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         if self.len == self.buf.capacity() {
80222712: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80222716: 09 a0        	j	0x80222718 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3975dd51a72ed048E+0x20>
80222718: 03 35 04 fa  	ld	a0, -0x60(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8022271c: 08 61        	ld	a0, 0x0(a0)
8022271e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80222722: 09 a0        	j	0x80222724 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3975dd51a72ed048E+0x2c>
80222724: 03 35 84 fa  	ld	a0, -0x58(s0)
;         if self.len == self.buf.capacity() {
80222728: 83 35 04 fb  	ld	a1, -0x50(s0)
8022272c: 63 04 b5 00  	beq	a0, a1, 0x80222734 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3975dd51a72ed048E+0x3c>
80222730: 09 a0        	j	0x80222732 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3975dd51a72ed048E+0x3a>
80222732: 09 a8        	j	0x80222744 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3975dd51a72ed048E+0x4c>
80222734: 03 35 04 fa  	ld	a0, -0x60(s0)
;             self.buf.reserve_for_push(self.len);
80222738: 0c 69        	ld	a1, 0x10(a0)
8022273a: 97 80 00 00  	auipc	ra, 0x8
8022273e: e7 80 20 dd  	jalr	-0x22e(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h1d49a039a2eb9562E>
;         if self.len == self.buf.capacity() {
80222742: 09 a0        	j	0x80222744 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h3975dd51a72ed048E+0x4c>
80222744: 83 35 04 fa  	ld	a1, -0x60(s0)
80222748: 03 35 84 f9  	ld	a0, -0x68(s0)
;         self.buf.ptr()
8022274c: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.ptr.as_ptr()
80222750: 90 65        	ld	a2, 0x8(a1)
80222752: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         self.pointer as *mut T
80222756: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             let end = self.as_mut_ptr().add(self.len);
8022275a: 94 69        	ld	a3, 0x10(a1)
8022275c: 23 30 d4 fe  	sd	a3, -0x20(s0)
80222760: 61 47        	li	a4, 0x18
;         unsafe { intrinsics::offset(self, count) }
80222762: b3 86 e6 02  	mul	a3, a3, a4
80222766: 36 96        	add	a2, a2, a3
80222768: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
8022276c: 14 69        	ld	a3, 0x10(a0)
8022276e: 14 ea        	sd	a3, 0x10(a2)
80222770: 14 65        	ld	a3, 0x8(a0)
80222772: 14 e6        	sd	a3, 0x8(a2)
80222774: 08 61        	ld	a0, 0x0(a0)
80222776: 08 e2        	sd	a0, 0x0(a2)
;             self.len += 1;
80222778: 88 69        	ld	a0, 0x10(a1)
8022277a: 05 05        	addi	a0, a0, 0x1
8022277c: 88 e9        	sd	a0, 0x10(a1)
8022277e: a6 70        	ld	ra, 0x68(sp)
80222780: 06 74        	ld	s0, 0x60(sp)
;     }
80222782: 65 61        	addi	sp, sp, 0x70
80222784: 82 80        	ret

0000000080222786 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E>:
;     pub fn push(&mut self, value: T) {
80222786: 59 71        	addi	sp, sp, -0x70
80222788: 86 f4        	sd	ra, 0x68(sp)
8022278a: a2 f0        	sd	s0, 0x60(sp)
8022278c: 80 18        	addi	s0, sp, 0x70
8022278e: 23 38 a4 f8  	sd	a0, -0x70(s0)
80222792: 2e 86        	mv	a2, a1
80222794: 23 3c c4 f8  	sd	a2, -0x68(s0)
80222798: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022279c: 23 2e b4 fa  	sw	a1, -0x44(s0)
;         if self.len == self.buf.capacity() {
802227a0: 0c 69        	ld	a1, 0x10(a0)
802227a2: 23 30 b4 fa  	sd	a1, -0x60(s0)
802227a6: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802227aa: 09 a0        	j	0x802227ac <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E+0x26>
802227ac: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802227b0: 08 61        	ld	a0, 0x0(a0)
802227b2: 23 34 a4 fa  	sd	a0, -0x58(s0)
802227b6: 09 a0        	j	0x802227b8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E+0x32>
802227b8: 03 35 04 fa  	ld	a0, -0x60(s0)
;         if self.len == self.buf.capacity() {
802227bc: 83 35 84 fa  	ld	a1, -0x58(s0)
802227c0: 63 04 b5 00  	beq	a0, a1, 0x802227c8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E+0x42>
802227c4: 09 a0        	j	0x802227c6 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E+0x40>
802227c6: 09 a8        	j	0x802227d8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E+0x52>
802227c8: 03 35 04 f9  	ld	a0, -0x70(s0)
;             self.buf.reserve_for_push(self.len);
802227cc: 0c 69        	ld	a1, 0x10(a0)
802227ce: 97 80 00 00  	auipc	ra, 0x8
802227d2: e7 80 20 d9  	jalr	-0x26e(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h43cae29ebd01b5e3E>
;         if self.len == self.buf.capacity() {
802227d6: 09 a0        	j	0x802227d8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb8b3e945d487fbb9E+0x52>
802227d8: 83 35 04 f9  	ld	a1, -0x70(s0)
802227dc: 03 35 84 f9  	ld	a0, -0x68(s0)
;         self.buf.ptr()
802227e0: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.ptr.as_ptr()
802227e4: 90 65        	ld	a2, 0x8(a1)
802227e6: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         self.pointer as *mut T
802227ea: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             let end = self.as_mut_ptr().add(self.len);
802227ee: 94 69        	ld	a3, 0x10(a1)
802227f0: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
802227f4: 8a 06        	slli	a3, a3, 0x2
802227f6: 36 96        	add	a2, a2, a3
802227f8: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
802227fc: 08 c2        	sw	a0, 0x0(a2)
;             self.len += 1;
802227fe: 88 69        	ld	a0, 0x10(a1)
80222800: 05 05        	addi	a0, a0, 0x1
80222802: 88 e9        	sd	a0, 0x10(a1)
80222804: a6 70        	ld	ra, 0x68(sp)
80222806: 06 74        	ld	s0, 0x60(sp)
;     }
80222808: 65 61        	addi	sp, sp, 0x70
8022280a: 82 80        	ret

000000008022280c <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9ae2eb5b622b2642E>:
;     fn into_iter(self) -> Self::IntoIter {
8022280c: 15 71        	addi	sp, sp, -0xe0
8022280e: 86 ed        	sd	ra, 0xd8(sp)
80222810: a2 e9        	sd	s0, 0xd0(sp)
80222812: 80 11        	addi	s0, sp, 0xe0
80222814: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;         ManuallyDrop { value }
80222818: 88 69        	ld	a0, 0x10(a1)
8022281a: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8022281e: 88 65        	ld	a0, 0x8(a1)
80222820: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80222824: 88 61        	ld	a0, 0x0(a1)
80222826: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022282a: 93 05 04 f5  	addi	a1, s0, -0xb0
8022282e: 13 05 04 f4  	addi	a0, s0, -0xc0
;             let alloc = ManuallyDrop::new(ptr::read(me.allocator()));
80222832: 23 30 a4 f8  	sd	a0, -0x80(s0)
80222836: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         self.buf.allocator()
8022283a: 23 38 a4 f8  	sd	a0, -0x70(s0)
;             let alloc = ManuallyDrop::new(ptr::read(me.allocator()));
8022283e: 23 3c b4 f8  	sd	a1, -0x68(s0)
;             let buf = me.buf.non_null();
80222842: 23 30 a4 fa  	sd	a0, -0x60(s0)
80222846: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         NonNull::from(self.ptr)
8022284a: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022284e: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80222852: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.pointer as *mut T
80222856: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022285a: 23 30 a4 fc  	sd	a0, -0x40(s0)
;             let end = if T::IS_ZST {
8022285e: 09 a0        	j	0x80222860 <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9ae2eb5b622b2642E+0x54>
80222860: 03 35 04 f3  	ld	a0, -0xd0(s0)
80222864: 93 05 04 f4  	addi	a1, s0, -0xc0
;                 begin.add(me.len()) as *const T
80222868: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022286c: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.len
80222870: 83 35 04 f5  	ld	a1, -0xb0(s0)
80222874: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { intrinsics::offset(self, count) }
80222878: 8a 05        	slli	a1, a1, 0x2
8022287a: 2e 95        	add	a0, a0, a1
;                 begin.add(me.len()) as *const T
8022287c: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;             let end = if T::IS_ZST {
80222880: 09 a0        	j	0x80222882 <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9ae2eb5b622b2642E+0x76>
80222882: 13 05 04 f4  	addi	a0, s0, -0xc0
;             let cap = me.buf.capacity();
80222886: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022288a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8022288e: 09 a0        	j	0x80222890 <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9ae2eb5b622b2642E+0x84>
80222890: 03 35 04 f4  	ld	a0, -0xc0(s0)
80222894: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80222898: 09 a0        	j	0x8022289a <_ZN90_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h9ae2eb5b622b2642E+0x8e>
8022289a: 83 35 84 f2  	ld	a1, -0xd8(s0)
8022289e: 03 36 04 f3  	ld	a2, -0xd0(s0)
;             IntoIter { buf, phantom: PhantomData, cap, alloc, ptr: buf, end }
802228a2: 83 36 04 f6  	ld	a3, -0xa0(s0)
802228a6: 03 35 84 f5  	ld	a0, -0xa8(s0)
802228aa: 90 e1        	sd	a2, 0x0(a1)
802228ac: 94 e9        	sd	a3, 0x10(a1)
802228ae: 90 e5        	sd	a2, 0x8(a1)
802228b0: 88 ed        	sd	a0, 0x18(a1)
802228b2: ee 60        	ld	ra, 0xd8(sp)
802228b4: 4e 64        	ld	s0, 0xd0(sp)
;     }
802228b6: 2d 61        	addi	sp, sp, 0xe0
802228b8: 82 80        	ret

00000000802228ba <_ZN4core9panicking13assert_failed17h453eaabdd9c00fd0E>:
; pub fn assert_failed<T, U>(
802228ba: 79 71        	addi	sp, sp, -0x30
802228bc: 06 f4        	sd	ra, 0x28(sp)
802228be: 22 f0        	sd	s0, 0x20(sp)
802228c0: 00 18        	addi	s0, sp, 0x30
802228c2: 3a 88        	mv	a6, a4
802228c4: b6 87        	mv	a5, a3
802228c6: 23 3c b4 fc  	sd	a1, -0x28(s0)
802228ca: 23 30 c4 fe  	sd	a2, -0x20(s0)
802228ce: a3 07 a4 fe  	sb	a0, -0x11(s0)

00000000802228d2 <.Lpcrel_hi0>:
;     assert_failed_inner(kind, &left, &right, args)
802228d2: 97 65 01 00  	auipc	a1, 0x16
802228d6: 13 87 e5 78  	addi	a4, a1, 0x78e
802228da: 93 05 84 fd  	addi	a1, s0, -0x28
802228de: 93 06 04 fe  	addi	a3, s0, -0x20
802228e2: 3a 86        	mv	a2, a4
802228e4: 97 e0 00 00  	auipc	ra, 0xe
802228e8: e7 80 c0 a8  	jalr	-0x574(ra) <_ZN4core9panicking19assert_failed_inner17h4c07be238101dcd6E>

00000000802228ec <_ZN4core9panicking13assert_failed17h8a485c99d81289c4E>:
; pub fn assert_failed<T, U>(
802228ec: 79 71        	addi	sp, sp, -0x30
802228ee: 06 f4        	sd	ra, 0x28(sp)
802228f0: 22 f0        	sd	s0, 0x20(sp)
802228f2: 00 18        	addi	s0, sp, 0x30
802228f4: 3a 88        	mv	a6, a4
802228f6: b6 87        	mv	a5, a3
802228f8: 23 3c b4 fc  	sd	a1, -0x28(s0)
802228fc: 23 30 c4 fe  	sd	a2, -0x20(s0)
80222900: a3 07 a4 fe  	sb	a0, -0x11(s0)

0000000080222904 <.Lpcrel_hi2>:
;     assert_failed_inner(kind, &left, &right, args)
80222904: 97 65 01 00  	auipc	a1, 0x16
80222908: 13 87 c5 77  	addi	a4, a1, 0x77c
8022290c: 93 05 84 fd  	addi	a1, s0, -0x28
80222910: 93 06 04 fe  	addi	a3, s0, -0x20
80222914: 3a 86        	mv	a2, a4
80222916: 97 e0 00 00  	auipc	ra, 0xe
8022291a: e7 80 a0 a5  	jalr	-0x5a6(ra) <_ZN4core9panicking19assert_failed_inner17h4c07be238101dcd6E>

000000008022291e <_ZN59_$LT$alloc..alloc..Global$u20$as$u20$core..clone..Clone$GT$5clone17h4e785baf445e6b2fE>:
; #[derive(Copy, Clone, Default, Debug)]
8022291e: 01 11        	addi	sp, sp, -0x20
80222920: 06 ec        	sd	ra, 0x18(sp)
80222922: 22 e8        	sd	s0, 0x10(sp)
80222924: 00 10        	addi	s0, sp, 0x20
80222926: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022292a: e2 60        	ld	ra, 0x18(sp)
8022292c: 42 64        	ld	s0, 0x10(sp)
8022292e: 05 61        	addi	sp, sp, 0x20
80222930: 82 80        	ret

0000000080222932 <_ZN5alloc5alloc15exchange_malloc17h0e8728c14a5a5c91E>:
; unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
80222932: 1d 71        	addi	sp, sp, -0x60
80222934: 86 ec        	sd	ra, 0x58(sp)
80222936: a2 e8        	sd	s0, 0x50(sp)
80222938: 80 10        	addi	s0, sp, 0x60
8022293a: 2a 86        	mv	a2, a0

000000008022293c <.Lpcrel_hi0>:
;     fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
8022293c: 17 65 01 00  	auipc	a0, 0x16
80222940: 13 05 45 76  	addi	a0, a0, 0x764
80222944: 23 30 a4 fa  	sd	a0, -0x60(s0)
80222948: 23 38 c4 fc  	sd	a2, -0x30(s0)
8022294c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80222950: 23 38 c4 fa  	sd	a2, -0x50(s0)
80222954: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.alloc_impl(layout, false)
80222958: 83 35 84 fa  	ld	a1, -0x58(s0)
8022295c: 03 36 04 fb  	ld	a2, -0x50(s0)
80222960: 81 46        	li	a3, 0x0
80222962: 97 00 00 00  	auipc	ra, 0x0
80222966: e7 80 60 0b  	jalr	0xb6(ra) <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E>
8022296a: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022296e: 23 30 b4 fc  	sd	a1, -0x40(s0)
;     match Global.allocate(layout) {
80222972: 03 35 84 fb  	ld	a0, -0x48(s0)
80222976: 05 c1        	beqz	a0, 0x80222996 <.Lpcrel_hi0+0x5a>
80222978: 09 a0        	j	0x8022297a <.Lpcrel_hi0+0x3e>
;         Ok(ptr) => ptr.as_mut_ptr(),
8022297a: 03 35 84 fb  	ld	a0, -0x48(s0)
8022297e: 83 35 04 fc  	ld	a1, -0x40(s0)
80222982: 23 30 a4 fe  	sd	a0, -0x20(s0)
80222986: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8022298a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022298e: e6 60        	ld	ra, 0x58(sp)
80222990: 46 64        	ld	s0, 0x50(sp)
; }
80222992: 25 61        	addi	sp, sp, 0x60
80222994: 82 80        	ret
;         Err(_) => handle_alloc_error(layout),
80222996: 03 35 84 fa  	ld	a0, -0x58(s0)
8022299a: 83 35 04 fb  	ld	a1, -0x50(s0)
8022299e: 97 c0 00 00  	auipc	ra, 0xc
802229a2: e7 80 20 2f  	jalr	0x2f2(ra) <_ZN5alloc5alloc18handle_alloc_error17h82a5a817f63685d8E>

00000000802229a6 <_ZN5alloc5alloc5alloc17h07d77da3109aecedE>:
; pub unsafe fn alloc(layout: Layout) -> *mut u8 {
802229a6: 5d 71        	addi	sp, sp, -0x50
802229a8: 86 e4        	sd	ra, 0x48(sp)
802229aa: a2 e0        	sd	s0, 0x40(sp)
802229ac: 80 08        	addi	s0, sp, 0x50

00000000802229ae <.Lpcrel_hi1>:
; pub unsafe fn read_volatile<T>(src: *const T) -> T {
802229ae: 17 a6 32 00  	auipc	a2, 0x32a
802229b2: 13 06 b6 a2  	addi	a2, a2, -0x5d5
802229b6: 23 38 c4 fa  	sd	a2, -0x50(s0)
802229ba: 23 3c a4 fa  	sd	a0, -0x48(s0)
802229be: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         assert_unsafe_precondition!(
802229c2: 09 a0        	j	0x802229c4 <.Lpcrel_hi2>

00000000802229c4 <.Lpcrel_hi2>:
802229c4: 17 a5 32 00  	auipc	a0, 0x32a
802229c8: 13 05 55 a1  	addi	a0, a0, -0x5eb
802229cc: 85 45        	li	a1, 0x1
802229ce: 97 00 00 00  	auipc	ra, 0x0
802229d2: e7 80 c0 73  	jalr	0x73c(ra) <_ZN4core3ptr13read_volatile18precondition_check17hedbe4c97c8a80b03E>
802229d6: 09 a0        	j	0x802229d8 <.Lpcrel_hi3>

00000000802229d8 <.Lpcrel_hi3>:
;         intrinsics::volatile_load(src)
802229d8: 17 a5 32 00  	auipc	a0, 0x32a
802229dc: 13 05 15 a0  	addi	a0, a0, -0x5ff
802229e0: 03 45 05 00  	lbu	a0, 0x0(a0)
802229e4: a3 0b a4 fc  	sb	a0, -0x29(s0)
802229e8: 93 05 84 fb  	addi	a1, s0, -0x48
;         __rust_alloc(layout.size(), layout.align())
802229ec: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         self.size
802229f0: 03 35 04 fc  	ld	a0, -0x40(s0)
;         __rust_alloc(layout.size(), layout.align())
802229f4: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         self.align.as_usize()
802229f8: 83 35 84 fb  	ld	a1, -0x48(s0)
802229fc: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.0 as usize
80222a00: 23 34 b4 fc  	sd	a1, -0x38(s0)
80222a04: 83 35 84 fc  	ld	a1, -0x38(s0)
;         __rust_alloc(layout.size(), layout.align())
80222a08: 97 90 fe ff  	auipc	ra, 0xfffe9
80222a0c: e7 80 00 c3  	jalr	-0x3d0(ra) <ekernel+0xffcbe638>
80222a10: a6 60        	ld	ra, 0x48(sp)
80222a12: 06 64        	ld	s0, 0x40(sp)
; }
80222a14: 61 61        	addi	sp, sp, 0x50
80222a16: 82 80        	ret

0000000080222a18 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E>:
;     fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
80222a18: 45 71        	addi	sp, sp, -0x1d0
80222a1a: 86 e7        	sd	ra, 0x1c8(sp)
80222a1c: a2 e3        	sd	s0, 0x1c0(sp)
80222a1e: 80 0b        	addi	s0, sp, 0x1d0
80222a20: 36 87        	mv	a4, a3
80222a22: 23 3c e4 e4  	sd	a4, -0x1a8(s0)
80222a26: 01 47        	li	a4, 0x0
;     pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
80222a28: 23 38 e4 e6  	sd	a4, -0x190(s0)
; pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
80222a2c: 23 3c e4 e6  	sd	a4, -0x188(s0)
;     metadata: <T as Pointee>::Metadata,
80222a30: 23 30 e4 e8  	sd	a4, -0x180(s0)
;     fn from(t: T) -> T {
80222a34: 23 38 b4 e8  	sd	a1, -0x170(s0)
80222a38: 23 3c c4 e8  	sd	a2, -0x168(s0)
80222a3c: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80222a40: a3 0f d4 f4  	sb	a3, -0xa1(s0)
80222a44: 13 05 04 e9  	addi	a0, s0, -0x170
;         match layout.size() {
80222a48: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         self.size
80222a4c: 03 35 84 e9  	ld	a0, -0x168(s0)
80222a50: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
80222a54: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         match layout.size() {
80222a58: 21 e9        	bnez	a0, 0x80222aa8 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0x90>
80222a5a: 09 a0        	j	0x80222a5c <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0x44>
80222a5c: 13 05 04 e9  	addi	a0, s0, -0x170
;             0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
80222a60: 97 00 00 00  	auipc	ra, 0x0
80222a64: e7 80 60 7b  	jalr	0x7b6(ra) <_ZN4core5alloc6layout6Layout8dangling17h17f60223284f3f26E>
80222a68: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         self.pointer as *mut T
80222a6c: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         self as _
80222a70: 23 30 a4 f8  	sd	a0, -0x80(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80222a74: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80222a78: 01 45        	li	a0, 0x0
80222a7a: 23 3c a4 f0  	sd	a0, -0xe8(s0)
80222a7e: 83 35 04 f1  	ld	a1, -0xf0(s0)
80222a82: 03 35 84 f1  	ld	a0, -0xe8(s0)
80222a86: 23 30 b4 f0  	sd	a1, -0x100(s0)
80222a8a: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80222a8e: 83 35 04 f0  	ld	a1, -0x100(s0)
80222a92: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
80222a96: 03 35 84 f0  	ld	a0, -0xf8(s0)
80222a9a: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80222a9e: 23 34 b4 f8  	sd	a1, -0x78(s0)
80222aa2: 23 38 a4 f8  	sd	a0, -0x70(s0)
;             assert_unsafe_precondition!(
80222aa6: 31 a0        	j	0x80222ab2 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0x9a>
80222aa8: 03 35 84 e5  	ld	a0, -0x1a8(s0)
;                 let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
80222aac: 05 89        	andi	a0, a0, 0x1
80222aae: 29 ed        	bnez	a0, 0x80222b08 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0xf0>
80222ab0: 89 a0        	j	0x80222af2 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0xda>
80222ab2: 03 35 84 e4  	ld	a0, -0x1b8(s0)
;             assert_unsafe_precondition!(
80222ab6: 97 10 00 00  	auipc	ra, 0x1
80222aba: e7 80 e0 c7  	jalr	-0x382(ra) <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbe8a0c1d3256ab0aE>
80222abe: 09 a0        	j	0x80222ac0 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0xa8>
80222ac0: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80222ac4: 83 35 84 e4  	ld	a1, -0x1b8(s0)
;             NonNull { pointer: ptr as _ }
80222ac8: 23 38 b4 ea  	sd	a1, -0x150(s0)
80222acc: 23 3c a4 ea  	sd	a0, -0x148(s0)
;             0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
80222ad0: 83 35 04 eb  	ld	a1, -0x150(s0)
80222ad4: 03 35 84 eb  	ld	a0, -0x148(s0)
80222ad8: 23 30 b4 ea  	sd	a1, -0x160(s0)
80222adc: 23 34 a4 ea  	sd	a0, -0x158(s0)
80222ae0: 09 a0        	j	0x80222ae2 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0xca>
;     }
80222ae2: 03 35 04 ea  	ld	a0, -0x160(s0)
80222ae6: 83 35 84 ea  	ld	a1, -0x158(s0)
80222aea: be 60        	ld	ra, 0x1c8(sp)
80222aec: 1e 64        	ld	s0, 0x1c0(sp)
80222aee: 79 61        	addi	sp, sp, 0x1d0
80222af0: 82 80        	ret
;                 let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
80222af2: 03 35 04 e9  	ld	a0, -0x170(s0)
80222af6: 83 35 84 e9  	ld	a1, -0x168(s0)
80222afa: 97 00 00 00  	auipc	ra, 0x0
80222afe: e7 80 c0 ea  	jalr	-0x154(ra) <_ZN5alloc5alloc5alloc17h07d77da3109aecedE>
80222b02: 23 30 a4 ec  	sd	a0, -0x140(s0)
80222b06: 81 a0        	j	0x80222b46 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0x12e>
80222b08: 83 35 04 e9  	ld	a1, -0x170(s0)
80222b0c: 03 35 84 e9  	ld	a0, -0x168(s0)
80222b10: 23 34 b4 ec  	sd	a1, -0x138(s0)
80222b14: 23 38 a4 ec  	sd	a0, -0x130(s0)
80222b18: 93 05 84 ec  	addi	a1, s0, -0x138
;     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
80222b1c: 23 3c b4 f8  	sd	a1, -0x68(s0)
;         self.size
80222b20: 03 35 04 ed  	ld	a0, -0x130(s0)
;     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
80222b24: 23 30 b4 fa  	sd	a1, -0x60(s0)
;         self.align.as_usize()
80222b28: 83 35 84 ec  	ld	a1, -0x138(s0)
80222b2c: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.0 as usize
80222b30: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80222b34: 83 35 04 f2  	ld	a1, -0xe0(s0)
;     unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
80222b38: 97 90 fe ff  	auipc	ra, 0xfffe9
80222b3c: e7 80 e0 be  	jalr	-0x412(ra) <ekernel+0xffcbe726>
80222b40: 23 30 a4 ec  	sd	a0, -0x140(s0)
;                 let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
80222b44: 09 a0        	j	0x80222b46 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0x12e>
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80222b46: 03 35 04 ec  	ld	a0, -0x140(s0)
80222b4a: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
80222b4e: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         if !ptr.is_null() {
80222b52: 15 e1        	bnez	a0, 0x80222b76 <.Lpcrel_hi4+0x16>
80222b54: 09 a0        	j	0x80222b56 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0x13e>
80222b56: 01 45        	li	a0, 0x0
;             None
80222b58: 23 34 a4 ee  	sd	a0, -0x118(s0)
;             None => Err(err),
80222b5c: 23 30 a4 ee  	sd	a0, -0x120(s0)

0000000080222b60 <.Lpcrel_hi4>:
;             Err(e) => Err(From::from(e)),
80222b60: 17 05 01 00  	auipc	a0, 0x10
80222b64: 13 05 05 73  	addi	a0, a0, 0x730
80222b68: 0c 61        	ld	a1, 0x0(a0)
80222b6a: 08 65        	ld	a0, 0x8(a0)
80222b6c: 23 30 b4 ea  	sd	a1, -0x160(s0)
80222b70: 23 34 a4 ea  	sd	a0, -0x158(s0)
;     }
80222b74: bd b7        	j	0x80222ae2 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0xca>
;             assert_unsafe_precondition!(
80222b76: 09 a0        	j	0x80222b78 <.Lpcrel_hi4+0x18>
80222b78: 03 35 04 e4  	ld	a0, -0x1c0(s0)
;             assert_unsafe_precondition!(
80222b7c: 97 10 00 00  	auipc	ra, 0x1
80222b80: e7 80 80 bb  	jalr	-0x448(ra) <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbe8a0c1d3256ab0aE>
80222b84: 09 a0        	j	0x80222b86 <.Lpcrel_hi4+0x26>
80222b86: 03 35 04 e6  	ld	a0, -0x1a0(s0)
80222b8a: 83 35 04 e4  	ld	a1, -0x1c0(s0)
;             NonNull { pointer: ptr as _ }
80222b8e: 23 34 b4 f2  	sd	a1, -0xd8(s0)
;             Some(unsafe { Self::new_unchecked(ptr) })
80222b92: 83 35 84 f2  	ld	a1, -0xd8(s0)
80222b96: 23 34 b4 ee  	sd	a1, -0x118(s0)
;             Some(v) => Ok(v),
80222b9a: 83 35 84 ee  	ld	a1, -0x118(s0)
80222b9e: 23 3c b4 fa  	sd	a1, -0x48(s0)
80222ba2: 23 30 b4 ee  	sd	a1, -0x120(s0)
;             Ok(v) => ControlFlow::Continue(v),
80222ba6: 83 35 04 ee  	ld	a1, -0x120(s0)
80222baa: 23 30 b4 fc  	sd	a1, -0x40(s0)
80222bae: 23 3c b4 ec  	sd	a1, -0x128(s0)
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80222bb2: 83 35 84 ed  	ld	a1, -0x128(s0)
80222bb6: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.pointer as *mut T
80222bba: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self as _
80222bbe: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80222bc2: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80222bc6: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80222bca: 83 35 04 f4  	ld	a1, -0xc0(s0)
80222bce: 03 35 84 f4  	ld	a0, -0xb8(s0)
80222bd2: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80222bd6: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80222bda: 83 35 04 f3  	ld	a1, -0xd0(s0)
80222bde: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
80222be2: 03 35 84 f3  	ld	a0, -0xc8(s0)
80222be6: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
80222bea: 23 30 b4 fe  	sd	a1, -0x20(s0)
80222bee: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
80222bf2: 09 a0        	j	0x80222bf4 <.Lpcrel_hi4+0x94>
80222bf4: 03 35 04 e3  	ld	a0, -0x1d0(s0)
;             assert_unsafe_precondition!(
80222bf8: 97 10 00 00  	auipc	ra, 0x1
80222bfc: e7 80 c0 b3  	jalr	-0x4c4(ra) <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbe8a0c1d3256ab0aE>
80222c00: 09 a0        	j	0x80222c02 <.Lpcrel_hi4+0xa2>
80222c02: 03 35 84 e3  	ld	a0, -0x1c8(s0)
80222c06: 83 35 04 e3  	ld	a1, -0x1d0(s0)
;             NonNull { pointer: ptr as _ }
80222c0a: 23 38 b4 ee  	sd	a1, -0x110(s0)
80222c0e: 23 3c a4 ee  	sd	a0, -0x108(s0)
;                 Ok(NonNull::slice_from_raw_parts(ptr, size))
80222c12: 83 35 04 ef  	ld	a1, -0x110(s0)
80222c16: 03 35 84 ef  	ld	a0, -0x108(s0)
80222c1a: 23 30 b4 ea  	sd	a1, -0x160(s0)
80222c1e: 23 34 a4 ea  	sd	a0, -0x158(s0)
;             },
80222c22: c1 b5        	j	0x80222ae2 <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E+0xca>

0000000080222c24 <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE>:
;     unsafe fn grow_impl(
80222c24: 13 01 01 d6  	addi	sp, sp, -0x2a0
80222c28: 23 3c 11 28  	sd	ra, 0x298(sp)
80222c2c: 23 38 81 28  	sd	s0, 0x290(sp)
80222c30: 00 15        	addi	s0, sp, 0x2a0
80222c32: 23 3c b4 da  	sd	a1, -0x248(s0)
80222c36: 23 30 a4 dc  	sd	a0, -0x240(s0)
80222c3a: c2 88        	mv	a7, a6
80222c3c: 23 34 14 dd  	sd	a7, -0x238(s0)
80222c40: 81 48        	li	a7, 0x0
;     pub const unsafe fn write_bytes(self, val: u8, count: usize)
80222c42: 23 0d 14 dd  	sb	a7, -0x226(s0)
; pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
80222c46: a3 0d 14 dd  	sb	a7, -0x225(s0)
;     fn from(t: T) -> T {
80222c4a: 23 30 c4 de  	sd	a2, -0x220(s0)
80222c4e: 23 34 d4 de  	sd	a3, -0x218(s0)
80222c52: 23 38 e4 de  	sd	a4, -0x210(s0)
80222c56: 23 3c f4 de  	sd	a5, -0x208(s0)
80222c5a: 23 3c a4 ee  	sd	a0, -0x108(s0)
80222c5e: 23 30 b4 f0  	sd	a1, -0x100(s0)
80222c62: a3 07 04 f1  	sb	a6, -0xf1(s0)
80222c66: 13 05 04 de  	addi	a0, s0, -0x220
;         match old_layout.size() {
80222c6a: 23 38 a4 f0  	sd	a0, -0xf0(s0)
;         self.size
80222c6e: 03 35 84 de  	ld	a0, -0x218(s0)
80222c72: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;         match old_layout.size() {
80222c76: 03 35 04 e1  	ld	a0, -0x1f0(s0)
80222c7a: 05 e5        	bnez	a0, 0x80222ca2 <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE+0x7e>
80222c7c: 09 a0        	j	0x80222c7e <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE+0x5a>
80222c7e: 03 35 04 dc  	ld	a0, -0x240(s0)
80222c82: 83 36 84 dc  	ld	a3, -0x238(s0)
;             0 => self.alloc_impl(new_layout, zeroed),
80222c86: 83 35 04 df  	ld	a1, -0x210(s0)
80222c8a: 03 36 84 df  	ld	a2, -0x208(s0)
80222c8e: 85 8a        	andi	a3, a3, 0x1
80222c90: 97 00 00 00  	auipc	ra, 0x0
80222c94: e7 80 80 d8  	jalr	-0x278(ra) <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E>
80222c98: 23 30 a4 e0  	sd	a0, -0x200(s0)
80222c9c: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
80222ca0: 81 a0        	j	0x80222ce0 <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE+0xbc>
80222ca2: 13 05 04 e1  	addi	a0, s0, -0x1f0
;             old_size if old_layout.align() == new_layout.align() => unsafe {
80222ca6: 23 3c a4 f0  	sd	a0, -0xe8(s0)
80222caa: 13 05 04 de  	addi	a0, s0, -0x220
80222cae: 23 30 a4 f2  	sd	a0, -0xe0(s0)
;         self.align.as_usize()
80222cb2: 03 35 04 de  	ld	a0, -0x220(s0)
80222cb6: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;         self.0 as usize
80222cba: 23 30 a4 e8  	sd	a0, -0x180(s0)
80222cbe: 03 35 04 e8  	ld	a0, -0x180(s0)
80222cc2: 93 05 04 df  	addi	a1, s0, -0x210
;             old_size if old_layout.align() == new_layout.align() => unsafe {
80222cc6: 23 38 b4 f2  	sd	a1, -0xd0(s0)
;         self.align.as_usize()
80222cca: 83 35 04 df  	ld	a1, -0x210(s0)
80222cce: 23 3c b4 f2  	sd	a1, -0xc8(s0)
;         self.0 as usize
80222cd2: 23 34 b4 e8  	sd	a1, -0x178(s0)
80222cd6: 83 35 84 e8  	ld	a1, -0x178(s0)
;             old_size if old_layout.align() == new_layout.align() => unsafe {
80222cda: 63 0f b5 02  	beq	a0, a1, 0x80222d18 <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE+0xf4>
80222cde: 11 a0        	j	0x80222ce2 <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE+0xbe>
;     }
80222ce0: 75 a2        	j	0x80222e8c <.Lpcrel_hi6+0x18>
80222ce2: 03 35 04 dc  	ld	a0, -0x240(s0)
80222ce6: 83 36 84 dc  	ld	a3, -0x238(s0)
;             old_size => unsafe {
80222cea: 83 35 04 e1  	ld	a1, -0x1f0(s0)
80222cee: 23 38 b4 da  	sd	a1, -0x250(s0)
80222cf2: 23 30 b4 f4  	sd	a1, -0xc0(s0)
;                 let new_ptr = self.alloc_impl(new_layout, zeroed)?;
80222cf6: 83 35 04 df  	ld	a1, -0x210(s0)
80222cfa: 03 36 84 df  	ld	a2, -0x208(s0)
80222cfe: 85 8a        	andi	a3, a3, 0x1
80222d00: 97 00 00 00  	auipc	ra, 0x0
80222d04: e7 80 80 d1  	jalr	-0x2e8(ra) <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E>
80222d08: 23 38 a4 e6  	sd	a0, -0x190(s0)
80222d0c: 23 3c b4 e6  	sd	a1, -0x188(s0)
;         match self {
80222d10: 03 35 04 e7  	ld	a0, -0x190(s0)
80222d14: 29 e1        	bnez	a0, 0x80222d56 <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE+0x132>
80222d16: 49 a0        	j	0x80222d98 <.Lpcrel_hi5>
;             old_size if old_layout.align() == new_layout.align() => unsafe {
80222d18: 03 35 04 e1  	ld	a0, -0x1f0(s0)
80222d1c: 23 3c a4 d8  	sd	a0, -0x268(s0)
80222d20: 23 3c a4 f6  	sd	a0, -0x88(s0)
80222d24: 13 05 04 df  	addi	a0, s0, -0x210
;                 let new_size = new_layout.size();
80222d28: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self.size
80222d2c: 03 35 84 df  	ld	a0, -0x208(s0)
80222d30: 23 30 a4 da  	sd	a0, -0x260(s0)
80222d34: 23 34 a4 f8  	sd	a0, -0x78(s0)
80222d38: 93 05 04 de  	addi	a1, s0, -0x220
;                 hint::assert_unchecked(new_size >= old_layout.size());
80222d3c: 23 38 b4 f8  	sd	a1, -0x70(s0)
;         self.size
80222d40: 83 35 84 de  	ld	a1, -0x218(s0)
;                 hint::assert_unchecked(new_size >= old_layout.size());
80222d44: 33 35 b5 00  	sltu	a0, a0, a1
80222d48: 13 45 15 00  	xori	a0, a0, 0x1
80222d4c: 23 34 a4 da  	sd	a0, -0x258(s0)
80222d50: a3 0f a4 f8  	sb	a0, -0x61(s0)
;         intrinsics::assert_unsafe_precondition!(
80222d54: 55 a8        	j	0x80222e08 <.Lpcrel_hi5+0x70>
80222d56: 83 35 84 db  	ld	a1, -0x248(s0)
;             Ok(v) => ControlFlow::Continue(v),
80222d5a: 03 36 04 e7  	ld	a2, -0x190(s0)
80222d5e: 03 35 84 e7  	ld	a0, -0x188(s0)
80222d62: 23 34 c4 f4  	sd	a2, -0xb8(s0)
80222d66: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80222d6a: 23 30 c4 e6  	sd	a2, -0x1a0(s0)
80222d6e: 23 34 a4 e6  	sd	a0, -0x198(s0)
;                 let new_ptr = self.alloc_impl(new_layout, zeroed)?;
80222d72: 03 35 04 e6  	ld	a0, -0x1a0(s0)
80222d76: 23 34 a4 d8  	sd	a0, -0x278(s0)
80222d7a: 03 36 84 e6  	ld	a2, -0x198(s0)
80222d7e: 23 38 c4 d8  	sd	a2, -0x270(s0)
80222d82: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80222d86: 23 30 c4 f6  	sd	a2, -0xa0(s0)
;         self.pointer as *mut T
80222d8a: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80222d8e: 23 38 a4 ee  	sd	a0, -0x110(s0)
;         self.pointer as *mut T
80222d92: 23 38 a4 f6  	sd	a0, -0x90(s0)
;     assert_unsafe_precondition!(
80222d96: 21 a8        	j	0x80222dae <.Lpcrel_hi5+0x16>

0000000080222d98 <.Lpcrel_hi5>:
;             Err(e) => Err(From::from(e)),
80222d98: 17 05 01 00  	auipc	a0, 0x10
80222d9c: 13 05 85 4f  	addi	a0, a0, 0x4f8
80222da0: 0c 61        	ld	a1, 0x0(a0)
80222da2: 08 65        	ld	a0, 0x8(a0)
80222da4: 23 30 b4 e0  	sd	a1, -0x200(s0)
80222da8: 23 34 a4 e0  	sd	a0, -0x1f8(s0)
; //!An easy file system isolated from the kernel
80222dac: a9 a8        	j	0x80222e06 <.Lpcrel_hi5+0x6e>
80222dae: 03 37 04 db  	ld	a4, -0x250(s0)
80222db2: 83 35 84 d8  	ld	a1, -0x278(s0)
80222db6: 03 35 84 db  	ld	a0, -0x248(s0)
80222dba: 85 46        	li	a3, 0x1
;     assert_unsafe_precondition!(
80222dbc: 36 86        	mv	a2, a3
80222dbe: 97 60 00 00  	auipc	ra, 0x6
80222dc2: e7 80 e0 3b  	jalr	0x3be(ra) <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h9e88ce347a02df22E>
80222dc6: 09 a0        	j	0x80222dc8 <.Lpcrel_hi5+0x30>
80222dc8: 03 35 84 d8  	ld	a0, -0x278(s0)
80222dcc: 83 35 84 db  	ld	a1, -0x248(s0)
80222dd0: 03 36 04 db  	ld	a2, -0x250(s0)
;     unsafe { copy_nonoverlapping(src, dst, count) }
80222dd4: 97 f0 00 00  	auipc	ra, 0xf
80222dd8: e7 80 a0 e9  	jalr	-0x166(ra) <memcpy>
80222ddc: 83 35 84 db  	ld	a1, -0x248(s0)
80222de0: 03 35 04 dc  	ld	a0, -0x240(s0)
;                 self.deallocate(ptr, old_layout);
80222de4: 03 36 04 de  	ld	a2, -0x220(s0)
80222de8: 83 36 84 de  	ld	a3, -0x218(s0)
80222dec: 97 00 00 00  	auipc	ra, 0x0
80222df0: e7 80 80 22  	jalr	0x228(ra) <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h43388a5d844d0145E>
80222df4: 83 35 84 d8  	ld	a1, -0x278(s0)
80222df8: 03 35 04 d9  	ld	a0, -0x270(s0)
;                 Ok(new_ptr)
80222dfc: 23 30 b4 e0  	sd	a1, -0x200(s0)
80222e00: 23 34 a4 e0  	sd	a0, -0x1f8(s0)
;             },
80222e04: f1 bd        	j	0x80222ce0 <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE+0xbc>
;     }
80222e06: 59 a0        	j	0x80222e8c <.Lpcrel_hi6+0x18>
80222e08: 03 35 84 da  	ld	a0, -0x258(s0)
;         intrinsics::assert_unsafe_precondition!(
80222e0c: 05 89        	andi	a0, a0, 0x1
80222e0e: 97 00 00 00  	auipc	ra, 0x0
80222e12: e7 80 20 45  	jalr	0x452(ra) <_ZN4core4hint16assert_unchecked18precondition_check17hcf13652ed3844227E>
80222e16: 09 a0        	j	0x80222e18 <.Lpcrel_hi5+0x80>
80222e18: 83 36 04 da  	ld	a3, -0x260(s0)
80222e1c: 03 35 84 db  	ld	a0, -0x248(s0)
;         self.pointer as *mut T
80222e20: 23 30 a4 fa  	sd	a0, -0x60(s0)
;                 let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
80222e24: 03 36 04 de  	ld	a2, -0x220(s0)
80222e28: 83 35 84 de  	ld	a1, -0x218(s0)
80222e2c: 23 3c c4 e0  	sd	a2, -0x1e8(s0)
80222e30: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
80222e34: 13 06 84 e1  	addi	a2, s0, -0x1e8
;     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
80222e38: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         self.size
80222e3c: 83 35 04 e2  	ld	a1, -0x1e0(s0)
;     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
80222e40: 23 38 c4 fa  	sd	a2, -0x50(s0)
;         self.align.as_usize()
80222e44: 03 36 84 e1  	ld	a2, -0x1e8(s0)
80222e48: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         self.0 as usize
80222e4c: 23 38 c4 e8  	sd	a2, -0x170(s0)
80222e50: 03 36 04 e9  	ld	a2, -0x170(s0)
;     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
80222e54: 97 90 fe ff  	auipc	ra, 0xfffe9
80222e58: e7 80 20 87  	jalr	-0x78e(ra) <ekernel+0xffcbe6c6>
80222e5c: aa 85        	mv	a1, a0
80222e5e: 23 30 b4 d8  	sd	a1, -0x280(s0)
80222e62: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if !ptr.is_null() {
80222e66: 15 e1        	bnez	a0, 0x80222e8a <.Lpcrel_hi6+0x16>
80222e68: 09 a0        	j	0x80222e6a <.Lpcrel_hi5+0xd2>
80222e6a: 01 45        	li	a0, 0x0
;             None
80222e6c: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
;             None => Err(err),
80222e70: 23 38 a4 e2  	sd	a0, -0x1d0(s0)

0000000080222e74 <.Lpcrel_hi6>:
;             Err(e) => Err(From::from(e)),
80222e74: 17 05 01 00  	auipc	a0, 0x10
80222e78: 13 05 c5 41  	addi	a0, a0, 0x41c
80222e7c: 0c 61        	ld	a1, 0x0(a0)
80222e7e: 08 65        	ld	a0, 0x8(a0)
80222e80: 23 30 b4 e0  	sd	a1, -0x200(s0)
80222e84: 23 34 a4 e0  	sd	a0, -0x1f8(s0)
; //!An easy file system isolated from the kernel
80222e88: bd bf        	j	0x80222e06 <.Lpcrel_hi5+0x6e>
;             assert_unsafe_precondition!(
80222e8a: 21 a8        	j	0x80222ea2 <.Lpcrel_hi6+0x2e>
;     }
80222e8c: 03 35 04 e0  	ld	a0, -0x200(s0)
80222e90: 83 35 84 e0  	ld	a1, -0x1f8(s0)
80222e94: 83 30 81 29  	ld	ra, 0x298(sp)
80222e98: 03 34 01 29  	ld	s0, 0x290(sp)
80222e9c: 13 01 01 2a  	addi	sp, sp, 0x2a0
80222ea0: 82 80        	ret
80222ea2: 03 35 04 d8  	ld	a0, -0x280(s0)
;             assert_unsafe_precondition!(
80222ea6: 97 10 00 00  	auipc	ra, 0x1
80222eaa: e7 80 e0 88  	jalr	-0x772(ra) <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbe8a0c1d3256ab0aE>
80222eae: 09 a0        	j	0x80222eb0 <.Lpcrel_hi6+0x3c>
80222eb0: 03 35 84 dc  	ld	a0, -0x238(s0)
80222eb4: 83 35 04 d8  	ld	a1, -0x280(s0)
;             NonNull { pointer: ptr as _ }
80222eb8: 23 3c b4 e8  	sd	a1, -0x168(s0)
;             Some(unsafe { Self::new_unchecked(ptr) })
80222ebc: 83 35 84 e9  	ld	a1, -0x168(s0)
80222ec0: 23 3c b4 e2  	sd	a1, -0x1c8(s0)
;             Some(v) => Ok(v),
80222ec4: 83 35 84 e3  	ld	a1, -0x1c8(s0)
80222ec8: 23 34 b4 fc  	sd	a1, -0x38(s0)
80222ecc: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
;             Ok(v) => ControlFlow::Continue(v),
80222ed0: 83 35 04 e3  	ld	a1, -0x1d0(s0)
80222ed4: 23 38 b4 fc  	sd	a1, -0x30(s0)
80222ed8: 23 34 b4 e2  	sd	a1, -0x1d8(s0)
;                 let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
80222edc: 83 35 84 e2  	ld	a1, -0x1d8(s0)
80222ee0: 23 3c b4 d6  	sd	a1, -0x288(s0)
80222ee4: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 if zeroed {
80222ee8: 05 89        	andi	a0, a0, 0x1
80222eea: 39 ed        	bnez	a0, 0x80222f48 <.Lpcrel_hi6+0xd4>
80222eec: 09 a0        	j	0x80222eee <.Lpcrel_hi6+0x7a>
80222eee: 03 35 04 da  	ld	a0, -0x260(s0)
80222ef2: 83 35 84 d7  	ld	a1, -0x288(s0)
;                 Ok(NonNull::slice_from_raw_parts(ptr, new_size))
80222ef6: 23 38 b4 e4  	sd	a1, -0x1b0(s0)
80222efa: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
;         self.pointer as *mut T
80222efe: 23 3c b4 ea  	sd	a1, -0x148(s0)
80222f02: 83 35 84 eb  	ld	a1, -0x148(s0)
80222f06: 23 38 b4 ea  	sd	a1, -0x150(s0)
;         self as _
80222f0a: 83 35 84 eb  	ld	a1, -0x148(s0)
80222f0e: 23 30 b4 ec  	sd	a1, -0x140(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80222f12: 83 35 84 eb  	ld	a1, -0x148(s0)
80222f16: 23 34 b4 ee  	sd	a1, -0x118(s0)
80222f1a: 83 35 84 ee  	ld	a1, -0x118(s0)
80222f1e: 23 3c b4 ec  	sd	a1, -0x128(s0)
80222f22: 23 30 a4 ee  	sd	a0, -0x120(s0)
80222f26: 83 35 84 ed  	ld	a1, -0x128(s0)
80222f2a: 03 35 04 ee  	ld	a0, -0x120(s0)
80222f2e: 23 34 b4 ec  	sd	a1, -0x138(s0)
80222f32: 23 38 a4 ec  	sd	a0, -0x130(s0)
80222f36: 83 35 84 ec  	ld	a1, -0x138(s0)
80222f3a: 03 35 04 ed  	ld	a0, -0x130(s0)
80222f3e: 23 30 b4 ea  	sd	a1, -0x160(s0)
80222f42: 23 34 a4 ea  	sd	a0, -0x158(s0)
;             assert_unsafe_precondition!(
80222f46: 79 a8        	j	0x80222fe4 <.Lpcrel_hi6+0x170>
80222f48: 03 35 04 da  	ld	a0, -0x260(s0)
80222f4c: 83 35 84 d9  	ld	a1, -0x268(s0)
80222f50: 03 36 04 d8  	ld	a2, -0x280(s0)
;         unsafe { intrinsics::offset(self, count) }
80222f54: 2e 96        	add	a2, a2, a1
80222f56: 23 34 c4 d6  	sd	a2, -0x298(s0)
80222f5a: 23 30 c4 fe  	sd	a2, -0x20(s0)
;                     raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
80222f5e: 0d 8d        	sub	a0, a0, a1
80222f60: 23 38 a4 d6  	sd	a0, -0x290(s0)
80222f64: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert_unsafe_precondition!(
80222f68: 09 a0        	j	0x80222f6a <.Lpcrel_hi6+0xf6>
80222f6a: 03 35 84 d6  	ld	a0, -0x298(s0)
80222f6e: 85 45        	li	a1, 0x1
;         assert_unsafe_precondition!(
80222f70: 97 60 00 00  	auipc	ra, 0x6
80222f74: e7 80 a0 10  	jalr	0x10a(ra) <_ZN4core10intrinsics11write_bytes18precondition_check17hca280d0b828c64abE>
80222f78: 03 35 84 d6  	ld	a0, -0x298(s0)
80222f7c: 03 36 04 d7  	ld	a2, -0x290(s0)
80222f80: 81 45        	li	a1, 0x0
;         write_bytes(dst, val, count)
80222f82: 97 f0 00 00  	auipc	ra, 0xf
80222f86: e7 80 c0 f0  	jalr	-0xf4(ra) <memset>
80222f8a: 83 35 84 d7  	ld	a1, -0x288(s0)
80222f8e: 03 35 04 da  	ld	a0, -0x260(s0)
;                 Ok(NonNull::slice_from_raw_parts(ptr, new_size))
80222f92: 23 38 b4 e4  	sd	a1, -0x1b0(s0)
80222f96: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
;         self.pointer as *mut T
80222f9a: 23 3c b4 ea  	sd	a1, -0x148(s0)
80222f9e: 83 35 84 eb  	ld	a1, -0x148(s0)
80222fa2: 23 38 b4 ea  	sd	a1, -0x150(s0)
;         self as _
80222fa6: 83 35 84 eb  	ld	a1, -0x148(s0)
80222faa: 23 30 b4 ec  	sd	a1, -0x140(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80222fae: 83 35 84 eb  	ld	a1, -0x148(s0)
80222fb2: 23 34 b4 ee  	sd	a1, -0x118(s0)
80222fb6: 83 35 84 ee  	ld	a1, -0x118(s0)
80222fba: 23 3c b4 ec  	sd	a1, -0x128(s0)
80222fbe: 23 30 a4 ee  	sd	a0, -0x120(s0)
80222fc2: 83 35 84 ed  	ld	a1, -0x128(s0)
80222fc6: 03 35 04 ee  	ld	a0, -0x120(s0)
80222fca: 23 34 b4 ec  	sd	a1, -0x138(s0)
80222fce: 23 38 a4 ec  	sd	a0, -0x130(s0)
80222fd2: 83 35 84 ec  	ld	a1, -0x138(s0)
80222fd6: 03 35 04 ed  	ld	a0, -0x130(s0)
80222fda: 23 30 b4 ea  	sd	a1, -0x160(s0)
80222fde: 23 34 a4 ea  	sd	a0, -0x158(s0)
;             assert_unsafe_precondition!(
80222fe2: 09 a0        	j	0x80222fe4 <.Lpcrel_hi6+0x170>
;                 (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
80222fe4: 03 35 04 ea  	ld	a0, -0x160(s0)
;             assert_unsafe_precondition!(
80222fe8: 97 00 00 00  	auipc	ra, 0x0
80222fec: e7 80 c0 74  	jalr	0x74c(ra) <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbe8a0c1d3256ab0aE>
80222ff0: 09 a0        	j	0x80222ff2 <.Lpcrel_hi6+0x17e>
;             NonNull { pointer: ptr as _ }
80222ff2: 83 35 04 ea  	ld	a1, -0x160(s0)
80222ff6: 03 35 84 ea  	ld	a0, -0x158(s0)
80222ffa: 23 30 b4 e4  	sd	a1, -0x1c0(s0)
80222ffe: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
;                 Ok(NonNull::slice_from_raw_parts(ptr, new_size))
80223002: 83 35 04 e4  	ld	a1, -0x1c0(s0)
80223006: 03 35 84 e4  	ld	a0, -0x1b8(s0)
8022300a: 23 30 b4 e0  	sd	a1, -0x200(s0)
8022300e: 23 34 a4 e0  	sd	a0, -0x1f8(s0)
;             },
80223012: f9 b1        	j	0x80222ce0 <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE+0xbc>

0000000080223014 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h43388a5d844d0145E>:
;     unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
80223014: 19 71        	addi	sp, sp, -0x80
80223016: 86 fc        	sd	ra, 0x78(sp)
80223018: a2 f8        	sd	s0, 0x70(sp)
8022301a: 00 01        	addi	s0, sp, 0x80
8022301c: 23 34 b4 f8  	sd	a1, -0x78(s0)
80223020: 23 38 c4 f8  	sd	a2, -0x70(s0)
80223024: 23 3c d4 f8  	sd	a3, -0x68(s0)
80223028: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022302c: 23 30 b4 fc  	sd	a1, -0x40(s0)
80223030: 13 05 04 f9  	addi	a0, s0, -0x70
;         if layout.size() != 0 {
80223034: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.size
80223038: 03 35 84 f9  	ld	a0, -0x68(s0)
;         if layout.size() != 0 {
8022303c: 19 e1        	bnez	a0, 0x80223042 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h43388a5d844d0145E+0x2e>
8022303e: 09 a0        	j	0x80223040 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h43388a5d844d0145E+0x2c>
80223040: 91 a0        	j	0x80223084 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h43388a5d844d0145E+0x70>
80223042: 03 35 84 f8  	ld	a0, -0x78(s0)
;         self.pointer as *mut T
80223046: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             unsafe { dealloc(ptr.as_ptr(), layout) }
8022304a: 03 36 04 f9  	ld	a2, -0x70(s0)
8022304e: 83 35 84 f9  	ld	a1, -0x68(s0)
80223052: 23 30 c4 fa  	sd	a2, -0x60(s0)
80223056: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022305a: 13 06 04 fa  	addi	a2, s0, -0x60
;     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
8022305e: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         self.size
80223062: 83 35 84 fa  	ld	a1, -0x58(s0)
;     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
80223066: 23 30 c4 fe  	sd	a2, -0x20(s0)
;         self.align.as_usize()
8022306a: 03 36 04 fa  	ld	a2, -0x60(s0)
8022306e: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         self.0 as usize
80223072: 23 38 c4 fa  	sd	a2, -0x50(s0)
80223076: 03 36 04 fb  	ld	a2, -0x50(s0)
;     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
8022307a: 97 80 fe ff  	auipc	ra, 0xfffe8
8022307e: e7 80 80 5f  	jalr	0x5f8(ra) <ekernel+0xffcbe672>
;         if layout.size() != 0 {
80223082: 09 a0        	j	0x80223084 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h43388a5d844d0145E+0x70>
80223084: e6 70        	ld	ra, 0x78(sp)
80223086: 46 74        	ld	s0, 0x70(sp)
;     }
80223088: 09 61        	addi	sp, sp, 0x80
8022308a: 82 80        	ret

000000008022308c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17hecfac200ab1c6c90E>:
;     fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
8022308c: 79 71        	addi	sp, sp, -0x30
8022308e: 06 f4        	sd	ra, 0x28(sp)
80223090: 22 f0        	sd	s0, 0x20(sp)
80223092: 00 18        	addi	s0, sp, 0x30
80223094: 23 3c a4 fc  	sd	a0, -0x28(s0)
80223098: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022309c: 23 34 c4 fe  	sd	a2, -0x18(s0)
802230a0: 85 46        	li	a3, 0x1
;         self.alloc_impl(layout, true)
802230a2: 97 00 00 00  	auipc	ra, 0x0
802230a6: e7 80 60 97  	jalr	-0x68a(ra) <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E>
802230aa: a2 70        	ld	ra, 0x28(sp)
802230ac: 02 74        	ld	s0, 0x20(sp)
;     }
802230ae: 45 61        	addi	sp, sp, 0x30
802230b0: 82 80        	ret

00000000802230b2 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17h72b6ab647b4d5dceE>:
;     unsafe fn grow(
802230b2: 39 71        	addi	sp, sp, -0x40
802230b4: 06 fc        	sd	ra, 0x38(sp)
802230b6: 22 f8        	sd	s0, 0x30(sp)
802230b8: 80 00        	addi	s0, sp, 0x40
802230ba: 23 30 a4 fc  	sd	a0, -0x40(s0)
802230be: 23 34 b4 fc  	sd	a1, -0x38(s0)
802230c2: 23 38 c4 fc  	sd	a2, -0x30(s0)
802230c6: 23 3c d4 fc  	sd	a3, -0x28(s0)
802230ca: 23 30 e4 fe  	sd	a4, -0x20(s0)
802230ce: 23 34 f4 fe  	sd	a5, -0x18(s0)
802230d2: 01 48        	li	a6, 0x0
;         unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }
802230d4: 97 00 00 00  	auipc	ra, 0x0
802230d8: e7 80 00 b5  	jalr	-0x4b0(ra) <_ZN5alloc5alloc6Global9grow_impl17h08f59bde8f02010eE>
802230dc: e2 70        	ld	ra, 0x38(sp)
802230de: 42 74        	ld	s0, 0x30(sp)
;     }
802230e0: 21 61        	addi	sp, sp, 0x40
802230e2: 82 80        	ret

00000000802230e4 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17hfc1d773fe6bebc25E>:
;     fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
802230e4: 79 71        	addi	sp, sp, -0x30
802230e6: 06 f4        	sd	ra, 0x28(sp)
802230e8: 22 f0        	sd	s0, 0x20(sp)
802230ea: 00 18        	addi	s0, sp, 0x30
802230ec: 23 3c a4 fc  	sd	a0, -0x28(s0)
802230f0: 23 30 b4 fe  	sd	a1, -0x20(s0)
802230f4: 23 34 c4 fe  	sd	a2, -0x18(s0)
802230f8: 81 46        	li	a3, 0x0
;         self.alloc_impl(layout, false)
802230fa: 97 00 00 00  	auipc	ra, 0x0
802230fe: e7 80 e0 91  	jalr	-0x6e2(ra) <_ZN5alloc5alloc6Global10alloc_impl17h28c9a6ca4f8cd998E>
80223102: a2 70        	ld	ra, 0x28(sp)
80223104: 02 74        	ld	s0, 0x20(sp)
;     }
80223106: 45 61        	addi	sp, sp, 0x30
80223108: 82 80        	ret

000000008022310a <_ZN4core3ptr13read_volatile18precondition_check17hedbe4c97c8a80b03E>:
;             const fn precondition_check($($name:$ty),*) {
8022310a: 01 11        	addi	sp, sp, -0x20
8022310c: 06 ec        	sd	ra, 0x18(sp)
8022310e: 22 e8        	sd	s0, 0x10(sp)
80223110: 00 10        	addi	s0, sp, 0x20
80223112: 23 30 a4 fe  	sd	a0, -0x20(s0)
80223116: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => is_aligned_and_not_null(addr, align)
8022311a: 97 60 00 00  	auipc	ra, 0x6
8022311e: e7 80 60 0f  	jalr	0xf6(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE>
80223122: 01 ed        	bnez	a0, 0x8022313a <.Lpcrel_hi0+0x14>
80223124: 09 a0        	j	0x80223126 <.Lpcrel_hi0>

0000000080223126 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
80223126: 17 65 01 00  	auipc	a0, 0x16
8022312a: 13 05 a5 f7  	addi	a0, a0, -0x86
8022312e: 93 05 e0 06  	li	a1, 0x6e
80223132: 97 d0 00 00  	auipc	ra, 0xd
80223136: e7 80 e0 10  	jalr	0x10e(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8022313a: e2 60        	ld	ra, 0x18(sp)
8022313c: 42 64        	ld	s0, 0x10(sp)
;             }
8022313e: 05 61        	addi	sp, sp, 0x20
80223140: 82 80        	ret

0000000080223142 <_ZN4core5alloc6layout6Layout5array5inner17hfc040783740ee306E>:
;         const fn inner(
80223142: 75 71        	addi	sp, sp, -0x90
80223144: 06 e5        	sd	ra, 0x88(sp)
80223146: 22 e1        	sd	s0, 0x80(sp)
80223148: 00 09        	addi	s0, sp, 0x90
8022314a: 23 30 c4 f8  	sd	a2, -0x80(s0)
8022314e: 23 34 b4 f8  	sd	a1, -0x78(s0)
80223152: 23 38 a4 f8  	sd	a0, -0x70(s0)
80223156: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022315a: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022315e: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
80223162: 1d ed        	bnez	a0, 0x802231a0 <_ZN4core5alloc6layout6Layout5array5inner17hfc040783740ee306E+0x5e>
80223164: 09 a0        	j	0x80223166 <_ZN4core5alloc6layout6Layout5array5inner17hfc040783740ee306E+0x24>
80223166: 03 35 84 f8  	ld	a0, -0x78(s0)
8022316a: 83 35 04 f9  	ld	a1, -0x70(s0)
8022316e: 03 36 04 f8  	ld	a2, -0x80(s0)
;     uint_impl! {
80223172: b3 85 c5 02  	mul	a1, a1, a2
80223176: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         self.0 as usize
8022317a: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022317e: 03 35 04 fc  	ld	a0, -0x40(s0)
80223182: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80223186: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022318a: 23 34 a4 fa  	sd	a0, -0x58(s0)
;             unsafe { Ok(Layout::from_size_align_unchecked(array_size, align.as_usize())) }
8022318e: 83 35 84 fa  	ld	a1, -0x58(s0)
80223192: 03 35 04 fb  	ld	a0, -0x50(s0)
80223196: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022319a: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         }
8022319e: a5 a0        	j	0x80223206 <.Lpcrel_hi2+0x16>
802231a0: 03 35 04 f9  	ld	a0, -0x70(s0)
802231a4: 83 35 84 f8  	ld	a1, -0x78(s0)
;         self.0 as usize
802231a8: 23 3c b4 fa  	sd	a1, -0x48(s0)
802231ac: 03 36 84 fb  	ld	a2, -0x48(s0)
802231b0: fd 55        	li	a1, -0x1
802231b2: fe 15        	slli	a1, a1, 0x3f
;         isize::MAX as usize - (align.as_usize() - 1)
802231b4: 91 8d        	sub	a1, a1, a2
802231b6: 23 3c b4 f6  	sd	a1, -0x88(s0)
;             if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
802231ba: 09 cd        	beqz	a0, 0x802231d4 <.Lpcrel_hi0>
802231bc: 09 a0        	j	0x802231be <_ZN4core5alloc6layout6Layout5array5inner17hfc040783740ee306E+0x7c>
802231be: 83 35 04 f8  	ld	a1, -0x80(s0)
802231c2: 03 35 84 f7  	ld	a0, -0x88(s0)
802231c6: 03 36 04 f9  	ld	a2, -0x70(s0)
;             if element_size != 0 && n > Layout::max_size_for_align(align) / element_size {
802231ca: 33 55 c5 02  	divu	a0, a0, a2
802231ce: 63 61 b5 02  	bltu	a0, a1, 0x802231f0 <.Lpcrel_hi2>
802231d2: 31 a8        	j	0x802231ee <.Lpcrel_hi1+0x12>

00000000802231d4 <.Lpcrel_hi0>:
802231d4: 17 65 01 00  	auipc	a0, 0x16
802231d8: 13 05 c5 fc  	addi	a0, a0, -0x34

00000000802231dc <.Lpcrel_hi1>:
802231dc: 97 65 01 00  	auipc	a1, 0x16
802231e0: 13 86 c5 fa  	addi	a2, a1, -0x54
802231e4: e5 45        	li	a1, 0x19
802231e6: 97 d0 00 00  	auipc	ra, 0xd
802231ea: e7 80 20 03  	jalr	0x32(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
; //!An easy file system isolated from the kernel
802231ee: a5 bf        	j	0x80223166 <_ZN4core5alloc6layout6Layout5array5inner17hfc040783740ee306E+0x24>

00000000802231f0 <.Lpcrel_hi2>:
;                 return Err(LayoutError);
802231f0: 17 05 01 00  	auipc	a0, 0x10
802231f4: 13 05 05 0a  	addi	a0, a0, 0xa0
802231f8: 0c 61        	ld	a1, 0x0(a0)
802231fa: 08 65        	ld	a0, 0x8(a0)
802231fc: 23 3c b4 f8  	sd	a1, -0x68(s0)
80223200: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         }
80223204: 09 a0        	j	0x80223206 <.Lpcrel_hi2+0x16>
80223206: 03 35 84 f9  	ld	a0, -0x68(s0)
8022320a: 83 35 04 fa  	ld	a1, -0x60(s0)
8022320e: aa 60        	ld	ra, 0x88(sp)
80223210: 0a 64        	ld	s0, 0x80(sp)
80223212: 49 61        	addi	sp, sp, 0x90
80223214: 82 80        	ret

0000000080223216 <_ZN4core5alloc6layout6Layout8dangling17h17f60223284f3f26E>:
;     pub const fn dangling(&self) -> NonNull<u8> {
80223216: 5d 71        	addi	sp, sp, -0x50
80223218: 86 e4        	sd	ra, 0x48(sp)
8022321a: a2 e0        	sd	s0, 0x40(sp)
8022321c: 80 08        	addi	s0, sp, 0x50
8022321e: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.align.as_usize()
80223222: 08 61        	ld	a0, 0x0(a0)
80223224: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.0 as usize
80223228: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022322c: 03 35 84 fc  	ld	a0, -0x38(s0)
80223230: 23 3c a4 fa  	sd	a0, -0x48(s0)
80223234: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     unsafe { mem::transmute(addr) }
80223238: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
8022323c: 09 a0        	j	0x8022323e <_ZN4core5alloc6layout6Layout8dangling17h17f60223284f3f26E+0x28>
8022323e: 03 35 84 fb  	ld	a0, -0x48(s0)
;             assert_unsafe_precondition!(
80223242: 97 00 00 00  	auipc	ra, 0x0
80223246: e7 80 20 4f  	jalr	0x4f2(ra) <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbe8a0c1d3256ab0aE>
8022324a: 09 a0        	j	0x8022324c <_ZN4core5alloc6layout6Layout8dangling17h17f60223284f3f26E+0x36>
8022324c: 03 35 84 fb  	ld	a0, -0x48(s0)
;             NonNull { pointer: ptr as _ }
80223250: 23 30 a4 fc  	sd	a0, -0x40(s0)
;     }
80223254: 03 35 04 fc  	ld	a0, -0x40(s0)
80223258: a6 60        	ld	ra, 0x48(sp)
8022325a: 06 64        	ld	s0, 0x40(sp)
8022325c: 61 61        	addi	sp, sp, 0x50
8022325e: 82 80        	ret

0000000080223260 <_ZN4core4hint16assert_unchecked18precondition_check17hcf13652ed3844227E>:
;             const fn precondition_check($($name:$ty),*) {
80223260: 01 11        	addi	sp, sp, -0x20
80223262: 06 ec        	sd	ra, 0x18(sp)
80223264: 22 e8        	sd	s0, 0x10(sp)
80223266: 00 10        	addi	s0, sp, 0x20
80223268: a3 07 a4 fe  	sb	a0, -0x11(s0)
;             (cond: bool = cond) => cond,
8022326c: 01 ed        	bnez	a0, 0x80223284 <.Lpcrel_hi0+0x14>
8022326e: 09 a0        	j	0x80223270 <.Lpcrel_hi0>

0000000080223270 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
80223270: 17 65 01 00  	auipc	a0, 0x16
80223274: 13 05 95 f4  	addi	a0, a0, -0xb7
80223278: 93 05 80 06  	li	a1, 0x68
8022327c: 97 d0 00 00  	auipc	ra, 0xd
80223280: e7 80 40 fc  	jalr	-0x3c(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80223284: e2 60        	ld	ra, 0x18(sp)
80223286: 42 64        	ld	s0, 0x10(sp)
;             }
80223288: 05 61        	addi	sp, sp, 0x20
8022328a: 82 80        	ret

000000008022328c <_ZN4core4hint21unreachable_unchecked17h6dbae16677780082E>:
; pub const unsafe fn unreachable_unchecked() -> ! {
8022328c: 41 11        	addi	sp, sp, -0x10
8022328e: 06 e4        	sd	ra, 0x8(sp)
80223290: 22 e0        	sd	s0, 0x0(sp)
80223292: 00 08        	addi	s0, sp, 0x10
;     intrinsics::assert_unsafe_precondition!(
80223294: 97 00 00 00  	auipc	ra, 0x0
80223298: e7 80 a0 00  	jalr	0xa(ra) <_ZN4core4hint21unreachable_unchecked18precondition_check17h15786b657327d190E>
8022329c: 00 00        	unimp

000000008022329e <_ZN4core4hint21unreachable_unchecked18precondition_check17h15786b657327d190E>:
;             const fn precondition_check($($name:$ty),*) {
8022329e: 41 11        	addi	sp, sp, -0x10
802232a0: 06 e4        	sd	ra, 0x8(sp)
802232a2: 22 e0        	sd	s0, 0x0(sp)
802232a4: 00 08        	addi	s0, sp, 0x10

00000000802232a6 <.Lpcrel_hi1>:
;                     ::core::panicking::panic_nounwind(
802232a6: 17 65 01 00  	auipc	a0, 0x16
802232aa: 13 05 b5 f7  	addi	a0, a0, -0x85
802232ae: 93 05 20 05  	li	a1, 0x52
802232b2: 97 d0 00 00  	auipc	ra, 0xd
802232b6: e7 80 e0 f8  	jalr	-0x72(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>

00000000802232ba <_ZN4core4sync6atomic23atomic_compare_exchange17hc21ff81ee1744d3fE>:
; unsafe fn atomic_compare_exchange<T: Copy>(
802232ba: 69 71        	addi	sp, sp, -0x130
802232bc: 06 f6        	sd	ra, 0x128(sp)
802232be: 22 f2        	sd	s0, 0x120(sp)
802232c0: 00 1a        	addi	s0, sp, 0x130
802232c2: 23 30 c4 f0  	sd	a2, -0x100(s0)
802232c6: 23 34 b4 f0  	sd	a1, -0xf8(s0)
802232ca: 23 38 a4 f0  	sd	a0, -0xf0(s0)
802232ce: 23 03 d4 f2  	sb	a3, -0xda(s0)
802232d2: a3 03 e4 f2  	sb	a4, -0xd9(s0)
802232d6: 23 34 a4 fa  	sd	a0, -0x58(s0)
802232da: 23 38 b4 fa  	sd	a1, -0x50(s0)
802232de: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         match (success, failure) {
802232e2: 03 45 64 f2  	lbu	a0, -0xda(s0)
802232e6: 23 3c a4 f0  	sd	a0, -0xe8(s0)
802232ea: 03 35 84 f1  	ld	a0, -0xe8(s0)
;         match (success, failure) {
802232ee: 0e 05        	slli	a0, a0, 0x3

00000000802232f0 <.Lpcrel_hi0>:
802232f0: 97 65 01 00  	auipc	a1, 0x16
802232f4: 93 85 85 f8  	addi	a1, a1, -0x78
802232f8: 2e 95        	add	a0, a0, a1
802232fa: 08 61        	ld	a0, 0x0(a0)
802232fc: 02 85        	jr	a0
802232fe: 00 00        	unimp

0000000080223300 <.LBB0_3>:
80223300: 03 45 74 f2  	lbu	a0, -0xd9(s0)
80223304: 23 3c a4 ee  	sd	a0, -0x108(s0)
80223308: 61 c1        	beqz	a0, 0x802233c8 <.LBB0_15+0x32>
8022330a: 09 a0        	j	0x8022330c <.LBB0_3+0xc>
8022330c: 03 35 84 ef  	ld	a0, -0x108(s0)
80223310: 89 45        	li	a1, 0x2
;         match (success, failure) {
80223312: 63 00 b5 0e  	beq	a0, a1, 0x802233f2 <.LBB0_15+0x5c>
80223316: 09 a0        	j	0x80223318 <.LBB0_3+0x18>
80223318: 03 35 84 ef  	ld	a0, -0x108(s0)
8022331c: 91 45        	li	a1, 0x4
;         match (success, failure) {
8022331e: 63 0f b5 0e  	beq	a0, a1, 0x8022341c <.LBB0_15+0x86>
80223322: 69 a8        	j	0x802233bc <.LBB0_15+0x26>

0000000080223324 <.LBB0_6>:
80223324: 03 45 74 f2  	lbu	a0, -0xd9(s0)
80223328: 23 38 a4 ee  	sd	a0, -0x110(s0)
8022332c: 63 0c 05 12  	beqz	a0, 0x80223464 <.LBB0_15+0xce>
80223330: 09 a0        	j	0x80223332 <.LBB0_6+0xe>
80223332: 03 35 04 ef  	ld	a0, -0x110(s0)
80223336: 89 45        	li	a1, 0x2
;         match (success, failure) {
80223338: 63 0b b5 14  	beq	a0, a1, 0x8022348e <.LBB0_15+0xf8>
8022333c: 09 a0        	j	0x8022333e <.LBB0_6+0x1a>
8022333e: 03 35 04 ef  	ld	a0, -0x110(s0)
80223342: 91 45        	li	a1, 0x4
;         match (success, failure) {
80223344: 63 0a b5 16  	beq	a0, a1, 0x802234b8 <.LBB0_15+0x122>
80223348: 95 a8        	j	0x802233bc <.LBB0_15+0x26>

000000008022334a <.LBB0_9>:
8022334a: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8022334e: 23 34 a4 ee  	sd	a0, -0x118(s0)
80223352: 63 08 05 18  	beqz	a0, 0x802234e2 <.LBB0_15+0x14c>
80223356: 09 a0        	j	0x80223358 <.LBB0_9+0xe>
80223358: 03 35 84 ee  	ld	a0, -0x118(s0)
8022335c: 89 45        	li	a1, 0x2
;         match (success, failure) {
8022335e: 63 07 b5 1a  	beq	a0, a1, 0x8022350c <.LBB0_15+0x176>
80223362: 09 a0        	j	0x80223364 <.LBB0_9+0x1a>
80223364: 03 35 84 ee  	ld	a0, -0x118(s0)
80223368: 91 45        	li	a1, 0x4
;         match (success, failure) {
8022336a: 63 06 b5 1c  	beq	a0, a1, 0x80223536 <.LBB0_15+0x1a0>
8022336e: b9 a0        	j	0x802233bc <.LBB0_15+0x26>

0000000080223370 <.LBB0_12>:
80223370: 03 45 74 f2  	lbu	a0, -0xd9(s0)
80223374: 23 30 a4 ee  	sd	a0, -0x120(s0)
80223378: 63 04 05 1e  	beqz	a0, 0x80223560 <.LBB0_15+0x1ca>
8022337c: 09 a0        	j	0x8022337e <.LBB0_12+0xe>
8022337e: 03 35 04 ee  	ld	a0, -0x120(s0)
80223382: 89 45        	li	a1, 0x2
;         match (success, failure) {
80223384: 63 03 b5 20  	beq	a0, a1, 0x8022358a <.LBB0_15+0x1f4>
80223388: 09 a0        	j	0x8022338a <.LBB0_12+0x1a>
8022338a: 03 35 04 ee  	ld	a0, -0x120(s0)
8022338e: 91 45        	li	a1, 0x4
;         match (success, failure) {
80223390: 63 02 b5 22  	beq	a0, a1, 0x802235b4 <.LBB0_15+0x21e>
80223394: 25 a0        	j	0x802233bc <.LBB0_15+0x26>

0000000080223396 <.LBB0_15>:
80223396: 03 45 74 f2  	lbu	a0, -0xd9(s0)
8022339a: 23 3c a4 ec  	sd	a0, -0x128(s0)
8022339e: 63 00 05 24  	beqz	a0, 0x802235de <.LBB0_15+0x248>
802233a2: 09 a0        	j	0x802233a4 <.LBB0_15+0xe>
802233a4: 03 35 84 ed  	ld	a0, -0x128(s0)
802233a8: 89 45        	li	a1, 0x2
;         match (success, failure) {
802233aa: 63 0f b5 24  	beq	a0, a1, 0x80223608 <.LBB0_15+0x272>
802233ae: 09 a0        	j	0x802233b0 <.LBB0_15+0x1a>
802233b0: 03 35 84 ed  	ld	a0, -0x128(s0)
802233b4: 91 45        	li	a1, 0x4
;         match (success, failure) {
802233b6: 63 0e b5 26  	beq	a0, a1, 0x80223632 <.LBB0_15+0x29c>
802233ba: 09 a0        	j	0x802233bc <.LBB0_15+0x26>
802233bc: 03 45 74 f2  	lbu	a0, -0xd9(s0)
802233c0: 85 45        	li	a1, 0x1
802233c2: 63 05 b5 2c  	beq	a0, a1, 0x8022368c <.Lpcrel_hi1>
802233c6: 29 ae        	j	0x802236e0 <.Lpcrel_hi5>
802233c8: 03 35 84 f0  	ld	a0, -0xf8(s0)
802233cc: 83 36 04 f1  	ld	a3, -0xf0(s0)
802233d0: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),
802233d4: af b5 06 10  	lr.d	a1, (a3)
802233d8: 63 95 a5 00  	bne	a1, a0, 0x802233e2 <.LBB0_15+0x4c>
802233dc: 2f b6 e6 18  	sc.d	a2, a4, (a3)
802233e0: 75 fa        	bnez	a2, 0x802233d4 <.LBB0_15+0x3e>
802233e2: 2d 8d        	xor	a0, a0, a1
802233e4: 13 35 15 00  	seqz	a0, a0
802233e8: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802233ec: 23 00 a4 f4  	sb	a0, -0xc0(s0)
802233f0: 99 a8        	j	0x80223446 <.LBB0_15+0xb0>
802233f2: 03 35 84 f0  	ld	a0, -0xf8(s0)
802233f6: 83 36 04 f1  	ld	a3, -0xf0(s0)
802233fa: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),
802233fe: af b5 06 14  	lr.d.aq	a1, (a3)
80223402: 63 95 a5 00  	bne	a1, a0, 0x8022340c <.LBB0_15+0x76>
80223406: 2f b6 e6 18  	sc.d	a2, a4, (a3)
8022340a: 75 fa        	bnez	a2, 0x802233fe <.LBB0_15+0x68>
8022340c: 2d 8d        	xor	a0, a0, a1
8022340e: 13 35 15 00  	seqz	a0, a0
80223412: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80223416: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8022341a: 35 a0        	j	0x80223446 <.LBB0_15+0xb0>
8022341c: 03 35 84 f0  	ld	a0, -0xf8(s0)
80223420: 83 36 04 f1  	ld	a3, -0xf0(s0)
80223424: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),
80223428: af b5 06 16  	lr.d.aqrl	a1, (a3)
8022342c: 63 95 a5 00  	bne	a1, a0, 0x80223436 <.LBB0_15+0xa0>
80223430: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80223434: 75 fa        	bnez	a2, 0x80223428 <.LBB0_15+0x92>
80223436: 2d 8d        	xor	a0, a0, a1
80223438: 13 35 15 00  	seqz	a0, a0
8022343c: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80223440: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80223444: 09 a0        	j	0x80223446 <.LBB0_15+0xb0>
;     let (val, ok) = unsafe {
80223446: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022344a: 23 38 a4 ec  	sd	a0, -0x130(s0)
8022344e: 23 30 a4 fc  	sd	a0, -0x40(s0)
80223452: 83 45 04 f4  	lbu	a1, -0xc0(s0)
80223456: 13 f5 15 00  	andi	a0, a1, 0x1
8022345a: a3 07 b4 fc  	sb	a1, -0x31(s0)
;     if ok { Ok(val) } else { Err(val) }
8022345e: 63 17 05 20  	bnez	a0, 0x8022366c <.LBB0_15+0x2d6>
80223462: ed aa        	j	0x8022365c <.LBB0_15+0x2c6>
80223464: 03 35 84 f0  	ld	a0, -0xf8(s0)
80223468: 83 36 04 f1  	ld	a3, -0xf0(s0)
8022346c: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),
80223470: af b5 06 10  	lr.d	a1, (a3)
80223474: 63 95 a5 00  	bne	a1, a0, 0x8022347e <.LBB0_15+0xe8>
80223478: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8022347c: 75 fa        	bnez	a2, 0x80223470 <.LBB0_15+0xda>
8022347e: 2d 8d        	xor	a0, a0, a1
80223480: 13 35 15 00  	seqz	a0, a0
80223484: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80223488: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8022348c: 6d bf        	j	0x80223446 <.LBB0_15+0xb0>
8022348e: 03 35 84 f0  	ld	a0, -0xf8(s0)
80223492: 83 36 04 f1  	ld	a3, -0xf0(s0)
80223496: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),
8022349a: af b5 06 14  	lr.d.aq	a1, (a3)
8022349e: 63 95 a5 00  	bne	a1, a0, 0x802234a8 <.LBB0_15+0x112>
802234a2: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802234a6: 75 fa        	bnez	a2, 0x8022349a <.LBB0_15+0x104>
802234a8: 2d 8d        	xor	a0, a0, a1
802234aa: 13 35 15 00  	seqz	a0, a0
802234ae: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802234b2: 23 00 a4 f4  	sb	a0, -0xc0(s0)
802234b6: 41 bf        	j	0x80223446 <.LBB0_15+0xb0>
802234b8: 03 35 84 f0  	ld	a0, -0xf8(s0)
802234bc: 83 36 04 f1  	ld	a3, -0xf0(s0)
802234c0: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),
802234c4: af b5 06 16  	lr.d.aqrl	a1, (a3)
802234c8: 63 95 a5 00  	bne	a1, a0, 0x802234d2 <.LBB0_15+0x13c>
802234cc: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802234d0: 75 fa        	bnez	a2, 0x802234c4 <.LBB0_15+0x12e>
802234d2: 2d 8d        	xor	a0, a0, a1
802234d4: 13 35 15 00  	seqz	a0, a0
802234d8: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802234dc: 23 00 a4 f4  	sb	a0, -0xc0(s0)
802234e0: 9d b7        	j	0x80223446 <.LBB0_15+0xb0>
802234e2: 03 35 84 f0  	ld	a0, -0xf8(s0)
802234e6: 83 36 04 f1  	ld	a3, -0xf0(s0)
802234ea: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
802234ee: af b5 06 14  	lr.d.aq	a1, (a3)
802234f2: 63 95 a5 00  	bne	a1, a0, 0x802234fc <.LBB0_15+0x166>
802234f6: 2f b6 e6 18  	sc.d	a2, a4, (a3)
802234fa: 75 fa        	bnez	a2, 0x802234ee <.LBB0_15+0x158>
802234fc: 2d 8d        	xor	a0, a0, a1
802234fe: 13 35 15 00  	seqz	a0, a0
80223502: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80223506: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8022350a: 35 bf        	j	0x80223446 <.LBB0_15+0xb0>
8022350c: 03 35 84 f0  	ld	a0, -0xf8(s0)
80223510: 83 36 04 f1  	ld	a3, -0xf0(s0)
80223514: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
80223518: af b5 06 14  	lr.d.aq	a1, (a3)
8022351c: 63 95 a5 00  	bne	a1, a0, 0x80223526 <.LBB0_15+0x190>
80223520: 2f b6 e6 18  	sc.d	a2, a4, (a3)
80223524: 75 fa        	bnez	a2, 0x80223518 <.LBB0_15+0x182>
80223526: 2d 8d        	xor	a0, a0, a1
80223528: 13 35 15 00  	seqz	a0, a0
8022352c: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80223530: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80223534: 09 bf        	j	0x80223446 <.LBB0_15+0xb0>
80223536: 03 35 84 f0  	ld	a0, -0xf8(s0)
8022353a: 83 36 04 f1  	ld	a3, -0xf0(s0)
8022353e: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),
80223542: af b5 06 16  	lr.d.aqrl	a1, (a3)
80223546: 63 95 a5 00  	bne	a1, a0, 0x80223550 <.LBB0_15+0x1ba>
8022354a: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8022354e: 75 fa        	bnez	a2, 0x80223542 <.LBB0_15+0x1ac>
80223550: 2d 8d        	xor	a0, a0, a1
80223552: 13 35 15 00  	seqz	a0, a0
80223556: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8022355a: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8022355e: e5 b5        	j	0x80223446 <.LBB0_15+0xb0>
80223560: 03 35 84 f0  	ld	a0, -0xf8(s0)
80223564: 83 36 04 f1  	ld	a3, -0xf0(s0)
80223568: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),
8022356c: af b5 06 14  	lr.d.aq	a1, (a3)
80223570: 63 95 a5 00  	bne	a1, a0, 0x8022357a <.LBB0_15+0x1e4>
80223574: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80223578: 75 fa        	bnez	a2, 0x8022356c <.LBB0_15+0x1d6>
8022357a: 2d 8d        	xor	a0, a0, a1
8022357c: 13 35 15 00  	seqz	a0, a0
80223580: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80223584: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80223588: 7d bd        	j	0x80223446 <.LBB0_15+0xb0>
8022358a: 03 35 84 f0  	ld	a0, -0xf8(s0)
8022358e: 83 36 04 f1  	ld	a3, -0xf0(s0)
80223592: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),
80223596: af b5 06 14  	lr.d.aq	a1, (a3)
8022359a: 63 95 a5 00  	bne	a1, a0, 0x802235a4 <.LBB0_15+0x20e>
8022359e: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802235a2: 75 fa        	bnez	a2, 0x80223596 <.LBB0_15+0x200>
802235a4: 2d 8d        	xor	a0, a0, a1
802235a6: 13 35 15 00  	seqz	a0, a0
802235aa: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802235ae: 23 00 a4 f4  	sb	a0, -0xc0(s0)
802235b2: 51 bd        	j	0x80223446 <.LBB0_15+0xb0>
802235b4: 03 35 84 f0  	ld	a0, -0xf8(s0)
802235b8: 83 36 04 f1  	ld	a3, -0xf0(s0)
802235bc: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),
802235c0: af b5 06 16  	lr.d.aqrl	a1, (a3)
802235c4: 63 95 a5 00  	bne	a1, a0, 0x802235ce <.LBB0_15+0x238>
802235c8: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802235cc: 75 fa        	bnez	a2, 0x802235c0 <.LBB0_15+0x22a>
802235ce: 2d 8d        	xor	a0, a0, a1
802235d0: 13 35 15 00  	seqz	a0, a0
802235d4: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802235d8: 23 00 a4 f4  	sb	a0, -0xc0(s0)
802235dc: ad b5        	j	0x80223446 <.LBB0_15+0xb0>
802235de: 03 35 84 f0  	ld	a0, -0xf8(s0)
802235e2: 83 36 04 f1  	ld	a3, -0xf0(s0)
802235e6: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),
802235ea: af b5 06 16  	lr.d.aqrl	a1, (a3)
802235ee: 63 95 a5 00  	bne	a1, a0, 0x802235f8 <.LBB0_15+0x262>
802235f2: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
802235f6: 75 fa        	bnez	a2, 0x802235ea <.LBB0_15+0x254>
802235f8: 2d 8d        	xor	a0, a0, a1
802235fa: 13 35 15 00  	seqz	a0, a0
802235fe: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80223602: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80223606: 81 b5        	j	0x80223446 <.LBB0_15+0xb0>
80223608: 03 35 84 f0  	ld	a0, -0xf8(s0)
8022360c: 83 36 04 f1  	ld	a3, -0xf0(s0)
80223610: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),
80223614: af b5 06 16  	lr.d.aqrl	a1, (a3)
80223618: 63 95 a5 00  	bne	a1, a0, 0x80223622 <.LBB0_15+0x28c>
8022361c: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
80223620: 75 fa        	bnez	a2, 0x80223614 <.LBB0_15+0x27e>
80223622: 2d 8d        	xor	a0, a0, a1
80223624: 13 35 15 00  	seqz	a0, a0
80223628: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8022362c: 23 00 a4 f4  	sb	a0, -0xc0(s0)
80223630: 19 bd        	j	0x80223446 <.LBB0_15+0xb0>
80223632: 03 35 84 f0  	ld	a0, -0xf8(s0)
80223636: 83 36 04 f1  	ld	a3, -0xf0(s0)
8022363a: 03 37 04 f0  	ld	a4, -0x100(s0)
;             (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),
8022363e: af b5 06 16  	lr.d.aqrl	a1, (a3)
80223642: 63 95 a5 00  	bne	a1, a0, 0x8022364c <.LBB0_15+0x2b6>
80223646: 2f b6 e6 1a  	sc.d.rl	a2, a4, (a3)
8022364a: 75 fa        	bnez	a2, 0x8022363e <.LBB0_15+0x2a8>
8022364c: 2d 8d        	xor	a0, a0, a1
8022364e: 13 35 15 00  	seqz	a0, a0
80223652: 23 3c b4 f2  	sd	a1, -0xc8(s0)
80223656: 23 00 a4 f4  	sb	a0, -0xc0(s0)
8022365a: f5 b3        	j	0x80223446 <.LBB0_15+0xb0>
8022365c: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if ok { Ok(val) } else { Err(val) }
80223660: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80223664: 05 45        	li	a0, 0x1
80223666: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8022366a: 09 a8        	j	0x8022367c <.LBB0_15+0x2e6>
8022366c: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if ok { Ok(val) } else { Err(val) }
80223670: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80223674: 01 45        	li	a0, 0x0
80223676: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8022367a: 09 a0        	j	0x8022367c <.LBB0_15+0x2e6>
; }
8022367c: 03 35 84 f2  	ld	a0, -0xd8(s0)
80223680: 83 35 04 f3  	ld	a1, -0xd0(s0)
80223684: b2 70        	ld	ra, 0x128(sp)
80223686: 12 74        	ld	s0, 0x120(sp)
80223688: 55 61        	addi	sp, sp, 0x130
8022368a: 82 80        	ret

000000008022368c <.Lpcrel_hi1>:
;             (_, Release) => panic!("there is no such thing as a release failure ordering"),
8022368c: 17 65 01 00  	auipc	a0, 0x16
80223690: 93 05 c5 c4  	addi	a1, a0, -0x3b4
80223694: 23 38 b4 fc  	sd	a1, -0x30(s0)
80223698: 05 45        	li	a0, 0x1
8022369a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8022369e: 23 3c b4 f6  	sd	a1, -0x88(s0)
802236a2: 23 30 a4 f8  	sd	a0, -0x80(s0)

00000000802236a6 <.Lpcrel_hi2>:
802236a6: 17 05 01 00  	auipc	a0, 0x10
802236aa: 13 05 a5 be  	addi	a0, a0, -0x416
802236ae: 0c 61        	ld	a1, 0x0(a0)
802236b0: 08 65        	ld	a0, 0x8(a0)
802236b2: 23 3c b4 f8  	sd	a1, -0x68(s0)
802236b6: 23 30 a4 fa  	sd	a0, -0x60(s0)

00000000802236ba <.Lpcrel_hi3>:
802236ba: 17 65 01 00  	auipc	a0, 0x16
802236be: 13 05 e5 c2  	addi	a0, a0, -0x3d2
802236c2: 23 34 a4 f8  	sd	a0, -0x78(s0)
802236c6: 01 45        	li	a0, 0x0
802236c8: 23 38 a4 f8  	sd	a0, -0x70(s0)

00000000802236cc <.Lpcrel_hi4>:
;             (_, Release) => panic!("there is no such thing as a release failure ordering"),
802236cc: 17 65 01 00  	auipc	a0, 0x16
802236d0: 93 05 45 c9  	addi	a1, a0, -0x36c
802236d4: 13 05 84 f7  	addi	a0, s0, -0x88
802236d8: 97 d0 00 00  	auipc	ra, 0xd
802236dc: e7 80 00 ad  	jalr	-0x530(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802236e0 <.Lpcrel_hi5>:
;             (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
802236e0: 17 65 01 00  	auipc	a0, 0x16
802236e4: 93 05 85 cd  	addi	a1, a0, -0x328
802236e8: 23 30 b4 fe  	sd	a1, -0x20(s0)
802236ec: 05 45        	li	a0, 0x1
802236ee: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
802236f2: 23 34 b4 f4  	sd	a1, -0xb8(s0)
802236f6: 23 38 a4 f4  	sd	a0, -0xb0(s0)

00000000802236fa <.Lpcrel_hi6>:
802236fa: 17 05 01 00  	auipc	a0, 0x10
802236fe: 13 05 65 b9  	addi	a0, a0, -0x46a
80223702: 0c 61        	ld	a1, 0x0(a0)
80223704: 08 65        	ld	a0, 0x8(a0)
80223706: 23 34 b4 f6  	sd	a1, -0x98(s0)
8022370a: 23 38 a4 f6  	sd	a0, -0x90(s0)

000000008022370e <.Lpcrel_hi7>:
8022370e: 17 65 01 00  	auipc	a0, 0x16
80223712: 13 05 a5 bd  	addi	a0, a0, -0x426
80223716: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8022371a: 01 45        	li	a0, 0x0
8022371c: 23 30 a4 f6  	sd	a0, -0xa0(s0)

0000000080223720 <.Lpcrel_hi8>:
;             (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
80223720: 17 65 01 00  	auipc	a0, 0x16
80223724: 93 05 85 ca  	addi	a1, a0, -0x358
80223728: 13 05 84 f4  	addi	a0, s0, -0xb8
8022372c: 97 d0 00 00  	auipc	ra, 0xd
80223730: e7 80 c0 a7  	jalr	-0x584(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080223734 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hbe8a0c1d3256ab0aE>:
;             const fn precondition_check($($name:$ty),*) {
80223734: 01 11        	addi	sp, sp, -0x20
80223736: 06 ec        	sd	ra, 0x18(sp)
80223738: 22 e8        	sd	s0, 0x10(sp)
8022373a: 00 10        	addi	s0, sp, 0x20
8022373c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             const_eval_select((self as *mut u8,), const_impl, runtime_impl)
80223740: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
80223744: 01 ed        	bnez	a0, 0x8022375c <.Lpcrel_hi0+0x14>
80223746: 09 a0        	j	0x80223748 <.Lpcrel_hi0>

0000000080223748 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
80223748: 17 65 01 00  	auipc	a0, 0x16
8022374c: 13 05 85 c9  	addi	a0, a0, -0x368
80223750: 93 05 d0 05  	li	a1, 0x5d
80223754: 97 d0 00 00  	auipc	ra, 0xd
80223758: e7 80 c0 ae  	jalr	-0x514(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8022375c: e2 60        	ld	ra, 0x18(sp)
8022375e: 42 64        	ld	s0, 0x10(sp)
;             }
80223760: 05 61        	addi	sp, sp, 0x20
80223762: 82 80        	ret

0000000080223764 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd004a1cbc3f29b64E>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
80223764: 01 11        	addi	sp, sp, -0x20
80223766: 06 ec        	sd	ra, 0x18(sp)
80223768: 22 e8        	sd	s0, 0x10(sp)
8022376a: 00 10        	addi	s0, sp, 0x20
8022376c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80223770: 23 34 b4 fe  	sd	a1, -0x18(s0)
80223774: 08 61        	ld	a0, 0x0(a0)
80223776: 97 00 00 00  	auipc	ra, 0x0
8022377a: e7 80 40 0b  	jalr	0xb4(ra) <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E>
8022377e: e2 60        	ld	ra, 0x18(sp)
80223780: 42 64        	ld	s0, 0x10(sp)
80223782: 05 61        	addi	sp, sp, 0x20
80223784: 82 80        	ret

0000000080223786 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he6b38092e91b4fbaE>:
80223786: 01 11        	addi	sp, sp, -0x20
80223788: 06 ec        	sd	ra, 0x18(sp)
8022378a: 22 e8        	sd	s0, 0x10(sp)
8022378c: 00 10        	addi	s0, sp, 0x20
8022378e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80223792: 23 34 b4 fe  	sd	a1, -0x18(s0)
80223796: 08 61        	ld	a0, 0x0(a0)
80223798: 97 00 00 00  	auipc	ra, 0x0
8022379c: e7 80 00 01  	jalr	0x10(ra) <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E>
802237a0: e2 60        	ld	ra, 0x18(sp)
802237a2: 42 64        	ld	s0, 0x10(sp)
802237a4: 05 61        	addi	sp, sp, 0x20
802237a6: 82 80        	ret

00000000802237a8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E>:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
802237a8: 39 71        	addi	sp, sp, -0x40
802237aa: 06 fc        	sd	ra, 0x38(sp)
802237ac: 22 f8        	sd	s0, 0x30(sp)
802237ae: 80 00        	addi	s0, sp, 0x40
802237b0: 23 34 b4 fc  	sd	a1, -0x38(s0)
802237b4: 23 38 a4 fc  	sd	a0, -0x30(s0)
802237b8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802237bc: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if f.debug_lower_hex() {
802237c0: 03 c5 45 03  	lbu	a0, 0x34(a1)
802237c4: 41 89        	andi	a0, a0, 0x10
802237c6: 11 e9        	bnez	a0, 0x802237da <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E+0x32>
802237c8: 09 a0        	j	0x802237ca <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E+0x22>
802237ca: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 } else if f.debug_upper_hex() {
802237ce: 03 45 45 03  	lbu	a0, 0x34(a0)
802237d2: 13 75 05 02  	andi	a0, a0, 0x20
802237d6: 09 cd        	beqz	a0, 0x802237f0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E+0x48>
802237d8: 3d a0        	j	0x80223806 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E+0x5e>
802237da: 83 35 84 fc  	ld	a1, -0x38(s0)
802237de: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::LowerHex::fmt(self, f)
802237e2: 97 b0 00 00  	auipc	ra, 0xb
802237e6: e7 80 a0 52  	jalr	0x52a(ra) <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h7332f3b1315002d6E>
802237ea: a3 0f a4 fc  	sb	a0, -0x21(s0)
802237ee: 05 a8        	j	0x8022381e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E+0x76>
802237f0: 83 35 84 fc  	ld	a1, -0x38(s0)
802237f4: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::Display::fmt(self, f)
802237f8: 97 e0 00 00  	auipc	ra, 0xe
802237fc: e7 80 40 84  	jalr	-0x7bc(ra) <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17hcdc3a7a7d6bb39feE>
80223800: a3 0f a4 fc  	sb	a0, -0x21(s0)
80223804: 21 a8        	j	0x8022381c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E+0x74>
80223806: 83 35 84 fc  	ld	a1, -0x38(s0)
8022380a: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::UpperHex::fmt(self, f)
8022380e: 97 b0 00 00  	auipc	ra, 0xb
80223812: e7 80 00 57  	jalr	0x570(ra) <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17haa0c736f7a89de33E>
80223816: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022381a: 09 a0        	j	0x8022381c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E+0x74>
;                 if f.debug_lower_hex() {
8022381c: 09 a0        	j	0x8022381e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hf437c9d9c896e725E+0x76>
;             }
8022381e: 03 45 f4 fd  	lbu	a0, -0x21(s0)
80223822: e2 70        	ld	ra, 0x38(sp)
80223824: 42 74        	ld	s0, 0x30(sp)
80223826: 21 61        	addi	sp, sp, 0x40
80223828: 82 80        	ret

000000008022382a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E>:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8022382a: 39 71        	addi	sp, sp, -0x40
8022382c: 06 fc        	sd	ra, 0x38(sp)
8022382e: 22 f8        	sd	s0, 0x30(sp)
80223830: 80 00        	addi	s0, sp, 0x40
80223832: 23 34 b4 fc  	sd	a1, -0x38(s0)
80223836: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022383a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022383e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if f.debug_lower_hex() {
80223842: 03 c5 45 03  	lbu	a0, 0x34(a1)
80223846: 41 89        	andi	a0, a0, 0x10
80223848: 11 e9        	bnez	a0, 0x8022385c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E+0x32>
8022384a: 09 a0        	j	0x8022384c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E+0x22>
8022384c: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 } else if f.debug_upper_hex() {
80223850: 03 45 45 03  	lbu	a0, 0x34(a0)
80223854: 13 75 05 02  	andi	a0, a0, 0x20
80223858: 09 cd        	beqz	a0, 0x80223872 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E+0x48>
8022385a: 3d a0        	j	0x80223888 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E+0x5e>
8022385c: 83 35 84 fc  	ld	a1, -0x38(s0)
80223860: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::LowerHex::fmt(self, f)
80223864: 97 b0 00 00  	auipc	ra, 0xb
80223868: e7 80 00 75  	jalr	0x750(ra) <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E>
8022386c: a3 0f a4 fc  	sb	a0, -0x21(s0)
80223870: 05 a8        	j	0x802238a0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E+0x76>
80223872: 83 35 84 fc  	ld	a1, -0x38(s0)
80223876: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::Display::fmt(self, f)
8022387a: 97 e0 00 00  	auipc	ra, 0xe
8022387e: e7 80 40 81  	jalr	-0x7ec(ra) <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h6446c111abea6893E>
80223882: a3 0f a4 fc  	sb	a0, -0x21(s0)
80223886: 21 a8        	j	0x8022389e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E+0x74>
80223888: 83 35 84 fc  	ld	a1, -0x38(s0)
8022388c: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::UpperHex::fmt(self, f)
80223890: 97 b0 00 00  	auipc	ra, 0xb
80223894: e7 80 20 79  	jalr	0x792(ra) <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h035bce1319a3ef5cE>
80223898: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022389c: 09 a0        	j	0x8022389e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E+0x74>
;                 if f.debug_lower_hex() {
8022389e: 09 a0        	j	0x802238a0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h07c2b4fc7bfefce1E+0x76>
;             }
802238a0: 03 45 f4 fd  	lbu	a0, -0x21(s0)
802238a4: e2 70        	ld	ra, 0x38(sp)
802238a6: 42 74        	ld	s0, 0x30(sp)
802238a8: 21 61        	addi	sp, sp, 0x40
802238aa: 82 80        	ret

00000000802238ac <_ZN4core5slice3raw14from_raw_parts17h8ceb5bf3fccc0a7bE>:
; pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
802238ac: 1d 71        	addi	sp, sp, -0x60
802238ae: 86 ec        	sd	ra, 0x58(sp)
802238b0: a2 e8        	sd	s0, 0x50(sp)
802238b2: 80 10        	addi	s0, sp, 0x60
802238b4: 23 34 b4 fa  	sd	a1, -0x58(s0)
802238b8: 23 38 a4 fa  	sd	a0, -0x50(s0)
802238bc: 23 3c a4 fc  	sd	a0, -0x28(s0)
802238c0: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         assert_unsafe_precondition!(
802238c4: 09 a0        	j	0x802238c6 <_ZN4core5slice3raw14from_raw_parts17h8ceb5bf3fccc0a7bE+0x1a>
802238c6: 83 36 84 fa  	ld	a3, -0x58(s0)
802238ca: 03 35 04 fb  	ld	a0, -0x50(s0)
802238ce: 05 46        	li	a2, 0x1
;         assert_unsafe_precondition!(
802238d0: b2 85        	mv	a1, a2
802238d2: 97 00 00 00  	auipc	ra, 0x0
802238d6: e7 80 20 0a  	jalr	0xa2(ra) <_ZN4core5slice3raw14from_raw_parts18precondition_check17hccef76a89e66d132E>
802238da: 09 a0        	j	0x802238dc <_ZN4core5slice3raw14from_raw_parts17h8ceb5bf3fccc0a7bE+0x30>
802238dc: 03 35 84 fa  	ld	a0, -0x58(s0)
802238e0: 83 35 04 fb  	ld	a1, -0x50(s0)
;         self as _
802238e4: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
802238e8: 23 34 b4 fc  	sd	a1, -0x38(s0)
802238ec: 23 38 a4 fc  	sd	a0, -0x30(s0)
802238f0: 83 35 84 fc  	ld	a1, -0x38(s0)
802238f4: 03 35 04 fd  	ld	a0, -0x30(s0)
802238f8: 23 3c b4 fa  	sd	a1, -0x48(s0)
802238fc: 23 30 a4 fc  	sd	a0, -0x40(s0)
80223900: 03 35 84 fb  	ld	a0, -0x48(s0)
80223904: 83 35 04 fc  	ld	a1, -0x40(s0)
80223908: e6 60        	ld	ra, 0x58(sp)
8022390a: 46 64        	ld	s0, 0x50(sp)
; }
8022390c: 25 61        	addi	sp, sp, 0x60
8022390e: 82 80        	ret

0000000080223910 <_ZN4core5slice3raw18from_raw_parts_mut17h0634ea8f918e83aaE>:
; pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
80223910: 1d 71        	addi	sp, sp, -0x60
80223912: 86 ec        	sd	ra, 0x58(sp)
80223914: a2 e8        	sd	s0, 0x50(sp)
80223916: 80 10        	addi	s0, sp, 0x60
80223918: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022391c: 23 38 a4 fa  	sd	a0, -0x50(s0)
80223920: 23 3c a4 fc  	sd	a0, -0x28(s0)
80223924: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         assert_unsafe_precondition!(
80223928: 09 a0        	j	0x8022392a <_ZN4core5slice3raw18from_raw_parts_mut17h0634ea8f918e83aaE+0x1a>
8022392a: 83 36 84 fa  	ld	a3, -0x58(s0)
8022392e: 03 35 04 fb  	ld	a0, -0x50(s0)
80223932: 05 46        	li	a2, 0x1
;         assert_unsafe_precondition!(
80223934: b2 85        	mv	a1, a2
80223936: 97 00 00 00  	auipc	ra, 0x0
8022393a: e7 80 00 0f  	jalr	0xf0(ra) <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17hf68202839596909fE>
8022393e: 09 a0        	j	0x80223940 <_ZN4core5slice3raw18from_raw_parts_mut17h0634ea8f918e83aaE+0x30>
80223940: 03 35 84 fa  	ld	a0, -0x58(s0)
80223944: 83 35 04 fb  	ld	a1, -0x50(s0)
;         self as _
80223948: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8022394c: 23 34 b4 fc  	sd	a1, -0x38(s0)
80223950: 23 38 a4 fc  	sd	a0, -0x30(s0)
80223954: 83 35 84 fc  	ld	a1, -0x38(s0)
80223958: 03 35 04 fd  	ld	a0, -0x30(s0)
8022395c: 23 3c b4 fa  	sd	a1, -0x48(s0)
80223960: 23 30 a4 fc  	sd	a0, -0x40(s0)
80223964: 03 35 84 fb  	ld	a0, -0x48(s0)
80223968: 83 35 04 fc  	ld	a1, -0x40(s0)
8022396c: e6 60        	ld	ra, 0x58(sp)
8022396e: 46 64        	ld	s0, 0x50(sp)
; }
80223970: 25 61        	addi	sp, sp, 0x60
80223972: 82 80        	ret

0000000080223974 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hccef76a89e66d132E>:
;             const fn precondition_check($($name:$ty),*) {
80223974: 1d 71        	addi	sp, sp, -0x60
80223976: 86 ec        	sd	ra, 0x58(sp)
80223978: a2 e8        	sd	s0, 0x50(sp)
8022397a: 80 10        	addi	s0, sp, 0x60
8022397c: 23 38 d4 fa  	sd	a3, -0x50(s0)
80223980: 23 3c c4 fa  	sd	a2, -0x48(s0)
80223984: 2e 86        	mv	a2, a1
80223986: 83 35 84 fb  	ld	a1, -0x48(s0)
8022398a: 23 30 c4 fc  	sd	a2, -0x40(s0)
8022398e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80223992: 23 3c c4 fc  	sd	a2, -0x28(s0)
80223996: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022399a: 23 34 d4 fe  	sd	a3, -0x18(s0)
;                 is_aligned_and_not_null(data, align)
8022399e: 97 60 00 00  	auipc	ra, 0x6
802239a2: e7 80 20 87  	jalr	-0x78e(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE>
802239a6: 19 e1        	bnez	a0, 0x802239ac <_ZN4core5slice3raw14from_raw_parts18precondition_check17hccef76a89e66d132E+0x38>
802239a8: 09 a0        	j	0x802239aa <_ZN4core5slice3raw14from_raw_parts18precondition_check17hccef76a89e66d132E+0x36>
; //!An easy file system isolated from the kernel
802239aa: 09 a8        	j	0x802239bc <.Lpcrel_hi0>
802239ac: 03 35 04 fc  	ld	a0, -0x40(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
802239b0: 93 35 15 00  	seqz	a1, a0
802239b4: 23 34 b4 fa  	sd	a1, -0x58(s0)
802239b8: 01 cd        	beqz	a0, 0x802239d0 <.Lpcrel_hi0+0x14>
802239ba: 39 a8        	j	0x802239d8 <.Lpcrel_hi0+0x1c>

00000000802239bc <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
802239bc: 17 65 01 00  	auipc	a0, 0x16
802239c0: 13 05 d5 b2  	addi	a0, a0, -0x4d3
802239c4: 93 05 20 0a  	li	a1, 0xa2
802239c8: 97 d0 00 00  	auipc	ra, 0xd
802239cc: e7 80 80 87  	jalr	-0x788(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
802239d0: 7d 55        	li	a0, -0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
802239d2: 23 34 a4 fc  	sd	a0, -0x38(s0)
802239d6: 31 a0        	j	0x802239e2 <.Lpcrel_hi0+0x26>
802239d8: 03 35 84 fa  	ld	a0, -0x58(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
802239dc: 05 89        	andi	a0, a0, 0x1
802239de: 15 e1        	bnez	a0, 0x80223a02 <.Lpcrel_hi1>
802239e0: 01 a8        	j	0x802239f0 <.Lpcrel_hi0+0x34>
802239e2: 83 35 04 fb  	ld	a1, -0x50(s0)
;     len <= max_len
802239e6: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 && is_valid_allocation_size(size, len)
802239ea: 63 7a b5 02  	bgeu	a0, a1, 0x80223a1e <.Lpcrel_hi2+0x14>
802239ee: 3d a0        	j	0x80223a1c <.Lpcrel_hi2+0x12>
802239f0: 83 35 04 fc  	ld	a1, -0x40(s0)
802239f4: 7d 55        	li	a0, -0x1
802239f6: 05 81        	srli	a0, a0, 0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
802239f8: 33 55 b5 02  	divu	a0, a0, a1
802239fc: 23 34 a4 fc  	sd	a0, -0x38(s0)
80223a00: cd b7        	j	0x802239e2 <.Lpcrel_hi0+0x26>

0000000080223a02 <.Lpcrel_hi1>:
80223a02: 17 65 01 00  	auipc	a0, 0x16
80223a06: 13 05 e5 ac  	addi	a0, a0, -0x532

0000000080223a0a <.Lpcrel_hi2>:
80223a0a: 97 65 01 00  	auipc	a1, 0x16
80223a0e: 13 86 65 aa  	addi	a2, a1, -0x55a
80223a12: e5 45        	li	a1, 0x19
80223a14: 97 d0 00 00  	auipc	ra, 0xd
80223a18: e7 80 40 80  	jalr	-0x7fc(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
; //!An easy file system isolated from the kernel
80223a1c: 45 b7        	j	0x802239bc <.Lpcrel_hi0>
80223a1e: e6 60        	ld	ra, 0x58(sp)
80223a20: 46 64        	ld	s0, 0x50(sp)
;             }
80223a22: 25 61        	addi	sp, sp, 0x60
80223a24: 82 80        	ret

0000000080223a26 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17hf68202839596909fE>:
;             const fn precondition_check($($name:$ty),*) {
80223a26: 1d 71        	addi	sp, sp, -0x60
80223a28: 86 ec        	sd	ra, 0x58(sp)
80223a2a: a2 e8        	sd	s0, 0x50(sp)
80223a2c: 80 10        	addi	s0, sp, 0x60
80223a2e: 23 38 d4 fa  	sd	a3, -0x50(s0)
80223a32: 23 3c c4 fa  	sd	a2, -0x48(s0)
80223a36: 2e 86        	mv	a2, a1
80223a38: 83 35 84 fb  	ld	a1, -0x48(s0)
80223a3c: 23 30 c4 fc  	sd	a2, -0x40(s0)
80223a40: 23 38 a4 fc  	sd	a0, -0x30(s0)
80223a44: 23 3c c4 fc  	sd	a2, -0x28(s0)
80223a48: 23 30 b4 fe  	sd	a1, -0x20(s0)
80223a4c: 23 34 d4 fe  	sd	a3, -0x18(s0)
;                 is_aligned_and_not_null(data, align)
80223a50: 97 50 00 00  	auipc	ra, 0x5
80223a54: e7 80 00 7c  	jalr	0x7c0(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE>
80223a58: 19 e1        	bnez	a0, 0x80223a5e <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17hf68202839596909fE+0x38>
80223a5a: 09 a0        	j	0x80223a5c <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17hf68202839596909fE+0x36>
; //!An easy file system isolated from the kernel
80223a5c: 09 a8        	j	0x80223a6e <.Lpcrel_hi3>
80223a5e: 03 35 04 fc  	ld	a0, -0x40(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80223a62: 93 35 15 00  	seqz	a1, a0
80223a66: 23 34 b4 fa  	sd	a1, -0x58(s0)
80223a6a: 01 cd        	beqz	a0, 0x80223a82 <.Lpcrel_hi3+0x14>
80223a6c: 39 a8        	j	0x80223a8a <.Lpcrel_hi3+0x1c>

0000000080223a6e <.Lpcrel_hi3>:
;                     ::core::panicking::panic_nounwind(
80223a6e: 17 65 01 00  	auipc	a0, 0x16
80223a72: 13 05 d5 b1  	addi	a0, a0, -0x4e3
80223a76: 93 05 60 0a  	li	a1, 0xa6
80223a7a: 97 c0 00 00  	auipc	ra, 0xc
80223a7e: e7 80 60 7c  	jalr	0x7c6(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80223a82: 7d 55        	li	a0, -0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80223a84: 23 34 a4 fc  	sd	a0, -0x38(s0)
80223a88: 31 a0        	j	0x80223a94 <.Lpcrel_hi3+0x26>
80223a8a: 03 35 84 fa  	ld	a0, -0x58(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80223a8e: 05 89        	andi	a0, a0, 0x1
80223a90: 15 e1        	bnez	a0, 0x80223ab4 <.Lpcrel_hi4>
80223a92: 01 a8        	j	0x80223aa2 <.Lpcrel_hi3+0x34>
80223a94: 83 35 04 fb  	ld	a1, -0x50(s0)
;     len <= max_len
80223a98: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 && is_valid_allocation_size(size, len)
80223a9c: 63 7a b5 02  	bgeu	a0, a1, 0x80223ad0 <.Lpcrel_hi5+0x14>
80223aa0: 3d a0        	j	0x80223ace <.Lpcrel_hi5+0x12>
80223aa2: 83 35 04 fc  	ld	a1, -0x40(s0)
80223aa6: 7d 55        	li	a0, -0x1
80223aa8: 05 81        	srli	a0, a0, 0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
80223aaa: 33 55 b5 02  	divu	a0, a0, a1
80223aae: 23 34 a4 fc  	sd	a0, -0x38(s0)
80223ab2: cd b7        	j	0x80223a94 <.Lpcrel_hi3+0x26>

0000000080223ab4 <.Lpcrel_hi4>:
80223ab4: 17 65 01 00  	auipc	a0, 0x16
80223ab8: 13 05 c5 a1  	addi	a0, a0, -0x5e4

0000000080223abc <.Lpcrel_hi5>:
80223abc: 97 65 01 00  	auipc	a1, 0x16
80223ac0: 13 86 45 9f  	addi	a2, a1, -0x60c
80223ac4: e5 45        	li	a1, 0x19
80223ac6: 97 c0 00 00  	auipc	ra, 0xc
80223aca: e7 80 20 75  	jalr	0x752(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
; //!An easy file system isolated from the kernel
80223ace: 45 b7        	j	0x80223a6e <.Lpcrel_hi3>
80223ad0: e6 60        	ld	ra, 0x58(sp)
80223ad2: 46 64        	ld	s0, 0x50(sp)
;             }
80223ad4: 25 61        	addi	sp, sp, 0x60
80223ad6: 82 80        	ret

0000000080223ad8 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb3f1b4c63a96d16cE>:
;     fn index(&self, index: I) -> &Self::Output {
80223ad8: 75 71        	addi	sp, sp, -0x90
80223ada: 06 e5        	sd	ra, 0x88(sp)
80223adc: 22 e1        	sd	s0, 0x80(sp)
80223ade: 00 09        	addi	s0, sp, 0x90
80223ae0: 23 3c d4 f6  	sd	a3, -0x88(s0)
80223ae4: 23 30 c4 f8  	sd	a2, -0x80(s0)
80223ae8: 23 34 b4 f8  	sd	a1, -0x78(s0)
80223aec: aa 86        	mv	a3, a0
80223aee: 23 38 d4 f8  	sd	a3, -0x70(s0)
80223af2: 23 3c d4 f8  	sd	a3, -0x68(s0)
80223af6: 23 30 b4 fa  	sd	a1, -0x60(s0)
80223afa: 23 34 c4 fa  	sd	a2, -0x58(s0)
80223afe: 23 38 d4 fa  	sd	a3, -0x50(s0)
80223b02: 13 05 00 20  	li	a0, 0x200
80223b06: 23 3c a4 fa  	sd	a0, -0x48(s0)
80223b0a: 23 30 b4 fc  	sd	a1, -0x40(s0)
80223b0e: 23 34 c4 fc  	sd	a2, -0x38(s0)
80223b12: 23 38 b4 fc  	sd	a1, -0x30(s0)
80223b16: 23 3c c4 fc  	sd	a2, -0x28(s0)
80223b1a: 23 30 d4 fe  	sd	a3, -0x20(s0)
80223b1e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.start > self.end {
80223b22: 63 6a b6 00  	bltu	a2, a1, 0x80223b36 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb3f1b4c63a96d16cE+0x5e>
80223b26: 09 a0        	j	0x80223b28 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb3f1b4c63a96d16cE+0x50>
80223b28: 83 35 04 f8  	ld	a1, -0x80(s0)
80223b2c: 13 05 00 20  	li	a0, 0x200
;         } else if self.end > slice.len() {
80223b30: 63 6d b5 00  	bltu	a0, a1, 0x80223b4a <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb3f1b4c63a96d16cE+0x72>
80223b34: 2d a0        	j	0x80223b5e <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hb3f1b4c63a96d16cE+0x86>
80223b36: 03 36 84 f7  	ld	a2, -0x88(s0)
80223b3a: 83 35 04 f8  	ld	a1, -0x80(s0)
80223b3e: 03 35 84 f8  	ld	a0, -0x78(s0)
;             slice_index_order_fail(self.start, self.end);
80223b42: 97 e0 00 00  	auipc	ra, 0xe
80223b46: e7 80 20 ba  	jalr	-0x45e(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
80223b4a: 03 36 84 f7  	ld	a2, -0x88(s0)
80223b4e: 03 35 04 f8  	ld	a0, -0x80(s0)
80223b52: 93 05 00 20  	li	a1, 0x200
;             slice_end_index_len_fail(self.end, slice.len());
80223b56: 97 e0 00 00  	auipc	ra, 0xe
80223b5a: e7 80 a0 b4  	jalr	-0x4b6(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
80223b5e: 03 36 04 f9  	ld	a2, -0x70(s0)
80223b62: 83 35 04 f8  	ld	a1, -0x80(s0)
80223b66: 03 35 84 f8  	ld	a0, -0x78(s0)
80223b6a: 93 06 00 20  	li	a3, 0x200
;         unsafe { &*self.get_unchecked(slice) }
80223b6e: 97 b0 ff ff  	auipc	ra, 0xffffb
80223b72: e7 80 80 76  	jalr	0x768(ra) <ekernel+0xffcd22d6>
80223b76: aa 60        	ld	ra, 0x88(sp)
80223b78: 0a 64        	ld	s0, 0x80(sp)
;     }
80223b7a: 49 61        	addi	sp, sp, 0x90
80223b7c: 82 80        	ret

0000000080223b7e <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hee47700e6debcc6bE>:
;     fn index(&self, index: I) -> &Self::Output {
80223b7e: 35 71        	addi	sp, sp, -0xa0
80223b80: 06 ed        	sd	ra, 0x98(sp)
80223b82: 22 e9        	sd	s0, 0x90(sp)
80223b84: 00 11        	addi	s0, sp, 0xa0
80223b86: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80223b8a: aa 86        	mv	a3, a0
80223b8c: 23 34 d4 f6  	sd	a3, -0x98(s0)
80223b90: 23 30 d4 f8  	sd	a3, -0x80(s0)
80223b94: 23 34 b4 f8  	sd	a1, -0x78(s0)
80223b98: 23 38 d4 f8  	sd	a3, -0x70(s0)
80223b9c: 71 46        	li	a2, 0x1c
80223b9e: 23 3c c4 f8  	sd	a2, -0x68(s0)
80223ba2: 23 30 b4 fa  	sd	a1, -0x60(s0)
80223ba6: 23 3c b4 fa  	sd	a1, -0x48(s0)
80223baa: 23 30 d4 fc  	sd	a3, -0x40(s0)
80223bae: 23 34 c4 fc  	sd	a2, -0x38(s0)
80223bb2: 01 45        	li	a0, 0x0
;         (0..self.end).index(slice)
80223bb4: 23 34 a4 fa  	sd	a0, -0x58(s0)
80223bb8: 23 38 b4 fa  	sd	a1, -0x50(s0)
80223bbc: 83 35 84 fa  	ld	a1, -0x58(s0)
80223bc0: 23 38 b4 f6  	sd	a1, -0x90(s0)
80223bc4: 03 35 04 fb  	ld	a0, -0x50(s0)
80223bc8: 23 3c a4 f6  	sd	a0, -0x88(s0)
80223bcc: 23 38 b4 fc  	sd	a1, -0x30(s0)
80223bd0: 23 3c a4 fc  	sd	a0, -0x28(s0)
80223bd4: 23 30 d4 fe  	sd	a3, -0x20(s0)
80223bd8: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         if self.start > self.end {
80223bdc: 63 69 b5 00  	bltu	a0, a1, 0x80223bee <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hee47700e6debcc6bE+0x70>
80223be0: 09 a0        	j	0x80223be2 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hee47700e6debcc6bE+0x64>
80223be2: 83 35 84 f7  	ld	a1, -0x88(s0)
80223be6: 71 45        	li	a0, 0x1c
;         } else if self.end > slice.len() {
80223be8: 63 6d b5 00  	bltu	a0, a1, 0x80223c02 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hee47700e6debcc6bE+0x84>
80223bec: 25 a0        	j	0x80223c14 <_ZN4core5array85_$LT$impl$u20$core..ops..index..Index$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$5index17hee47700e6debcc6bE+0x96>
80223bee: 03 36 04 f6  	ld	a2, -0xa0(s0)
80223bf2: 83 35 84 f7  	ld	a1, -0x88(s0)
80223bf6: 03 35 04 f7  	ld	a0, -0x90(s0)
;             slice_index_order_fail(self.start, self.end);
80223bfa: 97 e0 00 00  	auipc	ra, 0xe
80223bfe: e7 80 a0 ae  	jalr	-0x516(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
80223c02: 03 36 04 f6  	ld	a2, -0xa0(s0)
80223c06: 03 35 84 f7  	ld	a0, -0x88(s0)
80223c0a: f1 45        	li	a1, 0x1c
;             slice_end_index_len_fail(self.end, slice.len());
80223c0c: 97 e0 00 00  	auipc	ra, 0xe
80223c10: e7 80 40 a9  	jalr	-0x56c(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
80223c14: 03 36 84 f6  	ld	a2, -0x98(s0)
80223c18: 83 35 84 f7  	ld	a1, -0x88(s0)
80223c1c: 03 35 04 f7  	ld	a0, -0x90(s0)
80223c20: f1 46        	li	a3, 0x1c
;         unsafe { &*self.get_unchecked(slice) }
80223c22: 97 b0 ff ff  	auipc	ra, 0xffffb
80223c26: e7 80 40 6b  	jalr	0x6b4(ra) <ekernel+0xffcd22d6>
80223c2a: ea 60        	ld	ra, 0x98(sp)
80223c2c: 4a 64        	ld	s0, 0x90(sp)
;     }
80223c2e: 0d 61        	addi	sp, sp, 0xa0
80223c30: 82 80        	ret

0000000080223c32 <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17hc9cd4771dfc27ce2E>:
;     fn index_mut(&mut self, index: I) -> &mut Self::Output {
80223c32: 39 71        	addi	sp, sp, -0x40
80223c34: 06 fc        	sd	ra, 0x38(sp)
80223c36: 22 f8        	sd	s0, 0x30(sp)
80223c38: 80 00        	addi	s0, sp, 0x40
80223c3a: b2 86        	mv	a3, a2
80223c3c: 23 30 b4 fc  	sd	a1, -0x40(s0)
80223c40: aa 85        	mv	a1, a0
80223c42: 03 35 04 fc  	ld	a0, -0x40(s0)
80223c46: 23 34 b4 fc  	sd	a1, -0x38(s0)
80223c4a: 23 38 a4 fc  	sd	a0, -0x30(s0)
80223c4e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80223c52: 71 46        	li	a2, 0x1c
80223c54: 23 30 c4 fe  	sd	a2, -0x20(s0)
80223c58: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         index.index_mut(self)
80223c5c: 97 c0 ff ff  	auipc	ra, 0xffffc
80223c60: e7 80 20 84  	jalr	-0x7be(ra) <ekernel+0xffcd249e>
80223c64: e2 70        	ld	ra, 0x38(sp)
80223c66: 42 74        	ld	s0, 0x30(sp)
;     }
80223c68: 21 61        	addi	sp, sp, 0x40
80223c6a: 82 80        	ret

0000000080223c6c <_ZN4core5array88_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$9index_mut17hcb15cc90ee060704E>:
;     fn index_mut(&mut self, index: I) -> &mut Self::Output {
80223c6c: 1d 71        	addi	sp, sp, -0x60
80223c6e: 86 ec        	sd	ra, 0x58(sp)
80223c70: a2 e8        	sd	s0, 0x50(sp)
80223c72: 80 10        	addi	s0, sp, 0x60
80223c74: 36 87        	mv	a4, a3
80223c76: 23 34 c4 fa  	sd	a2, -0x58(s0)
80223c7a: 2e 86        	mv	a2, a1
80223c7c: 83 35 84 fa  	ld	a1, -0x58(s0)
80223c80: 23 38 c4 fa  	sd	a2, -0x50(s0)
80223c84: 2a 86        	mv	a2, a0
80223c86: 03 35 04 fb  	ld	a0, -0x50(s0)
80223c8a: 23 3c c4 fa  	sd	a2, -0x48(s0)
80223c8e: 23 30 a4 fc  	sd	a0, -0x40(s0)
80223c92: 23 34 b4 fc  	sd	a1, -0x38(s0)
80223c96: 23 38 c4 fc  	sd	a2, -0x30(s0)
80223c9a: 93 06 00 20  	li	a3, 0x200
80223c9e: 23 3c d4 fc  	sd	a3, -0x28(s0)
80223ca2: 23 30 a4 fe  	sd	a0, -0x20(s0)
80223ca6: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         index.index_mut(self)
80223caa: 97 b0 ff ff  	auipc	ra, 0xffffb
80223cae: e7 80 c0 76  	jalr	0x76c(ra) <ekernel+0xffcd2416>
80223cb2: e6 60        	ld	ra, 0x58(sp)
80223cb4: 46 64        	ld	s0, 0x50(sp)
;     }
80223cb6: 25 61        	addi	sp, sp, 0x60
80223cb8: 82 80        	ret

0000000080223cba <_ZN7easy_fs6layout10SuperBlock8is_valid17ha984d1390257b39cE>:
;     pub fn is_valid(&self) -> bool {
80223cba: 01 11        	addi	sp, sp, -0x20
80223cbc: 06 ec        	sd	ra, 0x18(sp)
80223cbe: 22 e8        	sd	s0, 0x10(sp)
80223cc0: 00 10        	addi	s0, sp, 0x20
80223cc2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.magic == EFS_MAGIC
80223cc6: 08 41        	lw	a0, 0x0(a0)
80223cc8: b7 05 80 3b  	lui	a1, 0x3b800
80223ccc: 85 25        	addiw	a1, a1, 0x1
80223cce: 2d 8d        	xor	a0, a0, a1
80223cd0: 13 35 15 00  	seqz	a0, a0
80223cd4: e2 60        	ld	ra, 0x18(sp)
80223cd6: 42 64        	ld	s0, 0x10(sp)
;     }
80223cd8: 05 61        	addi	sp, sp, 0x20
80223cda: 82 80        	ret

0000000080223cdc <_ZN7easy_fs6layout9DiskInode10initialize17h8f451ff33ed5afbfE>:
;     pub fn initialize(&mut self, type_: DiskInodeType) {
80223cdc: 39 71        	addi	sp, sp, -0x40
80223cde: 06 fc        	sd	ra, 0x38(sp)
80223ce0: 22 f8        	sd	s0, 0x30(sp)
80223ce2: 80 00        	addi	s0, sp, 0x40
80223ce4: 23 3c b4 fc  	sd	a1, -0x28(s0)
80223ce8: 23 38 a4 fc  	sd	a0, -0x30(s0)
80223cec: 23 30 a4 fe  	sd	a0, -0x20(s0)
80223cf0: a3 07 b4 fe  	sb	a1, -0x11(s0)
80223cf4: 81 45        	li	a1, 0x0
80223cf6: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.size = 0;
80223cfa: 0c c1        	sw	a1, 0x0(a0)
;         self.direct.iter_mut().for_each(|v| *v = 0);
80223cfc: 11 05        	addi	a0, a0, 0x4
80223cfe: f1 45        	li	a1, 0x1c
80223d00: 97 90 ff ff  	auipc	ra, 0xffff9
80223d04: e7 80 60 6b  	jalr	0x6b6(ra) <ekernel+0xffcd03b6>
80223d08: 97 50 00 00  	auipc	ra, 0x5
80223d0c: e7 80 a0 f0  	jalr	-0xf6(ra) <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h08c7a1e54f905abfE>
80223d10: 03 36 84 fc  	ld	a2, -0x38(s0)
80223d14: 03 35 04 fd  	ld	a0, -0x30(s0)
80223d18: 83 35 84 fd  	ld	a1, -0x28(s0)
;         self.indirect1 = 0;
80223d1c: 70 d9        	sw	a2, 0x74(a0)
;         self.indirect2 = 0;
80223d1e: 30 dd        	sw	a2, 0x78(a0)
;         self.type_ = type_;
80223d20: 23 0e b5 06  	sb	a1, 0x7c(a0)
80223d24: e2 70        	ld	ra, 0x38(sp)
80223d26: 42 74        	ld	s0, 0x30(sp)
;     }
80223d28: 21 61        	addi	sp, sp, 0x40
80223d2a: 82 80        	ret

0000000080223d2c <_ZN7easy_fs6layout9DiskInode6is_dir17hc040dec3455461d8E>:
;     pub fn is_dir(&self) -> bool {
80223d2c: 01 11        	addi	sp, sp, -0x20
80223d2e: 06 ec        	sd	ra, 0x18(sp)
80223d30: 22 e8        	sd	s0, 0x10(sp)
80223d32: 00 10        	addi	s0, sp, 0x20
80223d34: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.type_ == DiskInodeType::Directory
80223d38: 13 05 c5 07  	addi	a0, a0, 0x7c

0000000080223d3c <.Lpcrel_hi7>:
80223d3c: 97 65 01 00  	auipc	a1, 0x16
80223d40: 93 85 45 94  	addi	a1, a1, -0x6bc
80223d44: 97 20 00 00  	auipc	ra, 0x2
80223d48: e7 80 80 9e  	jalr	-0x618(ra) <_ZN71_$LT$easy_fs..layout..DiskInodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h66d2e8c7d43bbbb4E>
80223d4c: e2 60        	ld	ra, 0x18(sp)
80223d4e: 42 64        	ld	s0, 0x10(sp)
;     }
80223d50: 05 61        	addi	sp, sp, 0x20
80223d52: 82 80        	ret

0000000080223d54 <_ZN7easy_fs6layout9DiskInode11data_blocks17h319509b62e4364b1E>:
;     pub fn data_blocks(&self) -> u32 {
80223d54: 01 11        	addi	sp, sp, -0x20
80223d56: 06 ec        	sd	ra, 0x18(sp)
80223d58: 22 e8        	sd	s0, 0x10(sp)
80223d5a: 00 10        	addi	s0, sp, 0x20
80223d5c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self::_data_blocks(self.size)
80223d60: 08 41        	lw	a0, 0x0(a0)
80223d62: 97 00 00 00  	auipc	ra, 0x0
80223d66: e7 80 00 01  	jalr	0x10(ra) <_ZN7easy_fs6layout9DiskInode12_data_blocks17h6e56111ea3148eecE>
80223d6a: e2 60        	ld	ra, 0x18(sp)
80223d6c: 42 64        	ld	s0, 0x10(sp)
;     }
80223d6e: 05 61        	addi	sp, sp, 0x20
80223d70: 82 80        	ret

0000000080223d72 <_ZN7easy_fs6layout9DiskInode12_data_blocks17h6e56111ea3148eecE>:
;     fn _data_blocks(size: u32) -> u32 {
80223d72: 79 71        	addi	sp, sp, -0x30
80223d74: 06 f4        	sd	ra, 0x28(sp)
80223d76: 22 f0        	sd	s0, 0x20(sp)
80223d78: 00 18        	addi	s0, sp, 0x30
80223d7a: aa 85        	mv	a1, a0
80223d7c: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         (size + BLOCK_SZ as u32 - 1) / BLOCK_SZ as u32
80223d80: 1b 85 05 20  	addiw	a0, a1, 0x200
80223d84: 23 30 a4 fe  	sd	a0, -0x20(s0)
80223d88: 81 25        	sext.w	a1, a1
80223d8a: 63 6c b5 00  	bltu	a0, a1, 0x80223da2 <.Lpcrel_hi8>
80223d8e: 09 a0        	j	0x80223d90 <_ZN7easy_fs6layout9DiskInode12_data_blocks17h6e56111ea3148eecE+0x1e>
80223d90: 03 35 04 fe  	ld	a0, -0x20(s0)
;         (size + BLOCK_SZ as u32 - 1) / BLOCK_SZ as u32
80223d94: 9b 05 f5 ff  	addiw	a1, a0, -0x1
80223d98: 23 3c b4 fc  	sd	a1, -0x28(s0)
80223d9c: 01 25        	sext.w	a0, a0
80223d9e: 1d c5        	beqz	a0, 0x80223dcc <.Lpcrel_hi10>
80223da0: 31 a8        	j	0x80223dbc <.Lpcrel_hi9+0x12>

0000000080223da2 <.Lpcrel_hi8>:
80223da2: 17 65 01 00  	auipc	a0, 0x16
80223da6: 13 05 e5 93  	addi	a0, a0, -0x6c2

0000000080223daa <.Lpcrel_hi9>:
80223daa: 97 65 01 00  	auipc	a1, 0x16
80223dae: 13 86 e5 91  	addi	a2, a1, -0x6e2
80223db2: f1 45        	li	a1, 0x1c
80223db4: 97 c0 00 00  	auipc	ra, 0xc
80223db8: e7 80 40 46  	jalr	0x464(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80223dbc: 03 35 84 fd  	ld	a0, -0x28(s0)
;         (size + BLOCK_SZ as u32 - 1) / BLOCK_SZ as u32
80223dc0: 1b 55 95 00  	srliw	a0, a0, 0x9
80223dc4: a2 70        	ld	ra, 0x28(sp)
80223dc6: 02 74        	ld	s0, 0x20(sp)
;     }
80223dc8: 45 61        	addi	sp, sp, 0x30
80223dca: 82 80        	ret

0000000080223dcc <.Lpcrel_hi10>:
;         (size + BLOCK_SZ as u32 - 1) / BLOCK_SZ as u32
80223dcc: 17 65 01 00  	auipc	a0, 0x16
80223dd0: 13 05 45 95  	addi	a0, a0, -0x6ac

0000000080223dd4 <.Lpcrel_hi11>:
80223dd4: 97 65 01 00  	auipc	a1, 0x16
80223dd8: 13 86 c5 92  	addi	a2, a1, -0x6d4
80223ddc: 93 05 10 02  	li	a1, 0x21
80223de0: 97 c0 00 00  	auipc	ra, 0xc
80223de4: e7 80 80 43  	jalr	0x438(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080223de8 <_ZN7easy_fs6layout9DiskInode12total_blocks17hbbfe580984ef783dE>:
;     pub fn total_blocks(size: u32) -> u32 {
80223de8: 1d 71        	addi	sp, sp, -0x60
80223dea: 86 ec        	sd	ra, 0x58(sp)
80223dec: a2 e8        	sd	s0, 0x50(sp)
80223dee: 80 10        	addi	s0, sp, 0x60
80223df0: 23 22 a4 fe  	sw	a0, -0x1c(s0)
;         let data_blocks = Self::_data_blocks(size) as usize;
80223df4: 97 00 00 00  	auipc	ra, 0x0
80223df8: e7 80 e0 f7  	jalr	-0x82(ra) <_ZN7easy_fs6layout9DiskInode12_data_blocks17h6e56111ea3148eecE>
80223dfc: 9b 05 05 00  	sext.w	a1, a0
80223e00: 02 15        	slli	a0, a0, 0x20
80223e02: 01 91        	srli	a0, a0, 0x20
80223e04: 23 38 a4 fc  	sd	a0, -0x30(s0)
80223e08: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         let mut total = data_blocks as usize;
80223e0c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80223e10: 71 45        	li	a0, 0x1c
;         if data_blocks > INODE_DIRECT_COUNT {
80223e12: 63 6a b5 00  	bltu	a0, a1, 0x80223e26 <_ZN7easy_fs6layout9DiskInode12total_blocks17hbbfe580984ef783dE+0x3e>
80223e16: 09 a0        	j	0x80223e18 <_ZN7easy_fs6layout9DiskInode12total_blocks17hbbfe580984ef783dE+0x30>
80223e18: 83 35 04 fd  	ld	a1, -0x30(s0)
80223e1c: 13 05 c0 09  	li	a0, 0x9c
;         if data_blocks > INDIRECT1_BOUND {
80223e20: 63 62 b5 04  	bltu	a0, a1, 0x80223e64 <.Lpcrel_hi13+0x1e>
80223e24: 15 a8        	j	0x80223e58 <.Lpcrel_hi13+0x12>
;             total += 1;
80223e26: 03 35 84 fd  	ld	a0, -0x28(s0)
80223e2a: 05 05        	addi	a0, a0, 0x1
80223e2c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80223e30: 19 c5        	beqz	a0, 0x80223e3e <.Lpcrel_hi12>
80223e32: 09 a0        	j	0x80223e34 <_ZN7easy_fs6layout9DiskInode12total_blocks17hbbfe580984ef783dE+0x4c>
80223e34: 03 35 84 fc  	ld	a0, -0x38(s0)
;             total += 1;
80223e38: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if data_blocks > INODE_DIRECT_COUNT {
80223e3c: f1 bf        	j	0x80223e18 <_ZN7easy_fs6layout9DiskInode12total_blocks17hbbfe580984ef783dE+0x30>

0000000080223e3e <.Lpcrel_hi12>:
;             total += 1;
80223e3e: 17 65 01 00  	auipc	a0, 0x16
80223e42: 13 05 25 8a  	addi	a0, a0, -0x75e

0000000080223e46 <.Lpcrel_hi13>:
80223e46: 97 65 01 00  	auipc	a1, 0x16
80223e4a: 13 86 25 90  	addi	a2, a1, -0x6fe
80223e4e: f1 45        	li	a1, 0x1c
80223e50: 97 c0 00 00  	auipc	ra, 0xc
80223e54: e7 80 80 3c  	jalr	0x3c8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;         total as u32
80223e58: 03 35 84 fd  	ld	a0, -0x28(s0)
80223e5c: e6 60        	ld	ra, 0x58(sp)
80223e5e: 46 64        	ld	s0, 0x50(sp)
;     }
80223e60: 25 61        	addi	sp, sp, 0x60
80223e62: 82 80        	ret
;             total += 1;
80223e64: 03 35 84 fd  	ld	a0, -0x28(s0)
80223e68: 05 05        	addi	a0, a0, 0x1
80223e6a: 23 30 a4 fc  	sd	a0, -0x40(s0)
80223e6e: 0d c1        	beqz	a0, 0x80223e90 <.Lpcrel_hi14>
80223e70: 09 a0        	j	0x80223e72 <.Lpcrel_hi13+0x2c>
80223e72: 03 35 04 fd  	ld	a0, -0x30(s0)
80223e76: 83 35 04 fc  	ld	a1, -0x40(s0)
;             total += 1;
80223e7a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 (data_blocks - INDIRECT1_BOUND + INODE_INDIRECT1_COUNT - 1) / INODE_INDIRECT1_COUNT;
80223e7e: 93 05 45 f6  	addi	a1, a0, -0x9c
80223e82: 23 3c b4 fa  	sd	a1, -0x48(s0)
80223e86: 93 05 c0 09  	li	a1, 0x9c
80223e8a: 63 69 b5 02  	bltu	a0, a1, 0x80223ebc <.Lpcrel_hi16>
80223e8e: 31 a8        	j	0x80223eaa <.Lpcrel_hi15+0x12>

0000000080223e90 <.Lpcrel_hi14>:
;             total += 1;
80223e90: 17 65 01 00  	auipc	a0, 0x16
80223e94: 13 05 05 85  	addi	a0, a0, -0x7b0

0000000080223e98 <.Lpcrel_hi15>:
80223e98: 97 65 01 00  	auipc	a1, 0x16
80223e9c: 13 86 85 8c  	addi	a2, a1, -0x738
80223ea0: f1 45        	li	a1, 0x1c
80223ea2: 97 c0 00 00  	auipc	ra, 0xc
80223ea6: e7 80 60 37  	jalr	0x376(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80223eaa: 83 35 84 fb  	ld	a1, -0x48(s0)
;                 (data_blocks - INDIRECT1_BOUND + INODE_INDIRECT1_COUNT - 1) / INODE_INDIRECT1_COUNT;
80223eae: 13 85 05 08  	addi	a0, a1, 0x80
80223eb2: 23 38 a4 fa  	sd	a0, -0x50(s0)
80223eb6: 63 69 b5 02  	bltu	a0, a1, 0x80223ee8 <.Lpcrel_hi18>
80223eba: 39 a8        	j	0x80223ed8 <.Lpcrel_hi17+0x14>

0000000080223ebc <.Lpcrel_hi16>:
80223ebc: 17 65 01 00  	auipc	a0, 0x16
80223ec0: 13 05 45 86  	addi	a0, a0, -0x79c

0000000080223ec4 <.Lpcrel_hi17>:
80223ec4: 97 65 01 00  	auipc	a1, 0x16
80223ec8: 13 86 45 8b  	addi	a2, a1, -0x74c
80223ecc: 93 05 10 02  	li	a1, 0x21
80223ed0: 97 c0 00 00  	auipc	ra, 0xc
80223ed4: e7 80 80 34  	jalr	0x348(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80223ed8: 03 35 04 fb  	ld	a0, -0x50(s0)
;                 (data_blocks - INDIRECT1_BOUND + INODE_INDIRECT1_COUNT - 1) / INODE_INDIRECT1_COUNT;
80223edc: 93 05 f5 ff  	addi	a1, a0, -0x1
80223ee0: 23 34 b4 fa  	sd	a1, -0x58(s0)
80223ee4: 15 c9        	beqz	a0, 0x80223f18 <.Lpcrel_hi20>
80223ee6: 31 a8        	j	0x80223f02 <.Lpcrel_hi19+0x12>

0000000080223ee8 <.Lpcrel_hi18>:
80223ee8: 17 55 01 00  	auipc	a0, 0x15
80223eec: 13 05 85 7f  	addi	a0, a0, 0x7f8

0000000080223ef0 <.Lpcrel_hi19>:
80223ef0: 97 65 01 00  	auipc	a1, 0x16
80223ef4: 13 86 85 88  	addi	a2, a1, -0x778
80223ef8: f1 45        	li	a1, 0x1c
80223efa: 97 c0 00 00  	auipc	ra, 0xc
80223efe: e7 80 e0 31  	jalr	0x31e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80223f02: 03 35 84 fa  	ld	a0, -0x58(s0)
;                 (data_blocks - INDIRECT1_BOUND + INODE_INDIRECT1_COUNT - 1) / INODE_INDIRECT1_COUNT;
80223f06: 1d 81        	srli	a0, a0, 0x7
;             total +=
80223f08: 83 35 84 fd  	ld	a1, -0x28(s0)
80223f0c: 2e 95        	add	a0, a0, a1
80223f0e: 23 30 a4 fa  	sd	a0, -0x60(s0)
80223f12: 63 66 b5 02  	bltu	a0, a1, 0x80223f3e <.Lpcrel_hi22>
80223f16: 39 a8        	j	0x80223f34 <.Lpcrel_hi21+0x14>

0000000080223f18 <.Lpcrel_hi20>:
;                 (data_blocks - INDIRECT1_BOUND + INODE_INDIRECT1_COUNT - 1) / INODE_INDIRECT1_COUNT;
80223f18: 17 65 01 00  	auipc	a0, 0x16
80223f1c: 13 05 85 80  	addi	a0, a0, -0x7f8

0000000080223f20 <.Lpcrel_hi21>:
80223f20: 97 65 01 00  	auipc	a1, 0x16
80223f24: 13 86 05 87  	addi	a2, a1, -0x790
80223f28: 93 05 10 02  	li	a1, 0x21
80223f2c: 97 c0 00 00  	auipc	ra, 0xc
80223f30: e7 80 c0 2e  	jalr	0x2ec(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80223f34: 03 35 04 fa  	ld	a0, -0x60(s0)
;             total +=
80223f38: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if data_blocks > INDIRECT1_BOUND {
80223f3c: 31 bf        	j	0x80223e58 <.Lpcrel_hi13+0x12>

0000000080223f3e <.Lpcrel_hi22>:
;             total +=
80223f3e: 17 55 01 00  	auipc	a0, 0x15
80223f42: 13 05 25 7a  	addi	a0, a0, 0x7a2

0000000080223f46 <.Lpcrel_hi23>:
80223f46: 97 65 01 00  	auipc	a1, 0x16
80223f4a: 13 86 25 86  	addi	a2, a1, -0x79e
80223f4e: f1 45        	li	a1, 0x1c
80223f50: 97 c0 00 00  	auipc	ra, 0xc
80223f54: e7 80 80 2c  	jalr	0x2c8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080223f58 <_ZN7easy_fs6layout9DiskInode17blocks_num_needed17h32f342c9aeb5387dE>:
;     pub fn blocks_num_needed(&self, new_size: u32) -> u32 {
80223f58: 5d 71        	addi	sp, sp, -0x50
80223f5a: 86 e4        	sd	ra, 0x48(sp)
80223f5c: a2 e0        	sd	s0, 0x40(sp)
80223f5e: 80 08        	addi	s0, sp, 0x50
80223f60: 2e 86        	mv	a2, a1
80223f62: aa 85        	mv	a1, a0
80223f64: 23 38 b4 fc  	sd	a1, -0x30(s0)
80223f68: 1b 05 06 00  	sext.w	a0, a2
80223f6c: b2 86        	mv	a3, a2
80223f6e: 23 3c d4 fc  	sd	a3, -0x28(s0)
80223f72: 23 30 b4 fe  	sd	a1, -0x20(s0)
80223f76: 23 26 c4 fe  	sw	a2, -0x14(s0)
;         assert!(new_size >= self.size);
80223f7a: 8c 41        	lw	a1, 0x0(a1)
80223f7c: 63 71 b5 02  	bgeu	a0, a1, 0x80223f9e <.Lpcrel_hi25+0x14>
80223f80: 09 a0        	j	0x80223f82 <.Lpcrel_hi24>

0000000080223f82 <.Lpcrel_hi24>:
80223f82: 17 65 01 00  	auipc	a0, 0x16
80223f86: 13 05 e5 83  	addi	a0, a0, -0x7c2

0000000080223f8a <.Lpcrel_hi25>:
80223f8a: 97 65 01 00  	auipc	a1, 0x16
80223f8e: 13 86 e5 85  	addi	a2, a1, -0x7a2
80223f92: 93 05 70 02  	li	a1, 0x27
80223f96: 97 c0 00 00  	auipc	ra, 0xc
80223f9a: e7 80 20 28  	jalr	0x282(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80223f9e: 03 35 84 fd  	ld	a0, -0x28(s0)
;         Self::total_blocks(new_size) - Self::total_blocks(self.size)
80223fa2: 97 00 00 00  	auipc	ra, 0x0
80223fa6: e7 80 60 e4  	jalr	-0x1ba(ra) <_ZN7easy_fs6layout9DiskInode12total_blocks17hbbfe580984ef783dE>
80223faa: aa 85        	mv	a1, a0
80223fac: 03 35 04 fd  	ld	a0, -0x30(s0)
80223fb0: 23 3c b4 fa  	sd	a1, -0x48(s0)
80223fb4: 81 25        	sext.w	a1, a1
80223fb6: 23 30 b4 fc  	sd	a1, -0x40(s0)
80223fba: 08 41        	lw	a0, 0x0(a0)
80223fbc: 97 00 00 00  	auipc	ra, 0x0
80223fc0: e7 80 c0 e2  	jalr	-0x1d4(ra) <_ZN7easy_fs6layout9DiskInode12total_blocks17hbbfe580984ef783dE>
80223fc4: 03 36 84 fb  	ld	a2, -0x48(s0)
80223fc8: aa 86        	mv	a3, a0
80223fca: 03 35 04 fc  	ld	a0, -0x40(s0)
80223fce: 9b 85 06 00  	sext.w	a1, a3
80223fd2: 15 9e        	subw	a2, a2, a3
80223fd4: 23 34 c4 fc  	sd	a2, -0x38(s0)
80223fd8: 63 69 b5 00  	bltu	a0, a1, 0x80223fea <.Lpcrel_hi26>
80223fdc: 09 a0        	j	0x80223fde <.Lpcrel_hi25+0x54>
80223fde: 03 35 84 fc  	ld	a0, -0x38(s0)
80223fe2: a6 60        	ld	ra, 0x48(sp)
80223fe4: 06 64        	ld	s0, 0x40(sp)
;     }
80223fe6: 61 61        	addi	sp, sp, 0x50
80223fe8: 82 80        	ret

0000000080223fea <.Lpcrel_hi26>:
;         Self::total_blocks(new_size) - Self::total_blocks(self.size)
80223fea: 17 55 01 00  	auipc	a0, 0x15
80223fee: 13 05 65 73  	addi	a0, a0, 0x736

0000000080223ff2 <.Lpcrel_hi27>:
80223ff2: 97 65 01 00  	auipc	a1, 0x16
80223ff6: 13 86 e5 80  	addi	a2, a1, -0x7f2
80223ffa: 93 05 10 02  	li	a1, 0x21
80223ffe: 97 c0 00 00  	auipc	ra, 0xc
80224002: e7 80 a0 21  	jalr	0x21a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080224006 <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE>:
;     pub fn get_block_id(&self, inner_id: u32, block_device: &Arc<dyn BlockDevice>) -> u32 {
80224006: 13 01 01 dd  	addi	sp, sp, -0x230
8022400a: 23 34 11 22  	sd	ra, 0x228(sp)
8022400e: 23 30 81 22  	sd	s0, 0x220(sp)
80224012: 00 1c        	addi	s0, sp, 0x230
80224014: 23 38 c4 e6  	sd	a2, -0x190(s0)
80224018: 23 3c a4 e6  	sd	a0, -0x188(s0)
8022401c: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80224020: 23 2e b4 f0  	sw	a1, -0xe4(s0)
80224024: 23 30 c4 f2  	sd	a2, -0xe0(s0)
;         let inner_id = inner_id as usize;
80224028: 13 95 05 02  	slli	a0, a1, 0x20
8022402c: 01 91        	srli	a0, a0, 0x20
8022402e: 23 34 a4 e8  	sd	a0, -0x178(s0)
;         if inner_id < INODE_DIRECT_COUNT {
80224032: 03 35 84 e8  	ld	a0, -0x178(s0)
80224036: f1 45        	li	a1, 0x1c
80224038: 63 6a b5 00  	bltu	a0, a1, 0x8022404c <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x46>
8022403c: 09 a0        	j	0x8022403e <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x38>
;         } else if inner_id < INDIRECT1_BOUND {
8022403e: 03 35 84 e8  	ld	a0, -0x178(s0)
80224042: 93 05 c0 09  	li	a1, 0x9c
80224046: 63 66 b5 02  	bltu	a0, a1, 0x80224072 <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x6c>
8022404a: 09 a8        	j	0x8022405c <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x56>
;             self.direct[inner_id]
8022404c: 03 35 84 e8  	ld	a0, -0x178(s0)
80224050: 23 34 a4 e6  	sd	a0, -0x198(s0)
80224054: f1 45        	li	a1, 0x1c
80224056: 63 6e b5 38  	bltu	a0, a1, 0x802243f2 <.Lpcrel_hi29+0x26>
8022405a: 75 a6        	j	0x80224406 <.Lpcrel_hi29+0x3a>
;             let last = inner_id - INDIRECT1_BOUND;
8022405c: 03 35 84 e8  	ld	a0, -0x178(s0)
80224060: 93 05 45 f6  	addi	a1, a0, -0x9c
80224064: 23 30 b4 e6  	sd	a1, -0x1a0(s0)
80224068: 93 05 c0 09  	li	a1, 0x9c
8022406c: 63 6c b5 34  	bltu	a0, a1, 0x802243c4 <.Lpcrel_hi28>
80224070: 21 aa        	j	0x80224188 <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x182>
80224072: 03 35 04 e7  	ld	a0, -0x190(s0)
80224076: 83 35 84 e7  	ld	a1, -0x188(s0)
;             get_block_cache(self.indirect1 as usize, Arc::clone(block_device))
8022407a: 83 e5 45 07  	lwu	a1, 0x74(a1)
8022407e: 23 30 b4 e4  	sd	a1, -0x1c0(s0)
80224082: 97 90 ff ff  	auipc	ra, 0xffff9
80224086: e7 80 e0 05  	jalr	0x5e(ra) <ekernel+0xffcd00e0>
8022408a: 2a 86        	mv	a2, a0
8022408c: 03 35 04 e4  	ld	a0, -0x1c0(s0)
80224090: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
80224094: 2e 86        	mv	a2, a1
80224096: 83 35 84 e4  	ld	a1, -0x1b8(s0)
8022409a: 97 20 00 00  	auipc	ra, 0x2
8022409e: e7 80 a0 d6  	jalr	-0x296(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
802240a2: 23 34 a4 ea  	sd	a0, -0x158(s0)
802240a6: 13 05 84 ea  	addi	a0, s0, -0x158
802240aa: 97 90 ff ff  	auipc	ra, 0xffff9
802240ae: e7 80 a0 0d  	jalr	0xda(ra) <ekernel+0xffcd0184>
802240b2: aa 85        	mv	a1, a0
802240b4: 23 38 b4 e4  	sd	a1, -0x1b0(s0)
802240b8: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802240bc: 23 3c a4 fc  	sd	a0, -0x28(s0)
802240c0: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
802240c2: 23 0b b4 fc  	sb	a1, -0x2a(s0)
802240c6: 03 46 64 fd  	lbu	a2, -0x2a(s0)
802240ca: 85 45        	li	a1, 0x1
802240cc: 97 b0 ff ff  	auipc	ra, 0xffffb
802240d0: e7 80 a0 0d  	jalr	0xda(ra) <ekernel+0xffcd21a6>
802240d4: aa 85        	mv	a1, a0
802240d6: 23 3c b4 e4  	sd	a1, -0x1a8(s0)
802240da: 23 30 a4 fe  	sd	a0, -0x20(s0)
802240de: 09 a0        	j	0x802240e0 <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0xda>
802240e0: 03 35 04 e5  	ld	a0, -0x1b0(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
802240e4: 21 05        	addi	a0, a0, 0x8
802240e6: 89 45        	li	a1, 0x2
802240e8: a3 0b b4 fc  	sb	a1, -0x29(s0)
802240ec: 83 45 74 fd  	lbu	a1, -0x29(s0)
802240f0: 97 b0 ff ff  	auipc	ra, 0xffffb
802240f4: e7 80 a0 06  	jalr	0x6a(ra) <ekernel+0xffcd215a>
802240f8: 83 35 84 e5  	ld	a1, -0x1a8(s0)
802240fc: 63 08 b5 00  	beq	a0, a1, 0x8022410c <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x106>
80224100: 09 a0        	j	0x80224102 <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0xfc>
;             crate::relax();
80224102: 97 b0 ff ff  	auipc	ra, 0xffffb
80224106: e7 80 c0 14  	jalr	0x14c(ra) <ekernel+0xffcd224e>
8022410a: d9 bf        	j	0x802240e0 <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0xda>
8022410c: 83 35 84 e5  	ld	a1, -0x1a8(s0)
80224110: 03 35 04 e5  	ld	a0, -0x1b0(s0)
;             next_serving: &self.next_serving,
80224114: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80224118: 41 05        	addi	a0, a0, 0x10
8022411a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8022411e: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80224122: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80224126: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         MutexGuard {
8022412a: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022412e: 23 30 a4 ea  	sd	a0, -0x160(s0)
80224132: 03 35 84 f3  	ld	a0, -0xc8(s0)
80224136: 23 3c a4 e8  	sd	a0, -0x168(s0)
8022413a: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022413e: 23 38 a4 e8  	sd	a0, -0x170(s0)
80224142: 13 05 04 e9  	addi	a0, s0, -0x170
80224146: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
;             get_block_cache(self.indirect1 as usize, Arc::clone(block_device))
8022414a: 97 e0 ff ff  	auipc	ra, 0xffffe
8022414e: e7 80 40 4d  	jalr	0x4d4(ra) <ekernel+0xffcd561e>
80224152: 93 05 84 e8  	addi	a1, s0, -0x178
;                 .read(0, |indirect_block: &IndirectBlock| {
80224156: 23 38 b4 ea  	sd	a1, -0x150(s0)
;             get_block_cache(self.indirect1 as usize, Arc::clone(block_device))
8022415a: 03 36 04 eb  	ld	a2, -0x150(s0)
8022415e: 81 45        	li	a1, 0x0
80224160: 97 d0 ff ff  	auipc	ra, 0xffffd
80224164: e7 80 80 32  	jalr	0x328(ra) <ekernel+0xffcd4488>
80224168: aa 85        	mv	a1, a0
8022416a: 03 35 84 e3  	ld	a0, -0x1c8(s0)
8022416e: 23 22 b4 e8  	sw	a1, -0x17c(s0)
;         } else {
80224172: 97 a0 ff ff  	auipc	ra, 0xffffa
80224176: e7 80 40 92  	jalr	-0x6dc(ra) <ekernel+0xffcd0a96>
8022417a: 13 05 84 ea  	addi	a0, s0, -0x158
8022417e: 97 90 ff ff  	auipc	ra, 0xffff9
80224182: e7 80 00 5b  	jalr	0x5b0(ra) <ekernel+0xffcd072e>
80224186: a9 ac        	j	0x802243e0 <.Lpcrel_hi29+0x14>
80224188: 03 35 04 e7  	ld	a0, -0x190(s0)
8022418c: 83 35 84 e7  	ld	a1, -0x188(s0)
80224190: 03 36 04 e6  	ld	a2, -0x1a0(s0)
;             let last = inner_id - INDIRECT1_BOUND;
80224194: 23 3c c4 ea  	sd	a2, -0x148(s0)
;             let indirect1 = get_block_cache(self.indirect2 as usize, Arc::clone(block_device))
80224198: 83 e5 85 07  	lwu	a1, 0x78(a1)
8022419c: 23 3c b4 e0  	sd	a1, -0x1e8(s0)
802241a0: 97 90 ff ff  	auipc	ra, 0xffff9
802241a4: e7 80 00 f4  	jalr	-0xc0(ra) <ekernel+0xffcd00e0>
802241a8: 2a 86        	mv	a2, a0
802241aa: 03 35 84 e1  	ld	a0, -0x1e8(s0)
802241ae: 23 30 c4 e2  	sd	a2, -0x1e0(s0)
802241b2: 2e 86        	mv	a2, a1
802241b4: 83 35 04 e2  	ld	a1, -0x1e0(s0)
802241b8: 97 20 00 00  	auipc	ra, 0x2
802241bc: e7 80 c0 c4  	jalr	-0x3b4(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
802241c0: 23 3c a4 ec  	sd	a0, -0x128(s0)
802241c4: 13 05 84 ed  	addi	a0, s0, -0x128
802241c8: 97 90 ff ff  	auipc	ra, 0xffff9
802241cc: e7 80 c0 fb  	jalr	-0x44(ra) <ekernel+0xffcd0184>
802241d0: aa 85        	mv	a1, a0
802241d2: 23 34 b4 e2  	sd	a1, -0x1d8(s0)
802241d6: 23 34 a4 f8  	sd	a0, -0x78(s0)
802241da: 23 3c a4 f8  	sd	a0, -0x68(s0)
802241de: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
802241e0: 23 0b b4 f8  	sb	a1, -0x6a(s0)
802241e4: 03 46 64 f9  	lbu	a2, -0x6a(s0)
802241e8: 85 45        	li	a1, 0x1
802241ea: 97 b0 ff ff  	auipc	ra, 0xffffb
802241ee: e7 80 c0 fb  	jalr	-0x44(ra) <ekernel+0xffcd21a6>
802241f2: aa 85        	mv	a1, a0
802241f4: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
802241f8: 23 30 a4 fa  	sd	a0, -0x60(s0)
802241fc: 09 a0        	j	0x802241fe <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x1f8>
802241fe: 03 35 84 e2  	ld	a0, -0x1d8(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80224202: 21 05        	addi	a0, a0, 0x8
80224204: 89 45        	li	a1, 0x2
80224206: a3 0b b4 f8  	sb	a1, -0x69(s0)
8022420a: 83 45 74 f9  	lbu	a1, -0x69(s0)
8022420e: 97 b0 ff ff  	auipc	ra, 0xffffb
80224212: e7 80 c0 f4  	jalr	-0xb4(ra) <ekernel+0xffcd215a>
80224216: 83 35 04 e3  	ld	a1, -0x1d0(s0)
8022421a: 63 08 b5 00  	beq	a0, a1, 0x8022422a <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x224>
8022421e: 09 a0        	j	0x80224220 <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x21a>
;             crate::relax();
80224220: 97 b0 ff ff  	auipc	ra, 0xffffb
80224224: e7 80 e0 02  	jalr	0x2e(ra) <ekernel+0xffcd224e>
80224228: d9 bf        	j	0x802241fe <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x1f8>
8022422a: 83 35 04 e3  	ld	a1, -0x1d0(s0)
8022422e: 03 35 84 e2  	ld	a0, -0x1d8(s0)
;             next_serving: &self.next_serving,
80224232: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80224236: 41 05        	addi	a0, a0, 0x10
80224238: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         TicketMutexGuard {
8022423c: 23 38 c4 f6  	sd	a2, -0x90(s0)
80224240: 23 30 b4 f8  	sd	a1, -0x80(s0)
80224244: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         MutexGuard {
80224248: 03 35 04 f8  	ld	a0, -0x80(s0)
8022424c: 23 38 a4 ec  	sd	a0, -0x130(s0)
80224250: 03 35 84 f7  	ld	a0, -0x88(s0)
80224254: 23 34 a4 ec  	sd	a0, -0x138(s0)
80224258: 03 35 04 f7  	ld	a0, -0x90(s0)
8022425c: 23 30 a4 ec  	sd	a0, -0x140(s0)
80224260: 13 05 04 ec  	addi	a0, s0, -0x140
80224264: 23 30 a4 de  	sd	a0, -0x220(s0)
;             let indirect1 = get_block_cache(self.indirect2 as usize, Arc::clone(block_device))
80224268: 97 e0 ff ff  	auipc	ra, 0xffffe
8022426c: e7 80 60 3b  	jalr	0x3b6(ra) <ekernel+0xffcd561e>
80224270: 93 05 84 eb  	addi	a1, s0, -0x148
;                 .read(0, |indirect2: &IndirectBlock| {
80224274: 23 30 b4 ee  	sd	a1, -0x120(s0)
;             let indirect1 = get_block_cache(self.indirect2 as usize, Arc::clone(block_device))
80224278: 03 36 04 ee  	ld	a2, -0x120(s0)
8022427c: 81 45        	li	a1, 0x0
8022427e: 23 30 b4 e0  	sd	a1, -0x200(s0)
80224282: 97 d0 ff ff  	auipc	ra, 0xffffd
80224286: e7 80 40 15  	jalr	0x154(ra) <ekernel+0xffcd43d6>
8022428a: aa 85        	mv	a1, a0
8022428c: 03 35 04 de  	ld	a0, -0x220(s0)
80224290: 23 34 b4 de  	sd	a1, -0x218(s0)
80224294: 23 26 b4 f2  	sw	a1, -0xd4(s0)
;                 });
80224298: 97 90 ff ff  	auipc	ra, 0xffff9
8022429c: e7 80 e0 7f  	jalr	0x7fe(ra) <ekernel+0xffcd0a96>
802242a0: 13 05 84 ed  	addi	a0, s0, -0x128
802242a4: 97 90 ff ff  	auipc	ra, 0xffff9
802242a8: e7 80 a0 48  	jalr	0x48a(ra) <ekernel+0xffcd072e>
802242ac: 83 35 84 de  	ld	a1, -0x218(s0)
802242b0: 03 35 04 e7  	ld	a0, -0x190(s0)
;             get_block_cache(indirect1 as usize, Arc::clone(block_device))
802242b4: 82 15        	slli	a1, a1, 0x20
802242b6: 81 91        	srli	a1, a1, 0x20
802242b8: 23 38 b4 de  	sd	a1, -0x210(s0)
802242bc: 97 90 ff ff  	auipc	ra, 0xffff9
802242c0: e7 80 40 e2  	jalr	-0x1dc(ra) <ekernel+0xffcd00e0>
802242c4: 2a 86        	mv	a2, a0
802242c6: 03 35 04 df  	ld	a0, -0x210(s0)
802242ca: 23 3c c4 de  	sd	a2, -0x208(s0)
802242ce: 2e 86        	mv	a2, a1
802242d0: 83 35 84 df  	ld	a1, -0x208(s0)
802242d4: 97 20 00 00  	auipc	ra, 0x2
802242d8: e7 80 00 b3  	jalr	-0x4d0(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
802242dc: 23 30 a4 f0  	sd	a0, -0x100(s0)
802242e0: 13 05 04 f0  	addi	a0, s0, -0x100
802242e4: 97 90 ff ff  	auipc	ra, 0xffff9
802242e8: e7 80 00 ea  	jalr	-0x160(ra) <ekernel+0xffcd0184>
802242ec: 83 35 04 e0  	ld	a1, -0x200(s0)
802242f0: 2a 86        	mv	a2, a0
802242f2: 23 34 c4 e0  	sd	a2, -0x1f8(s0)
802242f6: 23 34 a4 f6  	sd	a0, -0x98(s0)
802242fa: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
802242fe: 23 0b b4 fa  	sb	a1, -0x4a(s0)
80224302: 03 46 64 fb  	lbu	a2, -0x4a(s0)
80224306: 85 45        	li	a1, 0x1
80224308: 97 b0 ff ff  	auipc	ra, 0xffffb
8022430c: e7 80 e0 e9  	jalr	-0x162(ra) <ekernel+0xffcd21a6>
80224310: aa 85        	mv	a1, a0
80224312: 23 38 b4 e0  	sd	a1, -0x1f0(s0)
80224316: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022431a: 09 a0        	j	0x8022431c <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x316>
8022431c: 03 35 84 e0  	ld	a0, -0x1f8(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80224320: 21 05        	addi	a0, a0, 0x8
80224322: 89 45        	li	a1, 0x2
80224324: a3 0b b4 fa  	sb	a1, -0x49(s0)
80224328: 83 45 74 fb  	lbu	a1, -0x49(s0)
8022432c: 97 b0 ff ff  	auipc	ra, 0xffffb
80224330: e7 80 e0 e2  	jalr	-0x1d2(ra) <ekernel+0xffcd215a>
80224334: 83 35 04 e1  	ld	a1, -0x1f0(s0)
80224338: 63 08 b5 00  	beq	a0, a1, 0x80224348 <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x342>
8022433c: 09 a0        	j	0x8022433e <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x338>
;             crate::relax();
8022433e: 97 b0 ff ff  	auipc	ra, 0xffffb
80224342: e7 80 00 f1  	jalr	-0xf0(ra) <ekernel+0xffcd224e>
80224346: d9 bf        	j	0x8022431c <_ZN7easy_fs6layout9DiskInode12get_block_id17h5f0afb596ac6372bE+0x316>
80224348: 83 35 04 e1  	ld	a1, -0x1f0(s0)
8022434c: 03 35 84 e0  	ld	a0, -0x1f8(s0)
;             next_serving: &self.next_serving,
80224350: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80224354: 41 05        	addi	a0, a0, 0x10
80224356: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         TicketMutexGuard {
8022435a: 23 38 c4 f4  	sd	a2, -0xb0(s0)
8022435e: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80224362: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;         MutexGuard {
80224366: 03 35 04 f6  	ld	a0, -0xa0(s0)
8022436a: 23 3c a4 ee  	sd	a0, -0x108(s0)
8022436e: 03 35 84 f5  	ld	a0, -0xa8(s0)
80224372: 23 38 a4 ee  	sd	a0, -0x110(s0)
80224376: 03 35 04 f5  	ld	a0, -0xb0(s0)
8022437a: 23 34 a4 ee  	sd	a0, -0x118(s0)
8022437e: 13 05 84 ee  	addi	a0, s0, -0x118
80224382: 23 3c a4 dc  	sd	a0, -0x228(s0)
;             get_block_cache(indirect1 as usize, Arc::clone(block_device))
80224386: 97 e0 ff ff  	auipc	ra, 0xffffe
8022438a: e7 80 80 29  	jalr	0x298(ra) <ekernel+0xffcd561e>
8022438e: 93 05 84 eb  	addi	a1, s0, -0x148
;                 .read(0, |indirect1: &IndirectBlock| {
80224392: 23 34 b4 f0  	sd	a1, -0xf8(s0)
;             get_block_cache(indirect1 as usize, Arc::clone(block_device))
80224396: 03 36 84 f0  	ld	a2, -0xf8(s0)
8022439a: 81 45        	li	a1, 0x0
8022439c: 97 d0 ff ff  	auipc	ra, 0xffffd
802243a0: e7 80 40 17  	jalr	0x174(ra) <ekernel+0xffcd4510>
802243a4: aa 85        	mv	a1, a0
802243a6: 03 35 84 dd  	ld	a0, -0x228(s0)
802243aa: 23 22 b4 e8  	sw	a1, -0x17c(s0)
;         }
802243ae: 97 90 ff ff  	auipc	ra, 0xffff9
802243b2: e7 80 80 6e  	jalr	0x6e8(ra) <ekernel+0xffcd0a96>
802243b6: 13 05 04 f0  	addi	a0, s0, -0x100
802243ba: 97 90 ff ff  	auipc	ra, 0xffff9
802243be: e7 80 40 37  	jalr	0x374(ra) <ekernel+0xffcd072e>
802243c2: 39 a8        	j	0x802243e0 <.Lpcrel_hi29+0x14>

00000000802243c4 <.Lpcrel_hi28>:
;             let last = inner_id - INDIRECT1_BOUND;
802243c4: 17 55 01 00  	auipc	a0, 0x15
802243c8: 13 05 c5 35  	addi	a0, a0, 0x35c

00000000802243cc <.Lpcrel_hi29>:
802243cc: 97 55 01 00  	auipc	a1, 0x15
802243d0: 13 86 c5 44  	addi	a2, a1, 0x44c
802243d4: 93 05 10 02  	li	a1, 0x21
802243d8: 97 c0 00 00  	auipc	ra, 0xc
802243dc: e7 80 00 e4  	jalr	-0x1c0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;     }
802243e0: 03 25 44 e8  	lw	a0, -0x17c(s0)
802243e4: 83 30 81 22  	ld	ra, 0x228(sp)
802243e8: 03 34 01 22  	ld	s0, 0x220(sp)
802243ec: 13 01 01 23  	addi	sp, sp, 0x230
802243f0: 82 80        	ret
802243f2: 03 35 84 e7  	ld	a0, -0x188(s0)
802243f6: 83 35 84 e6  	ld	a1, -0x198(s0)
;             self.direct[inner_id]
802243fa: 8a 05        	slli	a1, a1, 0x2
802243fc: 2e 95        	add	a0, a0, a1
802243fe: 48 41        	lw	a0, 0x4(a0)
80224400: 23 22 a4 e8  	sw	a0, -0x17c(s0)
;         if inner_id < INODE_DIRECT_COUNT {
80224404: f1 bf        	j	0x802243e0 <.Lpcrel_hi29+0x14>
80224406: 03 35 84 e6  	ld	a0, -0x198(s0)

000000008022440a <.Lpcrel_hi30>:
;             self.direct[inner_id]
8022440a: 97 55 01 00  	auipc	a1, 0x15
8022440e: 13 86 65 42  	addi	a2, a1, 0x426
80224412: f1 45        	li	a1, 0x1c
80224414: 97 c0 00 00  	auipc	ra, 0xc
80224418: e7 80 c0 e9  	jalr	-0x164(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008022441c <_ZN7easy_fs6layout9DiskInode13increase_size17h348b917f40cb2877E>:
;     pub fn increase_size(
8022441c: 13 01 01 db  	addi	sp, sp, -0x250
80224420: 23 34 11 24  	sd	ra, 0x248(sp)
80224424: 23 30 81 24  	sd	s0, 0x240(sp)
80224428: 80 0c        	addi	s0, sp, 0x250
8022442a: 23 30 c4 e6  	sd	a2, -0x1a0(s0)
8022442e: 23 38 b4 e4  	sd	a1, -0x1b0(s0)
80224432: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
80224436: 23 34 d4 e6  	sd	a3, -0x198(s0)
8022443a: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022443e: 23 24 b4 f4  	sw	a1, -0xb8(s0)
;         let mut current_blocks = self.data_blocks();
80224442: 97 00 00 00  	auipc	ra, 0x0
80224446: e7 80 20 91  	jalr	-0x6ee(ra) <_ZN7easy_fs6layout9DiskInode11data_blocks17h319509b62e4364b1E>
8022444a: 83 35 04 e5  	ld	a1, -0x1b0(s0)
8022444e: 2a 86        	mv	a2, a0
80224450: 03 35 84 e5  	ld	a0, -0x1a8(s0)
80224454: 23 28 c4 e6  	sw	a2, -0x190(s0)
;         self.size = new_size;
80224458: 0c c1        	sw	a1, 0x0(a0)
;         let mut total_blocks = self.data_blocks();
8022445a: 97 00 00 00  	auipc	ra, 0x0
8022445e: e7 80 a0 8f  	jalr	-0x706(ra) <_ZN7easy_fs6layout9DiskInode11data_blocks17h319509b62e4364b1E>
80224462: 83 35 04 e6  	ld	a1, -0x1a0(s0)
80224466: 23 2a a4 e6  	sw	a0, -0x18c(s0)
8022446a: 13 05 84 e7  	addi	a0, s0, -0x188
;         let mut new_blocks = new_blocks.into_iter();
8022446e: 97 e0 ff ff  	auipc	ra, 0xffffe
80224472: e7 80 e0 39  	jalr	0x39e(ra) <ekernel+0xffcd580c>
80224476: 09 a0        	j	0x80224478 <_ZN7easy_fs6layout9DiskInode13increase_size17h348b917f40cb2877E+0x5c>
;         while current_blocks < total_blocks.min(INODE_DIRECT_COUNT as u32) {
80224478: 03 25 04 e7  	lw	a0, -0x190(s0)
8022447c: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
80224480: 03 25 44 e7  	lw	a0, -0x18c(s0)
80224484: f1 45        	li	a1, 0x1c
80224486: 97 30 00 00  	auipc	ra, 0x3
8022448a: e7 80 c0 1b  	jalr	0x1bc(ra) <_ZN4core3cmp3Ord3min17ha7e41dbc60ab1826E>
8022448e: aa 85        	mv	a1, a0
80224490: 03 35 84 e4  	ld	a0, -0x1b8(s0)
80224494: 81 25        	sext.w	a1, a1
80224496: 63 69 b5 00  	bltu	a0, a1, 0x802244a8 <_ZN7easy_fs6layout9DiskInode13increase_size17h348b917f40cb2877E+0x8c>
8022449a: 09 a0        	j	0x8022449c <_ZN7easy_fs6layout9DiskInode13increase_size17h348b917f40cb2877E+0x80>
;         if total_blocks > INODE_DIRECT_COUNT as u32 {
8022449c: 83 25 44 e7  	lw	a1, -0x18c(s0)
802244a0: 71 45        	li	a0, 0x1c
802244a2: 63 6e b5 04  	bltu	a0, a1, 0x802244fe <.Lpcrel_hi31+0x3a>
802244a6: a9 a0        	j	0x802244f0 <.Lpcrel_hi31+0x2c>
802244a8: 13 05 84 e7  	addi	a0, s0, -0x188
;             self.direct[current_blocks as usize] = new_blocks.next().unwrap();
802244ac: 97 30 00 00  	auipc	ra, 0x3
802244b0: e7 80 20 ec  	jalr	-0x13e(ra) <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E>
802244b4: 23 26 a4 f4  	sw	a0, -0xb4(s0)
802244b8: 23 28 b4 f4  	sw	a1, -0xb0(s0)
;         match self {
802244bc: 03 25 c4 f4  	lw	a0, -0xb4(s0)
802244c0: 11 e9        	bnez	a0, 0x802244d4 <.Lpcrel_hi31+0x10>
802244c2: 09 a0        	j	0x802244c4 <.Lpcrel_hi31>

00000000802244c4 <.Lpcrel_hi31>:
;             None => unwrap_failed(),
802244c4: 17 55 01 00  	auipc	a0, 0x15
802244c8: 13 05 45 41  	addi	a0, a0, 0x414
802244cc: 97 c0 00 00  	auipc	ra, 0xc
802244d0: e7 80 c0 7f  	jalr	0x7fc(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
802244d4: 03 25 04 f5  	lw	a0, -0xb0(s0)
802244d8: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
802244dc: 23 2a a4 f4  	sw	a0, -0xac(s0)
;             self.direct[current_blocks as usize] = new_blocks.next().unwrap();
802244e0: 03 65 04 e7  	lwu	a0, -0x190(s0)
802244e4: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
802244e8: f1 45        	li	a1, 0x1c
802244ea: 63 6c b5 42  	bltu	a0, a1, 0x80224922 <.Lpcrel_hi41+0x14>
802244ee: 91 a9        	j	0x80224942 <.Lpcrel_hi41+0x34>
802244f0: 13 05 84 e7  	addi	a0, s0, -0x188
;     }
802244f4: 97 90 ff ff  	auipc	ra, 0xffff9
802244f8: e7 80 60 51  	jalr	0x516(ra) <ekernel+0xffcd0a0a>
802244fc: d5 aa        	j	0x802246f0 <.Lpcrel_hi36+0x22>
;             if current_blocks == INODE_DIRECT_COUNT as u32 {
802244fe: 03 25 04 e7  	lw	a0, -0x190(s0)
80224502: f1 45        	li	a1, 0x1c
80224504: 63 0d b5 00  	beq	a0, a1, 0x8022451e <.Lpcrel_hi31+0x5a>
80224508: 09 a0        	j	0x8022450a <.Lpcrel_hi31+0x46>
;             current_blocks -= INODE_DIRECT_COUNT as u32;
8022450a: 03 25 04 e7  	lw	a0, -0x190(s0)
8022450e: 9b 05 45 fe  	addiw	a1, a0, -0x1c
80224512: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
80224516: f1 45        	li	a1, 0x1c
80224518: 63 6f b5 04  	bltu	a0, a1, 0x80224576 <.Lpcrel_hi33>
8022451c: 3d a8        	j	0x8022455a <.Lpcrel_hi32+0x20>
8022451e: 13 05 84 e7  	addi	a0, s0, -0x188
;                 self.indirect1 = new_blocks.next().unwrap();
80224522: 97 30 00 00  	auipc	ra, 0x3
80224526: e7 80 c0 e4  	jalr	-0x1b4(ra) <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E>
8022452a: 23 22 a4 f6  	sw	a0, -0x9c(s0)
8022452e: 23 24 b4 f6  	sw	a1, -0x98(s0)
;         match self {
80224532: 03 25 44 f6  	lw	a0, -0x9c(s0)
80224536: 11 e9        	bnez	a0, 0x8022454a <.Lpcrel_hi32+0x10>
80224538: 09 a0        	j	0x8022453a <.Lpcrel_hi32>

000000008022453a <.Lpcrel_hi32>:
;             None => unwrap_failed(),
8022453a: 17 55 01 00  	auipc	a0, 0x15
8022453e: 13 05 e5 30  	addi	a0, a0, 0x30e
80224542: 97 c0 00 00  	auipc	ra, 0xc
80224546: e7 80 60 78  	jalr	0x786(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
8022454a: 83 35 84 e5  	ld	a1, -0x1a8(s0)
;             Some(val) => val,
8022454e: 03 25 84 f6  	lw	a0, -0x98(s0)
80224552: 23 26 a4 f6  	sw	a0, -0x94(s0)
;                 self.indirect1 = new_blocks.next().unwrap();
80224556: e8 d9        	sw	a0, 0x74(a1)
;             if current_blocks == INODE_DIRECT_COUNT as u32 {
80224558: 4d bf        	j	0x8022450a <.Lpcrel_hi31+0x46>
8022455a: 03 35 04 e3  	ld	a0, -0x1d0(s0)
;             current_blocks -= INODE_DIRECT_COUNT as u32;
8022455e: 23 28 a4 e6  	sw	a0, -0x190(s0)
;             total_blocks -= INODE_DIRECT_COUNT as u32;
80224562: 03 25 44 e7  	lw	a0, -0x18c(s0)
80224566: 9b 05 45 fe  	addiw	a1, a0, -0x1c
8022456a: 23 34 b4 e2  	sd	a1, -0x1d8(s0)
8022456e: f1 45        	li	a1, 0x1c
80224570: 63 6b b5 14  	bltu	a0, a1, 0x802246c6 <.Lpcrel_hi35>
80224574: 39 a8        	j	0x80224592 <.Lpcrel_hi34+0x14>

0000000080224576 <.Lpcrel_hi33>:
;             current_blocks -= INODE_DIRECT_COUNT as u32;
80224576: 17 55 01 00  	auipc	a0, 0x15
8022457a: 13 05 a5 1a  	addi	a0, a0, 0x1aa

000000008022457e <.Lpcrel_hi34>:
8022457e: 97 55 01 00  	auipc	a1, 0x15
80224582: 13 86 25 2e  	addi	a2, a1, 0x2e2
80224586: 93 05 10 02  	li	a1, 0x21
8022458a: 97 c0 00 00  	auipc	ra, 0xc
8022458e: e7 80 e0 c8  	jalr	-0x372(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80224592: 03 35 84 e5  	ld	a0, -0x1a8(s0)
80224596: 83 35 84 e2  	ld	a1, -0x1d8(s0)
;             total_blocks -= INODE_DIRECT_COUNT as u32;
8022459a: 23 2a b4 e6  	sw	a1, -0x18c(s0)
;         get_block_cache(self.indirect1 as usize, Arc::clone(block_device))
8022459e: 03 65 45 07  	lwu	a0, 0x74(a0)
802245a2: 23 34 a4 e0  	sd	a0, -0x1f8(s0)
802245a6: 03 35 84 e6  	ld	a0, -0x198(s0)
802245aa: 97 90 ff ff  	auipc	ra, 0xffff9
802245ae: e7 80 60 b3  	jalr	-0x4ca(ra) <ekernel+0xffcd00e0>
802245b2: 2a 86        	mv	a2, a0
802245b4: 03 35 84 e0  	ld	a0, -0x1f8(s0)
802245b8: 23 38 c4 e0  	sd	a2, -0x1f0(s0)
802245bc: 2e 86        	mv	a2, a1
802245be: 83 35 04 e1  	ld	a1, -0x1f0(s0)
802245c2: 97 20 00 00  	auipc	ra, 0x2
802245c6: e7 80 20 84  	jalr	-0x7be(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
802245ca: 23 38 a4 ea  	sd	a0, -0x150(s0)
802245ce: 13 05 04 eb  	addi	a0, s0, -0x150
802245d2: 97 90 ff ff  	auipc	ra, 0xffff9
802245d6: e7 80 20 bb  	jalr	-0x44e(ra) <ekernel+0xffcd0184>
802245da: aa 85        	mv	a1, a0
802245dc: 23 3c b4 e0  	sd	a1, -0x1e8(s0)
802245e0: 23 34 a4 fa  	sd	a0, -0x58(s0)
802245e4: 23 3c a4 fa  	sd	a0, -0x48(s0)
802245e8: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
802245ea: 23 0b b4 fa  	sb	a1, -0x4a(s0)
802245ee: 03 46 64 fb  	lbu	a2, -0x4a(s0)
802245f2: 85 45        	li	a1, 0x1
802245f4: 97 b0 ff ff  	auipc	ra, 0xffffb
802245f8: e7 80 20 bb  	jalr	-0x44e(ra) <ekernel+0xffcd21a6>
802245fc: aa 85        	mv	a1, a0
802245fe: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
80224602: 23 30 a4 fc  	sd	a0, -0x40(s0)
80224606: 09 a0        	j	0x80224608 <.Lpcrel_hi34+0x8a>
80224608: 03 35 84 e1  	ld	a0, -0x1e8(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8022460c: 21 05        	addi	a0, a0, 0x8
8022460e: 89 45        	li	a1, 0x2
80224610: a3 0b b4 fa  	sb	a1, -0x49(s0)
80224614: 83 45 74 fb  	lbu	a1, -0x49(s0)
80224618: 97 b0 ff ff  	auipc	ra, 0xffffb
8022461c: e7 80 20 b4  	jalr	-0x4be(ra) <ekernel+0xffcd215a>
80224620: 83 35 04 e2  	ld	a1, -0x1e0(s0)
80224624: 63 08 b5 00  	beq	a0, a1, 0x80224634 <.Lpcrel_hi34+0xb6>
80224628: 09 a0        	j	0x8022462a <.Lpcrel_hi34+0xac>
;             crate::relax();
8022462a: 97 b0 ff ff  	auipc	ra, 0xffffb
8022462e: e7 80 40 c2  	jalr	-0x3dc(ra) <ekernel+0xffcd224e>
80224632: d9 bf        	j	0x80224608 <.Lpcrel_hi34+0x8a>
80224634: 83 35 04 e2  	ld	a1, -0x1e0(s0)
80224638: 03 35 84 e1  	ld	a0, -0x1e8(s0)
;             next_serving: &self.next_serving,
8022463c: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80224640: 41 05        	addi	a0, a0, 0x10
80224642: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         TicketMutexGuard {
80224646: 23 38 c4 f8  	sd	a2, -0x70(s0)
8022464a: 23 30 b4 fa  	sd	a1, -0x60(s0)
8022464e: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         MutexGuard {
80224652: 03 35 04 fa  	ld	a0, -0x60(s0)
80224656: 23 34 a4 ea  	sd	a0, -0x158(s0)
8022465a: 03 35 84 f9  	ld	a0, -0x68(s0)
8022465e: 23 30 a4 ea  	sd	a0, -0x160(s0)
80224662: 03 35 04 f9  	ld	a0, -0x70(s0)
80224666: 23 3c a4 e8  	sd	a0, -0x168(s0)
8022466a: 13 05 84 e9  	addi	a0, s0, -0x168
8022466e: 23 30 a4 e0  	sd	a0, -0x200(s0)
;         get_block_cache(self.indirect1 as usize, Arc::clone(block_device))
80224672: 97 e0 ff ff  	auipc	ra, 0xffffe
80224676: e7 80 00 00  	jalr	ra <ekernel+0xffcd5672>
8022467a: 93 05 04 e7  	addi	a1, s0, -0x190
;             .modify(0, |indirect1: &mut IndirectBlock| {
8022467e: 23 3c b4 ea  	sd	a1, -0x148(s0)
80224682: 93 05 44 e7  	addi	a1, s0, -0x18c
80224686: 23 30 b4 ec  	sd	a1, -0x140(s0)
8022468a: 93 05 84 e7  	addi	a1, s0, -0x188
8022468e: 23 34 b4 ec  	sd	a1, -0x138(s0)
80224692: 81 45        	li	a1, 0x0
80224694: 13 06 84 eb  	addi	a2, s0, -0x148
;         get_block_cache(self.indirect1 as usize, Arc::clone(block_device))
80224698: 97 d0 ff ff  	auipc	ra, 0xffffd
8022469c: e7 80 00 24  	jalr	0x240(ra) <ekernel+0xffcd48d8>
802246a0: 03 35 04 e0  	ld	a0, -0x200(s0)
;             });
802246a4: 97 90 ff ff  	auipc	ra, 0xffff9
802246a8: e7 80 20 3f  	jalr	0x3f2(ra) <ekernel+0xffcd0a96>
802246ac: 13 05 04 eb  	addi	a0, s0, -0x150
802246b0: 97 90 ff ff  	auipc	ra, 0xffff9
802246b4: e7 80 e0 07  	jalr	0x7e(ra) <ekernel+0xffcd072e>
;         if total_blocks > INODE_INDIRECT1_COUNT as u32 {
802246b8: 83 25 44 e7  	lw	a1, -0x18c(s0)
802246bc: 13 05 00 08  	li	a0, 0x80
802246c0: 63 61 b5 02  	bltu	a0, a1, 0x802246e2 <.Lpcrel_hi36+0x14>
802246c4: 35 b5        	j	0x802244f0 <.Lpcrel_hi31+0x2c>

00000000802246c6 <.Lpcrel_hi35>:
;             total_blocks -= INODE_DIRECT_COUNT as u32;
802246c6: 17 55 01 00  	auipc	a0, 0x15
802246ca: 13 05 a5 05  	addi	a0, a0, 0x5a

00000000802246ce <.Lpcrel_hi36>:
802246ce: 97 55 01 00  	auipc	a1, 0x15
802246d2: 13 86 a5 1a  	addi	a2, a1, 0x1aa
802246d6: 93 05 10 02  	li	a1, 0x21
802246da: 97 c0 00 00  	auipc	ra, 0xc
802246de: e7 80 e0 b3  	jalr	-0x4c2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;             if current_blocks == INODE_INDIRECT1_COUNT as u32 {
802246e2: 03 25 04 e7  	lw	a0, -0x190(s0)
802246e6: 93 05 00 08  	li	a1, 0x80
802246ea: 63 05 b5 02  	beq	a0, a1, 0x80224714 <.Lpcrel_hi36+0x46>
802246ee: 01 a8        	j	0x802246fe <.Lpcrel_hi36+0x30>
802246f0: 83 30 81 24  	ld	ra, 0x248(sp)
802246f4: 03 34 01 24  	ld	s0, 0x240(sp)
;     }
802246f8: 13 01 01 25  	addi	sp, sp, 0x250
802246fc: 82 80        	ret
;             current_blocks -= INODE_INDIRECT1_COUNT as u32;
802246fe: 03 25 04 e7  	lw	a0, -0x190(s0)
80224702: 9b 05 05 f8  	addiw	a1, a0, -0x80
80224706: 23 3c b4 de  	sd	a1, -0x208(s0)
8022470a: 93 05 00 08  	li	a1, 0x80
8022470e: 63 60 b5 06  	bltu	a0, a1, 0x8022476e <.Lpcrel_hi38>
80224712: 3d a8        	j	0x80224750 <.Lpcrel_hi37+0x20>
80224714: 13 05 84 e7  	addi	a0, s0, -0x188
;                 self.indirect2 = new_blocks.next().unwrap();
80224718: 97 30 00 00  	auipc	ra, 0x3
8022471c: e7 80 60 c5  	jalr	-0x3aa(ra) <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E>
80224720: 23 2c a4 f4  	sw	a0, -0xa8(s0)
80224724: 23 2e b4 f4  	sw	a1, -0xa4(s0)
;         match self {
80224728: 03 25 84 f5  	lw	a0, -0xa8(s0)
8022472c: 11 e9        	bnez	a0, 0x80224740 <.Lpcrel_hi37+0x10>
8022472e: 09 a0        	j	0x80224730 <.Lpcrel_hi37>

0000000080224730 <.Lpcrel_hi37>:
;             None => unwrap_failed(),
80224730: 17 55 01 00  	auipc	a0, 0x15
80224734: 13 05 05 16  	addi	a0, a0, 0x160
80224738: 97 c0 00 00  	auipc	ra, 0xc
8022473c: e7 80 00 59  	jalr	0x590(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
80224740: 83 35 84 e5  	ld	a1, -0x1a8(s0)
;             Some(val) => val,
80224744: 03 25 c4 f5  	lw	a0, -0xa4(s0)
80224748: 23 20 a4 f6  	sw	a0, -0xa0(s0)
;                 self.indirect2 = new_blocks.next().unwrap();
8022474c: a8 dd        	sw	a0, 0x78(a1)
;             if current_blocks == INODE_INDIRECT1_COUNT as u32 {
8022474e: 45 bf        	j	0x802246fe <.Lpcrel_hi36+0x30>
80224750: 03 35 84 df  	ld	a0, -0x208(s0)
;             current_blocks -= INODE_INDIRECT1_COUNT as u32;
80224754: 23 28 a4 e6  	sw	a0, -0x190(s0)
;             total_blocks -= INODE_INDIRECT1_COUNT as u32;
80224758: 03 25 44 e7  	lw	a0, -0x18c(s0)
8022475c: 9b 05 05 f8  	addiw	a1, a0, -0x80
80224760: 23 38 b4 de  	sd	a1, -0x210(s0)
80224764: 93 05 00 08  	li	a1, 0x80
80224768: 63 6f b5 18  	bltu	a0, a1, 0x80224906 <.Lpcrel_hi40>
8022476c: 39 a8        	j	0x8022478a <.Lpcrel_hi39+0x14>

000000008022476e <.Lpcrel_hi38>:
;             current_blocks -= INODE_INDIRECT1_COUNT as u32;
8022476e: 17 55 01 00  	auipc	a0, 0x15
80224772: 13 05 25 fb  	addi	a0, a0, -0x4e

0000000080224776 <.Lpcrel_hi39>:
80224776: 97 55 01 00  	auipc	a1, 0x15
8022477a: 13 86 25 13  	addi	a2, a1, 0x132
8022477e: 93 05 10 02  	li	a1, 0x21
80224782: 97 c0 00 00  	auipc	ra, 0xc
80224786: e7 80 60 a9  	jalr	-0x56a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022478a: 03 35 84 e5  	ld	a0, -0x1a8(s0)
8022478e: 83 35 04 df  	ld	a1, -0x210(s0)
;             total_blocks -= INODE_INDIRECT1_COUNT as u32;
80224792: 23 2a b4 e6  	sw	a1, -0x18c(s0)
;         let mut a0 = current_blocks as usize / INODE_INDIRECT1_COUNT;
80224796: 83 65 04 e7  	lwu	a1, -0x190(s0)
8022479a: 9d 81        	srli	a1, a1, 0x7
8022479c: 23 38 b4 ec  	sd	a1, -0x130(s0)
;         let mut b0 = current_blocks as usize % INODE_INDIRECT1_COUNT;
802247a0: 83 65 04 e7  	lwu	a1, -0x190(s0)
802247a4: 93 f5 f5 07  	andi	a1, a1, 0x7f
802247a8: 23 3c b4 ec  	sd	a1, -0x128(s0)
;         let a1 = total_blocks as usize / INODE_INDIRECT1_COUNT;
802247ac: 83 65 44 e7  	lwu	a1, -0x18c(s0)
802247b0: 9d 81        	srli	a1, a1, 0x7
802247b2: 23 30 b4 ee  	sd	a1, -0x120(s0)
;         let b1 = total_blocks as usize % INODE_INDIRECT1_COUNT;
802247b6: 83 65 44 e7  	lwu	a1, -0x18c(s0)
802247ba: 93 f5 f5 07  	andi	a1, a1, 0x7f
802247be: 23 34 b4 ee  	sd	a1, -0x118(s0)
;         get_block_cache(self.indirect2 as usize, Arc::clone(block_device))
802247c2: 03 65 85 07  	lwu	a0, 0x78(a0)
802247c6: 23 38 a4 dc  	sd	a0, -0x230(s0)
802247ca: 03 35 84 e6  	ld	a0, -0x198(s0)
802247ce: 97 90 ff ff  	auipc	ra, 0xffff9
802247d2: e7 80 20 91  	jalr	-0x6ee(ra) <ekernel+0xffcd00e0>
802247d6: 2a 86        	mv	a2, a0
802247d8: 03 35 04 dd  	ld	a0, -0x230(s0)
802247dc: 23 3c c4 dc  	sd	a2, -0x228(s0)
802247e0: 2e 86        	mv	a2, a1
802247e2: 83 35 84 dd  	ld	a1, -0x228(s0)
802247e6: 97 10 00 00  	auipc	ra, 0x1
802247ea: e7 80 e0 61  	jalr	0x61e(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
802247ee: 23 34 a4 f0  	sd	a0, -0xf8(s0)
802247f2: 13 05 84 f0  	addi	a0, s0, -0xf8
802247f6: 97 90 ff ff  	auipc	ra, 0xffff9
802247fa: e7 80 e0 98  	jalr	-0x672(ra) <ekernel+0xffcd0184>
802247fe: aa 85        	mv	a1, a0
80224800: 23 30 b4 de  	sd	a1, -0x220(s0)
80224804: 23 34 a4 f8  	sd	a0, -0x78(s0)
80224808: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022480c: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8022480e: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80224812: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80224816: 85 45        	li	a1, 0x1
80224818: 97 b0 ff ff  	auipc	ra, 0xffffb
8022481c: e7 80 e0 98  	jalr	-0x672(ra) <ekernel+0xffcd21a6>
80224820: aa 85        	mv	a1, a0
80224822: 23 34 b4 de  	sd	a1, -0x218(s0)
80224826: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022482a: 09 a0        	j	0x8022482c <.Lpcrel_hi39+0xb6>
8022482c: 03 35 04 de  	ld	a0, -0x220(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80224830: 21 05        	addi	a0, a0, 0x8
80224832: 89 45        	li	a1, 0x2
80224834: a3 0b b4 fc  	sb	a1, -0x29(s0)
80224838: 83 45 74 fd  	lbu	a1, -0x29(s0)
8022483c: 97 b0 ff ff  	auipc	ra, 0xffffb
80224840: e7 80 e0 91  	jalr	-0x6e2(ra) <ekernel+0xffcd215a>
80224844: 83 35 84 de  	ld	a1, -0x218(s0)
80224848: 63 08 b5 00  	beq	a0, a1, 0x80224858 <.Lpcrel_hi39+0xe2>
8022484c: 09 a0        	j	0x8022484e <.Lpcrel_hi39+0xd8>
;             crate::relax();
8022484e: 97 b0 ff ff  	auipc	ra, 0xffffb
80224852: e7 80 00 a0  	jalr	-0x600(ra) <ekernel+0xffcd224e>
80224856: d9 bf        	j	0x8022482c <.Lpcrel_hi39+0xb6>
80224858: 83 35 84 de  	ld	a1, -0x218(s0)
8022485c: 03 35 04 de  	ld	a0, -0x220(s0)
;             next_serving: &self.next_serving,
80224860: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80224864: 41 05        	addi	a0, a0, 0x10
80224866: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8022486a: 23 38 c4 f6  	sd	a2, -0x90(s0)
8022486e: 23 30 b4 f8  	sd	a1, -0x80(s0)
80224872: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         MutexGuard {
80224876: 03 35 04 f8  	ld	a0, -0x80(s0)
8022487a: 23 30 a4 f0  	sd	a0, -0x100(s0)
8022487e: 03 35 84 f7  	ld	a0, -0x88(s0)
80224882: 23 3c a4 ee  	sd	a0, -0x108(s0)
80224886: 03 35 04 f7  	ld	a0, -0x90(s0)
8022488a: 23 38 a4 ee  	sd	a0, -0x110(s0)
8022488e: 13 05 04 ef  	addi	a0, s0, -0x110
80224892: 23 30 a4 dc  	sd	a0, -0x240(s0)
;         get_block_cache(self.indirect2 as usize, Arc::clone(block_device))
80224896: 97 e0 ff ff  	auipc	ra, 0xffffe
8022489a: e7 80 c0 dd  	jalr	-0x224(ra) <ekernel+0xffcd5672>
8022489e: 93 05 04 ed  	addi	a1, s0, -0x130
;             .modify(0, |indirect2: &mut IndirectBlock| {
802248a2: 23 38 b4 f0  	sd	a1, -0xf0(s0)
802248a6: 93 05 04 ee  	addi	a1, s0, -0x120
802248aa: 23 3c b4 f0  	sd	a1, -0xe8(s0)
802248ae: 93 05 84 ed  	addi	a1, s0, -0x128
802248b2: 23 30 b4 f2  	sd	a1, -0xe0(s0)
802248b6: 93 05 84 ee  	addi	a1, s0, -0x118
802248ba: 23 34 b4 f2  	sd	a1, -0xd8(s0)
802248be: 93 05 84 e7  	addi	a1, s0, -0x188
802248c2: 23 34 b4 dc  	sd	a1, -0x238(s0)
802248c6: 23 38 b4 f2  	sd	a1, -0xd0(s0)
802248ca: 93 05 84 e6  	addi	a1, s0, -0x198
802248ce: 23 3c b4 f2  	sd	a1, -0xc8(s0)
802248d2: 81 45        	li	a1, 0x0
802248d4: 13 06 04 f1  	addi	a2, s0, -0xf0
;         get_block_cache(self.indirect2 as usize, Arc::clone(block_device))
802248d8: 97 d0 ff ff  	auipc	ra, 0xffffd
802248dc: e7 80 00 e8  	jalr	-0x180(ra) <ekernel+0xffcd4758>
802248e0: 03 35 04 dc  	ld	a0, -0x240(s0)
;             });
802248e4: 97 90 ff ff  	auipc	ra, 0xffff9
802248e8: e7 80 20 1b  	jalr	0x1b2(ra) <ekernel+0xffcd0a96>
802248ec: 13 05 84 f0  	addi	a0, s0, -0xf8
802248f0: 97 90 ff ff  	auipc	ra, 0xffff9
802248f4: e7 80 e0 e3  	jalr	-0x1c2(ra) <ekernel+0xffcd072e>
802248f8: 03 35 84 dc  	ld	a0, -0x238(s0)
;     }
802248fc: 97 90 ff ff  	auipc	ra, 0xffff9
80224900: e7 80 e0 10  	jalr	0x10e(ra) <ekernel+0xffcd0a0a>
80224904: f5 b3        	j	0x802246f0 <.Lpcrel_hi36+0x22>

0000000080224906 <.Lpcrel_hi40>:
;             total_blocks -= INODE_INDIRECT1_COUNT as u32;
80224906: 17 55 01 00  	auipc	a0, 0x15
8022490a: 13 05 a5 e1  	addi	a0, a0, -0x1e6

000000008022490e <.Lpcrel_hi41>:
8022490e: 97 55 01 00  	auipc	a1, 0x15
80224912: 13 86 25 fb  	addi	a2, a1, -0x4e
80224916: 93 05 10 02  	li	a1, 0x21
8022491a: 97 c0 00 00  	auipc	ra, 0xc
8022491e: e7 80 e0 8f  	jalr	-0x702(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80224922: 03 35 84 e3  	ld	a0, -0x1c8(s0)
80224926: 83 35 84 e5  	ld	a1, -0x1a8(s0)
8022492a: 03 36 04 e4  	ld	a2, -0x1c0(s0)
;             self.direct[current_blocks as usize] = new_blocks.next().unwrap();
8022492e: 0a 06        	slli	a2, a2, 0x2
80224930: b2 95        	add	a1, a1, a2
80224932: c8 c1        	sw	a0, 0x4(a1)
;             current_blocks += 1;
80224934: 03 25 04 e7  	lw	a0, -0x190(s0)
80224938: 05 25        	addiw	a0, a0, 0x1
8022493a: 23 3c a4 da  	sd	a0, -0x248(s0)
8022493e: 15 c1        	beqz	a0, 0x80224962 <.Lpcrel_hi43>
80224940: 21 a8        	j	0x80224958 <.Lpcrel_hi42+0x12>
80224942: 03 35 04 e4  	ld	a0, -0x1c0(s0)

0000000080224946 <.Lpcrel_hi42>:
;             self.direct[current_blocks as usize] = new_blocks.next().unwrap();
80224946: 97 55 01 00  	auipc	a1, 0x15
8022494a: 13 86 a5 fa  	addi	a2, a1, -0x56
8022494e: f1 45        	li	a1, 0x1c
80224950: 97 c0 00 00  	auipc	ra, 0xc
80224954: e7 80 00 96  	jalr	-0x6a0(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
80224958: 03 35 84 db  	ld	a0, -0x248(s0)
;             current_blocks += 1;
8022495c: 23 28 a4 e6  	sw	a0, -0x190(s0)
;         while current_blocks < total_blocks.min(INODE_DIRECT_COUNT as u32) {
80224960: 21 be        	j	0x80224478 <_ZN7easy_fs6layout9DiskInode13increase_size17h348b917f40cb2877E+0x5c>

0000000080224962 <.Lpcrel_hi43>:
;             current_blocks += 1;
80224962: 17 55 01 00  	auipc	a0, 0x15
80224966: 13 05 e5 d7  	addi	a0, a0, -0x282

000000008022496a <.Lpcrel_hi44>:
8022496a: 97 55 01 00  	auipc	a1, 0x15
8022496e: 13 86 e5 f9  	addi	a2, a1, -0x62
80224972: f1 45        	li	a1, 0x1c
80224974: 97 c0 00 00  	auipc	ra, 0xc
80224978: e7 80 40 8a  	jalr	-0x75c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022497c <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E>:
;     pub fn clear_size(&mut self, block_device: &Arc<dyn BlockDevice>) -> Vec<u32> {
8022497c: 01 71        	addi	sp, sp, -0x200
8022497e: 86 ff        	sd	ra, 0x1f8(sp)
80224980: a2 fb        	sd	s0, 0x1f0(sp)
80224982: 00 04        	addi	s0, sp, 0x200
80224984: 23 34 b4 ea  	sd	a1, -0x158(s0)
80224988: 23 30 a4 ea  	sd	a0, -0x160(s0)
8022498c: 23 38 c4 ea  	sd	a2, -0x150(s0)
80224990: 23 34 b4 f6  	sd	a1, -0x98(s0)
80224994: 13 05 84 eb  	addi	a0, s0, -0x148
;         let mut v: Vec<u32> = Vec::new();
80224998: 97 e0 ff ff  	auipc	ra, 0xffffe
8022499c: e7 80 20 d1  	jalr	-0x2ee(ra) <ekernel+0xffcd56aa>
802249a0: 03 35 84 ea  	ld	a0, -0x158(s0)
;         let mut data_blocks = self.data_blocks() as usize;
802249a4: 97 f0 ff ff  	auipc	ra, 0xfffff
802249a8: e7 80 00 3b  	jalr	0x3b0(ra) <ekernel+0xffcd6d54>
802249ac: 83 35 84 ea  	ld	a1, -0x158(s0)
802249b0: 02 15        	slli	a0, a0, 0x20
802249b2: 01 91        	srli	a0, a0, 0x20
802249b4: 23 38 a4 ec  	sd	a0, -0x130(s0)
802249b8: 01 45        	li	a0, 0x0
;         self.size = 0;
802249ba: 88 c1        	sw	a0, 0x0(a1)
;         let mut current_blocks = 0usize;
802249bc: 23 3c a4 ec  	sd	a0, -0x128(s0)
;         while current_blocks < data_blocks.min(INODE_DIRECT_COUNT) {
802249c0: 09 a0        	j	0x802249c2 <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x46>
802249c2: 03 35 84 ed  	ld	a0, -0x128(s0)
802249c6: 23 3c a4 e8  	sd	a0, -0x168(s0)
802249ca: 03 35 04 ed  	ld	a0, -0x130(s0)
802249ce: f1 45        	li	a1, 0x1c
802249d0: 97 30 00 00  	auipc	ra, 0x3
802249d4: e7 80 20 c5  	jalr	-0x3ae(ra) <_ZN4core3cmp3Ord3min17h761e5a0d4bbde9abE>
802249d8: aa 85        	mv	a1, a0
802249da: 03 35 84 e9  	ld	a0, -0x168(s0)
802249de: 63 69 b5 00  	bltu	a0, a1, 0x802249f0 <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x74>
802249e2: 09 a0        	j	0x802249e4 <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x68>
;         if data_blocks > INODE_DIRECT_COUNT {
802249e4: 83 35 04 ed  	ld	a1, -0x130(s0)
802249e8: 71 45        	li	a0, 0x1c
802249ea: 63 67 b5 02  	bltu	a0, a1, 0x80224a18 <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x9c>
802249ee: 09 a8        	j	0x80224a00 <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x84>
;             v.push(self.direct[current_blocks]);
802249f0: 03 35 84 ed  	ld	a0, -0x128(s0)
802249f4: 23 38 a4 e8  	sd	a0, -0x170(s0)
802249f8: f1 45        	li	a1, 0x1c
802249fa: 63 64 b5 3a  	bltu	a0, a1, 0x80224da2 <.Lpcrel_hi50+0x176>
802249fe: f9 a6        	j	0x80224dcc <.Lpcrel_hi50+0x1a0>
80224a00: 83 35 04 ea  	ld	a1, -0x160(s0)
;             return v;
80224a04: 03 35 84 ec  	ld	a0, -0x138(s0)
80224a08: 88 e9        	sd	a0, 0x10(a1)
80224a0a: 03 35 04 ec  	ld	a0, -0x140(s0)
80224a0e: 88 e5        	sd	a0, 0x8(a1)
80224a10: 03 35 84 eb  	ld	a0, -0x148(s0)
80224a14: 88 e1        	sd	a0, 0x0(a1)
; //!An easy file system isolated from the kernel
80224a16: 25 a0        	j	0x80224a3e <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0xc2>
80224a18: 03 35 84 ea  	ld	a0, -0x158(s0)
;             v.push(self.indirect1);
80224a1c: 6c 59        	lw	a1, 0x74(a0)
80224a1e: 13 05 84 eb  	addi	a0, s0, -0x148
80224a22: 97 e0 ff ff  	auipc	ra, 0xffffe
80224a26: e7 80 40 d6  	jalr	-0x29c(ra) <ekernel+0xffcd5786>
;             data_blocks -= INODE_DIRECT_COUNT;
80224a2a: 03 35 04 ed  	ld	a0, -0x130(s0)
80224a2e: 93 05 45 fe  	addi	a1, a0, -0x1c
80224a32: 23 34 b4 e8  	sd	a1, -0x178(s0)
80224a36: f1 45        	li	a1, 0x1c
80224a38: 63 6f b5 14  	bltu	a0, a1, 0x80224b96 <.Lpcrel_hi45>
80224a3c: 31 a0        	j	0x80224a48 <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0xcc>
80224a3e: fe 70        	ld	ra, 0x1f8(sp)
80224a40: 5e 74        	ld	s0, 0x1f0(sp)
;     }
80224a42: 13 01 01 20  	addi	sp, sp, 0x200
80224a46: 82 80        	ret
80224a48: 03 35 84 ea  	ld	a0, -0x158(s0)
80224a4c: 83 35 84 e8  	ld	a1, -0x178(s0)
;             data_blocks -= INODE_DIRECT_COUNT;
80224a50: 23 38 b4 ec  	sd	a1, -0x130(s0)
80224a54: 81 45        	li	a1, 0x0
80224a56: 23 38 b4 e6  	sd	a1, -0x190(s0)
;             current_blocks = 0;
80224a5a: 23 3c b4 ec  	sd	a1, -0x128(s0)
;         get_block_cache(self.indirect1 as usize, Arc::clone(block_device))
80224a5e: 03 65 45 07  	lwu	a0, 0x74(a0)
80224a62: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
80224a66: 03 35 04 eb  	ld	a0, -0x150(s0)
80224a6a: 97 80 ff ff  	auipc	ra, 0xffff8
80224a6e: e7 80 60 67  	jalr	0x676(ra) <ekernel+0xffcd00e0>
80224a72: 2a 86        	mv	a2, a0
80224a74: 03 35 04 e6  	ld	a0, -0x1a0(s0)
80224a78: 23 34 c4 e6  	sd	a2, -0x198(s0)
80224a7c: 2e 86        	mv	a2, a1
80224a7e: 83 35 84 e6  	ld	a1, -0x198(s0)
80224a82: 97 10 00 00  	auipc	ra, 0x1
80224a86: e7 80 20 38  	jalr	0x382(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
80224a8a: 23 3c a4 ee  	sd	a0, -0x108(s0)
80224a8e: 13 05 84 ef  	addi	a0, s0, -0x108
80224a92: 97 80 ff ff  	auipc	ra, 0xffff8
80224a96: e7 80 20 6f  	jalr	0x6f2(ra) <ekernel+0xffcd0184>
80224a9a: 83 35 04 e7  	ld	a1, -0x190(s0)
80224a9e: 2a 86        	mv	a2, a0
80224aa0: 23 3c c4 e6  	sd	a2, -0x188(s0)
80224aa4: 23 34 a4 fa  	sd	a0, -0x58(s0)
80224aa8: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80224aac: 23 0b b4 fa  	sb	a1, -0x4a(s0)
80224ab0: 03 46 64 fb  	lbu	a2, -0x4a(s0)
80224ab4: 85 45        	li	a1, 0x1
80224ab6: 97 a0 ff ff  	auipc	ra, 0xffffa
80224aba: e7 80 00 6f  	jalr	0x6f0(ra) <ekernel+0xffcd21a6>
80224abe: aa 85        	mv	a1, a0
80224ac0: 23 30 b4 e8  	sd	a1, -0x180(s0)
80224ac4: 23 30 a4 fc  	sd	a0, -0x40(s0)
80224ac8: 09 a0        	j	0x80224aca <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x14e>
80224aca: 03 35 84 e7  	ld	a0, -0x188(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80224ace: 21 05        	addi	a0, a0, 0x8
80224ad0: 89 45        	li	a1, 0x2
80224ad2: a3 0b b4 fa  	sb	a1, -0x49(s0)
80224ad6: 83 45 74 fb  	lbu	a1, -0x49(s0)
80224ada: 97 a0 ff ff  	auipc	ra, 0xffffa
80224ade: e7 80 00 68  	jalr	0x680(ra) <ekernel+0xffcd215a>
80224ae2: 83 35 04 e8  	ld	a1, -0x180(s0)
80224ae6: 63 08 b5 00  	beq	a0, a1, 0x80224af6 <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x17a>
80224aea: 09 a0        	j	0x80224aec <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x170>
;             crate::relax();
80224aec: 97 a0 ff ff  	auipc	ra, 0xffffa
80224af0: e7 80 20 76  	jalr	0x762(ra) <ekernel+0xffcd224e>
80224af4: d9 bf        	j	0x80224aca <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x14e>
80224af6: 83 35 04 e8  	ld	a1, -0x180(s0)
80224afa: 03 35 84 e7  	ld	a0, -0x188(s0)
;             next_serving: &self.next_serving,
80224afe: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80224b02: 41 05        	addi	a0, a0, 0x10
80224b04: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         TicketMutexGuard {
80224b08: 23 38 c4 f8  	sd	a2, -0x70(s0)
80224b0c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80224b10: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         MutexGuard {
80224b14: 03 35 04 fa  	ld	a0, -0x60(s0)
80224b18: 23 38 a4 ee  	sd	a0, -0x110(s0)
80224b1c: 03 35 84 f9  	ld	a0, -0x68(s0)
80224b20: 23 34 a4 ee  	sd	a0, -0x118(s0)
80224b24: 03 35 04 f9  	ld	a0, -0x70(s0)
80224b28: 23 30 a4 ee  	sd	a0, -0x120(s0)
80224b2c: 13 05 04 ee  	addi	a0, s0, -0x120
80224b30: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
;         get_block_cache(self.indirect1 as usize, Arc::clone(block_device))
80224b34: 97 e0 ff ff  	auipc	ra, 0xffffe
80224b38: e7 80 e0 b3  	jalr	-0x4c2(ra) <ekernel+0xffcd5672>
80224b3c: 93 05 84 ed  	addi	a1, s0, -0x128
;             .modify(0, |indirect1: &mut IndirectBlock| {
80224b40: 23 30 b4 f0  	sd	a1, -0x100(s0)
80224b44: 93 05 04 ed  	addi	a1, s0, -0x130
80224b48: 23 34 b4 f0  	sd	a1, -0xf8(s0)
80224b4c: 93 05 84 eb  	addi	a1, s0, -0x148
80224b50: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80224b54: 81 45        	li	a1, 0x0
80224b56: 23 3c b4 e4  	sd	a1, -0x1a8(s0)
80224b5a: 13 06 04 f0  	addi	a2, s0, -0x100
;         get_block_cache(self.indirect1 as usize, Arc::clone(block_device))
80224b5e: 97 d0 ff ff  	auipc	ra, 0xffffd
80224b62: e7 80 20 c7  	jalr	-0x38e(ra) <ekernel+0xffcd47d0>
80224b66: 03 35 04 e5  	ld	a0, -0x1b0(s0)
;             });
80224b6a: 97 90 ff ff  	auipc	ra, 0xffff9
80224b6e: e7 80 c0 f2  	jalr	-0xd4(ra) <ekernel+0xffcd0a96>
80224b72: 13 05 84 ef  	addi	a0, s0, -0x108
80224b76: 97 90 ff ff  	auipc	ra, 0xffff9
80224b7a: e7 80 80 bb  	jalr	-0x448(ra) <ekernel+0xffcd072e>
80224b7e: 83 35 84 ea  	ld	a1, -0x158(s0)
80224b82: 03 35 84 e5  	ld	a0, -0x1a8(s0)
;         self.indirect1 = 0;
80224b86: e8 d9        	sw	a0, 0x74(a1)
;         if data_blocks > INODE_INDIRECT1_COUNT {
80224b88: 83 35 04 ed  	ld	a1, -0x130(s0)
80224b8c: 13 05 00 08  	li	a0, 0x80
80224b90: 63 6d b5 02  	bltu	a0, a1, 0x80224bca <.Lpcrel_hi46+0x2c>
80224b94: 39 a8        	j	0x80224bb2 <.Lpcrel_hi46+0x14>

0000000080224b96 <.Lpcrel_hi45>:
;             data_blocks -= INODE_DIRECT_COUNT;
80224b96: 17 55 01 00  	auipc	a0, 0x15
80224b9a: 13 05 a5 b8  	addi	a0, a0, -0x476

0000000080224b9e <.Lpcrel_hi46>:
80224b9e: 97 55 01 00  	auipc	a1, 0x15
80224ba2: 13 86 25 d8  	addi	a2, a1, -0x27e
80224ba6: 93 05 10 02  	li	a1, 0x21
80224baa: 97 b0 00 00  	auipc	ra, 0xb
80224bae: e7 80 e0 66  	jalr	0x66e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80224bb2: 83 35 04 ea  	ld	a1, -0x160(s0)
;             return v;
80224bb6: 03 35 84 ec  	ld	a0, -0x138(s0)
80224bba: 88 e9        	sd	a0, 0x10(a1)
80224bbc: 03 35 04 ec  	ld	a0, -0x140(s0)
80224bc0: 88 e5        	sd	a0, 0x8(a1)
80224bc2: 03 35 84 eb  	ld	a0, -0x148(s0)
80224bc6: 88 e1        	sd	a0, 0x0(a1)
; //!An easy file system isolated from the kernel
80224bc8: 9d bd        	j	0x80224a3e <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0xc2>
80224bca: 03 35 84 ea  	ld	a0, -0x158(s0)
;             v.push(self.indirect2);
80224bce: 2c 5d        	lw	a1, 0x78(a0)
80224bd0: 13 05 84 eb  	addi	a0, s0, -0x148
80224bd4: 97 e0 ff ff  	auipc	ra, 0xffffe
80224bd8: e7 80 20 bb  	jalr	-0x44e(ra) <ekernel+0xffcd5786>
;             data_blocks -= INODE_INDIRECT1_COUNT;
80224bdc: 03 35 04 ed  	ld	a0, -0x130(s0)
80224be0: 93 05 05 f8  	addi	a1, a0, -0x80
80224be4: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
80224be8: 93 05 00 08  	li	a1, 0x80
80224bec: 63 6e b5 00  	bltu	a0, a1, 0x80224c08 <.Lpcrel_hi47>
80224bf0: 09 a0        	j	0x80224bf2 <.Lpcrel_hi46+0x54>
80224bf2: 03 35 84 e4  	ld	a0, -0x1b8(s0)
;             data_blocks -= INODE_INDIRECT1_COUNT;
80224bf6: 23 38 a4 ec  	sd	a0, -0x130(s0)
;         assert!(data_blocks <= INODE_INDIRECT2_COUNT);
80224bfa: 03 35 04 ed  	ld	a0, -0x130(s0)
80224bfe: 91 65        	lui	a1, 0x4
80224c00: 85 25        	addiw	a1, a1, 0x1
80224c02: 63 6f b5 02  	bltu	a0, a1, 0x80224c40 <.Lpcrel_hi50+0x14>
80224c06: 39 a8        	j	0x80224c24 <.Lpcrel_hi49>

0000000080224c08 <.Lpcrel_hi47>:
;             data_blocks -= INODE_INDIRECT1_COUNT;
80224c08: 17 55 01 00  	auipc	a0, 0x15
80224c0c: 13 05 85 b1  	addi	a0, a0, -0x4e8

0000000080224c10 <.Lpcrel_hi48>:
80224c10: 97 55 01 00  	auipc	a1, 0x15
80224c14: 13 86 85 d2  	addi	a2, a1, -0x2d8
80224c18: 93 05 10 02  	li	a1, 0x21
80224c1c: 97 b0 00 00  	auipc	ra, 0xb
80224c20: e7 80 c0 5f  	jalr	0x5fc(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080224c24 <.Lpcrel_hi49>:
;         assert!(data_blocks <= INODE_INDIRECT2_COUNT);
80224c24: 17 55 01 00  	auipc	a0, 0x15
80224c28: 13 05 c5 d2  	addi	a0, a0, -0x2d4

0000000080224c2c <.Lpcrel_hi50>:
80224c2c: 97 55 01 00  	auipc	a1, 0x15
80224c30: 13 86 c5 d5  	addi	a2, a1, -0x2a4
80224c34: 93 05 60 03  	li	a1, 0x36
80224c38: 97 b0 00 00  	auipc	ra, 0xb
80224c3c: e7 80 00 5e  	jalr	0x5e0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80224c40: 03 35 84 ea  	ld	a0, -0x158(s0)
;         let a1 = data_blocks / INODE_INDIRECT1_COUNT;
80224c44: 83 35 04 ed  	ld	a1, -0x130(s0)
80224c48: 9d 81        	srli	a1, a1, 0x7
80224c4a: 23 3c b4 f0  	sd	a1, -0xe8(s0)
;         let b1 = data_blocks % INODE_INDIRECT1_COUNT;
80224c4e: 83 35 04 ed  	ld	a1, -0x130(s0)
80224c52: 93 f5 f5 07  	andi	a1, a1, 0x7f
80224c56: 23 30 b4 f2  	sd	a1, -0xe0(s0)
;         get_block_cache(self.indirect2 as usize, Arc::clone(block_device))
80224c5a: 03 65 85 07  	lwu	a0, 0x78(a0)
80224c5e: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
80224c62: 03 35 04 eb  	ld	a0, -0x150(s0)
80224c66: 97 80 ff ff  	auipc	ra, 0xffff8
80224c6a: e7 80 a0 47  	jalr	0x47a(ra) <ekernel+0xffcd00e0>
80224c6e: 2a 86        	mv	a2, a0
80224c70: 03 35 84 e2  	ld	a0, -0x1d8(s0)
80224c74: 23 38 c4 e2  	sd	a2, -0x1d0(s0)
80224c78: 2e 86        	mv	a2, a1
80224c7a: 83 35 04 e3  	ld	a1, -0x1d0(s0)
80224c7e: 97 10 00 00  	auipc	ra, 0x1
80224c82: e7 80 60 18  	jalr	0x186(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
80224c86: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80224c8a: 13 05 04 f4  	addi	a0, s0, -0xc0
80224c8e: 97 80 ff ff  	auipc	ra, 0xffff8
80224c92: e7 80 60 4f  	jalr	0x4f6(ra) <ekernel+0xffcd0184>
80224c96: aa 85        	mv	a1, a0
80224c98: 23 3c b4 e2  	sd	a1, -0x1c8(s0)
80224c9c: 23 34 a4 f8  	sd	a0, -0x78(s0)
80224ca0: 23 3c a4 fc  	sd	a0, -0x28(s0)
80224ca4: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80224ca6: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80224caa: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80224cae: 85 45        	li	a1, 0x1
80224cb0: 97 a0 ff ff  	auipc	ra, 0xffffa
80224cb4: e7 80 60 4f  	jalr	0x4f6(ra) <ekernel+0xffcd21a6>
80224cb8: aa 85        	mv	a1, a0
80224cba: 23 30 b4 e4  	sd	a1, -0x1c0(s0)
80224cbe: 23 30 a4 fe  	sd	a0, -0x20(s0)
80224cc2: 09 a0        	j	0x80224cc4 <.Lpcrel_hi50+0x98>
80224cc4: 03 35 84 e3  	ld	a0, -0x1c8(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80224cc8: 21 05        	addi	a0, a0, 0x8
80224cca: 89 45        	li	a1, 0x2
80224ccc: a3 0b b4 fc  	sb	a1, -0x29(s0)
80224cd0: 83 45 74 fd  	lbu	a1, -0x29(s0)
80224cd4: 97 a0 ff ff  	auipc	ra, 0xffffa
80224cd8: e7 80 60 48  	jalr	0x486(ra) <ekernel+0xffcd215a>
80224cdc: 83 35 04 e4  	ld	a1, -0x1c0(s0)
80224ce0: 63 08 b5 00  	beq	a0, a1, 0x80224cf0 <.Lpcrel_hi50+0xc4>
80224ce4: 09 a0        	j	0x80224ce6 <.Lpcrel_hi50+0xba>
;             crate::relax();
80224ce6: 97 a0 ff ff  	auipc	ra, 0xffffa
80224cea: e7 80 80 56  	jalr	0x568(ra) <ekernel+0xffcd224e>
80224cee: d9 bf        	j	0x80224cc4 <.Lpcrel_hi50+0x98>
80224cf0: 83 35 04 e4  	ld	a1, -0x1c0(s0)
80224cf4: 03 35 84 e3  	ld	a0, -0x1c8(s0)
;             next_serving: &self.next_serving,
80224cf8: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80224cfc: 41 05        	addi	a0, a0, 0x10
80224cfe: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
80224d02: 23 38 c4 f6  	sd	a2, -0x90(s0)
80224d06: 23 30 b4 f8  	sd	a1, -0x80(s0)
80224d0a: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         MutexGuard {
80224d0e: 03 35 04 f8  	ld	a0, -0x80(s0)
80224d12: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80224d16: 03 35 84 f7  	ld	a0, -0x88(s0)
80224d1a: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80224d1e: 03 35 04 f7  	ld	a0, -0x90(s0)
80224d22: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80224d26: 13 05 84 f2  	addi	a0, s0, -0xd8
80224d2a: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
;         get_block_cache(self.indirect2 as usize, Arc::clone(block_device))
80224d2e: 97 e0 ff ff  	auipc	ra, 0xffffe
80224d32: e7 80 40 94  	jalr	-0x6bc(ra) <ekernel+0xffcd5672>
80224d36: 93 05 84 f1  	addi	a1, s0, -0xe8
;             .modify(0, |indirect2: &mut IndirectBlock| {
80224d3a: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80224d3e: 93 05 84 eb  	addi	a1, s0, -0x148
80224d42: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80224d46: 93 05 04 eb  	addi	a1, s0, -0x150
80224d4a: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80224d4e: 93 05 04 f2  	addi	a1, s0, -0xe0
80224d52: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80224d56: 81 45        	li	a1, 0x0
80224d58: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
80224d5c: 13 06 84 f4  	addi	a2, s0, -0xb8
;         get_block_cache(self.indirect2 as usize, Arc::clone(block_device))
80224d60: 97 d0 ff ff  	auipc	ra, 0xffffd
80224d64: e7 80 40 97  	jalr	-0x68c(ra) <ekernel+0xffcd46d4>
80224d68: 03 35 84 e1  	ld	a0, -0x1e8(s0)
;             });
80224d6c: 97 90 ff ff  	auipc	ra, 0xffff9
80224d70: e7 80 a0 d2  	jalr	-0x2d6(ra) <ekernel+0xffcd0a96>
80224d74: 13 05 04 f4  	addi	a0, s0, -0xc0
80224d78: 97 90 ff ff  	auipc	ra, 0xffff9
80224d7c: e7 80 60 9b  	jalr	-0x64a(ra) <ekernel+0xffcd072e>
80224d80: 03 36 84 ea  	ld	a2, -0x158(s0)
80224d84: 03 35 04 e2  	ld	a0, -0x1e0(s0)
80224d88: 83 35 04 ea  	ld	a1, -0x160(s0)
;         self.indirect2 = 0;
80224d8c: 28 de        	sw	a0, 0x78(a2)
;         v
80224d8e: 03 35 84 ec  	ld	a0, -0x138(s0)
80224d92: 88 e9        	sd	a0, 0x10(a1)
80224d94: 03 35 04 ec  	ld	a0, -0x140(s0)
80224d98: 88 e5        	sd	a0, 0x8(a1)
80224d9a: 03 35 84 eb  	ld	a0, -0x148(s0)
80224d9e: 88 e1        	sd	a0, 0x0(a1)
;     }
80224da0: 79 b9        	j	0x80224a3e <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0xc2>
80224da2: 03 35 84 ea  	ld	a0, -0x158(s0)
80224da6: 83 35 04 e9  	ld	a1, -0x170(s0)
;             v.push(self.direct[current_blocks]);
80224daa: 8a 05        	slli	a1, a1, 0x2
80224dac: 2e 95        	add	a0, a0, a1
80224dae: 4c 41        	lw	a1, 0x4(a0)
80224db0: 13 05 84 eb  	addi	a0, s0, -0x148
80224db4: 97 e0 ff ff  	auipc	ra, 0xffffe
80224db8: e7 80 20 9d  	jalr	-0x62e(ra) <ekernel+0xffcd5786>
;             self.direct[current_blocks] = 0;
80224dbc: 03 35 84 ed  	ld	a0, -0x128(s0)
80224dc0: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
80224dc4: f1 45        	li	a1, 0x1c
80224dc6: 63 6e b5 00  	bltu	a0, a1, 0x80224de2 <.Lpcrel_hi51+0x12>
80224dca: 1d a8        	j	0x80224e00 <.Lpcrel_hi51+0x30>
80224dcc: 03 35 04 e9  	ld	a0, -0x170(s0)

0000000080224dd0 <.Lpcrel_hi51>:
;             v.push(self.direct[current_blocks]);
80224dd0: 97 55 01 00  	auipc	a1, 0x15
80224dd4: 13 86 05 bd  	addi	a2, a1, -0x430
80224dd8: f1 45        	li	a1, 0x1c
80224dda: 97 b0 00 00  	auipc	ra, 0xb
80224dde: e7 80 60 4d  	jalr	0x4d6(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
80224de2: 03 35 84 ea  	ld	a0, -0x158(s0)
80224de6: 83 35 04 e1  	ld	a1, -0x1f0(s0)
;             self.direct[current_blocks] = 0;
80224dea: 8a 05        	slli	a1, a1, 0x2
80224dec: aa 95        	add	a1, a1, a0
80224dee: 01 45        	li	a0, 0x0
80224df0: c8 c1        	sw	a0, 0x4(a1)
;             current_blocks += 1;
80224df2: 03 35 84 ed  	ld	a0, -0x128(s0)
80224df6: 05 05        	addi	a0, a0, 0x1
80224df8: 23 34 a4 e0  	sd	a0, -0x1f8(s0)
80224dfc: 15 c1        	beqz	a0, 0x80224e20 <.Lpcrel_hi53>
80224dfe: 21 a8        	j	0x80224e16 <.Lpcrel_hi52+0x12>
80224e00: 03 35 04 e1  	ld	a0, -0x1f0(s0)

0000000080224e04 <.Lpcrel_hi52>:
;             self.direct[current_blocks] = 0;
80224e04: 97 55 01 00  	auipc	a1, 0x15
80224e08: 13 86 45 bb  	addi	a2, a1, -0x44c
80224e0c: f1 45        	li	a1, 0x1c
80224e0e: 97 b0 00 00  	auipc	ra, 0xb
80224e12: e7 80 20 4a  	jalr	0x4a2(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
80224e16: 03 35 84 e0  	ld	a0, -0x1f8(s0)
;             current_blocks += 1;
80224e1a: 23 3c a4 ec  	sd	a0, -0x128(s0)
;         while current_blocks < data_blocks.min(INODE_DIRECT_COUNT) {
80224e1e: 55 b6        	j	0x802249c2 <_ZN7easy_fs6layout9DiskInode10clear_size17h8d7929acfeed3c83E+0x46>

0000000080224e20 <.Lpcrel_hi53>:
;             current_blocks += 1;
80224e20: 17 55 01 00  	auipc	a0, 0x15
80224e24: 13 05 05 8c  	addi	a0, a0, -0x740

0000000080224e28 <.Lpcrel_hi54>:
80224e28: 97 55 01 00  	auipc	a1, 0x15
80224e2c: 13 86 85 ba  	addi	a2, a1, -0x458
80224e30: f1 45        	li	a1, 0x1c
80224e32: 97 b0 00 00  	auipc	ra, 0xb
80224e36: e7 80 60 3e  	jalr	0x3e6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080224e3a <_ZN7easy_fs6layout9DiskInode7read_at17h6e23015e0ef2256bE>:
;     pub fn read_at(
80224e3a: 21 71        	addi	sp, sp, -0x1c0
80224e3c: 06 ff        	sd	ra, 0x1b8(sp)
80224e3e: 22 fb        	sd	s0, 0x1b0(sp)
80224e40: 80 03        	addi	s0, sp, 0x1c0
80224e42: 23 38 e4 ea  	sd	a4, -0x150(s0)
80224e46: 23 3c d4 ea  	sd	a3, -0x148(s0)
80224e4a: 23 30 c4 ec  	sd	a2, -0x140(s0)
80224e4e: 23 34 a4 ec  	sd	a0, -0x138(s0)
80224e52: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80224e56: 23 34 b4 f6  	sd	a1, -0x98(s0)
80224e5a: 23 38 c4 f6  	sd	a2, -0x90(s0)
80224e5e: 23 3c d4 f6  	sd	a3, -0x88(s0)
80224e62: 23 30 e4 f8  	sd	a4, -0x80(s0)
;         let mut start = offset;
80224e66: 23 30 b4 ee  	sd	a1, -0x120(s0)
;         let end = (offset + buf.len()).min(self.size as usize);
80224e6a: 33 85 d5 00  	add	a0, a1, a3
80224e6e: 23 38 a4 ec  	sd	a0, -0x130(s0)
80224e72: 63 68 b5 02  	bltu	a0, a1, 0x80224ea2 <.Lpcrel_hi55>
80224e76: 09 a0        	j	0x80224e78 <_ZN7easy_fs6layout9DiskInode7read_at17h6e23015e0ef2256bE+0x3e>
80224e78: 03 35 04 ed  	ld	a0, -0x130(s0)
80224e7c: 83 35 84 ec  	ld	a1, -0x138(s0)
;         let end = (offset + buf.len()).min(self.size as usize);
80224e80: 83 e5 05 00  	lwu	a1, 0x0(a1)
80224e84: 97 20 00 00  	auipc	ra, 0x2
80224e88: e7 80 e0 79  	jalr	0x79e(ra) <_ZN4core3cmp3Ord3min17h761e5a0d4bbde9abE>
80224e8c: aa 85        	mv	a1, a0
80224e8e: 2e 85        	mv	a0, a1
80224e90: 23 34 a4 ea  	sd	a0, -0x158(s0)
80224e94: 23 34 b4 f8  	sd	a1, -0x78(s0)
;         if start >= end {
80224e98: 03 35 04 ee  	ld	a0, -0x120(s0)
80224e9c: 63 79 b5 02  	bgeu	a0, a1, 0x80224ece <.Lpcrel_hi56+0x24>
80224ea0: 31 a8        	j	0x80224ebc <.Lpcrel_hi56+0x12>

0000000080224ea2 <.Lpcrel_hi55>:
;         let end = (offset + buf.len()).min(self.size as usize);
80224ea2: 17 55 01 00  	auipc	a0, 0x15
80224ea6: 13 05 e5 83  	addi	a0, a0, -0x7c2

0000000080224eaa <.Lpcrel_hi56>:
80224eaa: 97 55 01 00  	auipc	a1, 0x15
80224eae: 13 86 e5 b3  	addi	a2, a1, -0x4c2
80224eb2: f1 45        	li	a1, 0x1c
80224eb4: 97 b0 00 00  	auipc	ra, 0xb
80224eb8: e7 80 40 36  	jalr	0x364(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;         let mut start_block = start / BLOCK_SZ;
80224ebc: 03 35 04 ee  	ld	a0, -0x120(s0)
80224ec0: 25 81        	srli	a0, a0, 0x9
80224ec2: 23 34 a4 ee  	sd	a0, -0x118(s0)
80224ec6: 01 45        	li	a0, 0x0
;         let mut read_size = 0usize;
80224ec8: 23 38 a4 ee  	sd	a0, -0x110(s0)
;         loop {
80224ecc: 29 a0        	j	0x80224ed6 <.Lpcrel_hi56+0x2c>
80224ece: 01 45        	li	a0, 0x0
;             return 0;
80224ed0: 23 3c a4 ec  	sd	a0, -0x128(s0)
;     }
80224ed4: f5 a4        	j	0x802251c0 <.Lpcrel_hi69+0x12>
;             let mut end_current_block = (start / BLOCK_SZ + 1) * BLOCK_SZ;
80224ed6: 03 35 04 ee  	ld	a0, -0x120(s0)
80224eda: 25 81        	srli	a0, a0, 0x9
80224edc: 05 05        	addi	a0, a0, 0x1
80224ede: 23 30 a4 ea  	sd	a0, -0x160(s0)
80224ee2: 01 45        	li	a0, 0x0
80224ee4: 11 ed        	bnez	a0, 0x80224f00 <.Lpcrel_hi57>
80224ee6: 09 a0        	j	0x80224ee8 <.Lpcrel_hi56+0x3e>
80224ee8: 83 35 04 ea  	ld	a1, -0x160(s0)
;             let mut end_current_block = (start / BLOCK_SZ + 1) * BLOCK_SZ;
80224eec: 13 95 95 00  	slli	a0, a1, 0x9
80224ef0: 23 3c a4 e8  	sd	a0, -0x168(s0)
80224ef4: 13 95 95 00  	slli	a0, a1, 0x9
80224ef8: 25 81        	srli	a0, a0, 0x9
80224efa: 63 19 b5 04  	bne	a0, a1, 0x80224f4c <.Lpcrel_hi59>
80224efe: 31 a8        	j	0x80224f1a <.Lpcrel_hi58+0x12>

0000000080224f00 <.Lpcrel_hi57>:
80224f00: 17 45 01 00  	auipc	a0, 0x14
80224f04: 13 05 05 7e  	addi	a0, a0, 0x7e0

0000000080224f08 <.Lpcrel_hi58>:
80224f08: 97 55 01 00  	auipc	a1, 0x15
80224f0c: 13 86 85 af  	addi	a2, a1, -0x508
80224f10: f1 45        	li	a1, 0x1c
80224f12: 97 b0 00 00  	auipc	ra, 0xb
80224f16: e7 80 60 30  	jalr	0x306(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80224f1a: 83 35 84 ea  	ld	a1, -0x158(s0)
80224f1e: 03 35 84 e9  	ld	a0, -0x168(s0)
;             let mut end_current_block = (start / BLOCK_SZ + 1) * BLOCK_SZ;
80224f22: 23 3c a4 ee  	sd	a0, -0x108(s0)
;             end_current_block = end_current_block.min(end);
80224f26: 03 35 84 ef  	ld	a0, -0x108(s0)
80224f2a: 97 20 00 00  	auipc	ra, 0x2
80224f2e: e7 80 80 6f  	jalr	0x6f8(ra) <_ZN4core3cmp3Ord3min17h761e5a0d4bbde9abE>
80224f32: 23 3c a4 ee  	sd	a0, -0x108(s0)
;             let block_read_size = end_current_block - start;
80224f36: 03 35 84 ef  	ld	a0, -0x108(s0)
80224f3a: 83 35 04 ee  	ld	a1, -0x120(s0)
80224f3e: 33 06 b5 40  	sub	a2, a0, a1
80224f42: 23 38 c4 e8  	sd	a2, -0x170(s0)
80224f46: 63 61 b5 04  	bltu	a0, a1, 0x80224f88 <.Lpcrel_hi61>
80224f4a: 39 a8        	j	0x80224f68 <.Lpcrel_hi60+0x14>

0000000080224f4c <.Lpcrel_hi59>:
;             let mut end_current_block = (start / BLOCK_SZ + 1) * BLOCK_SZ;
80224f4c: 17 55 01 00  	auipc	a0, 0x15
80224f50: 13 05 45 ad  	addi	a0, a0, -0x52c

0000000080224f54 <.Lpcrel_hi60>:
80224f54: 97 55 01 00  	auipc	a1, 0x15
80224f58: 13 86 c5 aa  	addi	a2, a1, -0x554
80224f5c: 93 05 10 02  	li	a1, 0x21
80224f60: 97 b0 00 00  	auipc	ra, 0xb
80224f64: e7 80 80 2b  	jalr	0x2b8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80224f68: 03 35 04 e9  	ld	a0, -0x170(s0)
;             let block_read_size = end_current_block - start;
80224f6c: 23 30 a4 f0  	sd	a0, -0x100(s0)
;             let dst = &mut buf[read_size..read_size + block_read_size];
80224f70: 83 35 04 ef  	ld	a1, -0x110(s0)
80224f74: 23 30 b4 e8  	sd	a1, -0x180(s0)
80224f78: 03 35 04 f0  	ld	a0, -0x100(s0)
80224f7c: 2e 95        	add	a0, a0, a1
80224f7e: 23 34 a4 e8  	sd	a0, -0x178(s0)
80224f82: 63 68 b5 1a  	bltu	a0, a1, 0x80225132 <.Lpcrel_hi64>
80224f86: 39 a8        	j	0x80224fa4 <.Lpcrel_hi62+0x14>

0000000080224f88 <.Lpcrel_hi61>:
;             let block_read_size = end_current_block - start;
80224f88: 17 45 01 00  	auipc	a0, 0x14
80224f8c: 13 05 85 79  	addi	a0, a0, 0x798

0000000080224f90 <.Lpcrel_hi62>:
80224f90: 97 55 01 00  	auipc	a1, 0x15
80224f94: 13 86 85 ab  	addi	a2, a1, -0x548
80224f98: 93 05 10 02  	li	a1, 0x21
80224f9c: 97 b0 00 00  	auipc	ra, 0xb
80224fa0: e7 80 c0 27  	jalr	0x27c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80224fa4: 83 36 84 eb  	ld	a3, -0x148(s0)
80224fa8: 03 36 04 ec  	ld	a2, -0x140(s0)
80224fac: 03 35 84 e8  	ld	a0, -0x178(s0)
80224fb0: 83 35 04 e8  	ld	a1, -0x180(s0)
;             let dst = &mut buf[read_size..read_size + block_read_size];
80224fb4: 23 3c b4 f0  	sd	a1, -0xe8(s0)
80224fb8: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80224fbc: 03 35 84 f1  	ld	a0, -0xe8(s0)
80224fc0: 83 35 04 f2  	ld	a1, -0xe0(s0)
80224fc4: 23 38 c4 f8  	sd	a2, -0x70(s0)
80224fc8: 23 3c d4 f8  	sd	a3, -0x68(s0)
80224fcc: 23 30 a4 fa  	sd	a0, -0x60(s0)
80224fd0: 23 34 b4 fa  	sd	a1, -0x58(s0)

0000000080224fd4 <.Lpcrel_hi63>:
;         index.index_mut(self)
80224fd4: 17 57 01 00  	auipc	a4, 0x15
80224fd8: 13 07 47 aa  	addi	a4, a4, -0x55c
80224fdc: 97 a0 ff ff  	auipc	ra, 0xffffa
80224fe0: e7 80 a0 43  	jalr	0x43a(ra) <ekernel+0xffcd2416>
80224fe4: 03 36 04 eb  	ld	a2, -0x150(s0)
80224fe8: aa 86        	mv	a3, a0
80224fea: 03 35 84 ec  	ld	a0, -0x138(s0)
;             let dst = &mut buf[read_size..read_size + block_read_size];
80224fee: 23 34 d4 f0  	sd	a3, -0xf8(s0)
80224ff2: 23 38 b4 f0  	sd	a1, -0xf0(s0)
;                 self.get_block_id(start_block as u32, block_device) as usize,
80224ff6: 83 35 84 ee  	ld	a1, -0x118(s0)
80224ffa: 97 f0 ff ff  	auipc	ra, 0xfffff
80224ffe: e7 80 c0 00  	jalr	0xc(ra) <ekernel+0xffcd7006>
80225002: aa 85        	mv	a1, a0
80225004: 03 35 04 eb  	ld	a0, -0x150(s0)
80225008: 82 15        	slli	a1, a1, 0x20
8022500a: 81 91        	srli	a1, a1, 0x20
8022500c: 23 30 b4 e6  	sd	a1, -0x1a0(s0)
;                 Arc::clone(block_device),
80225010: 97 80 ff ff  	auipc	ra, 0xffff8
80225014: e7 80 00 0d  	jalr	0xd0(ra) <ekernel+0xffcd00e0>
80225018: 2a 86        	mv	a2, a0
8022501a: 03 35 04 e6  	ld	a0, -0x1a0(s0)
8022501e: 23 34 c4 e6  	sd	a2, -0x198(s0)
80225022: 2e 86        	mv	a2, a1
80225024: 83 35 84 e6  	ld	a1, -0x198(s0)
;             get_block_cache(
80225028: 97 10 00 00  	auipc	ra, 0x1
8022502c: e7 80 c0 dd  	jalr	-0x224(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
80225030: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80225034: 13 05 04 f4  	addi	a0, s0, -0xc0
80225038: 97 80 ff ff  	auipc	ra, 0xffff8
8022503c: e7 80 c0 14  	jalr	0x14c(ra) <ekernel+0xffcd0184>
80225040: aa 85        	mv	a1, a0
80225042: 23 38 b4 e6  	sd	a1, -0x190(s0)
80225046: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022504a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022504e: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80225050: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80225054: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80225058: 85 45        	li	a1, 0x1
8022505a: 97 a0 ff ff  	auipc	ra, 0xffffa
8022505e: e7 80 c0 14  	jalr	0x14c(ra) <ekernel+0xffcd21a6>
80225062: aa 85        	mv	a1, a0
80225064: 23 3c b4 e6  	sd	a1, -0x188(s0)
80225068: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022506c: 09 a0        	j	0x8022506e <.Lpcrel_hi63+0x9a>
8022506e: 03 35 04 e7  	ld	a0, -0x190(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80225072: 21 05        	addi	a0, a0, 0x8
80225074: 89 45        	li	a1, 0x2
80225076: a3 0b b4 fc  	sb	a1, -0x29(s0)
8022507a: 83 45 74 fd  	lbu	a1, -0x29(s0)
8022507e: 97 a0 ff ff  	auipc	ra, 0xffffa
80225082: e7 80 c0 0d  	jalr	0xdc(ra) <ekernel+0xffcd215a>
80225086: 83 35 84 e7  	ld	a1, -0x188(s0)
8022508a: 63 08 b5 00  	beq	a0, a1, 0x8022509a <.Lpcrel_hi63+0xc6>
8022508e: 09 a0        	j	0x80225090 <.Lpcrel_hi63+0xbc>
;             crate::relax();
80225090: 97 a0 ff ff  	auipc	ra, 0xffffa
80225094: e7 80 e0 1b  	jalr	0x1be(ra) <ekernel+0xffcd224e>
80225098: d9 bf        	j	0x8022506e <.Lpcrel_hi63+0x9a>
8022509a: 83 35 84 e7  	ld	a1, -0x188(s0)
8022509e: 03 35 04 e7  	ld	a0, -0x190(s0)
;             next_serving: &self.next_serving,
802250a2: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
802250a6: 41 05        	addi	a0, a0, 0x10
802250a8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
802250ac: 23 38 c4 fa  	sd	a2, -0x50(s0)
802250b0: 23 30 b4 fc  	sd	a1, -0x40(s0)
802250b4: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
802250b8: 03 35 04 fc  	ld	a0, -0x40(s0)
802250bc: 23 3c a4 f2  	sd	a0, -0xc8(s0)
802250c0: 03 35 84 fb  	ld	a0, -0x48(s0)
802250c4: 23 38 a4 f2  	sd	a0, -0xd0(s0)
802250c8: 03 35 04 fb  	ld	a0, -0x50(s0)
802250cc: 23 34 a4 f2  	sd	a0, -0xd8(s0)
802250d0: 13 05 84 f2  	addi	a0, s0, -0xd8
802250d4: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
;             get_block_cache(
802250d8: 97 d0 ff ff  	auipc	ra, 0xffffd
802250dc: e7 80 60 54  	jalr	0x546(ra) <ekernel+0xffcd561e>
802250e0: 93 05 04 ee  	addi	a1, s0, -0x120
;             .read(0, |data_block: &DataBlock| {
802250e4: 23 34 b4 f4  	sd	a1, -0xb8(s0)
802250e8: 93 05 04 f0  	addi	a1, s0, -0x100
802250ec: 23 38 b4 f4  	sd	a1, -0xb0(s0)
802250f0: 93 05 84 f0  	addi	a1, s0, -0xf8
802250f4: 23 3c b4 f4  	sd	a1, -0xa8(s0)
802250f8: 81 45        	li	a1, 0x0
802250fa: 13 06 84 f4  	addi	a2, s0, -0xb8
;             get_block_cache(
802250fe: 97 c0 ff ff  	auipc	ra, 0xffffc
80225102: e7 80 60 31  	jalr	0x316(ra) <ekernel+0xffcd4414>
80225106: 03 35 04 e5  	ld	a0, -0x1b0(s0)
;             });
8022510a: 97 90 ff ff  	auipc	ra, 0xffff9
8022510e: e7 80 c0 98  	jalr	-0x674(ra) <ekernel+0xffcd0a96>
80225112: 13 05 04 f4  	addi	a0, s0, -0xc0
80225116: 97 80 ff ff  	auipc	ra, 0xffff8
8022511a: e7 80 80 61  	jalr	0x618(ra) <ekernel+0xffcd072e>
;             read_size += block_read_size;
8022511e: 03 35 04 f0  	ld	a0, -0x100(s0)
80225122: 83 35 04 ef  	ld	a1, -0x110(s0)
80225126: 2e 95        	add	a0, a0, a1
80225128: 23 3c a4 e4  	sd	a0, -0x1a8(s0)
8022512c: 63 6b b5 02  	bltu	a0, a1, 0x80225162 <.Lpcrel_hi66>
80225130: 31 a8        	j	0x8022514c <.Lpcrel_hi65+0x12>

0000000080225132 <.Lpcrel_hi64>:
;             let dst = &mut buf[read_size..read_size + block_read_size];
80225132: 17 45 01 00  	auipc	a0, 0x14
80225136: 13 05 e5 5a  	addi	a0, a0, 0x5ae

000000008022513a <.Lpcrel_hi65>:
8022513a: 97 55 01 00  	auipc	a1, 0x15
8022513e: 13 86 65 92  	addi	a2, a1, -0x6da
80225142: f1 45        	li	a1, 0x1c
80225144: 97 b0 00 00  	auipc	ra, 0xb
80225148: e7 80 40 0d  	jalr	0xd4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022514c: 83 35 84 ea  	ld	a1, -0x158(s0)
80225150: 03 35 84 e5  	ld	a0, -0x1a8(s0)
;             read_size += block_read_size;
80225154: 23 38 a4 ee  	sd	a0, -0x110(s0)
;             if end_current_block == end {
80225158: 03 35 84 ef  	ld	a0, -0x108(s0)
8022515c: 63 07 b5 02  	beq	a0, a1, 0x8022518a <.Lpcrel_hi67+0x20>
80225160: 31 a8        	j	0x8022517c <.Lpcrel_hi67+0x12>

0000000080225162 <.Lpcrel_hi66>:
;             read_size += block_read_size;
80225162: 17 45 01 00  	auipc	a0, 0x14
80225166: 13 05 e5 57  	addi	a0, a0, 0x57e

000000008022516a <.Lpcrel_hi67>:
8022516a: 97 55 01 00  	auipc	a1, 0x15
8022516e: 13 86 65 92  	addi	a2, a1, -0x6da
80225172: f1 45        	li	a1, 0x1c
80225174: 97 b0 00 00  	auipc	ra, 0xb
80225178: e7 80 40 0a  	jalr	0xa4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;             start_block += 1;
8022517c: 03 35 84 ee  	ld	a0, -0x118(s0)
80225180: 05 05        	addi	a0, a0, 0x1
80225182: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
80225186: 05 c1        	beqz	a0, 0x802251a6 <.Lpcrel_hi68>
80225188: 31 a0        	j	0x80225194 <.Lpcrel_hi67+0x2a>
;         read_size
8022518a: 03 35 04 ef  	ld	a0, -0x110(s0)
8022518e: 23 3c a4 ec  	sd	a0, -0x128(s0)
;     }
80225192: 3d a0        	j	0x802251c0 <.Lpcrel_hi69+0x12>
80225194: 03 35 84 e4  	ld	a0, -0x1b8(s0)
;             start_block += 1;
80225198: 23 34 a4 ee  	sd	a0, -0x118(s0)
;             start = end_current_block;
8022519c: 03 35 84 ef  	ld	a0, -0x108(s0)
802251a0: 23 30 a4 ee  	sd	a0, -0x120(s0)
;         loop {
802251a4: 0d bb        	j	0x80224ed6 <.Lpcrel_hi56+0x2c>

00000000802251a6 <.Lpcrel_hi68>:
;             start_block += 1;
802251a6: 17 45 01 00  	auipc	a0, 0x14
802251aa: 13 05 a5 53  	addi	a0, a0, 0x53a

00000000802251ae <.Lpcrel_hi69>:
802251ae: 97 55 01 00  	auipc	a1, 0x15
802251b2: 13 86 a5 8f  	addi	a2, a1, -0x706
802251b6: f1 45        	li	a1, 0x1c
802251b8: 97 b0 00 00  	auipc	ra, 0xb
802251bc: e7 80 00 06  	jalr	0x60(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;     }
802251c0: 03 35 84 ed  	ld	a0, -0x128(s0)
802251c4: fa 70        	ld	ra, 0x1b8(sp)
802251c6: 5a 74        	ld	s0, 0x1b0(sp)
802251c8: 39 61        	addi	sp, sp, 0x1c0
802251ca: 82 80        	ret

00000000802251cc <_ZN7easy_fs6layout9DiskInode8write_at17h08b7e4f4ebccefdfE>:
;     pub fn write_at(
802251cc: 0d 71        	addi	sp, sp, -0x160
802251ce: 86 ee        	sd	ra, 0x158(sp)
802251d0: a2 ea        	sd	s0, 0x150(sp)
802251d2: 80 12        	addi	s0, sp, 0x160
802251d4: 23 30 e4 f0  	sd	a4, -0x100(s0)
802251d8: 23 34 a4 f0  	sd	a0, -0xf8(s0)
802251dc: 23 3c c4 f0  	sd	a2, -0xe8(s0)
802251e0: 23 30 d4 f2  	sd	a3, -0xe0(s0)
802251e4: 23 38 a4 f8  	sd	a0, -0x70(s0)
802251e8: 23 3c b4 f8  	sd	a1, -0x68(s0)
802251ec: 23 30 e4 fa  	sd	a4, -0x60(s0)
;         let mut start = offset;
802251f0: 23 34 b4 f2  	sd	a1, -0xd8(s0)
;         let end = (offset + buf.len()).min(self.size as usize);
802251f4: 03 35 04 f2  	ld	a0, -0xe0(s0)
802251f8: 2e 95        	add	a0, a0, a1
802251fa: 23 38 a4 f0  	sd	a0, -0xf0(s0)
802251fe: 63 67 b5 02  	bltu	a0, a1, 0x8022522c <.Lpcrel_hi70>
80225202: 09 a0        	j	0x80225204 <_ZN7easy_fs6layout9DiskInode8write_at17h08b7e4f4ebccefdfE+0x38>
80225204: 03 35 04 f1  	ld	a0, -0xf0(s0)
80225208: 83 35 84 f0  	ld	a1, -0xf8(s0)
;         let end = (offset + buf.len()).min(self.size as usize);
8022520c: 83 e5 05 00  	lwu	a1, 0x0(a1)
80225210: 97 20 00 00  	auipc	ra, 0x2
80225214: e7 80 20 41  	jalr	0x412(ra) <_ZN4core3cmp3Ord3min17h761e5a0d4bbde9abE>
80225218: aa 85        	mv	a1, a0
8022521a: 23 3c b4 ee  	sd	a1, -0x108(s0)
8022521e: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         assert!(start <= end);
80225222: 83 35 84 f2  	ld	a1, -0xd8(s0)
80225226: 63 7d b5 02  	bgeu	a0, a1, 0x80225260 <.Lpcrel_hi73+0x12>
8022522a: 31 a8        	j	0x80225246 <.Lpcrel_hi72>

000000008022522c <.Lpcrel_hi70>:
;         let end = (offset + buf.len()).min(self.size as usize);
8022522c: 17 45 01 00  	auipc	a0, 0x14
80225230: 13 05 45 4b  	addi	a0, a0, 0x4b4

0000000080225234 <.Lpcrel_hi71>:
80225234: 97 55 01 00  	auipc	a1, 0x15
80225238: 13 86 c5 88  	addi	a2, a1, -0x774
8022523c: f1 45        	li	a1, 0x1c
8022523e: 97 b0 00 00  	auipc	ra, 0xb
80225242: e7 80 a0 fd  	jalr	-0x26(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080225246 <.Lpcrel_hi72>:
;         assert!(start <= end);
80225246: 17 55 01 00  	auipc	a0, 0x15
8022524a: 13 05 25 89  	addi	a0, a0, -0x76e

000000008022524e <.Lpcrel_hi73>:
8022524e: 97 55 01 00  	auipc	a1, 0x15
80225252: 13 86 a5 8a  	addi	a2, a1, -0x756
80225256: f9 45        	li	a1, 0x1e
80225258: 97 b0 00 00  	auipc	ra, 0xb
8022525c: e7 80 00 fc  	jalr	-0x40(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;         let mut start_block = start / BLOCK_SZ;
80225260: 03 35 84 f2  	ld	a0, -0xd8(s0)
80225264: 25 81        	srli	a0, a0, 0x9
80225266: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8022526a: 01 45        	li	a0, 0x0
;         let mut write_size = 0usize;
8022526c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         loop {
80225270: 09 a0        	j	0x80225272 <.Lpcrel_hi73+0x24>
;             let mut end_current_block = (start / BLOCK_SZ + 1) * BLOCK_SZ;
80225272: 03 35 84 f2  	ld	a0, -0xd8(s0)
80225276: 25 81        	srli	a0, a0, 0x9
80225278: 05 05        	addi	a0, a0, 0x1
8022527a: 23 38 a4 ee  	sd	a0, -0x110(s0)
8022527e: 01 45        	li	a0, 0x0
80225280: 11 ed        	bnez	a0, 0x8022529c <.Lpcrel_hi74>
80225282: 09 a0        	j	0x80225284 <.Lpcrel_hi73+0x36>
80225284: 83 35 04 ef  	ld	a1, -0x110(s0)
;             let mut end_current_block = (start / BLOCK_SZ + 1) * BLOCK_SZ;
80225288: 13 95 95 00  	slli	a0, a1, 0x9
8022528c: 23 34 a4 ee  	sd	a0, -0x118(s0)
80225290: 13 95 95 00  	slli	a0, a1, 0x9
80225294: 25 81        	srli	a0, a0, 0x9
80225296: 63 19 b5 04  	bne	a0, a1, 0x802252e8 <.Lpcrel_hi76>
8022529a: 31 a8        	j	0x802252b6 <.Lpcrel_hi75+0x12>

000000008022529c <.Lpcrel_hi74>:
8022529c: 17 45 01 00  	auipc	a0, 0x14
802252a0: 13 05 45 44  	addi	a0, a0, 0x444

00000000802252a4 <.Lpcrel_hi75>:
802252a4: 97 55 01 00  	auipc	a1, 0x15
802252a8: 13 86 c5 86  	addi	a2, a1, -0x794
802252ac: f1 45        	li	a1, 0x1c
802252ae: 97 b0 00 00  	auipc	ra, 0xb
802252b2: e7 80 a0 f6  	jalr	-0x96(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802252b6: 83 35 84 ef  	ld	a1, -0x108(s0)
802252ba: 03 35 84 ee  	ld	a0, -0x118(s0)
;             let mut end_current_block = (start / BLOCK_SZ + 1) * BLOCK_SZ;
802252be: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;             end_current_block = end_current_block.min(end);
802252c2: 03 35 04 f4  	ld	a0, -0xc0(s0)
802252c6: 97 20 00 00  	auipc	ra, 0x2
802252ca: e7 80 c0 35  	jalr	0x35c(ra) <_ZN4core3cmp3Ord3min17h761e5a0d4bbde9abE>
802252ce: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;             let block_write_size = end_current_block - start;
802252d2: 03 35 04 f4  	ld	a0, -0xc0(s0)
802252d6: 83 35 84 f2  	ld	a1, -0xd8(s0)
802252da: 33 06 b5 40  	sub	a2, a0, a1
802252de: 23 30 c4 ee  	sd	a2, -0x120(s0)
802252e2: 63 6b b5 16  	bltu	a0, a1, 0x80225458 <.Lpcrel_hi78>
802252e6: 39 a8        	j	0x80225304 <.Lpcrel_hi77+0x14>

00000000802252e8 <.Lpcrel_hi76>:
;             let mut end_current_block = (start / BLOCK_SZ + 1) * BLOCK_SZ;
802252e8: 17 45 01 00  	auipc	a0, 0x14
802252ec: 13 05 85 73  	addi	a0, a0, 0x738

00000000802252f0 <.Lpcrel_hi77>:
802252f0: 97 55 01 00  	auipc	a1, 0x15
802252f4: 13 86 05 82  	addi	a2, a1, -0x7e0
802252f8: 93 05 10 02  	li	a1, 0x21
802252fc: 97 b0 00 00  	auipc	ra, 0xb
80225300: e7 80 c0 f1  	jalr	-0xe4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80225304: 03 36 04 f0  	ld	a2, -0x100(s0)
80225308: 03 35 84 f0  	ld	a0, -0xf8(s0)
8022530c: 83 35 04 ee  	ld	a1, -0x120(s0)
;             let block_write_size = end_current_block - start;
80225310: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;                 self.get_block_id(start_block as u32, block_device) as usize,
80225314: 83 35 04 f3  	ld	a1, -0xd0(s0)
80225318: 97 f0 ff ff  	auipc	ra, 0xfffff
8022531c: e7 80 e0 ce  	jalr	-0x312(ra) <ekernel+0xffcd7006>
80225320: aa 85        	mv	a1, a0
80225322: 03 35 04 f0  	ld	a0, -0x100(s0)
80225326: 82 15        	slli	a1, a1, 0x20
80225328: 81 91        	srli	a1, a1, 0x20
8022532a: 23 30 b4 ec  	sd	a1, -0x140(s0)
;                 Arc::clone(block_device),
8022532e: 97 80 ff ff  	auipc	ra, 0xffff8
80225332: e7 80 20 db  	jalr	-0x24e(ra) <ekernel+0xffcd00e0>
80225336: 2a 86        	mv	a2, a0
80225338: 03 35 04 ec  	ld	a0, -0x140(s0)
8022533c: 23 34 c4 ec  	sd	a2, -0x138(s0)
80225340: 2e 86        	mv	a2, a1
80225342: 83 35 84 ec  	ld	a1, -0x138(s0)
;             get_block_cache(
80225346: 97 10 00 00  	auipc	ra, 0x1
8022534a: e7 80 e0 ab  	jalr	-0x542(ra) <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>
8022534e: 23 34 a4 f6  	sd	a0, -0x98(s0)
80225352: 13 05 84 f6  	addi	a0, s0, -0x98
80225356: 97 80 ff ff  	auipc	ra, 0xffff8
8022535a: e7 80 e0 e2  	jalr	-0x1d2(ra) <ekernel+0xffcd0184>
8022535e: aa 85        	mv	a1, a0
80225360: 23 38 b4 ec  	sd	a1, -0x130(s0)
80225364: 23 34 a4 fc  	sd	a0, -0x38(s0)
80225368: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022536c: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8022536e: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80225372: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80225376: 85 45        	li	a1, 0x1
80225378: 97 a0 ff ff  	auipc	ra, 0xffffa
8022537c: e7 80 e0 e2  	jalr	-0x1d2(ra) <ekernel+0xffcd21a6>
80225380: aa 85        	mv	a1, a0
80225382: 23 3c b4 ec  	sd	a1, -0x128(s0)
80225386: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022538a: 09 a0        	j	0x8022538c <.Lpcrel_hi77+0x9c>
8022538c: 03 35 04 ed  	ld	a0, -0x130(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80225390: 21 05        	addi	a0, a0, 0x8
80225392: 89 45        	li	a1, 0x2
80225394: a3 0b b4 fc  	sb	a1, -0x29(s0)
80225398: 83 45 74 fd  	lbu	a1, -0x29(s0)
8022539c: 97 a0 ff ff  	auipc	ra, 0xffffa
802253a0: e7 80 e0 db  	jalr	-0x242(ra) <ekernel+0xffcd215a>
802253a4: 83 35 84 ed  	ld	a1, -0x128(s0)
802253a8: 63 08 b5 00  	beq	a0, a1, 0x802253b8 <.Lpcrel_hi77+0xc8>
802253ac: 09 a0        	j	0x802253ae <.Lpcrel_hi77+0xbe>
;             crate::relax();
802253ae: 97 a0 ff ff  	auipc	ra, 0xffffa
802253b2: e7 80 00 ea  	jalr	-0x160(ra) <ekernel+0xffcd224e>
802253b6: d9 bf        	j	0x8022538c <.Lpcrel_hi77+0x9c>
802253b8: 83 35 84 ed  	ld	a1, -0x128(s0)
802253bc: 03 35 04 ed  	ld	a0, -0x130(s0)
;             next_serving: &self.next_serving,
802253c0: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
802253c4: 41 05        	addi	a0, a0, 0x10
802253c6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
802253ca: 23 38 c4 fa  	sd	a2, -0x50(s0)
802253ce: 23 30 b4 fc  	sd	a1, -0x40(s0)
802253d2: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
802253d6: 03 35 04 fc  	ld	a0, -0x40(s0)
802253da: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802253de: 03 35 84 fb  	ld	a0, -0x48(s0)
802253e2: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802253e6: 03 35 04 fb  	ld	a0, -0x50(s0)
802253ea: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802253ee: 13 05 04 f5  	addi	a0, s0, -0xb0
802253f2: 23 38 a4 ea  	sd	a0, -0x150(s0)
;             get_block_cache(
802253f6: 97 d0 ff ff  	auipc	ra, 0xffffd
802253fa: e7 80 c0 27  	jalr	0x27c(ra) <ekernel+0xffcd5672>
802253fe: 93 05 84 f1  	addi	a1, s0, -0xe8
;             .modify(0, |data_block: &mut DataBlock| {
80225402: 23 38 b4 f6  	sd	a1, -0x90(s0)
80225406: 93 05 84 f3  	addi	a1, s0, -0xc8
8022540a: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022540e: 93 05 84 f4  	addi	a1, s0, -0xb8
80225412: 23 30 b4 f8  	sd	a1, -0x80(s0)
80225416: 93 05 84 f2  	addi	a1, s0, -0xd8
8022541a: 23 34 b4 f8  	sd	a1, -0x78(s0)
8022541e: 81 45        	li	a1, 0x0
80225420: 13 06 04 f7  	addi	a2, s0, -0x90
;             get_block_cache(
80225424: 97 c0 ff ff  	auipc	ra, 0xffffc
80225428: e7 80 e0 4e  	jalr	0x4ee(ra) <ekernel+0xffcd4912>
8022542c: 03 35 04 eb  	ld	a0, -0x150(s0)
;             });
80225430: 97 80 ff ff  	auipc	ra, 0xffff8
80225434: e7 80 60 66  	jalr	0x666(ra) <ekernel+0xffcd0a96>
80225438: 13 05 84 f6  	addi	a0, s0, -0x98
8022543c: 97 80 ff ff  	auipc	ra, 0xffff8
80225440: e7 80 20 2f  	jalr	0x2f2(ra) <ekernel+0xffcd072e>
;             write_size += block_write_size;
80225444: 03 35 84 f4  	ld	a0, -0xb8(s0)
80225448: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022544c: 2e 95        	add	a0, a0, a1
8022544e: 23 3c a4 ea  	sd	a0, -0x148(s0)
80225452: 63 6c b5 02  	bltu	a0, a1, 0x8022548a <.Lpcrel_hi80>
80225456: 39 a8        	j	0x80225474 <.Lpcrel_hi79+0x14>

0000000080225458 <.Lpcrel_hi78>:
;             let block_write_size = end_current_block - start;
80225458: 17 45 01 00  	auipc	a0, 0x14
8022545c: 13 05 85 2c  	addi	a0, a0, 0x2c8

0000000080225460 <.Lpcrel_hi79>:
80225460: 97 45 01 00  	auipc	a1, 0x14
80225464: 13 86 85 6c  	addi	a2, a1, 0x6c8
80225468: 93 05 10 02  	li	a1, 0x21
8022546c: 97 b0 00 00  	auipc	ra, 0xb
80225470: e7 80 c0 da  	jalr	-0x254(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
80225474: 83 35 84 ef  	ld	a1, -0x108(s0)
80225478: 03 35 84 eb  	ld	a0, -0x148(s0)
;             write_size += block_write_size;
8022547c: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;             if end_current_block == end {
80225480: 03 35 04 f4  	ld	a0, -0xc0(s0)
80225484: 63 07 b5 02  	beq	a0, a1, 0x802254b2 <.Lpcrel_hi81+0x20>
80225488: 31 a8        	j	0x802254a4 <.Lpcrel_hi81+0x12>

000000008022548a <.Lpcrel_hi80>:
;             write_size += block_write_size;
8022548a: 17 45 01 00  	auipc	a0, 0x14
8022548e: 13 05 65 25  	addi	a0, a0, 0x256

0000000080225492 <.Lpcrel_hi81>:
80225492: 97 45 01 00  	auipc	a1, 0x14
80225496: 13 86 e5 6a  	addi	a2, a1, 0x6ae
8022549a: f1 45        	li	a1, 0x1c
8022549c: 97 b0 00 00  	auipc	ra, 0xb
802254a0: e7 80 c0 d7  	jalr	-0x284(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;             start_block += 1;
802254a4: 03 35 04 f3  	ld	a0, -0xd0(s0)
802254a8: 05 05        	addi	a0, a0, 0x1
802254aa: 23 34 a4 ea  	sd	a0, -0x158(s0)
802254ae: 0d c1        	beqz	a0, 0x802254d0 <.Lpcrel_hi82>
802254b0: 39 a0        	j	0x802254be <.Lpcrel_hi81+0x2c>
;         write_size
802254b2: 03 35 84 f3  	ld	a0, -0xc8(s0)
802254b6: f6 60        	ld	ra, 0x158(sp)
802254b8: 56 64        	ld	s0, 0x150(sp)
;     }
802254ba: 35 61        	addi	sp, sp, 0x160
802254bc: 82 80        	ret
802254be: 03 35 84 ea  	ld	a0, -0x158(s0)
;             start_block += 1;
802254c2: 23 38 a4 f2  	sd	a0, -0xd0(s0)
;             start = end_current_block;
802254c6: 03 35 04 f4  	ld	a0, -0xc0(s0)
802254ca: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;         loop {
802254ce: 55 b3        	j	0x80225272 <.Lpcrel_hi73+0x24>

00000000802254d0 <.Lpcrel_hi82>:
;             start_block += 1;
802254d0: 17 45 01 00  	auipc	a0, 0x14
802254d4: 13 05 05 21  	addi	a0, a0, 0x210

00000000802254d8 <.Lpcrel_hi83>:
802254d8: 97 45 01 00  	auipc	a1, 0x14
802254dc: 13 86 05 68  	addi	a2, a1, 0x680
802254e0: f1 45        	li	a1, 0x1c
802254e2: 97 b0 00 00  	auipc	ra, 0xb
802254e6: e7 80 60 d3  	jalr	-0x2ca(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

00000000802254ea <_ZN7easy_fs6layout8DirEntry5empty17hc4efec947d508f9cE>:
;     pub fn empty() -> Self {
802254ea: 39 71        	addi	sp, sp, -0x40
802254ec: 06 fc        	sd	ra, 0x38(sp)
802254ee: 22 f8        	sd	s0, 0x30(sp)
802254f0: 80 00        	addi	s0, sp, 0x40
802254f2: 23 30 a4 fc  	sd	a0, -0x40(s0)
802254f6: 81 45        	li	a1, 0x0
802254f8: 23 34 b4 fc  	sd	a1, -0x38(s0)
;             name: [0u8; NAME_LENGTH_LIMIT + 1],
802254fc: 23 24 b4 fe  	sw	a1, -0x18(s0)
80225500: 23 30 b4 fe  	sd	a1, -0x20(s0)
80225504: 23 3c b4 fc  	sd	a1, -0x28(s0)
80225508: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022550c: 93 05 04 fd  	addi	a1, s0, -0x30
80225510: 71 46        	li	a2, 0x1c
;         Self {
80225512: 97 c0 00 00  	auipc	ra, 0xc
80225516: e7 80 c0 75  	jalr	0x75c(ra) <memcpy>
8022551a: 83 35 04 fc  	ld	a1, -0x40(s0)
8022551e: 03 35 84 fc  	ld	a0, -0x38(s0)
80225522: c8 cd        	sw	a0, 0x1c(a1)
80225524: e2 70        	ld	ra, 0x38(sp)
80225526: 42 74        	ld	s0, 0x30(sp)
;     }
80225528: 21 61        	addi	sp, sp, 0x40
8022552a: 82 80        	ret

000000008022552c <_ZN7easy_fs6layout8DirEntry3new17he85cb933c89f6957E>:
;     pub fn new(name: &str, inode_number: u32) -> Self {
8022552c: 35 71        	addi	sp, sp, -0xa0
8022552e: 06 ed        	sd	ra, 0x98(sp)
80225530: 22 e9        	sd	s0, 0x90(sp)
80225532: 00 11        	addi	s0, sp, 0xa0
80225534: 23 38 d4 f6  	sd	a3, -0x90(s0)
80225538: 23 34 c4 f6  	sd	a2, -0x98(s0)
8022553c: 2e 86        	mv	a2, a1
8022553e: 83 35 84 f6  	ld	a1, -0x98(s0)
80225542: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80225546: 2a 86        	mv	a2, a0
80225548: 03 35 04 f6  	ld	a0, -0xa0(s0)
8022554c: 23 3c c4 f6  	sd	a2, -0x88(s0)
80225550: 23 34 a4 fc  	sd	a0, -0x38(s0)
80225554: 23 38 b4 fc  	sd	a1, -0x30(s0)
80225558: 23 2e d4 fc  	sw	a3, -0x24(s0)
8022555c: 01 46        	li	a2, 0x0
;         let mut bytes = [0u8; NAME_LENGTH_LIMIT + 1];
8022555e: 23 2c c4 f8  	sw	a2, -0x68(s0)
80225562: 23 38 c4 f8  	sd	a2, -0x70(s0)
80225566: 23 34 c4 f8  	sd	a2, -0x78(s0)
8022556a: 23 30 c4 f8  	sd	a2, -0x80(s0)
;         bytes[..name.len()].copy_from_slice(name.as_bytes());
8022556e: 97 40 00 00  	auipc	ra, 0x4
80225572: e7 80 a0 81  	jalr	-0x7e6(ra) <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h254914b30b18cb9bE>
80225576: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022557a: 83 35 04 fa  	ld	a1, -0x60(s0)

000000008022557e <.Lpcrel_hi84>:
8022557e: 17 45 01 00  	auipc	a0, 0x14
80225582: 13 06 25 5f  	addi	a2, a0, 0x5f2
80225586: 13 05 04 f8  	addi	a0, s0, -0x80
8022558a: 97 e0 ff ff  	auipc	ra, 0xffffe
8022558e: e7 80 80 6a  	jalr	0x6a8(ra) <ekernel+0xffcd6c32>
80225592: 03 36 04 f6  	ld	a2, -0xa0(s0)
80225596: 83 36 84 f6  	ld	a3, -0x98(s0)
8022559a: 23 30 c4 fe  	sd	a2, -0x20(s0)
8022559e: 23 34 d4 fe  	sd	a3, -0x18(s0)

00000000802255a2 <.Lpcrel_hi85>:
802255a2: 17 47 01 00  	auipc	a4, 0x14
802255a6: 13 07 67 5e  	addi	a4, a4, 0x5e6
802255aa: 97 80 ff ff  	auipc	ra, 0xffff8
802255ae: e7 80 80 c5  	jalr	-0x3a8(ra) <ekernel+0xffcd0202>
802255b2: 03 35 84 f7  	ld	a0, -0x88(s0)
;             name: bytes,
802255b6: 83 25 84 f9  	lw	a1, -0x68(s0)
802255ba: 23 20 b4 fc  	sw	a1, -0x40(s0)
802255be: 83 35 04 f9  	ld	a1, -0x70(s0)
802255c2: 23 3c b4 fa  	sd	a1, -0x48(s0)
802255c6: 83 35 84 f8  	ld	a1, -0x78(s0)
802255ca: 23 38 b4 fa  	sd	a1, -0x50(s0)
802255ce: 83 35 04 f8  	ld	a1, -0x80(s0)
802255d2: 23 34 b4 fa  	sd	a1, -0x58(s0)
802255d6: 93 05 84 fa  	addi	a1, s0, -0x58
802255da: 71 46        	li	a2, 0x1c
;         Self {
802255dc: 97 c0 00 00  	auipc	ra, 0xc
802255e0: e7 80 20 69  	jalr	0x692(ra) <memcpy>
802255e4: 83 36 04 f7  	ld	a3, -0x90(s0)
802255e8: 03 35 84 f7  	ld	a0, -0x88(s0)
802255ec: 54 cd        	sw	a3, 0x1c(a0)
802255ee: ea 60        	ld	ra, 0x98(sp)
802255f0: 4a 64        	ld	s0, 0x90(sp)
;     }
802255f2: 0d 61        	addi	sp, sp, 0xa0
802255f4: 82 80        	ret

00000000802255f6 <_ZN7easy_fs6layout8DirEntry8as_bytes17hf9a323cbd0cf6dd8E>:
;     pub fn as_bytes(&self) -> &[u8] {
802255f6: 01 11        	addi	sp, sp, -0x20
802255f8: 06 ec        	sd	ra, 0x18(sp)
802255fa: 22 e8        	sd	s0, 0x10(sp)
802255fc: 00 10        	addi	s0, sp, 0x20
802255fe: 23 34 a4 fe  	sd	a0, -0x18(s0)
80225602: 93 05 00 02  	li	a1, 0x20
;         unsafe { core::slice::from_raw_parts(self as *const _ as usize as *const u8, DIRENT_SZ) }
80225606: 97 e0 ff ff  	auipc	ra, 0xffffe
8022560a: e7 80 60 2a  	jalr	0x2a6(ra) <ekernel+0xffcd68ac>
8022560e: e2 60        	ld	ra, 0x18(sp)
80225610: 42 64        	ld	s0, 0x10(sp)
;     }
80225612: 05 61        	addi	sp, sp, 0x20
80225614: 82 80        	ret

0000000080225616 <_ZN7easy_fs6layout8DirEntry12as_bytes_mut17h353d4411ff9e49edE>:
;     pub fn as_bytes_mut(&mut self) -> &mut [u8] {
80225616: 01 11        	addi	sp, sp, -0x20
80225618: 06 ec        	sd	ra, 0x18(sp)
8022561a: 22 e8        	sd	s0, 0x10(sp)
8022561c: 00 10        	addi	s0, sp, 0x20
8022561e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80225622: 93 05 00 02  	li	a1, 0x20
;         unsafe { core::slice::from_raw_parts_mut(self as *mut _ as usize as *mut u8, DIRENT_SZ) }
80225626: 97 e0 ff ff  	auipc	ra, 0xffffe
8022562a: e7 80 a0 2e  	jalr	0x2ea(ra) <ekernel+0xffcd6910>
8022562e: e2 60        	ld	ra, 0x18(sp)
80225630: 42 64        	ld	s0, 0x10(sp)
;     }
80225632: 05 61        	addi	sp, sp, 0x20
80225634: 82 80        	ret

0000000080225636 <_ZN7easy_fs6layout8DirEntry4name17h81120e671954d290E>:
;     pub fn name(&self) -> &str {
80225636: 75 71        	addi	sp, sp, -0x90
80225638: 06 e5        	sd	ra, 0x88(sp)
8022563a: 22 e1        	sd	s0, 0x80(sp)
8022563c: 00 09        	addi	s0, sp, 0x90
8022563e: 23 3c a4 f6  	sd	a0, -0x88(s0)
80225642: 01 45        	li	a0, 0x0
;         let len = (0usize..).find(|i| self.name[*i] == 0).unwrap();
80225644: 23 30 a4 f8  	sd	a0, -0x80(s0)
80225648: 13 05 84 f7  	addi	a0, s0, -0x88
8022564c: 23 34 a4 f8  	sd	a0, -0x78(s0)
80225650: 83 35 84 f8  	ld	a1, -0x78(s0)
80225654: 13 05 04 f8  	addi	a0, s0, -0x80
80225658: 97 a0 ff ff  	auipc	ra, 0xffffa
8022565c: e7 80 c0 f3  	jalr	-0xc4(ra) <ekernel+0xffcd2594>
80225660: 23 3c a4 fa  	sd	a0, -0x48(s0)
80225664: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         match self {
80225668: 03 35 84 fb  	ld	a0, -0x48(s0)
8022566c: 11 e9        	bnez	a0, 0x80225680 <.Lpcrel_hi86+0x10>
8022566e: 09 a0        	j	0x80225670 <.Lpcrel_hi86>

0000000080225670 <.Lpcrel_hi86>:
;             None => unwrap_failed(),
80225670: 17 45 01 00  	auipc	a0, 0x14
80225674: 13 05 05 53  	addi	a0, a0, 0x530
80225678: 97 b0 00 00  	auipc	ra, 0xb
8022567c: e7 80 00 65  	jalr	0x650(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
;             Some(val) => val,
80225680: 83 35 04 fc  	ld	a1, -0x40(s0)
80225684: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         let len = (0usize..).find(|i| self.name[*i] == 0).unwrap();
80225688: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         core::str::from_utf8(&self.name[..len]).unwrap()
8022568c: 03 35 84 f7  	ld	a0, -0x88(s0)
80225690: 23 34 b4 fa  	sd	a1, -0x58(s0)
80225694: 83 35 84 fa  	ld	a1, -0x58(s0)

0000000080225698 <.Lpcrel_hi87>:
80225698: 17 46 01 00  	auipc	a2, 0x14
8022569c: 13 06 06 52  	addi	a2, a2, 0x520
802256a0: 97 e0 ff ff  	auipc	ra, 0xffffe
802256a4: e7 80 e0 4d  	jalr	0x4de(ra) <ekernel+0xffcd6b7e>
802256a8: 23 38 a4 f6  	sd	a0, -0x90(s0)
802256ac: 2e 86        	mv	a2, a1
802256ae: 83 35 04 f7  	ld	a1, -0x90(s0)
802256b2: 13 05 04 f9  	addi	a0, s0, -0x70
802256b6: 97 b0 00 00  	auipc	ra, 0xb
802256ba: e7 80 80 3c  	jalr	0x3c8(ra) <_ZN4core3str8converts9from_utf817ha40bb0c757063278E>
;         match self {
802256be: 03 35 04 f9  	ld	a0, -0x70(s0)
802256c2: 15 cd        	beqz	a0, 0x802256fe <.Lpcrel_hi90+0x18>
802256c4: 09 a0        	j	0x802256c6 <.Lpcrel_hi87+0x2e>
;             Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
802256c6: 03 35 04 fa  	ld	a0, -0x60(s0)
802256ca: 23 3c a4 fc  	sd	a0, -0x28(s0)
802256ce: 03 35 84 f9  	ld	a0, -0x68(s0)
802256d2: 23 38 a4 fc  	sd	a0, -0x30(s0)

00000000802256d6 <.Lpcrel_hi88>:
802256d6: 17 45 01 00  	auipc	a0, 0x14
802256da: 13 05 b5 f5  	addi	a0, a0, -0xa5

00000000802256de <.Lpcrel_hi89>:
802256de: 97 45 01 00  	auipc	a1, 0x14
802256e2: 93 86 25 f8  	addi	a3, a1, -0x7e

00000000802256e6 <.Lpcrel_hi90>:
802256e6: 97 45 01 00  	auipc	a1, 0x14
802256ea: 13 87 a5 4e  	addi	a4, a1, 0x4ea
802256ee: 93 05 b0 02  	li	a1, 0x2b
802256f2: 13 06 04 fd  	addi	a2, s0, -0x30
802256f6: 97 b0 00 00  	auipc	ra, 0xb
802256fa: e7 80 80 62  	jalr	0x628(ra) <_ZN4core6result13unwrap_failed17hd7dd91774099986cE>
;             Ok(t) => t,
802256fe: 03 35 84 f9  	ld	a0, -0x68(s0)
80225702: 83 35 04 fa  	ld	a1, -0x60(s0)
80225706: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022570a: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022570e: aa 60        	ld	ra, 0x88(sp)
80225710: 0a 64        	ld	s0, 0x80(sp)
;     }
80225712: 49 61        	addi	sp, sp, 0x90
80225714: 82 80        	ret

0000000080225716 <_ZN7easy_fs6layout8DirEntry12inode_number17h904bb7450061b060E>:
;     pub fn inode_number(&self) -> u32 {
80225716: 01 11        	addi	sp, sp, -0x20
80225718: 06 ec        	sd	ra, 0x18(sp)
8022571a: 22 e8        	sd	s0, 0x10(sp)
8022571c: 00 10        	addi	s0, sp, 0x20
8022571e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     }
80225722: 48 4d        	lw	a0, 0x1c(a0)
80225724: e2 60        	ld	ra, 0x18(sp)
80225726: 42 64        	ld	s0, 0x10(sp)
80225728: 05 61        	addi	sp, sp, 0x20
8022572a: 82 80        	ret

000000008022572c <_ZN71_$LT$easy_fs..layout..DiskInodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h66d2e8c7d43bbbb4E>:
; #[derive(PartialEq)]
8022572c: 79 71        	addi	sp, sp, -0x30
8022572e: 06 f4        	sd	ra, 0x28(sp)
80225730: 22 f0        	sd	s0, 0x20(sp)
80225732: 00 18        	addi	s0, sp, 0x30
80225734: 23 38 a4 fc  	sd	a0, -0x30(s0)
80225738: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022573c: 03 45 05 00  	lbu	a0, 0x0(a0)
80225740: 23 30 a4 fe  	sd	a0, -0x20(s0)
80225744: 83 c5 05 00  	lbu	a1, 0x0(a1)
80225748: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022574c: 2d 8d        	xor	a0, a0, a1
8022574e: 13 35 15 00  	seqz	a0, a0
80225752: a2 70        	ld	ra, 0x28(sp)
80225754: 02 74        	ld	s0, 0x20(sp)
80225756: 45 61        	addi	sp, sp, 0x30
80225758: 82 80        	ret

000000008022575a <_ZN64_$LT$core..str..error..Utf8Error$u20$as$u20$core..fmt..Debug$GT$3fmt17ha764bb0c1a9b8fdfE>:
; #[derive(Copy, Eq, PartialEq, Clone, Debug)]
8022575a: 5d 71        	addi	sp, sp, -0x50
8022575c: 86 e4        	sd	ra, 0x48(sp)
8022575e: a2 e0        	sd	s0, 0x40(sp)
80225760: 80 08        	addi	s0, sp, 0x50
80225762: 23 38 b4 fc  	sd	a1, -0x30(s0)
80225766: aa 87        	mv	a5, a0
80225768: 03 35 04 fd  	ld	a0, -0x30(s0)
8022576c: 23 30 f4 fe  	sd	a5, -0x20(s0)
80225770: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     pub(super) error_len: Option<u8>,
80225774: 93 85 87 00  	addi	a1, a5, 0x8
80225778: 23 3c b4 fc  	sd	a1, -0x28(s0)

000000008022577c <.Lpcrel_hi0>:
; #[derive(Copy, Eq, PartialEq, Clone, Debug)]
8022577c: 97 45 01 00  	auipc	a1, 0x14
80225780: 13 86 45 4b  	addi	a2, a1, 0x4b4
80225784: 8a 85        	mv	a1, sp
80225786: 90 e9        	sd	a2, 0x10(a1)
80225788: 13 06 84 fd  	addi	a2, s0, -0x28
8022578c: 90 e5        	sd	a2, 0x8(a1)
8022578e: 25 46        	li	a2, 0x9
80225790: 90 e1        	sd	a2, 0x0(a1)

0000000080225792 <.Lpcrel_hi1>:
80225792: 97 45 01 00  	auipc	a1, 0x14
80225796: 93 85 65 45  	addi	a1, a1, 0x456

000000008022579a <.Lpcrel_hi2>:
8022579a: 97 46 01 00  	auipc	a3, 0x14
8022579e: 93 86 76 45  	addi	a3, a3, 0x457

00000000802257a2 <.Lpcrel_hi3>:
802257a2: 17 47 01 00  	auipc	a4, 0x14
802257a6: 13 08 e7 45  	addi	a6, a4, 0x45e

00000000802257aa <.Lpcrel_hi4>:
802257aa: 17 47 01 00  	auipc	a4, 0x14
802257ae: 93 08 67 47  	addi	a7, a4, 0x476
802257b2: 2d 47        	li	a4, 0xb
802257b4: 97 a0 00 00  	auipc	ra, 0xa
802257b8: e7 80 a0 28  	jalr	0x28a(ra) <_ZN4core3fmt9Formatter26debug_struct_field2_finish17hcbf4a098f012dba6E>
802257bc: a6 60        	ld	ra, 0x48(sp)
802257be: 06 64        	ld	s0, 0x40(sp)
802257c0: 61 61        	addi	sp, sp, 0x50
802257c2: 82 80        	ret

00000000802257c4 <_ZN76_$LT$alloc..string..String$u20$as$u20$core..convert..From$LT$$RF$str$GT$$GT$4from17h433318f142debb41E>:
;     fn from(s: &str) -> String {
802257c4: 1d 71        	addi	sp, sp, -0x60
802257c6: 86 ec        	sd	ra, 0x58(sp)
802257c8: a2 e8        	sd	s0, 0x50(sp)
802257ca: 80 10        	addi	s0, sp, 0x60
802257cc: 23 34 a4 fa  	sd	a0, -0x58(s0)
;     pub fn to_vec<T: ConvertVec, A: Allocator>(s: &[T], alloc: A) -> Vec<T, A> {
802257d0: 23 38 b4 fc  	sd	a1, -0x30(s0)
802257d4: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         unsafe { mem::transmute(self) }
802257d8: 23 30 b4 fe  	sd	a1, -0x20(s0)
802257dc: 23 34 c4 fe  	sd	a2, -0x18(s0)
802257e0: 13 05 84 fb  	addi	a0, s0, -0x48
;         T::to_vec(s, alloc)
802257e4: 97 30 00 00  	auipc	ra, 0x3
802257e8: e7 80 60 5c  	jalr	0x5c6(ra) <_ZN52_$LT$T$u20$as$u20$alloc..slice..hack..ConvertVec$GT$6to_vec17ha81c88e291bd01cfE>
802257ec: 83 35 84 fa  	ld	a1, -0x58(s0)
;         String { vec: bytes }
802257f0: 03 35 84 fc  	ld	a0, -0x38(s0)
802257f4: 88 e9        	sd	a0, 0x10(a1)
802257f6: 03 35 04 fc  	ld	a0, -0x40(s0)
802257fa: 88 e5        	sd	a0, 0x8(a1)
802257fc: 03 35 84 fb  	ld	a0, -0x48(s0)
80225800: 88 e1        	sd	a0, 0x0(a1)
80225802: e6 60        	ld	ra, 0x58(sp)
80225804: 46 64        	ld	s0, 0x50(sp)
;     }
80225806: 25 61        	addi	sp, sp, 0x60
80225808: 82 80        	ret

000000008022580a <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h05658715eedd082bE>:
;     fn next(&mut self) -> Option<<I as Iterator>::Item> {
8022580a: 79 71        	addi	sp, sp, -0x30
8022580c: 06 f4        	sd	ra, 0x28(sp)
8022580e: 22 f0        	sd	s0, 0x20(sp)
80225810: 00 18        	addi	s0, sp, 0x30
80225812: 23 3c a4 fc  	sd	a0, -0x28(s0)
80225816: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.n != 0 {
8022581a: 08 69        	ld	a0, 0x10(a0)
8022581c: 11 e5        	bnez	a0, 0x80225828 <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h05658715eedd082bE+0x1e>
8022581e: 09 a0        	j	0x80225820 <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h05658715eedd082bE+0x16>
80225820: 01 45        	li	a0, 0x0
;             None
80225822: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if self.n != 0 {
80225826: 29 a8        	j	0x80225840 <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h05658715eedd082bE+0x36>
80225828: 03 35 84 fd  	ld	a0, -0x28(s0)
;             self.n -= 1;
8022582c: 0c 69        	ld	a1, 0x10(a0)
8022582e: fd 15        	addi	a1, a1, -0x1
80225830: 0c e9        	sd	a1, 0x10(a0)
;             self.iter.next()
80225832: 97 30 00 00  	auipc	ra, 0x3
80225836: e7 80 80 1a  	jalr	0x1a8(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE>
8022583a: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if self.n != 0 {
8022583e: 09 a0        	j	0x80225840 <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h05658715eedd082bE+0x36>
;     }
80225840: 03 35 04 fe  	ld	a0, -0x20(s0)
80225844: a2 70        	ld	ra, 0x28(sp)
80225846: 02 74        	ld	s0, 0x20(sp)
80225848: 45 61        	addi	sp, sp, 0x30
8022584a: 82 80        	ret

000000008022584c <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11c1b2c1ebcea1fcE>:
;     fn next(&mut self) -> Option<<I as Iterator>::Item> {
8022584c: 79 71        	addi	sp, sp, -0x30
8022584e: 06 f4        	sd	ra, 0x28(sp)
80225850: 22 f0        	sd	s0, 0x20(sp)
80225852: 00 18        	addi	s0, sp, 0x30
80225854: 23 3c a4 fc  	sd	a0, -0x28(s0)
80225858: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.n != 0 {
8022585c: 08 69        	ld	a0, 0x10(a0)
8022585e: 11 e5        	bnez	a0, 0x8022586a <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11c1b2c1ebcea1fcE+0x1e>
80225860: 09 a0        	j	0x80225862 <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11c1b2c1ebcea1fcE+0x16>
80225862: 01 45        	li	a0, 0x0
;             None
80225864: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if self.n != 0 {
80225868: 29 a8        	j	0x80225882 <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11c1b2c1ebcea1fcE+0x36>
8022586a: 03 35 84 fd  	ld	a0, -0x28(s0)
;             self.n -= 1;
8022586e: 0c 69        	ld	a1, 0x10(a0)
80225870: fd 15        	addi	a1, a1, -0x1
80225872: 0c e9        	sd	a1, 0x10(a0)
;             self.iter.next()
80225874: 97 30 00 00  	auipc	ra, 0x3
80225878: e7 80 20 2e  	jalr	0x2e2(ra) <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E>
8022587c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if self.n != 0 {
80225880: 09 a0        	j	0x80225882 <_ZN100_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h11c1b2c1ebcea1fcE+0x36>
;     }
80225882: 03 35 04 fe  	ld	a0, -0x20(s0)
80225886: a2 70        	ld	ra, 0x28(sp)
80225888: 02 74        	ld	s0, 0x20(sp)
8022588a: 45 61        	addi	sp, sp, 0x30
8022588c: 82 80        	ret

000000008022588e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0829adbd2e9b0a81E>:
;     fn into_iter(self) -> I {
8022588e: 01 11        	addi	sp, sp, -0x20
80225890: 06 ec        	sd	ra, 0x18(sp)
80225892: 22 e8        	sd	s0, 0x10(sp)
80225894: 00 10        	addi	s0, sp, 0x20
80225896: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022589a: aa 85        	mv	a1, a0
8022589c: 03 35 84 fe  	ld	a0, -0x18(s0)
;         self
802258a0: 10 69        	ld	a2, 0x10(a0)
802258a2: 90 e9        	sd	a2, 0x10(a1)
802258a4: 10 65        	ld	a2, 0x8(a0)
802258a6: 90 e5        	sd	a2, 0x8(a1)
802258a8: 08 61        	ld	a0, 0x0(a0)
802258aa: 88 e1        	sd	a0, 0x0(a1)
802258ac: e2 60        	ld	ra, 0x18(sp)
802258ae: 42 64        	ld	s0, 0x10(sp)
;     }
802258b0: 05 61        	addi	sp, sp, 0x20
802258b2: 82 80        	ret

00000000802258b4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfe7969ed5288dddeE>:
;     fn into_iter(self) -> I {
802258b4: 01 11        	addi	sp, sp, -0x20
802258b6: 06 ec        	sd	ra, 0x18(sp)
802258b8: 22 e8        	sd	s0, 0x10(sp)
802258ba: 00 10        	addi	s0, sp, 0x20
802258bc: 23 34 b4 fe  	sd	a1, -0x18(s0)
802258c0: aa 85        	mv	a1, a0
802258c2: 03 35 84 fe  	ld	a0, -0x18(s0)
;         self
802258c6: 10 69        	ld	a2, 0x10(a0)
802258c8: 90 e9        	sd	a2, 0x10(a1)
802258ca: 10 65        	ld	a2, 0x8(a0)
802258cc: 90 e5        	sd	a2, 0x8(a1)
802258ce: 08 61        	ld	a0, 0x0(a0)
802258d0: 88 e1        	sd	a0, 0x0(a1)
802258d2: e2 60        	ld	ra, 0x18(sp)
802258d4: 42 64        	ld	s0, 0x10(sp)
;     }
802258d6: 05 61        	addi	sp, sp, 0x20
802258d8: 82 80        	ret

00000000802258da <_ZN7easy_fs11block_cache10BlockCache3new17h424817ffa572a94fE>:
;     pub fn new(block_id: usize, block_device: Arc<dyn BlockDevice>) -> Self {
802258da: 13 01 01 b9  	addi	sp, sp, -0x470
802258de: 23 34 11 46  	sd	ra, 0x468(sp)
802258e2: 23 30 81 46  	sd	s0, 0x460(sp)
802258e6: 13 04 01 47  	addi	s0, sp, 0x470
802258ea: 23 34 b4 ba  	sd	a1, -0x458(s0)
802258ee: 23 30 a4 bc  	sd	a0, -0x440(s0)
802258f2: 23 38 c4 bc  	sd	a2, -0x430(s0)
802258f6: 23 3c d4 bc  	sd	a3, -0x428(s0)
802258fa: 23 30 b4 fe  	sd	a1, -0x20(s0)
802258fe: 13 05 04 be  	addi	a0, s0, -0x420
80225902: 23 38 a4 b8  	sd	a0, -0x470(s0)
80225906: 81 45        	li	a1, 0x0
80225908: 23 34 b4 bc  	sd	a1, -0x438(s0)
8022590c: 13 06 00 20  	li	a2, 0x200
80225910: 23 30 c4 ba  	sd	a2, -0x460(s0)
;         let mut cache = [0u8; BLOCK_SZ];
80225914: 97 c0 00 00  	auipc	ra, 0xc
80225918: e7 80 a0 57  	jalr	0x57a(ra) <memset>
8022591c: 13 05 04 bd  	addi	a0, s0, -0x430
;         block_device.read_block(block_id, &mut cache);
80225920: 97 80 ff ff  	auipc	ra, 0xffff8
80225924: e7 80 c0 8a  	jalr	-0x754(ra) <ekernel+0xffcd01cc>
80225928: 03 36 04 b9  	ld	a2, -0x470(s0)
8022592c: 83 36 04 ba  	ld	a3, -0x460(s0)
80225930: 2e 87        	mv	a4, a1
80225932: 83 35 84 ba  	ld	a1, -0x458(s0)
80225936: 18 73        	ld	a4, 0x20(a4)
80225938: 02 97        	jalr	a4
8022593a: 83 35 04 b9  	ld	a1, -0x470(s0)
8022593e: 03 36 04 ba  	ld	a2, -0x460(s0)
80225942: 13 05 04 de  	addi	a0, s0, -0x220
80225946: 23 3c a4 b8  	sd	a0, -0x468(s0)
;             cache,
8022594a: 97 c0 00 00  	auipc	ra, 0xc
8022594e: e7 80 40 32  	jalr	0x324(ra) <memcpy>
80225952: 83 35 84 b9  	ld	a1, -0x468(s0)
80225956: 03 36 04 ba  	ld	a2, -0x460(s0)
8022595a: 03 35 04 bc  	ld	a0, -0x440(s0)
;             block_device,
8022595e: 83 36 04 bd  	ld	a3, -0x430(s0)
80225962: 23 38 d4 ba  	sd	a3, -0x450(s0)
80225966: 83 36 84 bd  	ld	a3, -0x428(s0)
8022596a: 23 3c d4 ba  	sd	a3, -0x448(s0)
;         Self {
8022596e: 41 05        	addi	a0, a0, 0x10
80225970: 97 c0 00 00  	auipc	ra, 0xc
80225974: e7 80 e0 2f  	jalr	0x2fe(ra) <memcpy>
80225978: 03 37 84 ba  	ld	a4, -0x458(s0)
8022597c: 83 36 04 bb  	ld	a3, -0x450(s0)
80225980: 03 36 84 bb  	ld	a2, -0x448(s0)
80225984: 83 35 04 bc  	ld	a1, -0x440(s0)
80225988: 03 35 84 bc  	ld	a0, -0x438(s0)
8022598c: 23 b8 e5 20  	sd	a4, 0x210(a1)
80225990: 94 e1        	sd	a3, 0x0(a1)
80225992: 90 e5        	sd	a2, 0x8(a1)
80225994: 23 8c a5 20  	sb	a0, 0x218(a1)
80225998: 83 30 81 46  	ld	ra, 0x468(sp)
8022599c: 03 34 01 46  	ld	s0, 0x460(sp)
;     }
802259a0: 13 01 01 47  	addi	sp, sp, 0x470
802259a4: 82 80        	ret

00000000802259a6 <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E>:
;     fn addr_of_offset(&self, offset: usize) -> usize {
802259a6: 79 71        	addi	sp, sp, -0x30
802259a8: 06 f4        	sd	ra, 0x28(sp)
802259aa: 22 f0        	sd	s0, 0x20(sp)
802259ac: 00 18        	addi	s0, sp, 0x30
802259ae: 23 38 b4 fc  	sd	a1, -0x30(s0)
802259b2: 23 3c a4 fc  	sd	a0, -0x28(s0)
802259b6: 23 30 a4 fe  	sd	a0, -0x20(s0)
802259ba: 23 34 b4 fe  	sd	a1, -0x18(s0)
802259be: 13 05 f0 1f  	li	a0, 0x1ff
;         &self.cache[offset] as *const _ as usize
802259c2: 63 6d b5 00  	bltu	a0, a1, 0x802259dc <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E+0x36>
802259c6: 09 a0        	j	0x802259c8 <_ZN7easy_fs11block_cache10BlockCache14addr_of_offset17h0f99dafa76666fe9E+0x22>
802259c8: 03 35 84 fd  	ld	a0, -0x28(s0)
802259cc: 83 35 04 fd  	ld	a1, -0x30(s0)
;         &self.cache[offset] as *const _ as usize
802259d0: 2e 95        	add	a0, a0, a1
802259d2: 41 05        	addi	a0, a0, 0x10
802259d4: a2 70        	ld	ra, 0x28(sp)
802259d6: 02 74        	ld	s0, 0x20(sp)
;     }
802259d8: 45 61        	addi	sp, sp, 0x30
802259da: 82 80        	ret
802259dc: 03 35 04 fd  	ld	a0, -0x30(s0)

00000000802259e0 <.Lpcrel_hi0>:
;         &self.cache[offset] as *const _ as usize
802259e0: 97 45 01 00  	auipc	a1, 0x14
802259e4: 13 86 85 2b  	addi	a2, a1, 0x2b8
802259e8: 93 05 00 20  	li	a1, 0x200
802259ec: 97 b0 00 00  	auipc	ra, 0xb
802259f0: e7 80 40 8c  	jalr	-0x73c(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

00000000802259f4 <_ZN7easy_fs11block_cache10BlockCache4sync17hebb1d09628b89c36E>:
;     pub fn sync(&mut self) {
802259f4: 01 11        	addi	sp, sp, -0x20
802259f6: 06 ec        	sd	ra, 0x18(sp)
802259f8: 22 e8        	sd	s0, 0x10(sp)
802259fa: 00 10        	addi	s0, sp, 0x20
802259fc: 23 30 a4 fe  	sd	a0, -0x20(s0)
80225a00: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.modified {
80225a04: 03 45 85 21  	lbu	a0, 0x218(a0)
80225a08: 05 89        	andi	a0, a0, 0x1
80225a0a: 11 e5        	bnez	a0, 0x80225a16 <_ZN7easy_fs11block_cache10BlockCache4sync17hebb1d09628b89c36E+0x22>
80225a0c: 09 a0        	j	0x80225a0e <_ZN7easy_fs11block_cache10BlockCache4sync17hebb1d09628b89c36E+0x1a>
80225a0e: e2 60        	ld	ra, 0x18(sp)
80225a10: 42 64        	ld	s0, 0x10(sp)
;     }
80225a12: 05 61        	addi	sp, sp, 0x20
80225a14: 82 80        	ret
80225a16: 03 35 04 fe  	ld	a0, -0x20(s0)
80225a1a: 81 45        	li	a1, 0x0
;             self.modified = false;
80225a1c: 23 0c b5 20  	sb	a1, 0x218(a0)
;             self.block_device.write_block(self.block_id, &self.cache);
80225a20: 97 70 ff ff  	auipc	ra, 0xffff7
80225a24: e7 80 c0 7a  	jalr	0x7ac(ra) <ekernel+0xffcd01cc>
80225a28: 03 36 04 fe  	ld	a2, -0x20(s0)
80225a2c: ae 86        	mv	a3, a1
80225a2e: 83 35 06 21  	ld	a1, 0x210(a2)
80225a32: 41 06        	addi	a2, a2, 0x10
80225a34: 98 76        	ld	a4, 0x28(a3)
80225a36: 93 06 00 20  	li	a3, 0x200
80225a3a: 02 97        	jalr	a4
80225a3c: c9 bf        	j	0x80225a0e <_ZN7easy_fs11block_cache10BlockCache4sync17hebb1d09628b89c36E+0x1a>

0000000080225a3e <_ZN7easy_fs11block_cache17BlockCacheManager3new17h79b6cae5c0310b1aE>:
;     pub fn new() -> Self {
80225a3e: 39 71        	addi	sp, sp, -0x40
80225a40: 06 fc        	sd	ra, 0x38(sp)
80225a42: 22 f8        	sd	s0, 0x30(sp)
80225a44: 80 00        	addi	s0, sp, 0x40
80225a46: 23 34 a4 fc  	sd	a0, -0x38(s0)
80225a4a: 13 05 04 fd  	addi	a0, s0, -0x30
;             queue: VecDeque::new(),
80225a4e: 97 10 00 00  	auipc	ra, 0x1
80225a52: e7 80 60 c1  	jalr	-0x3ea(ra) <_ZN5alloc11collections9vec_deque17VecDeque$LT$T$GT$3new17ha5d9f75d14b59448E>
80225a56: 83 35 84 fc  	ld	a1, -0x38(s0)
;         Self {
80225a5a: 03 35 84 fe  	ld	a0, -0x18(s0)
80225a5e: 88 ed        	sd	a0, 0x18(a1)
80225a60: 03 35 04 fe  	ld	a0, -0x20(s0)
80225a64: 88 e9        	sd	a0, 0x10(a1)
80225a66: 03 35 84 fd  	ld	a0, -0x28(s0)
80225a6a: 88 e5        	sd	a0, 0x8(a1)
80225a6c: 03 35 04 fd  	ld	a0, -0x30(s0)
80225a70: 88 e1        	sd	a0, 0x0(a1)
80225a72: e2 70        	ld	ra, 0x38(sp)
80225a74: 42 74        	ld	s0, 0x30(sp)
;     }
80225a76: 21 61        	addi	sp, sp, 0x40
80225a78: 82 80        	ret

0000000080225a7a <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E>:
;     pub fn get_block_cache(
80225a7a: 13 01 01 81  	addi	sp, sp, -0x7f0
80225a7e: 23 34 11 7e  	sd	ra, 0x7e8(sp)
80225a82: 23 30 81 7e  	sd	s0, 0x7e0(sp)
80225a86: 13 04 01 7f  	addi	s0, sp, 0x7f0
80225a8a: 13 01 01 d9  	addi	sp, sp, -0x270
80225a8e: 13 07 04 80  	addi	a4, s0, -0x800
80225a92: 13 07 07 e1  	addi	a4, a4, -0x1f0
80225a96: 85 67        	lui	a5, 0x1
80225a98: b3 07 f4 40  	sub	a5, s0, a5
80225a9c: 23 b4 e7 60  	sd	a4, 0x608(a5)
80225aa0: 2e 87        	mv	a4, a1
80225aa2: aa 85        	mv	a1, a0
80225aa4: 05 65        	lui	a0, 0x1
80225aa6: 33 05 a4 40  	sub	a0, s0, a0
80225aaa: 03 35 85 60  	ld	a0, 0x608(a0)
80225aae: 85 67        	lui	a5, 0x1
80225ab0: b3 07 f4 40  	sub	a5, s0, a5
80225ab4: 23 bc b7 5e  	sd	a1, 0x5f8(a5)
80225ab8: 18 e1        	sd	a4, 0x0(a0)
80225aba: 10 e5        	sd	a2, 0x8(a0)
80225abc: 14 e9        	sd	a3, 0x10(a0)
80225abe: 23 30 b4 b6  	sd	a1, -0x4a0(s0)
80225ac2: 13 05 04 80  	addi	a0, s0, -0x800
80225ac6: 13 05 85 e3  	addi	a0, a0, -0x1c8
80225aca: 05 66        	lui	a2, 0x1
80225acc: 33 06 c4 40  	sub	a2, s0, a2
80225ad0: 23 30 a6 60  	sd	a0, 0x600(a2)
;         if let Some(pair) = self.queue.iter().find(|pair| pair.0 == block_id) {
80225ad4: 97 10 00 00  	auipc	ra, 0x1
80225ad8: e7 80 a0 20  	jalr	0x20a(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4iter17h83a295f1eaa66078E>
80225adc: 05 65        	lui	a0, 0x1
80225ade: 33 05 a4 40  	sub	a0, s0, a0
80225ae2: 03 35 05 60  	ld	a0, 0x600(a0)
80225ae6: 85 65        	lui	a1, 0x1
80225ae8: b3 05 b4 40  	sub	a1, s0, a1
80225aec: 83 b5 85 60  	ld	a1, 0x608(a1)
80225af0: 13 06 04 80  	addi	a2, s0, -0x800
80225af4: 13 06 06 e1  	addi	a2, a2, -0x1f0
80225af8: b0 e5        	sd	a2, 0x48(a1)
80225afa: ac 65        	ld	a1, 0x48(a1)
80225afc: 97 30 00 00  	auipc	ra, 0x3
80225b00: e7 80 80 a4  	jalr	-0x5b8(ra) <_ZN4core4iter6traits8iterator8Iterator4find17hcdc1e740af637eaaE>
80225b04: aa 85        	mv	a1, a0
80225b06: 05 65        	lui	a0, 0x1
80225b08: 33 05 a4 40  	sub	a0, s0, a0
80225b0c: 03 35 85 60  	ld	a0, 0x608(a0)
80225b10: 0c f1        	sd	a1, 0x20(a0)
80225b12: 08 71        	ld	a0, 0x20(a0)
80225b14: 15 c5        	beqz	a0, 0x80225b40 <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E+0xc6>
80225b16: 09 a0        	j	0x80225b18 <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E+0x9e>
80225b18: 05 65        	lui	a0, 0x1
80225b1a: 33 05 a4 40  	sub	a0, s0, a0
80225b1e: 03 35 85 60  	ld	a0, 0x608(a0)
;         if let Some(pair) = self.queue.iter().find(|pair| pair.0 == block_id) {
80225b22: 08 71        	ld	a0, 0x20(a0)
80225b24: 23 34 a4 b6  	sd	a0, -0x498(s0)
;             Arc::clone(&pair.1)
80225b28: 21 05        	addi	a0, a0, 0x8
80225b2a: 97 70 ff ff  	auipc	ra, 0xffff7
80225b2e: e7 80 40 53  	jalr	0x534(ra) <ekernel+0xffcd005e>
80225b32: 85 65        	lui	a1, 0x1
80225b34: b3 05 b4 40  	sub	a1, s0, a1
80225b38: 83 b5 85 60  	ld	a1, 0x608(a1)
80225b3c: 88 ed        	sd	a0, 0x18(a1)
80225b3e: 31 a8        	j	0x80225b5a <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E+0xe0>
80225b40: 05 65        	lui	a0, 0x1
80225b42: 33 05 a4 40  	sub	a0, s0, a0
80225b46: 03 35 85 5f  	ld	a0, 0x5f8(a0)
;             if self.queue.len() == BLOCK_CACHE_SIZE {
80225b4a: 97 10 00 00  	auipc	ra, 0x1
80225b4e: e7 80 00 0a  	jalr	0xa0(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$3len17h86b6f2fc195152e2E>
80225b52: c1 45        	li	a1, 0x10
80225b54: 63 0c b5 1a  	beq	a0, a1, 0x80225d0c <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E+0x292>
80225b58: 05 a8        	j	0x80225b88 <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E+0x10e>
80225b5a: 13 05 04 80  	addi	a0, s0, -0x800
80225b5e: 13 05 85 e1  	addi	a0, a0, -0x1e8
;     }
80225b62: 97 80 ff ff  	auipc	ra, 0xffff8
80225b66: e7 80 80 f1  	jalr	-0xe8(ra) <ekernel+0xffcd0a7a>
80225b6a: 05 65        	lui	a0, 0x1
80225b6c: 33 05 a4 40  	sub	a0, s0, a0
80225b70: 03 35 85 60  	ld	a0, 0x608(a0)
80225b74: 08 6d        	ld	a0, 0x18(a0)
80225b76: 13 01 01 27  	addi	sp, sp, 0x270
80225b7a: 83 30 81 7e  	ld	ra, 0x7e8(sp)
80225b7e: 03 34 01 7e  	ld	s0, 0x7e0(sp)
80225b82: 13 01 01 7f  	addi	sp, sp, 0x7f0
80225b86: 82 80        	ret
80225b88: 05 65        	lui	a0, 0x1
80225b8a: 33 05 a4 40  	sub	a0, s0, a0
80225b8e: 03 35 85 60  	ld	a0, 0x608(a0)
;                 block_id,
80225b92: 08 61        	ld	a0, 0x0(a0)
80225b94: 85 65        	lui	a1, 0x1
80225b96: b3 05 b4 40  	sub	a1, s0, a1
80225b9a: 23 b0 a5 5c  	sd	a0, 0x5c0(a1)
80225b9e: 13 05 04 80  	addi	a0, s0, -0x800
80225ba2: 13 05 85 e1  	addi	a0, a0, -0x1e8
;                 Arc::clone(&block_device),
80225ba6: 97 70 ff ff  	auipc	ra, 0xffff7
80225baa: e7 80 a0 53  	jalr	0x53a(ra) <ekernel+0xffcd00e0>
80225bae: 2a 86        	mv	a2, a0
80225bb0: ae 86        	mv	a3, a1
80225bb2: 05 65        	lui	a0, 0x1
80225bb4: 33 05 a4 40  	sub	a0, s0, a0
80225bb8: 83 35 05 5c  	ld	a1, 0x5c0(a0)
80225bbc: 13 05 04 93  	addi	a0, s0, -0x6d0
80225bc0: 05 67        	lui	a4, 0x1
80225bc2: 33 07 e4 40  	sub	a4, s0, a4
80225bc6: 23 38 a7 5c  	sd	a0, 0x5d0(a4)
;             let block_cache = Arc::new(Mutex::new(BlockCache::new(
80225bca: 97 00 00 00  	auipc	ra, 0x0
80225bce: e7 80 00 d1  	jalr	-0x2f0(ra) <_ZN7easy_fs11block_cache10BlockCache3new17h424817ffa572a94fE>
80225bd2: 01 45        	li	a0, 0x0
80225bd4: 85 65        	lui	a1, 0x1
80225bd6: b3 05 b4 40  	sub	a1, s0, a1
80225bda: 23 b4 a5 5c  	sd	a0, 0x5c8(a1)
;             next_ticket: AtomicUsize::new(0),
80225bde: 97 90 ff ff  	auipc	ra, 0xffff9
80225be2: e7 80 80 55  	jalr	0x558(ra) <ekernel+0xffcd2136>
80225be6: aa 85        	mv	a1, a0
80225be8: 05 65        	lui	a0, 0x1
80225bea: 33 05 a4 40  	sub	a0, s0, a0
80225bee: 03 35 85 5c  	ld	a0, 0x5c8(a0)
80225bf2: 23 3c b4 fc  	sd	a1, -0x28(s0)
80225bf6: 83 35 84 fd  	ld	a1, -0x28(s0)
80225bfa: 23 34 b4 da  	sd	a1, -0x258(s0)
;             next_serving: AtomicUsize::new(0),
80225bfe: 97 90 ff ff  	auipc	ra, 0xffff9
80225c02: e7 80 80 53  	jalr	0x538(ra) <ekernel+0xffcd2136>
80225c06: 85 65        	lui	a1, 0x1
80225c08: b3 05 b4 40  	sub	a1, s0, a1
80225c0c: 83 b5 05 5d  	ld	a1, 0x5d0(a1)
80225c10: 23 30 a4 fe  	sd	a0, -0x20(s0)
80225c14: 03 35 04 fe  	ld	a0, -0x20(s0)
80225c18: 23 38 a4 da  	sd	a0, -0x250(s0)
80225c1c: 13 05 84 db  	addi	a0, s0, -0x248
80225c20: 05 66        	lui	a2, 0x1
80225c22: 33 06 c4 40  	sub	a2, s0, a2
80225c26: 23 3c a6 5c  	sd	a0, 0x5d8(a2)
80225c2a: 13 06 00 22  	li	a2, 0x220
80225c2e: 85 66        	lui	a3, 0x1
80225c30: b3 06 d4 40  	sub	a3, s0, a3
80225c34: 23 b0 c6 5e  	sd	a2, 0x5e0(a3)
;         UnsafeCell { value }
80225c38: 97 c0 00 00  	auipc	ra, 0xc
80225c3c: e7 80 60 03  	jalr	0x36(ra) <memcpy>
80225c40: 05 65        	lui	a0, 0x1
80225c42: 33 05 a4 40  	sub	a0, s0, a0
80225c46: 83 35 85 5d  	ld	a1, 0x5d8(a0)
80225c4a: 05 65        	lui	a0, 0x1
80225c4c: 33 05 a4 40  	sub	a0, s0, a0
80225c50: 03 36 05 5e  	ld	a2, 0x5e0(a0)
;         Self {
80225c54: 03 35 84 da  	ld	a0, -0x258(s0)
80225c58: 23 3c a4 b6  	sd	a0, -0x488(s0)
80225c5c: 03 35 04 db  	ld	a0, -0x250(s0)
80225c60: 23 30 a4 b8  	sd	a0, -0x480(s0)
80225c64: 13 05 84 b8  	addi	a0, s0, -0x478
80225c68: 97 c0 00 00  	auipc	ra, 0xc
80225c6c: e7 80 60 00  	jalr	0x6(ra) <memcpy>
80225c70: 13 05 04 80  	addi	a0, s0, -0x800
80225c74: 13 05 05 f0  	addi	a0, a0, -0x100
80225c78: 85 65        	lui	a1, 0x1
80225c7a: b3 05 b4 40  	sub	a1, s0, a1
80225c7e: 23 b4 a5 5e  	sd	a0, 0x5e8(a1)
80225c82: 93 05 84 b7  	addi	a1, s0, -0x488
80225c86: 13 06 00 23  	li	a2, 0x230
;         Self { inner: InnerMutex::new(value) }
80225c8a: 97 c0 00 00  	auipc	ra, 0xc
80225c8e: e7 80 40 fe  	jalr	-0x1c(ra) <memcpy>
80225c92: 05 65        	lui	a0, 0x1
80225c94: 33 05 a4 40  	sub	a0, s0, a0
80225c98: 03 35 85 5e  	ld	a0, 0x5e8(a0)
;             let block_cache = Arc::new(Mutex::new(BlockCache::new(
80225c9c: 97 70 ff ff  	auipc	ra, 0xffff7
80225ca0: e7 80 40 05  	jalr	0x54(ra) <ekernel+0xffccfcf0>
80225ca4: aa 85        	mv	a1, a0
80225ca6: 05 65        	lui	a0, 0x1
80225ca8: 33 05 a4 40  	sub	a0, s0, a0
80225cac: 03 35 85 60  	ld	a0, 0x608(a0)
80225cb0: 6c f5        	sd	a1, 0xe8(a0)
;             self.queue.push_back((block_id, Arc::clone(&block_cache)));
80225cb2: 08 61        	ld	a0, 0x0(a0)
80225cb4: 85 65        	lui	a1, 0x1
80225cb6: b3 05 b4 40  	sub	a1, s0, a1
80225cba: 23 b8 a5 5e  	sd	a0, 0x5f0(a1)
80225cbe: 13 05 04 80  	addi	a0, s0, -0x800
80225cc2: 13 05 85 ef  	addi	a0, a0, -0x108
80225cc6: 97 70 ff ff  	auipc	ra, 0xffff7
80225cca: e7 80 80 39  	jalr	0x398(ra) <ekernel+0xffcd005e>
80225cce: 85 65        	lui	a1, 0x1
80225cd0: b3 05 b4 40  	sub	a1, s0, a1
80225cd4: 03 b6 05 5f  	ld	a2, 0x5f0(a1)
80225cd8: aa 85        	mv	a1, a0
80225cda: 05 65        	lui	a0, 0x1
80225cdc: 33 05 a4 40  	sub	a0, s0, a0
80225ce0: 03 35 85 5f  	ld	a0, 0x5f8(a0)
80225ce4: 23 38 c4 b4  	sd	a2, -0x4b0(s0)
80225ce8: 23 3c b4 b4  	sd	a1, -0x4a8(s0)
80225cec: 83 35 04 b5  	ld	a1, -0x4b0(s0)
80225cf0: 03 36 84 b5  	ld	a2, -0x4a8(s0)
80225cf4: 97 10 00 00  	auipc	ra, 0x1
80225cf8: e7 80 a0 2d  	jalr	0x2da(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17hb09b20496b7377d5E>
80225cfc: 05 65        	lui	a0, 0x1
80225cfe: 33 05 a4 40  	sub	a0, s0, a0
80225d02: 83 35 85 60  	ld	a1, 0x608(a0)
;             block_cache
80225d06: e8 75        	ld	a0, 0xe8(a1)
80225d08: 88 ed        	sd	a0, 0x18(a1)
;         if let Some(pair) = self.queue.iter().find(|pair| pair.0 == block_id) {
80225d0a: 81 bd        	j	0x80225b5a <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E+0xe0>
80225d0c: 05 65        	lui	a0, 0x1
80225d0e: 33 05 a4 40  	sub	a0, s0, a0
80225d12: 83 35 85 5f  	ld	a1, 0x5f8(a0)
80225d16: 13 05 04 80  	addi	a0, s0, -0x800
80225d1a: 13 05 85 e9  	addi	a0, a0, -0x168
80225d1e: 05 66        	lui	a2, 0x1
80225d20: 33 06 c4 40  	sub	a2, s0, a2
80225d24: 23 38 a6 5a  	sd	a0, 0x5b0(a2)
;                 if let Some((idx, _)) = self
80225d28: 97 10 00 00  	auipc	ra, 0x1
80225d2c: e7 80 60 fb  	jalr	-0x4a(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4iter17h83a295f1eaa66078E>
80225d30: 05 65        	lui	a0, 0x1
80225d32: 33 05 a4 40  	sub	a0, s0, a0
80225d36: 83 35 05 5b  	ld	a1, 0x5b0(a0)
80225d3a: 13 05 04 80  	addi	a0, s0, -0x800
80225d3e: 13 05 05 e7  	addi	a0, a0, -0x190
80225d42: 05 66        	lui	a2, 0x1
80225d44: 33 06 c4 40  	sub	a2, s0, a2
80225d48: 23 3c a6 5a  	sd	a0, 0x5b8(a2)
80225d4c: 97 30 00 00  	auipc	ra, 0x3
80225d50: e7 80 00 85  	jalr	-0x7b0(ra) <_ZN4core4iter6traits8iterator8Iterator9enumerate17h50ff2a9a888db329E>
80225d54: 05 65        	lui	a0, 0x1
80225d56: 33 05 a4 40  	sub	a0, s0, a0
80225d5a: 03 35 85 5b  	ld	a0, 0x5b8(a0)
80225d5e: 97 d0 ff ff  	auipc	ra, 0xffffd
80225d62: e7 80 40 84  	jalr	-0x7bc(ra) <ekernel+0xffcd55a2>
80225d66: 2a 86        	mv	a2, a0
80225d68: 05 65        	lui	a0, 0x1
80225d6a: 33 05 a4 40  	sub	a0, s0, a0
80225d6e: 03 35 85 60  	ld	a0, 0x608(a0)
80225d72: 30 e9        	sd	a2, 0x50(a0)
80225d74: 2c ed        	sd	a1, 0x58(a0)
80225d76: 28 6d        	ld	a0, 0x58(a0)
80225d78: 2d c9        	beqz	a0, 0x80225dea <.Lpcrel_hi1>
80225d7a: 09 a0        	j	0x80225d7c <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E+0x302>
80225d7c: 05 65        	lui	a0, 0x1
80225d7e: 33 05 a4 40  	sub	a0, s0, a0
80225d82: 03 35 85 60  	ld	a0, 0x608(a0)
;                 if let Some((idx, _)) = self
80225d86: 30 69        	ld	a2, 0x50(a0)
80225d88: 23 38 c4 b6  	sd	a2, -0x490(s0)
80225d8c: 13 05 04 80  	addi	a0, s0, -0x800
80225d90: 13 05 05 ee  	addi	a0, a0, -0x120
80225d94: 85 65        	lui	a1, 0x1
80225d96: b3 05 b4 40  	sub	a1, s0, a1
80225d9a: 23 b0 a5 5a  	sd	a0, 0x5a0(a1)
;                     self.queue.drain(idx..=idx);
80225d9e: b2 85        	mv	a1, a2
80225da0: 97 90 ff ff  	auipc	ra, 0xffff9
80225da4: e7 80 a0 73  	jalr	0x73a(ra) <ekernel+0xffcd24da>
80225da8: 05 65        	lui	a0, 0x1
80225daa: 33 05 a4 40  	sub	a0, s0, a0
80225dae: 83 35 85 5f  	ld	a1, 0x5f8(a0)
80225db2: 05 65        	lui	a0, 0x1
80225db4: 33 05 a4 40  	sub	a0, s0, a0
80225db8: 03 36 05 5a  	ld	a2, 0x5a0(a0)
80225dbc: 13 05 04 80  	addi	a0, s0, -0x800
80225dc0: 13 05 85 eb  	addi	a0, a0, -0x148
80225dc4: 85 66        	lui	a3, 0x1
80225dc6: b3 06 d4 40  	sub	a3, s0, a3
80225dca: 23 b4 a6 5a  	sd	a0, 0x5a8(a3)
80225dce: 97 10 00 00  	auipc	ra, 0x1
80225dd2: e7 80 80 ff  	jalr	-0x8(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$5drain17h3d4f88fd8073c448E>
80225dd6: 05 65        	lui	a0, 0x1
80225dd8: 33 05 a4 40  	sub	a0, s0, a0
80225ddc: 03 35 85 5a  	ld	a0, 0x5a8(a0)
80225de0: 97 80 ff ff  	auipc	ra, 0xffff8
80225de4: e7 80 20 ac  	jalr	-0x53e(ra) <ekernel+0xffcd08a2>
80225de8: 45 b3        	j	0x80225b88 <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E+0x10e>

0000000080225dea <.Lpcrel_hi1>:
;                     panic!("Run out of BlockCache!");
80225dea: 17 45 01 00  	auipc	a0, 0x14
80225dee: 13 05 65 ec  	addi	a0, a0, -0x13a

0000000080225df2 <.Lpcrel_hi2>:
80225df2: 97 45 01 00  	auipc	a1, 0x14
80225df6: 13 86 65 ed  	addi	a2, a1, -0x12a
80225dfa: d9 45        	li	a1, 0x16
80225dfc: 97 a0 00 00  	auipc	ra, 0xa
80225e00: e7 80 c0 41  	jalr	0x41c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

0000000080225e04 <_ZN7easy_fs11block_cache15get_block_cache17h2877e8bcc94fa046E>:
; pub fn get_block_cache(
80225e04: 31 71        	addi	sp, sp, -0xc0
80225e06: 06 fd        	sd	ra, 0xb8(sp)
80225e08: 22 f9        	sd	s0, 0xb0(sp)
80225e0a: 80 01        	addi	s0, sp, 0xc0
80225e0c: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80225e10: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80225e14: 23 34 a4 f6  	sd	a0, -0x98(s0)
80225e18: 23 3c a4 f8  	sd	a0, -0x68(s0)
80225e1c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80225e20: 23 34 c4 fa  	sd	a2, -0x58(s0)

0000000080225e24 <.Lpcrel_hi3>:
;     BLOCK_CACHE_MANAGER
80225e24: 17 45 01 00  	auipc	a0, 0x14
80225e28: 13 05 c5 eb  	addi	a0, a0, -0x144
80225e2c: 97 00 00 00  	auipc	ra, 0x0
80225e30: e7 80 60 2c  	jalr	0x2c6(ra) <_ZN85_$LT$easy_fs..block_cache..BLOCK_CACHE_MANAGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h5fc0ad87d2e02ea0E>
80225e34: aa 85        	mv	a1, a0
80225e36: 23 38 b4 f6  	sd	a1, -0x90(s0)
80225e3a: 23 34 a4 fc  	sd	a0, -0x38(s0)
80225e3e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80225e42: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80225e44: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80225e48: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80225e4c: 85 45        	li	a1, 0x1
80225e4e: 97 90 ff ff  	auipc	ra, 0xffff9
80225e52: e7 80 80 35  	jalr	0x358(ra) <ekernel+0xffcd21a6>
80225e56: aa 85        	mv	a1, a0
80225e58: 23 3c b4 f6  	sd	a1, -0x88(s0)
80225e5c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80225e60: 09 a0        	j	0x80225e62 <.Lpcrel_hi3+0x3e>
80225e62: 03 35 04 f7  	ld	a0, -0x90(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80225e66: 21 05        	addi	a0, a0, 0x8
80225e68: 89 45        	li	a1, 0x2
80225e6a: a3 0b b4 fc  	sb	a1, -0x29(s0)
80225e6e: 83 45 74 fd  	lbu	a1, -0x29(s0)
80225e72: 97 90 ff ff  	auipc	ra, 0xffff9
80225e76: e7 80 80 2e  	jalr	0x2e8(ra) <ekernel+0xffcd215a>
80225e7a: 83 35 84 f7  	ld	a1, -0x88(s0)
80225e7e: 63 08 b5 00  	beq	a0, a1, 0x80225e8e <.Lpcrel_hi3+0x6a>
80225e82: 09 a0        	j	0x80225e84 <.Lpcrel_hi3+0x60>
;             crate::relax();
80225e84: 97 90 ff ff  	auipc	ra, 0xffff9
80225e88: e7 80 a0 3c  	jalr	0x3ca(ra) <ekernel+0xffcd224e>
80225e8c: d9 bf        	j	0x80225e62 <.Lpcrel_hi3+0x3e>
80225e8e: 83 35 84 f7  	ld	a1, -0x88(s0)
80225e92: 03 35 04 f7  	ld	a0, -0x90(s0)
;             next_serving: &self.next_serving,
80225e96: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80225e9a: 41 05        	addi	a0, a0, 0x10
80225e9c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
80225ea0: 23 38 c4 fa  	sd	a2, -0x50(s0)
80225ea4: 23 30 b4 fc  	sd	a1, -0x40(s0)
80225ea8: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
80225eac: 03 35 04 fc  	ld	a0, -0x40(s0)
80225eb0: 23 38 a4 f8  	sd	a0, -0x70(s0)
80225eb4: 03 35 84 fb  	ld	a0, -0x48(s0)
80225eb8: 23 34 a4 f8  	sd	a0, -0x78(s0)
80225ebc: 03 35 04 fb  	ld	a0, -0x50(s0)
80225ec0: 23 30 a4 f8  	sd	a0, -0x80(s0)
80225ec4: 13 05 04 f8  	addi	a0, s0, -0x80
80225ec8: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;     BLOCK_CACHE_MANAGER
80225ecc: 97 c0 ff ff  	auipc	ra, 0xffffc
80225ed0: e7 80 20 7c  	jalr	0x7c2(ra) <ekernel+0xffcd568e>
80225ed4: 83 35 84 f6  	ld	a1, -0x98(s0)
80225ed8: 03 36 04 f6  	ld	a2, -0xa0(s0)
80225edc: 83 36 84 f5  	ld	a3, -0xa8(s0)
80225ee0: 97 00 00 00  	auipc	ra, 0x0
80225ee4: e7 80 a0 b9  	jalr	-0x466(ra) <_ZN7easy_fs11block_cache17BlockCacheManager15get_block_cache17h0fc1286b780c6315E>
80225ee8: aa 85        	mv	a1, a0
80225eea: 03 35 84 f4  	ld	a0, -0xb8(s0)
80225eee: 23 38 b4 f4  	sd	a1, -0xb0(s0)
; }
80225ef2: 97 80 ff ff  	auipc	ra, 0xffff8
80225ef6: e7 80 80 bf  	jalr	-0x408(ra) <ekernel+0xffcd0aea>
80225efa: 03 35 04 f5  	ld	a0, -0xb0(s0)
80225efe: ea 70        	ld	ra, 0xb8(sp)
80225f00: 4a 74        	ld	s0, 0xb0(sp)
80225f02: 29 61        	addi	sp, sp, 0xc0
80225f04: 82 80        	ret

0000000080225f06 <_ZN7easy_fs11block_cache20block_cache_sync_all17h1082e59307eede6fE>:
; pub fn block_cache_sync_all() {
80225f06: 0d 71        	addi	sp, sp, -0x160
80225f08: 86 ee        	sd	ra, 0x158(sp)
80225f0a: a2 ea        	sd	s0, 0x150(sp)
80225f0c: 80 12        	addi	s0, sp, 0x160

0000000080225f0e <.Lpcrel_hi4>:
;     let manager = BLOCK_CACHE_MANAGER.lock();
80225f0e: 17 45 01 00  	auipc	a0, 0x14
80225f12: 13 05 25 dd  	addi	a0, a0, -0x22e
80225f16: 97 00 00 00  	auipc	ra, 0x0
80225f1a: e7 80 c0 1d  	jalr	0x1dc(ra) <_ZN85_$LT$easy_fs..block_cache..BLOCK_CACHE_MANAGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h5fc0ad87d2e02ea0E>
80225f1e: aa 85        	mv	a1, a0
80225f20: 23 30 b4 ec  	sd	a1, -0x140(s0)
80225f24: 23 34 a4 fa  	sd	a0, -0x58(s0)
80225f28: 23 3c a4 fa  	sd	a0, -0x48(s0)
80225f2c: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80225f2e: 23 0b b4 fa  	sb	a1, -0x4a(s0)
80225f32: 03 46 64 fb  	lbu	a2, -0x4a(s0)
80225f36: 85 45        	li	a1, 0x1
80225f38: 97 90 ff ff  	auipc	ra, 0xffff9
80225f3c: e7 80 e0 26  	jalr	0x26e(ra) <ekernel+0xffcd21a6>
80225f40: aa 85        	mv	a1, a0
80225f42: 23 34 b4 ec  	sd	a1, -0x138(s0)
80225f46: 23 30 a4 fc  	sd	a0, -0x40(s0)
80225f4a: 09 a0        	j	0x80225f4c <.Lpcrel_hi4+0x3e>
80225f4c: 03 35 04 ec  	ld	a0, -0x140(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80225f50: 21 05        	addi	a0, a0, 0x8
80225f52: 89 45        	li	a1, 0x2
80225f54: a3 0b b4 fa  	sb	a1, -0x49(s0)
80225f58: 83 45 74 fb  	lbu	a1, -0x49(s0)
80225f5c: 97 90 ff ff  	auipc	ra, 0xffff9
80225f60: e7 80 e0 1f  	jalr	0x1fe(ra) <ekernel+0xffcd215a>
80225f64: 83 35 84 ec  	ld	a1, -0x138(s0)
80225f68: 63 08 b5 00  	beq	a0, a1, 0x80225f78 <.Lpcrel_hi4+0x6a>
80225f6c: 09 a0        	j	0x80225f6e <.Lpcrel_hi4+0x60>
;             crate::relax();
80225f6e: 97 90 ff ff  	auipc	ra, 0xffff9
80225f72: e7 80 00 2e  	jalr	0x2e0(ra) <ekernel+0xffcd224e>
80225f76: d9 bf        	j	0x80225f4c <.Lpcrel_hi4+0x3e>
80225f78: 83 35 84 ec  	ld	a1, -0x138(s0)
80225f7c: 03 35 04 ec  	ld	a0, -0x140(s0)
;             next_serving: &self.next_serving,
80225f80: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80225f84: 41 05        	addi	a0, a0, 0x10
80225f86: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         TicketMutexGuard {
80225f8a: 23 38 c4 f8  	sd	a2, -0x70(s0)
80225f8e: 23 30 b4 fa  	sd	a1, -0x60(s0)
80225f92: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         MutexGuard {
80225f96: 03 35 04 fa  	ld	a0, -0x60(s0)
80225f9a: 23 30 a4 ee  	sd	a0, -0x120(s0)
80225f9e: 03 35 84 f9  	ld	a0, -0x68(s0)
80225fa2: 23 3c a4 ec  	sd	a0, -0x128(s0)
80225fa6: 03 35 04 f9  	ld	a0, -0x70(s0)
80225faa: 23 38 a4 ec  	sd	a0, -0x130(s0)
80225fae: 13 05 04 ed  	addi	a0, s0, -0x130
;     for (_, cache) in manager.queue.iter() {
80225fb2: 97 c0 ff ff  	auipc	ra, 0xffffc
80225fb6: e7 80 00 65  	jalr	0x650(ra) <ekernel+0xffcd5602>
80225fba: aa 85        	mv	a1, a0
80225fbc: 13 05 84 f0  	addi	a0, s0, -0xf8
80225fc0: 23 3c a4 ea  	sd	a0, -0x148(s0)
80225fc4: 97 10 00 00  	auipc	ra, 0x1
80225fc8: e7 80 a0 d1  	jalr	-0x2e6(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4iter17h83a295f1eaa66078E>
80225fcc: 83 35 84 eb  	ld	a1, -0x148(s0)
80225fd0: 13 05 84 ee  	addi	a0, s0, -0x118
80225fd4: 97 20 00 00  	auipc	ra, 0x2
80225fd8: e7 80 60 5f  	jalr	0x5f6(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hd2285c14727fc4b7E>
80225fdc: 03 35 04 f0  	ld	a0, -0x100(s0)
80225fe0: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80225fe4: 03 35 84 ef  	ld	a0, -0x108(s0)
80225fe8: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80225fec: 03 35 04 ef  	ld	a0, -0x110(s0)
80225ff0: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80225ff4: 03 35 84 ee  	ld	a0, -0x118(s0)
80225ff8: 23 34 a4 f2  	sd	a0, -0xd8(s0)
80225ffc: 09 a0        	j	0x80225ffe <.Lpcrel_hi4+0xf0>
80225ffe: 13 05 84 f2  	addi	a0, s0, -0xd8
;     for (_, cache) in manager.queue.iter() {
80226002: 97 20 00 00  	auipc	ra, 0x2
80226006: e7 80 20 3d  	jalr	0x3d2(ra) <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h50c23528c83e82efE>
8022600a: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022600e: 03 35 84 f4  	ld	a0, -0xb8(s0)
80226012: 01 ed        	bnez	a0, 0x8022602a <.Lpcrel_hi4+0x11c>
80226014: 09 a0        	j	0x80226016 <.Lpcrel_hi4+0x108>
80226016: 13 05 04 ed  	addi	a0, s0, -0x130
; }
8022601a: 97 80 ff ff  	auipc	ra, 0xffff8
8022601e: e7 80 00 ad  	jalr	-0x530(ra) <ekernel+0xffcd0aea>
80226022: f6 60        	ld	ra, 0x158(sp)
80226024: 56 64        	ld	s0, 0x150(sp)
80226026: 35 61        	addi	sp, sp, 0x160
80226028: 82 80        	ret
;     for (_, cache) in manager.queue.iter() {
8022602a: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022602e: 21 05        	addi	a0, a0, 0x8
80226030: 23 34 a4 f6  	sd	a0, -0x98(s0)
;         cache.lock().sync();
80226034: 97 70 ff ff  	auipc	ra, 0xffff7
80226038: e7 80 00 15  	jalr	0x150(ra) <ekernel+0xffcd0184>
8022603c: aa 85        	mv	a1, a0
8022603e: 23 34 b4 ea  	sd	a1, -0x158(s0)
80226042: 23 34 a4 f8  	sd	a0, -0x78(s0)
80226046: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022604a: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8022604c: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80226050: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80226054: 85 45        	li	a1, 0x1
80226056: 97 90 ff ff  	auipc	ra, 0xffff9
8022605a: e7 80 00 15  	jalr	0x150(ra) <ekernel+0xffcd21a6>
8022605e: aa 85        	mv	a1, a0
80226060: 23 38 b4 ea  	sd	a1, -0x150(s0)
80226064: 23 30 a4 fe  	sd	a0, -0x20(s0)
80226068: 09 a0        	j	0x8022606a <.Lpcrel_hi4+0x15c>
8022606a: 03 35 84 ea  	ld	a0, -0x158(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8022606e: 21 05        	addi	a0, a0, 0x8
80226070: 89 45        	li	a1, 0x2
80226072: a3 0b b4 fc  	sb	a1, -0x29(s0)
80226076: 83 45 74 fd  	lbu	a1, -0x29(s0)
8022607a: 97 90 ff ff  	auipc	ra, 0xffff9
8022607e: e7 80 00 0e  	jalr	0xe0(ra) <ekernel+0xffcd215a>
80226082: 83 35 04 eb  	ld	a1, -0x150(s0)
80226086: 63 08 b5 00  	beq	a0, a1, 0x80226096 <.Lpcrel_hi4+0x188>
8022608a: 09 a0        	j	0x8022608c <.Lpcrel_hi4+0x17e>
;             crate::relax();
8022608c: 97 90 ff ff  	auipc	ra, 0xffff9
80226090: e7 80 20 1c  	jalr	0x1c2(ra) <ekernel+0xffcd224e>
80226094: d9 bf        	j	0x8022606a <.Lpcrel_hi4+0x15c>
80226096: 83 35 04 eb  	ld	a1, -0x150(s0)
8022609a: 03 35 84 ea  	ld	a0, -0x158(s0)
;             next_serving: &self.next_serving,
8022609e: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
802260a2: 41 05        	addi	a0, a0, 0x10
802260a4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
802260a8: 23 38 c4 f6  	sd	a2, -0x90(s0)
802260ac: 23 30 b4 f8  	sd	a1, -0x80(s0)
802260b0: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         MutexGuard {
802260b4: 03 35 04 f8  	ld	a0, -0x80(s0)
802260b8: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802260bc: 03 35 84 f7  	ld	a0, -0x88(s0)
802260c0: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802260c4: 03 35 04 f7  	ld	a0, -0x90(s0)
802260c8: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802260cc: 13 05 04 f5  	addi	a0, s0, -0xb0
802260d0: 23 30 a4 ea  	sd	a0, -0x160(s0)
;         cache.lock().sync();
802260d4: 97 c0 ff ff  	auipc	ra, 0xffffc
802260d8: e7 80 e0 59  	jalr	0x59e(ra) <ekernel+0xffcd5672>
802260dc: 97 00 00 00  	auipc	ra, 0x0
802260e0: e7 80 80 91  	jalr	-0x6e8(ra) <_ZN7easy_fs11block_cache10BlockCache4sync17hebb1d09628b89c36E>
802260e4: 03 35 04 ea  	ld	a0, -0x160(s0)
802260e8: 97 80 ff ff  	auipc	ra, 0xffff8
802260ec: e7 80 e0 9a  	jalr	-0x652(ra) <ekernel+0xffcd0a96>
802260f0: 39 b7        	j	0x80225ffe <.Lpcrel_hi4+0xf0>

00000000802260f2 <_ZN85_$LT$easy_fs..block_cache..BLOCK_CACHE_MANAGER$u20$as$u20$core..ops..deref..Deref$GT$5deref17h5fc0ad87d2e02ea0E>:
;             fn deref(&self) -> &$T {
802260f2: 01 11        	addi	sp, sp, -0x20
802260f4: 06 ec        	sd	ra, 0x18(sp)
802260f6: 22 e8        	sd	s0, 0x10(sp)
802260f8: 00 10        	addi	s0, sp, 0x20
802260fa: 23 30 a4 fe  	sd	a0, -0x20(s0)

00000000802260fe <.Lpcrel_hi5>:
802260fe: 17 65 32 00  	auipc	a0, 0x326
80226102: 13 05 a5 29  	addi	a0, a0, 0x29a
80226106: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0.call_once(builder)
8022610a: 97 00 00 00  	auipc	ra, 0x0
8022610e: e7 80 00 01  	jalr	0x10(ra) <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E>
80226112: e2 60        	ld	ra, 0x18(sp)
80226114: 42 64        	ld	s0, 0x10(sp)
;             }
80226116: 05 61        	addi	sp, sp, 0x20
80226118: 82 80        	ret

000000008022611a <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E>:
;     pub fn call_once<'a, F>(&'a self, builder: F) -> &'a T
8022611a: 15 71        	addi	sp, sp, -0xe0
8022611c: 86 ed        	sd	ra, 0xd8(sp)
8022611e: a2 e9        	sd	s0, 0xd0(sp)
80226120: 80 11        	addi	s0, sp, 0xe0
80226122: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80226126: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022612a: 81 45        	li	a1, 0x0
;         loop {
8022612c: a3 0b b4 fc  	sb	a1, -0x29(s0)
80226130: 85 45        	li	a1, 0x1
80226132: a3 0b b4 fc  	sb	a1, -0x29(s0)
80226136: 91 45        	li	a1, 0x4
;         let mut status = self.state.load(Ordering::SeqCst);
80226138: 23 0b b4 f4  	sb	a1, -0xaa(s0)
8022613c: 83 45 64 f5  	lbu	a1, -0xaa(s0)
80226140: 97 90 ff ff  	auipc	ra, 0xffff9
80226144: e7 80 a0 01  	jalr	0x1a(ra) <ekernel+0xffcd215a>
80226148: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;         if status == INCOMPLETE {
8022614c: 03 35 84 f4  	ld	a0, -0xb8(s0)
80226150: 1d c9        	beqz	a0, 0x80226186 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E+0x6c>
80226152: 09 a0        	j	0x80226154 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E+0x3a>
;             match status {
80226154: 03 35 84 f4  	ld	a0, -0xb8(s0)
80226158: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8022615c: 63 0d 05 12  	beqz	a0, 0x80226296 <.Lpcrel_hi0>
80226160: 09 a0        	j	0x80226162 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E+0x48>
80226162: 03 35 04 f3  	ld	a0, -0xd0(s0)
80226166: 85 45        	li	a1, 0x1
;             match status {
80226168: 63 05 b5 14  	beq	a0, a1, 0x802262b2 <.Lpcrel_hi1+0x14>
8022616c: 09 a0        	j	0x8022616e <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E+0x54>
8022616e: 03 35 04 f3  	ld	a0, -0xd0(s0)
80226172: 89 45        	li	a1, 0x2
;             match status {
80226174: 63 0e b5 16  	beq	a0, a1, 0x802262f0 <.Lpcrel_hi3+0x12>
80226178: 09 a0        	j	0x8022617a <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E+0x60>
8022617a: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022617e: 8d 45        	li	a1, 0x3
;             match status {
80226180: 63 0b b5 14  	beq	a0, a1, 0x802262d6 <.Lpcrel_hi2>
80226184: 29 a2        	j	0x8022628e <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E+0x174>
80226186: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022618a: 91 45        	li	a1, 0x4
;                                                  Ordering::SeqCst);
8022618c: a3 0b b4 f4  	sb	a1, -0xa9(s0)
;             status = self.state.compare_and_swap(INCOMPLETE,
80226190: 83 46 74 f5  	lbu	a3, -0xa9(s0)
80226194: 81 45        	li	a1, 0x0
80226196: 05 46        	li	a2, 0x1
80226198: 97 90 ff ff  	auipc	ra, 0xffff9
8022619c: e7 80 c0 ed  	jalr	-0x124(ra) <ekernel+0xffcd2074>
802261a0: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;             if status == INCOMPLETE { // We init
802261a4: 03 35 84 f4  	ld	a0, -0xb8(s0)
802261a8: 55 f5        	bnez	a0, 0x80226154 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E+0x3a>
802261aa: 09 a0        	j	0x802261ac <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E+0x92>
802261ac: 03 35 84 f3  	ld	a0, -0xc8(s0)
;                 let mut finish = Finish { state: &self.state, panicked: true };
802261b0: 23 3c a4 f4  	sd	a0, -0xa8(s0)
802261b4: 05 45        	li	a0, 0x1
802261b6: 23 30 a4 f2  	sd	a0, -0xe0(s0)
802261ba: 23 00 a4 f6  	sb	a0, -0xa0(s0)
802261be: 01 45        	li	a0, 0x0
802261c0: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;                 unsafe { *self.data.get() = Some(builder()) };
802261c4: a3 0b a4 fc  	sb	a0, -0x29(s0)
802261c8: 13 05 04 fa  	addi	a0, s0, -0x60
802261cc: 97 70 ff ff  	auipc	ra, 0xffff7
802261d0: e7 80 80 42  	jalr	0x428(ra) <ekernel+0xffcd05f4>
802261d4: 83 35 04 f2  	ld	a1, -0xe0(s0)
802261d8: 03 35 84 f3  	ld	a0, -0xc8(s0)
802261dc: 03 36 84 fc  	ld	a2, -0x38(s0)
802261e0: 23 3c c4 f8  	sd	a2, -0x68(s0)
802261e4: 03 36 04 fc  	ld	a2, -0x40(s0)
802261e8: 23 38 c4 f8  	sd	a2, -0x70(s0)
802261ec: 03 36 84 fb  	ld	a2, -0x48(s0)
802261f0: 23 34 c4 f8  	sd	a2, -0x78(s0)
802261f4: 03 36 04 fb  	ld	a2, -0x50(s0)
802261f8: 23 30 c4 f8  	sd	a2, -0x80(s0)
802261fc: 03 36 84 fa  	ld	a2, -0x58(s0)
80226200: 23 3c c4 f6  	sd	a2, -0x88(s0)
80226204: 03 36 04 fa  	ld	a2, -0x60(s0)
80226208: 23 38 c4 f6  	sd	a2, -0x90(s0)
8022620c: 23 34 b4 f6  	sd	a1, -0x98(s0)
80226210: 21 05        	addi	a0, a0, 0x8
80226212: 23 34 a4 fe  	sd	a0, -0x18(s0)
80226216: 97 70 ff ff  	auipc	ra, 0xffff7
8022621a: e7 80 c0 56  	jalr	0x56c(ra) <ekernel+0xffcd0782>
8022621e: 83 35 84 f2  	ld	a1, -0xd8(s0)
80226222: 03 35 84 f3  	ld	a0, -0xc8(s0)
80226226: 03 36 84 f9  	ld	a2, -0x68(s0)
8022622a: 10 fd        	sd	a2, 0x38(a0)
8022622c: 03 36 04 f9  	ld	a2, -0x70(s0)
80226230: 10 f9        	sd	a2, 0x30(a0)
80226232: 03 36 84 f8  	ld	a2, -0x78(s0)
80226236: 10 f5        	sd	a2, 0x28(a0)
80226238: 03 36 04 f8  	ld	a2, -0x80(s0)
8022623c: 10 f1        	sd	a2, 0x20(a0)
8022623e: 03 36 84 f7  	ld	a2, -0x88(s0)
80226242: 10 ed        	sd	a2, 0x18(a0)
80226244: 03 36 04 f7  	ld	a2, -0x90(s0)
80226248: 10 e9        	sd	a2, 0x10(a0)
8022624a: 03 36 84 f6  	ld	a2, -0x98(s0)
8022624e: 10 e5        	sd	a2, 0x8(a0)
;                 finish.panicked = false;
80226250: 23 00 b4 f6  	sb	a1, -0xa0(s0)
80226254: 89 45        	li	a1, 0x2
;                 status = COMPLETE;
80226256: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;                 self.state.store(status, Ordering::SeqCst);
8022625a: 83 35 84 f4  	ld	a1, -0xb8(s0)
8022625e: 11 46        	li	a2, 0x4
80226260: a3 0a c4 fc  	sb	a2, -0x2b(s0)
80226264: 03 46 54 fd  	lbu	a2, -0x2b(s0)
80226268: 97 90 ff ff  	auipc	ra, 0xffff9
8022626c: e7 80 60 f1  	jalr	-0xea(ra) <ekernel+0xffcd217e>
80226270: 03 35 84 f3  	ld	a0, -0xc8(s0)
;                 return self.force_get();
80226274: 97 00 00 00  	auipc	ra, 0x0
80226278: e7 80 60 0a  	jalr	0xa6(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17h55cedd678317d0d6E>
8022627c: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80226280: 13 05 84 f5  	addi	a0, s0, -0xa8
;             }
80226284: 97 70 ff ff  	auipc	ra, 0xffff7
80226288: e7 80 e0 6a  	jalr	0x6ae(ra) <ekernel+0xffcd0932>
8022628c: 9d a8        	j	0x80226302 <.Lpcrel_hi3+0x24>
;                 _ => unsafe { unreachable() },
8022628e: 97 d0 ff ff  	auipc	ra, 0xffffd
80226292: e7 80 e0 ff  	jalr	-0x2(ra) <ekernel+0xffcd628c>

0000000080226296 <.Lpcrel_hi0>:
;                 INCOMPLETE => unreachable!(),
80226296: 17 45 01 00  	auipc	a0, 0x14
8022629a: 13 05 a5 a4  	addi	a0, a0, -0x5b6

000000008022629e <.Lpcrel_hi1>:
8022629e: 97 45 01 00  	auipc	a1, 0x14
802262a2: 13 86 25 ac  	addi	a2, a1, -0x53e
802262a6: 93 05 80 02  	li	a1, 0x28
802262aa: 97 a0 00 00  	auipc	ra, 0xa
802262ae: e7 80 e0 f6  	jalr	-0x92(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;                     cpu_relax();
802262b2: 97 90 ff ff  	auipc	ra, 0xffff9
802262b6: e7 80 c0 f9  	jalr	-0x64(ra) <ekernel+0xffcd224e>
802262ba: 03 35 84 f3  	ld	a0, -0xc8(s0)
802262be: 91 45        	li	a1, 0x4
;                     status = self.state.load(Ordering::SeqCst)
802262c0: 23 0b b4 fc  	sb	a1, -0x2a(s0)
802262c4: 83 45 64 fd  	lbu	a1, -0x2a(s0)
802262c8: 97 90 ff ff  	auipc	ra, 0xffff9
802262cc: e7 80 20 e9  	jalr	-0x16e(ra) <ekernel+0xffcd215a>
802262d0: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802262d4: 41 b5        	j	0x80226154 <_ZN4spin4once13Once$LT$T$GT$9call_once17h7c1f17f4f3f1a605E+0x3a>

00000000802262d6 <.Lpcrel_hi2>:
;                 PANICKED => panic!("Once has panicked"),
802262d6: 17 45 01 00  	auipc	a0, 0x14
802262da: 13 05 25 aa  	addi	a0, a0, -0x55e

00000000802262de <.Lpcrel_hi3>:
802262de: 97 45 01 00  	auipc	a1, 0x14
802262e2: 13 86 25 ab  	addi	a2, a1, -0x54e
802262e6: c5 45        	li	a1, 0x11
802262e8: 97 a0 00 00  	auipc	ra, 0xa
802262ec: e7 80 00 f3  	jalr	-0xd0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802262f0: 03 35 84 f3  	ld	a0, -0xc8(s0)
;                 COMPLETE => return self.force_get(),
802262f4: 97 00 00 00  	auipc	ra, 0x0
802262f8: e7 80 60 02  	jalr	0x26(ra) <_ZN4spin4once13Once$LT$T$GT$9force_get17h55cedd678317d0d6E>
802262fc: 23 30 a4 f4  	sd	a0, -0xc0(s0)
; //!An easy file system isolated from the kernel
80226300: 09 a0        	j	0x80226302 <.Lpcrel_hi3+0x24>
;     }
80226302: 03 45 74 fd  	lbu	a0, -0x29(s0)
80226306: 05 89        	andi	a0, a0, 0x1
80226308: 01 e9        	bnez	a0, 0x80226318 <.Lpcrel_hi3+0x3a>
8022630a: 09 a0        	j	0x8022630c <.Lpcrel_hi3+0x2e>
8022630c: 03 35 04 f4  	ld	a0, -0xc0(s0)
80226310: ee 60        	ld	ra, 0xd8(sp)
80226312: 4e 64        	ld	s0, 0xd0(sp)
80226314: 2d 61        	addi	sp, sp, 0xe0
80226316: 82 80        	ret
80226318: d5 bf        	j	0x8022630c <.Lpcrel_hi3+0x2e>

000000008022631a <_ZN4spin4once13Once$LT$T$GT$9force_get17h55cedd678317d0d6E>:
;     fn force_get<'a>(&'a self) -> &'a T {
8022631a: 79 71        	addi	sp, sp, -0x30
8022631c: 06 f4        	sd	ra, 0x28(sp)
8022631e: 22 f0        	sd	s0, 0x20(sp)
80226320: 00 18        	addi	s0, sp, 0x30
80226322: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         match unsafe { &*self.data.get() }.as_ref() {
80226326: 21 05        	addi	a0, a0, 0x8
80226328: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022632c: 97 00 00 00  	auipc	ra, 0x0
80226330: e7 80 a0 13  	jalr	0x13a(ra) <_ZN4core6option15Option$LT$T$GT$6as_ref17hd900a590e6d6deb8E>
80226334: 23 38 a4 fc  	sd	a0, -0x30(s0)
80226338: 03 35 04 fd  	ld	a0, -0x30(s0)
8022633c: 11 e5        	bnez	a0, 0x80226348 <_ZN4spin4once13Once$LT$T$GT$9force_get17h55cedd678317d0d6E+0x2e>
8022633e: 09 a0        	j	0x80226340 <_ZN4spin4once13Once$LT$T$GT$9force_get17h55cedd678317d0d6E+0x26>
;             None    => unsafe { unreachable() },
80226340: 97 d0 ff ff  	auipc	ra, 0xffffd
80226344: e7 80 c0 f4  	jalr	-0xb4(ra) <ekernel+0xffcd628c>
;             Some(p) => p,
80226348: 03 35 04 fd  	ld	a0, -0x30(s0)
8022634c: 23 30 a4 fe  	sd	a0, -0x20(s0)
80226350: a2 70        	ld	ra, 0x28(sp)
80226352: 02 74        	ld	s0, 0x20(sp)
;     }
80226354: 45 61        	addi	sp, sp, 0x30
80226356: 82 80        	ret

0000000080226358 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2fcec7d430671a79E>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
80226358: 01 11        	addi	sp, sp, -0x20
8022635a: 06 ec        	sd	ra, 0x18(sp)
8022635c: 22 e8        	sd	s0, 0x10(sp)
8022635e: 00 10        	addi	s0, sp, 0x20
80226360: 23 30 a4 fe  	sd	a0, -0x20(s0)
80226364: 23 34 b4 fe  	sd	a1, -0x18(s0)
80226368: 08 61        	ld	a0, 0x0(a0)
8022636a: 97 00 00 00  	auipc	ra, 0x0
8022636e: e7 80 60 20  	jalr	0x206(ra) <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ec957fbf5216648E>
80226372: e2 60        	ld	ra, 0x18(sp)
80226374: 42 64        	ld	s0, 0x10(sp)
80226376: 05 61        	addi	sp, sp, 0x20
80226378: 82 80        	ret

000000008022637a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h9831347e5a38eed2E>:
8022637a: 01 11        	addi	sp, sp, -0x20
8022637c: 06 ec        	sd	ra, 0x18(sp)
8022637e: 22 e8        	sd	s0, 0x10(sp)
80226380: 00 10        	addi	s0, sp, 0x20
80226382: 23 30 a4 fe  	sd	a0, -0x20(s0)
80226386: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022638a: 08 61        	ld	a0, 0x0(a0)
8022638c: 97 00 00 00  	auipc	ra, 0x0
80226390: e7 80 c0 25  	jalr	0x25c(ra) <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hed37dcfd1450025fE>
80226394: e2 60        	ld	ra, 0x18(sp)
80226396: 42 64        	ld	s0, 0x10(sp)
80226398: 05 61        	addi	sp, sp, 0x20
8022639a: 82 80        	ret

000000008022639c <_ZN4core6option15Option$LT$T$GT$3map17h0be513986d494ce7E>:
;     pub fn map<U, F>(self, f: F) -> Option<U>
8022639c: 5d 71        	addi	sp, sp, -0x50
8022639e: 86 e4        	sd	ra, 0x48(sp)
802263a0: a2 e0        	sd	s0, 0x40(sp)
802263a2: 80 08        	addi	s0, sp, 0x50
802263a4: 23 38 d4 fa  	sd	a3, -0x50(s0)
802263a8: 23 3c c4 fa  	sd	a2, -0x48(s0)
802263ac: 23 20 a4 fc  	sw	a0, -0x40(s0)
802263b0: 23 22 b4 fc  	sw	a1, -0x3c(s0)
802263b4: 23 3c c4 fc  	sd	a2, -0x28(s0)
802263b8: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         match self {
802263bc: 03 25 04 fc  	lw	a0, -0x40(s0)
802263c0: 11 e5        	bnez	a0, 0x802263cc <_ZN4core6option15Option$LT$T$GT$3map17h0be513986d494ce7E+0x30>
802263c2: 09 a0        	j	0x802263c4 <_ZN4core6option15Option$LT$T$GT$3map17h0be513986d494ce7E+0x28>
802263c4: 01 45        	li	a0, 0x0
;             None => None,
802263c6: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     }
802263ca: 25 a0        	j	0x802263f2 <_ZN4core6option15Option$LT$T$GT$3map17h0be513986d494ce7E+0x56>
802263cc: 83 35 04 fb  	ld	a1, -0x50(s0)
802263d0: 03 35 84 fb  	ld	a0, -0x48(s0)
;             Some(x) => Some(f(x)),
802263d4: 03 26 44 fc  	lw	a2, -0x3c(s0)
802263d8: 23 26 c4 fe  	sw	a2, -0x14(s0)
802263dc: 23 2a c4 fc  	sw	a2, -0x2c(s0)
802263e0: 03 26 44 fd  	lw	a2, -0x2c(s0)
802263e4: 97 80 ff ff  	auipc	ra, 0xffff8
802263e8: e7 80 20 6a  	jalr	0x6a2(ra) <ekernel+0xffcd1a86>
802263ec: 23 34 a4 fc  	sd	a0, -0x38(s0)
802263f0: 09 a0        	j	0x802263f2 <_ZN4core6option15Option$LT$T$GT$3map17h0be513986d494ce7E+0x56>
;     }
802263f2: 03 35 84 fc  	ld	a0, -0x38(s0)
802263f6: a6 60        	ld	ra, 0x48(sp)
802263f8: 06 64        	ld	s0, 0x40(sp)
802263fa: 61 61        	addi	sp, sp, 0x50
802263fc: 82 80        	ret

00000000802263fe <_ZN4core6option15Option$LT$T$GT$3map17h5500e74cc61da3b4E>:
;     pub fn map<U, F>(self, f: F) -> Option<U>
802263fe: 5d 71        	addi	sp, sp, -0x50
80226400: 86 e4        	sd	ra, 0x48(sp)
80226402: a2 e0        	sd	s0, 0x40(sp)
80226404: 80 08        	addi	s0, sp, 0x50
80226406: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022640a: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022640e: 23 30 c4 fc  	sd	a2, -0x40(s0)
;         match self {
80226412: 03 35 04 fc  	ld	a0, -0x40(s0)
80226416: 19 e5        	bnez	a0, 0x80226424 <_ZN4core6option15Option$LT$T$GT$3map17h5500e74cc61da3b4E+0x26>
80226418: 09 a0        	j	0x8022641a <_ZN4core6option15Option$LT$T$GT$3map17h5500e74cc61da3b4E+0x1c>
8022641a: 83 35 04 fb  	ld	a1, -0x50(s0)
8022641e: 01 45        	li	a0, 0x0
;             None => None,
80226420: 88 e1        	sd	a0, 0x0(a1)
;     }
80226422: 35 a8        	j	0x8022645e <_ZN4core6option15Option$LT$T$GT$3map17h5500e74cc61da3b4E+0x60>
;             Some(x) => Some(f(x)),
80226424: 83 35 84 fb  	ld	a1, -0x48(s0)
80226428: 03 35 04 fc  	ld	a0, -0x40(s0)
8022642c: 23 30 b4 fe  	sd	a1, -0x20(s0)
80226430: 23 34 a4 fe  	sd	a0, -0x18(s0)
80226434: 23 34 b4 fc  	sd	a1, -0x38(s0)
80226438: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022643c: 03 35 84 fc  	ld	a0, -0x38(s0)
80226440: 83 35 04 fd  	ld	a1, -0x30(s0)
80226444: 97 c0 ff ff  	auipc	ra, 0xffffc
80226448: e7 80 20 d3  	jalr	-0x2ce(ra) <ekernel+0xffcd5176>
8022644c: 2a 86        	mv	a2, a0
8022644e: 2e 85        	mv	a0, a1
80226450: 83 35 04 fb  	ld	a1, -0x50(s0)
80226454: 90 e5        	sd	a2, 0x8(a1)
80226456: 88 e9        	sd	a0, 0x10(a1)
80226458: 05 45        	li	a0, 0x1
8022645a: 88 e1        	sd	a0, 0x0(a1)
8022645c: 09 a0        	j	0x8022645e <_ZN4core6option15Option$LT$T$GT$3map17h5500e74cc61da3b4E+0x60>
8022645e: a6 60        	ld	ra, 0x48(sp)
80226460: 06 64        	ld	s0, 0x40(sp)
;     }
80226462: 61 61        	addi	sp, sp, 0x50
80226464: 82 80        	ret

0000000080226466 <_ZN4core6option15Option$LT$T$GT$6as_ref17hd900a590e6d6deb8E>:
;     pub const fn as_ref(&self) -> Option<&T> {
80226466: 79 71        	addi	sp, sp, -0x30
80226468: 06 f4        	sd	ra, 0x28(sp)
8022646a: 22 f0        	sd	s0, 0x20(sp)
8022646c: 00 18        	addi	s0, sp, 0x30
8022646e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80226472: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match *self {
80226476: 08 61        	ld	a0, 0x0(a0)
80226478: 11 e5        	bnez	a0, 0x80226484 <_ZN4core6option15Option$LT$T$GT$6as_ref17hd900a590e6d6deb8E+0x1e>
8022647a: 09 a0        	j	0x8022647c <_ZN4core6option15Option$LT$T$GT$6as_ref17hd900a590e6d6deb8E+0x16>
8022647c: 01 45        	li	a0, 0x0
;             None => None,
8022647e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80226482: 09 a8        	j	0x80226494 <_ZN4core6option15Option$LT$T$GT$6as_ref17hd900a590e6d6deb8E+0x2e>
80226484: 03 35 04 fd  	ld	a0, -0x30(s0)
;             Some(ref x) => Some(x),
80226488: 21 05        	addi	a0, a0, 0x8
8022648a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022648e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80226492: 09 a0        	j	0x80226494 <_ZN4core6option15Option$LT$T$GT$6as_ref17hd900a590e6d6deb8E+0x2e>
;     }
80226494: 03 35 84 fd  	ld	a0, -0x28(s0)
80226498: a2 70        	ld	ra, 0x28(sp)
8022649a: 02 74        	ld	s0, 0x20(sp)
8022649c: 45 61        	addi	sp, sp, 0x30
8022649e: 82 80        	ret

00000000802264a0 <_ZN4core6option15Option$LT$T$GT$7is_some17h0c4c7c0629e2735fE>:
;     pub const fn is_some(&self) -> bool {
802264a0: 01 11        	addi	sp, sp, -0x20
802264a2: 06 ec        	sd	ra, 0x18(sp)
802264a4: 22 e8        	sd	s0, 0x10(sp)
802264a6: 00 10        	addi	s0, sp, 0x20
802264a8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         matches!(*self, Some(_))
802264ac: 08 41        	lw	a0, 0x0(a0)
802264ae: 85 45        	li	a1, 0x1
802264b0: 63 17 b5 00  	bne	a0, a1, 0x802264be <_ZN4core6option15Option$LT$T$GT$7is_some17h0c4c7c0629e2735fE+0x1e>
802264b4: 09 a0        	j	0x802264b6 <_ZN4core6option15Option$LT$T$GT$7is_some17h0c4c7c0629e2735fE+0x16>
802264b6: 05 45        	li	a0, 0x1
;         matches!(*self, Some(_))
802264b8: a3 03 a4 fe  	sb	a0, -0x19(s0)
802264bc: 29 a0        	j	0x802264c6 <_ZN4core6option15Option$LT$T$GT$7is_some17h0c4c7c0629e2735fE+0x26>
802264be: 01 45        	li	a0, 0x0
;         matches!(*self, Some(_))
802264c0: a3 03 a4 fe  	sb	a0, -0x19(s0)
802264c4: 09 a0        	j	0x802264c6 <_ZN4core6option15Option$LT$T$GT$7is_some17h0c4c7c0629e2735fE+0x26>
;     }
802264c6: 03 45 74 fe  	lbu	a0, -0x19(s0)
802264ca: e2 60        	ld	ra, 0x18(sp)
802264cc: 42 64        	ld	s0, 0x10(sp)
802264ce: 05 61        	addi	sp, sp, 0x20
802264d0: 82 80        	ret

00000000802264d2 <_ZN4core6option15Option$LT$T$GT$7is_some17h5eaaf2e8c401c13fE>:
;     pub const fn is_some(&self) -> bool {
802264d2: 01 11        	addi	sp, sp, -0x20
802264d4: 06 ec        	sd	ra, 0x18(sp)
802264d6: 22 e8        	sd	s0, 0x10(sp)
802264d8: 00 10        	addi	s0, sp, 0x20
802264da: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         matches!(*self, Some(_))
802264de: 08 61        	ld	a0, 0x0(a0)
802264e0: 11 c5        	beqz	a0, 0x802264ec <_ZN4core6option15Option$LT$T$GT$7is_some17h5eaaf2e8c401c13fE+0x1a>
802264e2: 09 a0        	j	0x802264e4 <_ZN4core6option15Option$LT$T$GT$7is_some17h5eaaf2e8c401c13fE+0x12>
802264e4: 05 45        	li	a0, 0x1
;         matches!(*self, Some(_))
802264e6: a3 03 a4 fe  	sb	a0, -0x19(s0)
802264ea: 29 a0        	j	0x802264f4 <_ZN4core6option15Option$LT$T$GT$7is_some17h5eaaf2e8c401c13fE+0x22>
802264ec: 01 45        	li	a0, 0x0
;         matches!(*self, Some(_))
802264ee: a3 03 a4 fe  	sb	a0, -0x19(s0)
802264f2: 09 a0        	j	0x802264f4 <_ZN4core6option15Option$LT$T$GT$7is_some17h5eaaf2e8c401c13fE+0x22>
;     }
802264f4: 03 45 74 fe  	lbu	a0, -0x19(s0)
802264f8: e2 60        	ld	ra, 0x18(sp)
802264fa: 42 64        	ld	s0, 0x10(sp)
802264fc: 05 61        	addi	sp, sp, 0x20
802264fe: 82 80        	ret

0000000080226500 <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE>:
;     default fn eq(l: &Option<T>, r: &Option<T>) -> bool {
80226500: 5d 71        	addi	sp, sp, -0x50
80226502: 86 e4        	sd	ra, 0x48(sp)
80226504: a2 e0        	sd	s0, 0x40(sp)
80226506: 80 08        	addi	s0, sp, 0x50
80226508: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022650c: 23 30 a4 fc  	sd	a0, -0x40(s0)
80226510: 23 38 a4 fc  	sd	a0, -0x30(s0)
80226514: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         match (l, r) {
80226518: 08 61        	ld	a0, 0x0(a0)
8022651a: 19 e5        	bnez	a0, 0x80226528 <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE+0x28>
8022651c: 09 a0        	j	0x8022651e <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE+0x1e>
8022651e: 03 35 84 fb  	ld	a0, -0x48(s0)
;         match (l, r) {
80226522: 08 61        	ld	a0, 0x0(a0)
80226524: 19 c5        	beqz	a0, 0x80226532 <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE+0x32>
80226526: 11 a8        	j	0x8022653a <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE+0x3a>
80226528: 03 35 84 fb  	ld	a0, -0x48(s0)
;         match (l, r) {
8022652c: 08 61        	ld	a0, 0x0(a0)
8022652e: 05 e1        	bnez	a0, 0x8022654e <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE+0x4e>
80226530: 29 a0        	j	0x8022653a <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE+0x3a>
80226532: 05 45        	li	a0, 0x1
;             (None, None) => true,
80226534: a3 07 a4 fc  	sb	a0, -0x31(s0)
80226538: 29 a0        	j	0x80226542 <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE+0x42>
8022653a: 01 45        	li	a0, 0x0
;             _ => false,
8022653c: a3 07 a4 fc  	sb	a0, -0x31(s0)
80226540: 09 a0        	j	0x80226542 <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE+0x42>
;     }
80226542: 03 45 f4 fc  	lbu	a0, -0x31(s0)
80226546: a6 60        	ld	ra, 0x48(sp)
80226548: 06 64        	ld	s0, 0x40(sp)
8022654a: 61 61        	addi	sp, sp, 0x50
8022654c: 82 80        	ret
8022654e: 83 35 84 fb  	ld	a1, -0x48(s0)
80226552: 03 35 04 fc  	ld	a0, -0x40(s0)
;             (Some(l), Some(r)) => *l == *r,
80226556: 21 05        	addi	a0, a0, 0x8
80226558: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022655c: a1 05        	addi	a1, a1, 0x8
8022655e: 23 34 b4 fe  	sd	a1, -0x18(s0)
80226562: 97 30 00 00  	auipc	ra, 0x3
80226566: e7 80 40 80  	jalr	-0x7fc(ra) <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17h8207d6adfb40cdb2E>
8022656a: a3 07 a4 fc  	sb	a0, -0x31(s0)
8022656e: d1 bf        	j	0x80226542 <_ZN55_$LT$T$u20$as$u20$core..option..SpecOptionPartialEq$GT$2eq17h7c25677f6282b39bE+0x42>

0000000080226570 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ec957fbf5216648E>:
; #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]
80226570: 39 71        	addi	sp, sp, -0x40
80226572: 06 fc        	sd	ra, 0x38(sp)
80226574: 22 f8        	sd	s0, 0x30(sp)
80226576: 80 00        	addi	s0, sp, 0x40
80226578: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022657c: 23 34 a4 fc  	sd	a0, -0x38(s0)
80226580: 23 30 a4 fe  	sd	a0, -0x20(s0)
80226584: 23 34 b4 fe  	sd	a1, -0x18(s0)
80226588: 08 61        	ld	a0, 0x0(a0)
8022658a: 05 e1        	bnez	a0, 0x802265aa <.Lpcrel_hi0+0x18>
8022658c: 09 a0        	j	0x8022658e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ec957fbf5216648E+0x1e>
8022658e: 03 35 04 fc  	ld	a0, -0x40(s0)

0000000080226592 <.Lpcrel_hi0>:
; #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]
80226592: 97 d5 00 00  	auipc	a1, 0xd
80226596: 93 85 65 21  	addi	a1, a1, 0x216
8022659a: 11 46        	li	a2, 0x4
8022659c: 97 90 00 00  	auipc	ra, 0x9
802265a0: e7 80 a0 49  	jalr	0x49a(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
802265a4: a3 0b a4 fc  	sb	a0, -0x29(s0)
802265a8: 15 a8        	j	0x802265dc <.Lpcrel_hi2+0x1c>
802265aa: 03 35 04 fc  	ld	a0, -0x40(s0)
802265ae: 83 35 84 fc  	ld	a1, -0x38(s0)
;     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
802265b2: a1 05        	addi	a1, a1, 0x8
802265b4: 23 3c b4 fc  	sd	a1, -0x28(s0)

00000000802265b8 <.Lpcrel_hi1>:
; #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]
802265b8: 97 d5 00 00  	auipc	a1, 0xd
802265bc: 93 85 85 1e  	addi	a1, a1, 0x1e8

00000000802265c0 <.Lpcrel_hi2>:
802265c0: 17 36 01 00  	auipc	a2, 0x13
802265c4: 13 07 86 7e  	addi	a4, a2, 0x7e8
802265c8: 11 46        	li	a2, 0x4
802265ca: 93 06 84 fd  	addi	a3, s0, -0x28
802265ce: 97 90 00 00  	auipc	ra, 0x9
802265d2: e7 80 60 5f  	jalr	0x5f6(ra) <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>
802265d6: a3 0b a4 fc  	sb	a0, -0x29(s0)
802265da: 09 a0        	j	0x802265dc <.Lpcrel_hi2+0x1c>
802265dc: 03 45 74 fd  	lbu	a0, -0x29(s0)
802265e0: e2 70        	ld	ra, 0x38(sp)
802265e2: 42 74        	ld	s0, 0x30(sp)
802265e4: 21 61        	addi	sp, sp, 0x40
802265e6: 82 80        	ret

00000000802265e8 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hed37dcfd1450025fE>:
802265e8: 39 71        	addi	sp, sp, -0x40
802265ea: 06 fc        	sd	ra, 0x38(sp)
802265ec: 22 f8        	sd	s0, 0x30(sp)
802265ee: 80 00        	addi	s0, sp, 0x40
802265f0: 23 30 b4 fc  	sd	a1, -0x40(s0)
802265f4: 23 34 a4 fc  	sd	a0, -0x38(s0)
802265f8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802265fc: 23 34 b4 fe  	sd	a1, -0x18(s0)
80226600: 03 45 05 00  	lbu	a0, 0x0(a0)
80226604: 05 89        	andi	a0, a0, 0x1
80226606: 05 e1        	bnez	a0, 0x80226626 <.Lpcrel_hi3+0x18>
80226608: 09 a0        	j	0x8022660a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hed37dcfd1450025fE+0x22>
8022660a: 03 35 04 fc  	ld	a0, -0x40(s0)

000000008022660e <.Lpcrel_hi3>:
; #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]
8022660e: 97 d5 00 00  	auipc	a1, 0xd
80226612: 93 85 a5 19  	addi	a1, a1, 0x19a
80226616: 11 46        	li	a2, 0x4
80226618: 97 90 00 00  	auipc	ra, 0x9
8022661c: e7 80 e0 41  	jalr	0x41e(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
80226620: a3 0b a4 fc  	sb	a0, -0x29(s0)
80226624: 15 a8        	j	0x80226658 <.Lpcrel_hi5+0x1c>
80226626: 03 35 04 fc  	ld	a0, -0x40(s0)
8022662a: 83 35 84 fc  	ld	a1, -0x38(s0)
;     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
8022662e: 85 05        	addi	a1, a1, 0x1
80226630: 23 3c b4 fc  	sd	a1, -0x28(s0)

0000000080226634 <.Lpcrel_hi4>:
; #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]
80226634: 97 d5 00 00  	auipc	a1, 0xd
80226638: 93 85 c5 16  	addi	a1, a1, 0x16c

000000008022663c <.Lpcrel_hi5>:
8022663c: 17 36 01 00  	auipc	a2, 0x13
80226640: 13 07 c6 78  	addi	a4, a2, 0x78c
80226644: 11 46        	li	a2, 0x4
80226646: 93 06 84 fd  	addi	a3, s0, -0x28
8022664a: 97 90 00 00  	auipc	ra, 0x9
8022664e: e7 80 a0 57  	jalr	0x57a(ra) <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>
80226652: a3 0b a4 fc  	sb	a0, -0x29(s0)
80226656: 09 a0        	j	0x80226658 <.Lpcrel_hi5+0x1c>
80226658: 03 45 74 fd  	lbu	a0, -0x29(s0)
8022665c: e2 70        	ld	ra, 0x38(sp)
8022665e: 42 74        	ld	s0, 0x30(sp)
80226660: 21 61        	addi	sp, sp, 0x40
80226662: 82 80        	ret

0000000080226664 <_ZN5alloc11collections9vec_deque17VecDeque$LT$T$GT$3new17ha5d9f75d14b59448E>:
;     pub const fn new() -> VecDeque<T> {
80226664: 41 11        	addi	sp, sp, -0x10
80226666: 06 e4        	sd	ra, 0x8(sp)
80226668: 22 e0        	sd	s0, 0x0(sp)
8022666a: 00 08        	addi	s0, sp, 0x10
8022666c: aa 85        	mv	a1, a0
8022666e: 01 45        	li	a0, 0x0
;         VecDeque { head: 0, len: 0, buf: RawVec::NEW }
80226670: 88 e9        	sd	a0, 0x10(a1)
80226672: 88 ed        	sd	a0, 0x18(a1)
80226674: 88 e1        	sd	a0, 0x0(a1)
80226676: 21 45        	li	a0, 0x8
80226678: 88 e5        	sd	a0, 0x8(a1)
8022667a: a2 60        	ld	ra, 0x8(sp)
8022667c: 02 64        	ld	s0, 0x0(sp)
;     }
8022667e: 41 01        	addi	sp, sp, 0x10
80226680: 82 80        	ret

0000000080226682 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$12slice_ranges17h2c5f2304ab3c3e4fE>:
;     fn slice_ranges<R>(&self, range: R, len: usize) -> (Range<usize>, Range<usize>)
80226682: 11 71        	addi	sp, sp, -0x100
80226684: 86 fd        	sd	ra, 0xf8(sp)
80226686: a2 f9        	sd	s0, 0xf0(sp)
80226688: 00 02        	addi	s0, sp, 0x100
8022668a: 23 3c d4 f0  	sd	a3, -0xe8(s0)
8022668e: 23 34 c4 f2  	sd	a2, -0xd8(s0)
80226692: 2e 86        	mv	a2, a1
80226694: 83 35 84 f1  	ld	a1, -0xe8(s0)
80226698: 23 30 c4 f2  	sd	a2, -0xe0(s0)
8022669c: aa 86        	mv	a3, a0
8022669e: 03 35 84 f2  	ld	a0, -0xd8(s0)
802266a2: 23 38 d4 f2  	sd	a3, -0xd0(s0)
802266a6: 23 38 c4 f8  	sd	a2, -0x70(s0)
802266aa: 23 3c a4 f8  	sd	a0, -0x68(s0)
802266ae: 23 30 b4 fa  	sd	a1, -0x60(s0)
802266b2: 23 34 e4 fa  	sd	a4, -0x58(s0)
;         let Range { start, end } = slice::range(range, ..len);
802266b6: 23 34 e4 f4  	sd	a4, -0xb8(s0)
802266ba: 03 36 84 f4  	ld	a2, -0xb8(s0)

00000000802266be <.Lpcrel_hi0>:
802266be: 97 36 01 00  	auipc	a3, 0x13
802266c2: 93 86 26 7b  	addi	a3, a3, 0x7b2
802266c6: 97 40 00 00  	auipc	ra, 0x4
802266ca: e7 80 40 78  	jalr	0x784(ra) <_ZN4core5slice5index5range17h48214a4bb692409fE>
802266ce: 2a 86        	mv	a2, a0
802266d0: 23 3c c4 f2  	sd	a2, -0xc8(s0)
802266d4: 23 38 a4 fa  	sd	a0, -0x50(s0)
802266d8: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         let len = end - start;
802266dc: 33 85 a5 40  	sub	a0, a1, a0
802266e0: 23 30 a4 f4  	sd	a0, -0xc0(s0)
802266e4: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if len == 0 {
802266e8: 11 e9        	bnez	a0, 0x802266fc <.Lpcrel_hi0+0x3e>
802266ea: 09 a0        	j	0x802266ec <.Lpcrel_hi0+0x2e>
802266ec: 83 35 04 f3  	ld	a1, -0xd0(s0)
802266f0: 01 45        	li	a0, 0x0
;             (0..0, 0..0)
802266f2: 88 e1        	sd	a0, 0x0(a1)
802266f4: 88 e5        	sd	a0, 0x8(a1)
802266f6: 88 e9        	sd	a0, 0x10(a1)
802266f8: 88 ed        	sd	a0, 0x18(a1)
;         if len == 0 {
802266fa: 39 a8        	j	0x80226718 <.Lpcrel_hi0+0x5a>
802266fc: 83 35 84 f3  	ld	a1, -0xc8(s0)
80226700: 03 35 04 f2  	ld	a0, -0xe0(s0)
;             let wrapped_start = self.to_physical_idx(start);
80226704: 97 00 00 00  	auipc	ra, 0x0
80226708: e7 80 e0 30  	jalr	0x30e(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE>
8022670c: aa 85        	mv	a1, a0
8022670e: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80226712: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226716: 29 a0        	j	0x80226720 <.Lpcrel_hi0+0x62>
80226718: ee 70        	ld	ra, 0xf8(sp)
8022671a: 4e 74        	ld	s0, 0xf0(sp)
;     }
8022671c: 11 61        	addi	sp, sp, 0x100
8022671e: 82 80        	ret
80226720: 03 35 04 f2  	ld	a0, -0xe0(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226724: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226728: 09 a0        	j	0x8022672a <.Lpcrel_hi0+0x6c>
8022672a: 03 35 04 f2  	ld	a0, -0xe0(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8022672e: 08 61        	ld	a0, 0x0(a0)
80226730: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80226734: 09 a0        	j	0x80226736 <.Lpcrel_hi0+0x78>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226736: 09 a0        	j	0x80226738 <.Lpcrel_hi0+0x7a>
80226738: 83 35 04 f4  	ld	a1, -0xc0(s0)
8022673c: 03 36 04 f1  	ld	a2, -0xf0(s0)
;             let head_len = self.capacity() - wrapped_start;
80226740: 03 35 04 f5  	ld	a0, -0xb0(s0)
80226744: 11 8d        	sub	a0, a0, a2
80226746: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8022674a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             if head_len >= len {
8022674e: 63 7d b5 00  	bgeu	a0, a1, 0x80226768 <.Lpcrel_hi0+0xaa>
80226752: 09 a0        	j	0x80226754 <.Lpcrel_hi0+0x96>
80226754: 03 35 04 f4  	ld	a0, -0xc0(s0)
80226758: 83 35 84 f0  	ld	a1, -0xf8(s0)
;                 let tail_len = len - head_len;
8022675c: 0d 8d        	sub	a0, a0, a1
8022675e: 23 30 a4 f0  	sd	a0, -0x100(s0)
80226762: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226766: 35 a0        	j	0x80226792 <.Lpcrel_hi0+0xd4>
80226768: 83 35 04 f3  	ld	a1, -0xd0(s0)
8022676c: 03 36 04 f1  	ld	a2, -0xf0(s0)
80226770: 03 35 04 f4  	ld	a0, -0xc0(s0)
;                 (wrapped_start..wrapped_start + len, 0..0)
80226774: 32 95        	add	a0, a0, a2
80226776: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8022677a: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8022677e: 03 36 84 f5  	ld	a2, -0xa8(s0)
80226782: 03 35 04 f6  	ld	a0, -0xa0(s0)
80226786: 90 e1        	sd	a2, 0x0(a1)
80226788: 88 e5        	sd	a0, 0x8(a1)
8022678a: 01 45        	li	a0, 0x0
8022678c: 88 e9        	sd	a0, 0x10(a1)
8022678e: 88 ed        	sd	a0, 0x18(a1)
;             if head_len >= len {
80226790: 99 a8        	j	0x802267e6 <.Lpcrel_hi0+0x128>
80226792: 03 35 04 f2  	ld	a0, -0xe0(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226796: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8022679a: 09 a0        	j	0x8022679c <.Lpcrel_hi0+0xde>
8022679c: 03 35 04 f2  	ld	a0, -0xe0(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802267a0: 08 61        	ld	a0, 0x0(a0)
802267a2: 23 3c a4 f6  	sd	a0, -0x88(s0)
802267a6: 09 a0        	j	0x802267a8 <.Lpcrel_hi0+0xea>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802267a8: 09 a0        	j	0x802267aa <.Lpcrel_hi0+0xec>
802267aa: 83 35 04 f3  	ld	a1, -0xd0(s0)
802267ae: 03 35 04 f0  	ld	a0, -0x100(s0)
802267b2: 03 36 04 f1  	ld	a2, -0xf0(s0)
;                 (wrapped_start..self.capacity(), 0..tail_len)
802267b6: 23 34 c4 f6  	sd	a2, -0x98(s0)
802267ba: 03 36 84 f7  	ld	a2, -0x88(s0)
802267be: 23 38 c4 f6  	sd	a2, -0x90(s0)
802267c2: 01 46        	li	a2, 0x0
802267c4: 23 30 c4 f8  	sd	a2, -0x80(s0)
802267c8: 23 34 a4 f8  	sd	a0, -0x78(s0)
802267cc: 03 36 84 f6  	ld	a2, -0x98(s0)
802267d0: 03 35 04 f7  	ld	a0, -0x90(s0)
802267d4: 90 e1        	sd	a2, 0x0(a1)
802267d6: 88 e5        	sd	a0, 0x8(a1)
802267d8: 03 36 04 f8  	ld	a2, -0x80(s0)
802267dc: 03 35 84 f8  	ld	a0, -0x78(s0)
802267e0: 90 e9        	sd	a2, 0x10(a1)
802267e2: 88 ed        	sd	a0, 0x18(a1)
;             if head_len >= len {
802267e4: 09 a0        	j	0x802267e6 <.Lpcrel_hi0+0x128>
;         if len == 0 {
802267e6: 0d bf        	j	0x80226718 <.Lpcrel_hi0+0x5a>

00000000802267e8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$12slice_ranges17hd764c2b48cd7ba84E>:
;     fn slice_ranges<R>(&self, range: R, len: usize) -> (Range<usize>, Range<usize>)
802267e8: 51 71        	addi	sp, sp, -0xf0
802267ea: 86 f5        	sd	ra, 0xe8(sp)
802267ec: a2 f1        	sd	s0, 0xe0(sp)
802267ee: 80 19        	addi	s0, sp, 0xf0
802267f0: 23 38 b4 f2  	sd	a1, -0xd0(s0)
802267f4: 23 3c a4 f2  	sd	a0, -0xc8(s0)
802267f8: 23 3c b4 f8  	sd	a1, -0x68(s0)
802267fc: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         let Range { start, end } = slice::range(range, ..len);
80226800: 23 38 c4 f4  	sd	a2, -0xb0(s0)
80226804: 03 35 04 f5  	ld	a0, -0xb0(s0)

0000000080226808 <.Lpcrel_hi1>:
80226808: 97 35 01 00  	auipc	a1, 0x13
8022680c: 93 85 85 66  	addi	a1, a1, 0x668
80226810: 97 40 00 00  	auipc	ra, 0x4
80226814: e7 80 e0 22  	jalr	0x22e(ra) <_ZN4core5slice5index5range17h17dae68659a7e963E>
80226818: 2a 86        	mv	a2, a0
8022681a: 23 30 c4 f4  	sd	a2, -0xc0(s0)
8022681e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80226822: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         let len = end - start;
80226826: 33 85 a5 40  	sub	a0, a1, a0
8022682a: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022682e: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if len == 0 {
80226832: 11 e9        	bnez	a0, 0x80226846 <.Lpcrel_hi1+0x3e>
80226834: 09 a0        	j	0x80226836 <.Lpcrel_hi1+0x2e>
80226836: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022683a: 01 45        	li	a0, 0x0
;             (0..0, 0..0)
8022683c: 88 e1        	sd	a0, 0x0(a1)
8022683e: 88 e5        	sd	a0, 0x8(a1)
80226840: 88 e9        	sd	a0, 0x10(a1)
80226842: 88 ed        	sd	a0, 0x18(a1)
;         if len == 0 {
80226844: 39 a8        	j	0x80226862 <.Lpcrel_hi1+0x5a>
80226846: 83 35 04 f4  	ld	a1, -0xc0(s0)
8022684a: 03 35 04 f3  	ld	a0, -0xd0(s0)
;             let wrapped_start = self.to_physical_idx(start);
8022684e: 97 00 00 00  	auipc	ra, 0x0
80226852: e7 80 40 1c  	jalr	0x1c4(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE>
80226856: aa 85        	mv	a1, a0
80226858: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8022685c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226860: 29 a0        	j	0x8022686a <.Lpcrel_hi1+0x62>
80226862: ae 70        	ld	ra, 0xe8(sp)
80226864: 0e 74        	ld	s0, 0xe0(sp)
;     }
80226866: 6d 61        	addi	sp, sp, 0xf0
80226868: 82 80        	ret
8022686a: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
8022686e: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226872: 09 a0        	j	0x80226874 <.Lpcrel_hi1+0x6c>
80226874: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226878: 08 61        	ld	a0, 0x0(a0)
8022687a: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8022687e: 09 a0        	j	0x80226880 <.Lpcrel_hi1+0x78>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226880: 09 a0        	j	0x80226882 <.Lpcrel_hi1+0x7a>
80226882: 83 35 84 f4  	ld	a1, -0xb8(s0)
80226886: 03 36 84 f2  	ld	a2, -0xd8(s0)
;             let head_len = self.capacity() - wrapped_start;
8022688a: 03 35 84 f5  	ld	a0, -0xa8(s0)
8022688e: 11 8d        	sub	a0, a0, a2
80226890: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80226894: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             if head_len >= len {
80226898: 63 7d b5 00  	bgeu	a0, a1, 0x802268b2 <.Lpcrel_hi1+0xaa>
8022689c: 09 a0        	j	0x8022689e <.Lpcrel_hi1+0x96>
8022689e: 03 35 84 f4  	ld	a0, -0xb8(s0)
802268a2: 83 35 04 f2  	ld	a1, -0xe0(s0)
;                 let tail_len = len - head_len;
802268a6: 0d 8d        	sub	a0, a0, a1
802268a8: 23 3c a4 f0  	sd	a0, -0xe8(s0)
802268ac: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802268b0: 35 a0        	j	0x802268dc <.Lpcrel_hi1+0xd4>
802268b2: 83 35 84 f3  	ld	a1, -0xc8(s0)
802268b6: 03 36 84 f2  	ld	a2, -0xd8(s0)
802268ba: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 (wrapped_start..wrapped_start + len, 0..0)
802268be: 32 95        	add	a0, a0, a2
802268c0: 23 30 c4 f6  	sd	a2, -0xa0(s0)
802268c4: 23 34 a4 f6  	sd	a0, -0x98(s0)
802268c8: 03 36 04 f6  	ld	a2, -0xa0(s0)
802268cc: 03 35 84 f6  	ld	a0, -0x98(s0)
802268d0: 90 e1        	sd	a2, 0x0(a1)
802268d2: 88 e5        	sd	a0, 0x8(a1)
802268d4: 01 45        	li	a0, 0x0
802268d6: 88 e9        	sd	a0, 0x10(a1)
802268d8: 88 ed        	sd	a0, 0x18(a1)
;             if head_len >= len {
802268da: 99 a8        	j	0x80226930 <.Lpcrel_hi1+0x128>
802268dc: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802268e0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802268e4: 09 a0        	j	0x802268e6 <.Lpcrel_hi1+0xde>
802268e6: 03 35 04 f3  	ld	a0, -0xd0(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802268ea: 08 61        	ld	a0, 0x0(a0)
802268ec: 23 30 a4 f8  	sd	a0, -0x80(s0)
802268f0: 09 a0        	j	0x802268f2 <.Lpcrel_hi1+0xea>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802268f2: 09 a0        	j	0x802268f4 <.Lpcrel_hi1+0xec>
802268f4: 83 35 84 f3  	ld	a1, -0xc8(s0)
802268f8: 03 35 84 f1  	ld	a0, -0xe8(s0)
802268fc: 03 36 84 f2  	ld	a2, -0xd8(s0)
;                 (wrapped_start..self.capacity(), 0..tail_len)
80226900: 23 38 c4 f6  	sd	a2, -0x90(s0)
80226904: 03 36 04 f8  	ld	a2, -0x80(s0)
80226908: 23 3c c4 f6  	sd	a2, -0x88(s0)
8022690c: 01 46        	li	a2, 0x0
8022690e: 23 34 c4 f8  	sd	a2, -0x78(s0)
80226912: 23 38 a4 f8  	sd	a0, -0x70(s0)
80226916: 03 36 04 f7  	ld	a2, -0x90(s0)
8022691a: 03 35 84 f7  	ld	a0, -0x88(s0)
8022691e: 90 e1        	sd	a2, 0x0(a1)
80226920: 88 e5        	sd	a0, 0x8(a1)
80226922: 03 36 84 f8  	ld	a2, -0x78(s0)
80226926: 03 35 04 f9  	ld	a0, -0x70(s0)
8022692a: 90 e9        	sd	a2, 0x10(a1)
8022692c: 88 ed        	sd	a0, 0x18(a1)
;             if head_len >= len {
8022692e: 09 a0        	j	0x80226930 <.Lpcrel_hi1+0x128>
;         if len == 0 {
80226930: 0d bf        	j	0x80226862 <.Lpcrel_hi1+0x5a>

0000000080226932 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$13as_mut_slices17h1cdf3d654deaddb5E>:
;     pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {
80226932: 6d 71        	addi	sp, sp, -0x110
80226934: 06 e6        	sd	ra, 0x108(sp)
80226936: 22 e2        	sd	s0, 0x100(sp)
80226938: 00 0a        	addi	s0, sp, 0x110
8022693a: 23 3c b4 ee  	sd	a1, -0x108(s0)
8022693e: 23 30 a4 f0  	sd	a0, -0x100(s0)
80226942: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         let (a_range, b_range) = self.slice_ranges(.., self.len);
80226946: 90 6d        	ld	a2, 0x18(a1)
80226948: 13 05 84 f0  	addi	a0, s0, -0xf8
8022694c: 97 00 00 00  	auipc	ra, 0x0
80226950: e7 80 c0 e9  	jalr	-0x164(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$12slice_ranges17hd764c2b48cd7ba84E>
80226954: 03 36 84 ef  	ld	a2, -0x108(s0)
80226958: 83 35 04 f0  	ld	a1, -0x100(s0)
8022695c: 03 38 84 f0  	ld	a6, -0xf8(s0)
80226960: 23 38 04 f7  	sd	a6, -0x90(s0)
80226964: 83 36 04 f1  	ld	a3, -0xf0(s0)
80226968: 23 3c d4 f6  	sd	a3, -0x88(s0)
8022696c: 83 37 84 f1  	ld	a5, -0xe8(s0)
80226970: 23 30 f4 f8  	sd	a5, -0x80(s0)
80226974: 03 35 04 f2  	ld	a0, -0xe0(s0)
80226978: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         self.buf.ptr()
8022697c: 23 38 c4 f8  	sd	a2, -0x70(s0)
;         self.ptr.as_ptr()
80226980: 18 66        	ld	a4, 0x8(a2)
80226982: 23 3c e4 f8  	sd	a4, -0x68(s0)
;         self.pointer as *mut T
80226986: 23 30 e4 fa  	sd	a4, -0x60(s0)
;         unsafe { intrinsics::offset(self, count) }
8022698a: 93 18 48 00  	slli	a7, a6, 0x4
8022698e: 46 97        	add	a4, a4, a7
80226990: 23 34 e4 fa  	sd	a4, -0x58(s0)
;             ptr::slice_from_raw_parts_mut(self.ptr().add(range.start), range.end - range.start)
80226994: b3 86 06 41  	sub	a3, a3, a6
80226998: 23 38 d4 fa  	sd	a3, -0x50(s0)
;         self as _
8022699c: 23 3c e4 fa  	sd	a4, -0x48(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802269a0: 23 3c e4 f2  	sd	a4, -0xc8(s0)
802269a4: 23 30 d4 f4  	sd	a3, -0xc0(s0)
802269a8: 03 37 84 f3  	ld	a4, -0xc8(s0)
802269ac: 83 36 04 f4  	ld	a3, -0xc0(s0)
802269b0: 23 34 e4 f2  	sd	a4, -0xd8(s0)
802269b4: 23 38 d4 f2  	sd	a3, -0xd0(s0)
802269b8: 03 37 84 f2  	ld	a4, -0xd8(s0)
802269bc: 83 36 04 f3  	ld	a3, -0xd0(s0)
;         self.buf.ptr()
802269c0: 23 30 c4 fc  	sd	a2, -0x40(s0)
;         self.ptr.as_ptr()
802269c4: 10 66        	ld	a2, 0x8(a2)
802269c6: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         self.pointer as *mut T
802269ca: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         unsafe { intrinsics::offset(self, count) }
802269ce: 13 98 47 00  	slli	a6, a5, 0x4
802269d2: 42 96        	add	a2, a2, a6
802269d4: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             ptr::slice_from_raw_parts_mut(self.ptr().add(range.start), range.end - range.start)
802269d8: 1d 8d        	sub	a0, a0, a5
802269da: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
802269de: 23 34 c4 fe  	sd	a2, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
802269e2: 23 3c c4 f4  	sd	a2, -0xa8(s0)
802269e6: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802269ea: 03 36 84 f5  	ld	a2, -0xa8(s0)
802269ee: 03 35 04 f6  	ld	a0, -0xa0(s0)
802269f2: 23 34 c4 f4  	sd	a2, -0xb8(s0)
802269f6: 23 38 a4 f4  	sd	a0, -0xb0(s0)
802269fa: 03 36 84 f4  	ld	a2, -0xb8(s0)
802269fe: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         unsafe { (&mut *self.buffer_range(a_range), &mut *self.buffer_range(b_range)) }
80226a02: 98 e1        	sd	a4, 0x0(a1)
80226a04: 94 e5        	sd	a3, 0x8(a1)
80226a06: 90 e9        	sd	a2, 0x10(a1)
80226a08: 88 ed        	sd	a0, 0x18(a1)
80226a0a: b2 60        	ld	ra, 0x108(sp)
80226a0c: 12 64        	ld	s0, 0x100(sp)
;     }
80226a0e: 51 61        	addi	sp, sp, 0x110
80226a10: 82 80        	ret

0000000080226a12 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE>:
;     fn to_physical_idx(&self, idx: usize) -> usize {
80226a12: 1d 71        	addi	sp, sp, -0x60
80226a14: 86 ec        	sd	ra, 0x58(sp)
80226a16: a2 e8        	sd	s0, 0x50(sp)
80226a18: 80 10        	addi	s0, sp, 0x60
80226a1a: 23 34 a4 fa  	sd	a0, -0x58(s0)
80226a1e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80226a22: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.wrap_add(self.head, idx)
80226a26: 08 69        	ld	a0, 0x10(a0)
80226a28: 23 3c a4 fc  	sd	a0, -0x28(s0)
;     uint_impl! {
80226a2c: 2e 95        	add	a0, a0, a1
80226a2e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80226a32: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226a36: 09 a0        	j	0x80226a38 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE+0x26>
80226a38: 03 35 84 fa  	ld	a0, -0x58(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226a3c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226a40: 09 a0        	j	0x80226a42 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE+0x30>
80226a42: 03 35 84 fa  	ld	a0, -0x58(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226a46: 08 61        	ld	a0, 0x0(a0)
80226a48: 23 30 a4 fc  	sd	a0, -0x40(s0)
80226a4c: 09 a0        	j	0x80226a4e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE+0x3c>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226a4e: 09 a0        	j	0x80226a50 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE+0x3e>
80226a50: 03 35 04 fb  	ld	a0, -0x50(s0)
;     if logical_index >= capacity { logical_index - capacity } else { logical_index }
80226a54: 83 35 04 fc  	ld	a1, -0x40(s0)
80226a58: 63 78 b5 00  	bgeu	a0, a1, 0x80226a68 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE+0x56>
80226a5c: 09 a0        	j	0x80226a5e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE+0x4c>
80226a5e: 03 35 04 fb  	ld	a0, -0x50(s0)
;     if logical_index >= capacity { logical_index - capacity } else { logical_index }
80226a62: 23 3c a4 fa  	sd	a0, -0x48(s0)
80226a66: 09 a8        	j	0x80226a78 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE+0x66>
80226a68: 03 35 04 fb  	ld	a0, -0x50(s0)
;     if logical_index >= capacity { logical_index - capacity } else { logical_index }
80226a6c: 83 35 04 fc  	ld	a1, -0x40(s0)
80226a70: 0d 8d        	sub	a0, a0, a1
80226a72: 23 3c a4 fa  	sd	a0, -0x48(s0)
80226a76: 09 a0        	j	0x80226a78 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE+0x66>
;     }
80226a78: 03 35 84 fb  	ld	a0, -0x48(s0)
80226a7c: e6 60        	ld	ra, 0x58(sp)
80226a7e: 46 64        	ld	s0, 0x50(sp)
80226a80: 25 61        	addi	sp, sp, 0x60
80226a82: 82 80        	ret

0000000080226a84 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$19copy_nonoverlapping17h2d8aabd611e70795E>:
;     unsafe fn copy_nonoverlapping(&mut self, src: usize, dst: usize, len: usize) {
80226a84: 75 71        	addi	sp, sp, -0x90
80226a86: 06 e5        	sd	ra, 0x88(sp)
80226a88: 22 e1        	sd	s0, 0x80(sp)
80226a8a: 00 09        	addi	s0, sp, 0x90
80226a8c: 23 3c d4 f6  	sd	a3, -0x88(s0)
80226a90: ae 86        	mv	a3, a1
80226a92: 83 35 84 f7  	ld	a1, -0x88(s0)
80226a96: 23 38 a4 f8  	sd	a0, -0x70(s0)
80226a9a: 23 3c d4 f8  	sd	a3, -0x68(s0)
80226a9e: 23 30 c4 fa  	sd	a2, -0x60(s0)
80226aa2: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.buf.ptr()
80226aa6: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.ptr.as_ptr()
80226aaa: 0c 65        	ld	a1, 0x8(a0)
80226aac: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         self.pointer as *mut T
80226ab0: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { intrinsics::offset(self, count) }
80226ab4: 92 06        	slli	a3, a3, 0x4
80226ab6: b6 95        	add	a1, a1, a3
80226ab8: 23 30 b4 f8  	sd	a1, -0x80(s0)
;             ptr::copy_nonoverlapping(self.ptr().add(src), self.ptr().add(dst), len);
80226abc: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.buf.ptr()
80226ac0: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.ptr.as_ptr()
80226ac4: 08 65        	ld	a0, 0x8(a0)
80226ac6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.pointer as *mut T
80226aca: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80226ace: 93 15 46 00  	slli	a1, a2, 0x4
80226ad2: 2e 95        	add	a0, a0, a1
80226ad4: 23 34 a4 f8  	sd	a0, -0x78(s0)
80226ad8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     assert_unsafe_precondition!(
80226adc: 09 a0        	j	0x80226ade <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$19copy_nonoverlapping17h2d8aabd611e70795E+0x5a>
80226ade: 03 37 84 f7  	ld	a4, -0x88(s0)
80226ae2: 83 35 84 f8  	ld	a1, -0x78(s0)
80226ae6: 03 35 04 f8  	ld	a0, -0x80(s0)
80226aea: 41 46        	li	a2, 0x10
80226aec: a1 46        	li	a3, 0x8
;     assert_unsafe_precondition!(
80226aee: 97 20 00 00  	auipc	ra, 0x2
80226af2: e7 80 e0 68  	jalr	0x68e(ra) <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h9e88ce347a02df22E>
80226af6: 09 a0        	j	0x80226af8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$19copy_nonoverlapping17h2d8aabd611e70795E+0x74>
80226af8: 83 35 04 f8  	ld	a1, -0x80(s0)
80226afc: 03 35 84 f8  	ld	a0, -0x78(s0)
80226b00: 03 36 84 f7  	ld	a2, -0x88(s0)
;     unsafe { copy_nonoverlapping(src, dst, count) }
80226b04: 12 06        	slli	a2, a2, 0x4
80226b06: 97 b0 00 00  	auipc	ra, 0xb
80226b0a: e7 80 80 16  	jalr	0x168(ra) <memcpy>
80226b0e: aa 60        	ld	ra, 0x88(sp)
80226b10: 0a 64        	ld	s0, 0x80(sp)
;     }
80226b12: 49 61        	addi	sp, sp, 0x90
80226b14: 82 80        	ret

0000000080226b16 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E>:
;     unsafe fn handle_capacity_increase(&mut self, old_capacity: usize) {
80226b16: 59 71        	addi	sp, sp, -0x70
80226b18: 86 f4        	sd	ra, 0x68(sp)
80226b1a: a2 f0        	sd	s0, 0x60(sp)
80226b1c: 80 18        	addi	s0, sp, 0x70
80226b1e: 23 34 b4 fa  	sd	a1, -0x58(s0)
80226b22: 23 38 a4 fa  	sd	a0, -0x50(s0)
80226b26: 23 30 a4 fc  	sd	a0, -0x40(s0)
80226b2a: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226b2e: 09 a0        	j	0x80226b30 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0x1a>
80226b30: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226b34: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226b38: 09 a0        	j	0x80226b3a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0x24>
80226b3a: 03 35 04 fb  	ld	a0, -0x50(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226b3e: 08 61        	ld	a0, 0x0(a0)
80226b40: 23 3c a4 fa  	sd	a0, -0x48(s0)
80226b44: 09 a0        	j	0x80226b46 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0x30>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226b46: 09 a0        	j	0x80226b48 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0x32>
80226b48: 03 35 84 fa  	ld	a0, -0x58(s0)
80226b4c: 03 36 04 fb  	ld	a2, -0x50(s0)
;         if self.head <= old_capacity - self.len {
80226b50: 0c 6a        	ld	a1, 0x10(a2)
80226b52: 10 6e        	ld	a2, 0x18(a2)
80226b54: 11 8d        	sub	a0, a0, a2
80226b56: 63 76 b5 02  	bgeu	a0, a1, 0x80226b82 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0x6c>
80226b5a: 09 a0        	j	0x80226b5c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0x46>
80226b5c: 03 35 04 fb  	ld	a0, -0x50(s0)
80226b60: 83 35 84 fa  	ld	a1, -0x58(s0)
;             let head_len = old_capacity - self.head;
80226b64: 10 69        	ld	a2, 0x10(a0)
80226b66: 91 8d        	sub	a1, a1, a2
80226b68: 23 3c b4 f8  	sd	a1, -0x68(s0)
80226b6c: 23 3c b4 fc  	sd	a1, -0x28(s0)
;             let tail_len = self.len - head_len;
80226b70: 08 6d        	ld	a0, 0x18(a0)
80226b72: 0d 8d        	sub	a0, a0, a1
80226b74: 23 30 a4 fa  	sd	a0, -0x60(s0)
80226b78: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             if head_len > tail_len && new_capacity - old_capacity >= tail_len {
80226b7c: 63 6b b5 02  	bltu	a0, a1, 0x80226bb2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0x9c>
80226b80: 11 a0        	j	0x80226b84 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0x6e>
;         if self.head <= old_capacity - self.len {
80226b82: 85 a0        	j	0x80226be2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0xcc>
80226b84: 03 35 04 fb  	ld	a0, -0x50(s0)
80226b88: 83 36 84 f9  	ld	a3, -0x68(s0)
;                 let new_head = new_capacity - head_len;
80226b8c: 83 35 84 fb  	ld	a1, -0x48(s0)
80226b90: 33 86 d5 40  	sub	a2, a1, a3
80226b94: 23 38 c4 f8  	sd	a2, -0x70(s0)
80226b98: 23 34 c4 fe  	sd	a2, -0x18(s0)
;                     self.copy(self.head, new_head, head_len);
80226b9c: 0c 69        	ld	a1, 0x10(a0)
80226b9e: 97 00 00 00  	auipc	ra, 0x0
80226ba2: e7 80 20 06  	jalr	0x62(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
80226ba6: 83 35 04 fb  	ld	a1, -0x50(s0)
80226baa: 03 35 04 f9  	ld	a0, -0x70(s0)
;                 self.head = new_head;
80226bae: 88 e9        	sd	a0, 0x10(a1)
;             if head_len > tail_len && new_capacity - old_capacity >= tail_len {
80226bb0: 05 a8        	j	0x80226be0 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0xca>
80226bb2: 83 35 04 fa  	ld	a1, -0x60(s0)
80226bb6: 03 36 84 fa  	ld	a2, -0x58(s0)
;             if head_len > tail_len && new_capacity - old_capacity >= tail_len {
80226bba: 03 35 84 fb  	ld	a0, -0x48(s0)
80226bbe: 11 8d        	sub	a0, a0, a2
80226bc0: 63 74 b5 00  	bgeu	a0, a1, 0x80226bc8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0xb2>
80226bc4: 09 a0        	j	0x80226bc6 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0xb0>
; //!An easy file system isolated from the kernel
80226bc6: 7d bf        	j	0x80226b84 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0x6e>
80226bc8: 83 36 04 fa  	ld	a3, -0x60(s0)
80226bcc: 03 36 84 fa  	ld	a2, -0x58(s0)
80226bd0: 03 35 04 fb  	ld	a0, -0x50(s0)
80226bd4: 81 45        	li	a1, 0x0
;                     self.copy_nonoverlapping(0, old_capacity, tail_len);
80226bd6: 97 00 00 00  	auipc	ra, 0x0
80226bda: e7 80 e0 ea  	jalr	-0x152(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$19copy_nonoverlapping17h2d8aabd611e70795E>
80226bde: 09 a0        	j	0x80226be0 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0xca>
;         if self.head <= old_capacity - self.len {
80226be0: 09 a0        	j	0x80226be2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E+0xcc>
80226be2: a6 70        	ld	ra, 0x68(sp)
80226be4: 06 74        	ld	s0, 0x60(sp)
;     }
80226be6: 65 61        	addi	sp, sp, 0x70
80226be8: 82 80        	ret

0000000080226bea <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$3len17h86b6f2fc195152e2E>:
;     pub fn len(&self) -> usize {
80226bea: 01 11        	addi	sp, sp, -0x20
80226bec: 06 ec        	sd	ra, 0x18(sp)
80226bee: 22 e8        	sd	s0, 0x10(sp)
80226bf0: 00 10        	addi	s0, sp, 0x20
80226bf2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.len
80226bf6: 08 6d        	ld	a0, 0x18(a0)
80226bf8: e2 60        	ld	ra, 0x18(sp)
80226bfa: 42 64        	ld	s0, 0x10(sp)
;     }
80226bfc: 05 61        	addi	sp, sp, 0x20
80226bfe: 82 80        	ret

0000000080226c00 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>:
;     unsafe fn copy(&mut self, src: usize, dst: usize, len: usize) {
80226c00: 75 71        	addi	sp, sp, -0x90
80226c02: 06 e5        	sd	ra, 0x88(sp)
80226c04: 22 e1        	sd	s0, 0x80(sp)
80226c06: 00 09        	addi	s0, sp, 0x90
80226c08: 23 3c d4 f6  	sd	a3, -0x88(s0)
80226c0c: ae 86        	mv	a3, a1
80226c0e: 83 35 84 f7  	ld	a1, -0x88(s0)
80226c12: 23 38 a4 f8  	sd	a0, -0x70(s0)
80226c16: 23 3c d4 f8  	sd	a3, -0x68(s0)
80226c1a: 23 30 c4 fa  	sd	a2, -0x60(s0)
80226c1e: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.buf.ptr()
80226c22: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         self.ptr.as_ptr()
80226c26: 0c 65        	ld	a1, 0x8(a0)
80226c28: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         self.pointer as *mut T
80226c2c: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         unsafe { intrinsics::offset(self, count) }
80226c30: 92 06        	slli	a3, a3, 0x4
80226c32: b6 95        	add	a1, a1, a3
80226c34: 23 30 b4 f8  	sd	a1, -0x80(s0)
;             ptr::copy(self.ptr().add(src), self.ptr().add(dst), len);
80226c38: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         self.buf.ptr()
80226c3c: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.ptr.as_ptr()
80226c40: 08 65        	ld	a0, 0x8(a0)
80226c42: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         self.pointer as *mut T
80226c46: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
80226c4a: 93 15 46 00  	slli	a1, a2, 0x4
80226c4e: 2e 95        	add	a0, a0, a1
80226c50: 23 34 a4 f8  	sd	a0, -0x78(s0)
80226c54: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         assert_unsafe_precondition!(
80226c58: 09 a0        	j	0x80226c5a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E+0x5a>
80226c5a: 83 35 84 f8  	ld	a1, -0x78(s0)
80226c5e: 03 35 04 f8  	ld	a0, -0x80(s0)
80226c62: 21 46        	li	a2, 0x8
;         assert_unsafe_precondition!(
80226c64: 97 20 00 00  	auipc	ra, 0x2
80226c68: e7 80 a0 6b  	jalr	0x6ba(ra) <_ZN4core10intrinsics4copy18precondition_check17h0a905f9e54f6ba10E>
80226c6c: 09 a0        	j	0x80226c6e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E+0x6e>
80226c6e: 83 35 04 f8  	ld	a1, -0x80(s0)
80226c72: 03 35 84 f8  	ld	a0, -0x78(s0)
80226c76: 03 36 84 f7  	ld	a2, -0x88(s0)
;         copy(src, dst, count)
80226c7a: 12 06        	slli	a2, a2, 0x4
80226c7c: 97 b0 00 00  	auipc	ra, 0xb
80226c80: e7 80 a0 20  	jalr	0x20a(ra) <memmove>
80226c84: aa 60        	ld	ra, 0x88(sp)
80226c86: 0a 64        	ld	s0, 0x80(sp)
;     }
80226c88: 49 61        	addi	sp, sp, 0x90
80226c8a: 82 80        	ret

0000000080226c8c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17h51346e367a180bc2E>:
;     fn grow(&mut self) {
80226c8c: 79 71        	addi	sp, sp, -0x30
80226c8e: 06 f4        	sd	ra, 0x28(sp)
80226c90: 22 f0        	sd	s0, 0x20(sp)
80226c92: 00 18        	addi	s0, sp, 0x30
80226c94: 23 38 a4 fc  	sd	a0, -0x30(s0)
80226c98: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226c9c: 09 a0        	j	0x80226c9e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17h51346e367a180bc2E+0x12>
80226c9e: 03 35 04 fd  	ld	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226ca2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226ca6: 09 a0        	j	0x80226ca8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17h51346e367a180bc2E+0x1c>
80226ca8: 03 35 04 fd  	ld	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226cac: 08 61        	ld	a0, 0x0(a0)
80226cae: 23 3c a4 fc  	sd	a0, -0x28(s0)
80226cb2: 09 a0        	j	0x80226cb4 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17h51346e367a180bc2E+0x28>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226cb4: 09 a0        	j	0x80226cb6 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17h51346e367a180bc2E+0x2a>
80226cb6: 03 35 04 fd  	ld	a0, -0x30(s0)
;         self.buf.reserve_for_push(old_cap);
80226cba: 83 35 84 fd  	ld	a1, -0x28(s0)
80226cbe: 97 40 00 00  	auipc	ra, 0x4
80226cc2: e7 80 80 87  	jalr	-0x788(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h3c9fb2e70081a527E>
80226cc6: 03 35 04 fd  	ld	a0, -0x30(s0)
;             self.handle_capacity_increase(old_cap);
80226cca: 83 35 84 fd  	ld	a1, -0x28(s0)
80226cce: 97 00 00 00  	auipc	ra, 0x0
80226cd2: e7 80 80 e4  	jalr	-0x1b8(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$24handle_capacity_increase17h357beef44745ded9E>
80226cd6: a2 70        	ld	ra, 0x28(sp)
80226cd8: 02 74        	ld	s0, 0x20(sp)
;     }
80226cda: 45 61        	addi	sp, sp, 0x30
80226cdc: 82 80        	ret

0000000080226cde <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4iter17h83a295f1eaa66078E>:
;     pub fn iter(&self) -> Iter<'_, T> {
80226cde: 11 71        	addi	sp, sp, -0x100
80226ce0: 86 fd        	sd	ra, 0xf8(sp)
80226ce2: a2 f9        	sd	s0, 0xf0(sp)
80226ce4: 00 02        	addi	s0, sp, 0x100
80226ce6: 23 30 a4 f0  	sd	a0, -0x100(s0)
80226cea: 23 34 b4 fa  	sd	a1, -0x58(s0)
80226cee: 13 05 84 f2  	addi	a0, s0, -0xd8
;         let (a, b) = self.as_slices();
80226cf2: 97 00 00 00  	auipc	ra, 0x0
80226cf6: e7 80 c0 1f  	jalr	0x1fc(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9as_slices17he78a34e7383ac7b5E>
80226cfa: 03 35 84 f2  	ld	a0, -0xd8(s0)
80226cfe: 23 34 a4 f0  	sd	a0, -0xf8(s0)
80226d02: 83 35 04 f3  	ld	a1, -0xd0(s0)
80226d06: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80226d0a: 23 38 a4 fa  	sd	a0, -0x50(s0)
80226d0e: 23 3c b4 fa  	sd	a1, -0x48(s0)
80226d12: 83 36 84 f3  	ld	a3, -0xc8(s0)
80226d16: 23 3c d4 f0  	sd	a3, -0xe8(s0)
80226d1a: 03 36 04 f4  	ld	a2, -0xc0(s0)
80226d1e: 23 30 c4 f2  	sd	a2, -0xe0(s0)
80226d22: 23 30 d4 fc  	sd	a3, -0x40(s0)
80226d26: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         let len = slice.len();
80226d2a: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
80226d2e: 23 38 a4 f6  	sd	a0, -0x90(s0)
80226d32: 23 3c b4 f6  	sd	a1, -0x88(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80226d36: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80226d3a: 09 a0        	j	0x80226d3c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4iter17h83a295f1eaa66078E+0x5e>
80226d3c: 03 35 84 f0  	ld	a0, -0xf8(s0)
80226d40: 83 35 04 f1  	ld	a1, -0xf0(s0)
;         self.pointer as *mut T
80226d44: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { intrinsics::offset(self, count) }
80226d48: 92 05        	slli	a1, a1, 0x4
80226d4a: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80226d4c: 23 30 a4 f8  	sd	a0, -0x80(s0)
80226d50: 09 a0        	j	0x80226d52 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4iter17h83a295f1eaa66078E+0x74>
80226d52: 03 35 84 f1  	ld	a0, -0xe8(s0)
80226d56: 83 35 04 f2  	ld	a1, -0xe0(s0)
;             Self { ptr, end_or_len, _marker: PhantomData }
80226d5a: 03 36 04 f8  	ld	a2, -0x80(s0)
80226d5e: 83 36 84 f6  	ld	a3, -0x98(s0)
80226d62: 23 34 d4 f4  	sd	a3, -0xb8(s0)
80226d66: 23 38 c4 f4  	sd	a2, -0xb0(s0)
;         let len = slice.len();
80226d6a: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
80226d6e: 23 38 a4 f8  	sd	a0, -0x70(s0)
80226d72: 23 3c b4 f8  	sd	a1, -0x68(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80226d76: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80226d7a: 09 a0        	j	0x80226d7c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4iter17h83a295f1eaa66078E+0x9e>
80226d7c: 03 35 84 f1  	ld	a0, -0xe8(s0)
80226d80: 83 35 04 f2  	ld	a1, -0xe0(s0)
;         self.pointer as *mut T
80226d84: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
80226d88: 92 05        	slli	a1, a1, 0x4
80226d8a: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
80226d8c: 23 30 a4 fa  	sd	a0, -0x60(s0)
80226d90: 09 a0        	j	0x80226d92 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4iter17h83a295f1eaa66078E+0xb4>
80226d92: 83 35 04 f0  	ld	a1, -0x100(s0)
;             Self { ptr, end_or_len, _marker: PhantomData }
80226d96: 03 35 04 fa  	ld	a0, -0x60(s0)
80226d9a: 03 36 84 f8  	ld	a2, -0x78(s0)
80226d9e: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80226da2: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         Self { i1, i2 }
80226da6: 03 36 84 f4  	ld	a2, -0xb8(s0)
80226daa: 03 35 04 f5  	ld	a0, -0xb0(s0)
80226dae: 90 e1        	sd	a2, 0x0(a1)
80226db0: 88 e5        	sd	a0, 0x8(a1)
80226db2: 03 36 84 f5  	ld	a2, -0xa8(s0)
80226db6: 03 35 04 f6  	ld	a0, -0xa0(s0)
80226dba: 90 e9        	sd	a2, 0x10(a1)
80226dbc: 88 ed        	sd	a0, 0x18(a1)
80226dbe: ee 70        	ld	ra, 0xf8(sp)
80226dc0: 4e 74        	ld	s0, 0xf0(sp)
;     }
80226dc2: 11 61        	addi	sp, sp, 0x100
80226dc4: 82 80        	ret

0000000080226dc6 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$5drain17h3d4f88fd8073c448E>:
;     pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
80226dc6: 19 71        	addi	sp, sp, -0x80
80226dc8: 86 fc        	sd	ra, 0x78(sp)
80226dca: a2 f8        	sd	s0, 0x70(sp)
80226dcc: 00 01        	addi	s0, sp, 0x80
80226dce: 23 34 c4 f8  	sd	a2, -0x78(s0)
80226dd2: 23 3c b4 f8  	sd	a1, -0x68(s0)
80226dd6: 2a 86        	mv	a2, a0
80226dd8: 03 35 84 f8  	ld	a0, -0x78(s0)
80226ddc: 23 30 c4 fa  	sd	a2, -0x60(s0)
80226de0: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         let Range { start, end } = slice::range(range, ..self.len);
80226de4: 13 86 85 01  	addi	a2, a1, 0x18
80226de8: 23 38 c4 f8  	sd	a2, -0x70(s0)
80226dec: 8c 6d        	ld	a1, 0x18(a1)
80226dee: 23 34 b4 fa  	sd	a1, -0x58(s0)
80226df2: 83 35 84 fa  	ld	a1, -0x58(s0)

0000000080226df6 <.Lpcrel_hi2>:
80226df6: 17 36 01 00  	auipc	a2, 0x13
80226dfa: 13 06 26 09  	addi	a2, a2, 0x92
80226dfe: 97 40 00 00  	auipc	ra, 0x4
80226e02: e7 80 60 e4  	jalr	-0x1ba(ra) <_ZN4core5slice5index5range17h2ca5b15cd75b9964E>
80226e06: 03 36 04 f9  	ld	a2, -0x70(s0)
80226e0a: 03 37 84 f9  	ld	a4, -0x68(s0)
;         let Range { start, end } = slice::range(range, ..self.len);
80226e0e: aa 86        	mv	a3, a0
80226e10: 2e 85        	mv	a0, a1
80226e12: 83 35 04 fa  	ld	a1, -0x60(s0)
80226e16: 23 30 d4 fc  	sd	a3, -0x40(s0)
80226e1a: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         let drain_len = end - start;
80226e1e: 15 8d        	sub	a0, a0, a3
80226e20: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         let orig_len = mem::replace(&mut deque.len, drain_start);
80226e24: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         crate::intrinsics::read_via_copy(src)
80226e28: 10 6f        	ld	a2, 0x18(a4)
80226e2a: 23 30 c4 fe  	sd	a2, -0x20(s0)
;         intrinsics::write_via_move(dst, src)
80226e2e: 14 ef        	sd	a3, 0x18(a4)
;         let new_len = orig_len - drain_len;
80226e30: 09 8e        	sub	a2, a2, a0
80226e32: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         unsafe { NonNull { pointer: reference as *mut T } }
80226e36: 23 38 e4 fa  	sd	a4, -0x50(s0)
;         Drain {
80226e3a: 03 37 04 fb  	ld	a4, -0x50(s0)
80226e3e: 98 e1        	sd	a4, 0x0(a1)
80226e40: 88 e5        	sd	a0, 0x8(a1)
80226e42: 94 e9        	sd	a3, 0x10(a1)
80226e44: 90 ed        	sd	a2, 0x18(a1)
80226e46: 88 f1        	sd	a0, 0x20(a1)
80226e48: e6 70        	ld	ra, 0x78(sp)
80226e4a: 46 74        	ld	s0, 0x70(sp)
;     }
80226e4c: 09 61        	addi	sp, sp, 0x80
80226e4e: 82 80        	ret

0000000080226e50 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE>:
;     fn wrap_sub(&self, idx: usize, subtrahend: usize) -> usize {
80226e50: 19 71        	addi	sp, sp, -0x80
80226e52: 86 fc        	sd	ra, 0x78(sp)
80226e54: a2 f8        	sd	s0, 0x70(sp)
80226e56: 00 01        	addi	s0, sp, 0x80
80226e58: 23 38 a4 f8  	sd	a0, -0x70(s0)
80226e5c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80226e60: 23 30 b4 fc  	sd	a1, -0x40(s0)
80226e64: 23 34 c4 fc  	sd	a2, -0x38(s0)
;     uint_impl! {
80226e68: 33 85 c5 40  	sub	a0, a1, a2
80226e6c: 23 3c a4 f8  	sd	a0, -0x68(s0)
80226e70: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226e74: 09 a0        	j	0x80226e76 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x26>
80226e76: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226e7a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226e7e: 09 a0        	j	0x80226e80 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x30>
80226e80: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226e84: 08 61        	ld	a0, 0x0(a0)
80226e86: 23 34 a4 fa  	sd	a0, -0x58(s0)
80226e8a: 09 a0        	j	0x80226e8c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x3c>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226e8c: 09 a0        	j	0x80226e8e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x3e>
80226e8e: 03 35 84 f9  	ld	a0, -0x68(s0)
;     uint_impl! {
80226e92: 83 35 84 fa  	ld	a1, -0x58(s0)
80226e96: 2e 95        	add	a0, a0, a1
80226e98: 23 34 a4 f8  	sd	a0, -0x78(s0)
80226e9c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226ea0: 09 a0        	j	0x80226ea2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x52>
80226ea2: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226ea6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226eaa: 09 a0        	j	0x80226eac <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x5c>
80226eac: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226eb0: 08 61        	ld	a0, 0x0(a0)
80226eb2: 23 38 a4 fa  	sd	a0, -0x50(s0)
80226eb6: 09 a0        	j	0x80226eb8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x68>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226eb8: 09 a0        	j	0x80226eba <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x6a>
80226eba: 03 35 84 f8  	ld	a0, -0x78(s0)
;     if logical_index >= capacity { logical_index - capacity } else { logical_index }
80226ebe: 83 35 04 fb  	ld	a1, -0x50(s0)
80226ec2: 63 78 b5 00  	bgeu	a0, a1, 0x80226ed2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x82>
80226ec6: 09 a0        	j	0x80226ec8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x78>
80226ec8: 03 35 84 f8  	ld	a0, -0x78(s0)
;     if logical_index >= capacity { logical_index - capacity } else { logical_index }
80226ecc: 23 30 a4 fa  	sd	a0, -0x60(s0)
80226ed0: 09 a8        	j	0x80226ee2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x92>
80226ed2: 03 35 84 f8  	ld	a0, -0x78(s0)
;     if logical_index >= capacity { logical_index - capacity } else { logical_index }
80226ed6: 83 35 04 fb  	ld	a1, -0x50(s0)
80226eda: 0d 8d        	sub	a0, a0, a1
80226edc: 23 30 a4 fa  	sd	a0, -0x60(s0)
80226ee0: 09 a0        	j	0x80226ee2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE+0x92>
;     }
80226ee2: 03 35 04 fa  	ld	a0, -0x60(s0)
80226ee6: e6 70        	ld	ra, 0x78(sp)
80226ee8: 46 74        	ld	s0, 0x70(sp)
80226eea: 09 61        	addi	sp, sp, 0x80
80226eec: 82 80        	ret

0000000080226eee <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9as_slices17he78a34e7383ac7b5E>:
;     pub fn as_slices(&self) -> (&[T], &[T]) {
80226eee: 6d 71        	addi	sp, sp, -0x110
80226ef0: 06 e6        	sd	ra, 0x108(sp)
80226ef2: 22 e2        	sd	s0, 0x100(sp)
80226ef4: 00 0a        	addi	s0, sp, 0x110
80226ef6: 23 3c b4 ee  	sd	a1, -0x108(s0)
80226efa: 23 30 a4 f0  	sd	a0, -0x100(s0)
80226efe: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         let (a_range, b_range) = self.slice_ranges(.., self.len);
80226f02: 90 6d        	ld	a2, 0x18(a1)
80226f04: 13 05 84 f0  	addi	a0, s0, -0xf8
80226f08: 97 00 00 00  	auipc	ra, 0x0
80226f0c: e7 80 00 8e  	jalr	-0x720(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$12slice_ranges17hd764c2b48cd7ba84E>
80226f10: 03 36 84 ef  	ld	a2, -0x108(s0)
80226f14: 83 35 04 f0  	ld	a1, -0x100(s0)
80226f18: 03 38 84 f0  	ld	a6, -0xf8(s0)
80226f1c: 23 38 04 f7  	sd	a6, -0x90(s0)
80226f20: 83 36 04 f1  	ld	a3, -0xf0(s0)
80226f24: 23 3c d4 f6  	sd	a3, -0x88(s0)
80226f28: 83 37 84 f1  	ld	a5, -0xe8(s0)
80226f2c: 23 30 f4 f8  	sd	a5, -0x80(s0)
80226f30: 03 35 04 f2  	ld	a0, -0xe0(s0)
80226f34: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         self.buf.ptr()
80226f38: 23 38 c4 f8  	sd	a2, -0x70(s0)
;         self.ptr.as_ptr()
80226f3c: 18 66        	ld	a4, 0x8(a2)
80226f3e: 23 3c e4 f8  	sd	a4, -0x68(s0)
;         self.pointer as *mut T
80226f42: 23 30 e4 fa  	sd	a4, -0x60(s0)
;         unsafe { intrinsics::offset(self, count) }
80226f46: 93 18 48 00  	slli	a7, a6, 0x4
80226f4a: 46 97        	add	a4, a4, a7
80226f4c: 23 34 e4 fa  	sd	a4, -0x58(s0)
;             ptr::slice_from_raw_parts_mut(self.ptr().add(range.start), range.end - range.start)
80226f50: b3 86 06 41  	sub	a3, a3, a6
80226f54: 23 38 d4 fa  	sd	a3, -0x50(s0)
;         self as _
80226f58: 23 3c e4 fa  	sd	a4, -0x48(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80226f5c: 23 3c e4 f2  	sd	a4, -0xc8(s0)
80226f60: 23 30 d4 f4  	sd	a3, -0xc0(s0)
80226f64: 03 37 84 f3  	ld	a4, -0xc8(s0)
80226f68: 83 36 04 f4  	ld	a3, -0xc0(s0)
80226f6c: 23 34 e4 f2  	sd	a4, -0xd8(s0)
80226f70: 23 38 d4 f2  	sd	a3, -0xd0(s0)
80226f74: 03 37 84 f2  	ld	a4, -0xd8(s0)
80226f78: 83 36 04 f3  	ld	a3, -0xd0(s0)
;         self.buf.ptr()
80226f7c: 23 30 c4 fc  	sd	a2, -0x40(s0)
;         self.ptr.as_ptr()
80226f80: 10 66        	ld	a2, 0x8(a2)
80226f82: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         self.pointer as *mut T
80226f86: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         unsafe { intrinsics::offset(self, count) }
80226f8a: 13 98 47 00  	slli	a6, a5, 0x4
80226f8e: 42 96        	add	a2, a2, a6
80226f90: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             ptr::slice_from_raw_parts_mut(self.ptr().add(range.start), range.end - range.start)
80226f94: 1d 8d        	sub	a0, a0, a5
80226f96: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
80226f9a: 23 34 c4 fe  	sd	a2, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80226f9e: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80226fa2: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80226fa6: 03 36 84 f5  	ld	a2, -0xa8(s0)
80226faa: 03 35 04 f6  	ld	a0, -0xa0(s0)
80226fae: 23 34 c4 f4  	sd	a2, -0xb8(s0)
80226fb2: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80226fb6: 03 36 84 f4  	ld	a2, -0xb8(s0)
80226fba: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         unsafe { (&*self.buffer_range(a_range), &*self.buffer_range(b_range)) }
80226fbe: 98 e1        	sd	a4, 0x0(a1)
80226fc0: 94 e5        	sd	a3, 0x8(a1)
80226fc2: 90 e9        	sd	a2, 0x10(a1)
80226fc4: 88 ed        	sd	a0, 0x18(a1)
80226fc6: b2 60        	ld	ra, 0x108(sp)
80226fc8: 12 64        	ld	s0, 0x100(sp)
;     }
80226fca: 51 61        	addi	sp, sp, 0x110
80226fcc: 82 80        	ret

0000000080226fce <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17hb09b20496b7377d5E>:
;     pub fn push_back(&mut self, value: T) {
80226fce: 19 71        	addi	sp, sp, -0x80
80226fd0: 86 fc        	sd	ra, 0x78(sp)
80226fd2: a2 f8        	sd	s0, 0x70(sp)
80226fd4: 00 01        	addi	s0, sp, 0x80
80226fd6: 23 30 c4 f8  	sd	a2, -0x80(s0)
80226fda: 23 34 b4 f8  	sd	a1, -0x78(s0)
80226fde: 23 38 a4 f8  	sd	a0, -0x70(s0)
80226fe2: 23 34 a4 fa  	sd	a0, -0x58(s0)
80226fe6: 23 38 b4 fa  	sd	a1, -0x50(s0)
80226fea: 23 3c c4 fa  	sd	a2, -0x48(s0)
;         self.len == self.capacity()
80226fee: 08 6d        	ld	a0, 0x18(a0)
80226ff0: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226ff4: 09 a0        	j	0x80226ff6 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17hb09b20496b7377d5E+0x28>
80226ff6: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80226ffa: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80226ffe: 09 a0        	j	0x80227000 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17hb09b20496b7377d5E+0x32>
80227000: 03 35 04 f9  	ld	a0, -0x70(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80227004: 08 61        	ld	a0, 0x0(a0)
80227006: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022700a: 09 a0        	j	0x8022700c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17hb09b20496b7377d5E+0x3e>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
8022700c: 09 a0        	j	0x8022700e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17hb09b20496b7377d5E+0x40>
8022700e: 03 35 84 f9  	ld	a0, -0x68(s0)
;         self.len == self.capacity()
80227012: 83 35 04 fa  	ld	a1, -0x60(s0)
;         if self.is_full() {
80227016: 63 07 b5 04  	beq	a0, a1, 0x80227064 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17hb09b20496b7377d5E+0x96>
8022701a: 09 a0        	j	0x8022701c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17hb09b20496b7377d5E+0x4e>
8022701c: 03 35 04 f9  	ld	a0, -0x70(s0)
;         unsafe { self.buffer_write(self.to_physical_idx(self.len), value) }
80227020: 0c 6d        	ld	a1, 0x18(a0)
80227022: 97 00 00 00  	auipc	ra, 0x0
80227026: e7 80 00 9f  	jalr	-0x610(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$15to_physical_idx17h0d362286c9ec2f8eE>
8022702a: 83 36 84 f8  	ld	a3, -0x78(s0)
8022702e: 83 35 04 f9  	ld	a1, -0x70(s0)
80227032: 2a 87        	mv	a4, a0
80227034: 03 35 04 f8  	ld	a0, -0x80(s0)
80227038: 23 34 e4 fc  	sd	a4, -0x38(s0)
;         self.buf.ptr()
8022703c: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.ptr.as_ptr()
80227040: 90 65        	ld	a2, 0x8(a1)
80227042: 23 3c c4 fc  	sd	a2, -0x28(s0)
;         self.pointer as *mut T
80227046: 23 30 c4 fe  	sd	a2, -0x20(s0)
;         unsafe { intrinsics::offset(self, count) }
8022704a: 12 07        	slli	a4, a4, 0x4
8022704c: 3a 96        	add	a2, a2, a4
8022704e: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         intrinsics::write_via_move(dst, src)
80227052: 14 e2        	sd	a3, 0x0(a2)
80227054: 08 e6        	sd	a0, 0x8(a2)
;         self.len += 1;
80227056: 88 6d        	ld	a0, 0x18(a1)
80227058: 05 05        	addi	a0, a0, 0x1
8022705a: 88 ed        	sd	a0, 0x18(a1)
8022705c: e6 70        	ld	ra, 0x78(sp)
8022705e: 46 74        	ld	s0, 0x70(sp)
;     }
80227060: 09 61        	addi	sp, sp, 0x80
80227062: 82 80        	ret
80227064: 03 35 04 f9  	ld	a0, -0x70(s0)
;             self.grow();
80227068: 97 00 00 00  	auipc	ra, 0x0
8022706c: e7 80 40 c2  	jalr	-0x3dc(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4grow17h51346e367a180bc2E>
80227070: 75 b7        	j	0x8022701c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9push_back17hb09b20496b7377d5E+0x4e>

0000000080227072 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E>:
;     unsafe fn wrap_copy(&mut self, src: usize, dst: usize, len: usize) {
80227072: 51 71        	addi	sp, sp, -0xf0
80227074: 86 f5        	sd	ra, 0xe8(sp)
80227076: a2 f1        	sd	s0, 0xe0(sp)
80227078: 80 19        	addi	s0, sp, 0xf0
8022707a: 23 38 d4 f4  	sd	a3, -0xb0(s0)
8022707e: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80227082: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80227086: 23 34 a4 f6  	sd	a0, -0x98(s0)
8022708a: 23 34 a4 f8  	sd	a0, -0x78(s0)
8022708e: 23 38 b4 f8  	sd	a1, -0x70(s0)
80227092: 23 3c c4 f8  	sd	a2, -0x68(s0)
80227096: 23 30 d4 fa  	sd	a3, -0x60(s0)
;         if T::IS_ZST || src == dst || len == 0 {
8022709a: 09 a0        	j	0x8022709c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x2a>
8022709c: 03 35 04 f6  	ld	a0, -0xa0(s0)
802270a0: 83 35 84 f5  	ld	a1, -0xa8(s0)
;         if T::IS_ZST || src == dst || len == 0 {
802270a4: 63 07 b5 00  	beq	a0, a1, 0x802270b2 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x40>
802270a8: 09 a0        	j	0x802270aa <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x38>
802270aa: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         if T::IS_ZST || src == dst || len == 0 {
802270ae: 19 c1        	beqz	a0, 0x802270b4 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x42>
802270b0: 19 a0        	j	0x802270b6 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x44>
802270b2: 2d a0        	j	0x802270dc <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x6a>
802270b4: 25 a0        	j	0x802270dc <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x6a>
802270b6: 03 36 04 f6  	ld	a2, -0xa0(s0)
802270ba: 83 35 84 f5  	ld	a1, -0xa8(s0)
802270be: 03 35 84 f6  	ld	a0, -0x98(s0)
;         let dst_after_src = self.wrap_sub(dst, src) < len;
802270c2: 97 00 00 00  	auipc	ra, 0x0
802270c6: e7 80 e0 d8  	jalr	-0x272(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$8wrap_sub17h9fad5b0c1cdf198fE>
802270ca: 83 35 04 f5  	ld	a1, -0xb0(s0)
802270ce: 33 35 b5 00  	sltu	a0, a0, a1
802270d2: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802270d6: a3 07 a4 fa  	sb	a0, -0x51(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802270da: 11 a0        	j	0x802270de <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x6c>
;     }
802270dc: 4d a8        	j	0x8022718e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x11c>
802270de: 03 35 84 f6  	ld	a0, -0x98(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802270e2: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802270e6: 09 a0        	j	0x802270e8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x76>
802270e8: 03 35 84 f6  	ld	a0, -0x98(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
802270ec: 08 61        	ld	a0, 0x0(a0)
802270ee: 23 38 a4 f6  	sd	a0, -0x90(s0)
802270f2: 09 a0        	j	0x802270f4 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x82>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
802270f4: 09 a0        	j	0x802270f6 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x84>
802270f6: 83 35 04 f6  	ld	a1, -0xa0(s0)
;         let src_pre_wrap_len = self.capacity() - src;
802270fa: 03 35 04 f7  	ld	a0, -0x90(s0)
802270fe: 0d 8d        	sub	a0, a0, a1
80227100: 23 30 a4 f4  	sd	a0, -0xc0(s0)
80227104: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80227108: 09 a0        	j	0x8022710a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x98>
8022710a: 03 35 84 f6  	ld	a0, -0x98(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
8022710e: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80227112: 09 a0        	j	0x80227114 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0xa2>
80227114: 03 35 84 f6  	ld	a0, -0x98(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80227118: 08 61        	ld	a0, 0x0(a0)
8022711a: 23 3c a4 f6  	sd	a0, -0x88(s0)
8022711e: 09 a0        	j	0x80227120 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0xae>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80227120: 09 a0        	j	0x80227122 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0xb0>
80227122: 03 35 04 f4  	ld	a0, -0xc0(s0)
80227126: 83 35 04 f5  	ld	a1, -0xb0(s0)
8022712a: 83 36 84 f5  	ld	a3, -0xa8(s0)
;         let dst_pre_wrap_len = self.capacity() - dst;
8022712e: 03 36 84 f7  	ld	a2, -0x88(s0)
80227132: 15 8e        	sub	a2, a2, a3
80227134: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80227138: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         let src_wraps = src_pre_wrap_len < len;
8022713c: b3 36 b5 00  	sltu	a3, a0, a1
80227140: 23 0b d4 fc  	sb	a3, -0x2a(s0)
;         let dst_wraps = dst_pre_wrap_len < len;
80227144: 33 36 b6 00  	sltu	a2, a2, a1
80227148: 23 3c c4 f2  	sd	a2, -0xc8(s0)
8022714c: a3 0b c4 fc  	sb	a2, -0x29(s0)
;         match (dst_after_src, src_wraps, dst_wraps) {
80227150: 63 68 b5 00  	bltu	a0, a1, 0x80227160 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0xee>
80227154: 09 a0        	j	0x80227156 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0xe4>
80227156: 03 35 84 f3  	ld	a0, -0xc8(s0)
;         match (dst_after_src, src_wraps, dst_wraps) {
8022715a: 05 89        	andi	a0, a0, 0x1
8022715c: 05 e5        	bnez	a0, 0x80227184 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x112>
8022715e: 31 a0        	j	0x8022716a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0xf8>
80227160: 03 35 84 f4  	ld	a0, -0xb8(s0)
;         match (dst_after_src, src_wraps, dst_wraps) {
80227164: 05 89        	andi	a0, a0, 0x1
80227166: 5d e5        	bnez	a0, 0x80227214 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x1a2>
80227168: 4d a0        	j	0x8022720a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x198>
8022716a: 83 36 04 f5  	ld	a3, -0xb0(s0)
8022716e: 03 36 84 f5  	ld	a2, -0xa8(s0)
80227172: 83 35 04 f6  	ld	a1, -0xa0(s0)
80227176: 03 35 84 f6  	ld	a0, -0x98(s0)
;                     self.copy(src, dst, len);
8022717a: 97 00 00 00  	auipc	ra, 0x0
8022717e: e7 80 60 a8  	jalr	-0x57a(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
;                 unsafe {
80227182: 31 a0        	j	0x8022718e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x11c>
80227184: 03 35 84 f4  	ld	a0, -0xb8(s0)
;         match (dst_after_src, src_wraps, dst_wraps) {
80227188: 05 89        	andi	a0, a0, 0x1
8022718a: 39 e1        	bnez	a0, 0x802271d0 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x15e>
8022718c: 29 a0        	j	0x80227196 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x124>
8022718e: ae 70        	ld	ra, 0xe8(sp)
80227190: 0e 74        	ld	s0, 0xe0(sp)
;     }
80227192: 6d 61        	addi	sp, sp, 0xf0
80227194: 82 80        	ret
80227196: 03 35 84 f6  	ld	a0, -0x98(s0)
8022719a: 83 36 04 f3  	ld	a3, -0xd0(s0)
8022719e: 83 35 04 f6  	ld	a1, -0xa0(s0)
802271a2: 03 36 84 f5  	ld	a2, -0xa8(s0)
;                     self.copy(src, dst, dst_pre_wrap_len);
802271a6: 97 00 00 00  	auipc	ra, 0x0
802271aa: e7 80 a0 a5  	jalr	-0x5a6(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
802271ae: 83 35 04 f6  	ld	a1, -0xa0(s0)
802271b2: 83 36 04 f3  	ld	a3, -0xd0(s0)
802271b6: 03 36 04 f5  	ld	a2, -0xb0(s0)
802271ba: 03 35 84 f6  	ld	a0, -0x98(s0)
;                     self.copy(src + dst_pre_wrap_len, 0, len - dst_pre_wrap_len);
802271be: b6 95        	add	a1, a1, a3
802271c0: b3 06 d6 40  	sub	a3, a2, a3
802271c4: 01 46        	li	a2, 0x0
802271c6: 97 00 00 00  	auipc	ra, 0x0
802271ca: e7 80 a0 a3  	jalr	-0x5c6(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
;                 unsafe {
802271ce: c1 b7        	j	0x8022718e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x11c>
802271d0: 83 36 04 f3  	ld	a3, -0xd0(s0)
802271d4: 83 35 04 f6  	ld	a1, -0xa0(s0)
802271d8: 03 35 84 f6  	ld	a0, -0x98(s0)
802271dc: 03 36 04 f5  	ld	a2, -0xb0(s0)
;                     self.copy(src + dst_pre_wrap_len, 0, len - dst_pre_wrap_len);
802271e0: b6 95        	add	a1, a1, a3
802271e2: b3 06 d6 40  	sub	a3, a2, a3
802271e6: 01 46        	li	a2, 0x0
802271e8: 97 00 00 00  	auipc	ra, 0x0
802271ec: e7 80 80 a1  	jalr	-0x5e8(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
802271f0: 03 35 84 f6  	ld	a0, -0x98(s0)
802271f4: 83 35 04 f6  	ld	a1, -0xa0(s0)
802271f8: 03 36 84 f5  	ld	a2, -0xa8(s0)
802271fc: 83 36 04 f3  	ld	a3, -0xd0(s0)
;                     self.copy(src, dst, dst_pre_wrap_len);
80227200: 97 00 00 00  	auipc	ra, 0x0
80227204: e7 80 00 a0  	jalr	-0x600(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
;                 unsafe {
80227208: 59 b7        	j	0x8022718e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x11c>
8022720a: 03 35 84 f3  	ld	a0, -0xc8(s0)
;         match (dst_after_src, src_wraps, dst_wraps) {
8022720e: 05 89        	andi	a0, a0, 0x1
80227210: 21 e5        	bnez	a0, 0x80227258 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x1e6>
80227212: 31 a0        	j	0x8022721e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x1ac>
80227214: 03 35 84 f3  	ld	a0, -0xc8(s0)
;         match (dst_after_src, src_wraps, dst_wraps) {
80227218: 05 89        	andi	a0, a0, 0x1
8022721a: 79 ed        	bnez	a0, 0x802272f8 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x286>
8022721c: 4d a0        	j	0x802272be <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x24c>
8022721e: 03 35 84 f6  	ld	a0, -0x98(s0)
80227222: 83 36 04 f4  	ld	a3, -0xc0(s0)
80227226: 03 36 84 f5  	ld	a2, -0xa8(s0)
8022722a: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                     self.copy(src, dst, src_pre_wrap_len);
8022722e: 97 00 00 00  	auipc	ra, 0x0
80227232: e7 80 20 9d  	jalr	-0x62e(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
80227236: 03 36 84 f5  	ld	a2, -0xa8(s0)
8022723a: 83 36 04 f4  	ld	a3, -0xc0(s0)
8022723e: 83 35 04 f5  	ld	a1, -0xb0(s0)
80227242: 03 35 84 f6  	ld	a0, -0x98(s0)
;                     self.copy(0, dst + src_pre_wrap_len, len - src_pre_wrap_len);
80227246: 36 96        	add	a2, a2, a3
80227248: b3 86 d5 40  	sub	a3, a1, a3
8022724c: 81 45        	li	a1, 0x0
8022724e: 97 00 00 00  	auipc	ra, 0x0
80227252: e7 80 20 9b  	jalr	-0x64e(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
;                 unsafe {
80227256: 25 bf        	j	0x8022718e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x11c>
80227258: 03 35 84 f6  	ld	a0, -0x98(s0)
8022725c: 03 37 04 f3  	ld	a4, -0xd0(s0)
80227260: 03 36 84 f5  	ld	a2, -0xa8(s0)
80227264: 83 36 04 f4  	ld	a3, -0xc0(s0)
80227268: 83 35 04 f6  	ld	a1, -0xa0(s0)
;                 let delta = dst_pre_wrap_len - src_pre_wrap_len;
8022726c: 15 8f        	sub	a4, a4, a3
8022726e: 23 30 e4 f2  	sd	a4, -0xe0(s0)
80227272: 23 3c e4 fc  	sd	a4, -0x28(s0)
;                     self.copy(src, dst, src_pre_wrap_len);
80227276: 97 00 00 00  	auipc	ra, 0x0
8022727a: e7 80 a0 98  	jalr	-0x676(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
8022727e: 03 36 04 f4  	ld	a2, -0xc0(s0)
80227282: 83 35 84 f5  	ld	a1, -0xa8(s0)
80227286: 03 35 84 f6  	ld	a0, -0x98(s0)
8022728a: 83 36 04 f2  	ld	a3, -0xe0(s0)
;                     self.copy(0, dst + src_pre_wrap_len, delta);
8022728e: 2e 96        	add	a2, a2, a1
80227290: 81 45        	li	a1, 0x0
80227292: 23 34 b4 f2  	sd	a1, -0xd8(s0)
80227296: 97 00 00 00  	auipc	ra, 0x0
8022729a: e7 80 a0 96  	jalr	-0x696(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
8022729e: 03 37 04 f3  	ld	a4, -0xd0(s0)
802272a2: 83 36 04 f5  	ld	a3, -0xb0(s0)
802272a6: 03 35 84 f6  	ld	a0, -0x98(s0)
802272aa: 83 35 04 f2  	ld	a1, -0xe0(s0)
802272ae: 03 36 84 f2  	ld	a2, -0xd8(s0)
;                     self.copy(delta, 0, len - dst_pre_wrap_len);
802272b2: 99 8e        	sub	a3, a3, a4
802272b4: 97 00 00 00  	auipc	ra, 0x0
802272b8: e7 80 c0 94  	jalr	-0x6b4(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
;             }
802272bc: c9 bd        	j	0x8022718e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x11c>
802272be: 83 36 04 f4  	ld	a3, -0xc0(s0)
802272c2: 03 36 84 f5  	ld	a2, -0xa8(s0)
802272c6: 03 35 84 f6  	ld	a0, -0x98(s0)
802272ca: 83 35 04 f5  	ld	a1, -0xb0(s0)
;                     self.copy(0, dst + src_pre_wrap_len, len - src_pre_wrap_len);
802272ce: 36 96        	add	a2, a2, a3
802272d0: b3 86 d5 40  	sub	a3, a1, a3
802272d4: 81 45        	li	a1, 0x0
802272d6: 97 00 00 00  	auipc	ra, 0x0
802272da: e7 80 a0 92  	jalr	-0x6d6(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
802272de: 03 35 84 f6  	ld	a0, -0x98(s0)
802272e2: 83 35 04 f6  	ld	a1, -0xa0(s0)
802272e6: 03 36 84 f5  	ld	a2, -0xa8(s0)
802272ea: 83 36 04 f4  	ld	a3, -0xc0(s0)
;                     self.copy(src, dst, src_pre_wrap_len);
802272ee: 97 00 00 00  	auipc	ra, 0x0
802272f2: e7 80 20 91  	jalr	-0x6ee(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
;                 unsafe {
802272f6: 61 bd        	j	0x8022718e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x11c>
802272f8: 03 35 84 f6  	ld	a0, -0x98(s0)
802272fc: 83 35 04 f5  	ld	a1, -0xb0(s0)
80227300: 83 36 04 f4  	ld	a3, -0xc0(s0)
80227304: 03 36 04 f3  	ld	a2, -0xd0(s0)
;                 let delta = src_pre_wrap_len - dst_pre_wrap_len;
80227308: 33 86 c6 40  	sub	a2, a3, a2
8022730c: 23 3c c4 f0  	sd	a2, -0xe8(s0)
80227310: 23 30 c4 fe  	sd	a2, -0x20(s0)
;                     self.copy(0, delta, len - src_pre_wrap_len);
80227314: b3 86 d5 40  	sub	a3, a1, a3
80227318: 81 45        	li	a1, 0x0
8022731a: 97 00 00 00  	auipc	ra, 0x0
8022731e: e7 80 60 8e  	jalr	-0x71a(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80227322: 09 a0        	j	0x80227324 <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x2b2>
80227324: 03 35 84 f6  	ld	a0, -0x98(s0)
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
80227328: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
8022732c: 09 a0        	j	0x8022732e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x2bc>
8022732e: 03 35 84 f6  	ld	a0, -0x98(s0)
;         if T::IS_ZST { usize::MAX } else { self.cap.0 }
80227332: 08 61        	ld	a0, 0x0(a0)
80227334: 23 30 a4 f8  	sd	a0, -0x80(s0)
80227338: 09 a0        	j	0x8022733a <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x2c8>
;         if T::IS_ZST { usize::MAX } else { self.buf.capacity() }
8022733a: 09 a0        	j	0x8022733c <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x2ca>
8022733c: 03 35 84 f6  	ld	a0, -0x98(s0)
80227340: 83 36 84 f1  	ld	a3, -0xe8(s0)
;                     self.copy(self.capacity() - delta, 0, delta);
80227344: 83 35 04 f8  	ld	a1, -0x80(s0)
80227348: 95 8d        	sub	a1, a1, a3
8022734a: 01 46        	li	a2, 0x0
8022734c: 97 00 00 00  	auipc	ra, 0x0
80227350: e7 80 40 8b  	jalr	-0x74c(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
80227354: 03 35 84 f6  	ld	a0, -0x98(s0)
80227358: 83 35 04 f6  	ld	a1, -0xa0(s0)
8022735c: 03 36 84 f5  	ld	a2, -0xa8(s0)
80227360: 83 36 04 f3  	ld	a3, -0xd0(s0)
;                     self.copy(src, dst, dst_pre_wrap_len);
80227364: 97 00 00 00  	auipc	ra, 0x0
80227368: e7 80 c0 89  	jalr	-0x764(ra) <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$4copy17hdd9fd31141bdcd26E>
;             }
8022736c: 0d b5        	j	0x8022718e <_ZN5alloc11collections9vec_deque21VecDeque$LT$T$C$A$GT$9wrap_copy17hebc31a447a6c6499E+0x11c>

000000008022736e <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E>:
;     fn next(&mut self) -> Option<T> {
8022736e: 55 71        	addi	sp, sp, -0xd0
80227370: 86 e5        	sd	ra, 0xc8(sp)
80227372: a2 e1        	sd	s0, 0xc0(sp)
80227374: 80 09        	addi	s0, sp, 0xd0
80227376: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022737a: 85 45        	li	a1, 0x1
;     pub const fn wrapping_byte_sub(self, count: usize) -> Self {
8022737c: 23 30 b4 f4  	sd	a1, -0xc0(s0)
;     pub const fn wrapping_sub(self, count: usize) -> Self
80227380: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;     int_impl! {
80227384: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80227388: 01 46        	li	a2, 0x0
8022738a: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8022738e: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80227392: 7d 56        	li	a2, -0x1
;     pub const fn wrapping_offset(self, count: isize) -> *const T
80227394: 23 34 c4 f6  	sd	a2, -0x98(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
80227398: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022739c: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         let ptr = if T::IS_ZST {
802273a0: 09 a0        	j	0x802273a2 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E+0x34>
802273a2: 03 35 84 f3  	ld	a0, -0xc8(s0)
;             if self.ptr == non_null!(self.end, T) {
802273a6: 93 05 85 00  	addi	a1, a0, 0x8
802273aa: 23 3c b4 fa  	sd	a1, -0x48(s0)
802273ae: 0c 6d        	ld	a1, 0x18(a0)
802273b0: 23 38 b4 f8  	sd	a1, -0x70(s0)
802273b4: 93 05 04 f9  	addi	a1, s0, -0x70
802273b8: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         self.as_ptr() == other.as_ptr()
802273bc: 08 65        	ld	a0, 0x8(a0)
802273be: 23 34 a4 fc  	sd	a0, -0x38(s0)
802273c2: 83 35 04 f9  	ld	a1, -0x70(s0)
802273c6: 23 38 b4 fc  	sd	a1, -0x30(s0)
;             if self.ptr == non_null!(self.end, T) {
802273ca: 63 02 b5 02  	beq	a0, a1, 0x802273ee <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E+0x80>
802273ce: 09 a0        	j	0x802273d0 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E+0x62>
802273d0: 03 36 84 f3  	ld	a2, -0xc8(s0)
;             let old = self.ptr;
802273d4: 08 66        	ld	a0, 0x8(a2)
802273d6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
802273da: 93 05 45 00  	addi	a1, a0, 0x4
802273de: 23 3c b4 f8  	sd	a1, -0x68(s0)
;             self.ptr = unsafe { old.add(1) };
802273e2: 83 35 84 f9  	ld	a1, -0x68(s0)
802273e6: 0c e6        	sd	a1, 0x8(a2)
;             old
802273e8: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         let ptr = if T::IS_ZST {
802273ec: 29 a0        	j	0x802273f6 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E+0x88>
802273ee: 01 45        	li	a0, 0x0
;                 return None;
802273f0: 23 20 a4 f8  	sw	a0, -0x80(s0)
; //!An easy file system isolated from the kernel
802273f4: 31 a8        	j	0x80227410 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E+0xa2>
;         Some(unsafe { ptr.read() })
802273f6: 03 35 84 f8  	ld	a0, -0x78(s0)
802273fa: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { ptr::read(self.pointer) }
802273fe: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         crate::intrinsics::read_via_copy(src)
80227402: 08 41        	lw	a0, 0x0(a0)
;         Some(unsafe { ptr.read() })
80227404: 23 22 a4 f8  	sw	a0, -0x7c(s0)
80227408: 05 45        	li	a0, 0x1
8022740a: 23 20 a4 f8  	sw	a0, -0x80(s0)
;     }
8022740e: 11 a0        	j	0x80227412 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E+0xa4>
80227410: 09 a0        	j	0x80227412 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc8b34195c4899d45E+0xa4>
80227412: 03 25 04 f8  	lw	a0, -0x80(s0)
80227416: 83 25 44 f8  	lw	a1, -0x7c(s0)
8022741a: ae 60        	ld	ra, 0xc8(sp)
8022741c: 0e 64        	ld	s0, 0xc0(sp)
8022741e: 69 61        	addi	sp, sp, 0xd0
80227420: 82 80        	ret

0000000080227422 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9size_hint17h40ed2db3adfd100bE>:
;     fn size_hint(&self) -> (usize, Option<usize>) {
80227422: 5d 71        	addi	sp, sp, -0x50
80227424: 86 e4        	sd	ra, 0x48(sp)
80227426: a2 e0        	sd	s0, 0x40(sp)
80227428: 80 08        	addi	s0, sp, 0x50
8022742a: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022742e: 23 3c a4 fa  	sd	a0, -0x48(s0)
80227432: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         let exact = if T::IS_ZST {
80227436: 09 a0        	j	0x80227438 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9size_hint17h40ed2db3adfd100bE+0x16>
80227438: 83 35 04 fb  	ld	a1, -0x50(s0)
;             unsafe { non_null!(self.end, T).sub_ptr(self.ptr) }
8022743c: 88 6d        	ld	a0, 0x18(a1)
8022743e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80227442: 8c 65        	ld	a1, 0x8(a1)
80227444: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         unsafe { self.pointer.sub_ptr(subtracted.pointer) }
80227448: 97 00 00 00  	auipc	ra, 0x0
8022744c: e7 80 60 15  	jalr	0x156(ra) <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17hddf2717575f9da5dE>
80227450: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         let exact = if T::IS_ZST {
80227454: 09 a0        	j	0x80227456 <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9size_hint17h40ed2db3adfd100bE+0x34>
80227456: 83 35 84 fb  	ld	a1, -0x48(s0)
;         (exact, Some(exact))
8022745a: 03 35 04 fc  	ld	a0, -0x40(s0)
8022745e: 23 38 a4 fc  	sd	a0, -0x30(s0)
80227462: 05 46        	li	a2, 0x1
80227464: 23 34 c4 fc  	sd	a2, -0x38(s0)
80227468: 88 e1        	sd	a0, 0x0(a1)
8022746a: 03 36 84 fc  	ld	a2, -0x38(s0)
8022746e: 03 35 04 fd  	ld	a0, -0x30(s0)
80227472: 90 e5        	sd	a2, 0x8(a1)
80227474: 88 e9        	sd	a0, 0x10(a1)
80227476: a6 60        	ld	ra, 0x48(sp)
80227478: 06 64        	ld	s0, 0x40(sp)
;     }
8022747a: 61 61        	addi	sp, sp, 0x50
8022747c: 82 80        	ret

000000008022747e <_ZN4core4iter6traits10exact_size17ExactSizeIterator3len17h10b40f5d087f2cfdE>:
;     fn len(&self) -> usize {
8022747e: 71 71        	addi	sp, sp, -0xb0
80227480: 06 f5        	sd	ra, 0xa8(sp)
80227482: 22 f1        	sd	s0, 0xa0(sp)
80227484: 00 19        	addi	s0, sp, 0xb0
80227486: aa 85        	mv	a1, a0
80227488: 01 45        	li	a0, 0x0
;         assert_eq!(upper, Some(lower));
8022748a: a3 03 a4 f6  	sb	a0, -0x99(s0)
8022748e: 23 38 b4 fc  	sd	a1, -0x30(s0)
80227492: 13 05 84 f7  	addi	a0, s0, -0x88
;         let (lower, upper) = self.size_hint();
80227496: 97 00 00 00  	auipc	ra, 0x0
8022749a: e7 80 c0 f8  	jalr	-0x74(ra) <_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$9size_hint17h40ed2db3adfd100bE>
8022749e: 83 35 84 f7  	ld	a1, -0x88(s0)
802274a2: 23 3c b4 f4  	sd	a1, -0xa8(s0)
802274a6: 23 3c b4 fc  	sd	a1, -0x28(s0)
802274aa: 03 36 04 f8  	ld	a2, -0x80(s0)
802274ae: 03 35 84 f8  	ld	a0, -0x78(s0)
802274b2: 23 34 c4 f6  	sd	a2, -0x98(s0)
802274b6: 23 38 a4 f6  	sd	a0, -0x90(s0)
802274ba: 13 05 84 f6  	addi	a0, s0, -0x98
;         assert_eq!(upper, Some(lower));
802274be: 23 30 a4 fe  	sd	a0, -0x20(s0)
802274c2: 23 3c b4 f8  	sd	a1, -0x68(s0)
802274c6: 85 45        	li	a1, 0x1
802274c8: 23 38 b4 f8  	sd	a1, -0x70(s0)
802274cc: 93 05 04 f9  	addi	a1, s0, -0x70
802274d0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         SpecOptionPartialEq::eq(self, other)
802274d4: 97 f0 ff ff  	auipc	ra, 0xfffff
802274d8: e7 80 c0 02  	jalr	0x2c(ra) <ekernel+0xffcd9500>
;         assert_eq!(upper, Some(lower));
802274dc: 1d e1        	bnez	a0, 0x80227502 <.Lpcrel_hi0+0x1c>
802274de: 09 a0        	j	0x802274e0 <_ZN4core4iter6traits10exact_size17ExactSizeIterator3len17h10b40f5d087f2cfdE+0x62>
802274e0: 01 45        	li	a0, 0x0
;         assert_eq!(upper, Some(lower));
802274e2: 23 30 a4 fa  	sd	a0, -0x60(s0)

00000000802274e6 <.Lpcrel_hi0>:
802274e6: 97 35 01 00  	auipc	a1, 0x13
802274ea: 13 87 a5 a3  	addi	a4, a1, -0x5c6
802274ee: 93 05 84 f6  	addi	a1, s0, -0x98
802274f2: 13 06 04 f9  	addi	a2, s0, -0x70
802274f6: 93 06 04 fa  	addi	a3, s0, -0x60
802274fa: 97 b0 ff ff  	auipc	ra, 0xffffb
802274fe: e7 80 20 3f  	jalr	0x3f2(ra) <ekernel+0xffcd58ec>
80227502: 03 35 84 f5  	ld	a0, -0xa8(s0)
80227506: aa 70        	ld	ra, 0xa8(sp)
80227508: 0a 74        	ld	s0, 0xa0(sp)
;     }
8022750a: 4d 61        	addi	sp, sp, 0xb0
8022750c: 82 80        	ret

000000008022750e <_ZN5alloc3vec9into_iter21IntoIter$LT$T$C$A$GT$16as_raw_mut_slice17h28b0f4ffa9056ba3E>:
;     fn as_raw_mut_slice(&mut self) -> *mut [T] {
8022750e: 59 71        	addi	sp, sp, -0x70
80227510: 86 f4        	sd	ra, 0x68(sp)
80227512: a2 f0        	sd	s0, 0x60(sp)
80227514: 80 18        	addi	s0, sp, 0x70
80227516: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         ptr::slice_from_raw_parts_mut(self.ptr.as_ptr(), self.len())
8022751a: 03 35 04 fa  	ld	a0, -0x60(s0)
8022751e: 08 65        	ld	a0, 0x8(a0)
80227520: 23 3c a4 f8  	sd	a0, -0x68(s0)
80227524: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.pointer as *mut T
80227528: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022752c: 13 05 04 fa  	addi	a0, s0, -0x60
;         ptr::slice_from_raw_parts_mut(self.ptr.as_ptr(), self.len())
80227530: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         (**self).len()
80227534: 03 35 04 fa  	ld	a0, -0x60(s0)
80227538: 97 00 00 00  	auipc	ra, 0x0
8022753c: e7 80 60 f4  	jalr	-0xba(ra) <_ZN4core4iter6traits10exact_size17ExactSizeIterator3len17h10b40f5d087f2cfdE>
80227540: 83 35 84 f9  	ld	a1, -0x68(s0)
80227544: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
80227548: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8022754c: 23 3c b4 fa  	sd	a1, -0x48(s0)
80227550: 23 30 a4 fc  	sd	a0, -0x40(s0)
80227554: 83 35 84 fb  	ld	a1, -0x48(s0)
80227558: 03 35 04 fc  	ld	a0, -0x40(s0)
8022755c: 23 34 b4 fa  	sd	a1, -0x58(s0)
80227560: 23 38 a4 fa  	sd	a0, -0x50(s0)
80227564: 03 35 84 fa  	ld	a0, -0x58(s0)
80227568: 83 35 04 fb  	ld	a1, -0x50(s0)
8022756c: a6 70        	ld	ra, 0x68(sp)
8022756e: 06 74        	ld	s0, 0x60(sp)
;     }
80227570: 65 61        	addi	sp, sp, 0x70
80227572: 82 80        	ret

0000000080227574 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h94ef61dbdf157b6aE>:
;     fn into_iter(self) -> I {
80227574: 01 11        	addi	sp, sp, -0x20
80227576: 06 ec        	sd	ra, 0x18(sp)
80227578: 22 e8        	sd	s0, 0x10(sp)
8022757a: 00 10        	addi	s0, sp, 0x20
8022757c: 23 34 b4 fe  	sd	a1, -0x18(s0)
80227580: aa 85        	mv	a1, a0
80227582: 03 35 84 fe  	ld	a0, -0x18(s0)
;         self
80227586: 10 6d        	ld	a2, 0x18(a0)
80227588: 90 ed        	sd	a2, 0x18(a1)
8022758a: 10 69        	ld	a2, 0x10(a0)
8022758c: 90 e9        	sd	a2, 0x10(a1)
8022758e: 10 65        	ld	a2, 0x8(a0)
80227590: 90 e5        	sd	a2, 0x8(a1)
80227592: 08 61        	ld	a0, 0x0(a0)
80227594: 88 e1        	sd	a0, 0x0(a1)
80227596: e2 60        	ld	ra, 0x18(sp)
80227598: 42 64        	ld	s0, 0x10(sp)
;     }
8022759a: 05 61        	addi	sp, sp, 0x20
8022759c: 82 80        	ret

000000008022759e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17hddf2717575f9da5dE>:
;     pub const unsafe fn sub_ptr(self, origin: *const T) -> usize
8022759e: 39 71        	addi	sp, sp, -0x40
802275a0: 06 fc        	sd	ra, 0x38(sp)
802275a2: 22 f8        	sd	s0, 0x30(sp)
802275a4: 80 00        	addi	s0, sp, 0x40
802275a6: 23 30 b4 fc  	sd	a1, -0x40(s0)
802275aa: 23 34 a4 fc  	sd	a0, -0x38(s0)
802275ae: 23 38 a4 fc  	sd	a0, -0x30(s0)
802275b2: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         assert_unsafe_precondition!(
802275b6: 09 a0        	j	0x802275b8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17hddf2717575f9da5dE+0x1a>
802275b8: 83 35 04 fc  	ld	a1, -0x40(s0)
802275bc: 03 35 84 fc  	ld	a0, -0x38(s0)
;         assert_unsafe_precondition!(
802275c0: 97 00 00 00  	auipc	ra, 0x0
802275c4: e7 80 00 03  	jalr	0x30(ra) <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17h313e3cb1cf284de4E>
802275c8: 09 a0        	j	0x802275ca <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17hddf2717575f9da5dE+0x2c>
802275ca: 11 45        	li	a0, 0x4
;     intrinsics::size_of::<T>()
802275cc: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
802275d0: 09 a0        	j	0x802275d2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17hddf2717575f9da5dE+0x34>
802275d2: 09 a0        	j	0x802275d4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr17hddf2717575f9da5dE+0x36>
802275d4: 03 35 84 fc  	ld	a0, -0x38(s0)
802275d8: 83 35 04 fc  	ld	a1, -0x40(s0)
;         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }
802275dc: 0d 8d        	sub	a0, a0, a1
802275de: 09 81        	srli	a0, a0, 0x2
802275e0: 23 34 a4 fe  	sd	a0, -0x18(s0)
802275e4: 03 35 84 fe  	ld	a0, -0x18(s0)
802275e8: e2 70        	ld	ra, 0x38(sp)
802275ea: 42 74        	ld	s0, 0x30(sp)
;     }
802275ec: 21 61        	addi	sp, sp, 0x40
802275ee: 82 80        	ret

00000000802275f0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7sub_ptr18precondition_check17h313e3cb1cf284de4E>:
;             const fn precondition_check($($name:$ty),*) {
802275f0: 01 11        	addi	sp, sp, -0x20
802275f2: 06 ec        	sd	ra, 0x18(sp)
802275f4: 22 e8        	sd	s0, 0x10(sp)
802275f6: 00 10        	addi	s0, sp, 0x20
802275f8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802275fc: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => runtime_ptr_ge(this, origin)
80227600: 63 7d b5 00  	bgeu	a0, a1, 0x8022761a <.Lpcrel_hi0+0x14>
80227604: 09 a0        	j	0x80227606 <.Lpcrel_hi0>

0000000080227606 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
80227606: 17 35 01 00  	auipc	a0, 0x13
8022760a: 13 05 25 93  	addi	a0, a0, -0x6ce
8022760e: 93 05 70 04  	li	a1, 0x47
80227612: 97 90 00 00  	auipc	ra, 0x9
80227616: e7 80 e0 c2  	jalr	-0x3d2(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8022761a: e2 60        	ld	ra, 0x18(sp)
8022761c: 42 64        	ld	s0, 0x10(sp)
;             }
8022761e: 05 61        	addi	sp, sp, 0x20
80227620: 82 80        	ret

0000000080227622 <_ZN4core3cmp3Ord3min17h761e5a0d4bbde9abE>:
;     fn min(self, other: Self) -> Self
80227622: 01 11        	addi	sp, sp, -0x20
80227624: 06 ec        	sd	ra, 0x18(sp)
80227626: 22 e8        	sd	s0, 0x10(sp)
80227628: 00 10        	addi	s0, sp, 0x20
8022762a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022762e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         min_by(self, other, Ord::cmp)
80227632: 97 00 00 00  	auipc	ra, 0x0
80227636: e7 80 40 0b  	jalr	0xb4(ra) <_ZN4core3cmp6min_by17h55298419ea2afe0cE>
8022763a: e2 60        	ld	ra, 0x18(sp)
8022763c: 42 64        	ld	s0, 0x10(sp)
;     }
8022763e: 05 61        	addi	sp, sp, 0x20
80227640: 82 80        	ret

0000000080227642 <_ZN4core3cmp3Ord3min17ha7e41dbc60ab1826E>:
;     fn min(self, other: Self) -> Self
80227642: 01 11        	addi	sp, sp, -0x20
80227644: 06 ec        	sd	ra, 0x18(sp)
80227646: 22 e8        	sd	s0, 0x10(sp)
80227648: 00 10        	addi	s0, sp, 0x20
8022764a: 23 24 a4 fe  	sw	a0, -0x18(s0)
8022764e: 23 26 b4 fe  	sw	a1, -0x14(s0)
;         min_by(self, other, Ord::cmp)
80227652: 97 00 00 00  	auipc	ra, 0x0
80227656: e7 80 00 01  	jalr	0x10(ra) <_ZN4core3cmp6min_by17h2e96d52e441acec4E>
8022765a: e2 60        	ld	ra, 0x18(sp)
8022765c: 42 64        	ld	s0, 0x10(sp)
;     }
8022765e: 05 61        	addi	sp, sp, 0x20
80227660: 82 80        	ret

0000000080227662 <_ZN4core3cmp6min_by17h2e96d52e441acec4E>:
; pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
80227662: 39 71        	addi	sp, sp, -0x40
80227664: 06 fc        	sd	ra, 0x38(sp)
80227666: 22 f8        	sd	s0, 0x30(sp)
80227668: 80 00        	addi	s0, sp, 0x40
8022766a: 23 24 a4 fc  	sw	a0, -0x38(s0)
8022766e: 23 26 b4 fc  	sw	a1, -0x34(s0)
80227672: 05 45        	li	a0, 0x1
;     match compare(&v1, &v2) {
80227674: 23 07 a4 fe  	sb	a0, -0x12(s0)
80227678: 13 05 84 fc  	addi	a0, s0, -0x38
8022767c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80227680: 13 05 c4 fc  	addi	a0, s0, -0x34
80227684: 23 30 a4 fe  	sd	a0, -0x20(s0)
80227688: 03 35 84 fd  	ld	a0, -0x28(s0)
8022768c: 83 35 04 fe  	ld	a1, -0x20(s0)
80227690: 97 60 ff ff  	auipc	ra, 0xffff6
80227694: e7 80 00 03  	jalr	0x30(ra) <ekernel+0xffcd06c0>
80227698: a3 0b a4 fc  	sb	a0, -0x29(s0)
8022769c: 03 45 74 fd  	lbu	a0, -0x29(s0)
802276a0: 05 25        	addiw	a0, a0, 0x1
802276a2: 13 75 f5 0f  	andi	a0, a0, 0xff
802276a6: 89 45        	li	a1, 0x2
802276a8: 63 65 b5 00  	bltu	a0, a1, 0x802276b2 <_ZN4core3cmp6min_by17h2e96d52e441acec4E+0x50>
802276ac: 09 a0        	j	0x802276ae <_ZN4core3cmp6min_by17h2e96d52e441acec4E+0x4c>
802276ae: 11 a8        	j	0x802276c2 <_ZN4core3cmp6min_by17h2e96d52e441acec4E+0x60>
802276b0: 00 00        	unimp
802276b2: 01 45        	li	a0, 0x0
;         Ordering::Less | Ordering::Equal => v1,
802276b4: 23 07 a4 fe  	sb	a0, -0x12(s0)
802276b8: 03 25 84 fc  	lw	a0, -0x38(s0)
802276bc: 23 28 a4 fc  	sw	a0, -0x30(s0)
; }
802276c0: 31 a0        	j	0x802276cc <_ZN4core3cmp6min_by17h2e96d52e441acec4E+0x6a>
;         Ordering::Greater => v2,
802276c2: 03 25 c4 fc  	lw	a0, -0x34(s0)
802276c6: 23 28 a4 fc  	sw	a0, -0x30(s0)
; }
802276ca: 01 a8        	j	0x802276da <_ZN4core3cmp6min_by17h2e96d52e441acec4E+0x78>
802276cc: 09 a0        	j	0x802276ce <_ZN4core3cmp6min_by17h2e96d52e441acec4E+0x6c>
802276ce: 03 25 04 fd  	lw	a0, -0x30(s0)
802276d2: e2 70        	ld	ra, 0x38(sp)
802276d4: 42 74        	ld	s0, 0x30(sp)
802276d6: 21 61        	addi	sp, sp, 0x40
802276d8: 82 80        	ret
802276da: 03 45 e4 fe  	lbu	a0, -0x12(s0)
802276de: 05 89        	andi	a0, a0, 0x1
802276e0: 7d d5        	beqz	a0, 0x802276ce <_ZN4core3cmp6min_by17h2e96d52e441acec4E+0x6c>
802276e2: 09 a0        	j	0x802276e4 <_ZN4core3cmp6min_by17h2e96d52e441acec4E+0x82>
802276e4: ed b7        	j	0x802276ce <_ZN4core3cmp6min_by17h2e96d52e441acec4E+0x6c>

00000000802276e6 <_ZN4core3cmp6min_by17h55298419ea2afe0cE>:
; pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
802276e6: 5d 71        	addi	sp, sp, -0x50
802276e8: 86 e4        	sd	ra, 0x48(sp)
802276ea: a2 e0        	sd	s0, 0x40(sp)
802276ec: 80 08        	addi	s0, sp, 0x50
802276ee: 23 3c a4 fa  	sd	a0, -0x48(s0)
802276f2: 23 30 b4 fc  	sd	a1, -0x40(s0)
802276f6: 05 45        	li	a0, 0x1
;     match compare(&v1, &v2) {
802276f8: 23 07 a4 fe  	sb	a0, -0x12(s0)
802276fc: 13 05 84 fb  	addi	a0, s0, -0x48
80227700: 23 3c a4 fc  	sd	a0, -0x28(s0)
80227704: 13 05 04 fc  	addi	a0, s0, -0x40
80227708: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022770c: 03 35 84 fd  	ld	a0, -0x28(s0)
80227710: 83 35 04 fe  	ld	a1, -0x20(s0)
80227714: 97 60 ff ff  	auipc	ra, 0xffff6
80227718: e7 80 40 fd  	jalr	-0x2c(ra) <ekernel+0xffcd06e8>
8022771c: a3 0b a4 fc  	sb	a0, -0x29(s0)
80227720: 03 45 74 fd  	lbu	a0, -0x29(s0)
80227724: 05 25        	addiw	a0, a0, 0x1
80227726: 13 75 f5 0f  	andi	a0, a0, 0xff
8022772a: 89 45        	li	a1, 0x2
8022772c: 63 65 b5 00  	bltu	a0, a1, 0x80227736 <_ZN4core3cmp6min_by17h55298419ea2afe0cE+0x50>
80227730: 09 a0        	j	0x80227732 <_ZN4core3cmp6min_by17h55298419ea2afe0cE+0x4c>
80227732: 11 a8        	j	0x80227746 <_ZN4core3cmp6min_by17h55298419ea2afe0cE+0x60>
80227734: 00 00        	unimp
80227736: 01 45        	li	a0, 0x0
;         Ordering::Less | Ordering::Equal => v1,
80227738: 23 07 a4 fe  	sb	a0, -0x12(s0)
8022773c: 03 35 84 fb  	ld	a0, -0x48(s0)
80227740: 23 34 a4 fc  	sd	a0, -0x38(s0)
; }
80227744: 31 a0        	j	0x80227750 <_ZN4core3cmp6min_by17h55298419ea2afe0cE+0x6a>
;         Ordering::Greater => v2,
80227746: 03 35 04 fc  	ld	a0, -0x40(s0)
8022774a: 23 34 a4 fc  	sd	a0, -0x38(s0)
; }
8022774e: 01 a8        	j	0x8022775e <_ZN4core3cmp6min_by17h55298419ea2afe0cE+0x78>
80227750: 09 a0        	j	0x80227752 <_ZN4core3cmp6min_by17h55298419ea2afe0cE+0x6c>
80227752: 03 35 84 fc  	ld	a0, -0x38(s0)
80227756: a6 60        	ld	ra, 0x48(sp)
80227758: 06 64        	ld	s0, 0x40(sp)
8022775a: 61 61        	addi	sp, sp, 0x50
8022775c: 82 80        	ret
8022775e: 03 45 e4 fe  	lbu	a0, -0x12(s0)
80227762: 05 89        	andi	a0, a0, 0x1
80227764: 7d d5        	beqz	a0, 0x80227752 <_ZN4core3cmp6min_by17h55298419ea2afe0cE+0x6c>
80227766: 09 a0        	j	0x80227768 <_ZN4core3cmp6min_by17h55298419ea2afe0cE+0x82>
80227768: ed b7        	j	0x80227752 <_ZN4core3cmp6min_by17h55298419ea2afe0cE+0x6c>

000000008022776a <_ZN7easy_fs3vfs5Inode3new17h053268dced329ee4E>:
;     pub fn new(
8022776a: 39 71        	addi	sp, sp, -0x40
8022776c: 06 fc        	sd	ra, 0x38(sp)
8022776e: 22 f8        	sd	s0, 0x30(sp)
80227770: 80 00        	addi	s0, sp, 0x40
80227772: 23 26 b4 fc  	sw	a1, -0x34(s0)
80227776: 23 38 c4 fc  	sd	a2, -0x30(s0)
8022777a: 23 3c d4 fc  	sd	a3, -0x28(s0)
8022777e: 23 30 e4 fe  	sd	a4, -0x20(s0)
80227782: 23 34 f4 fe  	sd	a5, -0x18(s0)
;             block_id: block_id as usize,
80227786: 82 15        	slli	a1, a1, 0x20
80227788: 81 91        	srli	a1, a1, 0x20
;         Self {
8022778a: 0c ed        	sd	a1, 0x18(a0)
8022778c: 10 f1        	sd	a2, 0x20(a0)
8022778e: 14 e1        	sd	a3, 0x0(a0)
80227790: 18 e5        	sd	a4, 0x8(a0)
80227792: 1c e9        	sd	a5, 0x10(a0)
80227794: e2 70        	ld	ra, 0x38(sp)
80227796: 42 74        	ld	s0, 0x30(sp)
;     }
80227798: 21 61        	addi	sp, sp, 0x40
8022779a: 82 80        	ret

000000008022779c <_ZN7easy_fs3vfs5Inode13find_inode_id17h96253d0b3ee115a0E>:
;     fn find_inode_id(&self, name: &str, disk_inode: &DiskInode) -> Option<u32> {
8022779c: 29 71        	addi	sp, sp, -0x140
8022779e: 06 fe        	sd	ra, 0x138(sp)
802277a0: 22 fa        	sd	s0, 0x130(sp)
802277a2: 80 02        	addi	s0, sp, 0x140
802277a4: 23 34 d4 ee  	sd	a3, -0x118(s0)
802277a8: ae 86        	mv	a3, a1
802277aa: aa 85        	mv	a1, a0
802277ac: 03 35 84 ee  	ld	a0, -0x118(s0)
802277b0: 23 38 b4 ee  	sd	a1, -0x110(s0)
802277b4: 23 3c d4 ee  	sd	a3, -0x108(s0)
802277b8: 23 30 c4 f0  	sd	a2, -0x100(s0)
802277bc: 23 30 b4 fc  	sd	a1, -0x40(s0)
802277c0: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         assert!(disk_inode.is_dir());
802277c4: 97 c0 ff ff  	auipc	ra, 0xffffc
802277c8: e7 80 80 56  	jalr	0x568(ra) <ekernel+0xffcd6d2c>
802277cc: 05 e1        	bnez	a0, 0x802277ec <.Lpcrel_hi1+0x14>
802277ce: 09 a0        	j	0x802277d0 <.Lpcrel_hi0>

00000000802277d0 <.Lpcrel_hi0>:
802277d0: 17 25 01 00  	auipc	a0, 0x12
802277d4: 13 05 f5 7a  	addi	a0, a0, 0x7af

00000000802277d8 <.Lpcrel_hi1>:
802277d8: 97 35 01 00  	auipc	a1, 0x13
802277dc: 13 86 05 81  	addi	a2, a1, -0x7f0
802277e0: 93 05 50 02  	li	a1, 0x25
802277e4: 97 90 00 00  	auipc	ra, 0x9
802277e8: e7 80 40 a3  	jalr	-0x5cc(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802277ec: 03 35 84 ee  	ld	a0, -0x118(s0)
;         let file_count = (disk_inode.size as usize) / DIRENT_SZ;
802277f0: 03 65 05 00  	lwu	a0, 0x0(a0)
802277f4: 15 81        	srli	a0, a0, 0x5
802277f6: 23 30 a4 ee  	sd	a0, -0x120(s0)
802277fa: 23 38 a4 fc  	sd	a0, -0x30(s0)
802277fe: 13 05 04 f1  	addi	a0, s0, -0xf0
;         let mut dirent = DirEntry::empty();
80227802: 97 e0 ff ff  	auipc	ra, 0xffffe
80227806: e7 80 80 ce  	jalr	-0x318(ra) <ekernel+0xffcd84ea>
8022780a: 03 35 04 ee  	ld	a0, -0x120(s0)
8022780e: 81 45        	li	a1, 0x0
;         for i in 0..file_count {
80227810: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80227814: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80227818: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022781c: 83 35 84 f3  	ld	a1, -0xc8(s0)
80227820: 97 80 ff ff  	auipc	ra, 0xffff8
80227824: e7 80 60 e9  	jalr	-0x16a(ra) <ekernel+0xffcd26b6>
80227828: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022782c: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80227830: 09 a0        	j	0x80227832 <.Lpcrel_hi1+0x5a>
80227832: 13 05 04 f4  	addi	a0, s0, -0xc0
;         for i in 0..file_count {
80227836: 97 80 ff ff  	auipc	ra, 0xffff8
8022783a: e7 80 c0 ce  	jalr	-0x314(ra) <ekernel+0xffcd2522>
8022783e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80227842: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80227846: 03 35 04 f5  	ld	a0, -0xb0(s0)
8022784a: 11 e5        	bnez	a0, 0x80227856 <.Lpcrel_hi1+0x7e>
8022784c: 09 a0        	j	0x8022784e <.Lpcrel_hi1+0x76>
8022784e: 01 45        	li	a0, 0x0
;         None
80227850: 23 24 a4 f0  	sw	a0, -0xf8(s0)
;     }
80227854: 39 a8        	j	0x80227872 <.Lpcrel_hi1+0x9a>
;         for i in 0..file_count {
80227856: 83 35 84 f5  	ld	a1, -0xa8(s0)
8022785a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 disk_inode.read_at(DIRENT_SZ * i, dirent.as_bytes_mut(), &self.block_device,),
8022785e: 13 95 55 00  	slli	a0, a1, 0x5
80227862: 23 3c a4 ec  	sd	a0, -0x128(s0)
80227866: 13 95 55 00  	slli	a0, a1, 0x5
8022786a: 15 81        	srli	a0, a0, 0x5
8022786c: 63 1b b5 06  	bne	a0, a1, 0x802278e2 <.Lpcrel_hi3>
80227870: 09 a8        	j	0x80227882 <.Lpcrel_hi1+0xaa>
;     }
80227872: 03 25 84 f0  	lw	a0, -0xf8(s0)
80227876: 83 25 c4 f0  	lw	a1, -0xf4(s0)
8022787a: f2 70        	ld	ra, 0x138(sp)
8022787c: 52 74        	ld	s0, 0x130(sp)
8022787e: 31 61        	addi	sp, sp, 0x140
80227880: 82 80        	ret
80227882: 13 05 04 f1  	addi	a0, s0, -0xf0
;                 disk_inode.read_at(DIRENT_SZ * i, dirent.as_bytes_mut(), &self.block_device,),
80227886: 97 e0 ff ff  	auipc	ra, 0xffffe
8022788a: e7 80 00 d9  	jalr	-0x270(ra) <ekernel+0xffcd8616>
8022788e: 03 37 04 ef  	ld	a4, -0x110(s0)
80227892: 2a 86        	mv	a2, a0
80227894: 03 35 84 ee  	ld	a0, -0x118(s0)
80227898: ae 86        	mv	a3, a1
8022789a: 83 35 84 ed  	ld	a1, -0x128(s0)
8022789e: 21 07        	addi	a4, a4, 0x8
802278a0: 97 d0 ff ff  	auipc	ra, 0xffffd
802278a4: e7 80 a0 59  	jalr	0x59a(ra) <ekernel+0xffcd7e3a>
802278a8: 23 38 a4 f6  	sd	a0, -0x90(s0)
802278ac: 13 05 04 f7  	addi	a0, s0, -0x90
;             assert_eq!(
802278b0: 23 30 a4 f6  	sd	a0, -0xa0(s0)

00000000802278b4 <.Lpcrel_hi2>:
802278b4: 17 c5 00 00  	auipc	a0, 0xc
802278b8: 13 05 45 b5  	addi	a0, a0, -0x4ac
802278bc: 23 34 a4 f6  	sd	a0, -0x98(s0)
802278c0: 03 35 04 f6  	ld	a0, -0xa0(s0)
802278c4: 23 34 a4 ec  	sd	a0, -0x138(s0)
802278c8: 23 30 a4 fe  	sd	a0, -0x20(s0)
802278cc: 83 35 84 f6  	ld	a1, -0x98(s0)
802278d0: 23 38 b4 ec  	sd	a1, -0x130(s0)
802278d4: 23 34 b4 fe  	sd	a1, -0x18(s0)
802278d8: 08 61        	ld	a0, 0x0(a0)
802278da: 8c 61        	ld	a1, 0x0(a1)
802278dc: 63 06 b5 04  	beq	a0, a1, 0x80227928 <.Lpcrel_hi5+0x14>
802278e0: 39 a8        	j	0x802278fe <.Lpcrel_hi4+0x14>

00000000802278e2 <.Lpcrel_hi3>:
;                 disk_inode.read_at(DIRENT_SZ * i, dirent.as_bytes_mut(), &self.block_device,),
802278e2: 17 25 01 00  	auipc	a0, 0x12
802278e6: 13 05 e5 73  	addi	a0, a0, 0x73e

00000000802278ea <.Lpcrel_hi4>:
802278ea: 97 25 01 00  	auipc	a1, 0x12
802278ee: 13 86 65 71  	addi	a2, a1, 0x716
802278f2: 93 05 10 02  	li	a1, 0x21
802278f6: 97 90 00 00  	auipc	ra, 0x9
802278fa: e7 80 20 92  	jalr	-0x6de(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
802278fe: 03 36 04 ed  	ld	a2, -0x130(s0)
80227902: 83 35 84 ec  	ld	a1, -0x138(s0)
80227906: 01 45        	li	a0, 0x0
;             assert_eq!(
80227908: a3 0f a4 f6  	sb	a0, -0x81(s0)
8022790c: 23 30 a4 f8  	sd	a0, -0x80(s0)
80227910: 03 45 f4 f7  	lbu	a0, -0x81(s0)

0000000080227914 <.Lpcrel_hi5>:
80227914: 97 26 01 00  	auipc	a3, 0x12
80227918: 13 87 46 73  	addi	a4, a3, 0x734
8022791c: 93 06 04 f8  	addi	a3, s0, -0x80
80227920: 97 b0 ff ff  	auipc	ra, 0xffffb
80227924: e7 80 a0 f9  	jalr	-0x66(ra) <ekernel+0xffcd58ba>
80227928: 13 05 04 f1  	addi	a0, s0, -0xf0
;             if dirent.name() == name {
8022792c: 97 e0 ff ff  	auipc	ra, 0xffffe
80227930: e7 80 a0 d0  	jalr	-0x2f6(ra) <ekernel+0xffcd8636>
80227934: 23 38 a4 fa  	sd	a0, -0x50(s0)
80227938: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022793c: 13 05 04 fb  	addi	a0, s0, -0x50
80227940: 93 05 84 ef  	addi	a1, s0, -0x108
80227944: 97 10 00 00  	auipc	ra, 0x1
80227948: e7 80 80 90  	jalr	-0x6f8(ra) <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h73205491a512ada3E>
8022794c: e3 03 05 ee  	beqz	a0, 0x80227832 <.Lpcrel_hi1+0x5a>
80227950: 09 a0        	j	0x80227952 <.Lpcrel_hi5+0x3e>
80227952: 13 05 04 f1  	addi	a0, s0, -0xf0
;                 return Some(dirent.inode_number() as u32);
80227956: 97 e0 ff ff  	auipc	ra, 0xffffe
8022795a: e7 80 00 dc  	jalr	-0x240(ra) <ekernel+0xffcd8716>
8022795e: 23 26 a4 f0  	sw	a0, -0xf4(s0)
80227962: 05 45        	li	a0, 0x1
80227964: 23 24 a4 f0  	sw	a0, -0xf8(s0)
;     }
80227968: 29 b7        	j	0x80227872 <.Lpcrel_hi1+0x9a>

000000008022796a <_ZN7easy_fs3vfs5Inode4find17hbca6b0c4d7d1a93bE>:
;     pub fn find(&self, name: &str) -> Option<Arc<Inode>> {
8022796a: 31 71        	addi	sp, sp, -0xc0
8022796c: 06 fd        	sd	ra, 0xb8(sp)
8022796e: 22 f9        	sd	s0, 0xb0(sp)
80227970: 80 01        	addi	s0, sp, 0xc0
80227972: 23 34 a4 f6  	sd	a0, -0x98(s0)
80227976: 23 38 b4 f6  	sd	a1, -0x90(s0)
8022797a: 23 3c c4 f6  	sd	a2, -0x88(s0)
;         let fs = self.fs.lock();
8022797e: 03 35 84 f6  	ld	a0, -0x98(s0)
80227982: 97 60 ff ff  	auipc	ra, 0xffff6
80227986: e7 80 60 82  	jalr	-0x7da(ra) <ekernel+0xffcd01a8>
8022798a: aa 85        	mv	a1, a0
8022798c: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80227990: 23 34 a4 fc  	sd	a0, -0x38(s0)
80227994: 23 3c a4 fc  	sd	a0, -0x28(s0)
80227998: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8022799a: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8022799e: 03 46 64 fd  	lbu	a2, -0x2a(s0)
802279a2: 85 45        	li	a1, 0x1
802279a4: 97 80 ff ff  	auipc	ra, 0xffff8
802279a8: e7 80 20 80  	jalr	-0x7fe(ra) <ekernel+0xffcd21a6>
802279ac: aa 85        	mv	a1, a0
802279ae: 23 30 b4 f6  	sd	a1, -0xa0(s0)
802279b2: 23 30 a4 fe  	sd	a0, -0x20(s0)
802279b6: 09 a0        	j	0x802279b8 <_ZN7easy_fs3vfs5Inode4find17hbca6b0c4d7d1a93bE+0x4e>
802279b8: 03 35 84 f5  	ld	a0, -0xa8(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
802279bc: 21 05        	addi	a0, a0, 0x8
802279be: 89 45        	li	a1, 0x2
802279c0: a3 0b b4 fc  	sb	a1, -0x29(s0)
802279c4: 83 45 74 fd  	lbu	a1, -0x29(s0)
802279c8: 97 70 ff ff  	auipc	ra, 0xffff7
802279cc: e7 80 20 79  	jalr	0x792(ra) <ekernel+0xffcd215a>
802279d0: 83 35 04 f6  	ld	a1, -0xa0(s0)
802279d4: 63 08 b5 00  	beq	a0, a1, 0x802279e4 <_ZN7easy_fs3vfs5Inode4find17hbca6b0c4d7d1a93bE+0x7a>
802279d8: 09 a0        	j	0x802279da <_ZN7easy_fs3vfs5Inode4find17hbca6b0c4d7d1a93bE+0x70>
;             crate::relax();
802279da: 97 80 ff ff  	auipc	ra, 0xffff8
802279de: e7 80 40 87  	jalr	-0x78c(ra) <ekernel+0xffcd224e>
802279e2: d9 bf        	j	0x802279b8 <_ZN7easy_fs3vfs5Inode4find17hbca6b0c4d7d1a93bE+0x4e>
802279e4: 83 35 04 f6  	ld	a1, -0xa0(s0)
802279e8: 03 35 84 f5  	ld	a0, -0xa8(s0)
;             next_serving: &self.next_serving,
802279ec: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
802279f0: 41 05        	addi	a0, a0, 0x10
802279f2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
802279f6: 23 38 c4 fa  	sd	a2, -0x50(s0)
802279fa: 23 30 b4 fc  	sd	a1, -0x40(s0)
802279fe: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
80227a02: 03 35 04 fc  	ld	a0, -0x40(s0)
80227a06: 23 38 a4 f8  	sd	a0, -0x70(s0)
80227a0a: 03 35 84 fb  	ld	a0, -0x48(s0)
80227a0e: 23 34 a4 f8  	sd	a0, -0x78(s0)
80227a12: 03 35 04 fb  	ld	a0, -0x50(s0)
80227a16: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self.read_disk_inode(|disk_inode| {
80227a1a: 03 35 84 f6  	ld	a0, -0x98(s0)
80227a1e: 93 05 84 f6  	addi	a1, s0, -0x98
80227a22: 23 3c b4 f8  	sd	a1, -0x68(s0)
80227a26: 93 05 04 f7  	addi	a1, s0, -0x90
80227a2a: 23 30 b4 fa  	sd	a1, -0x60(s0)
80227a2e: 93 05 04 f8  	addi	a1, s0, -0x80
80227a32: 23 34 b4 f4  	sd	a1, -0xb8(s0)
80227a36: 23 34 b4 fa  	sd	a1, -0x58(s0)
80227a3a: 93 05 84 f9  	addi	a1, s0, -0x68
80227a3e: 97 70 ff ff  	auipc	ra, 0xffff7
80227a42: e7 80 60 8f  	jalr	-0x70a(ra) <ekernel+0xffcd1334>
80227a46: aa 85        	mv	a1, a0
80227a48: 03 35 84 f4  	ld	a0, -0xb8(s0)
80227a4c: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     }
80227a50: 97 60 ff ff  	auipc	ra, 0xffff6
80227a54: e7 80 20 ff  	jalr	-0xe(ra) <ekernel+0xffcd0a42>
80227a58: 03 35 04 f5  	ld	a0, -0xb0(s0)
80227a5c: ea 70        	ld	ra, 0xb8(sp)
80227a5e: 4a 74        	ld	s0, 0xb0(sp)
80227a60: 29 61        	addi	sp, sp, 0xc0
80227a62: 82 80        	ret

0000000080227a64 <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E>:
;     fn increase_size(
80227a64: 71 71        	addi	sp, sp, -0xb0
80227a66: 06 f5        	sd	ra, 0xa8(sp)
80227a68: 22 f1        	sd	s0, 0xa0(sp)
80227a6a: 00 19        	addi	s0, sp, 0xb0
80227a6c: 23 30 d4 f6  	sd	a3, -0xa0(s0)
80227a70: 23 34 c4 f6  	sd	a2, -0x98(s0)
80227a74: 2a 87        	mv	a4, a0
80227a76: 23 38 e4 f6  	sd	a4, -0x90(s0)
80227a7a: 1b 85 05 00  	sext.w	a0, a1
80227a7e: ae 87        	mv	a5, a1
80227a80: 23 3c f4 f6  	sd	a5, -0x88(s0)
80227a84: 23 34 e4 fc  	sd	a4, -0x38(s0)
80227a88: 23 2a b4 fc  	sw	a1, -0x2c(s0)
80227a8c: 23 3c c4 fc  	sd	a2, -0x28(s0)
80227a90: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         if new_size < disk_inode.size {
80227a94: 0c 42        	lw	a1, 0x0(a2)
80227a96: 63 69 b5 04  	bltu	a0, a1, 0x80227ae8 <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E+0x84>
80227a9a: 09 a0        	j	0x80227a9c <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E+0x38>
80227a9c: 83 35 84 f7  	ld	a1, -0x88(s0)
80227aa0: 03 35 84 f6  	ld	a0, -0x98(s0)
;         let blocks_needed = disk_inode.blocks_num_needed(new_size);
80227aa4: 97 c0 ff ff  	auipc	ra, 0xffffc
80227aa8: e7 80 40 4b  	jalr	0x4b4(ra) <ekernel+0xffcd6f58>
80227aac: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80227ab0: 23 26 a4 fe  	sw	a0, -0x14(s0)
80227ab4: 13 05 04 f8  	addi	a0, s0, -0x80
;         let mut v: Vec<u32> = Vec::new();
80227ab8: 97 b0 ff ff  	auipc	ra, 0xffffb
80227abc: e7 80 20 bf  	jalr	-0x40e(ra) <ekernel+0xffcd56aa>
80227ac0: 03 35 84 f5  	ld	a0, -0xa8(s0)
80227ac4: 81 45        	li	a1, 0x0
;         for _ in 0..blocks_needed {
80227ac6: 23 2c b4 f8  	sw	a1, -0x68(s0)
80227aca: 23 2e a4 f8  	sw	a0, -0x64(s0)
80227ace: 83 25 c4 f9  	lw	a1, -0x64(s0)
80227ad2: 03 25 84 f9  	lw	a0, -0x68(s0)
80227ad6: 97 80 ff ff  	auipc	ra, 0xffff8
80227ada: e7 80 80 bc  	jalr	-0x438(ra) <ekernel+0xffcd269e>
80227ade: 23 20 a4 fa  	sw	a0, -0x60(s0)
80227ae2: 23 22 b4 fa  	sw	a1, -0x5c(s0)
80227ae6: 29 a0        	j	0x80227af0 <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E+0x8c>
80227ae8: aa 70        	ld	ra, 0xa8(sp)
80227aea: 0a 74        	ld	s0, 0xa0(sp)
;     }
80227aec: 4d 61        	addi	sp, sp, 0xb0
80227aee: 82 80        	ret
80227af0: 13 05 04 fa  	addi	a0, s0, -0x60
;         for _ in 0..blocks_needed {
80227af4: 97 80 ff ff  	auipc	ra, 0xffff8
80227af8: e7 80 20 a1  	jalr	-0x5ee(ra) <ekernel+0xffcd2506>
80227afc: 23 24 a4 fa  	sw	a0, -0x58(s0)
80227b00: 23 26 b4 fa  	sw	a1, -0x54(s0)
80227b04: 03 25 84 fa  	lw	a0, -0x58(s0)
80227b08: 0d ed        	bnez	a0, 0x80227b42 <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E+0xde>
80227b0a: 09 a0        	j	0x80227b0c <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E+0xa8>
80227b0c: 83 35 84 f7  	ld	a1, -0x88(s0)
80227b10: 03 35 84 f6  	ld	a0, -0x98(s0)
80227b14: 03 36 04 f7  	ld	a2, -0x90(s0)
;         disk_inode.increase_size(new_size, v, &self.block_device);
80227b18: 83 36 04 f9  	ld	a3, -0x70(s0)
80227b1c: 23 30 d4 fc  	sd	a3, -0x40(s0)
80227b20: 83 36 84 f8  	ld	a3, -0x78(s0)
80227b24: 23 3c d4 fa  	sd	a3, -0x48(s0)
80227b28: 83 36 04 f8  	ld	a3, -0x80(s0)
80227b2c: 23 38 d4 fa  	sd	a3, -0x50(s0)
80227b30: 93 06 86 00  	addi	a3, a2, 0x8
80227b34: 13 06 04 fb  	addi	a2, s0, -0x50
80227b38: 97 d0 ff ff  	auipc	ra, 0xffffd
80227b3c: e7 80 40 8e  	jalr	-0x71c(ra) <ekernel+0xffcd741c>
80227b40: 65 b7        	j	0x80227ae8 <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E+0x84>
80227b42: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             v.push(fs.alloc_data());
80227b46: 97 b0 ff ff  	auipc	ra, 0xffffb
80227b4a: e7 80 00 b1  	jalr	-0x4f0(ra) <ekernel+0xffcd5656>
80227b4e: 97 90 ff ff  	auipc	ra, 0xffff9
80227b52: e7 80 00 21  	jalr	0x210(ra) <ekernel+0xffcd3d5e>
80227b56: aa 85        	mv	a1, a0
80227b58: 13 05 04 f8  	addi	a0, s0, -0x80
80227b5c: 97 b0 ff ff  	auipc	ra, 0xffffb
80227b60: e7 80 a0 c2  	jalr	-0x3d6(ra) <ekernel+0xffcd5786>
80227b64: 71 b7        	j	0x80227af0 <_ZN7easy_fs3vfs5Inode13increase_size17h1f9492105e633311E+0x8c>

0000000080227b66 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E>:
;     pub fn create(&self, name: &str) -> Option<Arc<Inode>> {
80227b66: 05 71        	addi	sp, sp, -0x1e0
80227b68: 86 ef        	sd	ra, 0x1d8(sp)
80227b6a: a2 eb        	sd	s0, 0x1d0(sp)
80227b6c: 80 13        	addi	s0, sp, 0x1e0
80227b6e: 23 38 a4 e8  	sd	a0, -0x170(s0)
80227b72: 23 3c b4 e8  	sd	a1, -0x168(s0)
80227b76: 23 30 c4 ea  	sd	a2, -0x160(s0)
;         let mut fs = self.fs.lock();
80227b7a: 03 35 04 e9  	ld	a0, -0x170(s0)
80227b7e: 97 50 ff ff  	auipc	ra, 0xffff5
80227b82: e7 80 a0 62  	jalr	0x62a(ra) <ekernel+0xffcd01a8>
80227b86: aa 85        	mv	a1, a0
80227b88: 23 30 b4 e8  	sd	a1, -0x180(s0)
80227b8c: 23 34 a4 fa  	sd	a0, -0x58(s0)
80227b90: 23 3c a4 fa  	sd	a0, -0x48(s0)
80227b94: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80227b96: 23 0b b4 fa  	sb	a1, -0x4a(s0)
80227b9a: 03 46 64 fb  	lbu	a2, -0x4a(s0)
80227b9e: 85 45        	li	a1, 0x1
80227ba0: 97 70 ff ff  	auipc	ra, 0xffff7
80227ba4: e7 80 60 60  	jalr	0x606(ra) <ekernel+0xffcd21a6>
80227ba8: aa 85        	mv	a1, a0
80227baa: 23 34 b4 e8  	sd	a1, -0x178(s0)
80227bae: 23 30 a4 fc  	sd	a0, -0x40(s0)
80227bb2: 09 a0        	j	0x80227bb4 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x4e>
80227bb4: 03 35 04 e8  	ld	a0, -0x180(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80227bb8: 21 05        	addi	a0, a0, 0x8
80227bba: 89 45        	li	a1, 0x2
80227bbc: a3 0b b4 fa  	sb	a1, -0x49(s0)
80227bc0: 83 45 74 fb  	lbu	a1, -0x49(s0)
80227bc4: 97 70 ff ff  	auipc	ra, 0xffff7
80227bc8: e7 80 60 59  	jalr	0x596(ra) <ekernel+0xffcd215a>
80227bcc: 83 35 84 e8  	ld	a1, -0x178(s0)
80227bd0: 63 08 b5 00  	beq	a0, a1, 0x80227be0 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x7a>
80227bd4: 09 a0        	j	0x80227bd6 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x70>
;             crate::relax();
80227bd6: 97 70 ff ff  	auipc	ra, 0xffff7
80227bda: e7 80 80 67  	jalr	0x678(ra) <ekernel+0xffcd224e>
80227bde: d9 bf        	j	0x80227bb4 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x4e>
80227be0: 83 35 84 e8  	ld	a1, -0x178(s0)
80227be4: 03 35 04 e8  	ld	a0, -0x180(s0)
;             next_serving: &self.next_serving,
80227be8: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80227bec: 41 05        	addi	a0, a0, 0x10
80227bee: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         TicketMutexGuard {
80227bf2: 23 38 c4 f8  	sd	a2, -0x70(s0)
80227bf6: 23 30 b4 fa  	sd	a1, -0x60(s0)
80227bfa: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         MutexGuard {
80227bfe: 03 35 04 fa  	ld	a0, -0x60(s0)
80227c02: 23 30 a4 ec  	sd	a0, -0x140(s0)
80227c06: 03 35 84 f9  	ld	a0, -0x68(s0)
80227c0a: 23 3c a4 ea  	sd	a0, -0x148(s0)
80227c0e: 03 35 04 f9  	ld	a0, -0x70(s0)
80227c12: 23 38 a4 ea  	sd	a0, -0x150(s0)
80227c16: 13 05 04 e9  	addi	a0, s0, -0x170
;         let op = |root_inode: &DiskInode| {
80227c1a: 23 34 a4 ec  	sd	a0, -0x138(s0)
80227c1e: 13 05 84 e9  	addi	a0, s0, -0x168
80227c22: 23 38 a4 ec  	sd	a0, -0x130(s0)
;         if self.read_disk_inode(op).is_some() {
80227c26: 03 35 04 e9  	ld	a0, -0x170(s0)
80227c2a: 83 35 84 ec  	ld	a1, -0x138(s0)
80227c2e: 03 36 04 ed  	ld	a2, -0x130(s0)
80227c32: 97 70 ff ff  	auipc	ra, 0xffff7
80227c36: e7 80 20 95  	jalr	-0x6ae(ra) <ekernel+0xffcd1584>
80227c3a: 23 2e a4 ec  	sw	a0, -0x124(s0)
80227c3e: 23 20 b4 ee  	sw	a1, -0x120(s0)
80227c42: 13 05 c4 ed  	addi	a0, s0, -0x124
80227c46: 97 f0 ff ff  	auipc	ra, 0xfffff
80227c4a: e7 80 a0 85  	jalr	-0x7a6(ra) <ekernel+0xffcd94a0>
80227c4e: 63 17 05 20  	bnez	a0, 0x80227e5c <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x2f6>
80227c52: 09 a0        	j	0x80227c54 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0xee>
80227c54: 13 05 04 eb  	addi	a0, s0, -0x150
80227c58: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
;         let new_inode_id = fs.alloc_inode();
80227c5c: 97 b0 ff ff  	auipc	ra, 0xffffb
80227c60: e7 80 a0 9f  	jalr	-0x606(ra) <ekernel+0xffcd5656>
80227c64: 97 90 ff ff  	auipc	ra, 0xffff9
80227c68: e7 80 00 0b  	jalr	0xb0(ra) <ekernel+0xffcd3d14>
80227c6c: aa 85        	mv	a1, a0
80227c6e: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80227c72: 23 22 b4 ee  	sw	a1, -0x11c(s0)
;         let (new_inode_block_id, new_inode_block_offset) = fs.get_disk_inode_pos(new_inode_id);
80227c76: 97 b0 ff ff  	auipc	ra, 0xffffb
80227c7a: e7 80 40 9c  	jalr	-0x63c(ra) <ekernel+0xffcd563a>
80227c7e: 83 25 44 ee  	lw	a1, -0x11c(s0)
80227c82: 97 90 ff ff  	auipc	ra, 0xffff9
80227c86: e7 80 00 f6  	jalr	-0xa0(ra) <ekernel+0xffcd3be2>
80227c8a: 2e 86        	mv	a2, a1
80227c8c: 23 3c c4 e4  	sd	a2, -0x1a8(s0)
80227c90: 23 2a a4 f4  	sw	a0, -0xac(s0)
80227c94: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;         get_block_cache(new_inode_block_id as usize, Arc::clone(&self.block_device))
80227c98: 02 15        	slli	a0, a0, 0x20
80227c9a: 01 91        	srli	a0, a0, 0x20
80227c9c: 23 30 a4 e6  	sd	a0, -0x1a0(s0)
80227ca0: 03 35 04 e9  	ld	a0, -0x170(s0)
80227ca4: 21 05        	addi	a0, a0, 0x8
80227ca6: 97 50 ff ff  	auipc	ra, 0xffff5
80227caa: e7 80 a0 43  	jalr	0x43a(ra) <ekernel+0xffcd00e0>
80227cae: 2a 86        	mv	a2, a0
80227cb0: 03 35 04 e6  	ld	a0, -0x1a0(s0)
80227cb4: 23 34 c4 e6  	sd	a2, -0x198(s0)
80227cb8: 2e 86        	mv	a2, a1
80227cba: 83 35 84 e6  	ld	a1, -0x198(s0)
80227cbe: 97 e0 ff ff  	auipc	ra, 0xffffe
80227cc2: e7 80 60 14  	jalr	0x146(ra) <ekernel+0xffcd8e04>
80227cc6: 23 30 a4 f0  	sd	a0, -0x100(s0)
80227cca: 13 05 04 f0  	addi	a0, s0, -0x100
80227cce: 97 50 ff ff  	auipc	ra, 0xffff5
80227cd2: e7 80 60 4b  	jalr	0x4b6(ra) <ekernel+0xffcd0184>
80227cd6: aa 85        	mv	a1, a0
80227cd8: 23 38 b4 e6  	sd	a1, -0x190(s0)
80227cdc: 23 34 a4 f8  	sd	a0, -0x78(s0)
80227ce0: 23 3c a4 fc  	sd	a0, -0x28(s0)
80227ce4: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80227ce6: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80227cea: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80227cee: 85 45        	li	a1, 0x1
80227cf0: 97 70 ff ff  	auipc	ra, 0xffff7
80227cf4: e7 80 60 4b  	jalr	0x4b6(ra) <ekernel+0xffcd21a6>
80227cf8: aa 85        	mv	a1, a0
80227cfa: 23 3c b4 e6  	sd	a1, -0x188(s0)
80227cfe: 23 30 a4 fe  	sd	a0, -0x20(s0)
80227d02: 09 a0        	j	0x80227d04 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x19e>
80227d04: 03 35 04 e7  	ld	a0, -0x190(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80227d08: 21 05        	addi	a0, a0, 0x8
80227d0a: 89 45        	li	a1, 0x2
80227d0c: a3 0b b4 fc  	sb	a1, -0x29(s0)
80227d10: 83 45 74 fd  	lbu	a1, -0x29(s0)
80227d14: 97 70 ff ff  	auipc	ra, 0xffff7
80227d18: e7 80 60 44  	jalr	0x446(ra) <ekernel+0xffcd215a>
80227d1c: 83 35 84 e7  	ld	a1, -0x188(s0)
80227d20: 63 08 b5 00  	beq	a0, a1, 0x80227d30 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x1ca>
80227d24: 09 a0        	j	0x80227d26 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x1c0>
;             crate::relax();
80227d26: 97 70 ff ff  	auipc	ra, 0xffff7
80227d2a: e7 80 80 52  	jalr	0x528(ra) <ekernel+0xffcd224e>
80227d2e: d9 bf        	j	0x80227d04 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x19e>
80227d30: 83 35 84 e7  	ld	a1, -0x188(s0)
80227d34: 03 35 04 e7  	ld	a0, -0x190(s0)
;             next_serving: &self.next_serving,
80227d38: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80227d3c: 41 05        	addi	a0, a0, 0x10
80227d3e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
80227d42: 23 38 c4 f6  	sd	a2, -0x90(s0)
80227d46: 23 30 b4 f8  	sd	a1, -0x80(s0)
80227d4a: 23 3c a4 f6  	sd	a0, -0x88(s0)
;         MutexGuard {
80227d4e: 03 35 04 f8  	ld	a0, -0x80(s0)
80227d52: 23 3c a4 ee  	sd	a0, -0x108(s0)
80227d56: 03 35 84 f7  	ld	a0, -0x88(s0)
80227d5a: 23 38 a4 ee  	sd	a0, -0x110(s0)
80227d5e: 03 35 04 f7  	ld	a0, -0x90(s0)
80227d62: 23 34 a4 ee  	sd	a0, -0x118(s0)
80227d66: 13 05 84 ee  	addi	a0, s0, -0x118
80227d6a: 23 30 a4 e2  	sd	a0, -0x1e0(s0)
;         get_block_cache(new_inode_block_id as usize, Arc::clone(&self.block_device))
80227d6e: 97 b0 ff ff  	auipc	ra, 0xffffb
80227d72: e7 80 40 90  	jalr	-0x6fc(ra) <ekernel+0xffcd5672>
80227d76: 83 35 84 e5  	ld	a1, -0x1a8(s0)
80227d7a: 97 a0 ff ff  	auipc	ra, 0xffffa
80227d7e: e7 80 c0 c1  	jalr	-0x3e4(ra) <ekernel+0xffcd4996>
80227d82: 03 35 04 e2  	ld	a0, -0x1e0(s0)
;             });
80227d86: 97 60 ff ff  	auipc	ra, 0xffff6
80227d8a: e7 80 00 d1  	jalr	-0x2f0(ra) <ekernel+0xffcd0a96>
80227d8e: 13 05 04 f0  	addi	a0, s0, -0x100
80227d92: 97 60 ff ff  	auipc	ra, 0xffff6
80227d96: e7 80 c0 99  	jalr	-0x664(ra) <ekernel+0xffcd072e>
;         self.modify_disk_inode(|root_inode| {
80227d9a: 03 35 04 e9  	ld	a0, -0x170(s0)
80227d9e: 93 05 04 e9  	addi	a1, s0, -0x170
80227da2: 23 34 b4 f0  	sd	a1, -0xf8(s0)
80227da6: 93 05 04 eb  	addi	a1, s0, -0x150
80227daa: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
80227dae: 23 38 b4 f0  	sd	a1, -0xf0(s0)
80227db2: 93 05 84 e9  	addi	a1, s0, -0x168
80227db6: 23 3c b4 f0  	sd	a1, -0xe8(s0)
80227dba: 93 05 44 ee  	addi	a1, s0, -0x11c
80227dbe: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80227dc2: 93 05 84 f0  	addi	a1, s0, -0xf8
80227dc6: 97 70 ff ff  	auipc	ra, 0xffff7
80227dca: e7 80 40 b5  	jalr	-0x4ac(ra) <ekernel+0xffcd191a>
80227dce: 03 35 84 e4  	ld	a0, -0x1b8(s0)
;         let (block_id, block_offset) = fs.get_disk_inode_pos(new_inode_id);
80227dd2: 97 b0 ff ff  	auipc	ra, 0xffffb
80227dd6: e7 80 80 86  	jalr	-0x798(ra) <ekernel+0xffcd563a>
80227dda: 83 25 44 ee  	lw	a1, -0x11c(s0)
80227dde: 97 90 ff ff  	auipc	ra, 0xffff9
80227de2: e7 80 40 e0  	jalr	-0x1fc(ra) <ekernel+0xffcd3be2>
80227de6: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
80227dea: 23 34 b4 e2  	sd	a1, -0x1d8(s0)
80227dee: 23 22 a4 f6  	sw	a0, -0x9c(s0)
80227df2: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         block_cache_sync_all();
80227df6: 97 e0 ff ff  	auipc	ra, 0xffffe
80227dfa: e7 80 00 11  	jalr	0x110(ra) <ekernel+0xffcd8f06>
;             self.fs.clone(),
80227dfe: 03 35 04 e9  	ld	a0, -0x170(s0)
80227e02: 97 50 ff ff  	auipc	ra, 0xffff5
80227e06: e7 80 a0 1d  	jalr	0x1da(ra) <ekernel+0xffccffdc>
80227e0a: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
;             self.block_device.clone(),
80227e0e: 03 35 04 e9  	ld	a0, -0x170(s0)
80227e12: 21 05        	addi	a0, a0, 0x8
80227e14: 97 50 ff ff  	auipc	ra, 0xffff5
80227e18: e7 80 c0 2c  	jalr	0x2cc(ra) <ekernel+0xffcd00e0>
80227e1c: 03 36 84 e2  	ld	a2, -0x1d8(s0)
80227e20: 83 36 04 e3  	ld	a3, -0x1d0(s0)
80227e24: 2a 87        	mv	a4, a0
80227e26: ae 87        	mv	a5, a1
80227e28: 83 35 84 e3  	ld	a1, -0x1c8(s0)
80227e2c: 13 05 84 f2  	addi	a0, s0, -0xd8
80227e30: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         Some(Arc::new(Self::new(
80227e34: 97 00 00 00  	auipc	ra, 0x0
80227e38: e7 80 60 93  	jalr	-0x6ca(ra) <_ZN7easy_fs3vfs5Inode3new17h053268dced329ee4E>
80227e3c: 03 35 04 e4  	ld	a0, -0x1c0(s0)
80227e40: 97 50 ff ff  	auipc	ra, 0xffff5
80227e44: e7 80 80 00  	jalr	0x8(ra) <ekernel+0xffccfe48>
80227e48: aa 85        	mv	a1, a0
80227e4a: 03 35 84 e4  	ld	a0, -0x1b8(s0)
80227e4e: 23 34 b4 ea  	sd	a1, -0x158(s0)
;     }
80227e52: 97 60 ff ff  	auipc	ra, 0xffff6
80227e56: e7 80 00 bf  	jalr	-0x410(ra) <ekernel+0xffcd0a42>
80227e5a: 19 a8        	j	0x80227e70 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x30a>
80227e5c: 01 45        	li	a0, 0x0
;             return None;
80227e5e: 23 34 a4 ea  	sd	a0, -0x158(s0)
80227e62: 13 05 04 eb  	addi	a0, s0, -0x150
;     }
80227e66: 97 60 ff ff  	auipc	ra, 0xffff6
80227e6a: e7 80 c0 bd  	jalr	-0x424(ra) <ekernel+0xffcd0a42>
80227e6e: 09 a0        	j	0x80227e70 <_ZN7easy_fs3vfs5Inode6create17hb4041feebac4dfc9E+0x30a>
80227e70: 03 35 84 ea  	ld	a0, -0x158(s0)
80227e74: fe 60        	ld	ra, 0x1d8(sp)
80227e76: 5e 64        	ld	s0, 0x1d0(sp)
80227e78: 3d 61        	addi	sp, sp, 0x1e0
80227e7a: 82 80        	ret

0000000080227e7c <_ZN7easy_fs3vfs5Inode2ls17hc970cb134f1e20f5E>:
;     pub fn ls(&self) -> Vec<String> {
80227e7c: 75 71        	addi	sp, sp, -0x90
80227e7e: 06 e5        	sd	ra, 0x88(sp)
80227e80: 22 e1        	sd	s0, 0x80(sp)
80227e82: 00 09        	addi	s0, sp, 0x90
80227e84: 23 38 a4 f6  	sd	a0, -0x90(s0)
80227e88: 23 34 b4 f8  	sd	a1, -0x78(s0)
;         let _fs = self.fs.lock();
80227e8c: 03 35 84 f8  	ld	a0, -0x78(s0)
80227e90: 97 50 ff ff  	auipc	ra, 0xffff5
80227e94: e7 80 80 31  	jalr	0x318(ra) <ekernel+0xffcd01a8>
80227e98: aa 85        	mv	a1, a0
80227e9a: 23 3c b4 f6  	sd	a1, -0x88(s0)
80227e9e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80227ea2: 23 3c a4 fc  	sd	a0, -0x28(s0)
80227ea6: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80227ea8: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80227eac: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80227eb0: 85 45        	li	a1, 0x1
80227eb2: 97 70 ff ff  	auipc	ra, 0xffff7
80227eb6: e7 80 40 2f  	jalr	0x2f4(ra) <ekernel+0xffcd21a6>
80227eba: aa 85        	mv	a1, a0
80227ebc: 23 30 b4 f8  	sd	a1, -0x80(s0)
80227ec0: 23 30 a4 fe  	sd	a0, -0x20(s0)
80227ec4: 09 a0        	j	0x80227ec6 <_ZN7easy_fs3vfs5Inode2ls17hc970cb134f1e20f5E+0x4a>
80227ec6: 03 35 84 f7  	ld	a0, -0x88(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80227eca: 21 05        	addi	a0, a0, 0x8
80227ecc: 89 45        	li	a1, 0x2
80227ece: a3 0b b4 fc  	sb	a1, -0x29(s0)
80227ed2: 83 45 74 fd  	lbu	a1, -0x29(s0)
80227ed6: 97 70 ff ff  	auipc	ra, 0xffff7
80227eda: e7 80 40 28  	jalr	0x284(ra) <ekernel+0xffcd215a>
80227ede: 83 35 04 f8  	ld	a1, -0x80(s0)
80227ee2: 63 08 b5 00  	beq	a0, a1, 0x80227ef2 <_ZN7easy_fs3vfs5Inode2ls17hc970cb134f1e20f5E+0x76>
80227ee6: 09 a0        	j	0x80227ee8 <_ZN7easy_fs3vfs5Inode2ls17hc970cb134f1e20f5E+0x6c>
;             crate::relax();
80227ee8: 97 70 ff ff  	auipc	ra, 0xffff7
80227eec: e7 80 60 36  	jalr	0x366(ra) <ekernel+0xffcd224e>
80227ef0: d9 bf        	j	0x80227ec6 <_ZN7easy_fs3vfs5Inode2ls17hc970cb134f1e20f5E+0x4a>
80227ef2: 03 35 04 f7  	ld	a0, -0x90(s0)
80227ef6: 03 36 04 f8  	ld	a2, -0x80(s0)
80227efa: 83 35 84 f7  	ld	a1, -0x88(s0)
;             next_serving: &self.next_serving,
80227efe: 93 86 85 00  	addi	a3, a1, 0x8
;             value: unsafe { &mut *self.value.get() },
80227f02: c1 05        	addi	a1, a1, 0x10
80227f04: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         TicketMutexGuard {
80227f08: 23 38 d4 fa  	sd	a3, -0x50(s0)
80227f0c: 23 30 c4 fc  	sd	a2, -0x40(s0)
80227f10: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         MutexGuard {
80227f14: 83 35 04 fc  	ld	a1, -0x40(s0)
80227f18: 23 30 b4 fa  	sd	a1, -0x60(s0)
80227f1c: 83 35 84 fb  	ld	a1, -0x48(s0)
80227f20: 23 3c b4 f8  	sd	a1, -0x68(s0)
80227f24: 83 35 04 fb  	ld	a1, -0x50(s0)
80227f28: 23 38 b4 f8  	sd	a1, -0x70(s0)
;         self.read_disk_inode(|disk_inode| {
80227f2c: 83 35 84 f8  	ld	a1, -0x78(s0)
80227f30: 13 06 84 f8  	addi	a2, s0, -0x78
80227f34: 23 34 c4 fa  	sd	a2, -0x58(s0)
80227f38: 03 36 84 fa  	ld	a2, -0x58(s0)
80227f3c: 97 60 ff ff  	auipc	ra, 0xffff6
80227f40: e7 80 a0 2c  	jalr	0x2ca(ra) <ekernel+0xffcd1206>
80227f44: 13 05 04 f9  	addi	a0, s0, -0x70
;     }
80227f48: 97 60 ff ff  	auipc	ra, 0xffff6
80227f4c: e7 80 a0 af  	jalr	-0x506(ra) <ekernel+0xffcd0a42>
80227f50: aa 60        	ld	ra, 0x88(sp)
80227f52: 0a 64        	ld	s0, 0x80(sp)
80227f54: 49 61        	addi	sp, sp, 0x90
80227f56: 82 80        	ret

0000000080227f58 <_ZN7easy_fs3vfs5Inode7read_at17h72df549b91be3da9E>:
;     pub fn read_at(&self, offset: usize, buf: &mut [u8]) -> usize {
80227f58: 31 71        	addi	sp, sp, -0xc0
80227f5a: 06 fd        	sd	ra, 0xb8(sp)
80227f5c: 22 f9        	sd	s0, 0xb0(sp)
80227f5e: 80 01        	addi	s0, sp, 0xc0
80227f60: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80227f64: 23 34 b4 f6  	sd	a1, -0x98(s0)
80227f68: 23 38 c4 f6  	sd	a2, -0x90(s0)
80227f6c: 23 3c d4 f6  	sd	a3, -0x88(s0)
;         let _fs = self.fs.lock();
80227f70: 03 35 04 f6  	ld	a0, -0xa0(s0)
80227f74: 97 50 ff ff  	auipc	ra, 0xffff5
80227f78: e7 80 40 23  	jalr	0x234(ra) <ekernel+0xffcd01a8>
80227f7c: aa 85        	mv	a1, a0
80227f7e: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80227f82: 23 34 a4 fc  	sd	a0, -0x38(s0)
80227f86: 23 3c a4 fc  	sd	a0, -0x28(s0)
80227f8a: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80227f8c: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80227f90: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80227f94: 85 45        	li	a1, 0x1
80227f96: 97 70 ff ff  	auipc	ra, 0xffff7
80227f9a: e7 80 00 21  	jalr	0x210(ra) <ekernel+0xffcd21a6>
80227f9e: aa 85        	mv	a1, a0
80227fa0: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80227fa4: 23 30 a4 fe  	sd	a0, -0x20(s0)
80227fa8: 09 a0        	j	0x80227faa <_ZN7easy_fs3vfs5Inode7read_at17h72df549b91be3da9E+0x52>
80227faa: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
80227fae: 21 05        	addi	a0, a0, 0x8
80227fb0: 89 45        	li	a1, 0x2
80227fb2: a3 0b b4 fc  	sb	a1, -0x29(s0)
80227fb6: 83 45 74 fd  	lbu	a1, -0x29(s0)
80227fba: 97 70 ff ff  	auipc	ra, 0xffff7
80227fbe: e7 80 00 1a  	jalr	0x1a0(ra) <ekernel+0xffcd215a>
80227fc2: 83 35 84 f5  	ld	a1, -0xa8(s0)
80227fc6: 63 08 b5 00  	beq	a0, a1, 0x80227fd6 <_ZN7easy_fs3vfs5Inode7read_at17h72df549b91be3da9E+0x7e>
80227fca: 09 a0        	j	0x80227fcc <_ZN7easy_fs3vfs5Inode7read_at17h72df549b91be3da9E+0x74>
;             crate::relax();
80227fcc: 97 70 ff ff  	auipc	ra, 0xffff7
80227fd0: e7 80 20 28  	jalr	0x282(ra) <ekernel+0xffcd224e>
80227fd4: d9 bf        	j	0x80227faa <_ZN7easy_fs3vfs5Inode7read_at17h72df549b91be3da9E+0x52>
80227fd6: 83 35 84 f5  	ld	a1, -0xa8(s0)
80227fda: 03 35 04 f5  	ld	a0, -0xb0(s0)
;             next_serving: &self.next_serving,
80227fde: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
80227fe2: 41 05        	addi	a0, a0, 0x10
80227fe4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
80227fe8: 23 38 c4 fa  	sd	a2, -0x50(s0)
80227fec: 23 30 b4 fc  	sd	a1, -0x40(s0)
80227ff0: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
80227ff4: 03 35 04 fc  	ld	a0, -0x40(s0)
80227ff8: 23 38 a4 f8  	sd	a0, -0x70(s0)
80227ffc: 03 35 84 fb  	ld	a0, -0x48(s0)
80228000: 23 34 a4 f8  	sd	a0, -0x78(s0)
80228004: 03 35 04 fb  	ld	a0, -0x50(s0)
80228008: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         self.read_disk_inode(|disk_inode| disk_inode.read_at(offset, buf, &self.block_device))
8022800c: 03 35 04 f6  	ld	a0, -0xa0(s0)
80228010: 93 05 84 f6  	addi	a1, s0, -0x98
80228014: 23 3c b4 f8  	sd	a1, -0x68(s0)
80228018: 93 05 04 f7  	addi	a1, s0, -0x90
8022801c: 23 30 b4 fa  	sd	a1, -0x60(s0)
80228020: 93 05 04 f6  	addi	a1, s0, -0xa0
80228024: 23 34 b4 fa  	sd	a1, -0x58(s0)
80228028: 93 05 84 f9  	addi	a1, s0, -0x68
8022802c: 97 60 ff ff  	auipc	ra, 0xffff6
80228030: e7 80 00 43  	jalr	0x430(ra) <ekernel+0xffcd145c>
80228034: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80228038: 13 05 04 f8  	addi	a0, s0, -0x80
;     }
8022803c: 97 60 ff ff  	auipc	ra, 0xffff6
80228040: e7 80 60 a0  	jalr	-0x5fa(ra) <ekernel+0xffcd0a42>
80228044: 03 35 84 f4  	ld	a0, -0xb8(s0)
80228048: ea 70        	ld	ra, 0xb8(sp)
8022804a: 4a 74        	ld	s0, 0xb0(sp)
8022804c: 29 61        	addi	sp, sp, 0xc0
8022804e: 82 80        	ret

0000000080228050 <_ZN7easy_fs3vfs5Inode8write_at17h0d2571072a425befE>:
;     pub fn write_at(&self, offset: usize, buf: &[u8]) -> usize {
80228050: 55 71        	addi	sp, sp, -0xd0
80228052: 86 e5        	sd	ra, 0xc8(sp)
80228054: a2 e1        	sd	s0, 0xc0(sp)
80228056: 80 09        	addi	s0, sp, 0xd0
80228058: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8022805c: 23 3c b4 f4  	sd	a1, -0xa8(s0)
80228060: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80228064: 23 34 d4 f6  	sd	a3, -0x98(s0)
;         let mut fs = self.fs.lock();
80228068: 03 35 04 f5  	ld	a0, -0xb0(s0)
8022806c: 97 50 ff ff  	auipc	ra, 0xffff5
80228070: e7 80 c0 13  	jalr	0x13c(ra) <ekernel+0xffcd01a8>
80228074: aa 85        	mv	a1, a0
80228076: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8022807a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022807e: 23 3c a4 fc  	sd	a0, -0x28(s0)
80228082: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80228084: 23 0b b4 fc  	sb	a1, -0x2a(s0)
80228088: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8022808c: 85 45        	li	a1, 0x1
8022808e: 97 70 ff ff  	auipc	ra, 0xffff7
80228092: e7 80 80 11  	jalr	0x118(ra) <ekernel+0xffcd21a6>
80228096: aa 85        	mv	a1, a0
80228098: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8022809c: 23 30 a4 fe  	sd	a0, -0x20(s0)
802280a0: 09 a0        	j	0x802280a2 <_ZN7easy_fs3vfs5Inode8write_at17h0d2571072a425befE+0x52>
802280a2: 03 35 04 f4  	ld	a0, -0xc0(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
802280a6: 21 05        	addi	a0, a0, 0x8
802280a8: 89 45        	li	a1, 0x2
802280aa: a3 0b b4 fc  	sb	a1, -0x29(s0)
802280ae: 83 45 74 fd  	lbu	a1, -0x29(s0)
802280b2: 97 70 ff ff  	auipc	ra, 0xffff7
802280b6: e7 80 80 0a  	jalr	0xa8(ra) <ekernel+0xffcd215a>
802280ba: 83 35 84 f4  	ld	a1, -0xb8(s0)
802280be: 63 08 b5 00  	beq	a0, a1, 0x802280ce <_ZN7easy_fs3vfs5Inode8write_at17h0d2571072a425befE+0x7e>
802280c2: 09 a0        	j	0x802280c4 <_ZN7easy_fs3vfs5Inode8write_at17h0d2571072a425befE+0x74>
;             crate::relax();
802280c4: 97 70 ff ff  	auipc	ra, 0xffff7
802280c8: e7 80 a0 18  	jalr	0x18a(ra) <ekernel+0xffcd224e>
802280cc: d9 bf        	j	0x802280a2 <_ZN7easy_fs3vfs5Inode8write_at17h0d2571072a425befE+0x52>
802280ce: 83 35 84 f4  	ld	a1, -0xb8(s0)
802280d2: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             next_serving: &self.next_serving,
802280d6: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
802280da: 41 05        	addi	a0, a0, 0x10
802280dc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
802280e0: 23 38 c4 fa  	sd	a2, -0x50(s0)
802280e4: 23 30 b4 fc  	sd	a1, -0x40(s0)
802280e8: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
802280ec: 03 35 04 fc  	ld	a0, -0x40(s0)
802280f0: 23 30 a4 f8  	sd	a0, -0x80(s0)
802280f4: 03 35 84 fb  	ld	a0, -0x48(s0)
802280f8: 23 3c a4 f6  	sd	a0, -0x88(s0)
802280fc: 03 35 04 fb  	ld	a0, -0x50(s0)
80228100: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         let size = self.modify_disk_inode(|disk_inode| {
80228104: 03 35 04 f5  	ld	a0, -0xb0(s0)
80228108: 93 05 04 f5  	addi	a1, s0, -0xb0
8022810c: 23 34 b4 f8  	sd	a1, -0x78(s0)
80228110: 93 05 84 f5  	addi	a1, s0, -0xa8
80228114: 23 38 b4 f8  	sd	a1, -0x70(s0)
80228118: 93 05 04 f6  	addi	a1, s0, -0xa0
8022811c: 23 3c b4 f8  	sd	a1, -0x68(s0)
80228120: 93 05 04 f7  	addi	a1, s0, -0x90
80228124: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80228128: 23 30 b4 fa  	sd	a1, -0x60(s0)
8022812c: 93 05 84 f8  	addi	a1, s0, -0x78
80228130: 97 60 ff ff  	auipc	ra, 0xffff6
80228134: e7 80 20 6c  	jalr	0x6c2(ra) <ekernel+0xffcd17f2>
80228138: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022813c: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         block_cache_sync_all();
80228140: 97 e0 ff ff  	auipc	ra, 0xffffe
80228144: e7 80 60 dc  	jalr	-0x23a(ra) <ekernel+0xffcd8f06>
80228148: 03 35 04 f3  	ld	a0, -0xd0(s0)
;     }
8022814c: 97 60 ff ff  	auipc	ra, 0xffff6
80228150: e7 80 60 8f  	jalr	-0x70a(ra) <ekernel+0xffcd0a42>
80228154: 03 35 84 f3  	ld	a0, -0xc8(s0)
80228158: ae 60        	ld	ra, 0xc8(sp)
8022815a: 0e 64        	ld	s0, 0xc0(sp)
8022815c: 69 61        	addi	sp, sp, 0xd0
8022815e: 82 80        	ret

0000000080228160 <_ZN7easy_fs3vfs5Inode5clear17h0fbcbbfd63381375E>:
;     pub fn clear(&self) {
80228160: 35 71        	addi	sp, sp, -0xa0
80228162: 06 ed        	sd	ra, 0x98(sp)
80228164: 22 e9        	sd	s0, 0x90(sp)
80228166: 00 11        	addi	s0, sp, 0xa0
80228168: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         let mut fs = self.fs.lock();
8022816c: 03 35 04 f8  	ld	a0, -0x80(s0)
80228170: 97 50 ff ff  	auipc	ra, 0xffff5
80228174: e7 80 80 03  	jalr	0x38(ra) <ekernel+0xffcd01a8>
80228178: aa 85        	mv	a1, a0
8022817a: 23 38 b4 f6  	sd	a1, -0x90(s0)
8022817e: 23 34 a4 fc  	sd	a0, -0x38(s0)
80228182: 23 3c a4 fc  	sd	a0, -0x28(s0)
80228186: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
80228188: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8022818c: 03 46 64 fd  	lbu	a2, -0x2a(s0)
80228190: 85 45        	li	a1, 0x1
80228192: 97 70 ff ff  	auipc	ra, 0xffff7
80228196: e7 80 40 01  	jalr	0x14(ra) <ekernel+0xffcd21a6>
8022819a: aa 85        	mv	a1, a0
8022819c: 23 3c b4 f6  	sd	a1, -0x88(s0)
802281a0: 23 30 a4 fe  	sd	a0, -0x20(s0)
802281a4: 09 a0        	j	0x802281a6 <_ZN7easy_fs3vfs5Inode5clear17h0fbcbbfd63381375E+0x46>
802281a6: 03 35 04 f7  	ld	a0, -0x90(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
802281aa: 21 05        	addi	a0, a0, 0x8
802281ac: 89 45        	li	a1, 0x2
802281ae: a3 0b b4 fc  	sb	a1, -0x29(s0)
802281b2: 83 45 74 fd  	lbu	a1, -0x29(s0)
802281b6: 97 70 ff ff  	auipc	ra, 0xffff7
802281ba: e7 80 40 fa  	jalr	-0x5c(ra) <ekernel+0xffcd215a>
802281be: 83 35 84 f7  	ld	a1, -0x88(s0)
802281c2: 63 08 b5 00  	beq	a0, a1, 0x802281d2 <_ZN7easy_fs3vfs5Inode5clear17h0fbcbbfd63381375E+0x72>
802281c6: 09 a0        	j	0x802281c8 <_ZN7easy_fs3vfs5Inode5clear17h0fbcbbfd63381375E+0x68>
;             crate::relax();
802281c8: 97 70 ff ff  	auipc	ra, 0xffff7
802281cc: e7 80 60 08  	jalr	0x86(ra) <ekernel+0xffcd224e>
802281d0: d9 bf        	j	0x802281a6 <_ZN7easy_fs3vfs5Inode5clear17h0fbcbbfd63381375E+0x46>
802281d2: 83 35 84 f7  	ld	a1, -0x88(s0)
802281d6: 03 35 04 f7  	ld	a0, -0x90(s0)
;             next_serving: &self.next_serving,
802281da: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
802281de: 41 05        	addi	a0, a0, 0x10
802281e0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
802281e4: 23 38 c4 fa  	sd	a2, -0x50(s0)
802281e8: 23 30 b4 fc  	sd	a1, -0x40(s0)
802281ec: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
802281f0: 03 35 04 fc  	ld	a0, -0x40(s0)
802281f4: 23 3c a4 f8  	sd	a0, -0x68(s0)
802281f8: 03 35 84 fb  	ld	a0, -0x48(s0)
802281fc: 23 38 a4 f8  	sd	a0, -0x70(s0)
80228200: 03 35 04 fb  	ld	a0, -0x50(s0)
80228204: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         self.modify_disk_inode(|disk_inode| {
80228208: 03 35 04 f8  	ld	a0, -0x80(s0)
8022820c: 93 05 04 f8  	addi	a1, s0, -0x80
80228210: 23 30 b4 fa  	sd	a1, -0x60(s0)
80228214: 93 05 84 f8  	addi	a1, s0, -0x78
80228218: 23 34 b4 f6  	sd	a1, -0x98(s0)
8022821c: 23 34 b4 fa  	sd	a1, -0x58(s0)
80228220: 83 35 04 fa  	ld	a1, -0x60(s0)
80228224: 03 36 84 fa  	ld	a2, -0x58(s0)
80228228: 97 60 ff ff  	auipc	ra, 0xffff6
8022822c: e7 80 c0 49  	jalr	0x49c(ra) <ekernel+0xffcd16c4>
;         block_cache_sync_all();
80228230: 97 e0 ff ff  	auipc	ra, 0xffffe
80228234: e7 80 60 cd  	jalr	-0x32a(ra) <ekernel+0xffcd8f06>
80228238: 03 35 84 f6  	ld	a0, -0x98(s0)
;     }
8022823c: 97 60 ff ff  	auipc	ra, 0xffff6
80228240: e7 80 60 80  	jalr	-0x7fa(ra) <ekernel+0xffcd0a42>
80228244: ea 60        	ld	ra, 0x98(sp)
80228246: 4a 64        	ld	s0, 0x90(sp)
80228248: 0d 61        	addi	sp, sp, 0xa0
8022824a: 82 80        	ret

000000008022824c <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h73205491a512ada3E>:
;         fn eq(&self, other: &&B) -> bool {
8022824c: 01 11        	addi	sp, sp, -0x20
8022824e: 06 ec        	sd	ra, 0x18(sp)
80228250: 22 e8        	sd	s0, 0x10(sp)
80228252: 00 10        	addi	s0, sp, 0x20
80228254: ae 86        	mv	a3, a1
80228256: aa 85        	mv	a1, a0
80228258: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022825c: 23 34 d4 fe  	sd	a3, -0x18(s0)
;             PartialEq::eq(*self, *other)
80228260: 88 61        	ld	a0, 0x0(a1)
80228262: 8c 65        	ld	a1, 0x8(a1)
80228264: 90 62        	ld	a2, 0x0(a3)
80228266: 94 66        	ld	a3, 0x8(a3)
80228268: 97 00 00 00  	auipc	ra, 0x0
8022826c: e7 80 00 01  	jalr	0x10(ra) <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2eq17hade7bc52df7bf6beE>
80228270: e2 60        	ld	ra, 0x18(sp)
80228272: 42 64        	ld	s0, 0x10(sp)
;         }
80228274: 05 61        	addi	sp, sp, 0x20
80228276: 82 80        	ret

0000000080228278 <_ZN4core3str6traits54_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$str$GT$2eq17hade7bc52df7bf6beE>:
;     fn eq(&self, other: &str) -> bool {
80228278: 19 71        	addi	sp, sp, -0x80
8022827a: 86 fc        	sd	ra, 0x78(sp)
8022827c: a2 f8        	sd	s0, 0x70(sp)
8022827e: 00 01        	addi	s0, sp, 0x80
80228280: 23 30 a4 fa  	sd	a0, -0x60(s0)
80228284: 23 34 b4 fa  	sd	a1, -0x58(s0)
80228288: 23 38 c4 fa  	sd	a2, -0x50(s0)
8022828c: 23 3c d4 fa  	sd	a3, -0x48(s0)
;         unsafe { mem::transmute(self) }
80228290: 23 30 a4 f8  	sd	a0, -0x80(s0)
80228294: 23 34 b4 f8  	sd	a1, -0x78(s0)
80228298: 13 05 04 f8  	addi	a0, s0, -0x80
;         self.as_bytes() == other.as_bytes()
8022829c: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         unsafe { mem::transmute(self) }
802282a0: 23 38 c4 f8  	sd	a2, -0x70(s0)
802282a4: 23 3c d4 f8  	sd	a3, -0x68(s0)
802282a8: 13 05 04 f9  	addi	a0, s0, -0x70
;         self.as_bytes() == other.as_bytes()
802282ac: 23 34 a4 fc  	sd	a0, -0x38(s0)
;             PartialEq::eq(*self, *other)
802282b0: 03 35 04 f8  	ld	a0, -0x80(s0)
802282b4: 83 35 84 f8  	ld	a1, -0x78(s0)
802282b8: 23 38 a4 fc  	sd	a0, -0x30(s0)
802282bc: 23 3c b4 fc  	sd	a1, -0x28(s0)
802282c0: 03 36 04 f9  	ld	a2, -0x70(s0)
802282c4: 83 36 84 f9  	ld	a3, -0x68(s0)
802282c8: 23 30 c4 fe  	sd	a2, -0x20(s0)
802282cc: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         SlicePartialEq::equal(self, other)
802282d0: 97 00 00 00  	auipc	ra, 0x0
802282d4: e7 80 00 01  	jalr	0x10(ra) <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h014b3da1d2075f3cE>
802282d8: e6 70        	ld	ra, 0x78(sp)
802282da: 46 74        	ld	s0, 0x70(sp)
;     }
802282dc: 09 61        	addi	sp, sp, 0x80
802282de: 82 80        	ret

00000000802282e0 <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h014b3da1d2075f3cE>:
;     fn equal(&self, other: &[B]) -> bool {
802282e0: 59 71        	addi	sp, sp, -0x70
802282e2: 86 f4        	sd	ra, 0x68(sp)
802282e4: a2 f0        	sd	s0, 0x60(sp)
802282e6: 80 18        	addi	s0, sp, 0x70
802282e8: 23 3c c4 f8  	sd	a2, -0x68(s0)
802282ec: 23 30 b4 fa  	sd	a1, -0x60(s0)
802282f0: 23 34 a4 fa  	sd	a0, -0x58(s0)
802282f4: 23 3c a4 fa  	sd	a0, -0x48(s0)
802282f8: 23 30 b4 fc  	sd	a1, -0x40(s0)
802282fc: 23 34 c4 fc  	sd	a2, -0x38(s0)
80228300: 23 38 d4 fc  	sd	a3, -0x30(s0)
;         if self.len() != other.len() {
80228304: 63 9c d5 02  	bne	a1, a3, 0x8022833c <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h014b3da1d2075f3cE+0x5c>
80228308: 09 a0        	j	0x8022830a <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h014b3da1d2075f3cE+0x2a>
8022830a: 83 35 84 f9  	ld	a1, -0x68(s0)
8022830e: 03 35 84 fa  	ld	a0, -0x58(s0)
80228312: 03 36 04 fa  	ld	a2, -0x60(s0)
;     unsafe { intrinsics::size_of_val(val) }
80228316: 23 3c c4 fc  	sd	a2, -0x28(s0)
8022831a: 03 36 84 fd  	ld	a2, -0x28(s0)
8022831e: 23 30 c4 fe  	sd	a2, -0x20(s0)
;             compare_bytes(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
80228322: 97 a0 00 00  	auipc	ra, 0xa
80228326: e7 80 40 b7  	jalr	-0x48c(ra) <memcmp>
8022832a: 23 26 a4 fe  	sw	a0, -0x14(s0)
8022832e: 03 25 c4 fe  	lw	a0, -0x14(s0)
80228332: 13 35 15 00  	seqz	a0, a0
80228336: a3 0b a4 fa  	sb	a0, -0x49(s0)
;     }
8022833a: 29 a0        	j	0x80228344 <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h014b3da1d2075f3cE+0x64>
8022833c: 01 45        	li	a0, 0x0
;             return false;
8022833e: a3 0b a4 fa  	sb	a0, -0x49(s0)
;     }
80228342: 09 a0        	j	0x80228344 <_ZN73_$LT$$u5b$A$u5d$$u20$as$u20$core..slice..cmp..SlicePartialEq$LT$B$GT$$GT$5equal17h014b3da1d2075f3cE+0x64>
80228344: 03 45 74 fb  	lbu	a0, -0x49(s0)
80228348: a6 70        	ld	ra, 0x68(sp)
8022834a: 06 74        	ld	s0, 0x60(sp)
8022834c: 65 61        	addi	sp, sp, 0x70
8022834e: 82 80        	ret

0000000080228350 <_ZN90_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h67dee9206827e00eE>:
;     fn deref(&self) -> &T {
80228350: 01 11        	addi	sp, sp, -0x20
80228352: 06 ec        	sd	ra, 0x18(sp)
80228354: 22 e8        	sd	s0, 0x10(sp)
80228356: 00 10        	addi	s0, sp, 0x20
80228358: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.value
8022835c: 08 65        	ld	a0, 0x8(a0)
8022835e: e2 60        	ld	ra, 0x18(sp)
80228360: 42 64        	ld	s0, 0x10(sp)
;     }
80228362: 05 61        	addi	sp, sp, 0x20
80228364: 82 80        	ret

0000000080228366 <_ZN90_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h96440d76b5448ae9E>:
;     fn deref(&self) -> &T {
80228366: 01 11        	addi	sp, sp, -0x20
80228368: 06 ec        	sd	ra, 0x18(sp)
8022836a: 22 e8        	sd	s0, 0x10(sp)
8022836c: 00 10        	addi	s0, sp, 0x20
8022836e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.value
80228372: 08 65        	ld	a0, 0x8(a0)
80228374: e2 60        	ld	ra, 0x18(sp)
80228376: 42 64        	ld	s0, 0x10(sp)
;     }
80228378: 05 61        	addi	sp, sp, 0x20
8022837a: 82 80        	ret

000000008022837c <_ZN90_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hf0d1084dacc54ba3E>:
;     fn deref(&self) -> &T {
8022837c: 01 11        	addi	sp, sp, -0x20
8022837e: 06 ec        	sd	ra, 0x18(sp)
80228380: 22 e8        	sd	s0, 0x10(sp)
80228382: 00 10        	addi	s0, sp, 0x20
80228384: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.value
80228388: 08 65        	ld	a0, 0x8(a0)
8022838a: e2 60        	ld	ra, 0x18(sp)
8022838c: 42 64        	ld	s0, 0x10(sp)
;     }
8022838e: 05 61        	addi	sp, sp, 0x20
80228390: 82 80        	ret

0000000080228392 <_ZN93_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h34607aa98925ec95E>:
;     fn deref_mut(&mut self) -> &mut T {
80228392: 01 11        	addi	sp, sp, -0x20
80228394: 06 ec        	sd	ra, 0x18(sp)
80228396: 22 e8        	sd	s0, 0x10(sp)
80228398: 00 10        	addi	s0, sp, 0x20
8022839a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.value
8022839e: 08 65        	ld	a0, 0x8(a0)
802283a0: e2 60        	ld	ra, 0x18(sp)
802283a2: 42 64        	ld	s0, 0x10(sp)
;     }
802283a4: 05 61        	addi	sp, sp, 0x20
802283a6: 82 80        	ret

00000000802283a8 <_ZN93_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h4c9baa5c1828acfcE>:
;     fn deref_mut(&mut self) -> &mut T {
802283a8: 01 11        	addi	sp, sp, -0x20
802283aa: 06 ec        	sd	ra, 0x18(sp)
802283ac: 22 e8        	sd	s0, 0x10(sp)
802283ae: 00 10        	addi	s0, sp, 0x20
802283b0: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.value
802283b4: 08 65        	ld	a0, 0x8(a0)
802283b6: e2 60        	ld	ra, 0x18(sp)
802283b8: 42 64        	ld	s0, 0x10(sp)
;     }
802283ba: 05 61        	addi	sp, sp, 0x20
802283bc: 82 80        	ret

00000000802283be <_ZN93_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h9b038b059181c1b6E>:
;     fn deref_mut(&mut self) -> &mut T {
802283be: 01 11        	addi	sp, sp, -0x20
802283c0: 06 ec        	sd	ra, 0x18(sp)
802283c2: 22 e8        	sd	s0, 0x10(sp)
802283c4: 00 10        	addi	s0, sp, 0x20
802283c6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.value
802283ca: 08 65        	ld	a0, 0x8(a0)
802283cc: e2 60        	ld	ra, 0x18(sp)
802283ce: 42 64        	ld	s0, 0x10(sp)
;     }
802283d0: 05 61        	addi	sp, sp, 0x20
802283d2: 82 80        	ret

00000000802283d4 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h50c23528c83e82efE>:
;     fn next(&mut self) -> Option<&'a T> {
802283d4: 59 71        	addi	sp, sp, -0x70
802283d6: 86 f4        	sd	ra, 0x68(sp)
802283d8: a2 f0        	sd	s0, 0x60(sp)
802283da: 80 18        	addi	s0, sp, 0x70
802283dc: 23 3c a4 f8  	sd	a0, -0x68(s0)
802283e0: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         match self.i1.next() {
802283e4: 97 00 00 00  	auipc	ra, 0x0
802283e8: e7 80 60 53  	jalr	0x536(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E>
802283ec: 23 34 a4 fa  	sd	a0, -0x58(s0)
802283f0: 03 35 84 fa  	ld	a0, -0x58(s0)
802283f4: 29 e1        	bnez	a0, 0x80228436 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h50c23528c83e82efE+0x62>
802283f6: 09 a0        	j	0x802283f8 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h50c23528c83e82efE+0x24>
802283f8: 03 35 84 f9  	ld	a0, -0x68(s0)
;                 mem::swap(&mut self.i1, &mut self.i2);
802283fc: 23 3c a4 fa  	sd	a0, -0x48(s0)
80228400: 93 05 05 01  	addi	a1, a0, 0x10
80228404: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         crate::intrinsics::read_via_copy(src)
80228408: 10 61        	ld	a2, 0x0(a0)
8022840a: 0c 65        	ld	a1, 0x8(a0)
8022840c: 23 34 c4 fc  	sd	a2, -0x38(s0)
80228410: 23 38 b4 fc  	sd	a1, -0x30(s0)
80228414: 18 69        	ld	a4, 0x10(a0)
80228416: 14 6d        	ld	a3, 0x18(a0)
80228418: 23 3c e4 fc  	sd	a4, -0x28(s0)
8022841c: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         intrinsics::write_via_move(dst, src)
80228420: 18 e1        	sd	a4, 0x0(a0)
80228422: 14 e5        	sd	a3, 0x8(a0)
80228424: 10 e9        	sd	a2, 0x10(a0)
80228426: 0c ed        	sd	a1, 0x18(a0)
;                 self.i1.next()
80228428: 97 00 00 00  	auipc	ra, 0x0
8022842c: e7 80 20 4f  	jalr	0x4f2(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E>
80228430: 23 30 a4 fa  	sd	a0, -0x60(s0)
80228434: 01 a8        	j	0x80228444 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h50c23528c83e82efE+0x70>
;             Some(val) => Some(val),
80228436: 03 35 84 fa  	ld	a0, -0x58(s0)
8022843a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022843e: 23 30 a4 fa  	sd	a0, -0x60(s0)
80228442: 09 a0        	j	0x80228444 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h50c23528c83e82efE+0x70>
;     }
80228444: 03 35 04 fa  	ld	a0, -0x60(s0)
80228448: a6 70        	ld	ra, 0x68(sp)
8022844a: 06 74        	ld	s0, 0x60(sp)
8022844c: 65 61        	addi	sp, sp, 0x70
8022844e: 82 80        	ret

0000000080228450 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h7e1f66ce3c992d2aE>:
;     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
80228450: 1d 71        	addi	sp, sp, -0x60
80228452: 86 ec        	sd	ra, 0x58(sp)
80228454: a2 e8        	sd	s0, 0x50(sp)
80228456: 80 10        	addi	s0, sp, 0x60
80228458: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022845c: 23 34 b4 fa  	sd	a1, -0x58(s0)
80228460: 23 38 a4 fc  	sd	a0, -0x30(s0)
80228464: 93 05 84 fa  	addi	a1, s0, -0x58
;         let acc = self.i1.try_fold(init, &mut f)?;
80228468: 97 00 00 00  	auipc	ra, 0x0
8022846c: e7 80 00 1d  	jalr	0x1d0(ra) <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E>
80228470: 97 a0 ff ff  	auipc	ra, 0xffffa
80228474: e7 80 e0 9f  	jalr	-0x602(ra) <ekernel+0xffcd4e6e>
80228478: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022847c: 23 34 b4 fc  	sd	a1, -0x38(s0)
80228480: 03 35 84 fc  	ld	a0, -0x38(s0)
80228484: 05 e1        	bnez	a0, 0x802284a4 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h7e1f66ce3c992d2aE+0x54>
80228486: 09 a0        	j	0x80228488 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h7e1f66ce3c992d2aE+0x38>
80228488: 03 35 04 fa  	ld	a0, -0x60(s0)
;         self.i2.try_fold(acc, &mut f)
8022848c: 41 05        	addi	a0, a0, 0x10
8022848e: 93 05 84 fa  	addi	a1, s0, -0x58
80228492: 97 00 00 00  	auipc	ra, 0x0
80228496: e7 80 60 1a  	jalr	0x1a6(ra) <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E>
8022849a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022849e: 23 3c b4 fa  	sd	a1, -0x48(s0)
;     }
802284a2: 15 a0        	j	0x802284c6 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h7e1f66ce3c992d2aE+0x76>
;         let acc = self.i1.try_fold(init, &mut f)?;
802284a4: 03 35 04 fc  	ld	a0, -0x40(s0)
802284a8: 83 35 84 fc  	ld	a1, -0x38(s0)
802284ac: 23 30 a4 fe  	sd	a0, -0x20(s0)
802284b0: 23 34 b4 fe  	sd	a1, -0x18(s0)
802284b4: 97 a0 ff ff  	auipc	ra, 0xffffa
802284b8: e7 80 40 87  	jalr	-0x78c(ra) <ekernel+0xffcd4d28>
802284bc: 23 38 a4 fa  	sd	a0, -0x50(s0)
802284c0: 23 3c b4 fa  	sd	a1, -0x48(s0)
;     }
802284c4: 09 a0        	j	0x802284c6 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17h7e1f66ce3c992d2aE+0x76>
802284c6: 03 35 04 fb  	ld	a0, -0x50(s0)
802284ca: 83 35 84 fb  	ld	a1, -0x48(s0)
802284ce: e6 60        	ld	ra, 0x58(sp)
802284d0: 46 64        	ld	s0, 0x50(sp)
802284d2: 25 61        	addi	sp, sp, 0x60
802284d4: 82 80        	ret

00000000802284d6 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17hffe80410a4126c87E>:
;     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
802284d6: 5d 71        	addi	sp, sp, -0x50
802284d8: 86 e4        	sd	ra, 0x48(sp)
802284da: a2 e0        	sd	s0, 0x40(sp)
802284dc: 80 08        	addi	s0, sp, 0x50
802284de: 23 3c a4 fa  	sd	a0, -0x48(s0)
802284e2: 23 30 b4 fc  	sd	a1, -0x40(s0)
802284e6: 23 3c a4 fc  	sd	a0, -0x28(s0)
802284ea: 93 05 04 fc  	addi	a1, s0, -0x40
;         let acc = self.i1.try_fold(init, &mut f)?;
802284ee: 97 00 00 00  	auipc	ra, 0x0
802284f2: e7 80 20 1f  	jalr	0x1f2(ra) <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE>
802284f6: 97 a0 ff ff  	auipc	ra, 0xffffa
802284fa: e7 80 a0 93  	jalr	-0x6c6(ra) <ekernel+0xffcd4e30>
802284fe: 23 38 a4 fc  	sd	a0, -0x30(s0)
80228502: 03 35 04 fd  	ld	a0, -0x30(s0)
80228506: 11 ed        	bnez	a0, 0x80228522 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17hffe80410a4126c87E+0x4c>
80228508: 09 a0        	j	0x8022850a <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17hffe80410a4126c87E+0x34>
8022850a: 03 35 84 fb  	ld	a0, -0x48(s0)
;         self.i2.try_fold(acc, &mut f)
8022850e: 41 05        	addi	a0, a0, 0x10
80228510: 93 05 04 fc  	addi	a1, s0, -0x40
80228514: 97 00 00 00  	auipc	ra, 0x0
80228518: e7 80 c0 1c  	jalr	0x1cc(ra) <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE>
8022851c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     }
80228520: 21 a8        	j	0x80228538 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17hffe80410a4126c87E+0x62>
;         let acc = self.i1.try_fold(init, &mut f)?;
80228522: 03 35 04 fd  	ld	a0, -0x30(s0)
80228526: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022852a: 97 a0 ff ff  	auipc	ra, 0xffffa
8022852e: e7 80 60 83  	jalr	-0x7ca(ra) <ekernel+0xffcd4d60>
80228532: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     }
80228536: 09 a0        	j	0x80228538 <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17hffe80410a4126c87E+0x62>
80228538: 03 35 84 fc  	ld	a0, -0x38(s0)
8022853c: a6 60        	ld	ra, 0x48(sp)
8022853e: 06 64        	ld	s0, 0x40(sp)
80228540: 61 61        	addi	sp, sp, 0x50
80228542: 82 80        	ret

0000000080228544 <_ZN4core4iter6traits8iterator8Iterator4find17hcdc1e740af637eaaE>:
;     fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
80228544: 39 71        	addi	sp, sp, -0x40
80228546: 06 fc        	sd	ra, 0x38(sp)
80228548: 22 f8        	sd	s0, 0x30(sp)
8022854a: 80 00        	addi	s0, sp, 0x40
8022854c: 23 3c a4 fc  	sd	a0, -0x28(s0)
80228550: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             move |(), x| {
80228554: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         self.try_fold((), check(predicate)).break_value()
80228558: 83 35 04 fd  	ld	a1, -0x30(s0)
8022855c: 97 00 00 00  	auipc	ra, 0x0
80228560: e7 80 a0 f7  	jalr	-0x86(ra) <_ZN109_$LT$alloc..collections..vec_deque..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8try_fold17hffe80410a4126c87E>
80228564: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         match self {
80228568: 03 35 84 fc  	ld	a0, -0x38(s0)
8022856c: 11 e5        	bnez	a0, 0x80228578 <_ZN4core4iter6traits8iterator8Iterator4find17hcdc1e740af637eaaE+0x34>
8022856e: 09 a0        	j	0x80228570 <_ZN4core4iter6traits8iterator8Iterator4find17hcdc1e740af637eaaE+0x2c>
80228570: 01 45        	li	a0, 0x0
;             ControlFlow::Continue(..) => None,
80228572: 23 30 a4 fc  	sd	a0, -0x40(s0)
80228576: 01 a8        	j	0x80228586 <_ZN4core4iter6traits8iterator8Iterator4find17hcdc1e740af637eaaE+0x42>
;             ControlFlow::Break(x) => Some(x),
80228578: 03 35 84 fc  	ld	a0, -0x38(s0)
8022857c: 23 34 a4 fe  	sd	a0, -0x18(s0)
80228580: 23 30 a4 fc  	sd	a0, -0x40(s0)
80228584: 09 a0        	j	0x80228586 <_ZN4core4iter6traits8iterator8Iterator4find17hcdc1e740af637eaaE+0x42>
;     }
80228586: 03 35 84 fc  	ld	a0, -0x38(s0)
8022858a: 01 c9        	beqz	a0, 0x8022859a <_ZN4core4iter6traits8iterator8Iterator4find17hcdc1e740af637eaaE+0x56>
8022858c: 09 a0        	j	0x8022858e <_ZN4core4iter6traits8iterator8Iterator4find17hcdc1e740af637eaaE+0x4a>
;     }
8022858e: 03 35 04 fc  	ld	a0, -0x40(s0)
80228592: e2 70        	ld	ra, 0x38(sp)
80228594: 42 74        	ld	s0, 0x30(sp)
80228596: 21 61        	addi	sp, sp, 0x40
80228598: 82 80        	ret
;     }
8022859a: d5 bf        	j	0x8022858e <_ZN4core4iter6traits8iterator8Iterator4find17hcdc1e740af637eaaE+0x4a>

000000008022859c <_ZN4core4iter6traits8iterator8Iterator9enumerate17h50ff2a9a888db329E>:
;     fn enumerate(self) -> Enumerate<Self>
8022859c: 01 11        	addi	sp, sp, -0x20
8022859e: 06 ec        	sd	ra, 0x18(sp)
802285a0: 22 e8        	sd	s0, 0x10(sp)
802285a2: 00 10        	addi	s0, sp, 0x20
802285a4: 23 34 b4 fe  	sd	a1, -0x18(s0)
802285a8: aa 85        	mv	a1, a0
802285aa: 03 35 84 fe  	ld	a0, -0x18(s0)
;         Enumerate { iter, count: 0 }
802285ae: 10 6d        	ld	a2, 0x18(a0)
802285b0: 90 ed        	sd	a2, 0x18(a1)
802285b2: 10 69        	ld	a2, 0x10(a0)
802285b4: 90 e9        	sd	a2, 0x10(a1)
802285b6: 10 65        	ld	a2, 0x8(a0)
802285b8: 90 e5        	sd	a2, 0x8(a1)
802285ba: 08 61        	ld	a0, 0x0(a0)
802285bc: 88 e1        	sd	a0, 0x0(a1)
802285be: 01 45        	li	a0, 0x0
802285c0: 88 f1        	sd	a0, 0x20(a1)
802285c2: e2 60        	ld	ra, 0x18(sp)
802285c4: 42 64        	ld	s0, 0x10(sp)
;     }
802285c6: 05 61        	addi	sp, sp, 0x20
802285c8: 82 80        	ret

00000000802285ca <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hd2285c14727fc4b7E>:
;     fn into_iter(self) -> I {
802285ca: 01 11        	addi	sp, sp, -0x20
802285cc: 06 ec        	sd	ra, 0x18(sp)
802285ce: 22 e8        	sd	s0, 0x10(sp)
802285d0: 00 10        	addi	s0, sp, 0x20
802285d2: 23 34 b4 fe  	sd	a1, -0x18(s0)
802285d6: aa 85        	mv	a1, a0
802285d8: 03 35 84 fe  	ld	a0, -0x18(s0)
;         self
802285dc: 10 6d        	ld	a2, 0x18(a0)
802285de: 90 ed        	sd	a2, 0x18(a1)
802285e0: 10 69        	ld	a2, 0x10(a0)
802285e2: 90 e9        	sd	a2, 0x10(a1)
802285e4: 10 65        	ld	a2, 0x8(a0)
802285e6: 90 e5        	sd	a2, 0x8(a1)
802285e8: 08 61        	ld	a0, 0x0(a0)
802285ea: 88 e1        	sd	a0, 0x0(a1)
802285ec: e2 60        	ld	ra, 0x18(sp)
802285ee: 42 64        	ld	s0, 0x10(sp)
;     }
802285f0: 05 61        	addi	sp, sp, 0x20
802285f2: 82 80        	ret

00000000802285f4 <_ZN4core4iter6traits8iterator8Iterator4take17h376ef9b53c9c5b27E>:
;     fn take(self, n: usize) -> Take<Self>
802285f4: 79 71        	addi	sp, sp, -0x30
802285f6: 06 f4        	sd	ra, 0x28(sp)
802285f8: 22 f0        	sd	s0, 0x20(sp)
802285fa: 00 18        	addi	s0, sp, 0x30
802285fc: 23 3c b4 fc  	sd	a1, -0x28(s0)
80228600: 23 30 c4 fe  	sd	a2, -0x20(s0)
80228604: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         Take { iter, n }
80228608: 0c e1        	sd	a1, 0x0(a0)
8022860a: 10 e5        	sd	a2, 0x8(a0)
8022860c: 14 e9        	sd	a3, 0x10(a0)
8022860e: a2 70        	ld	ra, 0x28(sp)
80228610: 02 74        	ld	s0, 0x20(sp)
;     }
80228612: 45 61        	addi	sp, sp, 0x30
80228614: 82 80        	ret

0000000080228616 <_ZN4core4iter6traits8iterator8Iterator4take17h610ec437043bfb43E>:
;     fn take(self, n: usize) -> Take<Self>
80228616: 79 71        	addi	sp, sp, -0x30
80228618: 06 f4        	sd	ra, 0x28(sp)
8022861a: 22 f0        	sd	s0, 0x20(sp)
8022861c: 00 18        	addi	s0, sp, 0x30
8022861e: 23 3c b4 fc  	sd	a1, -0x28(s0)
80228622: 23 30 c4 fe  	sd	a2, -0x20(s0)
80228626: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         Take { iter, n }
8022862a: 0c e1        	sd	a1, 0x0(a0)
8022862c: 10 e5        	sd	a2, 0x8(a0)
8022862e: 14 e9        	sd	a3, 0x10(a0)
80228630: a2 70        	ld	ra, 0x28(sp)
80228632: 02 74        	ld	s0, 0x20(sp)
;     }
80228634: 45 61        	addi	sp, sp, 0x30
80228636: 82 80        	ret

0000000080228638 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E>:
;     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
80228638: 19 71        	addi	sp, sp, -0x80
8022863a: 86 fc        	sd	ra, 0x78(sp)
8022863c: a2 f8        	sd	s0, 0x70(sp)
8022863e: 00 01        	addi	s0, sp, 0x80
80228640: 23 34 a4 f8  	sd	a0, -0x78(s0)
80228644: 23 38 b4 f8  	sd	a1, -0x70(s0)
80228648: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         while let Some(x) = self.next() {
8022864c: 09 a0        	j	0x8022864e <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E+0x16>
8022864e: 03 35 84 f8  	ld	a0, -0x78(s0)
;         while let Some(x) = self.next() {
80228652: 97 00 00 00  	auipc	ra, 0x0
80228656: e7 80 80 2c  	jalr	0x2c8(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E>
8022865a: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022865e: 03 35 84 fa  	ld	a0, -0x58(s0)
80228662: 05 cd        	beqz	a0, 0x8022869a <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E+0x62>
80228664: 09 a0        	j	0x80228666 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E+0x2e>
80228666: 03 35 84 fa  	ld	a0, -0x58(s0)
8022866a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             accum = f(accum, x)?;
8022866e: 23 30 a4 fc  	sd	a0, -0x40(s0)
80228672: 83 35 04 fc  	ld	a1, -0x40(s0)
80228676: 13 05 04 f9  	addi	a0, s0, -0x70
8022867a: 97 a0 ff ff  	auipc	ra, 0xffffa
8022867e: e7 80 20 ea  	jalr	-0x15e(ra) <ekernel+0xffcd551c>
80228682: 97 90 ff ff  	auipc	ra, 0xffff9
80228686: e7 80 c0 7e  	jalr	0x7ec(ra) <ekernel+0xffcd4e6e>
8022868a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022868e: 23 3c b4 fa  	sd	a1, -0x48(s0)
80228692: 03 35 84 fb  	ld	a0, -0x48(s0)
80228696: 19 c9        	beqz	a0, 0x802286ac <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E+0x74>
80228698: 19 a8        	j	0x802286ae <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E+0x76>
;         try { accum }
8022869a: 97 90 ff ff  	auipc	ra, 0xffff9
8022869e: e7 80 00 74  	jalr	0x740(ra) <ekernel+0xffcd4dda>
802286a2: 23 3c a4 f8  	sd	a0, -0x68(s0)
802286a6: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
802286aa: 1d a0        	j	0x802286d0 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E+0x98>
;         while let Some(x) = self.next() {
802286ac: 4d b7        	j	0x8022864e <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E+0x16>
;             accum = f(accum, x)?;
802286ae: 03 35 04 fb  	ld	a0, -0x50(s0)
802286b2: 83 35 84 fb  	ld	a1, -0x48(s0)
802286b6: 23 30 a4 fe  	sd	a0, -0x20(s0)
802286ba: 23 34 b4 fe  	sd	a1, -0x18(s0)
802286be: 97 90 ff ff  	auipc	ra, 0xffff9
802286c2: e7 80 a0 66  	jalr	0x66a(ra) <ekernel+0xffcd4d28>
802286c6: 23 3c a4 f8  	sd	a0, -0x68(s0)
802286ca: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
802286ce: 09 a0        	j	0x802286d0 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hc80c3d4445aa6382E+0x98>
802286d0: 03 35 84 f9  	ld	a0, -0x68(s0)
802286d4: 83 35 04 fa  	ld	a1, -0x60(s0)
802286d8: e6 70        	ld	ra, 0x78(sp)
802286da: 46 74        	ld	s0, 0x70(sp)
802286dc: 09 61        	addi	sp, sp, 0x80
802286de: 82 80        	ret

00000000802286e0 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE>:
;     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
802286e0: 1d 71        	addi	sp, sp, -0x60
802286e2: 86 ec        	sd	ra, 0x58(sp)
802286e4: a2 e8        	sd	s0, 0x50(sp)
802286e6: 80 10        	addi	s0, sp, 0x60
802286e8: 23 30 a4 fa  	sd	a0, -0x60(s0)
802286ec: 23 34 b4 fa  	sd	a1, -0x58(s0)
802286f0: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         while let Some(x) = self.next() {
802286f4: 09 a0        	j	0x802286f6 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE+0x16>
802286f6: 03 35 04 fa  	ld	a0, -0x60(s0)
;         while let Some(x) = self.next() {
802286fa: 97 00 00 00  	auipc	ra, 0x0
802286fe: e7 80 00 22  	jalr	0x220(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E>
80228702: 23 3c a4 fa  	sd	a0, -0x48(s0)
80228706: 03 35 84 fb  	ld	a0, -0x48(s0)
8022870a: 15 c9        	beqz	a0, 0x8022873e <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE+0x5e>
8022870c: 09 a0        	j	0x8022870e <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE+0x2e>
8022870e: 03 35 84 fb  	ld	a0, -0x48(s0)
80228712: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             accum = f(accum, x)?;
80228716: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022871a: 83 35 84 fc  	ld	a1, -0x38(s0)
8022871e: 13 05 84 fa  	addi	a0, s0, -0x58
80228722: 97 70 ff ff  	auipc	ra, 0xffff7
80228726: e7 80 00 2a  	jalr	0x2a0(ra) <ekernel+0xffcd29c2>
8022872a: 97 90 ff ff  	auipc	ra, 0xffff9
8022872e: e7 80 60 70  	jalr	0x706(ra) <ekernel+0xffcd4e30>
80228732: 23 30 a4 fc  	sd	a0, -0x40(s0)
80228736: 03 35 04 fc  	ld	a0, -0x40(s0)
8022873a: 09 c9        	beqz	a0, 0x8022874c <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE+0x6c>
8022873c: 09 a8        	j	0x8022874e <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE+0x6e>
;         try { accum }
8022873e: 97 90 ff ff  	auipc	ra, 0xffff9
80228742: e7 80 80 6d  	jalr	0x6d8(ra) <ekernel+0xffcd4e16>
80228746: 23 38 a4 fa  	sd	a0, -0x50(s0)
;     }
8022874a: 29 a8        	j	0x80228764 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE+0x84>
;         while let Some(x) = self.next() {
8022874c: 6d b7        	j	0x802286f6 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE+0x16>
;             accum = f(accum, x)?;
8022874e: 03 35 04 fc  	ld	a0, -0x40(s0)
80228752: 23 34 a4 fe  	sd	a0, -0x18(s0)
80228756: 97 90 ff ff  	auipc	ra, 0xffff9
8022875a: e7 80 a0 60  	jalr	0x60a(ra) <ekernel+0xffcd4d60>
8022875e: 23 38 a4 fa  	sd	a0, -0x50(s0)
;     }
80228762: 09 a0        	j	0x80228764 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hcbbe55ec29a1376eE+0x84>
80228764: 03 35 04 fb  	ld	a0, -0x50(s0)
80228768: e6 60        	ld	ra, 0x58(sp)
8022876a: 46 64        	ld	s0, 0x50(sp)
8022876c: 25 61        	addi	sp, sp, 0x60
8022876e: 82 80        	ret

0000000080228770 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E>:
;     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
80228770: 19 71        	addi	sp, sp, -0x80
80228772: 86 fc        	sd	ra, 0x78(sp)
80228774: a2 f8        	sd	s0, 0x70(sp)
80228776: 00 01        	addi	s0, sp, 0x80
80228778: 23 34 a4 f8  	sd	a0, -0x78(s0)
8022877c: 23 38 b4 f8  	sd	a1, -0x70(s0)
80228780: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         while let Some(x) = self.next() {
80228784: 09 a0        	j	0x80228786 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E+0x16>
80228786: 03 35 84 f8  	ld	a0, -0x78(s0)
;         while let Some(x) = self.next() {
8022878a: 97 00 00 00  	auipc	ra, 0x0
8022878e: e7 80 00 0d  	jalr	0xd0(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E>
80228792: 23 34 a4 fa  	sd	a0, -0x58(s0)
80228796: 03 35 84 fa  	ld	a0, -0x58(s0)
8022879a: 05 cd        	beqz	a0, 0x802287d2 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E+0x62>
8022879c: 09 a0        	j	0x8022879e <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E+0x2e>
8022879e: 03 35 84 fa  	ld	a0, -0x58(s0)
802287a2: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             accum = f(accum, x)?;
802287a6: 23 30 a4 fc  	sd	a0, -0x40(s0)
802287aa: 83 35 04 fc  	ld	a1, -0x40(s0)
802287ae: 13 05 04 f9  	addi	a0, s0, -0x70
802287b2: 97 a0 ff ff  	auipc	ra, 0xffffa
802287b6: e7 80 20 c2  	jalr	-0x3de(ra) <ekernel+0xffcd53d4>
802287ba: 97 90 ff ff  	auipc	ra, 0xffff9
802287be: e7 80 a0 75  	jalr	0x75a(ra) <ekernel+0xffcd4f14>
802287c2: 23 38 a4 fa  	sd	a0, -0x50(s0)
802287c6: 23 3c b4 fa  	sd	a1, -0x48(s0)
802287ca: 03 35 84 fb  	ld	a0, -0x48(s0)
802287ce: 19 c9        	beqz	a0, 0x802287e4 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E+0x74>
802287d0: 19 a8        	j	0x802287e6 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E+0x76>
;         try { accum }
802287d2: 97 90 ff ff  	auipc	ra, 0xffff9
802287d6: e7 80 60 62  	jalr	0x626(ra) <ekernel+0xffcd4df8>
802287da: 23 3c a4 f8  	sd	a0, -0x68(s0)
802287de: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
802287e2: 1d a0        	j	0x80228808 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E+0x98>
;         while let Some(x) = self.next() {
802287e4: 4d b7        	j	0x80228786 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E+0x16>
;             accum = f(accum, x)?;
802287e6: 03 35 04 fb  	ld	a0, -0x50(s0)
802287ea: 83 35 84 fb  	ld	a1, -0x48(s0)
802287ee: 23 30 a4 fe  	sd	a0, -0x20(s0)
802287f2: 23 34 b4 fe  	sd	a1, -0x18(s0)
802287f6: 97 90 ff ff  	auipc	ra, 0xffff9
802287fa: e7 80 e0 58  	jalr	0x58e(ra) <ekernel+0xffcd4d84>
802287fe: 23 3c a4 f8  	sd	a0, -0x68(s0)
80228802: 23 30 b4 fa  	sd	a1, -0x60(s0)
;     }
80228806: 09 a0        	j	0x80228808 <_ZN4core4iter6traits8iterator8Iterator8try_fold17hf6adff811f3e04c9E+0x98>
80228808: 03 35 84 f9  	ld	a0, -0x68(s0)
8022880c: 83 35 04 fa  	ld	a1, -0x60(s0)
80228810: e6 70        	ld	ra, 0x78(sp)
80228812: 46 74        	ld	s0, 0x70(sp)
80228814: 09 61        	addi	sp, sp, 0x80
80228816: 82 80        	ret

0000000080228818 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h83f5ff706b15ac75E>:
;     fn enumerate(self) -> Enumerate<Self>
80228818: 79 71        	addi	sp, sp, -0x30
8022881a: 06 f4        	sd	ra, 0x28(sp)
8022881c: 22 f0        	sd	s0, 0x20(sp)
8022881e: 00 18        	addi	s0, sp, 0x30
80228820: 23 3c b4 fc  	sd	a1, -0x28(s0)
80228824: aa 85        	mv	a1, a0
80228826: 03 35 84 fd  	ld	a0, -0x28(s0)
8022882a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022882e: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         Enumerate { iter, count: 0 }
80228832: 88 e1        	sd	a0, 0x0(a1)
80228834: 90 e5        	sd	a2, 0x8(a1)
80228836: 01 45        	li	a0, 0x0
80228838: 88 e9        	sd	a0, 0x10(a1)
8022883a: a2 70        	ld	ra, 0x28(sp)
8022883c: 02 74        	ld	s0, 0x20(sp)
;     }
8022883e: 45 61        	addi	sp, sp, 0x30
80228840: 82 80        	ret

0000000080228842 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6cb43cd67448be0dE>:
;     fn into_iter(self) -> I {
80228842: 01 11        	addi	sp, sp, -0x20
80228844: 06 ec        	sd	ra, 0x18(sp)
80228846: 22 e8        	sd	s0, 0x10(sp)
80228848: 00 10        	addi	s0, sp, 0x20
8022884a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022884e: 23 34 b4 fe  	sd	a1, -0x18(s0)
80228852: e2 60        	ld	ra, 0x18(sp)
80228854: 42 64        	ld	s0, 0x10(sp)
;     }
80228856: 05 61        	addi	sp, sp, 0x20
80228858: 82 80        	ret

000000008022885a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E>:
;             fn next(&mut self) -> Option<$elem> {
8022885a: 31 71        	addi	sp, sp, -0xc0
8022885c: 06 fd        	sd	ra, 0xb8(sp)
8022885e: 22 f9        	sd	s0, 0xb0(sp)
80228860: 80 01        	addi	s0, sp, 0xc0
80228862: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80228866: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
80228868: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     uint_impl! {
8022886c: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
80228870: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80228874: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     if is_empty!(self) {
80228878: 09 a0        	j	0x8022887a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E+0x20>
8022887a: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     if is_empty!(self) {
8022887e: 93 05 85 00  	addi	a1, a0, 0x8
80228882: 23 3c b4 f8  	sd	a1, -0x68(s0)
80228886: 0c 65        	ld	a1, 0x8(a0)
80228888: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022888c: 23 30 a4 fa  	sd	a0, -0x60(s0)
80228890: 93 05 84 f7  	addi	a1, s0, -0x88
80228894: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.as_ptr() == other.as_ptr()
80228898: 08 61        	ld	a0, 0x0(a0)
8022889a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022889e: 83 35 84 f7  	ld	a1, -0x88(s0)
802288a2: 23 3c b4 fa  	sd	a1, -0x48(s0)
802288a6: 2d 8d        	xor	a0, a0, a1
802288a8: 13 35 15 00  	seqz	a0, a0
802288ac: a3 0b a4 f6  	sb	a0, -0x89(s0)
;                     if is_empty!(self) {
802288b0: 09 a0        	j	0x802288b2 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E+0x58>
802288b2: 03 45 74 f7  	lbu	a0, -0x89(s0)
802288b6: 05 89        	andi	a0, a0, 0x1
802288b8: 01 e9        	bnez	a0, 0x802288c8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E+0x6e>
802288ba: 09 a0        	j	0x802288bc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E+0x62>
802288bc: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let old = self.ptr;
802288c0: 08 61        	ld	a0, 0x0(a0)
802288c2: 23 30 a4 f8  	sd	a0, -0x80(s0)
;                     if_zst!(mut self,
802288c6: 29 a0        	j	0x802288d0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E+0x76>
802288c8: 01 45        	li	a0, 0x0
;                         None
802288ca: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
802288ce: 81 a0        	j	0x8022890e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E+0xb4>
802288d0: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                     if_zst!(mut self,
802288d4: 13 85 85 00  	addi	a0, a1, 0x8
802288d8: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as _
802288dc: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         _end => self.ptr = self.ptr.add(offset),
802288e0: 88 61        	ld	a0, 0x0(a1)
802288e2: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
802288e6: 21 05        	addi	a0, a0, 0x8
802288e8: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                         _end => self.ptr = self.ptr.add(offset),
802288ec: 03 35 84 f8  	ld	a0, -0x78(s0)
802288f0: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
802288f2: 09 a0        	j	0x802288f4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E+0x9a>
802288f4: 13 05 04 f8  	addi	a0, s0, -0x80
;                         Some(next_unchecked!(self))
802288f8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
802288fc: 03 35 04 f8  	ld	a0, -0x80(s0)
80228900: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
80228904: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
80228908: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8022890c: 09 a0        	j	0x8022890e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1188d73490bf1468E+0xb4>
;             }
8022890e: 03 35 84 f6  	ld	a0, -0x98(s0)
80228912: ea 70        	ld	ra, 0xb8(sp)
80228914: 4a 74        	ld	s0, 0xb0(sp)
80228916: 29 61        	addi	sp, sp, 0xc0
80228918: 82 80        	ret

000000008022891a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E>:
;             fn next(&mut self) -> Option<$elem> {
8022891a: 31 71        	addi	sp, sp, -0xc0
8022891c: 06 fd        	sd	ra, 0xb8(sp)
8022891e: 22 f9        	sd	s0, 0xb0(sp)
80228920: 80 01        	addi	s0, sp, 0xc0
80228922: 23 34 a4 f4  	sd	a0, -0xb8(s0)
80228926: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
80228928: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     uint_impl! {
8022892c: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
80228930: 23 30 b4 f6  	sd	a1, -0xa0(s0)
80228934: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     if is_empty!(self) {
80228938: 09 a0        	j	0x8022893a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E+0x20>
8022893a: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     if is_empty!(self) {
8022893e: 93 05 85 00  	addi	a1, a0, 0x8
80228942: 23 3c b4 f8  	sd	a1, -0x68(s0)
80228946: 0c 65        	ld	a1, 0x8(a0)
80228948: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022894c: 23 30 a4 fa  	sd	a0, -0x60(s0)
80228950: 93 05 84 f7  	addi	a1, s0, -0x88
80228954: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.as_ptr() == other.as_ptr()
80228958: 08 61        	ld	a0, 0x0(a0)
8022895a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022895e: 83 35 84 f7  	ld	a1, -0x88(s0)
80228962: 23 3c b4 fa  	sd	a1, -0x48(s0)
80228966: 2d 8d        	xor	a0, a0, a1
80228968: 13 35 15 00  	seqz	a0, a0
8022896c: a3 0b a4 f6  	sb	a0, -0x89(s0)
;                     if is_empty!(self) {
80228970: 09 a0        	j	0x80228972 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E+0x58>
80228972: 03 45 74 f7  	lbu	a0, -0x89(s0)
80228976: 05 89        	andi	a0, a0, 0x1
80228978: 01 e9        	bnez	a0, 0x80228988 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E+0x6e>
8022897a: 09 a0        	j	0x8022897c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E+0x62>
8022897c: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let old = self.ptr;
80228980: 08 61        	ld	a0, 0x0(a0)
80228982: 23 30 a4 f8  	sd	a0, -0x80(s0)
;                     if_zst!(mut self,
80228986: 29 a0        	j	0x80228990 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E+0x76>
80228988: 01 45        	li	a0, 0x0
;                         None
8022898a: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8022898e: 81 a0        	j	0x802289ce <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E+0xb4>
80228990: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                     if_zst!(mut self,
80228994: 13 85 85 00  	addi	a0, a1, 0x8
80228998: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as _
8022899c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         _end => self.ptr = self.ptr.add(offset),
802289a0: 88 61        	ld	a0, 0x0(a1)
802289a2: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
802289a6: 41 05        	addi	a0, a0, 0x10
802289a8: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                         _end => self.ptr = self.ptr.add(offset),
802289ac: 03 35 84 f8  	ld	a0, -0x78(s0)
802289b0: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
802289b2: 09 a0        	j	0x802289b4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E+0x9a>
802289b4: 13 05 04 f8  	addi	a0, s0, -0x80
;                         Some(next_unchecked!(self))
802289b8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
802289bc: 03 35 04 f8  	ld	a0, -0x80(s0)
802289c0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
802289c4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
802289c8: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
802289cc: 09 a0        	j	0x802289ce <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a220dbb76d642f3E+0xb4>
;             }
802289ce: 03 35 84 f6  	ld	a0, -0x98(s0)
802289d2: ea 70        	ld	ra, 0xb8(sp)
802289d4: 4a 74        	ld	s0, 0xb0(sp)
802289d6: 29 61        	addi	sp, sp, 0xc0
802289d8: 82 80        	ret

00000000802289da <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE>:
;             fn next(&mut self) -> Option<$elem> {
802289da: 31 71        	addi	sp, sp, -0xc0
802289dc: 06 fd        	sd	ra, 0xb8(sp)
802289de: 22 f9        	sd	s0, 0xb0(sp)
802289e0: 80 01        	addi	s0, sp, 0xc0
802289e2: 23 34 a4 f4  	sd	a0, -0xb8(s0)
802289e6: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
802289e8: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     uint_impl! {
802289ec: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
802289f0: 23 30 b4 f6  	sd	a1, -0xa0(s0)
802289f4: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     if is_empty!(self) {
802289f8: 09 a0        	j	0x802289fa <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE+0x20>
802289fa: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     if is_empty!(self) {
802289fe: 93 05 85 00  	addi	a1, a0, 0x8
80228a02: 23 3c b4 f8  	sd	a1, -0x68(s0)
80228a06: 0c 65        	ld	a1, 0x8(a0)
80228a08: 23 3c b4 f6  	sd	a1, -0x88(s0)
80228a0c: 23 30 a4 fa  	sd	a0, -0x60(s0)
80228a10: 93 05 84 f7  	addi	a1, s0, -0x88
80228a14: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.as_ptr() == other.as_ptr()
80228a18: 08 61        	ld	a0, 0x0(a0)
80228a1a: 23 38 a4 fa  	sd	a0, -0x50(s0)
80228a1e: 83 35 84 f7  	ld	a1, -0x88(s0)
80228a22: 23 3c b4 fa  	sd	a1, -0x48(s0)
80228a26: 2d 8d        	xor	a0, a0, a1
80228a28: 13 35 15 00  	seqz	a0, a0
80228a2c: a3 0b a4 f6  	sb	a0, -0x89(s0)
;                     if is_empty!(self) {
80228a30: 09 a0        	j	0x80228a32 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE+0x58>
80228a32: 03 45 74 f7  	lbu	a0, -0x89(s0)
80228a36: 05 89        	andi	a0, a0, 0x1
80228a38: 01 e9        	bnez	a0, 0x80228a48 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE+0x6e>
80228a3a: 09 a0        	j	0x80228a3c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE+0x62>
80228a3c: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let old = self.ptr;
80228a40: 08 61        	ld	a0, 0x0(a0)
80228a42: 23 30 a4 f8  	sd	a0, -0x80(s0)
;                     if_zst!(mut self,
80228a46: 29 a0        	j	0x80228a50 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE+0x76>
80228a48: 01 45        	li	a0, 0x0
;                         None
80228a4a: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
80228a4e: 81 a0        	j	0x80228a8e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE+0xb4>
80228a50: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                     if_zst!(mut self,
80228a54: 13 85 85 00  	addi	a0, a1, 0x8
80228a58: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as _
80228a5c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         _end => self.ptr = self.ptr.add(offset),
80228a60: 88 61        	ld	a0, 0x0(a1)
80228a62: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
80228a66: 11 05        	addi	a0, a0, 0x4
80228a68: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                         _end => self.ptr = self.ptr.add(offset),
80228a6c: 03 35 84 f8  	ld	a0, -0x78(s0)
80228a70: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
80228a72: 09 a0        	j	0x80228a74 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE+0x9a>
80228a74: 13 05 04 f8  	addi	a0, s0, -0x80
;                         Some(next_unchecked!(self))
80228a78: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80228a7c: 03 35 04 f8  	ld	a0, -0x80(s0)
80228a80: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
80228a84: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
80228a88: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
80228a8c: 09 a0        	j	0x80228a8e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h95c2be5d934ab6aeE+0xb4>
;             }
80228a8e: 03 35 84 f6  	ld	a0, -0x98(s0)
80228a92: ea 70        	ld	ra, 0xb8(sp)
80228a94: 4a 74        	ld	s0, 0xb0(sp)
80228a96: 29 61        	addi	sp, sp, 0xc0
80228a98: 82 80        	ret

0000000080228a9a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE>:
;             fn next(&mut self) -> Option<$elem> {
80228a9a: 71 71        	addi	sp, sp, -0xb0
80228a9c: 06 f5        	sd	ra, 0xa8(sp)
80228a9e: 22 f1        	sd	s0, 0xa0(sp)
80228aa0: 00 19        	addi	s0, sp, 0xb0
80228aa2: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80228aa6: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
80228aa8: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     uint_impl! {
80228aac: 23 30 b4 f6  	sd	a1, -0xa0(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
80228ab0: 23 34 b4 f6  	sd	a1, -0x98(s0)
80228ab4: 23 3c a4 f8  	sd	a0, -0x68(s0)
;                     if is_empty!(self) {
80228ab8: 09 a0        	j	0x80228aba <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE+0x20>
80228aba: 03 35 04 f5  	ld	a0, -0xb0(s0)
;                     if is_empty!(self) {
80228abe: 93 05 85 00  	addi	a1, a0, 0x8
80228ac2: 23 30 b4 fa  	sd	a1, -0x60(s0)
80228ac6: 0c 65        	ld	a1, 0x8(a0)
80228ac8: 23 30 b4 f8  	sd	a1, -0x80(s0)
80228acc: 23 34 a4 fa  	sd	a0, -0x58(s0)
80228ad0: 93 05 04 f8  	addi	a1, s0, -0x80
80228ad4: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         self.as_ptr() == other.as_ptr()
80228ad8: 08 61        	ld	a0, 0x0(a0)
80228ada: 23 3c a4 fa  	sd	a0, -0x48(s0)
80228ade: 83 35 04 f8  	ld	a1, -0x80(s0)
80228ae2: 23 30 b4 fc  	sd	a1, -0x40(s0)
80228ae6: 2d 8d        	xor	a0, a0, a1
80228ae8: 13 35 15 00  	seqz	a0, a0
80228aec: a3 0f a4 f6  	sb	a0, -0x81(s0)
;                     if is_empty!(self) {
80228af0: 09 a0        	j	0x80228af2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE+0x58>
80228af2: 03 45 f4 f7  	lbu	a0, -0x81(s0)
80228af6: 05 89        	andi	a0, a0, 0x1
80228af8: 01 e9        	bnez	a0, 0x80228b08 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE+0x6e>
80228afa: 09 a0        	j	0x80228afc <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE+0x62>
80228afc: 03 35 04 f5  	ld	a0, -0xb0(s0)
;                 let old = self.ptr;
80228b00: 08 61        	ld	a0, 0x0(a0)
80228b02: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                     if_zst!(mut self,
80228b06: 29 a0        	j	0x80228b10 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE+0x76>
80228b08: 01 45        	li	a0, 0x0
;                         None
80228b0a: 23 38 a4 f6  	sd	a0, -0x90(s0)
;                     if is_empty!(self) {
80228b0e: 35 a8        	j	0x80228b4a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE+0xb0>
80228b10: 83 35 04 f5  	ld	a1, -0xb0(s0)
;                     if_zst!(mut self,
80228b14: 13 85 85 00  	addi	a0, a1, 0x8
80228b18: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self as _
80228b1c: 23 38 a4 fc  	sd	a0, -0x30(s0)
;                         _end => self.ptr = self.ptr.add(offset),
80228b20: 88 61        	ld	a0, 0x0(a1)
80228b22: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
80228b26: 05 05        	addi	a0, a0, 0x1
80228b28: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                         _end => self.ptr = self.ptr.add(offset),
80228b2c: 03 35 04 f9  	ld	a0, -0x70(s0)
80228b30: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
80228b32: 09 a0        	j	0x80228b34 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE+0x9a>
80228b34: 13 05 84 f8  	addi	a0, s0, -0x78
;                         Some(next_unchecked!(self))
80228b38: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.as_ptr() }
80228b3c: 03 35 84 f8  	ld	a0, -0x78(s0)
80228b40: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
80228b44: 23 38 a4 f6  	sd	a0, -0x90(s0)
;                     if is_empty!(self) {
80228b48: 09 a0        	j	0x80228b4a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE+0xb0>
;             }
80228b4a: 03 35 04 f7  	ld	a0, -0x90(s0)
80228b4e: aa 70        	ld	ra, 0xa8(sp)
80228b50: 0a 74        	ld	s0, 0xa0(sp)
80228b52: 4d 61        	addi	sp, sp, 0xb0
80228b54: 82 80        	ret

0000000080228b56 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E>:
;             fn next(&mut self) -> Option<$elem> {
80228b56: 71 71        	addi	sp, sp, -0xb0
80228b58: 06 f5        	sd	ra, 0xa8(sp)
80228b5a: 22 f1        	sd	s0, 0xa0(sp)
80228b5c: 00 19        	addi	s0, sp, 0xb0
80228b5e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80228b62: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
80228b64: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     uint_impl! {
80228b68: 23 30 b4 f6  	sd	a1, -0xa0(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
80228b6c: 23 34 b4 f6  	sd	a1, -0x98(s0)
80228b70: 23 3c a4 f8  	sd	a0, -0x68(s0)
;                     if is_empty!(self) {
80228b74: 09 a0        	j	0x80228b76 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E+0x20>
80228b76: 03 35 04 f5  	ld	a0, -0xb0(s0)
;                     if is_empty!(self) {
80228b7a: 93 05 85 00  	addi	a1, a0, 0x8
80228b7e: 23 30 b4 fa  	sd	a1, -0x60(s0)
80228b82: 0c 65        	ld	a1, 0x8(a0)
80228b84: 23 30 b4 f8  	sd	a1, -0x80(s0)
80228b88: 23 34 a4 fa  	sd	a0, -0x58(s0)
80228b8c: 93 05 04 f8  	addi	a1, s0, -0x80
80228b90: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         self.as_ptr() == other.as_ptr()
80228b94: 08 61        	ld	a0, 0x0(a0)
80228b96: 23 3c a4 fa  	sd	a0, -0x48(s0)
80228b9a: 83 35 04 f8  	ld	a1, -0x80(s0)
80228b9e: 23 30 b4 fc  	sd	a1, -0x40(s0)
80228ba2: 2d 8d        	xor	a0, a0, a1
80228ba4: 13 35 15 00  	seqz	a0, a0
80228ba8: a3 0f a4 f6  	sb	a0, -0x81(s0)
;                     if is_empty!(self) {
80228bac: 09 a0        	j	0x80228bae <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E+0x58>
80228bae: 03 45 f4 f7  	lbu	a0, -0x81(s0)
80228bb2: 05 89        	andi	a0, a0, 0x1
80228bb4: 01 e9        	bnez	a0, 0x80228bc4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E+0x6e>
80228bb6: 09 a0        	j	0x80228bb8 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E+0x62>
80228bb8: 03 35 04 f5  	ld	a0, -0xb0(s0)
;                 let old = self.ptr;
80228bbc: 08 61        	ld	a0, 0x0(a0)
80228bbe: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                     if_zst!(mut self,
80228bc2: 29 a0        	j	0x80228bcc <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E+0x76>
80228bc4: 01 45        	li	a0, 0x0
;                         None
80228bc6: 23 38 a4 f6  	sd	a0, -0x90(s0)
;                     if is_empty!(self) {
80228bca: 35 a8        	j	0x80228c06 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E+0xb0>
80228bcc: 83 35 04 f5  	ld	a1, -0xb0(s0)
;                     if_zst!(mut self,
80228bd0: 13 85 85 00  	addi	a0, a1, 0x8
80228bd4: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self as _
80228bd8: 23 38 a4 fc  	sd	a0, -0x30(s0)
;                         _end => self.ptr = self.ptr.add(offset),
80228bdc: 88 61        	ld	a0, 0x0(a1)
80228bde: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
80228be2: 11 05        	addi	a0, a0, 0x4
80228be4: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                         _end => self.ptr = self.ptr.add(offset),
80228be8: 03 35 04 f9  	ld	a0, -0x70(s0)
80228bec: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
80228bee: 09 a0        	j	0x80228bf0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E+0x9a>
80228bf0: 13 05 84 f8  	addi	a0, s0, -0x78
;                         Some(next_unchecked!(self))
80228bf4: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         unsafe { &mut *self.as_ptr() }
80228bf8: 03 35 84 f8  	ld	a0, -0x78(s0)
80228bfc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
80228c00: 23 38 a4 f6  	sd	a0, -0x90(s0)
;                     if is_empty!(self) {
80228c04: 09 a0        	j	0x80228c06 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E+0xb0>
;             }
80228c06: 03 35 04 f7  	ld	a0, -0x90(s0)
80228c0a: aa 70        	ld	ra, 0xa8(sp)
80228c0c: 0a 74        	ld	s0, 0xa0(sp)
80228c0e: 4d 61        	addi	sp, sp, 0xb0
80228c10: 82 80        	ret

0000000080228c12 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h08c7a1e54f905abfE>:
;             fn for_each<F>(mut self, mut f: F)
80228c12: 39 71        	addi	sp, sp, -0x40
80228c14: 06 fc        	sd	ra, 0x38(sp)
80228c16: 22 f8        	sd	s0, 0x30(sp)
80228c18: 80 00        	addi	s0, sp, 0x40
80228c1a: 23 30 a4 fc  	sd	a0, -0x40(s0)
80228c1e: 23 34 b4 fc  	sd	a1, -0x38(s0)
;                 while let Some(x) = self.next() {
80228c22: 09 a0        	j	0x80228c24 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h08c7a1e54f905abfE+0x12>
80228c24: 13 05 04 fc  	addi	a0, s0, -0x40
;                 while let Some(x) = self.next() {
80228c28: 97 00 00 00  	auipc	ra, 0x0
80228c2c: e7 80 e0 f2  	jalr	-0xd2(ra) <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf61c1b4bc707be38E>
80228c30: 23 3c a4 fc  	sd	a0, -0x28(s0)
80228c34: 03 35 84 fd  	ld	a0, -0x28(s0)
80228c38: 0d c1        	beqz	a0, 0x80228c5a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h08c7a1e54f905abfE+0x48>
80228c3a: 09 a0        	j	0x80228c3c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h08c7a1e54f905abfE+0x2a>
80228c3c: 03 35 84 fd  	ld	a0, -0x28(s0)
80228c40: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     f(x);
80228c44: 23 30 a4 fe  	sd	a0, -0x20(s0)
80228c48: 83 35 04 fe  	ld	a1, -0x20(s0)
80228c4c: 13 05 74 fd  	addi	a0, s0, -0x29
80228c50: 97 70 ff ff  	auipc	ra, 0xffff7
80228c54: e7 80 a0 ed  	jalr	-0x126(ra) <ekernel+0xffcd2b2a>
;                 while let Some(x) = self.next() {
80228c58: f1 b7        	j	0x80228c24 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17h08c7a1e54f905abfE+0x12>
80228c5a: e2 70        	ld	ra, 0x38(sp)
80228c5c: 42 74        	ld	s0, 0x30(sp)
;             }
80228c5e: 21 61        	addi	sp, sp, 0x40
80228c60: 82 80        	ret

0000000080228c62 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hcb3888c16e94b73aE>:
;             fn for_each<F>(mut self, mut f: F)
80228c62: 39 71        	addi	sp, sp, -0x40
80228c64: 06 fc        	sd	ra, 0x38(sp)
80228c66: 22 f8        	sd	s0, 0x30(sp)
80228c68: 80 00        	addi	s0, sp, 0x40
80228c6a: 23 30 a4 fc  	sd	a0, -0x40(s0)
80228c6e: 23 34 b4 fc  	sd	a1, -0x38(s0)
;                 while let Some(x) = self.next() {
80228c72: 09 a0        	j	0x80228c74 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hcb3888c16e94b73aE+0x12>
80228c74: 13 05 04 fc  	addi	a0, s0, -0x40
;                 while let Some(x) = self.next() {
80228c78: 97 00 00 00  	auipc	ra, 0x0
80228c7c: e7 80 20 e2  	jalr	-0x1de(ra) <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h63b4ddcb3567a45dE>
80228c80: 23 3c a4 fc  	sd	a0, -0x28(s0)
80228c84: 03 35 84 fd  	ld	a0, -0x28(s0)
80228c88: 0d c1        	beqz	a0, 0x80228caa <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hcb3888c16e94b73aE+0x48>
80228c8a: 09 a0        	j	0x80228c8c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hcb3888c16e94b73aE+0x2a>
80228c8c: 03 35 84 fd  	ld	a0, -0x28(s0)
80228c90: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                     f(x);
80228c94: 23 30 a4 fe  	sd	a0, -0x20(s0)
80228c98: 83 35 04 fe  	ld	a1, -0x20(s0)
80228c9c: 13 05 74 fd  	addi	a0, s0, -0x29
80228ca0: 97 90 ff ff  	auipc	ra, 0xffff9
80228ca4: e7 80 c0 03  	jalr	0x3c(ra) <ekernel+0xffcd4cdc>
;                 while let Some(x) = self.next() {
80228ca8: f1 b7        	j	0x80228c74 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hcb3888c16e94b73aE+0x12>
80228caa: e2 70        	ld	ra, 0x38(sp)
80228cac: 42 74        	ld	s0, 0x30(sp)
;             }
80228cae: 21 61        	addi	sp, sp, 0x40
80228cb0: 82 80        	ret

0000000080228cb2 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E>:
;                 fn cmp(&self, other: &$t) -> Ordering {
80228cb2: 39 71        	addi	sp, sp, -0x40
80228cb4: 06 fc        	sd	ra, 0x38(sp)
80228cb6: 22 f8        	sd	s0, 0x30(sp)
80228cb8: 80 00        	addi	s0, sp, 0x40
80228cba: 23 30 a4 fe  	sd	a0, -0x20(s0)
80228cbe: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     if *self < *other { Less }
80228cc2: 08 41        	lw	a0, 0x0(a0)
80228cc4: 23 34 a4 fc  	sd	a0, -0x38(s0)
80228cc8: 8c 41        	lw	a1, 0x0(a1)
80228cca: 23 38 b4 fc  	sd	a1, -0x30(s0)
80228cce: 63 6c b5 00  	bltu	a0, a1, 0x80228ce6 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E+0x34>
80228cd2: 09 a0        	j	0x80228cd4 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E+0x22>
80228cd4: 03 35 84 fc  	ld	a0, -0x38(s0)
80228cd8: 83 35 04 fd  	ld	a1, -0x30(s0)
;                     else if *self == *other { Equal }
80228cdc: 81 25        	sext.w	a1, a1
80228cde: 01 25        	sext.w	a0, a0
80228ce0: 63 0c b5 00  	beq	a0, a1, 0x80228cf8 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E+0x46>
80228ce4: 31 a0        	j	0x80228cf0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E+0x3e>
80228ce6: 13 05 f0 0f  	li	a0, 0xff
;                     if *self < *other { Less }
80228cea: a3 0f a4 fc  	sb	a0, -0x21(s0)
80228cee: 11 a8        	j	0x80228d02 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E+0x50>
80228cf0: 05 45        	li	a0, 0x1
;                     else { Greater }
80228cf2: a3 0f a4 fc  	sb	a0, -0x21(s0)
;                     else if *self == *other { Equal }
80228cf6: 29 a0        	j	0x80228d00 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E+0x4e>
80228cf8: 01 45        	li	a0, 0x0
;                     else if *self == *other { Equal }
80228cfa: a3 0f a4 fc  	sb	a0, -0x21(s0)
80228cfe: 09 a0        	j	0x80228d00 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E+0x4e>
;                     if *self < *other { Less }
80228d00: 09 a0        	j	0x80228d02 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u32$GT$3cmp17hbb753df05876c8f8E+0x50>
;                 }
80228d02: 03 45 f4 fd  	lbu	a0, -0x21(s0)
80228d06: e2 70        	ld	ra, 0x38(sp)
80228d08: 42 74        	ld	s0, 0x30(sp)
80228d0a: 21 61        	addi	sp, sp, 0x40
80228d0c: 82 80        	ret

0000000080228d0e <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E>:
;                 fn cmp(&self, other: &$t) -> Ordering {
80228d0e: 39 71        	addi	sp, sp, -0x40
80228d10: 06 fc        	sd	ra, 0x38(sp)
80228d12: 22 f8        	sd	s0, 0x30(sp)
80228d14: 80 00        	addi	s0, sp, 0x40
80228d16: 23 30 a4 fe  	sd	a0, -0x20(s0)
80228d1a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     if *self < *other { Less }
80228d1e: 08 61        	ld	a0, 0x0(a0)
80228d20: 23 34 a4 fc  	sd	a0, -0x38(s0)
80228d24: 8c 61        	ld	a1, 0x0(a1)
80228d26: 23 38 b4 fc  	sd	a1, -0x30(s0)
80228d2a: 63 6a b5 00  	bltu	a0, a1, 0x80228d3e <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E+0x30>
80228d2e: 09 a0        	j	0x80228d30 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E+0x22>
80228d30: 03 35 84 fc  	ld	a0, -0x38(s0)
80228d34: 83 35 04 fd  	ld	a1, -0x30(s0)
;                     else if *self == *other { Equal }
80228d38: 63 0c b5 00  	beq	a0, a1, 0x80228d50 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E+0x42>
80228d3c: 31 a0        	j	0x80228d48 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E+0x3a>
80228d3e: 13 05 f0 0f  	li	a0, 0xff
;                     if *self < *other { Less }
80228d42: a3 0f a4 fc  	sb	a0, -0x21(s0)
80228d46: 11 a8        	j	0x80228d5a <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E+0x4c>
80228d48: 05 45        	li	a0, 0x1
;                     else { Greater }
80228d4a: a3 0f a4 fc  	sb	a0, -0x21(s0)
;                     else if *self == *other { Equal }
80228d4e: 29 a0        	j	0x80228d58 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E+0x4a>
80228d50: 01 45        	li	a0, 0x0
;                     else if *self == *other { Equal }
80228d52: a3 0f a4 fc  	sb	a0, -0x21(s0)
80228d56: 09 a0        	j	0x80228d58 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E+0x4a>
;                     if *self < *other { Less }
80228d58: 09 a0        	j	0x80228d5a <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h2774da4301430f52E+0x4c>
;                 }
80228d5a: 03 45 f4 fd  	lbu	a0, -0x21(s0)
80228d5e: e2 70        	ld	ra, 0x38(sp)
80228d60: 42 74        	ld	s0, 0x30(sp)
80228d62: 21 61        	addi	sp, sp, 0x40
80228d64: 82 80        	ret

0000000080228d66 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17h8207d6adfb40cdb2E>:
;                 fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
80228d66: 01 11        	addi	sp, sp, -0x20
80228d68: 06 ec        	sd	ra, 0x18(sp)
80228d6a: 22 e8        	sd	s0, 0x10(sp)
80228d6c: 00 10        	addi	s0, sp, 0x20
80228d6e: 23 30 a4 fe  	sd	a0, -0x20(s0)
80228d72: 23 34 b4 fe  	sd	a1, -0x18(s0)
80228d76: 08 61        	ld	a0, 0x0(a0)
80228d78: 8c 61        	ld	a1, 0x0(a1)
80228d7a: 2d 8d        	xor	a0, a0, a1
80228d7c: 13 35 15 00  	seqz	a0, a0
80228d80: e2 60        	ld	ra, 0x18(sp)
80228d82: 42 64        	ld	s0, 0x10(sp)
80228d84: 05 61        	addi	sp, sp, 0x20
80228d86: 82 80        	ret

0000000080228d88 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h254914b30b18cb9bE>:
;     pub const fn len(&self) -> usize {
80228d88: 79 71        	addi	sp, sp, -0x30
80228d8a: 06 f4        	sd	ra, 0x28(sp)
80228d8c: 22 f0        	sd	s0, 0x20(sp)
80228d8e: 00 18        	addi	s0, sp, 0x30
80228d90: 23 3c b4 fc  	sd	a1, -0x28(s0)
80228d94: aa 85        	mv	a1, a0
80228d96: 03 35 84 fd  	ld	a0, -0x28(s0)
80228d9a: 23 30 b4 fe  	sd	a1, -0x20(s0)
80228d9e: 23 34 a4 fe  	sd	a0, -0x18(s0)
80228da2: a2 70        	ld	ra, 0x28(sp)
80228da4: 02 74        	ld	s0, 0x20(sp)
;     }
80228da6: 45 61        	addi	sp, sp, 0x30
80228da8: 82 80        	ret

0000000080228daa <_ZN52_$LT$T$u20$as$u20$alloc..slice..hack..ConvertVec$GT$6to_vec17ha81c88e291bd01cfE>:
;         fn to_vec<A: Allocator>(s: &[Self], alloc: A) -> Vec<Self, A> {
80228daa: 55 71        	addi	sp, sp, -0xd0
80228dac: 86 e5        	sd	ra, 0xc8(sp)
80228dae: a2 e1        	sd	s0, 0xc0(sp)
80228db0: 80 09        	addi	s0, sp, 0xd0
80228db2: 23 30 c4 f4  	sd	a2, -0xc0(s0)
80228db6: 2e 86        	mv	a2, a1
80228db8: 83 35 04 f4  	ld	a1, -0xc0(s0)
80228dbc: 23 38 c4 f4  	sd	a2, -0xb0(s0)
80228dc0: 2a 86        	mv	a2, a0
80228dc2: 03 35 04 f5  	ld	a0, -0xb0(s0)
80228dc6: 23 38 c4 f2  	sd	a2, -0xd0(s0)
80228dca: 23 38 a4 f8  	sd	a0, -0x70(s0)
80228dce: 23 3c b4 f8  	sd	a1, -0x68(s0)
;             let mut v = Vec::with_capacity_in(s.len(), alloc);
80228dd2: 23 34 b4 fa  	sd	a1, -0x58(s0)
80228dd6: 13 05 84 f7  	addi	a0, s0, -0x88
80228dda: 23 3c a4 f2  	sd	a0, -0xc8(s0)
80228dde: 01 46        	li	a2, 0x0
80228de0: 23 34 c4 f4  	sd	a2, -0xb8(s0)
;         handle_reserve(Self::try_allocate_in(capacity, AllocInit::Uninitialized, alloc))
80228de4: 97 10 00 00  	auipc	ra, 0x1
80228de8: e7 80 c0 55  	jalr	0x55c(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h10caf23909d872bdE>
80228dec: 03 35 84 f3  	ld	a0, -0xc8(s0)
80228df0: 97 10 00 00  	auipc	ra, 0x1
80228df4: e7 80 60 82  	jalr	-0x7da(ra) <_ZN5alloc7raw_vec14handle_reserve17h4d28c0d5bd23a042E>
80228df8: 03 36 04 f4  	ld	a2, -0xc0(s0)
80228dfc: 2a 87        	mv	a4, a0
80228dfe: 03 35 84 f4  	ld	a0, -0xb8(s0)
80228e02: ae 86        	mv	a3, a1
80228e04: 83 35 04 f5  	ld	a1, -0xb0(s0)
;         Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
80228e08: 23 30 e4 f6  	sd	a4, -0xa0(s0)
80228e0c: 23 34 d4 f6  	sd	a3, -0x98(s0)
80228e10: 23 38 a4 f6  	sd	a0, -0x90(s0)
;         self as *const [T] as *const T
80228e14: 23 38 b4 fa  	sd	a1, -0x50(s0)
80228e18: 13 05 04 f6  	addi	a0, s0, -0xa0
;                 s.as_ptr().copy_to_nonoverlapping(v.as_mut_ptr(), s.len());
80228e1c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         self.buf.ptr()
80228e20: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self.ptr.as_ptr()
80228e24: 03 35 84 f6  	ld	a0, -0x98(s0)
80228e28: 23 3c a4 f4  	sd	a0, -0xa8(s0)
80228e2c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         self.pointer as *mut T
80228e30: 23 38 a4 fc  	sd	a0, -0x30(s0)
;                 s.as_ptr().copy_to_nonoverlapping(v.as_mut_ptr(), s.len());
80228e34: 23 3c c4 fc  	sd	a2, -0x28(s0)
;     assert_unsafe_precondition!(
80228e38: 09 a0        	j	0x80228e3a <_ZN52_$LT$T$u20$as$u20$alloc..slice..hack..ConvertVec$GT$6to_vec17ha81c88e291bd01cfE+0x90>
80228e3a: 03 37 04 f4  	ld	a4, -0xc0(s0)
80228e3e: 83 35 84 f5  	ld	a1, -0xa8(s0)
80228e42: 03 35 04 f5  	ld	a0, -0xb0(s0)
80228e46: 85 46        	li	a3, 0x1
;     assert_unsafe_precondition!(
80228e48: 36 86        	mv	a2, a3
80228e4a: 97 00 00 00  	auipc	ra, 0x0
80228e4e: e7 80 20 33  	jalr	0x332(ra) <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h9e88ce347a02df22E>
80228e52: 09 a0        	j	0x80228e54 <_ZN52_$LT$T$u20$as$u20$alloc..slice..hack..ConvertVec$GT$6to_vec17ha81c88e291bd01cfE+0xaa>
80228e54: 03 36 04 f4  	ld	a2, -0xc0(s0)
80228e58: 83 35 04 f5  	ld	a1, -0xb0(s0)
80228e5c: 03 35 84 f5  	ld	a0, -0xa8(s0)
;     unsafe { copy_nonoverlapping(src, dst, count) }
80228e60: 97 90 00 00  	auipc	ra, 0x9
80228e64: e7 80 e0 e0  	jalr	-0x1f2(ra) <memcpy>
80228e68: 83 35 04 f3  	ld	a1, -0xd0(s0)
80228e6c: 03 35 04 f4  	ld	a0, -0xc0(s0)
80228e70: 13 06 04 f6  	addi	a2, s0, -0xa0
;                 v.set_len(s.len());
80228e74: 23 30 c4 fe  	sd	a2, -0x20(s0)
80228e78: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.len = new_len;
80228e7c: 23 38 a4 f6  	sd	a0, -0x90(s0)
;             v
80228e80: 03 35 04 f7  	ld	a0, -0x90(s0)
80228e84: 88 e9        	sd	a0, 0x10(a1)
80228e86: 03 35 84 f6  	ld	a0, -0x98(s0)
80228e8a: 88 e5        	sd	a0, 0x8(a1)
80228e8c: 03 35 04 f6  	ld	a0, -0xa0(s0)
80228e90: 88 e1        	sd	a0, 0x0(a1)
80228e92: ae 60        	ld	ra, 0xc8(sp)
80228e94: 0e 64        	ld	s0, 0xc0(sp)
;         }
80228e96: 69 61        	addi	sp, sp, 0xd0
80228e98: 82 80        	ret

0000000080228e9a <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop27join_head_and_tail_wrapping17h44e3916fb0acbffdE>:
;                     fn join_head_and_tail_wrapping<T, A: Allocator>(
80228e9a: 59 71        	addi	sp, sp, -0x70
80228e9c: 86 f4        	sd	ra, 0x68(sp)
80228e9e: a2 f0        	sd	s0, 0x60(sp)
80228ea0: 80 18        	addi	s0, sp, 0x70
80228ea2: 23 3c d4 f8  	sd	a3, -0x68(s0)
80228ea6: 23 30 c4 fa  	sd	a2, -0x60(s0)
80228eaa: 23 34 b4 fa  	sd	a1, -0x58(s0)
80228eae: 23 38 a4 fa  	sd	a0, -0x50(s0)
80228eb2: 23 38 a4 fc  	sd	a0, -0x30(s0)
80228eb6: 23 3c b4 fc  	sd	a1, -0x28(s0)
80228eba: 23 30 c4 fe  	sd	a2, -0x20(s0)
80228ebe: 23 34 d4 fe  	sd	a3, -0x18(s0)
;                         if head_len < tail_len {
80228ec2: 63 61 d6 04  	bltu	a2, a3, 0x80228f04 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop27join_head_and_tail_wrapping17h44e3916fb0acbffdE+0x6a>
80228ec6: 09 a0        	j	0x80228ec8 <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop27join_head_and_tail_wrapping17h44e3916fb0acbffdE+0x2e>
80228ec8: 83 35 04 fa  	ld	a1, -0x60(s0)
80228ecc: 03 35 04 fb  	ld	a0, -0x50(s0)
80228ed0: 03 36 84 fa  	ld	a2, -0x58(s0)
;                             src = source_deque.to_physical_idx(head_len + drain_len);
80228ed4: b2 95        	add	a1, a1, a2
80228ed6: 97 e0 ff ff  	auipc	ra, 0xffffe
80228eda: e7 80 c0 b3  	jalr	-0x4c4(ra) <ekernel+0xffcd9a12>
80228ede: 83 35 04 fa  	ld	a1, -0x60(s0)
80228ee2: 2a 86        	mv	a2, a0
80228ee4: 03 35 04 fb  	ld	a0, -0x50(s0)
80228ee8: 23 3c c4 fa  	sd	a2, -0x48(s0)
;                             dst = source_deque.to_physical_idx(head_len);
80228eec: 97 e0 ff ff  	auipc	ra, 0xffffe
80228ef0: e7 80 60 b2  	jalr	-0x4da(ra) <ekernel+0xffcd9a12>
80228ef4: aa 85        	mv	a1, a0
80228ef6: 03 35 84 f9  	ld	a0, -0x68(s0)
80228efa: 23 30 b4 fc  	sd	a1, -0x40(s0)
;                             len = tail_len;
80228efe: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         if head_len < tail_len {
80228f02: 25 a0        	j	0x80228f2a <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop27join_head_and_tail_wrapping17h44e3916fb0acbffdE+0x90>
80228f04: 83 35 84 fa  	ld	a1, -0x58(s0)
80228f08: 03 35 04 fb  	ld	a0, -0x50(s0)
;                             src = source_deque.head;
80228f0c: 10 69        	ld	a2, 0x10(a0)
80228f0e: 23 3c c4 fa  	sd	a2, -0x48(s0)
;                             dst = source_deque.to_physical_idx(drain_len);
80228f12: 97 e0 ff ff  	auipc	ra, 0xffffe
80228f16: e7 80 00 b0  	jalr	-0x500(ra) <ekernel+0xffcd9a12>
80228f1a: aa 85        	mv	a1, a0
80228f1c: 03 35 04 fa  	ld	a0, -0x60(s0)
80228f20: 23 30 b4 fc  	sd	a1, -0x40(s0)
;                             len = head_len;
80228f24: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         if head_len < tail_len {
80228f28: 09 a0        	j	0x80228f2a <_ZN169_$LT$$LT$alloc..collections..vec_deque..drain..Drain$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$..drop..DropGuard$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop27join_head_and_tail_wrapping17h44e3916fb0acbffdE+0x90>
80228f2a: 03 35 04 fb  	ld	a0, -0x50(s0)
;                             source_deque.wrap_copy(src, dst, len);
80228f2e: 83 35 84 fb  	ld	a1, -0x48(s0)
80228f32: 03 36 04 fc  	ld	a2, -0x40(s0)
80228f36: 83 36 84 fc  	ld	a3, -0x38(s0)
80228f3a: 97 e0 ff ff  	auipc	ra, 0xffffe
80228f3e: e7 80 80 13  	jalr	0x138(ra) <ekernel+0xffcda072>
80228f42: a6 70        	ld	ra, 0x68(sp)
80228f44: 06 74        	ld	s0, 0x60(sp)
;                     }
80228f46: 65 61        	addi	sp, sp, 0x70
80228f48: 82 80        	ret

0000000080228f4a <_ZN5alloc11collections9vec_deque5drain18Drain$LT$T$C$A$GT$9as_slices17hdfbe3337fa87da8cE>:
;     unsafe fn as_slices(&self) -> (*mut [T], *mut [T]) {
80228f4a: 0d 71        	addi	sp, sp, -0x160
80228f4c: 86 ee        	sd	ra, 0x158(sp)
80228f4e: a2 ea        	sd	s0, 0x150(sp)
80228f50: 80 12        	addi	s0, sp, 0x160
80228f52: 23 30 b4 ea  	sd	a1, -0x160(s0)
80228f56: aa 85        	mv	a1, a0
80228f58: 03 35 04 ea  	ld	a0, -0x160(s0)
80228f5c: 23 38 b4 ea  	sd	a1, -0x150(s0)
80228f60: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;             let deque = self.deque.as_ref();
80228f64: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;         unsafe { &*self.as_ptr().cast_const() }
80228f68: 0c 61        	ld	a1, 0x0(a0)
80228f6a: 23 34 b4 ea  	sd	a1, -0x158(s0)
80228f6e: 23 34 b4 f4  	sd	a1, -0xb8(s0)
;         self.pointer as *mut T
80228f72: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80228f76: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;             let logical_remaining_range = self.idx..self.idx + self.remaining;
80228f7a: 10 69        	ld	a2, 0x10(a0)
80228f7c: 08 71        	ld	a0, 0x20(a0)
80228f7e: 32 95        	add	a0, a0, a2
80228f80: 23 3c c4 ea  	sd	a2, -0x148(s0)
80228f84: 23 30 a4 ec  	sd	a0, -0x140(s0)
80228f88: 13 05 84 eb  	addi	a0, s0, -0x148
;                 deque.slice_ranges(logical_remaining_range.clone(), logical_remaining_range.end);
80228f8c: 23 30 a4 f6  	sd	a0, -0xa0(s0)
; #[derive(Clone, Default, PartialEq, Eq, Hash)] // not Copy -- see #27186
80228f90: 23 34 a4 f6  	sd	a0, -0x98(s0)
;     impl_clone! {
80228f94: 03 36 84 eb  	ld	a2, -0x148(s0)
; #[derive(Clone, Default, PartialEq, Eq, Hash)] // not Copy -- see #27186
80228f98: 03 35 04 ec  	ld	a0, -0x140(s0)
80228f9c: 23 34 c4 ee  	sd	a2, -0x118(s0)
80228fa0: 23 38 a4 ee  	sd	a0, -0x110(s0)
;                 deque.slice_ranges(logical_remaining_range.clone(), logical_remaining_range.end);
80228fa4: 03 37 04 ec  	ld	a4, -0x140(s0)
80228fa8: 03 36 84 ee  	ld	a2, -0x118(s0)
80228fac: 83 36 04 ef  	ld	a3, -0x110(s0)
80228fb0: 13 05 84 ec  	addi	a0, s0, -0x138
80228fb4: 97 d0 ff ff  	auipc	ra, 0xffffd
80228fb8: e7 80 e0 6c  	jalr	0x6ce(ra) <ekernel+0xffcd9682>
80228fbc: 03 36 84 ea  	ld	a2, -0x158(s0)
80228fc0: 83 35 04 eb  	ld	a1, -0x150(s0)
;             let (a_range, b_range) =
80228fc4: 03 38 84 ec  	ld	a6, -0x138(s0)
80228fc8: 23 38 04 f7  	sd	a6, -0x90(s0)
80228fcc: 83 36 04 ed  	ld	a3, -0x130(s0)
80228fd0: 23 3c d4 f6  	sd	a3, -0x88(s0)
80228fd4: 83 37 84 ed  	ld	a5, -0x128(s0)
80228fd8: 23 30 f4 f8  	sd	a5, -0x80(s0)
80228fdc: 03 35 04 ee  	ld	a0, -0x120(s0)
80228fe0: 23 34 a4 f8  	sd	a0, -0x78(s0)
;         self.buf.ptr()
80228fe4: 23 38 c4 f8  	sd	a2, -0x70(s0)
;         self.ptr.as_ptr()
80228fe8: 18 66        	ld	a4, 0x8(a2)
80228fea: 23 3c e4 f8  	sd	a4, -0x68(s0)
;         self.pointer as *mut T
80228fee: 23 30 e4 fa  	sd	a4, -0x60(s0)
;         unsafe { intrinsics::offset(self, count) }
80228ff2: 93 18 48 00  	slli	a7, a6, 0x4
80228ff6: 46 97        	add	a4, a4, a7
80228ff8: 23 34 e4 fa  	sd	a4, -0x58(s0)
;             ptr::slice_from_raw_parts_mut(self.ptr().add(range.start), range.end - range.start)
80228ffc: b3 86 06 41  	sub	a3, a3, a6
80229000: 23 38 d4 fa  	sd	a3, -0x50(s0)
;         self as _
80229004: 23 3c e4 fa  	sd	a4, -0x48(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
80229008: 23 34 e4 f0  	sd	a4, -0xf8(s0)
8022900c: 23 38 d4 f0  	sd	a3, -0xf0(s0)
80229010: 03 37 84 f0  	ld	a4, -0xf8(s0)
80229014: 83 36 04 f1  	ld	a3, -0xf0(s0)
80229018: 23 3c e4 ee  	sd	a4, -0x108(s0)
8022901c: 23 30 d4 f0  	sd	a3, -0x100(s0)
80229020: 03 37 84 ef  	ld	a4, -0x108(s0)
80229024: 83 36 04 f0  	ld	a3, -0x100(s0)
;         self.buf.ptr()
80229028: 23 30 c4 fc  	sd	a2, -0x40(s0)
;         self.ptr.as_ptr()
8022902c: 10 66        	ld	a2, 0x8(a2)
8022902e: 23 34 c4 fc  	sd	a2, -0x38(s0)
;         self.pointer as *mut T
80229032: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         unsafe { intrinsics::offset(self, count) }
80229036: 13 98 47 00  	slli	a6, a5, 0x4
8022903a: 42 96        	add	a2, a2, a6
8022903c: 23 3c c4 fc  	sd	a2, -0x28(s0)
;             ptr::slice_from_raw_parts_mut(self.ptr().add(range.start), range.end - range.start)
80229040: 1d 8d        	sub	a0, a0, a5
80229042: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as _
80229046: 23 34 c4 fe  	sd	a2, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.mut_ptr }
8022904a: 23 34 c4 f2  	sd	a2, -0xd8(s0)
8022904e: 23 38 a4 f2  	sd	a0, -0xd0(s0)
80229052: 03 36 84 f2  	ld	a2, -0xd8(s0)
80229056: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022905a: 23 3c c4 f0  	sd	a2, -0xe8(s0)
8022905e: 23 30 a4 f2  	sd	a0, -0xe0(s0)
80229062: 03 36 84 f1  	ld	a2, -0xe8(s0)
80229066: 03 35 04 f2  	ld	a0, -0xe0(s0)
;             (deque.buffer_range(a_range), deque.buffer_range(b_range))
8022906a: 98 e1        	sd	a4, 0x0(a1)
8022906c: 94 e5        	sd	a3, 0x8(a1)
8022906e: 90 e9        	sd	a2, 0x10(a1)
80229070: 88 ed        	sd	a0, 0x18(a1)
80229072: f6 60        	ld	ra, 0x158(sp)
80229074: 56 64        	ld	s0, 0x150(sp)
;     }
80229076: 35 61        	addi	sp, sp, 0x160
80229078: 82 80        	ret

000000008022907a <_ZN4core10intrinsics11write_bytes18precondition_check17hca280d0b828c64abE>:
;             const fn precondition_check($($name:$ty),*) {
8022907a: 01 11        	addi	sp, sp, -0x20
8022907c: 06 ec        	sd	ra, 0x18(sp)
8022907e: 22 e8        	sd	s0, 0x10(sp)
80229080: 00 10        	addi	s0, sp, 0x20
80229082: 23 30 a4 fe  	sd	a0, -0x20(s0)
80229086: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             ) => is_aligned_and_not_null(addr, align)
8022908a: 97 00 00 00  	auipc	ra, 0x0
8022908e: e7 80 60 18  	jalr	0x186(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE>
80229092: 01 ed        	bnez	a0, 0x802290aa <.Lpcrel_hi0+0x14>
80229094: 09 a0        	j	0x80229096 <.Lpcrel_hi0>

0000000080229096 <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
80229096: 17 15 01 00  	auipc	a0, 0x11
8022909a: 13 05 a5 fc  	addi	a0, a0, -0x36
8022909e: 93 05 f0 06  	li	a1, 0x6f
802290a2: 97 70 00 00  	auipc	ra, 0x7
802290a6: e7 80 e0 19  	jalr	0x19e(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
802290aa: e2 60        	ld	ra, 0x18(sp)
802290ac: 42 64        	ld	s0, 0x10(sp)
;             }
802290ae: 05 61        	addi	sp, sp, 0x20
802290b0: 82 80        	ret

00000000802290b2 <_ZN4core10intrinsics17is_nonoverlapping7runtime17h70b7be2deae84d37E>:
;     fn runtime(src: *const (), dst: *const (), size: usize, count: usize) -> bool {
802290b2: 35 71        	addi	sp, sp, -0xa0
802290b4: 06 ed        	sd	ra, 0x98(sp)
802290b6: 22 e9        	sd	s0, 0x90(sp)
802290b8: 00 11        	addi	s0, sp, 0xa0
802290ba: 23 3c a4 f8  	sd	a0, -0x68(s0)
802290be: 23 30 b4 fa  	sd	a1, -0x60(s0)
802290c2: 23 34 c4 fa  	sd	a2, -0x58(s0)
802290c6: 23 38 d4 fa  	sd	a3, -0x50(s0)
;         unsafe { mem::transmute(self.cast::<()>()) }
802290ca: 2a 87        	mv	a4, a0
802290cc: 23 34 e4 f6  	sd	a4, -0x98(s0)
802290d0: 23 3c a4 fa  	sd	a0, -0x48(s0)
802290d4: 2e 85        	mv	a0, a1
802290d6: 23 38 a4 f6  	sd	a0, -0x90(s0)
802290da: 23 30 b4 fc  	sd	a1, -0x40(s0)
;     uint_impl! {
802290de: 33 35 d6 02  	mulhu	a0, a2, a3
802290e2: 33 35 a0 00  	snez	a0, a0
802290e6: b3 05 d6 02  	mul	a1, a2, a3
802290ea: 23 3c b4 f6  	sd	a1, -0x88(s0)
802290ee: 23 34 b4 fc  	sd	a1, -0x38(s0)
802290f2: a3 0b a4 fc  	sb	a0, -0x29(s0)
802290f6: 23 3c b4 fc  	sd	a1, -0x28(s0)
802290fa: a3 03 a4 fe  	sb	a0, -0x19(s0)
802290fe: 03 45 74 fe  	lbu	a0, -0x19(s0)
80229102: 05 89        	andi	a0, a0, 0x1
80229104: 15 e5        	bnez	a0, 0x80229130 <.Lpcrel_hi1>
80229106: 09 a0        	j	0x80229108 <_ZN4core10intrinsics17is_nonoverlapping7runtime17h70b7be2deae84d37E+0x56>
80229108: 03 35 84 f6  	ld	a0, -0x98(s0)
8022910c: 83 35 04 f7  	ld	a1, -0x90(s0)
80229110: 03 36 84 f7  	ld	a2, -0x88(s0)
;     uint_impl! {
80229114: 23 34 c4 f8  	sd	a2, -0x78(s0)
80229118: 05 46        	li	a2, 0x1
8022911a: 23 30 c4 f8  	sd	a2, -0x80(s0)
;         let Some(size) = size.checked_mul(count) else {
8022911e: 03 36 84 f8  	ld	a2, -0x78(s0)
80229122: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80229126: 23 34 c4 fe  	sd	a2, -0x18(s0)
;     uint_impl! {
8022912a: 63 65 b5 02  	bltu	a0, a1, 0x80229154 <.Lpcrel_hi1+0x24>
8022912e: 19 a8        	j	0x80229144 <.Lpcrel_hi1+0x14>

0000000080229130 <.Lpcrel_hi1>:
;             crate::panicking::panic_nounwind(
80229130: 17 15 01 00  	auipc	a0, 0x11
80229134: 13 05 f5 f9  	addi	a0, a0, -0x61
80229138: 93 05 d0 03  	li	a1, 0x3d
8022913c: 97 70 00 00  	auipc	ra, 0x7
80229140: e7 80 40 10  	jalr	0x104(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80229144: 03 35 84 f6  	ld	a0, -0x98(s0)
80229148: 83 35 04 f7  	ld	a1, -0x90(s0)
;     uint_impl! {
8022914c: 0d 8d        	sub	a0, a0, a1
8022914e: 23 38 a4 f8  	sd	a0, -0x70(s0)
80229152: 09 a8        	j	0x80229164 <.Lpcrel_hi1+0x34>
80229154: 03 35 04 f7  	ld	a0, -0x90(s0)
80229158: 83 35 84 f6  	ld	a1, -0x98(s0)
;     uint_impl! {
8022915c: 0d 8d        	sub	a0, a0, a1
8022915e: 23 38 a4 f8  	sd	a0, -0x70(s0)
80229162: 09 a0        	j	0x80229164 <.Lpcrel_hi1+0x34>
80229164: 83 35 04 f6  	ld	a1, -0xa0(s0)
;         diff >= size
80229168: 03 35 04 f9  	ld	a0, -0x70(s0)
8022916c: 33 35 b5 00  	sltu	a0, a0, a1
80229170: 13 45 15 00  	xori	a0, a0, 0x1
80229174: ea 60        	ld	ra, 0x98(sp)
80229176: 4a 64        	ld	s0, 0x90(sp)
;     }
80229178: 0d 61        	addi	sp, sp, 0xa0
8022917a: 82 80        	ret

000000008022917c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17h9e88ce347a02df22E>:
;             const fn precondition_check($($name:$ty),*) {
8022917c: 59 71        	addi	sp, sp, -0x70
8022917e: 86 f4        	sd	ra, 0x68(sp)
80229180: a2 f0        	sd	s0, 0x60(sp)
80229182: 80 18        	addi	s0, sp, 0x70
80229184: 23 3c e4 f8  	sd	a4, -0x68(s0)
80229188: 23 34 d4 fa  	sd	a3, -0x58(s0)
8022918c: 23 30 c4 fa  	sd	a2, -0x60(s0)
80229190: ae 86        	mv	a3, a1
80229192: 83 35 84 fa  	ld	a1, -0x58(s0)
80229196: 23 38 d4 fa  	sd	a3, -0x50(s0)
8022919a: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022919e: 23 30 a4 fc  	sd	a0, -0x40(s0)
802291a2: 23 34 d4 fc  	sd	a3, -0x38(s0)
802291a6: 23 38 c4 fc  	sd	a2, -0x30(s0)
802291aa: 23 3c b4 fc  	sd	a1, -0x28(s0)
802291ae: 23 30 e4 fe  	sd	a4, -0x20(s0)
;         is_aligned_and_not_null(src, align)
802291b2: 97 00 00 00  	auipc	ra, 0x0
802291b6: e7 80 e0 05  	jalr	0x5e(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE>
802291ba: 01 ed        	bnez	a0, 0x802291d2 <.Lpcrel_hi2+0x14>
802291bc: 09 a0        	j	0x802291be <.Lpcrel_hi2>

00000000802291be <.Lpcrel_hi2>:
;                     ::core::panicking::panic_nounwind(
802291be: 17 15 01 00  	auipc	a0, 0x11
802291c2: 13 05 e5 f4  	addi	a0, a0, -0xb2
802291c6: 93 05 60 0a  	li	a1, 0xa6
802291ca: 97 70 00 00  	auipc	ra, 0x7
802291ce: e7 80 60 07  	jalr	0x76(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
802291d2: 83 35 84 fa  	ld	a1, -0x58(s0)
802291d6: 03 35 04 fb  	ld	a0, -0x50(s0)
;             && is_aligned_and_not_null(dst, align)
802291da: 23 34 a4 fe  	sd	a0, -0x18(s0)
802291de: 97 00 00 00  	auipc	ra, 0x0
802291e2: e7 80 20 03  	jalr	0x32(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE>
802291e6: 61 dd        	beqz	a0, 0x802291be <.Lpcrel_hi2>
802291e8: 09 a0        	j	0x802291ea <.Lpcrel_hi2+0x2c>
802291ea: 83 36 84 f9  	ld	a3, -0x68(s0)
802291ee: 03 36 04 fa  	ld	a2, -0x60(s0)
802291f2: 83 35 04 fb  	ld	a1, -0x50(s0)
802291f6: 03 35 84 fb  	ld	a0, -0x48(s0)
;         const_eval_select((src, dst, size, count), comptime, runtime)
802291fa: 97 00 00 00  	auipc	ra, 0x0
802291fe: e7 80 80 eb  	jalr	-0x148(ra) <_ZN4core10intrinsics17is_nonoverlapping7runtime17h70b7be2deae84d37E>
;             && is_nonoverlapping(src, dst, size, count)
80229202: 19 e1        	bnez	a0, 0x80229208 <.Lpcrel_hi2+0x4a>
80229204: 09 a0        	j	0x80229206 <.Lpcrel_hi2+0x48>
; //!An easy file system isolated from the kernel
80229206: 65 bf        	j	0x802291be <.Lpcrel_hi2>
80229208: a6 70        	ld	ra, 0x68(sp)
8022920a: 06 74        	ld	s0, 0x60(sp)
;             }
8022920c: 65 61        	addi	sp, sp, 0x70
8022920e: 82 80        	ret

0000000080229210 <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE>:
; pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
80229210: 75 71        	addi	sp, sp, -0x90
80229212: 06 e5        	sd	ra, 0x88(sp)
80229214: 22 e1        	sd	s0, 0x80(sp)
80229216: 00 09        	addi	s0, sp, 0x90
80229218: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022921c: 23 30 a4 fc  	sd	a0, -0x40(s0)
80229220: 23 34 b4 fc  	sd	a1, -0x38(s0)
;             const_eval_select((self as *const u8,), const_impl, runtime_impl)
80229224: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { mem::transmute(self.cast::<()>()) }
80229228: aa 85        	mv	a1, a0
8022922a: 23 30 b4 f8  	sd	a1, -0x80(s0)
;     !ptr.is_null() && ptr.is_aligned_to(align)
8022922e: 11 e5        	bnez	a0, 0x8022923a <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE+0x2a>
80229230: 09 a0        	j	0x80229232 <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE+0x22>
80229232: 01 45        	li	a0, 0x0
;     !ptr.is_null() && ptr.is_aligned_to(align)
80229234: a3 07 a4 f8  	sb	a0, -0x71(s0)
80229238: 85 a8        	j	0x802292a8 <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE+0x98>
8022923a: 03 35 84 f7  	ld	a0, -0x88(s0)
;     uint_impl! {
8022923e: 93 55 15 00  	srli	a1, a0, 0x1
80229242: 37 56 55 55  	lui	a2, 0x55555
80229246: 1b 06 56 55  	addiw	a2, a2, 0x555
8022924a: 93 16 06 02  	slli	a3, a2, 0x20
8022924e: 36 96        	add	a2, a2, a3
80229250: f1 8d        	and	a1, a1, a2
80229252: b3 05 b5 40  	sub	a1, a0, a1
80229256: 37 35 33 33  	lui	a0, 0x33333
8022925a: 1b 05 35 33  	addiw	a0, a0, 0x333
8022925e: 13 16 05 02  	slli	a2, a0, 0x20
80229262: 2a 96        	add	a2, a2, a0
80229264: 33 f5 c5 00  	and	a0, a1, a2
80229268: 89 81        	srli	a1, a1, 0x2
8022926a: f1 8d        	and	a1, a1, a2
8022926c: 2e 95        	add	a0, a0, a1
8022926e: 93 55 45 00  	srli	a1, a0, 0x4
80229272: 2e 95        	add	a0, a0, a1
80229274: b7 15 0f 0f  	lui	a1, 0xf0f1
80229278: 9b 85 f5 f0  	addiw	a1, a1, -0xf1
8022927c: 13 96 05 02  	slli	a2, a1, 0x20
80229280: b2 95        	add	a1, a1, a2
80229282: 6d 8d        	and	a0, a0, a1
80229284: b7 05 01 01  	lui	a1, 0x1010
80229288: 9b 85 15 10  	addiw	a1, a1, 0x101
8022928c: 13 96 05 02  	slli	a2, a1, 0x20
80229290: b2 95        	add	a1, a1, a2
80229292: 33 05 b5 02  	mul	a0, a0, a1
80229296: 61 91        	srli	a0, a0, 0x38
80229298: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022929c: 03 25 84 fd  	lw	a0, -0x28(s0)
802292a0: 85 45        	li	a1, 0x1
;         if !align.is_power_of_two() {
802292a2: 63 09 b5 00  	beq	a0, a1, 0x802292b4 <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE+0xa4>
802292a6: 15 a0        	j	0x802292ca <.Lpcrel_hi3>
; }
802292a8: 03 45 f4 f8  	lbu	a0, -0x71(s0)
802292ac: aa 60        	ld	ra, 0x88(sp)
802292ae: 0a 64        	ld	s0, 0x80(sp)
802292b0: 49 61        	addi	sp, sp, 0x90
802292b2: 82 80        	ret
802292b4: 03 35 04 f8  	ld	a0, -0x80(s0)
802292b8: 83 35 84 f7  	ld	a1, -0x88(s0)
;             ptr.addr() & (align - 1) == 0
802292bc: fd 15        	addi	a1, a1, -0x1
802292be: 6d 8d        	and	a0, a0, a1
802292c0: 13 35 15 00  	seqz	a0, a0
802292c4: a3 07 a4 f8  	sb	a0, -0x71(s0)
;     !ptr.is_null() && ptr.is_aligned_to(align)
802292c8: c5 b7        	j	0x802292a8 <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE+0x98>

00000000802292ca <.Lpcrel_hi3>:
;             panic!("is_aligned_to: align is not a power-of-two");
802292ca: 17 15 01 00  	auipc	a0, 0x11
802292ce: 93 05 65 f1  	addi	a1, a0, -0xea
802292d2: 23 30 b4 fe  	sd	a1, -0x20(s0)
802292d6: 05 45        	li	a0, 0x1
802292d8: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
802292dc: 23 38 b4 f8  	sd	a1, -0x70(s0)
802292e0: 23 3c a4 f8  	sd	a0, -0x68(s0)

00000000802292e4 <.Lpcrel_hi4>:
802292e4: 17 a5 00 00  	auipc	a0, 0xa
802292e8: 13 05 c5 fa  	addi	a0, a0, -0x54
802292ec: 0c 61        	ld	a1, 0x0(a0)
802292ee: 08 65        	ld	a0, 0x8(a0)
802292f0: 23 38 b4 fa  	sd	a1, -0x50(s0)
802292f4: 23 3c a4 fa  	sd	a0, -0x48(s0)

00000000802292f8 <.Lpcrel_hi5>:
802292f8: 17 15 01 00  	auipc	a0, 0x11
802292fc: 13 05 85 ef  	addi	a0, a0, -0x108
80229300: 23 30 a4 fa  	sd	a0, -0x60(s0)
80229304: 01 45        	li	a0, 0x0
80229306: 23 34 a4 fa  	sd	a0, -0x58(s0)

000000008022930a <.Lpcrel_hi6>:
;             panic!("is_aligned_to: align is not a power-of-two");
8022930a: 17 15 01 00  	auipc	a0, 0x11
8022930e: 93 05 e5 f5  	addi	a1, a0, -0xa2
80229312: 13 05 04 f9  	addi	a0, s0, -0x70
80229316: 97 70 00 00  	auipc	ra, 0x7
8022931a: e7 80 20 e9  	jalr	-0x16e(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022931e <_ZN4core10intrinsics4copy18precondition_check17h0a905f9e54f6ba10E>:
;             const fn precondition_check($($name:$ty),*) {
8022931e: 39 71        	addi	sp, sp, -0x40
80229320: 06 fc        	sd	ra, 0x38(sp)
80229322: 22 f8        	sd	s0, 0x30(sp)
80229324: 80 00        	addi	s0, sp, 0x40
80229326: 23 34 c4 fc  	sd	a2, -0x38(s0)
8022932a: 2e 86        	mv	a2, a1
8022932c: 83 35 84 fc  	ld	a1, -0x38(s0)
80229330: 23 38 c4 fc  	sd	a2, -0x30(s0)
80229334: 23 3c a4 fc  	sd	a0, -0x28(s0)
80229338: 23 30 c4 fe  	sd	a2, -0x20(s0)
8022933c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             is_aligned_and_not_null(src, align)
80229340: 97 00 00 00  	auipc	ra, 0x0
80229344: e7 80 00 ed  	jalr	-0x130(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE>
80229348: 01 ed        	bnez	a0, 0x80229360 <.Lpcrel_hi7+0x14>
8022934a: 09 a0        	j	0x8022934c <.Lpcrel_hi7>

000000008022934c <.Lpcrel_hi7>:
;                     ::core::panicking::panic_nounwind(
8022934c: 17 15 01 00  	auipc	a0, 0x11
80229350: 13 05 05 dc  	addi	a0, a0, -0x240
80229354: 93 05 60 0a  	li	a1, 0xa6
80229358: 97 70 00 00  	auipc	ra, 0x7
8022935c: e7 80 80 ee  	jalr	-0x118(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
80229360: 83 35 84 fc  	ld	a1, -0x38(s0)
80229364: 03 35 04 fd  	ld	a0, -0x30(s0)
;                 && is_aligned_and_not_null(dst, align)
80229368: 97 00 00 00  	auipc	ra, 0x0
8022936c: e7 80 80 ea  	jalr	-0x158(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17hbe874c998a2f868eE>
80229370: 19 e1        	bnez	a0, 0x80229376 <.Lpcrel_hi7+0x2a>
80229372: 09 a0        	j	0x80229374 <.Lpcrel_hi7+0x28>
; //!An easy file system isolated from the kernel
80229374: e1 bf        	j	0x8022934c <.Lpcrel_hi7>
80229376: e2 70        	ld	ra, 0x38(sp)
80229378: 42 74        	ld	s0, 0x30(sp)
;             }
8022937a: 21 61        	addi	sp, sp, 0x40
8022937c: 82 80        	ret

000000008022937e <_ZN5alloc7raw_vec11finish_grow17hbea6f7417b6e6d1fE>:
; fn finish_grow<A>(
8022937e: 13 01 01 de  	addi	sp, sp, -0x220
80229382: 23 3c 11 20  	sd	ra, 0x218(sp)
80229386: 23 38 81 20  	sd	s0, 0x210(sp)
8022938a: 00 14        	addi	s0, sp, 0x220
8022938c: 23 38 e4 de  	sd	a4, -0x210(s0)
80229390: 23 3c d4 de  	sd	a3, -0x208(s0)
80229394: 23 30 a4 e0  	sd	a0, -0x200(s0)
80229398: 01 45        	li	a0, 0x0
;         debug_assert_eq!(old_layout.align(), new_layout.align());
8022939a: a3 06 a4 e0  	sb	a0, -0x1f3(s0)

000000008022939e <.Lpcrel_hi0>:
;             Err(e) => Err(op(e)),
8022939e: 17 a5 00 00  	auipc	a0, 0xa
802293a2: 13 05 25 ef  	addi	a0, a0, -0x10e
802293a6: 1c 61        	ld	a5, 0x0(a0)
802293a8: 14 65        	ld	a3, 0x8(a0)
;     fn into(self) -> U {
802293aa: 23 38 f4 e0  	sd	a5, -0x1f0(s0)
802293ae: 23 3c d4 e0  	sd	a3, -0x1e8(s0)
802293b2: 14 61        	ld	a3, 0x0(a0)
802293b4: 08 65        	ld	a0, 0x8(a0)
;     fn from(kind: TryReserveErrorKind) -> Self {
802293b6: 23 30 d4 e2  	sd	a3, -0x1e0(s0)
802293ba: 23 34 a4 e2  	sd	a0, -0x1d8(s0)

00000000802293be <.Lpcrel_hi1>:
802293be: 17 a5 00 00  	auipc	a0, 0xa
802293c2: 13 05 25 eb  	addi	a0, a0, -0x14e
802293c6: 1c 61        	ld	a5, 0x0(a0)
802293c8: 14 65        	ld	a3, 0x8(a0)
;     fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
802293ca: 23 38 f4 e2  	sd	a5, -0x1d0(s0)
802293ce: 23 3c d4 e2  	sd	a3, -0x1c8(s0)
;             Ok(v) => ControlFlow::Continue(v),
802293d2: 14 61        	ld	a3, 0x0(a0)
802293d4: 08 65        	ld	a0, 0x8(a0)
;             Err(e) => ControlFlow::Break(Err(e)),
802293d6: 23 34 d4 e4  	sd	a3, -0x1b8(s0)
802293da: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
;             Err(e) => Err(op(e)),
802293de: 23 30 b4 e6  	sd	a1, -0x1a0(s0)
802293e2: 23 34 c4 e6  	sd	a2, -0x198(s0)
802293e6: 23 30 e4 f4  	sd	a4, -0xc0(s0)
;         match self {
802293ea: 03 35 04 e6  	ld	a0, -0x1a0(s0)
802293ee: 25 c9        	beqz	a0, 0x8022945e <.Lpcrel_hi1+0xa0>
802293f0: 09 a0        	j	0x802293f2 <.Lpcrel_hi1+0x34>
802293f2: 03 35 84 df  	ld	a0, -0x208(s0)
;             Ok(t) => Ok(t),
802293f6: 03 36 04 e6  	ld	a2, -0x1a0(s0)
802293fa: 83 35 84 e6  	ld	a1, -0x198(s0)
802293fe: 23 34 c4 f4  	sd	a2, -0xb8(s0)
80229402: 23 38 b4 f4  	sd	a1, -0xb0(s0)
80229406: 23 30 c4 ea  	sd	a2, -0x160(s0)
8022940a: 23 34 b4 ea  	sd	a1, -0x158(s0)
8022940e: 81 45        	li	a1, 0x0
80229410: 23 3c b4 e8  	sd	a1, -0x168(s0)
;             Ok(v) => ControlFlow::Continue(v),
80229414: 83 36 04 ea  	ld	a3, -0x160(s0)
80229418: 03 36 84 ea  	ld	a2, -0x158(s0)
8022941c: 23 3c d4 f4  	sd	a3, -0xa8(s0)
80229420: 23 30 c4 f6  	sd	a2, -0xa0(s0)
80229424: 23 34 d4 e8  	sd	a3, -0x178(s0)
80229428: 23 38 c4 e8  	sd	a2, -0x170(s0)
8022942c: 23 30 b4 e8  	sd	a1, -0x180(s0)
;     let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
80229430: 03 36 84 e8  	ld	a2, -0x178(s0)
80229434: 83 35 04 e9  	ld	a1, -0x170(s0)
80229438: 23 34 c4 f6  	sd	a2, -0x98(s0)
8022943c: 23 38 b4 f6  	sd	a1, -0x90(s0)
80229440: 23 38 c4 e6  	sd	a2, -0x190(s0)
80229444: 23 3c b4 e6  	sd	a1, -0x188(s0)
80229448: 93 05 04 e7  	addi	a1, s0, -0x190
;     alloc_guard(new_layout.size())?;
8022944c: 23 3c b4 f6  	sd	a1, -0x88(s0)
;         self.size
80229450: 83 35 84 e7  	ld	a1, -0x188(s0)
80229454: 23 30 b4 f8  	sd	a1, -0x80(s0)
;     let memory = if let Some((ptr, old_layout)) = current_memory {
80229458: 08 65        	ld	a0, 0x8(a0)
8022945a: 59 e1        	bnez	a0, 0x802294e0 <.Lpcrel_hi2+0x7e>
8022945c: f9 a8        	j	0x8022953a <.Lpcrel_hi2+0xd8>
8022945e: 83 35 04 e0  	ld	a1, -0x200(s0)

0000000080229462 <.Lpcrel_hi2>:
;             Err(e) => Err(op(e)),
80229462: 17 a5 00 00  	auipc	a0, 0xa
80229466: 13 05 e5 e2  	addi	a0, a0, -0x1d2
8022946a: 10 61        	ld	a2, 0x0(a0)
8022946c: 08 65        	ld	a0, 0x8(a0)
8022946e: 23 30 c4 ea  	sd	a2, -0x160(s0)
80229472: 23 34 a4 ea  	sd	a0, -0x158(s0)
80229476: 05 45        	li	a0, 0x1
80229478: 23 3c a4 e8  	sd	a0, -0x168(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
8022947c: 83 36 04 ea  	ld	a3, -0x160(s0)
80229480: 03 36 84 ea  	ld	a2, -0x158(s0)
80229484: 23 38 d4 fc  	sd	a3, -0x30(s0)
80229488: 23 3c c4 fc  	sd	a2, -0x28(s0)
8022948c: 23 38 d4 ee  	sd	a3, -0x110(s0)
80229490: 23 3c c4 ee  	sd	a2, -0x108(s0)
80229494: 83 36 04 ef  	ld	a3, -0x110(s0)
80229498: 03 36 84 ef  	ld	a2, -0x108(s0)
8022949c: 23 34 d4 e8  	sd	a3, -0x178(s0)
802294a0: 23 38 c4 e8  	sd	a2, -0x170(s0)
802294a4: 23 30 a4 e8  	sd	a0, -0x180(s0)
;     let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
802294a8: 83 36 84 e8  	ld	a3, -0x178(s0)
802294ac: 03 36 04 e9  	ld	a2, -0x170(s0)
802294b0: 23 38 d4 ea  	sd	a3, -0x150(s0)
802294b4: 23 3c c4 ea  	sd	a2, -0x148(s0)
;             Err(e) => Err(From::from(e)),
802294b8: 83 36 04 eb  	ld	a3, -0x150(s0)
802294bc: 03 36 84 eb  	ld	a2, -0x148(s0)
802294c0: 23 30 d4 fe  	sd	a3, -0x20(s0)
802294c4: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         Self { kind }
802294c8: 23 30 d4 f0  	sd	a3, -0x100(s0)
802294cc: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;             Err(e) => Err(From::from(e)),
802294d0: 83 36 04 f0  	ld	a3, -0x100(s0)
802294d4: 03 36 84 f0  	ld	a2, -0xf8(s0)
802294d8: 94 e5        	sd	a3, 0x8(a1)
802294da: 90 e9        	sd	a2, 0x10(a1)
802294dc: 88 e1        	sd	a0, 0x0(a1)
; }
802294de: 2d a2        	j	0x80229608 <.Lpcrel_hi2+0x1a6>
802294e0: 03 35 84 df  	ld	a0, -0x208(s0)
;     let memory = if let Some((ptr, old_layout)) = current_memory {
802294e4: 0c 61        	ld	a1, 0x0(a0)
802294e6: 23 30 b4 de  	sd	a1, -0x220(s0)
802294ea: 23 34 b4 f8  	sd	a1, -0x78(s0)
802294ee: 0c 65        	ld	a1, 0x8(a0)
802294f0: 08 69        	ld	a0, 0x10(a0)
802294f2: 23 38 b4 ec  	sd	a1, -0x130(s0)
802294f6: 23 3c a4 ec  	sd	a0, -0x128(s0)
802294fa: 13 05 04 ed  	addi	a0, s0, -0x130
;             hint::assert_unchecked(old_layout.align() == new_layout.align());
802294fe: 23 38 a4 f8  	sd	a0, -0x70(s0)
;         self.align.as_usize()
80229502: 03 35 04 ed  	ld	a0, -0x130(s0)
80229506: 23 3c a4 f8  	sd	a0, -0x68(s0)
;         self.0 as usize
8022950a: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8022950e: 03 35 04 f1  	ld	a0, -0xf0(s0)
80229512: 93 05 04 e7  	addi	a1, s0, -0x190
;             hint::assert_unchecked(old_layout.align() == new_layout.align());
80229516: 23 30 b4 fa  	sd	a1, -0x60(s0)
;         self.align.as_usize()
8022951a: 83 35 04 e7  	ld	a1, -0x190(s0)
8022951e: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.0 as usize
80229522: 23 3c b4 f0  	sd	a1, -0xe8(s0)
80229526: 83 35 84 f1  	ld	a1, -0xe8(s0)
;             hint::assert_unchecked(old_layout.align() == new_layout.align());
8022952a: 2d 8d        	xor	a0, a0, a1
8022952c: 13 35 15 00  	seqz	a0, a0
80229530: 23 34 a4 de  	sd	a0, -0x218(s0)
80229534: a3 0b a4 fa  	sb	a0, -0x49(s0)
;         intrinsics::assert_unsafe_precondition!(
80229538: 05 a0        	j	0x80229558 <.Lpcrel_hi2+0xf6>
8022953a: 03 35 04 df  	ld	a0, -0x210(s0)
;         alloc.allocate(new_layout)
8022953e: 83 35 04 e7  	ld	a1, -0x190(s0)
80229542: 03 36 84 e7  	ld	a2, -0x188(s0)
80229546: 97 a0 ff ff  	auipc	ra, 0xffffa
8022954a: e7 80 e0 b9  	jalr	-0x462(ra) <ekernel+0xffcd60e4>
8022954e: 23 30 a4 ec  	sd	a0, -0x140(s0)
80229552: 23 34 b4 ec  	sd	a1, -0x138(s0)
;     let memory = if let Some((ptr, old_layout)) = current_memory {
80229556: 35 a8        	j	0x80229592 <.Lpcrel_hi2+0x130>
80229558: 03 35 84 de  	ld	a0, -0x218(s0)
;         intrinsics::assert_unsafe_precondition!(
8022955c: 05 89        	andi	a0, a0, 0x1
8022955e: 97 a0 ff ff  	auipc	ra, 0xffffa
80229562: e7 80 20 d0  	jalr	-0x2fe(ra) <ekernel+0xffcd6260>
80229566: 09 a0        	j	0x80229568 <.Lpcrel_hi2+0x106>
80229568: 83 35 04 de  	ld	a1, -0x220(s0)
8022956c: 03 35 04 df  	ld	a0, -0x210(s0)
;             alloc.grow(ptr, old_layout, new_layout)
80229570: 03 36 04 ed  	ld	a2, -0x130(s0)
80229574: 83 36 84 ed  	ld	a3, -0x128(s0)
80229578: 03 37 04 e7  	ld	a4, -0x190(s0)
8022957c: 83 37 84 e7  	ld	a5, -0x188(s0)
80229580: 97 a0 ff ff  	auipc	ra, 0xffffa
80229584: e7 80 20 b3  	jalr	-0x4ce(ra) <ekernel+0xffcd60b2>
80229588: 23 30 a4 ec  	sd	a0, -0x140(s0)
8022958c: 23 34 b4 ec  	sd	a1, -0x138(s0)
;     let memory = if let Some((ptr, old_layout)) = current_memory {
80229590: 09 a0        	j	0x80229592 <.Lpcrel_hi2+0x130>
;     memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
80229592: 83 35 04 ec  	ld	a1, -0x140(s0)
80229596: 03 35 84 ec  	ld	a0, -0x138(s0)
8022959a: 23 30 b4 ee  	sd	a1, -0x120(s0)
8022959e: 23 34 a4 ee  	sd	a0, -0x118(s0)
802295a2: 13 05 04 e7  	addi	a0, s0, -0x190
802295a6: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         match self {
802295aa: 03 35 04 ee  	ld	a0, -0x120(s0)
802295ae: 0d c1        	beqz	a0, 0x802295d0 <.Lpcrel_hi2+0x16e>
802295b0: 09 a0        	j	0x802295b2 <.Lpcrel_hi2+0x150>
802295b2: 83 35 04 e0  	ld	a1, -0x200(s0)
;             Ok(t) => Ok(t),
802295b6: 03 36 04 ee  	ld	a2, -0x120(s0)
802295ba: 03 35 84 ee  	ld	a0, -0x118(s0)
802295be: 23 30 c4 fc  	sd	a2, -0x40(s0)
802295c2: 23 34 a4 fc  	sd	a0, -0x38(s0)
802295c6: 90 e5        	sd	a2, 0x8(a1)
802295c8: 88 e9        	sd	a0, 0x10(a1)
802295ca: 01 45        	li	a0, 0x0
802295cc: 88 e1        	sd	a0, 0x0(a1)
;     }
802295ce: 25 a8        	j	0x80229606 <.Lpcrel_hi2+0x1a4>
802295d0: 83 35 04 e0  	ld	a1, -0x200(s0)
;     memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
802295d4: 03 36 04 e7  	ld	a2, -0x190(s0)
802295d8: 03 35 84 e7  	ld	a0, -0x188(s0)
802295dc: 23 38 c4 f2  	sd	a2, -0xd0(s0)
802295e0: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         Self { kind }
802295e4: 03 36 04 f3  	ld	a2, -0xd0(s0)
802295e8: 03 35 84 f3  	ld	a0, -0xc8(s0)
802295ec: 23 30 c4 f2  	sd	a2, -0xe0(s0)
802295f0: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;             Err(e) => Err(op(e)),
802295f4: 03 36 04 f2  	ld	a2, -0xe0(s0)
802295f8: 03 35 84 f2  	ld	a0, -0xd8(s0)
802295fc: 90 e5        	sd	a2, 0x8(a1)
802295fe: 88 e9        	sd	a0, 0x10(a1)
80229600: 05 45        	li	a0, 0x1
80229602: 88 e1        	sd	a0, 0x0(a1)
80229604: 09 a0        	j	0x80229606 <.Lpcrel_hi2+0x1a4>
; }
80229606: 09 a0        	j	0x80229608 <.Lpcrel_hi2+0x1a6>
80229608: 83 30 81 21  	ld	ra, 0x218(sp)
8022960c: 03 34 01 21  	ld	s0, 0x210(sp)
; }
80229610: 13 01 01 22  	addi	sp, sp, 0x220
80229614: 82 80        	ret

0000000080229616 <_ZN5alloc7raw_vec14handle_reserve17h4d28c0d5bd23a042E>:
; fn handle_reserve<T>(result: Result<T, TryReserveError>) -> T {
80229616: 31 71        	addi	sp, sp, -0xc0
80229618: 06 fd        	sd	ra, 0xb8(sp)
8022961a: 22 f9        	sd	s0, 0xb0(sp)
8022961c: 80 01        	addi	s0, sp, 0xc0
8022961e: 23 30 a4 f4  	sd	a0, -0xc0(s0)
;         match self {
80229622: 08 61        	ld	a0, 0x0(a0)
80229624: 15 e1        	bnez	a0, 0x80229648 <_ZN5alloc7raw_vec14handle_reserve17h4d28c0d5bd23a042E+0x32>
80229626: 09 a0        	j	0x80229628 <_ZN5alloc7raw_vec14handle_reserve17h4d28c0d5bd23a042E+0x12>
80229628: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             Ok(t) => Ok(t),
8022962c: 0c 65        	ld	a1, 0x8(a0)
8022962e: 08 69        	ld	a0, 0x10(a0)
80229630: 23 34 b4 f8  	sd	a1, -0x78(s0)
80229634: 23 38 a4 f8  	sd	a0, -0x70(s0)
80229638: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8022963c: 23 30 a4 f6  	sd	a0, -0xa0(s0)
80229640: 01 45        	li	a0, 0x0
80229642: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;     match result.map_err(|e| e.kind()) {
80229646: 3d a0        	j	0x80229674 <_ZN5alloc7raw_vec14handle_reserve17h4d28c0d5bd23a042E+0x5e>
80229648: 03 35 04 f4  	ld	a0, -0xc0(s0)
;             Err(e) => Err(op(e)),
8022964c: 0c 65        	ld	a1, 0x8(a0)
8022964e: 08 69        	ld	a0, 0x10(a0)
80229650: 23 3c b4 f8  	sd	a1, -0x68(s0)
80229654: 23 30 a4 fa  	sd	a0, -0x60(s0)
80229658: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022965c: 23 30 a4 f8  	sd	a0, -0x80(s0)
80229660: 13 05 84 f7  	addi	a0, s0, -0x88
;     match result.map_err(|e| e.kind()) {
80229664: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         self.kind.clone()
80229668: 23 38 a4 fa  	sd	a0, -0x50(s0)
; #[derive(Clone, PartialEq, Eq, Debug)]
8022966c: 03 35 84 f7  	ld	a0, -0x88(s0)
80229670: 11 cd        	beqz	a0, 0x8022968c <_ZN5alloc7raw_vec14handle_reserve17h4d28c0d5bd23a042E+0x76>
80229672: 0d a0        	j	0x80229694 <_ZN5alloc7raw_vec14handle_reserve17h4d28c0d5bd23a042E+0x7e>
;         Ok(res) => res,
80229674: 03 35 84 f5  	ld	a0, -0xa8(s0)
80229678: 83 35 04 f6  	ld	a1, -0xa0(s0)
8022967c: 23 38 a4 fc  	sd	a0, -0x30(s0)
80229680: 23 3c b4 fc  	sd	a1, -0x28(s0)
80229684: ea 70        	ld	ra, 0xb8(sp)
80229686: 4a 74        	ld	s0, 0xb0(sp)
; }
80229688: 29 61        	addi	sp, sp, 0xc0
8022968a: 82 80        	ret
;         Err(CapacityOverflow) => capacity_overflow(),
8022968c: 97 50 00 00  	auipc	ra, 0x5
80229690: e7 80 00 65  	jalr	0x650(ra) <_ZN5alloc7raw_vec17capacity_overflow17h2dbe2fc7824cfb2aE>
80229694: 13 05 84 f7  	addi	a0, s0, -0x88
; #[derive(Clone, PartialEq, Eq, Debug)]
80229698: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022969c: 93 05 84 f8  	addi	a1, s0, -0x78
802296a0: 23 30 b4 fc  	sd	a1, -0x40(s0)
802296a4: 23 34 a4 fc  	sd	a0, -0x38(s0)
; #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
802296a8: 83 35 84 f7  	ld	a1, -0x88(s0)
802296ac: 03 35 04 f8  	ld	a0, -0x80(s0)
; #[derive(Clone, PartialEq, Eq, Debug)]
802296b0: 23 34 b4 f6  	sd	a1, -0x98(s0)
802296b4: 23 38 a4 f6  	sd	a0, -0x90(s0)
;             Err(e) => Err(op(e)),
802296b8: 83 35 84 f6  	ld	a1, -0x98(s0)
802296bc: 03 35 04 f7  	ld	a0, -0x90(s0)
802296c0: 23 3c b4 f4  	sd	a1, -0xa8(s0)
802296c4: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802296c8: 05 45        	li	a0, 0x1
802296ca: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;     match result.map_err(|e| e.kind()) {
802296ce: 03 35 04 f5  	ld	a0, -0xb0(s0)
802296d2: 4d d1        	beqz	a0, 0x80229674 <_ZN5alloc7raw_vec14handle_reserve17h4d28c0d5bd23a042E+0x5e>
802296d4: 09 a0        	j	0x802296d6 <_ZN5alloc7raw_vec14handle_reserve17h4d28c0d5bd23a042E+0xc0>
;         Err(AllocError { layout, .. }) => handle_alloc_error(layout),
802296d6: 03 35 84 f5  	ld	a0, -0xa8(s0)
802296da: 83 35 04 f6  	ld	a1, -0xa0(s0)
802296de: 23 30 a4 fe  	sd	a0, -0x20(s0)
802296e2: 23 34 b4 fe  	sd	a1, -0x18(s0)
802296e6: 97 50 00 00  	auipc	ra, 0x5
802296ea: e7 80 a0 5a  	jalr	0x5aa(ra) <_ZN5alloc5alloc18handle_alloc_error17h82a5a817f63685d8E>

00000000802296ee <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E>:
; fn handle_reserve<T>(result: Result<T, TryReserveError>) -> T {
802296ee: 71 71        	addi	sp, sp, -0xb0
802296f0: 06 f5        	sd	ra, 0xa8(sp)
802296f2: 22 f1        	sd	s0, 0xa0(sp)
802296f4: 00 19        	addi	s0, sp, 0xb0
;     pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
802296f6: 23 30 a4 f6  	sd	a0, -0xa0(s0)
802296fa: 23 34 b4 f6  	sd	a1, -0x98(s0)
;         match self {
802296fe: 03 35 04 f6  	ld	a0, -0xa0(s0)
80229702: fd 55        	li	a1, -0x1
80229704: fe 15        	slli	a1, a1, 0x3f
80229706: 85 05        	addi	a1, a1, 0x1
80229708: 63 19 b5 00  	bne	a0, a1, 0x8022971a <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E+0x2c>
8022970c: 09 a0        	j	0x8022970e <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E+0x20>
8022970e: 7d 55        	li	a0, -0x1
80229710: 7e 15        	slli	a0, a0, 0x3f
80229712: 05 05        	addi	a0, a0, 0x1
;             Ok(t) => Ok(t),
80229714: 23 38 a4 f6  	sd	a0, -0x90(s0)
;     match result.map_err(|e| e.kind()) {
80229718: 3d a0        	j	0x80229746 <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E+0x58>
;             Err(e) => Err(op(e)),
8022971a: 83 35 04 f6  	ld	a1, -0xa0(s0)
8022971e: 03 35 84 f6  	ld	a0, -0x98(s0)
80229722: 23 34 b4 fa  	sd	a1, -0x58(s0)
80229726: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022972a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8022972e: 23 3c a4 f8  	sd	a0, -0x68(s0)
80229732: 13 05 04 f9  	addi	a0, s0, -0x70
;     match result.map_err(|e| e.kind()) {
80229736: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         self.kind.clone()
8022973a: 23 30 a4 fc  	sd	a0, -0x40(s0)
; #[derive(Clone, PartialEq, Eq, Debug)]
8022973e: 03 35 04 f9  	ld	a0, -0x70(s0)
80229742: 11 c5        	beqz	a0, 0x8022974e <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E+0x60>
80229744: 09 a8        	j	0x80229756 <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E+0x68>
80229746: aa 70        	ld	ra, 0xa8(sp)
80229748: 0a 74        	ld	s0, 0xa0(sp)
; }
8022974a: 4d 61        	addi	sp, sp, 0xb0
8022974c: 82 80        	ret
;         Err(CapacityOverflow) => capacity_overflow(),
8022974e: 97 50 00 00  	auipc	ra, 0x5
80229752: e7 80 e0 58  	jalr	0x58e(ra) <_ZN5alloc7raw_vec17capacity_overflow17h2dbe2fc7824cfb2aE>
80229756: 13 05 04 f9  	addi	a0, s0, -0x70
; #[derive(Clone, PartialEq, Eq, Debug)]
8022975a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022975e: 93 05 04 fa  	addi	a1, s0, -0x60
80229762: 23 38 b4 fc  	sd	a1, -0x30(s0)
80229766: 23 3c a4 fc  	sd	a0, -0x28(s0)
; #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
8022976a: 83 35 04 f9  	ld	a1, -0x70(s0)
8022976e: 03 35 84 f9  	ld	a0, -0x68(s0)
; #[derive(Clone, PartialEq, Eq, Debug)]
80229772: 23 30 b4 f8  	sd	a1, -0x80(s0)
80229776: 23 34 a4 f8  	sd	a0, -0x78(s0)
;             Err(e) => Err(op(e)),
8022977a: 83 35 04 f8  	ld	a1, -0x80(s0)
8022977e: 03 35 84 f8  	ld	a0, -0x78(s0)
80229782: 23 38 b4 f6  	sd	a1, -0x90(s0)
80229786: 23 3c a4 f6  	sd	a0, -0x88(s0)
;     match result.map_err(|e| e.kind()) {
8022978a: 03 35 04 f7  	ld	a0, -0x90(s0)
8022978e: fd 55        	li	a1, -0x1
80229790: fe 15        	slli	a1, a1, 0x3f
80229792: 85 05        	addi	a1, a1, 0x1
80229794: e3 09 b5 fa  	beq	a0, a1, 0x80229746 <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E+0x58>
80229798: 09 a0        	j	0x8022979a <_ZN5alloc7raw_vec14handle_reserve17h97d69a250763b645E+0xac>
;         Err(AllocError { layout, .. }) => handle_alloc_error(layout),
8022979a: 03 35 04 f7  	ld	a0, -0x90(s0)
8022979e: 83 35 84 f7  	ld	a1, -0x88(s0)
802297a2: 23 30 a4 fe  	sd	a0, -0x20(s0)
802297a6: 23 34 b4 fe  	sd	a1, -0x18(s0)
802297aa: 97 50 00 00  	auipc	ra, 0x5
802297ae: e7 80 60 4e  	jalr	0x4e6(ra) <_ZN5alloc5alloc18handle_alloc_error17h82a5a817f63685d8E>

00000000802297b2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h19a61df1585953bfE>:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
802297b2: 19 71        	addi	sp, sp, -0x80
802297b4: 86 fc        	sd	ra, 0x78(sp)
802297b6: a2 f8        	sd	s0, 0x70(sp)
802297b8: 00 01        	addi	s0, sp, 0x80
802297ba: 23 30 b4 f8  	sd	a1, -0x80(s0)
802297be: 23 34 a4 f8  	sd	a0, -0x78(s0)
802297c2: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
802297c6: 09 a0        	j	0x802297c8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h19a61df1585953bfE+0x16>
802297c8: 03 35 04 f8  	ld	a0, -0x80(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
802297cc: 08 61        	ld	a0, 0x0(a0)
802297ce: 19 e1        	bnez	a0, 0x802297d4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h19a61df1585953bfE+0x22>
802297d0: 09 a0        	j	0x802297d2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h19a61df1585953bfE+0x20>
802297d2: 8d a0        	j	0x80229834 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h19a61df1585953bfE+0x82>
802297d4: 83 35 84 f8  	ld	a1, -0x78(s0)
802297d8: 03 35 04 f8  	ld	a0, -0x80(s0)
802297dc: 21 46        	li	a2, 0x8
;     intrinsics::min_align_of::<T>()
802297de: 23 34 c4 fc  	sd	a2, -0x38(s0)
802297e2: 61 47        	li	a4, 0x18
;     intrinsics::size_of::<T>()
802297e4: 23 38 e4 fc  	sd	a4, -0x30(s0)
;                 let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
802297e8: 14 61        	ld	a3, 0x0(a0)
802297ea: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     uint_impl! {
802297ee: b3 86 e6 02  	mul	a3, a3, a4
802297f2: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
802297f6: 23 3c d4 f8  	sd	a3, -0x68(s0)
802297fa: 23 38 c4 f8  	sd	a2, -0x70(s0)
;                 Some((self.ptr.cast().into(), layout))
802297fe: 08 65        	ld	a0, 0x8(a0)
80229800: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80229804: 23 3c a4 fa  	sd	a0, -0x48(s0)
;                 Some((self.ptr.cast().into(), layout))
80229808: 03 35 84 fb  	ld	a0, -0x48(s0)
8022980c: 23 30 a4 fa  	sd	a0, -0x60(s0)
80229810: 03 36 04 f9  	ld	a2, -0x70(s0)
80229814: 03 35 84 f9  	ld	a0, -0x68(s0)
80229818: 23 34 c4 fa  	sd	a2, -0x58(s0)
8022981c: 23 38 a4 fa  	sd	a0, -0x50(s0)
80229820: 03 35 04 fb  	ld	a0, -0x50(s0)
80229824: 88 e9        	sd	a0, 0x10(a1)
80229826: 03 35 84 fa  	ld	a0, -0x58(s0)
8022982a: 88 e5        	sd	a0, 0x8(a1)
8022982c: 03 35 04 fa  	ld	a0, -0x60(s0)
80229830: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
80229832: 31 a0        	j	0x8022983e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h19a61df1585953bfE+0x8c>
80229834: 83 35 84 f8  	ld	a1, -0x78(s0)
80229838: 01 45        	li	a0, 0x0
;             None
8022983a: 88 e5        	sd	a0, 0x8(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8022983c: 09 a0        	j	0x8022983e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h19a61df1585953bfE+0x8c>
8022983e: e6 70        	ld	ra, 0x78(sp)
80229840: 46 74        	ld	s0, 0x70(sp)
;     }
80229842: 09 61        	addi	sp, sp, 0x80
80229844: 82 80        	ret

0000000080229846 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39270d9b7b8fe0afE>:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
80229846: 19 71        	addi	sp, sp, -0x80
80229848: 86 fc        	sd	ra, 0x78(sp)
8022984a: a2 f8        	sd	s0, 0x70(sp)
8022984c: 00 01        	addi	s0, sp, 0x80
8022984e: 23 30 b4 f8  	sd	a1, -0x80(s0)
80229852: 23 34 a4 f8  	sd	a0, -0x78(s0)
80229856: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
8022985a: 09 a0        	j	0x8022985c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39270d9b7b8fe0afE+0x16>
8022985c: 03 35 04 f8  	ld	a0, -0x80(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
80229860: 08 61        	ld	a0, 0x0(a0)
80229862: 19 e1        	bnez	a0, 0x80229868 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39270d9b7b8fe0afE+0x22>
80229864: 09 a0        	j	0x80229866 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39270d9b7b8fe0afE+0x20>
80229866: b9 a8        	j	0x802298c4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39270d9b7b8fe0afE+0x7e>
80229868: 83 35 84 f8  	ld	a1, -0x78(s0)
8022986c: 03 35 04 f8  	ld	a0, -0x80(s0)
80229870: 11 46        	li	a2, 0x4
;     intrinsics::min_align_of::<T>()
80229872: 23 34 c4 fc  	sd	a2, -0x38(s0)
;     intrinsics::size_of::<T>()
80229876: 23 38 c4 fc  	sd	a2, -0x30(s0)
;                 let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
8022987a: 14 61        	ld	a3, 0x0(a0)
8022987c: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     uint_impl! {
80229880: 8a 06        	slli	a3, a3, 0x2
80229882: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80229886: 23 3c d4 f8  	sd	a3, -0x68(s0)
8022988a: 23 38 c4 f8  	sd	a2, -0x70(s0)
;                 Some((self.ptr.cast().into(), layout))
8022988e: 08 65        	ld	a0, 0x8(a0)
80229890: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80229894: 23 3c a4 fa  	sd	a0, -0x48(s0)
;                 Some((self.ptr.cast().into(), layout))
80229898: 03 35 84 fb  	ld	a0, -0x48(s0)
8022989c: 23 30 a4 fa  	sd	a0, -0x60(s0)
802298a0: 03 36 04 f9  	ld	a2, -0x70(s0)
802298a4: 03 35 84 f9  	ld	a0, -0x68(s0)
802298a8: 23 34 c4 fa  	sd	a2, -0x58(s0)
802298ac: 23 38 a4 fa  	sd	a0, -0x50(s0)
802298b0: 03 35 04 fb  	ld	a0, -0x50(s0)
802298b4: 88 e9        	sd	a0, 0x10(a1)
802298b6: 03 35 84 fa  	ld	a0, -0x58(s0)
802298ba: 88 e5        	sd	a0, 0x8(a1)
802298bc: 03 35 04 fa  	ld	a0, -0x60(s0)
802298c0: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
802298c2: 31 a0        	j	0x802298ce <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39270d9b7b8fe0afE+0x88>
802298c4: 83 35 84 f8  	ld	a1, -0x78(s0)
802298c8: 01 45        	li	a0, 0x0
;             None
802298ca: 88 e5        	sd	a0, 0x8(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
802298cc: 09 a0        	j	0x802298ce <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h39270d9b7b8fe0afE+0x88>
802298ce: e6 70        	ld	ra, 0x78(sp)
802298d0: 46 74        	ld	s0, 0x70(sp)
;     }
802298d2: 09 61        	addi	sp, sp, 0x80
802298d4: 82 80        	ret

00000000802298d6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h4345be8b0b7a6253E>:
;     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
802298d6: 19 71        	addi	sp, sp, -0x80
802298d8: 86 fc        	sd	ra, 0x78(sp)
802298da: a2 f8        	sd	s0, 0x70(sp)
802298dc: 00 01        	addi	s0, sp, 0x80
802298de: 23 30 b4 f8  	sd	a1, -0x80(s0)
802298e2: 23 34 a4 f8  	sd	a0, -0x78(s0)
802298e6: 23 30 b4 fc  	sd	a1, -0x40(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
802298ea: 09 a0        	j	0x802298ec <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h4345be8b0b7a6253E+0x16>
802298ec: 03 35 04 f8  	ld	a0, -0x80(s0)
;         if T::IS_ZST || self.cap.0 == 0 {
802298f0: 08 61        	ld	a0, 0x0(a0)
802298f2: 19 e1        	bnez	a0, 0x802298f8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h4345be8b0b7a6253E+0x22>
802298f4: 09 a0        	j	0x802298f6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h4345be8b0b7a6253E+0x20>
802298f6: 85 a0        	j	0x80229956 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h4345be8b0b7a6253E+0x80>
802298f8: 83 35 84 f8  	ld	a1, -0x78(s0)
802298fc: 03 35 04 f8  	ld	a0, -0x80(s0)
80229900: 21 46        	li	a2, 0x8
;     intrinsics::min_align_of::<T>()
80229902: 23 34 c4 fc  	sd	a2, -0x38(s0)
80229906: c1 46        	li	a3, 0x10
;     intrinsics::size_of::<T>()
80229908: 23 38 d4 fc  	sd	a3, -0x30(s0)
;                 let size = mem::size_of::<T>().unchecked_mul(self.cap.0);
8022990c: 14 61        	ld	a3, 0x0(a0)
8022990e: 23 3c d4 fc  	sd	a3, -0x28(s0)
;     uint_impl! {
80229912: 92 06        	slli	a3, a3, 0x4
80229914: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         unsafe { Layout { size, align: Alignment::new_unchecked(align) } }
80229918: 23 3c d4 f8  	sd	a3, -0x68(s0)
8022991c: 23 38 c4 f8  	sd	a2, -0x70(s0)
;                 Some((self.ptr.cast().into(), layout))
80229920: 08 65        	ld	a0, 0x8(a0)
80229922: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80229926: 23 3c a4 fa  	sd	a0, -0x48(s0)
;                 Some((self.ptr.cast().into(), layout))
8022992a: 03 35 84 fb  	ld	a0, -0x48(s0)
8022992e: 23 30 a4 fa  	sd	a0, -0x60(s0)
80229932: 03 36 04 f9  	ld	a2, -0x70(s0)
80229936: 03 35 84 f9  	ld	a0, -0x68(s0)
8022993a: 23 34 c4 fa  	sd	a2, -0x58(s0)
8022993e: 23 38 a4 fa  	sd	a0, -0x50(s0)
80229942: 03 35 04 fb  	ld	a0, -0x50(s0)
80229946: 88 e9        	sd	a0, 0x10(a1)
80229948: 03 35 84 fa  	ld	a0, -0x58(s0)
8022994c: 88 e5        	sd	a0, 0x8(a1)
8022994e: 03 35 04 fa  	ld	a0, -0x60(s0)
80229952: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
80229954: 31 a0        	j	0x80229960 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h4345be8b0b7a6253E+0x8a>
80229956: 83 35 84 f8  	ld	a1, -0x78(s0)
8022995a: 01 45        	li	a0, 0x0
;             None
8022995c: 88 e5        	sd	a0, 0x8(a1)
;         if T::IS_ZST || self.cap.0 == 0 {
8022995e: 09 a0        	j	0x80229960 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h4345be8b0b7a6253E+0x8a>
80229960: e6 70        	ld	ra, 0x78(sp)
80229962: 46 74        	ld	s0, 0x70(sp)
;     }
80229964: 09 61        	addi	sp, sp, 0x80
80229966: 82 80        	ret

0000000080229968 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h1075c945ebad7631E>:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
80229968: 13 01 01 d3  	addi	sp, sp, -0x2d0
8022996c: 23 34 11 2c  	sd	ra, 0x2c8(sp)
80229970: 23 30 81 2c  	sd	s0, 0x2c0(sp)
80229974: 80 0d        	addi	s0, sp, 0x2d0
80229976: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
8022997a: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
8022997e: 23 34 a4 d6  	sd	a0, -0x298(s0)

0000000080229982 <.Lpcrel_hi3>:
80229982: 97 a6 00 00  	auipc	a3, 0xa
80229986: 93 86 e6 90  	addi	a3, a3, -0x6f2
8022998a: 9c 62        	ld	a5, 0x0(a3)
8022998c: 98 66        	ld	a4, 0x8(a3)
;     fn into(self) -> U {
8022998e: 23 38 f4 d6  	sd	a5, -0x290(s0)
80229992: 23 3c e4 d6  	sd	a4, -0x288(s0)
80229996: 9c 62        	ld	a5, 0x0(a3)
80229998: 98 66        	ld	a4, 0x8(a3)
;     fn from(kind: TryReserveErrorKind) -> Self {
8022999a: 23 30 f4 d8  	sd	a5, -0x280(s0)
8022999e: 23 34 e4 d8  	sd	a4, -0x278(s0)
802299a2: 98 62        	ld	a4, 0x0(a3)
802299a4: 94 66        	ld	a3, 0x8(a3)
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
802299a6: 23 38 e4 d8  	sd	a4, -0x270(s0)
802299aa: 23 3c d4 d8  	sd	a3, -0x268(s0)
802299ae: 91 46        	li	a3, 0x4
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
802299b0: 23 34 d4 da  	sd	a3, -0x258(s0)
;     fn max(self, other: Self) -> Self
802299b4: 23 38 d4 da  	sd	a3, -0x250(s0)
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
802299b8: 23 3c d4 da  	sd	a3, -0x248(s0)
802299bc: 23 3c a4 f0  	sd	a0, -0xe8(s0)
802299c0: 23 30 b4 f2  	sd	a1, -0xe0(s0)
802299c4: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;         if T::IS_ZST {
802299c8: 09 a0        	j	0x802299ca <.Lpcrel_hi3+0x48>
802299ca: 03 35 04 d6  	ld	a0, -0x2a0(s0)
802299ce: 83 35 84 d5  	ld	a1, -0x2a8(s0)
;     uint_impl! {
802299d2: aa 95        	add	a1, a1, a0
802299d4: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
802299d8: 33 b5 a5 00  	sltu	a0, a1, a0
802299dc: 23 38 b4 f2  	sd	a1, -0xd0(s0)
802299e0: a3 0f a4 f2  	sb	a0, -0xc1(s0)
802299e4: 23 30 b4 f4  	sd	a1, -0xc0(s0)
802299e8: a3 07 a4 f4  	sb	a0, -0xb1(s0)
802299ec: 03 45 f4 f4  	lbu	a0, -0xb1(s0)
802299f0: 05 89        	andi	a0, a0, 0x1
802299f2: 41 e5        	bnez	a0, 0x80229a7a <.Lpcrel_hi4>
802299f4: 09 a0        	j	0x802299f6 <.Lpcrel_hi3+0x74>
802299f6: 83 35 84 d6  	ld	a1, -0x298(s0)
802299fa: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;     uint_impl! {
802299fe: 23 30 a4 e0  	sd	a0, -0x200(s0)
80229a02: 05 45        	li	a0, 0x1
80229a04: 23 3c a4 de  	sd	a0, -0x208(s0)
;             Some(v) => Ok(v),
80229a08: 03 35 04 e0  	ld	a0, -0x200(s0)
80229a0c: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80229a10: 23 38 a4 de  	sd	a0, -0x210(s0)
80229a14: 7d 55        	li	a0, -0x1
80229a16: 7e 15        	slli	a0, a0, 0x3f
80229a18: 05 05        	addi	a0, a0, 0x1
80229a1a: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Ok(v) => ControlFlow::Continue(v),
80229a1e: 03 36 04 df  	ld	a2, -0x210(s0)
80229a22: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80229a26: 23 30 c4 de  	sd	a2, -0x220(s0)
80229a2a: 23 3c a4 dc  	sd	a0, -0x228(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80229a2e: 03 35 04 de  	ld	a0, -0x220(s0)
80229a32: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         let cap = cmp::max(self.cap.0 * 2, required_cap);
80229a36: 8c 61        	ld	a1, 0x0(a1)
80229a38: 86 05        	slli	a1, a1, 0x1
80229a3a: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
80229a3e: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
80229a42: 13 05 04 e2  	addi	a0, s0, -0x1e0
;     match compare(&v1, &v2) {
80229a46: 23 38 a4 ea  	sd	a0, -0x150(s0)
80229a4a: 13 05 84 e2  	addi	a0, s0, -0x1d8
80229a4e: 23 3c a4 ea  	sd	a0, -0x148(s0)
80229a52: 03 35 04 eb  	ld	a0, -0x150(s0)
80229a56: 83 35 84 eb  	ld	a1, -0x148(s0)
80229a5a: 97 40 ff ff  	auipc	ra, 0xffff4
80229a5e: e7 80 e0 c8  	jalr	-0x372(ra) <ekernel+0xffcd06e8>
80229a62: a3 07 a4 ea  	sb	a0, -0x151(s0)
80229a66: 03 45 f4 ea  	lbu	a0, -0x151(s0)
80229a6a: 05 25        	addiw	a0, a0, 0x1
80229a6c: 13 75 f5 0f  	andi	a0, a0, 0xff
80229a70: 89 45        	li	a1, 0x2
80229a72: 63 66 b5 08  	bltu	a0, a1, 0x80229afe <.Lpcrel_hi4+0x84>
80229a76: 09 a0        	j	0x80229a78 <.Lpcrel_hi3+0xf6>
80229a78: 41 a8        	j	0x80229b08 <.Lpcrel_hi4+0x8e>

0000000080229a7a <.Lpcrel_hi4>:
;     uint_impl! {
80229a7a: 17 a5 00 00  	auipc	a0, 0xa
80229a7e: 13 05 65 81  	addi	a0, a0, -0x7ea
80229a82: 10 61        	ld	a2, 0x0(a0)
80229a84: 0c 65        	ld	a1, 0x8(a0)
80229a86: 23 3c c4 de  	sd	a2, -0x208(s0)
80229a8a: 23 30 b4 e0  	sd	a1, -0x200(s0)
;             None => Err(err),
80229a8e: 0c 61        	ld	a1, 0x0(a0)
80229a90: 08 65        	ld	a0, 0x8(a0)
80229a92: 23 34 b4 de  	sd	a1, -0x218(s0)
80229a96: 23 38 a4 de  	sd	a0, -0x210(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
80229a9a: 83 35 84 de  	ld	a1, -0x218(s0)
80229a9e: 03 35 04 df  	ld	a0, -0x210(s0)
80229aa2: 23 38 b4 fc  	sd	a1, -0x30(s0)
80229aa6: 23 3c a4 fc  	sd	a0, -0x28(s0)
80229aaa: 23 3c b4 e8  	sd	a1, -0x168(s0)
80229aae: 23 30 a4 ea  	sd	a0, -0x160(s0)
80229ab2: 83 35 84 e9  	ld	a1, -0x168(s0)
80229ab6: 03 35 04 ea  	ld	a0, -0x160(s0)
80229aba: 23 3c b4 dc  	sd	a1, -0x228(s0)
80229abe: 23 30 a4 de  	sd	a0, -0x220(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80229ac2: 83 35 84 dd  	ld	a1, -0x228(s0)
80229ac6: 03 35 04 de  	ld	a0, -0x220(s0)
80229aca: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
80229ace: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;             Err(e) => Err(From::from(e)),
80229ad2: 83 35 84 e0  	ld	a1, -0x1f8(s0)
80229ad6: 03 35 04 e1  	ld	a0, -0x1f0(s0)
80229ada: 23 30 b4 fe  	sd	a1, -0x20(s0)
80229ade: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
80229ae2: 23 30 b4 ec  	sd	a1, -0x140(s0)
80229ae6: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
80229aea: 83 35 04 ec  	ld	a1, -0x140(s0)
80229aee: 03 35 84 ec  	ld	a0, -0x138(s0)
80229af2: 23 34 b4 dc  	sd	a1, -0x238(s0)
80229af6: 23 38 a4 dc  	sd	a0, -0x230(s0)
; //!An easy file system isolated from the kernel
80229afa: 55 aa        	j	0x80229cae <.Lpcrel_hi5+0x84>
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80229afc: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
80229afe: 03 35 84 e2  	ld	a0, -0x1d8(s0)
80229b02: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
80229b06: 31 a0        	j	0x80229b12 <.Lpcrel_hi4+0x98>
;         Ordering::Greater => v1,
80229b08: 03 35 04 e2  	ld	a0, -0x1e0(s0)
80229b0c: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
80229b10: 09 a0        	j	0x80229b12 <.Lpcrel_hi4+0x98>
;         let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
80229b12: 03 35 84 e1  	ld	a0, -0x1e8(s0)
80229b16: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
80229b1a: 11 45        	li	a0, 0x4
80229b1c: 23 38 a4 ec  	sd	a0, -0x130(s0)
80229b20: 13 05 04 ed  	addi	a0, s0, -0x130
;     match compare(&v1, &v2) {
80229b24: 23 30 a4 ee  	sd	a0, -0x120(s0)
80229b28: 13 05 84 e3  	addi	a0, s0, -0x1c8
80229b2c: 23 34 a4 ee  	sd	a0, -0x118(s0)
80229b30: 03 35 04 ee  	ld	a0, -0x120(s0)
80229b34: 83 35 84 ee  	ld	a1, -0x118(s0)
80229b38: 97 40 ff ff  	auipc	ra, 0xffff4
80229b3c: e7 80 00 bb  	jalr	-0x450(ra) <ekernel+0xffcd06e8>
80229b40: a3 0f a4 ec  	sb	a0, -0x121(s0)
80229b44: 03 45 f4 ed  	lbu	a0, -0x121(s0)
80229b48: 05 25        	addiw	a0, a0, 0x1
80229b4a: 13 75 f5 0f  	andi	a0, a0, 0xff
80229b4e: 89 45        	li	a1, 0x2
80229b50: 63 64 b5 00  	bltu	a0, a1, 0x80229b58 <.Lpcrel_hi4+0xde>
80229b54: 09 a0        	j	0x80229b56 <.Lpcrel_hi4+0xdc>
80229b56: 31 a0        	j	0x80229b62 <.Lpcrel_hi4+0xe8>
;         Ordering::Less | Ordering::Equal => v2,
80229b58: 03 35 84 e3  	ld	a0, -0x1c8(s0)
80229b5c: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
80229b60: 31 a0        	j	0x80229b6c <.Lpcrel_hi4+0xf2>
;         Ordering::Greater => v1,
80229b62: 03 35 04 ed  	ld	a0, -0x130(s0)
80229b66: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
80229b6a: 09 a0        	j	0x80229b6c <.Lpcrel_hi4+0xf2>
;         let new_layout = Layout::array::<T>(cap);
80229b6c: 03 36 04 e3  	ld	a2, -0x1d0(s0)
80229b70: 23 34 c4 f6  	sd	a2, -0x98(s0)
80229b74: a1 45        	li	a1, 0x8
;     intrinsics::min_align_of::<T>()
80229b76: 23 38 b4 f6  	sd	a1, -0x90(s0)
80229b7a: 61 45        	li	a0, 0x18
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
80229b7c: 97 90 ff ff  	auipc	ra, 0xffff9
80229b80: e7 80 60 5c  	jalr	0x5c6(ra) <ekernel+0xffcd6142>
80229b84: 2a 86        	mv	a2, a0
80229b86: 23 3c c4 d2  	sd	a2, -0x2c8(s0)
80229b8a: 2e 85        	mv	a0, a1
80229b8c: 83 35 84 d6  	ld	a1, -0x298(s0)
80229b90: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
80229b94: 23 3c c4 f6  	sd	a2, -0x88(s0)
80229b98: 23 30 a4 f8  	sd	a0, -0x80(s0)
80229b9c: 13 05 04 e7  	addi	a0, s0, -0x190
80229ba0: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80229ba4: 97 00 00 00  	auipc	ra, 0x0
80229ba8: e7 80 e0 c0  	jalr	-0x3f2(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h19a61df1585953bfE>
80229bac: 03 35 84 d6  	ld	a0, -0x298(s0)
80229bb0: 83 35 84 d3  	ld	a1, -0x2c8(s0)
80229bb4: 03 36 04 d4  	ld	a2, -0x2c0(s0)
80229bb8: 83 36 84 d4  	ld	a3, -0x2b8(s0)
80229bbc: 13 07 05 01  	addi	a4, a0, 0x10
80229bc0: 13 05 84 e5  	addi	a0, s0, -0x1a8
80229bc4: 97 f0 ff ff  	auipc	ra, 0xfffff
80229bc8: e7 80 a0 7b  	jalr	0x7ba(ra) <ekernel+0xffcdc37e>
;         match self {
80229bcc: 03 35 84 e5  	ld	a0, -0x1a8(s0)
80229bd0: 25 e9        	bnez	a0, 0x80229c40 <.Lpcrel_hi5+0x16>
80229bd2: 09 a0        	j	0x80229bd4 <.Lpcrel_hi4+0x15a>
80229bd4: 83 35 84 d6  	ld	a1, -0x298(s0)
;             Ok(v) => ControlFlow::Continue(v),
80229bd8: 03 36 04 e6  	ld	a2, -0x1a0(s0)
80229bdc: 03 35 84 e6  	ld	a0, -0x198(s0)
80229be0: 23 34 c4 f8  	sd	a2, -0x78(s0)
80229be4: 23 38 a4 f8  	sd	a0, -0x70(s0)
80229be8: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
80229bec: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80229bf0: 01 45        	li	a0, 0x0
80229bf2: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80229bf6: 03 36 84 e4  	ld	a2, -0x1b8(s0)
80229bfa: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80229bfe: 23 3c c4 f8  	sd	a2, -0x68(s0)
80229c02: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { self.set_ptr_and_cap(ptr, cap) };
80229c06: 03 35 04 e3  	ld	a0, -0x1d0(s0)
80229c0a: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80229c0e: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
80229c12: 03 36 84 f0  	ld	a2, -0xf8(s0)
80229c16: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
80229c1a: 03 36 04 f0  	ld	a2, -0x100(s0)
80229c1e: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
80229c20: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80229c24: 03 35 04 f1  	ld	a0, -0xf0(s0)
80229c28: 88 e1        	sd	a0, 0x0(a1)

0000000080229c2a <.Lpcrel_hi5>:
;         Ok(())
80229c2a: 17 95 00 00  	auipc	a0, 0x9
80229c2e: 13 05 65 64  	addi	a0, a0, 0x646
80229c32: 0c 61        	ld	a1, 0x0(a0)
80229c34: 08 65        	ld	a0, 0x8(a0)
80229c36: 23 34 b4 dc  	sd	a1, -0x238(s0)
80229c3a: 23 38 a4 dc  	sd	a0, -0x230(s0)
;     }
80229c3e: a9 a8        	j	0x80229c98 <.Lpcrel_hi5+0x6e>
;             Err(e) => ControlFlow::Break(Err(e)),
80229c40: 83 35 04 e6  	ld	a1, -0x1a0(s0)
80229c44: 03 35 84 e6  	ld	a0, -0x198(s0)
80229c48: 23 38 b4 fa  	sd	a1, -0x50(s0)
80229c4c: 23 3c a4 fa  	sd	a0, -0x48(s0)
80229c50: 23 38 b4 ee  	sd	a1, -0x110(s0)
80229c54: 23 3c a4 ee  	sd	a0, -0x108(s0)
80229c58: 83 35 04 ef  	ld	a1, -0x110(s0)
80229c5c: 03 35 84 ef  	ld	a0, -0x108(s0)
80229c60: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
80229c64: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80229c68: 05 45        	li	a0, 0x1
80229c6a: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80229c6e: 83 35 84 e4  	ld	a1, -0x1b8(s0)
80229c72: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80229c76: 23 34 b4 e8  	sd	a1, -0x178(s0)
80229c7a: 23 38 a4 e8  	sd	a0, -0x170(s0)
;             Err(e) => Err(From::from(e)),
80229c7e: 83 35 84 e8  	ld	a1, -0x178(s0)
80229c82: 03 35 04 e9  	ld	a0, -0x170(s0)
80229c86: 23 30 b4 fc  	sd	a1, -0x40(s0)
80229c8a: 23 34 a4 fc  	sd	a0, -0x38(s0)
80229c8e: 23 34 b4 dc  	sd	a1, -0x238(s0)
80229c92: 23 38 a4 dc  	sd	a0, -0x230(s0)
; //!An easy file system isolated from the kernel
80229c96: 21 a8        	j	0x80229cae <.Lpcrel_hi5+0x84>
;     }
80229c98: 03 35 84 dc  	ld	a0, -0x238(s0)
80229c9c: 83 35 04 dd  	ld	a1, -0x230(s0)
80229ca0: 83 30 81 2c  	ld	ra, 0x2c8(sp)
80229ca4: 03 34 01 2c  	ld	s0, 0x2c0(sp)
80229ca8: 13 01 01 2d  	addi	sp, sp, 0x2d0
80229cac: 82 80        	ret
; //!An easy file system isolated from the kernel
80229cae: ed b7        	j	0x80229c98 <.Lpcrel_hi5+0x6e>

0000000080229cb0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h980ce7bc34517ba2E>:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
80229cb0: 13 01 01 d3  	addi	sp, sp, -0x2d0
80229cb4: 23 34 11 2c  	sd	ra, 0x2c8(sp)
80229cb8: 23 30 81 2c  	sd	s0, 0x2c0(sp)
80229cbc: 80 0d        	addi	s0, sp, 0x2d0
80229cbe: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
80229cc2: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
80229cc6: 23 34 a4 d6  	sd	a0, -0x298(s0)

0000000080229cca <.Lpcrel_hi6>:
80229cca: 97 96 00 00  	auipc	a3, 0x9
80229cce: 93 86 66 5c  	addi	a3, a3, 0x5c6
80229cd2: 9c 62        	ld	a5, 0x0(a3)
80229cd4: 98 66        	ld	a4, 0x8(a3)
;     fn into(self) -> U {
80229cd6: 23 38 f4 d6  	sd	a5, -0x290(s0)
80229cda: 23 3c e4 d6  	sd	a4, -0x288(s0)
80229cde: 9c 62        	ld	a5, 0x0(a3)
80229ce0: 98 66        	ld	a4, 0x8(a3)
;     fn from(kind: TryReserveErrorKind) -> Self {
80229ce2: 23 30 f4 d8  	sd	a5, -0x280(s0)
80229ce6: 23 34 e4 d8  	sd	a4, -0x278(s0)
80229cea: 98 62        	ld	a4, 0x0(a3)
80229cec: 94 66        	ld	a3, 0x8(a3)
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
80229cee: 23 38 e4 d8  	sd	a4, -0x270(s0)
80229cf2: 23 3c d4 d8  	sd	a3, -0x268(s0)
80229cf6: 91 46        	li	a3, 0x4
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
80229cf8: 23 34 d4 da  	sd	a3, -0x258(s0)
;     fn max(self, other: Self) -> Self
80229cfc: 23 38 d4 da  	sd	a3, -0x250(s0)
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
80229d00: 23 3c d4 da  	sd	a3, -0x248(s0)
80229d04: 23 3c a4 f0  	sd	a0, -0xe8(s0)
80229d08: 23 30 b4 f2  	sd	a1, -0xe0(s0)
80229d0c: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;         if T::IS_ZST {
80229d10: 09 a0        	j	0x80229d12 <.Lpcrel_hi6+0x48>
80229d12: 03 35 04 d6  	ld	a0, -0x2a0(s0)
80229d16: 83 35 84 d5  	ld	a1, -0x2a8(s0)
;     uint_impl! {
80229d1a: aa 95        	add	a1, a1, a0
80229d1c: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
80229d20: 33 b5 a5 00  	sltu	a0, a1, a0
80229d24: 23 38 b4 f2  	sd	a1, -0xd0(s0)
80229d28: a3 0f a4 f2  	sb	a0, -0xc1(s0)
80229d2c: 23 30 b4 f4  	sd	a1, -0xc0(s0)
80229d30: a3 07 a4 f4  	sb	a0, -0xb1(s0)
80229d34: 03 45 f4 f4  	lbu	a0, -0xb1(s0)
80229d38: 05 89        	andi	a0, a0, 0x1
80229d3a: 41 e5        	bnez	a0, 0x80229dc2 <.Lpcrel_hi7>
80229d3c: 09 a0        	j	0x80229d3e <.Lpcrel_hi6+0x74>
80229d3e: 83 35 84 d6  	ld	a1, -0x298(s0)
80229d42: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;     uint_impl! {
80229d46: 23 30 a4 e0  	sd	a0, -0x200(s0)
80229d4a: 05 45        	li	a0, 0x1
80229d4c: 23 3c a4 de  	sd	a0, -0x208(s0)
;             Some(v) => Ok(v),
80229d50: 03 35 04 e0  	ld	a0, -0x200(s0)
80229d54: 23 38 a4 f4  	sd	a0, -0xb0(s0)
80229d58: 23 38 a4 de  	sd	a0, -0x210(s0)
80229d5c: 7d 55        	li	a0, -0x1
80229d5e: 7e 15        	slli	a0, a0, 0x3f
80229d60: 05 05        	addi	a0, a0, 0x1
80229d62: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Ok(v) => ControlFlow::Continue(v),
80229d66: 03 36 04 df  	ld	a2, -0x210(s0)
80229d6a: 23 3c c4 f4  	sd	a2, -0xa8(s0)
80229d6e: 23 30 c4 de  	sd	a2, -0x220(s0)
80229d72: 23 3c a4 dc  	sd	a0, -0x228(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80229d76: 03 35 04 de  	ld	a0, -0x220(s0)
80229d7a: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         let cap = cmp::max(self.cap.0 * 2, required_cap);
80229d7e: 8c 61        	ld	a1, 0x0(a1)
80229d80: 86 05        	slli	a1, a1, 0x1
80229d82: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
80229d86: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
80229d8a: 13 05 04 e2  	addi	a0, s0, -0x1e0
;     match compare(&v1, &v2) {
80229d8e: 23 38 a4 ea  	sd	a0, -0x150(s0)
80229d92: 13 05 84 e2  	addi	a0, s0, -0x1d8
80229d96: 23 3c a4 ea  	sd	a0, -0x148(s0)
80229d9a: 03 35 04 eb  	ld	a0, -0x150(s0)
80229d9e: 83 35 84 eb  	ld	a1, -0x148(s0)
80229da2: 97 40 ff ff  	auipc	ra, 0xffff4
80229da6: e7 80 60 94  	jalr	-0x6ba(ra) <ekernel+0xffcd06e8>
80229daa: a3 07 a4 ea  	sb	a0, -0x151(s0)
80229dae: 03 45 f4 ea  	lbu	a0, -0x151(s0)
80229db2: 05 25        	addiw	a0, a0, 0x1
80229db4: 13 75 f5 0f  	andi	a0, a0, 0xff
80229db8: 89 45        	li	a1, 0x2
80229dba: 63 66 b5 08  	bltu	a0, a1, 0x80229e46 <.Lpcrel_hi7+0x84>
80229dbe: 09 a0        	j	0x80229dc0 <.Lpcrel_hi6+0xf6>
80229dc0: 41 a8        	j	0x80229e50 <.Lpcrel_hi7+0x8e>

0000000080229dc2 <.Lpcrel_hi7>:
;     uint_impl! {
80229dc2: 17 95 00 00  	auipc	a0, 0x9
80229dc6: 13 05 e5 4c  	addi	a0, a0, 0x4ce
80229dca: 10 61        	ld	a2, 0x0(a0)
80229dcc: 0c 65        	ld	a1, 0x8(a0)
80229dce: 23 3c c4 de  	sd	a2, -0x208(s0)
80229dd2: 23 30 b4 e0  	sd	a1, -0x200(s0)
;             None => Err(err),
80229dd6: 0c 61        	ld	a1, 0x0(a0)
80229dd8: 08 65        	ld	a0, 0x8(a0)
80229dda: 23 34 b4 de  	sd	a1, -0x218(s0)
80229dde: 23 38 a4 de  	sd	a0, -0x210(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
80229de2: 83 35 84 de  	ld	a1, -0x218(s0)
80229de6: 03 35 04 df  	ld	a0, -0x210(s0)
80229dea: 23 38 b4 fc  	sd	a1, -0x30(s0)
80229dee: 23 3c a4 fc  	sd	a0, -0x28(s0)
80229df2: 23 3c b4 e8  	sd	a1, -0x168(s0)
80229df6: 23 30 a4 ea  	sd	a0, -0x160(s0)
80229dfa: 83 35 84 e9  	ld	a1, -0x168(s0)
80229dfe: 03 35 04 ea  	ld	a0, -0x160(s0)
80229e02: 23 3c b4 dc  	sd	a1, -0x228(s0)
80229e06: 23 30 a4 de  	sd	a0, -0x220(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80229e0a: 83 35 84 dd  	ld	a1, -0x228(s0)
80229e0e: 03 35 04 de  	ld	a0, -0x220(s0)
80229e12: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
80229e16: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;             Err(e) => Err(From::from(e)),
80229e1a: 83 35 84 e0  	ld	a1, -0x1f8(s0)
80229e1e: 03 35 04 e1  	ld	a0, -0x1f0(s0)
80229e22: 23 30 b4 fe  	sd	a1, -0x20(s0)
80229e26: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
80229e2a: 23 30 b4 ec  	sd	a1, -0x140(s0)
80229e2e: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
80229e32: 83 35 04 ec  	ld	a1, -0x140(s0)
80229e36: 03 35 84 ec  	ld	a0, -0x138(s0)
80229e3a: 23 34 b4 dc  	sd	a1, -0x238(s0)
80229e3e: 23 38 a4 dc  	sd	a0, -0x230(s0)
; //!An easy file system isolated from the kernel
80229e42: 55 aa        	j	0x80229ff6 <.Lpcrel_hi8+0x84>
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
80229e44: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
80229e46: 03 35 84 e2  	ld	a0, -0x1d8(s0)
80229e4a: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
80229e4e: 31 a0        	j	0x80229e5a <.Lpcrel_hi7+0x98>
;         Ordering::Greater => v1,
80229e50: 03 35 04 e2  	ld	a0, -0x1e0(s0)
80229e54: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
80229e58: 09 a0        	j	0x80229e5a <.Lpcrel_hi7+0x98>
;         let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
80229e5a: 03 35 84 e1  	ld	a0, -0x1e8(s0)
80229e5e: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
80229e62: 11 45        	li	a0, 0x4
80229e64: 23 38 a4 ec  	sd	a0, -0x130(s0)
80229e68: 13 05 04 ed  	addi	a0, s0, -0x130
;     match compare(&v1, &v2) {
80229e6c: 23 30 a4 ee  	sd	a0, -0x120(s0)
80229e70: 13 05 84 e3  	addi	a0, s0, -0x1c8
80229e74: 23 34 a4 ee  	sd	a0, -0x118(s0)
80229e78: 03 35 04 ee  	ld	a0, -0x120(s0)
80229e7c: 83 35 84 ee  	ld	a1, -0x118(s0)
80229e80: 97 40 ff ff  	auipc	ra, 0xffff4
80229e84: e7 80 80 86  	jalr	-0x798(ra) <ekernel+0xffcd06e8>
80229e88: a3 0f a4 ec  	sb	a0, -0x121(s0)
80229e8c: 03 45 f4 ed  	lbu	a0, -0x121(s0)
80229e90: 05 25        	addiw	a0, a0, 0x1
80229e92: 13 75 f5 0f  	andi	a0, a0, 0xff
80229e96: 89 45        	li	a1, 0x2
80229e98: 63 64 b5 00  	bltu	a0, a1, 0x80229ea0 <.Lpcrel_hi7+0xde>
80229e9c: 09 a0        	j	0x80229e9e <.Lpcrel_hi7+0xdc>
80229e9e: 31 a0        	j	0x80229eaa <.Lpcrel_hi7+0xe8>
;         Ordering::Less | Ordering::Equal => v2,
80229ea0: 03 35 84 e3  	ld	a0, -0x1c8(s0)
80229ea4: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
80229ea8: 31 a0        	j	0x80229eb4 <.Lpcrel_hi7+0xf2>
;         Ordering::Greater => v1,
80229eaa: 03 35 04 ed  	ld	a0, -0x130(s0)
80229eae: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
80229eb2: 09 a0        	j	0x80229eb4 <.Lpcrel_hi7+0xf2>
;         let new_layout = Layout::array::<T>(cap);
80229eb4: 03 36 04 e3  	ld	a2, -0x1d0(s0)
80229eb8: 23 34 c4 f6  	sd	a2, -0x98(s0)
80229ebc: a1 45        	li	a1, 0x8
;     intrinsics::min_align_of::<T>()
80229ebe: 23 38 b4 f6  	sd	a1, -0x90(s0)
80229ec2: 41 45        	li	a0, 0x10
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
80229ec4: 97 90 ff ff  	auipc	ra, 0xffff9
80229ec8: e7 80 e0 27  	jalr	0x27e(ra) <ekernel+0xffcd6142>
80229ecc: 2a 86        	mv	a2, a0
80229ece: 23 3c c4 d2  	sd	a2, -0x2c8(s0)
80229ed2: 2e 85        	mv	a0, a1
80229ed4: 83 35 84 d6  	ld	a1, -0x298(s0)
80229ed8: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
80229edc: 23 3c c4 f6  	sd	a2, -0x88(s0)
80229ee0: 23 30 a4 f8  	sd	a0, -0x80(s0)
80229ee4: 13 05 04 e7  	addi	a0, s0, -0x190
80229ee8: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80229eec: 97 00 00 00  	auipc	ra, 0x0
80229ef0: e7 80 a0 9e  	jalr	-0x616(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h4345be8b0b7a6253E>
80229ef4: 03 35 84 d6  	ld	a0, -0x298(s0)
80229ef8: 83 35 84 d3  	ld	a1, -0x2c8(s0)
80229efc: 03 36 04 d4  	ld	a2, -0x2c0(s0)
80229f00: 83 36 84 d4  	ld	a3, -0x2b8(s0)
80229f04: 13 07 05 01  	addi	a4, a0, 0x10
80229f08: 13 05 84 e5  	addi	a0, s0, -0x1a8
80229f0c: 97 f0 ff ff  	auipc	ra, 0xfffff
80229f10: e7 80 20 47  	jalr	0x472(ra) <ekernel+0xffcdc37e>
;         match self {
80229f14: 03 35 84 e5  	ld	a0, -0x1a8(s0)
80229f18: 25 e9        	bnez	a0, 0x80229f88 <.Lpcrel_hi8+0x16>
80229f1a: 09 a0        	j	0x80229f1c <.Lpcrel_hi7+0x15a>
80229f1c: 83 35 84 d6  	ld	a1, -0x298(s0)
;             Ok(v) => ControlFlow::Continue(v),
80229f20: 03 36 04 e6  	ld	a2, -0x1a0(s0)
80229f24: 03 35 84 e6  	ld	a0, -0x198(s0)
80229f28: 23 34 c4 f8  	sd	a2, -0x78(s0)
80229f2c: 23 38 a4 f8  	sd	a0, -0x70(s0)
80229f30: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
80229f34: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80229f38: 01 45        	li	a0, 0x0
80229f3a: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80229f3e: 03 36 84 e4  	ld	a2, -0x1b8(s0)
80229f42: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80229f46: 23 3c c4 f8  	sd	a2, -0x68(s0)
80229f4a: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { self.set_ptr_and_cap(ptr, cap) };
80229f4e: 03 35 04 e3  	ld	a0, -0x1d0(s0)
80229f52: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
80229f56: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
80229f5a: 03 36 84 f0  	ld	a2, -0xf8(s0)
80229f5e: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
80229f62: 03 36 04 f0  	ld	a2, -0x100(s0)
80229f66: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
80229f68: 23 38 a4 f0  	sd	a0, -0xf0(s0)
80229f6c: 03 35 04 f1  	ld	a0, -0xf0(s0)
80229f70: 88 e1        	sd	a0, 0x0(a1)

0000000080229f72 <.Lpcrel_hi8>:
;         Ok(())
80229f72: 17 95 00 00  	auipc	a0, 0x9
80229f76: 13 05 e5 2f  	addi	a0, a0, 0x2fe
80229f7a: 0c 61        	ld	a1, 0x0(a0)
80229f7c: 08 65        	ld	a0, 0x8(a0)
80229f7e: 23 34 b4 dc  	sd	a1, -0x238(s0)
80229f82: 23 38 a4 dc  	sd	a0, -0x230(s0)
;     }
80229f86: a9 a8        	j	0x80229fe0 <.Lpcrel_hi8+0x6e>
;             Err(e) => ControlFlow::Break(Err(e)),
80229f88: 83 35 04 e6  	ld	a1, -0x1a0(s0)
80229f8c: 03 35 84 e6  	ld	a0, -0x198(s0)
80229f90: 23 38 b4 fa  	sd	a1, -0x50(s0)
80229f94: 23 3c a4 fa  	sd	a0, -0x48(s0)
80229f98: 23 38 b4 ee  	sd	a1, -0x110(s0)
80229f9c: 23 3c a4 ee  	sd	a0, -0x108(s0)
80229fa0: 83 35 04 ef  	ld	a1, -0x110(s0)
80229fa4: 03 35 84 ef  	ld	a0, -0x108(s0)
80229fa8: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
80229fac: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
80229fb0: 05 45        	li	a0, 0x1
80229fb2: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
80229fb6: 83 35 84 e4  	ld	a1, -0x1b8(s0)
80229fba: 03 35 04 e5  	ld	a0, -0x1b0(s0)
80229fbe: 23 34 b4 e8  	sd	a1, -0x178(s0)
80229fc2: 23 38 a4 e8  	sd	a0, -0x170(s0)
;             Err(e) => Err(From::from(e)),
80229fc6: 83 35 84 e8  	ld	a1, -0x178(s0)
80229fca: 03 35 04 e9  	ld	a0, -0x170(s0)
80229fce: 23 30 b4 fc  	sd	a1, -0x40(s0)
80229fd2: 23 34 a4 fc  	sd	a0, -0x38(s0)
80229fd6: 23 34 b4 dc  	sd	a1, -0x238(s0)
80229fda: 23 38 a4 dc  	sd	a0, -0x230(s0)
; //!An easy file system isolated from the kernel
80229fde: 21 a8        	j	0x80229ff6 <.Lpcrel_hi8+0x84>
;     }
80229fe0: 03 35 84 dc  	ld	a0, -0x238(s0)
80229fe4: 83 35 04 dd  	ld	a1, -0x230(s0)
80229fe8: 83 30 81 2c  	ld	ra, 0x2c8(sp)
80229fec: 03 34 01 2c  	ld	s0, 0x2c0(sp)
80229ff0: 13 01 01 2d  	addi	sp, sp, 0x2d0
80229ff4: 82 80        	ret
; //!An easy file system isolated from the kernel
80229ff6: ed b7        	j	0x80229fe0 <.Lpcrel_hi8+0x6e>

0000000080229ff8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17hbc4ff5c77422cff5E>:
;     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
80229ff8: 13 01 01 d3  	addi	sp, sp, -0x2d0
80229ffc: 23 34 11 2c  	sd	ra, 0x2c8(sp)
8022a000: 23 30 81 2c  	sd	s0, 0x2c0(sp)
8022a004: 80 0d        	addi	s0, sp, 0x2d0
8022a006: 23 3c c4 d4  	sd	a2, -0x2a8(s0)
8022a00a: 23 30 b4 d6  	sd	a1, -0x2a0(s0)
8022a00e: 23 34 a4 d6  	sd	a0, -0x298(s0)

000000008022a012 <.Lpcrel_hi9>:
8022a012: 97 96 00 00  	auipc	a3, 0x9
8022a016: 93 86 e6 27  	addi	a3, a3, 0x27e
8022a01a: 9c 62        	ld	a5, 0x0(a3)
8022a01c: 98 66        	ld	a4, 0x8(a3)
;     fn into(self) -> U {
8022a01e: 23 38 f4 d6  	sd	a5, -0x290(s0)
8022a022: 23 3c e4 d6  	sd	a4, -0x288(s0)
8022a026: 9c 62        	ld	a5, 0x0(a3)
8022a028: 98 66        	ld	a4, 0x8(a3)
;     fn from(kind: TryReserveErrorKind) -> Self {
8022a02a: 23 30 f4 d8  	sd	a5, -0x280(s0)
8022a02e: 23 34 e4 d8  	sd	a4, -0x278(s0)
8022a032: 98 62        	ld	a4, 0x0(a3)
8022a034: 94 66        	ld	a3, 0x8(a3)
;     pub fn ok_or<E>(self, err: E) -> Result<T, E> {
8022a036: 23 38 e4 d8  	sd	a4, -0x270(s0)
8022a03a: 23 3c d4 d8  	sd	a3, -0x268(s0)
8022a03e: 91 46        	li	a3, 0x4
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
8022a040: 23 34 d4 da  	sd	a3, -0x258(s0)
;     fn max(self, other: Self) -> Self
8022a044: 23 38 d4 da  	sd	a3, -0x250(s0)
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8022a048: 23 3c d4 da  	sd	a3, -0x248(s0)
8022a04c: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8022a050: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8022a054: 23 34 c4 f2  	sd	a2, -0xd8(s0)
;         if T::IS_ZST {
8022a058: 09 a0        	j	0x8022a05a <.Lpcrel_hi9+0x48>
8022a05a: 03 35 04 d6  	ld	a0, -0x2a0(s0)
8022a05e: 83 35 84 d5  	ld	a1, -0x2a8(s0)
;     uint_impl! {
8022a062: aa 95        	add	a1, a1, a0
8022a064: 23 38 b4 d4  	sd	a1, -0x2b0(s0)
8022a068: 33 b5 a5 00  	sltu	a0, a1, a0
8022a06c: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8022a070: a3 0f a4 f2  	sb	a0, -0xc1(s0)
8022a074: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8022a078: a3 07 a4 f4  	sb	a0, -0xb1(s0)
8022a07c: 03 45 f4 f4  	lbu	a0, -0xb1(s0)
8022a080: 05 89        	andi	a0, a0, 0x1
8022a082: 41 e5        	bnez	a0, 0x8022a10a <.Lpcrel_hi10>
8022a084: 09 a0        	j	0x8022a086 <.Lpcrel_hi9+0x74>
8022a086: 83 35 84 d6  	ld	a1, -0x298(s0)
8022a08a: 03 35 04 d5  	ld	a0, -0x2b0(s0)
;     uint_impl! {
8022a08e: 23 30 a4 e0  	sd	a0, -0x200(s0)
8022a092: 05 45        	li	a0, 0x1
8022a094: 23 3c a4 de  	sd	a0, -0x208(s0)
;             Some(v) => Ok(v),
8022a098: 03 35 04 e0  	ld	a0, -0x200(s0)
8022a09c: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8022a0a0: 23 38 a4 de  	sd	a0, -0x210(s0)
8022a0a4: 7d 55        	li	a0, -0x1
8022a0a6: 7e 15        	slli	a0, a0, 0x3f
8022a0a8: 05 05        	addi	a0, a0, 0x1
8022a0aa: 23 34 a4 de  	sd	a0, -0x218(s0)
;             Ok(v) => ControlFlow::Continue(v),
8022a0ae: 03 36 04 df  	ld	a2, -0x210(s0)
8022a0b2: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8022a0b6: 23 30 c4 de  	sd	a2, -0x220(s0)
8022a0ba: 23 3c a4 dc  	sd	a0, -0x228(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8022a0be: 03 35 04 de  	ld	a0, -0x220(s0)
8022a0c2: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;         let cap = cmp::max(self.cap.0 * 2, required_cap);
8022a0c6: 8c 61        	ld	a1, 0x0(a1)
8022a0c8: 86 05        	slli	a1, a1, 0x1
8022a0ca: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
8022a0ce: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
8022a0d2: 13 05 04 e2  	addi	a0, s0, -0x1e0
;     match compare(&v1, &v2) {
8022a0d6: 23 38 a4 ea  	sd	a0, -0x150(s0)
8022a0da: 13 05 84 e2  	addi	a0, s0, -0x1d8
8022a0de: 23 3c a4 ea  	sd	a0, -0x148(s0)
8022a0e2: 03 35 04 eb  	ld	a0, -0x150(s0)
8022a0e6: 83 35 84 eb  	ld	a1, -0x148(s0)
8022a0ea: 97 30 ff ff  	auipc	ra, 0xffff3
8022a0ee: e7 80 e0 5f  	jalr	0x5fe(ra) <ekernel+0xffcd06e8>
8022a0f2: a3 07 a4 ea  	sb	a0, -0x151(s0)
8022a0f6: 03 45 f4 ea  	lbu	a0, -0x151(s0)
8022a0fa: 05 25        	addiw	a0, a0, 0x1
8022a0fc: 13 75 f5 0f  	andi	a0, a0, 0xff
8022a100: 89 45        	li	a1, 0x2
8022a102: 63 66 b5 08  	bltu	a0, a1, 0x8022a18e <.Lpcrel_hi10+0x84>
8022a106: 09 a0        	j	0x8022a108 <.Lpcrel_hi9+0xf6>
8022a108: 41 a8        	j	0x8022a198 <.Lpcrel_hi10+0x8e>

000000008022a10a <.Lpcrel_hi10>:
;     uint_impl! {
8022a10a: 17 95 00 00  	auipc	a0, 0x9
8022a10e: 13 05 65 18  	addi	a0, a0, 0x186
8022a112: 10 61        	ld	a2, 0x0(a0)
8022a114: 0c 65        	ld	a1, 0x8(a0)
8022a116: 23 3c c4 de  	sd	a2, -0x208(s0)
8022a11a: 23 30 b4 e0  	sd	a1, -0x200(s0)
;             None => Err(err),
8022a11e: 0c 61        	ld	a1, 0x0(a0)
8022a120: 08 65        	ld	a0, 0x8(a0)
8022a122: 23 34 b4 de  	sd	a1, -0x218(s0)
8022a126: 23 38 a4 de  	sd	a0, -0x210(s0)
;             Err(e) => ControlFlow::Break(Err(e)),
8022a12a: 83 35 84 de  	ld	a1, -0x218(s0)
8022a12e: 03 35 04 df  	ld	a0, -0x210(s0)
8022a132: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022a136: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022a13a: 23 3c b4 e8  	sd	a1, -0x168(s0)
8022a13e: 23 30 a4 ea  	sd	a0, -0x160(s0)
8022a142: 83 35 84 e9  	ld	a1, -0x168(s0)
8022a146: 03 35 04 ea  	ld	a0, -0x160(s0)
8022a14a: 23 3c b4 dc  	sd	a1, -0x228(s0)
8022a14e: 23 30 a4 de  	sd	a0, -0x220(s0)
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8022a152: 83 35 84 dd  	ld	a1, -0x228(s0)
8022a156: 03 35 04 de  	ld	a0, -0x220(s0)
8022a15a: 23 34 b4 e0  	sd	a1, -0x1f8(s0)
8022a15e: 23 38 a4 e0  	sd	a0, -0x1f0(s0)
;             Err(e) => Err(From::from(e)),
8022a162: 83 35 84 e0  	ld	a1, -0x1f8(s0)
8022a166: 03 35 04 e1  	ld	a0, -0x1f0(s0)
8022a16a: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022a16e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Self { kind }
8022a172: 23 30 b4 ec  	sd	a1, -0x140(s0)
8022a176: 23 34 a4 ec  	sd	a0, -0x138(s0)
;             Err(e) => Err(From::from(e)),
8022a17a: 83 35 04 ec  	ld	a1, -0x140(s0)
8022a17e: 03 35 84 ec  	ld	a0, -0x138(s0)
8022a182: 23 34 b4 dc  	sd	a1, -0x238(s0)
8022a186: 23 38 a4 dc  	sd	a0, -0x230(s0)
; //!An easy file system isolated from the kernel
8022a18a: 55 aa        	j	0x8022a33e <.Lpcrel_hi11+0x84>
;         let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
8022a18c: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
8022a18e: 03 35 84 e2  	ld	a0, -0x1d8(s0)
8022a192: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
8022a196: 31 a0        	j	0x8022a1a2 <.Lpcrel_hi10+0x98>
;         Ordering::Greater => v1,
8022a198: 03 35 04 e2  	ld	a0, -0x1e0(s0)
8022a19c: 23 3c a4 e0  	sd	a0, -0x1e8(s0)
; }
8022a1a0: 09 a0        	j	0x8022a1a2 <.Lpcrel_hi10+0x98>
;         let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
8022a1a2: 03 35 84 e1  	ld	a0, -0x1e8(s0)
8022a1a6: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8022a1aa: 11 45        	li	a0, 0x4
8022a1ac: 23 38 a4 ec  	sd	a0, -0x130(s0)
8022a1b0: 13 05 04 ed  	addi	a0, s0, -0x130
;     match compare(&v1, &v2) {
8022a1b4: 23 30 a4 ee  	sd	a0, -0x120(s0)
8022a1b8: 13 05 84 e3  	addi	a0, s0, -0x1c8
8022a1bc: 23 34 a4 ee  	sd	a0, -0x118(s0)
8022a1c0: 03 35 04 ee  	ld	a0, -0x120(s0)
8022a1c4: 83 35 84 ee  	ld	a1, -0x118(s0)
8022a1c8: 97 30 ff ff  	auipc	ra, 0xffff3
8022a1cc: e7 80 00 52  	jalr	0x520(ra) <ekernel+0xffcd06e8>
8022a1d0: a3 0f a4 ec  	sb	a0, -0x121(s0)
8022a1d4: 03 45 f4 ed  	lbu	a0, -0x121(s0)
8022a1d8: 05 25        	addiw	a0, a0, 0x1
8022a1da: 13 75 f5 0f  	andi	a0, a0, 0xff
8022a1de: 89 45        	li	a1, 0x2
8022a1e0: 63 64 b5 00  	bltu	a0, a1, 0x8022a1e8 <.Lpcrel_hi10+0xde>
8022a1e4: 09 a0        	j	0x8022a1e6 <.Lpcrel_hi10+0xdc>
8022a1e6: 31 a0        	j	0x8022a1f2 <.Lpcrel_hi10+0xe8>
;         Ordering::Less | Ordering::Equal => v2,
8022a1e8: 03 35 84 e3  	ld	a0, -0x1c8(s0)
8022a1ec: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
8022a1f0: 31 a0        	j	0x8022a1fc <.Lpcrel_hi10+0xf2>
;         Ordering::Greater => v1,
8022a1f2: 03 35 04 ed  	ld	a0, -0x130(s0)
8022a1f6: 23 38 a4 e2  	sd	a0, -0x1d0(s0)
; }
8022a1fa: 09 a0        	j	0x8022a1fc <.Lpcrel_hi10+0xf2>
;         let new_layout = Layout::array::<T>(cap);
8022a1fc: 03 36 04 e3  	ld	a2, -0x1d0(s0)
8022a200: 23 34 c4 f6  	sd	a2, -0x98(s0)
8022a204: 91 45        	li	a1, 0x4
;     intrinsics::min_align_of::<T>()
8022a206: 23 38 b4 f6  	sd	a1, -0x90(s0)
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
8022a20a: 2e 85        	mv	a0, a1
8022a20c: 97 90 ff ff  	auipc	ra, 0xffff9
8022a210: e7 80 60 f3  	jalr	-0xca(ra) <ekernel+0xffcd6142>
8022a214: 2a 86        	mv	a2, a0
8022a216: 23 3c c4 d2  	sd	a2, -0x2c8(s0)
8022a21a: 2e 85        	mv	a0, a1
8022a21c: 83 35 84 d6  	ld	a1, -0x298(s0)
8022a220: 23 30 a4 d4  	sd	a0, -0x2c0(s0)
8022a224: 23 3c c4 f6  	sd	a2, -0x88(s0)
8022a228: 23 30 a4 f8  	sd	a0, -0x80(s0)
8022a22c: 13 05 04 e7  	addi	a0, s0, -0x190
8022a230: 23 34 a4 d4  	sd	a0, -0x2b8(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8022a234: 97 f0 ff ff  	auipc	ra, 0xfffff
8022a238: e7 80 20 61  	jalr	0x612(ra) <ekernel+0xffcdc846>
8022a23c: 03 35 84 d6  	ld	a0, -0x298(s0)
8022a240: 83 35 84 d3  	ld	a1, -0x2c8(s0)
8022a244: 03 36 04 d4  	ld	a2, -0x2c0(s0)
8022a248: 83 36 84 d4  	ld	a3, -0x2b8(s0)
8022a24c: 13 07 05 01  	addi	a4, a0, 0x10
8022a250: 13 05 84 e5  	addi	a0, s0, -0x1a8
8022a254: 97 f0 ff ff  	auipc	ra, 0xfffff
8022a258: e7 80 a0 12  	jalr	0x12a(ra) <ekernel+0xffcdc37e>
;         match self {
8022a25c: 03 35 84 e5  	ld	a0, -0x1a8(s0)
8022a260: 25 e9        	bnez	a0, 0x8022a2d0 <.Lpcrel_hi11+0x16>
8022a262: 09 a0        	j	0x8022a264 <.Lpcrel_hi10+0x15a>
8022a264: 83 35 84 d6  	ld	a1, -0x298(s0)
;             Ok(v) => ControlFlow::Continue(v),
8022a268: 03 36 04 e6  	ld	a2, -0x1a0(s0)
8022a26c: 03 35 84 e6  	ld	a0, -0x198(s0)
8022a270: 23 34 c4 f8  	sd	a2, -0x78(s0)
8022a274: 23 38 a4 f8  	sd	a0, -0x70(s0)
8022a278: 23 34 c4 e4  	sd	a2, -0x1b8(s0)
8022a27c: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8022a280: 01 45        	li	a0, 0x0
8022a282: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8022a286: 03 36 84 e4  	ld	a2, -0x1b8(s0)
8022a28a: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8022a28e: 23 3c c4 f8  	sd	a2, -0x68(s0)
8022a292: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         unsafe { self.set_ptr_and_cap(ptr, cap) };
8022a296: 03 35 04 e3  	ld	a0, -0x1d0(s0)
8022a29a: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8022a29e: 23 34 c4 f0  	sd	a2, -0xf8(s0)
;         Unique { pointer, _marker: PhantomData }
8022a2a2: 03 36 84 f0  	ld	a2, -0xf8(s0)
8022a2a6: 23 30 c4 f0  	sd	a2, -0x100(s0)
;         self.ptr = Unique::from(ptr.cast());
8022a2aa: 03 36 04 f0  	ld	a2, -0x100(s0)
8022a2ae: 90 e5        	sd	a2, 0x8(a1)
;         self.cap = unsafe { Cap(cap) };
8022a2b0: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8022a2b4: 03 35 04 f1  	ld	a0, -0xf0(s0)
8022a2b8: 88 e1        	sd	a0, 0x0(a1)

000000008022a2ba <.Lpcrel_hi11>:
;         Ok(())
8022a2ba: 17 95 00 00  	auipc	a0, 0x9
8022a2be: 13 05 65 fb  	addi	a0, a0, -0x4a
8022a2c2: 0c 61        	ld	a1, 0x0(a0)
8022a2c4: 08 65        	ld	a0, 0x8(a0)
8022a2c6: 23 34 b4 dc  	sd	a1, -0x238(s0)
8022a2ca: 23 38 a4 dc  	sd	a0, -0x230(s0)
;     }
8022a2ce: a9 a8        	j	0x8022a328 <.Lpcrel_hi11+0x6e>
;             Err(e) => ControlFlow::Break(Err(e)),
8022a2d0: 83 35 04 e6  	ld	a1, -0x1a0(s0)
8022a2d4: 03 35 84 e6  	ld	a0, -0x198(s0)
8022a2d8: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022a2dc: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022a2e0: 23 38 b4 ee  	sd	a1, -0x110(s0)
8022a2e4: 23 3c a4 ee  	sd	a0, -0x108(s0)
8022a2e8: 83 35 04 ef  	ld	a1, -0x110(s0)
8022a2ec: 03 35 84 ef  	ld	a0, -0x108(s0)
8022a2f0: 23 34 b4 e4  	sd	a1, -0x1b8(s0)
8022a2f4: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8022a2f8: 05 45        	li	a0, 0x1
8022a2fa: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
;         let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
8022a2fe: 83 35 84 e4  	ld	a1, -0x1b8(s0)
8022a302: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8022a306: 23 34 b4 e8  	sd	a1, -0x178(s0)
8022a30a: 23 38 a4 e8  	sd	a0, -0x170(s0)
;             Err(e) => Err(From::from(e)),
8022a30e: 83 35 84 e8  	ld	a1, -0x178(s0)
8022a312: 03 35 04 e9  	ld	a0, -0x170(s0)
8022a316: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022a31a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022a31e: 23 34 b4 dc  	sd	a1, -0x238(s0)
8022a322: 23 38 a4 dc  	sd	a0, -0x230(s0)
; //!An easy file system isolated from the kernel
8022a326: 21 a8        	j	0x8022a33e <.Lpcrel_hi11+0x84>
;     }
8022a328: 03 35 84 dc  	ld	a0, -0x238(s0)
8022a32c: 83 35 04 dd  	ld	a1, -0x230(s0)
8022a330: 83 30 81 2c  	ld	ra, 0x2c8(sp)
8022a334: 03 34 01 2c  	ld	s0, 0x2c0(sp)
8022a338: 13 01 01 2d  	addi	sp, sp, 0x2d0
8022a33c: 82 80        	ret
; //!An easy file system isolated from the kernel
8022a33e: ed b7        	j	0x8022a328 <.Lpcrel_hi11+0x6e>

000000008022a340 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15try_allocate_in17h10caf23909d872bdE>:
;     fn try_allocate_in(
8022a340: 29 71        	addi	sp, sp, -0x140
8022a342: 06 fe        	sd	ra, 0x138(sp)
8022a344: 22 fa        	sd	s0, 0x130(sp)
8022a346: 80 02        	addi	s0, sp, 0x140
8022a348: 23 34 b4 ec  	sd	a1, -0x138(s0)
8022a34c: 23 38 a4 ec  	sd	a0, -0x130(s0)

000000008022a350 <.Lpcrel_hi12>:
8022a350: 17 95 00 00  	auipc	a0, 0x9
8022a354: 13 05 05 f2  	addi	a0, a0, -0xe0
8022a358: 14 61        	ld	a3, 0x0(a0)
8022a35a: 08 65        	ld	a0, 0x8(a0)
;             if let Err(err) = alloc_guard(layout.size()) {
8022a35c: 23 30 d4 ee  	sd	a3, -0x120(s0)
8022a360: 23 34 a4 ee  	sd	a0, -0x118(s0)

000000008022a364 <.Lpcrel_hi13>:
8022a364: 17 95 00 00  	auipc	a0, 0x9
8022a368: 13 05 c5 f2  	addi	a0, a0, -0xd4
8022a36c: 23 3c a4 ec  	sd	a0, -0x128(s0)
8022a370: 18 61        	ld	a4, 0x0(a0)
8022a372: 14 65        	ld	a3, 0x8(a0)
;     fn into(self) -> U {
8022a374: 23 38 e4 ee  	sd	a4, -0x110(s0)
8022a378: 23 3c d4 ee  	sd	a3, -0x108(s0)
8022a37c: 18 61        	ld	a4, 0x0(a0)
8022a37e: 14 65        	ld	a3, 0x8(a0)
;     fn from(kind: TryReserveErrorKind) -> Self {
8022a380: 23 30 e4 f0  	sd	a4, -0x100(s0)
8022a384: 23 34 d4 f0  	sd	a3, -0xf8(s0)
8022a388: 18 61        	ld	a4, 0x0(a0)
8022a38a: 14 65        	ld	a3, 0x8(a0)
;     fn into(self) -> U {
8022a38c: 23 38 e4 f0  	sd	a4, -0xf0(s0)
8022a390: 23 3c d4 f0  	sd	a3, -0xe8(s0)
8022a394: 14 61        	ld	a3, 0x0(a0)
8022a396: 08 65        	ld	a0, 0x8(a0)
;     fn from(kind: TryReserveErrorKind) -> Self {
8022a398: 23 30 d4 f2  	sd	a3, -0xe0(s0)
8022a39c: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8022a3a0: 23 0b c4 f2  	sb	a2, -0xca(s0)
8022a3a4: 23 38 b4 fa  	sd	a1, -0x50(s0)
;         if T::IS_ZST || capacity == 0 {
8022a3a8: 09 a0        	j	0x8022a3aa <.Lpcrel_hi13+0x46>
8022a3aa: 03 35 84 ec  	ld	a0, -0x138(s0)
;         if T::IS_ZST || capacity == 0 {
8022a3ae: 19 ed        	bnez	a0, 0x8022a3cc <.Lpcrel_hi13+0x68>
8022a3b0: 09 a0        	j	0x8022a3b2 <.Lpcrel_hi13+0x4e>
;             Ok(Self::new_in(alloc))
8022a3b2: 97 00 00 00  	auipc	ra, 0x0
8022a3b6: e7 80 c0 23  	jalr	0x23c(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17heb82dbf8401238bdE>
8022a3ba: 2a 86        	mv	a2, a0
8022a3bc: 2e 85        	mv	a0, a1
8022a3be: 83 35 04 ed  	ld	a1, -0x130(s0)
8022a3c2: 90 e5        	sd	a2, 0x8(a1)
8022a3c4: 88 e9        	sd	a0, 0x10(a1)
8022a3c6: 01 45        	li	a0, 0x0
8022a3c8: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || capacity == 0 {
8022a3ca: 1d aa        	j	0x8022a500 <.Lpcrel_hi14+0xda>
8022a3cc: 03 36 84 ec  	ld	a2, -0x138(s0)
8022a3d0: 85 45        	li	a1, 0x1
;     intrinsics::min_align_of::<T>()
8022a3d2: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         return inner(mem::size_of::<T>(), Alignment::of::<T>(), n);
8022a3d6: 2e 85        	mv	a0, a1
8022a3d8: 97 90 ff ff  	auipc	ra, 0xffff9
8022a3dc: e7 80 a0 d6  	jalr	-0x296(ra) <ekernel+0xffcd6142>
8022a3e0: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022a3e4: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;             let layout = match Layout::array::<T>(capacity) {
8022a3e8: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022a3ec: 1d c9        	beqz	a0, 0x8022a422 <.Lpcrel_hi13+0xbe>
8022a3ee: 09 a0        	j	0x8022a3f0 <.Lpcrel_hi13+0x8c>
;                 Ok(layout) => layout,
8022a3f0: 83 35 84 f4  	ld	a1, -0xb8(s0)
8022a3f4: 03 35 04 f5  	ld	a0, -0xb0(s0)
8022a3f8: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022a3fc: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022a400: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8022a404: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022a408: 13 05 84 f3  	addi	a0, s0, -0xc8
;             if let Err(err) = alloc_guard(layout.size()) {
8022a40c: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self.size
8022a410: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022a414: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             let result = match init {
8022a418: 03 45 64 f3  	lbu	a0, -0xca(s0)
8022a41c: 05 89        	andi	a0, a0, 0x1
8022a41e: 19 cd        	beqz	a0, 0x8022a43c <.Lpcrel_hi14+0x16>
8022a420: 2d a8        	j	0x8022a45a <.Lpcrel_hi14+0x34>
8022a422: 83 35 04 ed  	ld	a1, -0x130(s0)

000000008022a426 <.Lpcrel_hi14>:
;                 Err(_) => return Err(CapacityOverflow.into()),
8022a426: 17 95 00 00  	auipc	a0, 0x9
8022a42a: 13 05 a5 e6  	addi	a0, a0, -0x196
8022a42e: 10 61        	ld	a2, 0x0(a0)
8022a430: 08 65        	ld	a0, 0x8(a0)
8022a432: 90 e5        	sd	a2, 0x8(a1)
8022a434: 88 e9        	sd	a0, 0x10(a1)
8022a436: 05 45        	li	a0, 0x1
8022a438: 88 e1        	sd	a0, 0x0(a1)
; //!An easy file system isolated from the kernel
8022a43a: e1 a0        	j	0x8022a502 <.Lpcrel_hi14+0xdc>
;                 AllocInit::Uninitialized => alloc.allocate(layout),
8022a43c: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022a440: 03 36 04 f4  	ld	a2, -0xc0(s0)
8022a444: 13 05 74 f3  	addi	a0, s0, -0xc9
8022a448: 97 90 ff ff  	auipc	ra, 0xffff9
8022a44c: e7 80 c0 c9  	jalr	-0x364(ra) <ekernel+0xffcd60e4>
8022a450: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8022a454: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022a458: 05 a0        	j	0x8022a478 <.Lpcrel_hi14+0x52>
;                 AllocInit::Zeroed => alloc.allocate_zeroed(layout),
8022a45a: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022a45e: 03 36 04 f4  	ld	a2, -0xc0(s0)
8022a462: 13 05 74 f3  	addi	a0, s0, -0xc9
8022a466: 97 90 ff ff  	auipc	ra, 0xffff9
8022a46a: e7 80 60 c2  	jalr	-0x3da(ra) <ekernel+0xffcd608c>
8022a46e: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8022a472: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022a476: 09 a0        	j	0x8022a478 <.Lpcrel_hi14+0x52>
;             let ptr = match result {
8022a478: 03 35 84 f5  	ld	a0, -0xa8(s0)
8022a47c: 39 c5        	beqz	a0, 0x8022a4ca <.Lpcrel_hi14+0xa4>
8022a47e: 09 a0        	j	0x8022a480 <.Lpcrel_hi14+0x5a>
8022a480: 83 35 04 ed  	ld	a1, -0x130(s0)
8022a484: 03 35 84 ec  	ld	a0, -0x138(s0)
;                 Ok(ptr) => ptr,
8022a488: 03 36 84 f5  	ld	a2, -0xa8(s0)
8022a48c: 83 36 04 f6  	ld	a3, -0xa0(s0)
8022a490: 23 30 c4 fe  	sd	a2, -0x20(s0)
8022a494: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8022a498: 23 30 c4 fa  	sd	a2, -0x60(s0)
;         Unique { pointer, _marker: PhantomData }
8022a49c: 03 36 04 fa  	ld	a2, -0x60(s0)
8022a4a0: 23 3c c4 f8  	sd	a2, -0x68(s0)
;             Ok(Self { ptr: Unique::from(ptr.cast()), cap: unsafe { Cap(capacity) }, alloc })
8022a4a4: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022a4a8: 03 35 84 f9  	ld	a0, -0x68(s0)
8022a4ac: 23 38 a4 f8  	sd	a0, -0x70(s0)
8022a4b0: 03 35 84 fa  	ld	a0, -0x58(s0)
8022a4b4: 23 34 a4 f8  	sd	a0, -0x78(s0)
8022a4b8: 03 36 84 f8  	ld	a2, -0x78(s0)
8022a4bc: 03 35 04 f9  	ld	a0, -0x70(s0)
8022a4c0: 90 e5        	sd	a2, 0x8(a1)
8022a4c2: 88 e9        	sd	a0, 0x10(a1)
8022a4c4: 01 45        	li	a0, 0x0
8022a4c6: 88 e1        	sd	a0, 0x0(a1)
;         if T::IS_ZST || capacity == 0 {
8022a4c8: 25 a8        	j	0x8022a500 <.Lpcrel_hi14+0xda>
8022a4ca: 83 35 04 ed  	ld	a1, -0x130(s0)
;                 Err(_) => return Err(AllocError { layout, non_exhaustive: () }.into()),
8022a4ce: 03 36 84 f3  	ld	a2, -0xc8(s0)
8022a4d2: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022a4d6: 23 3c c4 f6  	sd	a2, -0x88(s0)
8022a4da: 23 30 a4 f8  	sd	a0, -0x80(s0)
;         Self { kind }
8022a4de: 03 36 84 f7  	ld	a2, -0x88(s0)
8022a4e2: 03 35 04 f8  	ld	a0, -0x80(s0)
8022a4e6: 23 34 c4 f6  	sd	a2, -0x98(s0)
8022a4ea: 23 38 a4 f6  	sd	a0, -0x90(s0)
;                 Err(_) => return Err(AllocError { layout, non_exhaustive: () }.into()),
8022a4ee: 03 36 84 f6  	ld	a2, -0x98(s0)
8022a4f2: 03 35 04 f7  	ld	a0, -0x90(s0)
8022a4f6: 90 e5        	sd	a2, 0x8(a1)
8022a4f8: 88 e9        	sd	a0, 0x10(a1)
8022a4fa: 05 45        	li	a0, 0x1
8022a4fc: 88 e1        	sd	a0, 0x0(a1)
; //!An easy file system isolated from the kernel
8022a4fe: 11 a0        	j	0x8022a502 <.Lpcrel_hi14+0xdc>
;     }
8022a500: 11 a0        	j	0x8022a504 <.Lpcrel_hi14+0xde>
8022a502: 09 a0        	j	0x8022a504 <.Lpcrel_hi14+0xde>
8022a504: f2 70        	ld	ra, 0x138(sp)
8022a506: 52 74        	ld	s0, 0x130(sp)
;     }
8022a508: 31 61        	addi	sp, sp, 0x140
8022a50a: 82 80        	ret

000000008022a50c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h1d49a039a2eb9562E>:
;     pub fn reserve_for_push(&mut self, len: usize) {
8022a50c: 01 11        	addi	sp, sp, -0x20
8022a50e: 06 ec        	sd	ra, 0x18(sp)
8022a510: 22 e8        	sd	s0, 0x10(sp)
8022a512: 00 10        	addi	s0, sp, 0x20
8022a514: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022a518: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022a51c: 05 46        	li	a2, 0x1
;         handle_reserve(self.grow_amortized(len, 1));
8022a51e: 97 f0 ff ff  	auipc	ra, 0xfffff
8022a522: e7 80 a0 44  	jalr	0x44a(ra) <ekernel+0xffcdc968>
8022a526: 97 f0 ff ff  	auipc	ra, 0xfffff
8022a52a: e7 80 80 1c  	jalr	0x1c8(ra) <ekernel+0xffcdc6ee>
8022a52e: e2 60        	ld	ra, 0x18(sp)
8022a530: 42 64        	ld	s0, 0x10(sp)
;     }
8022a532: 05 61        	addi	sp, sp, 0x20
8022a534: 82 80        	ret

000000008022a536 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h3c9fb2e70081a527E>:
;     pub fn reserve_for_push(&mut self, len: usize) {
8022a536: 01 11        	addi	sp, sp, -0x20
8022a538: 06 ec        	sd	ra, 0x18(sp)
8022a53a: 22 e8        	sd	s0, 0x10(sp)
8022a53c: 00 10        	addi	s0, sp, 0x20
8022a53e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022a542: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022a546: 05 46        	li	a2, 0x1
;         handle_reserve(self.grow_amortized(len, 1));
8022a548: 97 f0 ff ff  	auipc	ra, 0xfffff
8022a54c: e7 80 80 76  	jalr	0x768(ra) <ekernel+0xffcdccb0>
8022a550: 97 f0 ff ff  	auipc	ra, 0xfffff
8022a554: e7 80 e0 19  	jalr	0x19e(ra) <ekernel+0xffcdc6ee>
8022a558: e2 60        	ld	ra, 0x18(sp)
8022a55a: 42 64        	ld	s0, 0x10(sp)
;     }
8022a55c: 05 61        	addi	sp, sp, 0x20
8022a55e: 82 80        	ret

000000008022a560 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h43cae29ebd01b5e3E>:
;     pub fn reserve_for_push(&mut self, len: usize) {
8022a560: 01 11        	addi	sp, sp, -0x20
8022a562: 06 ec        	sd	ra, 0x18(sp)
8022a564: 22 e8        	sd	s0, 0x10(sp)
8022a566: 00 10        	addi	s0, sp, 0x20
8022a568: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022a56c: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022a570: 05 46        	li	a2, 0x1
;         handle_reserve(self.grow_amortized(len, 1));
8022a572: 97 00 00 00  	auipc	ra, 0x0
8022a576: e7 80 60 a8  	jalr	-0x57a(ra) <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17hbc4ff5c77422cff5E>
8022a57a: 97 f0 ff ff  	auipc	ra, 0xfffff
8022a57e: e7 80 40 17  	jalr	0x174(ra) <ekernel+0xffcdc6ee>
8022a582: e2 60        	ld	ra, 0x18(sp)
8022a584: 42 64        	ld	s0, 0x10(sp)
;     }
8022a586: 05 61        	addi	sp, sp, 0x20
8022a588: 82 80        	ret

000000008022a58a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17h4dedd47e52d0ae5dE>:
;     pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, alloc: A) -> Self {
8022a58a: 1d 71        	addi	sp, sp, -0x60
8022a58c: 86 ec        	sd	ra, 0x58(sp)
8022a58e: a2 e8        	sd	s0, 0x50(sp)
8022a590: 80 10        	addi	s0, sp, 0x60
8022a592: 23 30 b4 fa  	sd	a1, -0x60(s0)
8022a596: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022a59a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022a59e: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         let cap = if T::IS_ZST { Cap::ZERO } else { unsafe { Cap(capacity) } };
8022a5a2: 09 a0        	j	0x8022a5a4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17h4dedd47e52d0ae5dE+0x1a>
8022a5a4: 03 35 04 fa  	ld	a0, -0x60(s0)
;         let cap = if T::IS_ZST { Cap::ZERO } else { unsafe { Cap(capacity) } };
8022a5a8: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022a5ac: 09 a0        	j	0x8022a5ae <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17h4dedd47e52d0ae5dE+0x24>
;             assert_unsafe_precondition!(
8022a5ae: 09 a0        	j	0x8022a5b0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17h4dedd47e52d0ae5dE+0x26>
8022a5b0: 03 35 84 fa  	ld	a0, -0x58(s0)
;             assert_unsafe_precondition!(
8022a5b4: 97 90 ff ff  	auipc	ra, 0xffff9
8022a5b8: e7 80 00 18  	jalr	0x180(ra) <ekernel+0xffcd6734>
8022a5bc: 09 a0        	j	0x8022a5be <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$17from_raw_parts_in17h4dedd47e52d0ae5dE+0x34>
8022a5be: 03 35 84 fa  	ld	a0, -0x58(s0)
;             NonNull { pointer: ptr as _ }
8022a5c2: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { Unique { pointer: NonNull::new_unchecked(ptr), _marker: PhantomData } }
8022a5c6: 03 35 04 fd  	ld	a0, -0x30(s0)
8022a5ca: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap, alloc }
8022a5ce: 03 35 04 fc  	ld	a0, -0x40(s0)
8022a5d2: 83 35 84 fc  	ld	a1, -0x38(s0)
8022a5d6: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022a5da: 23 38 a4 fa  	sd	a0, -0x50(s0)
;     }
8022a5de: 03 35 04 fb  	ld	a0, -0x50(s0)
8022a5e2: 83 35 84 fb  	ld	a1, -0x48(s0)
8022a5e6: e6 60        	ld	ra, 0x58(sp)
8022a5e8: 46 64        	ld	s0, 0x50(sp)
8022a5ea: 25 61        	addi	sp, sp, 0x60
8022a5ec: 82 80        	ret

000000008022a5ee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17heb82dbf8401238bdE>:
;     pub const fn new_in(alloc: A) -> Self {
8022a5ee: 5d 71        	addi	sp, sp, -0x50
8022a5f0: 86 e4        	sd	ra, 0x48(sp)
8022a5f2: a2 e0        	sd	s0, 0x40(sp)
8022a5f4: 80 08        	addi	s0, sp, 0x50
8022a5f6: 05 45        	li	a0, 0x1
;     intrinsics::min_align_of::<T>()
8022a5f8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     unsafe { mem::transmute(addr) }
8022a5fc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
8022a600: 09 a0        	j	0x8022a602 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17heb82dbf8401238bdE+0x14>
8022a602: 05 45        	li	a0, 0x1
;             assert_unsafe_precondition!(
8022a604: 97 90 ff ff  	auipc	ra, 0xffff9
8022a608: e7 80 00 13  	jalr	0x130(ra) <ekernel+0xffcd6734>
8022a60c: 09 a0        	j	0x8022a60e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17heb82dbf8401238bdE+0x20>
8022a60e: 05 45        	li	a0, 0x1
;             NonNull { pointer: ptr as _ }
8022a610: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         Unique { pointer: NonNull::dangling(), _marker: PhantomData }
8022a614: 03 35 04 fd  	ld	a0, -0x30(s0)
8022a618: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         Self { ptr: Unique::dangling(), cap: Cap::ZERO, alloc }
8022a61c: 03 35 84 fc  	ld	a0, -0x38(s0)
8022a620: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022a624: 01 45        	li	a0, 0x0
8022a626: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     }
8022a62a: 03 35 84 fb  	ld	a0, -0x48(s0)
8022a62e: 83 35 04 fc  	ld	a1, -0x40(s0)
8022a632: a6 60        	ld	ra, 0x48(sp)
8022a634: 06 64        	ld	s0, 0x40(sp)
8022a636: 61 61        	addi	sp, sp, 0x50
8022a638: 82 80        	ret

000000008022a63a <_ZN48_$LT$$RF$A$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h9108b7cd150cf04bE>:
;     unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
8022a63a: 79 71        	addi	sp, sp, -0x30
8022a63c: 06 f4        	sd	ra, 0x28(sp)
8022a63e: 22 f0        	sd	s0, 0x20(sp)
8022a640: 00 18        	addi	s0, sp, 0x30
8022a642: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022a646: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022a64a: 23 30 c4 fe  	sd	a2, -0x20(s0)
8022a64e: 23 34 d4 fe  	sd	a3, -0x18(s0)
;         unsafe { (**self).deallocate(ptr, layout) }
8022a652: 08 61        	ld	a0, 0x0(a0)
8022a654: 97 90 ff ff  	auipc	ra, 0xffff9
8022a658: e7 80 00 9c  	jalr	-0x640(ra) <ekernel+0xffcd6014>
8022a65c: a2 70        	ld	ra, 0x28(sp)
8022a65e: 02 74        	ld	s0, 0x20(sp)
;     }
8022a660: 45 61        	addi	sp, sp, 0x30
8022a662: 82 80        	ret

000000008022a664 <_ZN7easy_fs6bitmap13decomposition17h1e6167c7ee31ac70E>:
; fn decomposition(mut bit: usize) -> (usize, usize, usize) {
8022a664: 79 71        	addi	sp, sp, -0x30
8022a666: 06 f4        	sd	ra, 0x28(sp)
8022a668: 22 f0        	sd	s0, 0x20(sp)
8022a66a: 00 18        	addi	s0, sp, 0x30
8022a66c: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022a670: aa 85        	mv	a1, a0
8022a672: 03 35 84 fd  	ld	a0, -0x28(s0)
8022a676: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     let block_pos = bit / BLOCK_BITS;
8022a67a: 03 35 04 fe  	ld	a0, -0x20(s0)
8022a67e: 93 56 c5 00  	srli	a3, a0, 0xc
8022a682: 23 34 d4 fe  	sd	a3, -0x18(s0)
;     bit %= BLOCK_BITS;
8022a686: 03 35 04 fe  	ld	a0, -0x20(s0)
8022a68a: 52 15        	slli	a0, a0, 0x34
8022a68c: 51 91        	srli	a0, a0, 0x34
8022a68e: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     (block_pos, bit / 64, bit % 64)
8022a692: 03 35 04 fe  	ld	a0, -0x20(s0)
8022a696: 13 56 65 00  	srli	a2, a0, 0x6
8022a69a: 13 75 f5 03  	andi	a0, a0, 0x3f
8022a69e: 94 e1        	sd	a3, 0x0(a1)
8022a6a0: 90 e5        	sd	a2, 0x8(a1)
8022a6a2: 88 e9        	sd	a0, 0x10(a1)
8022a6a4: a2 70        	ld	ra, 0x28(sp)
8022a6a6: 02 74        	ld	s0, 0x20(sp)
; }
8022a6a8: 45 61        	addi	sp, sp, 0x30
8022a6aa: 82 80        	ret

000000008022a6ac <_ZN7easy_fs6bitmap6Bitmap3new17h1343b24cc2c2f3f5E>:
;     pub fn new(start_block_id: usize, blocks: usize) -> Self {
8022a6ac: 79 71        	addi	sp, sp, -0x30
8022a6ae: 06 f4        	sd	ra, 0x28(sp)
8022a6b0: 22 f0        	sd	s0, 0x20(sp)
8022a6b2: 00 18        	addi	s0, sp, 0x30
8022a6b4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022a6b8: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         Self {
8022a6bc: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022a6c0: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     }
8022a6c4: 03 35 04 fd  	ld	a0, -0x30(s0)
8022a6c8: 83 35 84 fd  	ld	a1, -0x28(s0)
8022a6cc: a2 70        	ld	ra, 0x28(sp)
8022a6ce: 02 74        	ld	s0, 0x20(sp)
8022a6d0: 45 61        	addi	sp, sp, 0x30
8022a6d2: 82 80        	ret

000000008022a6d4 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E>:
;     pub fn alloc(&self, block_device: &Arc<dyn BlockDevice>) -> Option<usize> {
8022a6d4: 2d 71        	addi	sp, sp, -0x120
8022a6d6: 06 ee        	sd	ra, 0x118(sp)
8022a6d8: 22 ea        	sd	s0, 0x110(sp)
8022a6da: 00 12        	addi	s0, sp, 0x120
8022a6dc: 23 38 b4 f0  	sd	a1, -0xf0(s0)
8022a6e0: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8022a6e4: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022a6e8: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         for block_id in 0..self.blocks {
8022a6ec: 08 65        	ld	a0, 0x8(a0)
8022a6ee: 81 45        	li	a1, 0x0
8022a6f0: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8022a6f4: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022a6f8: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022a6fc: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022a700: 97 50 ff ff  	auipc	ra, 0xffff5
8022a704: e7 80 60 fb  	jalr	-0x4a(ra) <ekernel+0xffcd26b6>
8022a708: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022a70c: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8022a710: 09 a0        	j	0x8022a712 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0x3e>
8022a712: 13 05 04 f4  	addi	a0, s0, -0xc0
;         for block_id in 0..self.blocks {
8022a716: 97 50 ff ff  	auipc	ra, 0xffff5
8022a71a: e7 80 c0 e0  	jalr	-0x1f4(ra) <ekernel+0xffcd2522>
8022a71e: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8022a722: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8022a726: 03 35 04 f5  	ld	a0, -0xb0(s0)
8022a72a: 11 e5        	bnez	a0, 0x8022a736 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0x62>
8022a72c: 09 a0        	j	0x8022a72e <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0x5a>
8022a72e: 01 45        	li	a0, 0x0
;         None
8022a730: 23 30 a4 f2  	sd	a0, -0xe0(s0)
;     }
8022a734: 05 a0        	j	0x8022a754 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0x80>
8022a736: 03 35 84 f1  	ld	a0, -0xe8(s0)
;         for block_id in 0..self.blocks {
8022a73a: 83 35 84 f5  	ld	a1, -0xa8(s0)
8022a73e: 23 30 b4 f6  	sd	a1, -0xa0(s0)
;                 block_id + self.start_block_id as usize,
8022a742: 83 35 04 f6  	ld	a1, -0xa0(s0)
8022a746: 08 61        	ld	a0, 0x0(a0)
8022a748: 2e 95        	add	a0, a0, a1
8022a74a: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8022a74e: 63 69 b5 12  	bltu	a0, a1, 0x8022a880 <.Lpcrel_hi0>
8022a752: 09 a8        	j	0x8022a764 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0x90>
;     }
8022a754: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022a758: 83 35 84 f2  	ld	a1, -0xd8(s0)
8022a75c: f2 60        	ld	ra, 0x118(sp)
8022a75e: 52 64        	ld	s0, 0x110(sp)
8022a760: 15 61        	addi	sp, sp, 0x120
8022a762: 82 80        	ret
8022a764: 03 35 04 f1  	ld	a0, -0xf0(s0)
;                 Arc::clone(block_device),
8022a768: 97 30 ff ff  	auipc	ra, 0xffff3
8022a76c: e7 80 80 97  	jalr	-0x688(ra) <ekernel+0xffcd00e0>
8022a770: 2a 86        	mv	a2, a0
8022a772: 03 35 84 f0  	ld	a0, -0xf8(s0)
8022a776: 23 38 c4 ee  	sd	a2, -0x110(s0)
8022a77a: 2e 86        	mv	a2, a1
8022a77c: 83 35 04 ef  	ld	a1, -0x110(s0)
;             let pos = get_block_cache(
8022a780: 97 b0 ff ff  	auipc	ra, 0xffffb
8022a784: e7 80 40 68  	jalr	0x684(ra) <ekernel+0xffcd8e04>
8022a788: 23 38 a4 f8  	sd	a0, -0x70(s0)
8022a78c: 13 05 04 f9  	addi	a0, s0, -0x70
8022a790: 97 30 ff ff  	auipc	ra, 0xffff3
8022a794: e7 80 40 9f  	jalr	-0x60c(ra) <ekernel+0xffcd0184>
8022a798: aa 85        	mv	a1, a0
8022a79a: 23 3c b4 ee  	sd	a1, -0x108(s0)
8022a79e: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022a7a2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022a7a6: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8022a7a8: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8022a7ac: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8022a7b0: 85 45        	li	a1, 0x1
8022a7b2: 97 50 ff ff  	auipc	ra, 0xffff5
8022a7b6: e7 80 40 9f  	jalr	-0x60c(ra) <ekernel+0xffcd21a6>
8022a7ba: aa 85        	mv	a1, a0
8022a7bc: 23 30 b4 f0  	sd	a1, -0x100(s0)
8022a7c0: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022a7c4: 09 a0        	j	0x8022a7c6 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0xf2>
8022a7c6: 03 35 84 ef  	ld	a0, -0x108(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8022a7ca: 21 05        	addi	a0, a0, 0x8
8022a7cc: 89 45        	li	a1, 0x2
8022a7ce: a3 0b b4 fc  	sb	a1, -0x29(s0)
8022a7d2: 83 45 74 fd  	lbu	a1, -0x29(s0)
8022a7d6: 97 50 ff ff  	auipc	ra, 0xffff5
8022a7da: e7 80 40 98  	jalr	-0x67c(ra) <ekernel+0xffcd215a>
8022a7de: 83 35 04 f0  	ld	a1, -0x100(s0)
8022a7e2: 63 08 b5 00  	beq	a0, a1, 0x8022a7f2 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0x11e>
8022a7e6: 09 a0        	j	0x8022a7e8 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0x114>
;             crate::relax();
8022a7e8: 97 50 ff ff  	auipc	ra, 0xffff5
8022a7ec: e7 80 60 a6  	jalr	-0x59a(ra) <ekernel+0xffcd224e>
8022a7f0: d9 bf        	j	0x8022a7c6 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0xf2>
8022a7f2: 83 35 04 f0  	ld	a1, -0x100(s0)
8022a7f6: 03 35 84 ef  	ld	a0, -0x108(s0)
;             next_serving: &self.next_serving,
8022a7fa: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8022a7fe: 41 05        	addi	a0, a0, 0x10
8022a800: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8022a804: 23 38 c4 fa  	sd	a2, -0x50(s0)
8022a808: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022a80c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8022a810: 03 35 04 fc  	ld	a0, -0x40(s0)
8022a814: 23 34 a4 f8  	sd	a0, -0x78(s0)
8022a818: 03 35 84 fb  	ld	a0, -0x48(s0)
8022a81c: 23 30 a4 f8  	sd	a0, -0x80(s0)
8022a820: 03 35 04 fb  	ld	a0, -0x50(s0)
8022a824: 23 3c a4 f6  	sd	a0, -0x88(s0)
8022a828: 13 05 84 f7  	addi	a0, s0, -0x88
8022a82c: 23 34 a4 ee  	sd	a0, -0x118(s0)
;             let pos = get_block_cache(
8022a830: 97 80 ff ff  	auipc	ra, 0xffff8
8022a834: e7 80 20 e4  	jalr	-0x1be(ra) <ekernel+0xffcd5672>
8022a838: 93 05 04 f6  	addi	a1, s0, -0xa0
;             .modify(0, |bitmap_block: &mut BitmapBlock| {
8022a83c: 23 3c b4 f8  	sd	a1, -0x68(s0)
;             let pos = get_block_cache(
8022a840: 03 36 84 f9  	ld	a2, -0x68(s0)
8022a844: 81 45        	li	a1, 0x0
8022a846: 97 70 ff ff  	auipc	ra, 0xffff7
8022a84a: e7 80 60 de  	jalr	-0x21a(ra) <ekernel+0xffcd462c>
8022a84e: 2a 86        	mv	a2, a0
8022a850: 03 35 84 ee  	ld	a0, -0x118(s0)
8022a854: 23 34 c4 f6  	sd	a2, -0x98(s0)
8022a858: 23 38 b4 f6  	sd	a1, -0x90(s0)
;             });
8022a85c: 97 30 ff ff  	auipc	ra, 0xffff3
8022a860: e7 80 a0 23  	jalr	0x23a(ra) <ekernel+0xffcd0a96>
8022a864: 13 05 04 f9  	addi	a0, s0, -0x70
8022a868: 97 30 ff ff  	auipc	ra, 0xffff3
8022a86c: e7 80 60 ec  	jalr	-0x13a(ra) <ekernel+0xffcd072e>
8022a870: 13 05 84 f6  	addi	a0, s0, -0x98
;             if pos.is_some() {
8022a874: 97 c0 ff ff  	auipc	ra, 0xffffc
8022a878: e7 80 e0 c5  	jalr	-0x3a2(ra) <ekernel+0xffcd94d2>
8022a87c: 19 ed        	bnez	a0, 0x8022a89a <.Lpcrel_hi1+0x12>
8022a87e: 51 bd        	j	0x8022a712 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0x3e>

000000008022a880 <.Lpcrel_hi0>:
;                 block_id + self.start_block_id as usize,
8022a880: 17 05 01 00  	auipc	a0, 0x10
8022a884: 13 05 05 a6  	addi	a0, a0, -0x5a0

000000008022a888 <.Lpcrel_hi1>:
8022a888: 97 05 01 00  	auipc	a1, 0x10
8022a88c: 13 86 05 a4  	addi	a2, a1, -0x5c0
8022a890: f1 45        	li	a1, 0x1c
8022a892: 97 60 00 00  	auipc	ra, 0x6
8022a896: e7 80 60 98  	jalr	-0x67a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;                 return pos;
8022a89a: 83 35 84 f6  	ld	a1, -0x98(s0)
8022a89e: 03 35 04 f7  	ld	a0, -0x90(s0)
8022a8a2: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8022a8a6: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;     }
8022a8aa: 6d b5        	j	0x8022a754 <_ZN7easy_fs6bitmap6Bitmap5alloc17h31de079d9b78c895E+0x80>

000000008022a8ac <_ZN7easy_fs6bitmap6Bitmap7dealloc17hea8e70db31b6a23aE>:
;     pub fn dealloc(&self, block_device: &Arc<dyn BlockDevice>, bit: usize) {
8022a8ac: 6d 71        	addi	sp, sp, -0x110
8022a8ae: 06 e6        	sd	ra, 0x108(sp)
8022a8b0: 22 e2        	sd	s0, 0x100(sp)
8022a8b2: 00 0a        	addi	s0, sp, 0x110
8022a8b4: 23 3c c4 f0  	sd	a2, -0xe8(s0)
8022a8b8: 2e 86        	mv	a2, a1
8022a8ba: 83 35 84 f1  	ld	a1, -0xe8(s0)
8022a8be: 23 30 c4 f2  	sd	a2, -0xe0(s0)
8022a8c2: 2a 86        	mv	a2, a0
8022a8c4: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022a8c8: 23 34 c4 f2  	sd	a2, -0xd8(s0)
8022a8cc: 23 38 c4 f8  	sd	a2, -0x70(s0)
8022a8d0: 23 3c a4 f8  	sd	a0, -0x68(s0)
8022a8d4: 23 30 b4 fa  	sd	a1, -0x60(s0)
8022a8d8: 13 05 84 f4  	addi	a0, s0, -0xb8
;         let (block_pos, bits64_pos, inner_pos) = decomposition(bit);
8022a8dc: 97 00 00 00  	auipc	ra, 0x0
8022a8e0: e7 80 80 d8  	jalr	-0x278(ra) <_ZN7easy_fs6bitmap13decomposition17h1e6167c7ee31ac70E>
8022a8e4: 03 35 84 f2  	ld	a0, -0xd8(s0)
8022a8e8: 83 35 84 f4  	ld	a1, -0xb8(s0)
8022a8ec: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022a8f0: 03 36 04 f5  	ld	a2, -0xb0(s0)
8022a8f4: 23 3c c4 f2  	sd	a2, -0xc8(s0)
8022a8f8: 03 36 84 f5  	ld	a2, -0xa8(s0)
8022a8fc: 23 30 c4 f4  	sd	a2, -0xc0(s0)
;         get_block_cache(block_pos + self.start_block_id, Arc::clone(block_device))
8022a900: 08 61        	ld	a0, 0x0(a0)
8022a902: 2e 95        	add	a0, a0, a1
8022a904: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8022a908: 63 6e b5 10  	bltu	a0, a1, 0x8022aa24 <.Lpcrel_hi2>
8022a90c: 09 a0        	j	0x8022a90e <_ZN7easy_fs6bitmap6Bitmap7dealloc17hea8e70db31b6a23aE+0x62>
8022a90e: 03 35 04 f2  	ld	a0, -0xe0(s0)
;         get_block_cache(block_pos + self.start_block_id, Arc::clone(block_device))
8022a912: 97 20 ff ff  	auipc	ra, 0xffff2
8022a916: e7 80 e0 7c  	jalr	0x7ce(ra) <ekernel+0xffcd00e0>
8022a91a: 2a 86        	mv	a2, a0
8022a91c: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022a920: 23 30 c4 f0  	sd	a2, -0x100(s0)
8022a924: 2e 86        	mv	a2, a1
8022a926: 83 35 04 f0  	ld	a1, -0x100(s0)
8022a92a: 97 b0 ff ff  	auipc	ra, 0xffffb
8022a92e: e7 80 a0 4d  	jalr	0x4da(ra) <ekernel+0xffcd8e04>
8022a932: 23 3c a4 f6  	sd	a0, -0x88(s0)
8022a936: 13 05 84 f7  	addi	a0, s0, -0x88
8022a93a: 97 30 ff ff  	auipc	ra, 0xffff3
8022a93e: e7 80 a0 84  	jalr	-0x7b6(ra) <ekernel+0xffcd0184>
8022a942: aa 85        	mv	a1, a0
8022a944: 23 34 b4 f0  	sd	a1, -0xf8(s0)
8022a948: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022a94c: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022a950: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8022a952: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8022a956: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8022a95a: 85 45        	li	a1, 0x1
8022a95c: 97 50 ff ff  	auipc	ra, 0xffff5
8022a960: e7 80 a0 84  	jalr	-0x7b6(ra) <ekernel+0xffcd21a6>
8022a964: aa 85        	mv	a1, a0
8022a966: 23 38 b4 f0  	sd	a1, -0xf0(s0)
8022a96a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022a96e: 09 a0        	j	0x8022a970 <_ZN7easy_fs6bitmap6Bitmap7dealloc17hea8e70db31b6a23aE+0xc4>
8022a970: 03 35 84 f0  	ld	a0, -0xf8(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8022a974: 21 05        	addi	a0, a0, 0x8
8022a976: 89 45        	li	a1, 0x2
8022a978: a3 0b b4 fc  	sb	a1, -0x29(s0)
8022a97c: 83 45 74 fd  	lbu	a1, -0x29(s0)
8022a980: 97 40 ff ff  	auipc	ra, 0xffff4
8022a984: e7 80 a0 7d  	jalr	0x7da(ra) <ekernel+0xffcd215a>
8022a988: 83 35 04 f1  	ld	a1, -0xf0(s0)
8022a98c: 63 08 b5 00  	beq	a0, a1, 0x8022a99c <_ZN7easy_fs6bitmap6Bitmap7dealloc17hea8e70db31b6a23aE+0xf0>
8022a990: 09 a0        	j	0x8022a992 <_ZN7easy_fs6bitmap6Bitmap7dealloc17hea8e70db31b6a23aE+0xe6>
;             crate::relax();
8022a992: 97 50 ff ff  	auipc	ra, 0xffff5
8022a996: e7 80 c0 8b  	jalr	-0x744(ra) <ekernel+0xffcd224e>
8022a99a: d9 bf        	j	0x8022a970 <_ZN7easy_fs6bitmap6Bitmap7dealloc17hea8e70db31b6a23aE+0xc4>
8022a99c: 83 35 04 f1  	ld	a1, -0xf0(s0)
8022a9a0: 03 35 84 f0  	ld	a0, -0xf8(s0)
;             next_serving: &self.next_serving,
8022a9a4: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8022a9a8: 41 05        	addi	a0, a0, 0x10
8022a9aa: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8022a9ae: 23 38 c4 fa  	sd	a2, -0x50(s0)
8022a9b2: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022a9b6: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8022a9ba: 03 35 04 fc  	ld	a0, -0x40(s0)
8022a9be: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022a9c2: 03 35 84 fb  	ld	a0, -0x48(s0)
8022a9c6: 23 34 a4 f6  	sd	a0, -0x98(s0)
8022a9ca: 03 35 04 fb  	ld	a0, -0x50(s0)
8022a9ce: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8022a9d2: 13 05 04 f6  	addi	a0, s0, -0xa0
8022a9d6: 23 3c a4 ee  	sd	a0, -0x108(s0)
;         get_block_cache(block_pos + self.start_block_id, Arc::clone(block_device))
8022a9da: 97 80 ff ff  	auipc	ra, 0xffff8
8022a9de: e7 80 80 c9  	jalr	-0x368(ra) <ekernel+0xffcd5672>
8022a9e2: 93 05 84 f3  	addi	a1, s0, -0xc8
;             .modify(0, |bitmap_block: &mut BitmapBlock| {
8022a9e6: 23 30 b4 f8  	sd	a1, -0x80(s0)
8022a9ea: 93 05 04 f4  	addi	a1, s0, -0xc0
8022a9ee: 23 34 b4 f8  	sd	a1, -0x78(s0)
;         get_block_cache(block_pos + self.start_block_id, Arc::clone(block_device))
8022a9f2: 03 36 04 f8  	ld	a2, -0x80(s0)
8022a9f6: 83 36 84 f8  	ld	a3, -0x78(s0)
8022a9fa: 81 45        	li	a1, 0x0
8022a9fc: 97 70 ff ff  	auipc	ra, 0xffff7
8022aa00: e7 80 e0 e0  	jalr	-0x1f2(ra) <ekernel+0xffcd480a>
8022aa04: 03 35 84 ef  	ld	a0, -0x108(s0)
;             });
8022aa08: 97 30 ff ff  	auipc	ra, 0xffff3
8022aa0c: e7 80 e0 08  	jalr	0x8e(ra) <ekernel+0xffcd0a96>
8022aa10: 13 05 84 f7  	addi	a0, s0, -0x88
8022aa14: 97 30 ff ff  	auipc	ra, 0xffff3
8022aa18: e7 80 a0 d1  	jalr	-0x2e6(ra) <ekernel+0xffcd072e>
8022aa1c: b2 60        	ld	ra, 0x108(sp)
8022aa1e: 12 64        	ld	s0, 0x100(sp)
;     }
8022aa20: 51 61        	addi	sp, sp, 0x110
8022aa22: 82 80        	ret

000000008022aa24 <.Lpcrel_hi2>:
;         get_block_cache(block_pos + self.start_block_id, Arc::clone(block_device))
8022aa24: 17 05 01 00  	auipc	a0, 0x10
8022aa28: 13 05 c5 8b  	addi	a0, a0, -0x744

000000008022aa2c <.Lpcrel_hi3>:
8022aa2c: 97 05 01 00  	auipc	a1, 0x10
8022aa30: 13 86 45 8d  	addi	a2, a1, -0x72c
8022aa34: f1 45        	li	a1, 0x1c
8022aa36: 97 50 00 00  	auipc	ra, 0x5
8022aa3a: e7 80 20 7e  	jalr	0x7e2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022aa3e <_ZN4core5slice5index5range17h17dae68659a7e963E>:
; pub fn range<R>(range: R, bounds: ops::RangeTo<usize>) -> ops::Range<usize>
8022aa3e: 0d 71        	addi	sp, sp, -0x160
8022aa40: 86 ee        	sd	ra, 0x158(sp)
8022aa42: a2 ea        	sd	s0, 0x150(sp)
8022aa44: 80 12        	addi	s0, sp, 0x160
8022aa46: 23 3c b4 ea  	sd	a1, -0x148(s0)
8022aa4a: 23 30 a4 ec  	sd	a0, -0x140(s0)
8022aa4e: 85 45        	li	a1, 0x1
;     uint_impl! {
8022aa50: 23 38 b4 ec  	sd	a1, -0x130(s0)
8022aa54: 23 3c b4 ec  	sd	a1, -0x128(s0)
8022aa58: 23 34 b4 ee  	sd	a1, -0x118(s0)
8022aa5c: 23 38 b4 ee  	sd	a1, -0x110(s0)
;     pub fn unwrap_or_else<F>(self, f: F) -> T
8022aa60: 23 30 a4 f6  	sd	a0, -0xa0(s0)
;     let len = bounds.end;
8022aa64: 23 34 a4 f6  	sd	a0, -0x98(s0)
8022aa68: 13 05 f4 ef  	addi	a0, s0, -0x101
;     let start = match range.start_bound() {
8022aa6c: 97 50 ff ff  	auipc	ra, 0xffff5
8022aa70: e7 80 20 c6  	jalr	-0x39e(ra) <ekernel+0xffcd26ce>
8022aa74: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8022aa78: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8022aa7c: 03 35 84 f1  	ld	a0, -0xe8(s0)
8022aa80: 23 34 a4 ec  	sd	a0, -0x138(s0)
8022aa84: 11 c9        	beqz	a0, 0x8022aa98 <_ZN4core5slice5index5range17h17dae68659a7e963E+0x5a>
8022aa86: 09 a0        	j	0x8022aa88 <_ZN4core5slice5index5range17h17dae68659a7e963E+0x4a>
8022aa88: 03 35 84 ec  	ld	a0, -0x138(s0)
8022aa8c: 85 45        	li	a1, 0x1
;     let start = match range.start_bound() {
8022aa8e: 63 0d b5 00  	beq	a0, a1, 0x8022aaa8 <_ZN4core5slice5index5range17h17dae68659a7e963E+0x6a>
8022aa92: 09 a0        	j	0x8022aa94 <_ZN4core5slice5index5range17h17dae68659a7e963E+0x56>
8022aa94: a1 a0        	j	0x8022aadc <_ZN4core5slice5index5range17h17dae68659a7e963E+0x9e>
8022aa96: 00 00        	unimp
;         ops::Bound::Included(&start) => start,
8022aa98: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022aa9c: 08 61        	ld	a0, 0x0(a0)
8022aa9e: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022aaa2: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8022aaa6: 3d a8        	j	0x8022aae4 <_ZN4core5slice5index5range17h17dae68659a7e963E+0xa6>
;         ops::Bound::Excluded(start) => {
8022aaa8: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022aaac: 23 3c a4 f6  	sd	a0, -0x88(s0)
;             start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())
8022aab0: 08 61        	ld	a0, 0x0(a0)
8022aab2: 23 30 a4 f8  	sd	a0, -0x80(s0)
;     uint_impl! {
8022aab6: 93 05 15 00  	addi	a1, a0, 0x1
8022aaba: 23 38 b4 ea  	sd	a1, -0x150(s0)
8022aabe: 13 b5 15 00  	seqz	a0, a1
8022aac2: 23 34 b4 f8  	sd	a1, -0x78(s0)
8022aac6: a3 0b a4 f8  	sb	a0, -0x69(s0)
8022aaca: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022aace: a3 03 a4 fa  	sb	a0, -0x59(s0)
8022aad2: 03 45 74 fa  	lbu	a0, -0x59(s0)
8022aad6: 05 89        	andi	a0, a0, 0x1
8022aad8: 39 e9        	bnez	a0, 0x8022ab2e <.Lpcrel_hi0>
8022aada: 25 a8        	j	0x8022ab12 <_ZN4core5slice5index5range17h17dae68659a7e963E+0xd4>
8022aadc: 01 45        	li	a0, 0x0
;         ops::Bound::Unbounded => 0,
8022aade: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8022aae2: 09 a0        	j	0x8022aae4 <_ZN4core5slice5index5range17h17dae68659a7e963E+0xa6>
8022aae4: 13 05 f4 ef  	addi	a0, s0, -0x101
;     let end = match range.end_bound() {
8022aae8: 97 50 ff ff  	auipc	ra, 0xffff5
8022aaec: e7 80 80 c0  	jalr	-0x3f8(ra) <ekernel+0xffcd26f0>
8022aaf0: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022aaf4: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8022aaf8: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022aafc: 23 34 a4 ea  	sd	a0, -0x158(s0)
8022ab00: 29 c9        	beqz	a0, 0x8022ab52 <.Lpcrel_hi1+0x10>
8022ab02: 09 a0        	j	0x8022ab04 <_ZN4core5slice5index5range17h17dae68659a7e963E+0xc6>
8022ab04: 03 35 84 ea  	ld	a0, -0x158(s0)
8022ab08: 85 45        	li	a1, 0x1
;     let end = match range.end_bound() {
8022ab0a: 63 0e b5 06  	beq	a0, a1, 0x8022ab86 <.Lpcrel_hi1+0x44>
8022ab0e: 09 a0        	j	0x8022ab10 <_ZN4core5slice5index5range17h17dae68659a7e963E+0xd2>
8022ab10: 59 a0        	j	0x8022ab96 <.Lpcrel_hi1+0x54>
8022ab12: 03 35 04 eb  	ld	a0, -0x150(s0)
;     uint_impl! {
8022ab16: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8022ab1a: 05 45        	li	a0, 0x1
8022ab1c: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;             Some(x) => x,
8022ab20: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022ab24: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022ab28: 23 38 a4 f0  	sd	a0, -0xf0(s0)
;         }
8022ab2c: 65 bf        	j	0x8022aae4 <_ZN4core5slice5index5range17h17dae68659a7e963E+0xa6>

000000008022ab2e <.Lpcrel_hi0>:
;     uint_impl! {
8022ab2e: 17 85 00 00  	auipc	a0, 0x8
8022ab32: 13 05 25 76  	addi	a0, a0, 0x762
8022ab36: 0c 61        	ld	a1, 0x0(a0)
8022ab38: 08 65        	ld	a0, 0x8(a0)
8022ab3a: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8022ab3e: 23 38 a4 f2  	sd	a0, -0xd0(s0)

000000008022ab42 <.Lpcrel_hi1>:
;             start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())
8022ab42: 17 05 01 00  	auipc	a0, 0x10
8022ab46: 13 05 e5 84  	addi	a0, a0, -0x7b2
8022ab4a: 97 70 00 00  	auipc	ra, 0x7
8022ab4e: e7 80 e0 bd  	jalr	-0x422(ra) <_ZN4core5slice5index31slice_start_index_overflow_fail17h85c10391efa3df9fE>
;         ops::Bound::Included(end) => {
8022ab52: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022ab56: 23 38 a4 fa  	sd	a0, -0x50(s0)
;             end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
8022ab5a: 08 61        	ld	a0, 0x0(a0)
8022ab5c: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     uint_impl! {
8022ab60: 93 05 15 00  	addi	a1, a0, 0x1
8022ab64: 23 30 b4 ea  	sd	a1, -0x160(s0)
8022ab68: 13 b5 15 00  	seqz	a0, a1
8022ab6c: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022ab70: a3 07 a4 fc  	sb	a0, -0x31(s0)
8022ab74: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022ab78: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022ab7c: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8022ab80: 05 89        	andi	a0, a0, 0x1
8022ab82: 0d ed        	bnez	a0, 0x8022abbc <.Lpcrel_hi2>
8022ab84: 31 a8        	j	0x8022aba0 <.Lpcrel_hi1+0x5e>
;         ops::Bound::Excluded(&end) => end,
8022ab86: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022ab8a: 08 61        	ld	a0, 0x0(a0)
8022ab8c: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022ab90: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022ab94: b1 a0        	j	0x8022abe0 <.Lpcrel_hi3+0x10>
8022ab96: 03 35 04 ec  	ld	a0, -0x140(s0)
;         ops::Bound::Unbounded => len,
8022ab9a: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022ab9e: 89 a0        	j	0x8022abe0 <.Lpcrel_hi3+0x10>
8022aba0: 03 35 04 ea  	ld	a0, -0x160(s0)
;     uint_impl! {
8022aba4: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8022aba8: 05 45        	li	a0, 0x1
8022abaa: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;             Some(x) => x,
8022abae: 03 35 84 f5  	ld	a0, -0xa8(s0)
8022abb2: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022abb6: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         }
8022abba: 1d a0        	j	0x8022abe0 <.Lpcrel_hi3+0x10>

000000008022abbc <.Lpcrel_hi2>:
;     uint_impl! {
8022abbc: 17 85 00 00  	auipc	a0, 0x8
8022abc0: 13 05 45 6d  	addi	a0, a0, 0x6d4
8022abc4: 0c 61        	ld	a1, 0x0(a0)
8022abc6: 08 65        	ld	a0, 0x8(a0)
8022abc8: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8022abcc: 23 3c a4 f4  	sd	a0, -0xa8(s0)

000000008022abd0 <.Lpcrel_hi3>:
;             end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
8022abd0: 17 f5 00 00  	auipc	a0, 0xf
8022abd4: 13 05 85 7d  	addi	a0, a0, 0x7d8
8022abd8: 97 70 00 00  	auipc	ra, 0x7
8022abdc: e7 80 a0 b7  	jalr	-0x486(ra) <_ZN4core5slice5index29slice_end_index_overflow_fail17h45f808951b1a1b78E>
;     if start > end {
8022abe0: 83 35 04 f1  	ld	a1, -0xf0(s0)
8022abe4: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022abe8: 63 6a b5 00  	bltu	a0, a1, 0x8022abfc <.Lpcrel_hi3+0x2c>
8022abec: 09 a0        	j	0x8022abee <.Lpcrel_hi3+0x1e>
8022abee: 03 35 04 ec  	ld	a0, -0x140(s0)
;     if end > len {
8022abf2: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022abf6: 63 6d b5 02  	bltu	a0, a1, 0x8022ac30 <.Lpcrel_hi3+0x60>
8022abfa: 19 a8        	j	0x8022ac10 <.Lpcrel_hi3+0x40>
8022abfc: 03 36 84 eb  	ld	a2, -0x148(s0)
;         slice_index_order_fail(start, end);
8022ac00: 03 35 04 f1  	ld	a0, -0xf0(s0)
8022ac04: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022ac08: 97 70 00 00  	auipc	ra, 0x7
8022ac0c: e7 80 c0 ad  	jalr	-0x524(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
;     ops::Range { start, end }
8022ac10: 83 35 04 f1  	ld	a1, -0xf0(s0)
8022ac14: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022ac18: 23 30 b4 f0  	sd	a1, -0x100(s0)
8022ac1c: 23 34 a4 f0  	sd	a0, -0xf8(s0)
; }
8022ac20: 03 35 04 f0  	ld	a0, -0x100(s0)
8022ac24: 83 35 84 f0  	ld	a1, -0xf8(s0)
8022ac28: f6 60        	ld	ra, 0x158(sp)
8022ac2a: 56 64        	ld	s0, 0x150(sp)
8022ac2c: 35 61        	addi	sp, sp, 0x160
8022ac2e: 82 80        	ret
8022ac30: 03 36 84 eb  	ld	a2, -0x148(s0)
8022ac34: 83 35 04 ec  	ld	a1, -0x140(s0)
;         slice_end_index_len_fail(end, len);
8022ac38: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022ac3c: 97 70 00 00  	auipc	ra, 0x7
8022ac40: e7 80 40 a6  	jalr	-0x59c(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>

000000008022ac44 <_ZN4core5slice5index5range17h2ca5b15cd75b9964E>:
; pub fn range<R>(range: R, bounds: ops::RangeTo<usize>) -> ops::Range<usize>
8022ac44: 49 71        	addi	sp, sp, -0x170
8022ac46: 86 f6        	sd	ra, 0x168(sp)
8022ac48: a2 f2        	sd	s0, 0x160(sp)
8022ac4a: 80 1a        	addi	s0, sp, 0x170
8022ac4c: 23 38 c4 ea  	sd	a2, -0x150(s0)
8022ac50: 23 3c b4 ea  	sd	a1, -0x148(s0)
8022ac54: 23 30 a4 ec  	sd	a0, -0x140(s0)
8022ac58: 05 46        	li	a2, 0x1
;     uint_impl! {
8022ac5a: 23 38 c4 ec  	sd	a2, -0x130(s0)
8022ac5e: 23 3c c4 ec  	sd	a2, -0x128(s0)
8022ac62: 23 34 c4 ee  	sd	a2, -0x118(s0)
8022ac66: 23 38 c4 ee  	sd	a2, -0x110(s0)
;     pub fn unwrap_or_else<F>(self, f: F) -> T
8022ac6a: 23 30 b4 f6  	sd	a1, -0xa0(s0)
;     let len = bounds.end;
8022ac6e: 23 34 b4 f6  	sd	a1, -0x98(s0)
;     let start = match range.start_bound() {
8022ac72: 97 40 ff ff  	auipc	ra, 0xffff4
8022ac76: e7 80 00 5f  	jalr	0x5f0(ra) <ekernel+0xffcd2262>
8022ac7a: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8022ac7e: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8022ac82: 03 35 84 f1  	ld	a0, -0xe8(s0)
8022ac86: 23 34 a4 ec  	sd	a0, -0x138(s0)
8022ac8a: 11 c9        	beqz	a0, 0x8022ac9e <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0x5a>
8022ac8c: 09 a0        	j	0x8022ac8e <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0x4a>
8022ac8e: 03 35 84 ec  	ld	a0, -0x138(s0)
8022ac92: 85 45        	li	a1, 0x1
;     let start = match range.start_bound() {
8022ac94: 63 0d b5 00  	beq	a0, a1, 0x8022acae <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0x6a>
8022ac98: 09 a0        	j	0x8022ac9a <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0x56>
8022ac9a: a1 a0        	j	0x8022ace2 <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0x9e>
8022ac9c: 00 00        	unimp
;         ops::Bound::Included(&start) => start,
8022ac9e: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022aca2: 08 61        	ld	a0, 0x0(a0)
8022aca4: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022aca8: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8022acac: 3d a8        	j	0x8022acea <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0xa6>
;         ops::Bound::Excluded(start) => {
8022acae: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022acb2: 23 3c a4 f6  	sd	a0, -0x88(s0)
;             start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())
8022acb6: 08 61        	ld	a0, 0x0(a0)
8022acb8: 23 30 a4 f8  	sd	a0, -0x80(s0)
;     uint_impl! {
8022acbc: 93 05 15 00  	addi	a1, a0, 0x1
8022acc0: 23 34 b4 ea  	sd	a1, -0x158(s0)
8022acc4: 13 b5 15 00  	seqz	a0, a1
8022acc8: 23 34 b4 f8  	sd	a1, -0x78(s0)
8022accc: a3 0b a4 f8  	sb	a0, -0x69(s0)
8022acd0: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022acd4: a3 03 a4 fa  	sb	a0, -0x59(s0)
8022acd8: 03 45 74 fa  	lbu	a0, -0x59(s0)
8022acdc: 05 89        	andi	a0, a0, 0x1
8022acde: 39 e9        	bnez	a0, 0x8022ad34 <.Lpcrel_hi4>
8022ace0: 25 a8        	j	0x8022ad18 <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0xd4>
8022ace2: 01 45        	li	a0, 0x0
;         ops::Bound::Unbounded => 0,
8022ace4: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8022ace8: 09 a0        	j	0x8022acea <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0xa6>
8022acea: 03 35 04 ec  	ld	a0, -0x140(s0)
;     let end = match range.end_bound() {
8022acee: 97 40 ff ff  	auipc	ra, 0xffff4
8022acf2: e7 80 a0 59  	jalr	0x59a(ra) <ekernel+0xffcd2288>
8022acf6: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022acfa: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8022acfe: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022ad02: 23 30 a4 ea  	sd	a0, -0x160(s0)
8022ad06: 29 c9        	beqz	a0, 0x8022ad58 <.Lpcrel_hi5+0x10>
8022ad08: 09 a0        	j	0x8022ad0a <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0xc6>
8022ad0a: 03 35 04 ea  	ld	a0, -0x160(s0)
8022ad0e: 85 45        	li	a1, 0x1
;     let end = match range.end_bound() {
8022ad10: 63 0e b5 06  	beq	a0, a1, 0x8022ad8c <.Lpcrel_hi5+0x44>
8022ad14: 09 a0        	j	0x8022ad16 <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0xd2>
8022ad16: 59 a0        	j	0x8022ad9c <.Lpcrel_hi5+0x54>
8022ad18: 03 35 84 ea  	ld	a0, -0x158(s0)
;     uint_impl! {
8022ad1c: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8022ad20: 05 45        	li	a0, 0x1
8022ad22: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;             Some(x) => x,
8022ad26: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022ad2a: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022ad2e: 23 38 a4 f0  	sd	a0, -0xf0(s0)
;         }
8022ad32: 65 bf        	j	0x8022acea <_ZN4core5slice5index5range17h2ca5b15cd75b9964E+0xa6>

000000008022ad34 <.Lpcrel_hi4>:
;     uint_impl! {
8022ad34: 17 85 00 00  	auipc	a0, 0x8
8022ad38: 13 05 c5 55  	addi	a0, a0, 0x55c
8022ad3c: 0c 61        	ld	a1, 0x0(a0)
8022ad3e: 08 65        	ld	a0, 0x8(a0)
8022ad40: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8022ad44: 23 38 a4 f2  	sd	a0, -0xd0(s0)

000000008022ad48 <.Lpcrel_hi5>:
;             start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())
8022ad48: 17 f5 00 00  	auipc	a0, 0xf
8022ad4c: 13 05 85 64  	addi	a0, a0, 0x648
8022ad50: 97 70 00 00  	auipc	ra, 0x7
8022ad54: e7 80 80 9d  	jalr	-0x628(ra) <_ZN4core5slice5index31slice_start_index_overflow_fail17h85c10391efa3df9fE>
;         ops::Bound::Included(end) => {
8022ad58: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022ad5c: 23 38 a4 fa  	sd	a0, -0x50(s0)
;             end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
8022ad60: 08 61        	ld	a0, 0x0(a0)
8022ad62: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     uint_impl! {
8022ad66: 93 05 15 00  	addi	a1, a0, 0x1
8022ad6a: 23 3c b4 e8  	sd	a1, -0x168(s0)
8022ad6e: 13 b5 15 00  	seqz	a0, a1
8022ad72: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022ad76: a3 07 a4 fc  	sb	a0, -0x31(s0)
8022ad7a: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022ad7e: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022ad82: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8022ad86: 05 89        	andi	a0, a0, 0x1
8022ad88: 0d ed        	bnez	a0, 0x8022adc2 <.Lpcrel_hi6>
8022ad8a: 31 a8        	j	0x8022ada6 <.Lpcrel_hi5+0x5e>
;         ops::Bound::Excluded(&end) => end,
8022ad8c: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022ad90: 08 61        	ld	a0, 0x0(a0)
8022ad92: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022ad96: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022ad9a: b1 a0        	j	0x8022ade6 <.Lpcrel_hi7+0x10>
8022ad9c: 03 35 84 eb  	ld	a0, -0x148(s0)
;         ops::Bound::Unbounded => len,
8022ada0: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022ada4: 89 a0        	j	0x8022ade6 <.Lpcrel_hi7+0x10>
8022ada6: 03 35 84 e9  	ld	a0, -0x168(s0)
;     uint_impl! {
8022adaa: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8022adae: 05 45        	li	a0, 0x1
8022adb0: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;             Some(x) => x,
8022adb4: 03 35 84 f5  	ld	a0, -0xa8(s0)
8022adb8: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022adbc: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         }
8022adc0: 1d a0        	j	0x8022ade6 <.Lpcrel_hi7+0x10>

000000008022adc2 <.Lpcrel_hi6>:
;     uint_impl! {
8022adc2: 17 85 00 00  	auipc	a0, 0x8
8022adc6: 13 05 e5 4c  	addi	a0, a0, 0x4ce
8022adca: 0c 61        	ld	a1, 0x0(a0)
8022adcc: 08 65        	ld	a0, 0x8(a0)
8022adce: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8022add2: 23 3c a4 f4  	sd	a0, -0xa8(s0)

000000008022add6 <.Lpcrel_hi7>:
;             end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
8022add6: 17 f5 00 00  	auipc	a0, 0xf
8022adda: 13 05 25 5d  	addi	a0, a0, 0x5d2
8022adde: 97 70 00 00  	auipc	ra, 0x7
8022ade2: e7 80 40 97  	jalr	-0x68c(ra) <_ZN4core5slice5index29slice_end_index_overflow_fail17h45f808951b1a1b78E>
;     if start > end {
8022ade6: 83 35 04 f1  	ld	a1, -0xf0(s0)
8022adea: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022adee: 63 6a b5 00  	bltu	a0, a1, 0x8022ae02 <.Lpcrel_hi7+0x2c>
8022adf2: 09 a0        	j	0x8022adf4 <.Lpcrel_hi7+0x1e>
8022adf4: 03 35 84 eb  	ld	a0, -0x148(s0)
;     if end > len {
8022adf8: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022adfc: 63 6d b5 02  	bltu	a0, a1, 0x8022ae36 <.Lpcrel_hi7+0x60>
8022ae00: 19 a8        	j	0x8022ae16 <.Lpcrel_hi7+0x40>
8022ae02: 03 36 04 eb  	ld	a2, -0x150(s0)
;         slice_index_order_fail(start, end);
8022ae06: 03 35 04 f1  	ld	a0, -0xf0(s0)
8022ae0a: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022ae0e: 97 70 00 00  	auipc	ra, 0x7
8022ae12: e7 80 60 8d  	jalr	-0x72a(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
;     ops::Range { start, end }
8022ae16: 83 35 04 f1  	ld	a1, -0xf0(s0)
8022ae1a: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022ae1e: 23 30 b4 f0  	sd	a1, -0x100(s0)
8022ae22: 23 34 a4 f0  	sd	a0, -0xf8(s0)
; }
8022ae26: 03 35 04 f0  	ld	a0, -0x100(s0)
8022ae2a: 83 35 84 f0  	ld	a1, -0xf8(s0)
8022ae2e: b6 70        	ld	ra, 0x168(sp)
8022ae30: 16 74        	ld	s0, 0x160(sp)
8022ae32: 75 61        	addi	sp, sp, 0x170
8022ae34: 82 80        	ret
8022ae36: 03 36 04 eb  	ld	a2, -0x150(s0)
8022ae3a: 83 35 84 eb  	ld	a1, -0x148(s0)
;         slice_end_index_len_fail(end, len);
8022ae3e: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022ae42: 97 70 00 00  	auipc	ra, 0x7
8022ae46: e7 80 e0 85  	jalr	-0x7a2(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>

000000008022ae4a <_ZN4core5slice5index5range17h48214a4bb692409fE>:
; pub fn range<R>(range: R, bounds: ops::RangeTo<usize>) -> ops::Range<usize>
8022ae4a: 49 71        	addi	sp, sp, -0x170
8022ae4c: 86 f6        	sd	ra, 0x168(sp)
8022ae4e: a2 f2        	sd	s0, 0x160(sp)
8022ae50: 80 1a        	addi	s0, sp, 0x170
8022ae52: 23 34 d4 ea  	sd	a3, -0x158(s0)
8022ae56: 23 38 c4 ea  	sd	a2, -0x150(s0)
8022ae5a: 85 46        	li	a3, 0x1
;     uint_impl! {
8022ae5c: 23 30 d4 ec  	sd	a3, -0x140(s0)
8022ae60: 23 34 d4 ec  	sd	a3, -0x138(s0)
8022ae64: 23 3c d4 ec  	sd	a3, -0x128(s0)
8022ae68: 23 30 d4 ee  	sd	a3, -0x120(s0)
;     pub fn unwrap_or_else<F>(self, f: F) -> T
8022ae6c: 23 38 a4 ee  	sd	a0, -0x110(s0)
8022ae70: 23 3c b4 ee  	sd	a1, -0x108(s0)
8022ae74: 23 30 c4 f6  	sd	a2, -0xa0(s0)
;     let len = bounds.end;
8022ae78: 23 34 c4 f6  	sd	a2, -0x98(s0)
8022ae7c: 13 05 04 ef  	addi	a0, s0, -0x110
;     let start = match range.start_bound() {
8022ae80: 97 50 ff ff  	auipc	ra, 0xffff5
8022ae84: e7 80 e0 97  	jalr	-0x682(ra) <ekernel+0xffcd27fe>
8022ae88: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8022ae8c: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8022ae90: 03 35 84 f1  	ld	a0, -0xe8(s0)
8022ae94: 23 3c a4 ea  	sd	a0, -0x148(s0)
8022ae98: 11 c9        	beqz	a0, 0x8022aeac <_ZN4core5slice5index5range17h48214a4bb692409fE+0x62>
8022ae9a: 09 a0        	j	0x8022ae9c <_ZN4core5slice5index5range17h48214a4bb692409fE+0x52>
8022ae9c: 03 35 84 eb  	ld	a0, -0x148(s0)
8022aea0: 85 45        	li	a1, 0x1
;     let start = match range.start_bound() {
8022aea2: 63 0d b5 00  	beq	a0, a1, 0x8022aebc <_ZN4core5slice5index5range17h48214a4bb692409fE+0x72>
8022aea6: 09 a0        	j	0x8022aea8 <_ZN4core5slice5index5range17h48214a4bb692409fE+0x5e>
8022aea8: a1 a0        	j	0x8022aef0 <_ZN4core5slice5index5range17h48214a4bb692409fE+0xa6>
8022aeaa: 00 00        	unimp
;         ops::Bound::Included(&start) => start,
8022aeac: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022aeb0: 08 61        	ld	a0, 0x0(a0)
8022aeb2: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022aeb6: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8022aeba: 3d a8        	j	0x8022aef8 <_ZN4core5slice5index5range17h48214a4bb692409fE+0xae>
;         ops::Bound::Excluded(start) => {
8022aebc: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022aec0: 23 3c a4 f6  	sd	a0, -0x88(s0)
;             start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())
8022aec4: 08 61        	ld	a0, 0x0(a0)
8022aec6: 23 30 a4 f8  	sd	a0, -0x80(s0)
;     uint_impl! {
8022aeca: 93 05 15 00  	addi	a1, a0, 0x1
8022aece: 23 30 b4 ea  	sd	a1, -0x160(s0)
8022aed2: 13 b5 15 00  	seqz	a0, a1
8022aed6: 23 34 b4 f8  	sd	a1, -0x78(s0)
8022aeda: a3 0b a4 f8  	sb	a0, -0x69(s0)
8022aede: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022aee2: a3 03 a4 fa  	sb	a0, -0x59(s0)
8022aee6: 03 45 74 fa  	lbu	a0, -0x59(s0)
8022aeea: 05 89        	andi	a0, a0, 0x1
8022aeec: 39 e9        	bnez	a0, 0x8022af42 <.Lpcrel_hi8>
8022aeee: 25 a8        	j	0x8022af26 <_ZN4core5slice5index5range17h48214a4bb692409fE+0xdc>
8022aef0: 01 45        	li	a0, 0x0
;         ops::Bound::Unbounded => 0,
8022aef2: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8022aef6: 09 a0        	j	0x8022aef8 <_ZN4core5slice5index5range17h48214a4bb692409fE+0xae>
8022aef8: 13 05 04 ef  	addi	a0, s0, -0x110
;     let end = match range.end_bound() {
8022aefc: 97 50 ff ff  	auipc	ra, 0xffff5
8022af00: e7 80 80 92  	jalr	-0x6d8(ra) <ekernel+0xffcd2824>
8022af04: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022af08: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8022af0c: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022af10: 23 3c a4 e8  	sd	a0, -0x168(s0)
8022af14: 29 c9        	beqz	a0, 0x8022af66 <.Lpcrel_hi9+0x10>
8022af16: 09 a0        	j	0x8022af18 <_ZN4core5slice5index5range17h48214a4bb692409fE+0xce>
8022af18: 03 35 84 e9  	ld	a0, -0x168(s0)
8022af1c: 85 45        	li	a1, 0x1
;     let end = match range.end_bound() {
8022af1e: 63 0e b5 06  	beq	a0, a1, 0x8022af9a <.Lpcrel_hi9+0x44>
8022af22: 09 a0        	j	0x8022af24 <_ZN4core5slice5index5range17h48214a4bb692409fE+0xda>
8022af24: 59 a0        	j	0x8022afaa <.Lpcrel_hi9+0x54>
8022af26: 03 35 04 ea  	ld	a0, -0x160(s0)
;     uint_impl! {
8022af2a: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8022af2e: 05 45        	li	a0, 0x1
8022af30: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;             Some(x) => x,
8022af34: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022af38: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022af3c: 23 38 a4 f0  	sd	a0, -0xf0(s0)
;         }
8022af40: 65 bf        	j	0x8022aef8 <_ZN4core5slice5index5range17h48214a4bb692409fE+0xae>

000000008022af42 <.Lpcrel_hi8>:
;     uint_impl! {
8022af42: 17 85 00 00  	auipc	a0, 0x8
8022af46: 13 05 e5 34  	addi	a0, a0, 0x34e
8022af4a: 0c 61        	ld	a1, 0x0(a0)
8022af4c: 08 65        	ld	a0, 0x8(a0)
8022af4e: 23 34 b4 f2  	sd	a1, -0xd8(s0)
8022af52: 23 38 a4 f2  	sd	a0, -0xd0(s0)

000000008022af56 <.Lpcrel_hi9>:
;             start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())
8022af56: 17 f5 00 00  	auipc	a0, 0xf
8022af5a: 13 05 a5 43  	addi	a0, a0, 0x43a
8022af5e: 97 60 00 00  	auipc	ra, 0x6
8022af62: e7 80 a0 7c  	jalr	0x7ca(ra) <_ZN4core5slice5index31slice_start_index_overflow_fail17h85c10391efa3df9fE>
;         ops::Bound::Included(end) => {
8022af66: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022af6a: 23 38 a4 fa  	sd	a0, -0x50(s0)
;             end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
8022af6e: 08 61        	ld	a0, 0x0(a0)
8022af70: 23 3c a4 fa  	sd	a0, -0x48(s0)
;     uint_impl! {
8022af74: 93 05 15 00  	addi	a1, a0, 0x1
8022af78: 23 38 b4 e8  	sd	a1, -0x170(s0)
8022af7c: 13 b5 15 00  	seqz	a0, a1
8022af80: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022af84: a3 07 a4 fc  	sb	a0, -0x31(s0)
8022af88: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022af8c: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022af90: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8022af94: 05 89        	andi	a0, a0, 0x1
8022af96: 0d ed        	bnez	a0, 0x8022afd0 <.Lpcrel_hi10>
8022af98: 31 a8        	j	0x8022afb4 <.Lpcrel_hi9+0x5e>
;         ops::Bound::Excluded(&end) => end,
8022af9a: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022af9e: 08 61        	ld	a0, 0x0(a0)
8022afa0: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022afa4: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022afa8: b1 a0        	j	0x8022aff4 <.Lpcrel_hi11+0x10>
8022afaa: 03 35 04 eb  	ld	a0, -0x150(s0)
;         ops::Bound::Unbounded => len,
8022afae: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022afb2: 89 a0        	j	0x8022aff4 <.Lpcrel_hi11+0x10>
8022afb4: 03 35 04 e9  	ld	a0, -0x170(s0)
;     uint_impl! {
8022afb8: 23 3c a4 f4  	sd	a0, -0xa8(s0)
8022afbc: 05 45        	li	a0, 0x1
8022afbe: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;             Some(x) => x,
8022afc2: 03 35 84 f5  	ld	a0, -0xa8(s0)
8022afc6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022afca: 23 3c a4 f2  	sd	a0, -0xc8(s0)
;         }
8022afce: 1d a0        	j	0x8022aff4 <.Lpcrel_hi11+0x10>

000000008022afd0 <.Lpcrel_hi10>:
;     uint_impl! {
8022afd0: 17 85 00 00  	auipc	a0, 0x8
8022afd4: 13 05 05 2c  	addi	a0, a0, 0x2c0
8022afd8: 0c 61        	ld	a1, 0x0(a0)
8022afda: 08 65        	ld	a0, 0x8(a0)
8022afdc: 23 38 b4 f4  	sd	a1, -0xb0(s0)
8022afe0: 23 3c a4 f4  	sd	a0, -0xa8(s0)

000000008022afe4 <.Lpcrel_hi11>:
;             end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
8022afe4: 17 f5 00 00  	auipc	a0, 0xf
8022afe8: 13 05 45 3c  	addi	a0, a0, 0x3c4
8022afec: 97 60 00 00  	auipc	ra, 0x6
8022aff0: e7 80 60 76  	jalr	0x766(ra) <_ZN4core5slice5index29slice_end_index_overflow_fail17h45f808951b1a1b78E>
;     if start > end {
8022aff4: 83 35 04 f1  	ld	a1, -0xf0(s0)
8022aff8: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022affc: 63 6a b5 00  	bltu	a0, a1, 0x8022b010 <.Lpcrel_hi11+0x2c>
8022b000: 09 a0        	j	0x8022b002 <.Lpcrel_hi11+0x1e>
8022b002: 03 35 04 eb  	ld	a0, -0x150(s0)
;     if end > len {
8022b006: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022b00a: 63 6d b5 02  	bltu	a0, a1, 0x8022b044 <.Lpcrel_hi11+0x60>
8022b00e: 19 a8        	j	0x8022b024 <.Lpcrel_hi11+0x40>
8022b010: 03 36 84 ea  	ld	a2, -0x158(s0)
;         slice_index_order_fail(start, end);
8022b014: 03 35 04 f1  	ld	a0, -0xf0(s0)
8022b018: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022b01c: 97 60 00 00  	auipc	ra, 0x6
8022b020: e7 80 80 6c  	jalr	0x6c8(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
;     ops::Range { start, end }
8022b024: 83 35 04 f1  	ld	a1, -0xf0(s0)
8022b028: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022b02c: 23 30 b4 f0  	sd	a1, -0x100(s0)
8022b030: 23 34 a4 f0  	sd	a0, -0xf8(s0)
; }
8022b034: 03 35 04 f0  	ld	a0, -0x100(s0)
8022b038: 83 35 84 f0  	ld	a1, -0xf8(s0)
8022b03c: b6 70        	ld	ra, 0x168(sp)
8022b03e: 16 74        	ld	s0, 0x160(sp)
8022b040: 75 61        	addi	sp, sp, 0x170
8022b042: 82 80        	ret
8022b044: 03 36 84 ea  	ld	a2, -0x158(s0)
8022b048: 83 35 04 eb  	ld	a1, -0x150(s0)
;         slice_end_index_len_fail(end, len);
8022b04c: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022b050: 97 60 00 00  	auipc	ra, 0x6
8022b054: e7 80 00 65  	jalr	0x650(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>

000000008022b058 <_ZN4core4sync6atomic11AtomicUsize5store17hc40dfb2c082b09edE>:
;             pub fn store(&self, val: $int_type, order: Ordering) {
8022b058: 79 71        	addi	sp, sp, -0x30
8022b05a: 06 f4        	sd	ra, 0x28(sp)
8022b05c: 22 f0        	sd	s0, 0x20(sp)
8022b05e: 00 18        	addi	s0, sp, 0x30
8022b060: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022b064: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022b068: a3 03 c4 fe  	sb	a2, -0x19(s0)
;                 unsafe { atomic_store(self.v.get(), val, order); }
8022b06c: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022b070: 97 00 00 00  	auipc	ra, 0x0
8022b074: e7 80 00 01  	jalr	0x10(ra) <_ZN4core4sync6atomic12atomic_store17he470ceb3b979145cE>
8022b078: a2 70        	ld	ra, 0x28(sp)
8022b07a: 02 74        	ld	s0, 0x20(sp)
;             }
8022b07c: 45 61        	addi	sp, sp, 0x30
8022b07e: 82 80        	ret

000000008022b080 <_ZN4core4sync6atomic12atomic_store17he470ceb3b979145cE>:
; unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
8022b080: 31 71        	addi	sp, sp, -0xc0
8022b082: 06 fd        	sd	ra, 0xb8(sp)
8022b084: 22 f9        	sd	s0, 0xb0(sp)
8022b086: 80 01        	addi	s0, sp, 0xc0
8022b088: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8022b08c: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022b090: a3 0f c4 f4  	sb	a2, -0xa1(s0)
8022b094: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022b098: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match order {
8022b09c: 03 45 f4 f5  	lbu	a0, -0xa1(s0)
8022b0a0: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8022b0a4: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         match order {
8022b0a8: 0e 05        	slli	a0, a0, 0x3

000000008022b0aa <.Lpcrel_hi0>:
8022b0aa: 97 f5 00 00  	auipc	a1, 0xf
8022b0ae: 93 85 65 31  	addi	a1, a1, 0x316
8022b0b2: 2e 95        	add	a0, a0, a1
8022b0b4: 08 61        	ld	a0, 0x0(a0)
8022b0b6: 02 85        	jr	a0
8022b0b8: 00 00        	unimp

000000008022b0ba <.LBB1_3>:
8022b0ba: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022b0be: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             Relaxed => intrinsics::atomic_store_relaxed(dst, val),
8022b0c2: 88 e1        	sd	a0, 0x0(a1)
8022b0c4: e9 a0        	j	0x8022b18e <.LBB1_7+0x10>

000000008022b0c6 <.LBB1_4>:
8022b0c6: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022b0ca: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             Release => intrinsics::atomic_store_release(dst, val),
8022b0ce: 0f 00 10 03  	fence	rw, w
8022b0d2: 88 e1        	sd	a0, 0x0(a1)
8022b0d4: 6d a8        	j	0x8022b18e <.LBB1_7+0x10>

000000008022b0d6 <.Lpcrel_hi1>:
;             Acquire => panic!("there is no such thing as an acquire store"),
8022b0d6: 17 f5 00 00  	auipc	a0, 0xf
8022b0da: 93 05 25 34  	addi	a1, a0, 0x342
8022b0de: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022b0e2: 05 45        	li	a0, 0x1
8022b0e4: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8022b0e8: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022b0ec: 23 34 a4 f6  	sd	a0, -0x98(s0)

000000008022b0f0 <.Lpcrel_hi2>:
8022b0f0: 17 85 00 00  	auipc	a0, 0x8
8022b0f4: 13 05 05 1a  	addi	a0, a0, 0x1a0
8022b0f8: 0c 61        	ld	a1, 0x0(a0)
8022b0fa: 08 65        	ld	a0, 0x8(a0)
8022b0fc: 23 30 b4 f8  	sd	a1, -0x80(s0)
8022b100: 23 34 a4 f8  	sd	a0, -0x78(s0)

000000008022b104 <.Lpcrel_hi3>:
8022b104: 17 f5 00 00  	auipc	a0, 0xf
8022b108: 13 05 45 32  	addi	a0, a0, 0x324
8022b10c: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022b110: 01 45        	li	a0, 0x0
8022b112: 23 3c a4 f6  	sd	a0, -0x88(s0)

000000008022b116 <.Lpcrel_hi4>:
;             Acquire => panic!("there is no such thing as an acquire store"),
8022b116: 17 f5 00 00  	auipc	a0, 0xf
8022b11a: 93 05 a5 38  	addi	a1, a0, 0x38a
8022b11e: 13 05 04 f6  	addi	a0, s0, -0xa0
8022b122: 97 50 00 00  	auipc	ra, 0x5
8022b126: e7 80 60 08  	jalr	0x86(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022b12a <.Lpcrel_hi5>:
;             AcqRel => panic!("there is no such thing as an acquire-release store"),
8022b12a: 17 f5 00 00  	auipc	a0, 0xf
8022b12e: 93 05 65 3c  	addi	a1, a0, 0x3c6
8022b132: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022b136: 05 45        	li	a0, 0x1
8022b138: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8022b13c: 23 38 b4 f8  	sd	a1, -0x70(s0)
8022b140: 23 3c a4 f8  	sd	a0, -0x68(s0)

000000008022b144 <.Lpcrel_hi6>:
8022b144: 17 85 00 00  	auipc	a0, 0x8
8022b148: 13 05 c5 14  	addi	a0, a0, 0x14c
8022b14c: 0c 61        	ld	a1, 0x0(a0)
8022b14e: 08 65        	ld	a0, 0x8(a0)
8022b150: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022b154: 23 3c a4 fa  	sd	a0, -0x48(s0)

000000008022b158 <.Lpcrel_hi7>:
8022b158: 17 f5 00 00  	auipc	a0, 0xf
8022b15c: 13 05 05 2d  	addi	a0, a0, 0x2d0
8022b160: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022b164: 01 45        	li	a0, 0x0
8022b166: 23 34 a4 fa  	sd	a0, -0x58(s0)

000000008022b16a <.Lpcrel_hi8>:
;             AcqRel => panic!("there is no such thing as an acquire-release store"),
8022b16a: 17 f5 00 00  	auipc	a0, 0xf
8022b16e: 93 05 65 39  	addi	a1, a0, 0x396
8022b172: 13 05 04 f9  	addi	a0, s0, -0x70
8022b176: 97 50 00 00  	auipc	ra, 0x5
8022b17a: e7 80 20 03  	jalr	0x32(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022b17e <.LBB1_7>:
8022b17e: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022b182: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             SeqCst => intrinsics::atomic_store_seqcst(dst, val),
8022b186: 0f 00 10 03  	fence	rw, w
8022b18a: 88 e1        	sd	a0, 0x0(a1)
8022b18c: 09 a0        	j	0x8022b18e <.LBB1_7+0x10>
8022b18e: ea 70        	ld	ra, 0xb8(sp)
8022b190: 4a 74        	ld	s0, 0xb0(sp)
; }
8022b192: 29 61        	addi	sp, sp, 0xc0
8022b194: 82 80        	ret

000000008022b196 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3efb134368566abaE>:
;     fn drop(&mut self) {
8022b196: 79 71        	addi	sp, sp, -0x30
8022b198: 06 f4        	sd	ra, 0x28(sp)
8022b19a: 22 f0        	sd	s0, 0x20(sp)
8022b19c: 00 18        	addi	s0, sp, 0x30
8022b19e: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022b1a2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if self.panicked {
8022b1a6: 03 45 85 00  	lbu	a0, 0x8(a0)
8022b1aa: 05 89        	andi	a0, a0, 0x1
8022b1ac: 11 e5        	bnez	a0, 0x8022b1b8 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3efb134368566abaE+0x22>
8022b1ae: 09 a0        	j	0x8022b1b0 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3efb134368566abaE+0x1a>
8022b1b0: a2 70        	ld	ra, 0x28(sp)
8022b1b2: 02 74        	ld	s0, 0x20(sp)
;     }
8022b1b4: 45 61        	addi	sp, sp, 0x30
8022b1b6: 82 80        	ret
8022b1b8: 03 35 84 fd  	ld	a0, -0x28(s0)
;             self.state.store(PANICKED, Ordering::SeqCst);
8022b1bc: 08 61        	ld	a0, 0x0(a0)
8022b1be: 91 45        	li	a1, 0x4
8022b1c0: a3 03 b4 fe  	sb	a1, -0x19(s0)
8022b1c4: 03 46 74 fe  	lbu	a2, -0x19(s0)
8022b1c8: 8d 45        	li	a1, 0x3
8022b1ca: 97 00 00 00  	auipc	ra, 0x0
8022b1ce: e7 80 e0 e8  	jalr	-0x172(ra) <_ZN4core4sync6atomic11AtomicUsize5store17hc40dfb2c082b09edE>
8022b1d2: f9 bf        	j	0x8022b1b0 <_ZN60_$LT$spin..once..Finish$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3efb134368566abaE+0x1a>

000000008022b1d4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h7dcf5867b3a30e2dE>:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
8022b1d4: 01 11        	addi	sp, sp, -0x20
8022b1d6: 06 ec        	sd	ra, 0x18(sp)
8022b1d8: 22 e8        	sd	s0, 0x10(sp)
8022b1da: 00 10        	addi	s0, sp, 0x20
8022b1dc: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b1e0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     uint_impl! {
8022b1e4: 2e 95        	add	a0, a0, a1
8022b1e6: e2 60        	ld	ra, 0x18(sp)
8022b1e8: 42 64        	ld	s0, 0x10(sp)
;         }
8022b1ea: 05 61        	addi	sp, sp, 0x20
8022b1ec: 82 80        	ret

000000008022b1ee <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17hdc76f18424f917a2E>:
;         unsafe fn backward_unchecked(start: Self, n: usize) -> Self {
8022b1ee: 01 11        	addi	sp, sp, -0x20
8022b1f0: 06 ec        	sd	ra, 0x18(sp)
8022b1f2: 22 e8        	sd	s0, 0x10(sp)
8022b1f4: 00 10        	addi	s0, sp, 0x20
8022b1f6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b1fa: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     uint_impl! {
8022b1fe: 0d 8d        	sub	a0, a0, a1
8022b200: e2 60        	ld	ra, 0x18(sp)
8022b202: 42 64        	ld	s0, 0x10(sp)
;         }
8022b204: 05 61        	addi	sp, sp, 0x20
8022b206: 82 80        	ret

000000008022b208 <_ZN4core3cmp3Ord3max17h68425cf6cc945124E>:
;     fn max(self, other: Self) -> Self
8022b208: 01 11        	addi	sp, sp, -0x20
8022b20a: 06 ec        	sd	ra, 0x18(sp)
8022b20c: 22 e8        	sd	s0, 0x10(sp)
8022b20e: 00 10        	addi	s0, sp, 0x20
8022b210: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b214: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         max_by(self, other, Ord::cmp)
8022b218: 97 00 00 00  	auipc	ra, 0x0
8022b21c: e7 80 80 0c  	jalr	0xc8(ra) <_ZN4core3cmp6max_by17h588544b67a5dc0a9E>
8022b220: e2 60        	ld	ra, 0x18(sp)
8022b222: 42 64        	ld	s0, 0x10(sp)
;     }
8022b224: 05 61        	addi	sp, sp, 0x20
8022b226: 82 80        	ret

000000008022b228 <_ZN4core3cmp3Ord3min17h76f4b70afda50d90E>:
;     fn min(self, other: Self) -> Self
8022b228: 01 11        	addi	sp, sp, -0x20
8022b22a: 06 ec        	sd	ra, 0x18(sp)
8022b22c: 22 e8        	sd	s0, 0x10(sp)
8022b22e: 00 10        	addi	s0, sp, 0x20
8022b230: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b234: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         min_by(self, other, Ord::cmp)
8022b238: 97 00 00 00  	auipc	ra, 0x0
8022b23c: e7 80 40 11  	jalr	0x114(ra) <_ZN4core3cmp6min_by17he911ebf6d2b31dddE>
8022b240: e2 60        	ld	ra, 0x18(sp)
8022b242: 42 64        	ld	s0, 0x10(sp)
;     }
8022b244: 05 61        	addi	sp, sp, 0x20
8022b246: 82 80        	ret

000000008022b248 <_ZN4core3cmp3max17hfe671b801265ba80E>:
; pub fn max<T: Ord>(v1: T, v2: T) -> T {
8022b248: 01 11        	addi	sp, sp, -0x20
8022b24a: 06 ec        	sd	ra, 0x18(sp)
8022b24c: 22 e8        	sd	s0, 0x10(sp)
8022b24e: 00 10        	addi	s0, sp, 0x20
8022b250: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b254: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     v1.max(v2)
8022b258: 97 00 00 00  	auipc	ra, 0x0
8022b25c: e7 80 00 fb  	jalr	-0x50(ra) <_ZN4core3cmp3Ord3max17h68425cf6cc945124E>
8022b260: e2 60        	ld	ra, 0x18(sp)
8022b262: 42 64        	ld	s0, 0x10(sp)
; }
8022b264: 05 61        	addi	sp, sp, 0x20
8022b266: 82 80        	ret

000000008022b268 <_ZN4core3cmp3min17h5f4cfaceb8c290a7E>:
; pub fn min<T: Ord>(v1: T, v2: T) -> T {
8022b268: 01 11        	addi	sp, sp, -0x20
8022b26a: 06 ec        	sd	ra, 0x18(sp)
8022b26c: 22 e8        	sd	s0, 0x10(sp)
8022b26e: 00 10        	addi	s0, sp, 0x20
8022b270: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b274: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     v1.min(v2)
8022b278: 97 00 00 00  	auipc	ra, 0x0
8022b27c: e7 80 00 fb  	jalr	-0x50(ra) <_ZN4core3cmp3Ord3min17h76f4b70afda50d90E>
8022b280: e2 60        	ld	ra, 0x18(sp)
8022b282: 42 64        	ld	s0, 0x10(sp)
; }
8022b284: 05 61        	addi	sp, sp, 0x20
8022b286: 82 80        	ret

000000008022b288 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E>:
;                 fn cmp(&self, other: &$t) -> Ordering {
8022b288: 39 71        	addi	sp, sp, -0x40
8022b28a: 06 fc        	sd	ra, 0x38(sp)
8022b28c: 22 f8        	sd	s0, 0x30(sp)
8022b28e: 80 00        	addi	s0, sp, 0x40
8022b290: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b294: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                     if *self < *other { Less }
8022b298: 08 61        	ld	a0, 0x0(a0)
8022b29a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022b29e: 8c 61        	ld	a1, 0x0(a1)
8022b2a0: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022b2a4: 63 6a b5 00  	bltu	a0, a1, 0x8022b2b8 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E+0x30>
8022b2a8: 09 a0        	j	0x8022b2aa <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E+0x22>
8022b2aa: 03 35 84 fc  	ld	a0, -0x38(s0)
8022b2ae: 83 35 04 fd  	ld	a1, -0x30(s0)
;                     else if *self == *other { Equal }
8022b2b2: 63 0c b5 00  	beq	a0, a1, 0x8022b2ca <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E+0x42>
8022b2b6: 31 a0        	j	0x8022b2c2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E+0x3a>
8022b2b8: 13 05 f0 0f  	li	a0, 0xff
;                     if *self < *other { Less }
8022b2bc: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022b2c0: 11 a8        	j	0x8022b2d4 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E+0x4c>
8022b2c2: 05 45        	li	a0, 0x1
;                     else { Greater }
8022b2c4: a3 0f a4 fc  	sb	a0, -0x21(s0)
;                     else if *self == *other { Equal }
8022b2c8: 29 a0        	j	0x8022b2d2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E+0x4a>
8022b2ca: 01 45        	li	a0, 0x0
;                     else if *self == *other { Equal }
8022b2cc: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022b2d0: 09 a0        	j	0x8022b2d2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E+0x4a>
;                     if *self < *other { Less }
8022b2d2: 09 a0        	j	0x8022b2d4 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E+0x4c>
;                 }
8022b2d4: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8022b2d8: e2 70        	ld	ra, 0x38(sp)
8022b2da: 42 74        	ld	s0, 0x30(sp)
8022b2dc: 21 61        	addi	sp, sp, 0x40
8022b2de: 82 80        	ret

000000008022b2e0 <_ZN4core3cmp6max_by17h588544b67a5dc0a9E>:
; pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8022b2e0: 5d 71        	addi	sp, sp, -0x50
8022b2e2: 86 e4        	sd	ra, 0x48(sp)
8022b2e4: a2 e0        	sd	s0, 0x40(sp)
8022b2e6: 80 08        	addi	s0, sp, 0x50
8022b2e8: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022b2ec: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022b2f0: 13 05 84 fb  	addi	a0, s0, -0x48
;     match compare(&v1, &v2) {
8022b2f4: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022b2f8: 13 05 04 fc  	addi	a0, s0, -0x40
8022b2fc: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b300: 03 35 84 fd  	ld	a0, -0x28(s0)
8022b304: 83 35 04 fe  	ld	a1, -0x20(s0)
8022b308: 97 00 00 00  	auipc	ra, 0x0
8022b30c: e7 80 00 1c  	jalr	0x1c0(ra) <_ZN4core3ops8function6FnOnce9call_once17hbddb7680e71009d4E>
8022b310: a3 0b a4 fc  	sb	a0, -0x29(s0)
8022b314: 03 45 74 fd  	lbu	a0, -0x29(s0)
8022b318: 05 25        	addiw	a0, a0, 0x1
8022b31a: 13 75 f5 0f  	andi	a0, a0, 0xff
8022b31e: 89 45        	li	a1, 0x2
8022b320: 63 65 b5 00  	bltu	a0, a1, 0x8022b32a <_ZN4core3cmp6max_by17h588544b67a5dc0a9E+0x4a>
8022b324: 09 a0        	j	0x8022b326 <_ZN4core3cmp6max_by17h588544b67a5dc0a9E+0x46>
8022b326: 39 a0        	j	0x8022b334 <_ZN4core3cmp6max_by17h588544b67a5dc0a9E+0x54>
8022b328: 00 00        	unimp
;         Ordering::Less | Ordering::Equal => v2,
8022b32a: 03 35 04 fc  	ld	a0, -0x40(s0)
8022b32e: 23 34 a4 fc  	sd	a0, -0x38(s0)
; }
8022b332: 31 a0        	j	0x8022b33e <_ZN4core3cmp6max_by17h588544b67a5dc0a9E+0x5e>
;         Ordering::Greater => v1,
8022b334: 03 35 84 fb  	ld	a0, -0x48(s0)
8022b338: 23 34 a4 fc  	sd	a0, -0x38(s0)
; }
8022b33c: 11 a0        	j	0x8022b340 <_ZN4core3cmp6max_by17h588544b67a5dc0a9E+0x60>
8022b33e: 09 a0        	j	0x8022b340 <_ZN4core3cmp6max_by17h588544b67a5dc0a9E+0x60>
8022b340: 03 35 84 fc  	ld	a0, -0x38(s0)
8022b344: a6 60        	ld	ra, 0x48(sp)
8022b346: 06 64        	ld	s0, 0x40(sp)
8022b348: 61 61        	addi	sp, sp, 0x50
8022b34a: 82 80        	ret

000000008022b34c <_ZN4core3cmp6min_by17he911ebf6d2b31dddE>:
; pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
8022b34c: 5d 71        	addi	sp, sp, -0x50
8022b34e: 86 e4        	sd	ra, 0x48(sp)
8022b350: a2 e0        	sd	s0, 0x40(sp)
8022b352: 80 08        	addi	s0, sp, 0x50
8022b354: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022b358: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022b35c: 05 45        	li	a0, 0x1
;     match compare(&v1, &v2) {
8022b35e: 23 07 a4 fe  	sb	a0, -0x12(s0)
8022b362: 13 05 84 fb  	addi	a0, s0, -0x48
8022b366: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022b36a: 13 05 04 fc  	addi	a0, s0, -0x40
8022b36e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b372: 03 35 84 fd  	ld	a0, -0x28(s0)
8022b376: 83 35 04 fe  	ld	a1, -0x20(s0)
8022b37a: 97 00 00 00  	auipc	ra, 0x0
8022b37e: e7 80 e0 14  	jalr	0x14e(ra) <_ZN4core3ops8function6FnOnce9call_once17hbddb7680e71009d4E>
8022b382: a3 0b a4 fc  	sb	a0, -0x29(s0)
8022b386: 03 45 74 fd  	lbu	a0, -0x29(s0)
8022b38a: 05 25        	addiw	a0, a0, 0x1
8022b38c: 13 75 f5 0f  	andi	a0, a0, 0xff
8022b390: 89 45        	li	a1, 0x2
8022b392: 63 65 b5 00  	bltu	a0, a1, 0x8022b39c <_ZN4core3cmp6min_by17he911ebf6d2b31dddE+0x50>
8022b396: 09 a0        	j	0x8022b398 <_ZN4core3cmp6min_by17he911ebf6d2b31dddE+0x4c>
8022b398: 11 a8        	j	0x8022b3ac <_ZN4core3cmp6min_by17he911ebf6d2b31dddE+0x60>
8022b39a: 00 00        	unimp
8022b39c: 01 45        	li	a0, 0x0
;         Ordering::Less | Ordering::Equal => v1,
8022b39e: 23 07 a4 fe  	sb	a0, -0x12(s0)
8022b3a2: 03 35 84 fb  	ld	a0, -0x48(s0)
8022b3a6: 23 34 a4 fc  	sd	a0, -0x38(s0)
; }
8022b3aa: 31 a0        	j	0x8022b3b6 <_ZN4core3cmp6min_by17he911ebf6d2b31dddE+0x6a>
;         Ordering::Greater => v2,
8022b3ac: 03 35 04 fc  	ld	a0, -0x40(s0)
8022b3b0: 23 34 a4 fc  	sd	a0, -0x38(s0)
; }
8022b3b4: 01 a8        	j	0x8022b3c4 <_ZN4core3cmp6min_by17he911ebf6d2b31dddE+0x78>
8022b3b6: 09 a0        	j	0x8022b3b8 <_ZN4core3cmp6min_by17he911ebf6d2b31dddE+0x6c>
8022b3b8: 03 35 84 fc  	ld	a0, -0x38(s0)
8022b3bc: a6 60        	ld	ra, 0x48(sp)
8022b3be: 06 64        	ld	s0, 0x40(sp)
8022b3c0: 61 61        	addi	sp, sp, 0x50
8022b3c2: 82 80        	ret
8022b3c4: 03 45 e4 fe  	lbu	a0, -0x12(s0)
8022b3c8: 05 89        	andi	a0, a0, 0x1
8022b3ca: 7d d5        	beqz	a0, 0x8022b3b8 <_ZN4core3cmp6min_by17he911ebf6d2b31dddE+0x6c>
8022b3cc: 09 a0        	j	0x8022b3ce <_ZN4core3cmp6min_by17he911ebf6d2b31dddE+0x82>
8022b3ce: ed b7        	j	0x8022b3b8 <_ZN4core3cmp6min_by17he911ebf6d2b31dddE+0x6c>

000000008022b3d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17hc0c174d038afd338E>:
;         pub const fn next_power_of_two(self) -> Self {
8022b3d0: 5d 71        	addi	sp, sp, -0x50
8022b3d2: 86 e4        	sd	ra, 0x48(sp)
8022b3d4: a2 e0        	sd	s0, 0x40(sp)
8022b3d6: 80 08        	addi	s0, sp, 0x50
8022b3d8: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022b3dc: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022b3e0: 89 45        	li	a1, 0x2
;             if self <= 1 { return 0; }
8022b3e2: 63 65 b5 0a  	bltu	a0, a1, 0x8022b48c <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17hc0c174d038afd338E+0xbc>
8022b3e6: 09 a0        	j	0x8022b3e8 <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17hc0c174d038afd338E+0x18>
8022b3e8: 03 35 04 fc  	ld	a0, -0x40(s0)
;             let p = self - 1;
8022b3ec: 7d 15        	addi	a0, a0, -0x1
8022b3ee: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             let z = unsafe { intrinsics::ctlz_nonzero(p) };
8022b3f2: 93 55 15 00  	srli	a1, a0, 0x1
8022b3f6: 4d 8d        	or	a0, a0, a1
8022b3f8: 93 55 25 00  	srli	a1, a0, 0x2
8022b3fc: 4d 8d        	or	a0, a0, a1
8022b3fe: 93 55 45 00  	srli	a1, a0, 0x4
8022b402: 4d 8d        	or	a0, a0, a1
8022b404: 93 55 85 00  	srli	a1, a0, 0x8
8022b408: 4d 8d        	or	a0, a0, a1
8022b40a: 93 55 05 01  	srli	a1, a0, 0x10
8022b40e: 4d 8d        	or	a0, a0, a1
8022b410: 93 55 05 02  	srli	a1, a0, 0x20
8022b414: 4d 8d        	or	a0, a0, a1
8022b416: 13 45 f5 ff  	not	a0, a0
8022b41a: 93 55 15 00  	srli	a1, a0, 0x1
8022b41e: 37 56 55 55  	lui	a2, 0x55555
8022b422: 1b 06 56 55  	addiw	a2, a2, 0x555
8022b426: 93 16 06 02  	slli	a3, a2, 0x20
8022b42a: 36 96        	add	a2, a2, a3
8022b42c: f1 8d        	and	a1, a1, a2
8022b42e: b3 05 b5 40  	sub	a1, a0, a1
8022b432: 37 35 33 33  	lui	a0, 0x33333
8022b436: 1b 05 35 33  	addiw	a0, a0, 0x333
8022b43a: 13 16 05 02  	slli	a2, a0, 0x20
8022b43e: 2a 96        	add	a2, a2, a0
8022b440: 33 f5 c5 00  	and	a0, a1, a2
8022b444: 89 81        	srli	a1, a1, 0x2
8022b446: f1 8d        	and	a1, a1, a2
8022b448: 2e 95        	add	a0, a0, a1
8022b44a: 93 55 45 00  	srli	a1, a0, 0x4
8022b44e: 2e 95        	add	a0, a0, a1
8022b450: b7 15 0f 0f  	lui	a1, 0xf0f1
8022b454: 9b 85 f5 f0  	addiw	a1, a1, -0xf1
8022b458: 13 96 05 02  	slli	a2, a1, 0x20
8022b45c: b2 95        	add	a1, a1, a2
8022b45e: 6d 8d        	and	a0, a0, a1
8022b460: b7 05 01 01  	lui	a1, 0x1010
8022b464: 9b 85 15 10  	addiw	a1, a1, 0x101
8022b468: 13 96 05 02  	slli	a2, a1, 0x20
8022b46c: b2 95        	add	a1, a1, a2
8022b46e: 33 05 b5 02  	mul	a0, a0, a1
8022b472: 61 91        	srli	a0, a0, 0x38
8022b474: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b478: 83 35 04 fe  	ld	a1, -0x20(s0)
8022b47c: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022b480: 7d 55        	li	a0, -0x1
;             <$SelfT>::MAX >> z
8022b482: 33 55 b5 00  	srl	a0, a0, a1
8022b486: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         }
8022b48a: 29 a0        	j	0x8022b494 <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17hc0c174d038afd338E+0xc4>
8022b48c: 01 45        	li	a0, 0x0
;             if self <= 1 { return 0; }
8022b48e: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         }
8022b492: 09 a0        	j	0x8022b494 <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17hc0c174d038afd338E+0xc4>
;             self.one_less_than_next_power_of_two() + 1
8022b494: 03 35 84 fc  	ld	a0, -0x38(s0)
8022b498: 05 05        	addi	a0, a0, 0x1
8022b49a: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022b49e: 01 c9        	beqz	a0, 0x8022b4ae <.Lpcrel_hi13>
8022b4a0: 09 a0        	j	0x8022b4a2 <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17hc0c174d038afd338E+0xd2>
8022b4a2: 03 35 84 fb  	ld	a0, -0x48(s0)
8022b4a6: a6 60        	ld	ra, 0x48(sp)
8022b4a8: 06 64        	ld	s0, 0x40(sp)
;         }
8022b4aa: 61 61        	addi	sp, sp, 0x50
8022b4ac: 82 80        	ret

000000008022b4ae <.Lpcrel_hi13>:
;             self.one_less_than_next_power_of_two() + 1
8022b4ae: 17 f5 00 00  	auipc	a0, 0xf
8022b4b2: 13 05 25 21  	addi	a0, a0, 0x212

000000008022b4b6 <.Lpcrel_hi14>:
8022b4b6: 97 f5 00 00  	auipc	a1, 0xf
8022b4ba: 13 86 a5 29  	addi	a2, a1, 0x29a
8022b4be: f1 45        	li	a1, 0x1c
8022b4c0: 97 50 00 00  	auipc	ra, 0x5
8022b4c4: e7 80 80 d5  	jalr	-0x2a8(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022b4c8 <_ZN4core3ops8function6FnOnce9call_once17hbddb7680e71009d4E>:
;     extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
8022b4c8: 79 71        	addi	sp, sp, -0x30
8022b4ca: 06 f4        	sd	ra, 0x28(sp)
8022b4cc: 22 f0        	sd	s0, 0x20(sp)
8022b4ce: 00 18        	addi	s0, sp, 0x30
8022b4d0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022b4d4: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022b4d8: 03 35 84 fd  	ld	a0, -0x28(s0)
8022b4dc: 83 35 04 fe  	ld	a1, -0x20(s0)
8022b4e0: 97 00 00 00  	auipc	ra, 0x0
8022b4e4: e7 80 80 da  	jalr	-0x258(ra) <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h64d30c764eb721d5E>
8022b4e8: a2 70        	ld	ra, 0x28(sp)
8022b4ea: 02 74        	ld	s0, 0x20(sp)
8022b4ec: 45 61        	addi	sp, sp, 0x30
8022b4ee: 82 80        	ret

000000008022b4f0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h730609e5ae6fdae8E>:
;     pub const fn is_null(self) -> bool {
8022b4f0: 01 11        	addi	sp, sp, -0x20
8022b4f2: 06 ec        	sd	ra, 0x18(sp)
8022b4f4: 22 e8        	sd	s0, 0x10(sp)
8022b4f6: 00 10        	addi	s0, sp, 0x20
8022b4f8: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             const_eval_select((self as *mut u8,), const_impl, runtime_impl)
8022b4fc: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             ptr.addr() == 0
8022b500: 13 35 15 00  	seqz	a0, a0
8022b504: e2 60        	ld	ra, 0x18(sp)
8022b506: 42 64        	ld	s0, 0x10(sp)
;     }
8022b508: 05 61        	addi	sp, sp, 0x20
8022b50a: 82 80        	ret

000000008022b50c <_ZN4core3ptr80drop_in_place$LT$spin..mutex..MutexGuard$LT$buddy_system_allocator..Heap$GT$$GT$17h7d471ee1e3e36d8dE>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8022b50c: 01 11        	addi	sp, sp, -0x20
8022b50e: 06 ec        	sd	ra, 0x18(sp)
8022b510: 22 e8        	sd	s0, 0x10(sp)
8022b512: 00 10        	addi	s0, sp, 0x20
8022b514: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022b518: 97 00 00 00  	auipc	ra, 0x0
8022b51c: e7 80 20 0c  	jalr	0xc2(ra) <_ZN4core3ptr94drop_in_place$LT$spin..mutex..ticket..TicketMutexGuard$LT$buddy_system_allocator..Heap$GT$$GT$17h52a1fdf0af4232afE>
8022b520: e2 60        	ld	ra, 0x18(sp)
8022b522: 42 64        	ld	s0, 0x10(sp)
8022b524: 05 61        	addi	sp, sp, 0x20
8022b526: 82 80        	ret

000000008022b528 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5727eb0a2ba0fa0bE>:
;     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
8022b528: 79 71        	addi	sp, sp, -0x30
8022b52a: 06 f4        	sd	ra, 0x28(sp)
8022b52c: 22 f0        	sd	s0, 0x20(sp)
8022b52e: 00 18        	addi	s0, sp, 0x30
8022b530: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022b534: 23 34 a4 fe  	sd	a0, -0x18(s0)
;             assert_unsafe_precondition!(
8022b538: 09 a0        	j	0x8022b53a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5727eb0a2ba0fa0bE+0x12>
8022b53a: 03 35 84 fd  	ld	a0, -0x28(s0)
;             assert_unsafe_precondition!(
8022b53e: 97 00 00 00  	auipc	ra, 0x0
8022b542: e7 80 e0 01  	jalr	0x1e(ra) <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h8295188902f7cf70E>
8022b546: 09 a0        	j	0x8022b548 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5727eb0a2ba0fa0bE+0x20>
8022b548: 03 35 84 fd  	ld	a0, -0x28(s0)
;             NonNull { pointer: ptr as _ }
8022b54c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;     }
8022b550: 03 35 04 fe  	ld	a0, -0x20(s0)
8022b554: a2 70        	ld	ra, 0x28(sp)
8022b556: 02 74        	ld	s0, 0x20(sp)
8022b558: 45 61        	addi	sp, sp, 0x30
8022b55a: 82 80        	ret

000000008022b55c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h8295188902f7cf70E>:
;             const fn precondition_check($($name:$ty),*) {
8022b55c: 01 11        	addi	sp, sp, -0x20
8022b55e: 06 ec        	sd	ra, 0x18(sp)
8022b560: 22 e8        	sd	s0, 0x10(sp)
8022b562: 00 10        	addi	s0, sp, 0x20
8022b564: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             const_eval_select((self as *mut u8,), const_impl, runtime_impl)
8022b568: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
8022b56c: 01 ed        	bnez	a0, 0x8022b584 <.Lpcrel_hi16+0x14>
8022b56e: 09 a0        	j	0x8022b570 <.Lpcrel_hi16>

000000008022b570 <.Lpcrel_hi16>:
;                     ::core::panicking::panic_nounwind(
8022b570: 17 f5 00 00  	auipc	a0, 0xf
8022b574: 13 05 85 1f  	addi	a0, a0, 0x1f8
8022b578: 93 05 d0 05  	li	a1, 0x5d
8022b57c: 97 50 00 00  	auipc	ra, 0x5
8022b580: e7 80 40 cc  	jalr	-0x33c(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8022b584: e2 60        	ld	ra, 0x18(sp)
8022b586: 42 64        	ld	s0, 0x10(sp)
;             }
8022b588: 05 61        	addi	sp, sp, 0x20
8022b58a: 82 80        	ret

000000008022b58c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h42e7d82b19f37ceeE>:
;     pub const fn new(ptr: *mut T) -> Option<Self> {
8022b58c: 39 71        	addi	sp, sp, -0x40
8022b58e: 06 fc        	sd	ra, 0x38(sp)
8022b590: 22 f8        	sd	s0, 0x30(sp)
8022b592: 80 00        	addi	s0, sp, 0x40
8022b594: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022b598: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             const_eval_select((self as *mut u8,), const_impl, runtime_impl)
8022b59c: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         if !ptr.is_null() {
8022b5a0: 11 e5        	bnez	a0, 0x8022b5ac <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h42e7d82b19f37ceeE+0x20>
8022b5a2: 09 a0        	j	0x8022b5a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h42e7d82b19f37ceeE+0x18>
8022b5a4: 01 45        	li	a0, 0x0
;             None
8022b5a6: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if !ptr.is_null() {
8022b5aa: 11 a0        	j	0x8022b5ae <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h42e7d82b19f37ceeE+0x22>
;             assert_unsafe_precondition!(
8022b5ac: 39 a0        	j	0x8022b5ba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h42e7d82b19f37ceeE+0x2e>
;     }
8022b5ae: 03 35 04 fd  	ld	a0, -0x30(s0)
8022b5b2: e2 70        	ld	ra, 0x38(sp)
8022b5b4: 42 74        	ld	s0, 0x30(sp)
8022b5b6: 21 61        	addi	sp, sp, 0x40
8022b5b8: 82 80        	ret
8022b5ba: 03 35 84 fc  	ld	a0, -0x38(s0)
;             assert_unsafe_precondition!(
8022b5be: 97 00 00 00  	auipc	ra, 0x0
8022b5c2: e7 80 e0 f9  	jalr	-0x62(ra) <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17h8295188902f7cf70E>
8022b5c6: 09 a0        	j	0x8022b5c8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h42e7d82b19f37ceeE+0x3c>
8022b5c8: 03 35 84 fc  	ld	a0, -0x38(s0)
;             NonNull { pointer: ptr as _ }
8022b5cc: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             Some(unsafe { Self::new_unchecked(ptr) })
8022b5d0: 03 35 84 fd  	ld	a0, -0x28(s0)
8022b5d4: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         if !ptr.is_null() {
8022b5d8: d9 bf        	j	0x8022b5ae <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h42e7d82b19f37ceeE+0x22>

000000008022b5da <_ZN4core3ptr94drop_in_place$LT$spin..mutex..ticket..TicketMutexGuard$LT$buddy_system_allocator..Heap$GT$$GT$17h52a1fdf0af4232afE>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8022b5da: 01 11        	addi	sp, sp, -0x20
8022b5dc: 06 ec        	sd	ra, 0x18(sp)
8022b5de: 22 e8        	sd	s0, 0x10(sp)
8022b5e0: 00 10        	addi	s0, sp, 0x20
8022b5e2: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022b5e6: 97 00 00 00  	auipc	ra, 0x0
8022b5ea: e7 80 40 30  	jalr	0x304(ra) <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h005e8bdf77355252E>
8022b5ee: e2 60        	ld	ra, 0x18(sp)
8022b5f0: 42 64        	ld	s0, 0x10(sp)
8022b5f2: 05 61        	addi	sp, sp, 0x20
8022b5f4: 82 80        	ret

000000008022b5f6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h58a3e79438385681E>:
;     fn next(&mut self) -> Option<A> {
8022b5f6: 01 11        	addi	sp, sp, -0x20
8022b5f8: 06 ec        	sd	ra, 0x18(sp)
8022b5fa: 22 e8        	sd	s0, 0x10(sp)
8022b5fc: 00 10        	addi	s0, sp, 0x20
8022b5fe: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spec_next()
8022b602: 97 00 00 00  	auipc	ra, 0x0
8022b606: e7 80 20 3b  	jalr	0x3b2(ra) <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h7b98844647f14fd2E>
8022b60a: e2 60        	ld	ra, 0x18(sp)
8022b60c: 42 64        	ld	s0, 0x10(sp)
;     }
8022b60e: 05 61        	addi	sp, sp, 0x20
8022b610: 82 80        	ret

000000008022b612 <_ZN4core4iter5range116_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$9next_back17h57cd4ce66b288dcbE>:
;     fn next_back(&mut self) -> Option<A> {
8022b612: 01 11        	addi	sp, sp, -0x20
8022b614: 06 ec        	sd	ra, 0x18(sp)
8022b616: 22 e8        	sd	s0, 0x10(sp)
8022b618: 00 10        	addi	s0, sp, 0x20
8022b61a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.spec_next_back()
8022b61e: 97 00 00 00  	auipc	ra, 0x0
8022b622: e7 80 a0 32  	jalr	0x32a(ra) <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h6f703f706824bfd3E>
8022b626: e2 60        	ld	ra, 0x18(sp)
8022b628: 42 64        	ld	s0, 0x10(sp)
;     }
8022b62a: 05 61        	addi	sp, sp, 0x20
8022b62c: 82 80        	ret

000000008022b62e <_ZN4core4iter6traits8iterator8Iterator3rev17h28bdd26f8cb73869E>:
;     fn rev(self) -> Rev<Self>
8022b62e: 79 71        	addi	sp, sp, -0x30
8022b630: 06 f4        	sd	ra, 0x28(sp)
8022b632: 22 f0        	sd	s0, 0x20(sp)
8022b634: 00 18        	addi	s0, sp, 0x30
8022b636: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b63a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         Rev { iter }
8022b63e: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022b642: 23 3c b4 fc  	sd	a1, -0x28(s0)
;     }
8022b646: 03 35 04 fd  	ld	a0, -0x30(s0)
8022b64a: 83 35 84 fd  	ld	a1, -0x28(s0)
8022b64e: a2 70        	ld	ra, 0x28(sp)
8022b650: 02 74        	ld	s0, 0x20(sp)
8022b652: 45 61        	addi	sp, sp, 0x30
8022b654: 82 80        	ret

000000008022b656 <_ZN4core4sync6atomic11AtomicUsize4load17hb8d096c8944b8d41E>:
;             pub fn load(&self, order: Ordering) -> $int_type {
8022b656: 79 71        	addi	sp, sp, -0x30
8022b658: 06 f4        	sd	ra, 0x28(sp)
8022b65a: 22 f0        	sd	s0, 0x20(sp)
8022b65c: 00 18        	addi	s0, sp, 0x30
8022b65e: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022b662: a3 03 b4 fe  	sb	a1, -0x19(s0)
;                 unsafe { atomic_load(self.v.get(), order) }
8022b666: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022b66a: 97 10 00 00  	auipc	ra, 0x1
8022b66e: e7 80 a0 57  	jalr	0x57a(ra) <_ZN4core4sync6atomic11atomic_load17h21b744b61142d056E>
8022b672: a2 70        	ld	ra, 0x28(sp)
8022b674: 02 74        	ld	s0, 0x20(sp)
;             }
8022b676: 45 61        	addi	sp, sp, 0x30
8022b678: 82 80        	ret

000000008022b67a <_ZN4core4sync6atomic11AtomicUsize5store17ha8cc85af728bc120E>:
;             pub fn store(&self, val: $int_type, order: Ordering) {
8022b67a: 79 71        	addi	sp, sp, -0x30
8022b67c: 06 f4        	sd	ra, 0x28(sp)
8022b67e: 22 f0        	sd	s0, 0x20(sp)
8022b680: 00 18        	addi	s0, sp, 0x30
8022b682: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022b686: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022b68a: a3 03 c4 fe  	sb	a2, -0x19(s0)
;                 unsafe { atomic_store(self.v.get(), val, order); }
8022b68e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022b692: 97 10 00 00  	auipc	ra, 0x1
8022b696: e7 80 80 66  	jalr	0x668(ra) <_ZN4core4sync6atomic12atomic_store17hb88dc25073c81290E>
8022b69a: a2 70        	ld	ra, 0x28(sp)
8022b69c: 02 74        	ld	s0, 0x20(sp)
;             }
8022b69e: 45 61        	addi	sp, sp, 0x30
8022b6a0: 82 80        	ret

000000008022b6a2 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h012db76162fa942dE>:
;             pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
8022b6a2: 1d 71        	addi	sp, sp, -0x60
8022b6a4: 86 ec        	sd	ra, 0x58(sp)
8022b6a6: a2 e8        	sd	s0, 0x50(sp)
8022b6a8: 80 10        	addi	s0, sp, 0x60
8022b6aa: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022b6ae: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022b6b2: a3 03 c4 fc  	sb	a2, -0x39(s0)
8022b6b6: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022b6ba: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                 unsafe { atomic_add(self.v.get(), val, order) }
8022b6be: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self as *const UnsafeCell<T> as *const T as *mut T
8022b6c2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         match order {
8022b6c6: 03 45 74 fc  	lbu	a0, -0x39(s0)
8022b6ca: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022b6ce: 03 35 84 fb  	ld	a0, -0x48(s0)
;         match order {
8022b6d2: 0e 05        	slli	a0, a0, 0x3

000000008022b6d4 <.Lpcrel_hi18>:
8022b6d4: 97 f5 00 00  	auipc	a1, 0xf
8022b6d8: 93 85 45 e4  	addi	a1, a1, -0x1bc
8022b6dc: 2e 95        	add	a0, a0, a1
8022b6de: 08 61        	ld	a0, 0x0(a0)
8022b6e0: 02 85        	jr	a0
8022b6e2: 00 00        	unimp

000000008022b6e4 <.LBB53_3>:
8022b6e4: 03 35 04 fb  	ld	a0, -0x50(s0)
8022b6e8: 83 35 84 fa  	ld	a1, -0x58(s0)
;             Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
8022b6ec: 2f 35 b5 00  	amoadd.d	a0, a1, (a0)
8022b6f0: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022b6f4: a9 a0        	j	0x8022b73e <.LBB53_7+0x12>

000000008022b6f6 <.LBB53_4>:
8022b6f6: 03 35 04 fb  	ld	a0, -0x50(s0)
8022b6fa: 83 35 84 fa  	ld	a1, -0x58(s0)
;             Release => intrinsics::atomic_xadd_release(dst, val),
8022b6fe: 2f 35 b5 02  	amoadd.d.rl	a0, a1, (a0)
8022b702: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022b706: 25 a8        	j	0x8022b73e <.LBB53_7+0x12>

000000008022b708 <.LBB53_5>:
8022b708: 03 35 04 fb  	ld	a0, -0x50(s0)
8022b70c: 83 35 84 fa  	ld	a1, -0x58(s0)
;             Acquire => intrinsics::atomic_xadd_acquire(dst, val),
8022b710: 2f 35 b5 04  	amoadd.d.aq	a0, a1, (a0)
8022b714: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022b718: 1d a0        	j	0x8022b73e <.LBB53_7+0x12>

000000008022b71a <.LBB53_6>:
8022b71a: 03 35 04 fb  	ld	a0, -0x50(s0)
8022b71e: 83 35 84 fa  	ld	a1, -0x58(s0)
;             AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
8022b722: 2f 35 b5 06  	amoadd.d.aqrl	a0, a1, (a0)
8022b726: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022b72a: 11 a8        	j	0x8022b73e <.LBB53_7+0x12>

000000008022b72c <.LBB53_7>:
8022b72c: 03 35 04 fb  	ld	a0, -0x50(s0)
8022b730: 83 35 84 fa  	ld	a1, -0x58(s0)
;             SeqCst => intrinsics::atomic_xadd_seqcst(dst, val),
8022b734: 2f 35 b5 06  	amoadd.d.aqrl	a0, a1, (a0)
8022b738: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022b73c: 09 a0        	j	0x8022b73e <.LBB53_7+0x12>
;             }
8022b73e: 03 35 84 fc  	ld	a0, -0x38(s0)
8022b742: e6 60        	ld	ra, 0x58(sp)
8022b744: 46 64        	ld	s0, 0x50(sp)
8022b746: 25 61        	addi	sp, sp, 0x60
8022b748: 82 80        	ret

000000008022b74a <_ZN4core4sync6atomic14spin_loop_hint17h79613917293d51ffE>:
; pub fn spin_loop_hint() {
8022b74a: 41 11        	addi	sp, sp, -0x10
8022b74c: 06 e4        	sd	ra, 0x8(sp)
8022b74e: 22 e0        	sd	s0, 0x0(sp)
8022b750: 00 08        	addi	s0, sp, 0x10
;     unsafe { asm!(".insn i 0x0F, 0, x0, x0, 0x010", options(nomem, nostack)) }
8022b752: 0f 00 00 01  	fence	w, 0
8022b756: a2 60        	ld	ra, 0x8(sp)
8022b758: 02 64        	ld	s0, 0x0(sp)
; }
8022b75a: 41 01        	addi	sp, sp, 0x10
8022b75c: 82 80        	ret

000000008022b75e <_ZN4core5alloc6layout6Layout4size17h90196cece14110e6E>:
;     pub const fn size(&self) -> usize {
8022b75e: 01 11        	addi	sp, sp, -0x20
8022b760: 06 ec        	sd	ra, 0x18(sp)
8022b762: 22 e8        	sd	s0, 0x10(sp)
8022b764: 00 10        	addi	s0, sp, 0x20
8022b766: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.size
8022b76a: 08 65        	ld	a0, 0x8(a0)
8022b76c: e2 60        	ld	ra, 0x18(sp)
8022b76e: 42 64        	ld	s0, 0x10(sp)
;     }
8022b770: 05 61        	addi	sp, sp, 0x20
8022b772: 82 80        	ret

000000008022b774 <_ZN4core5alloc6layout6Layout5align17hc762a3feea0dc588E>:
;     pub const fn align(&self) -> usize {
8022b774: 79 71        	addi	sp, sp, -0x30
8022b776: 06 f4        	sd	ra, 0x28(sp)
8022b778: 22 f0        	sd	s0, 0x20(sp)
8022b77a: 00 18        	addi	s0, sp, 0x30
8022b77c: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.align.as_usize()
8022b780: 08 61        	ld	a0, 0x0(a0)
8022b782: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0 as usize
8022b786: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022b78a: 03 35 84 fd  	ld	a0, -0x28(s0)
8022b78e: a2 70        	ld	ra, 0x28(sp)
8022b790: 02 74        	ld	s0, 0x20(sp)
;     }
8022b792: 45 61        	addi	sp, sp, 0x30
8022b794: 82 80        	ret

000000008022b796 <_ZN4core6option15Option$LT$T$GT$6expect17h51dbe17ada7fff59E>:
;     pub const fn expect(self, msg: &str) -> T {
8022b796: 5d 71        	addi	sp, sp, -0x50
8022b798: 86 e4        	sd	ra, 0x48(sp)
8022b79a: a2 e0        	sd	s0, 0x40(sp)
8022b79c: 80 08        	addi	s0, sp, 0x50
8022b79e: 23 38 e4 fa  	sd	a4, -0x50(s0)
8022b7a2: 23 3c d4 fa  	sd	a3, -0x48(s0)
8022b7a6: 23 30 c4 fc  	sd	a2, -0x40(s0)
8022b7aa: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022b7ae: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022b7b2: 23 3c c4 fc  	sd	a2, -0x28(s0)
8022b7b6: 23 30 d4 fe  	sd	a3, -0x20(s0)
;         match self {
8022b7ba: 03 35 84 fc  	ld	a0, -0x38(s0)
8022b7be: 01 ed        	bnez	a0, 0x8022b7d6 <_ZN4core6option15Option$LT$T$GT$6expect17h51dbe17ada7fff59E+0x40>
8022b7c0: 09 a0        	j	0x8022b7c2 <_ZN4core6option15Option$LT$T$GT$6expect17h51dbe17ada7fff59E+0x2c>
8022b7c2: 03 36 04 fb  	ld	a2, -0x50(s0)
8022b7c6: 83 35 84 fb  	ld	a1, -0x48(s0)
8022b7ca: 03 35 04 fc  	ld	a0, -0x40(s0)
;             None => expect_failed(msg),
8022b7ce: 97 50 00 00  	auipc	ra, 0x5
8022b7d2: e7 80 00 51  	jalr	0x510(ra) <_ZN4core6option13expect_failed17h188406d5b767976cE>
;             Some(val) => val,
8022b7d6: 03 35 04 fd  	ld	a0, -0x30(s0)
8022b7da: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022b7de: a6 60        	ld	ra, 0x48(sp)
8022b7e0: 06 64        	ld	s0, 0x40(sp)
;     }
8022b7e2: 61 61        	addi	sp, sp, 0x50
8022b7e4: 82 80        	ret

000000008022b7e6 <_ZN4core6option15Option$LT$T$GT$6map_or17ha390f041983568e2E>:
;     pub fn map_or<U, F>(self, default: U, f: F) -> U
8022b7e6: 5d 71        	addi	sp, sp, -0x50
8022b7e8: 86 e4        	sd	ra, 0x48(sp)
8022b7ea: a2 e0        	sd	s0, 0x40(sp)
8022b7ec: 80 08        	addi	s0, sp, 0x50
8022b7ee: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022b7f2: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022b7f6: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         match self {
8022b7fa: 03 35 04 fc  	ld	a0, -0x40(s0)
8022b7fe: 19 e5        	bnez	a0, 0x8022b80c <_ZN4core6option15Option$LT$T$GT$6map_or17ha390f041983568e2E+0x26>
8022b800: 09 a0        	j	0x8022b802 <_ZN4core6option15Option$LT$T$GT$6map_or17ha390f041983568e2E+0x1c>
8022b802: 03 35 84 fb  	ld	a0, -0x48(s0)
;             None => default,
8022b806: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     }
8022b80a: 05 a0        	j	0x8022b82a <_ZN4core6option15Option$LT$T$GT$6map_or17ha390f041983568e2E+0x44>
;             Some(t) => f(t),
8022b80c: 03 35 04 fc  	ld	a0, -0x40(s0)
8022b810: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022b814: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022b818: 03 35 04 fd  	ld	a0, -0x30(s0)
8022b81c: 97 10 00 00  	auipc	ra, 0x1
8022b820: e7 80 00 15  	jalr	0x150(ra) <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h5c87363fdacc9b2fE>
8022b824: 23 34 a4 fc  	sd	a0, -0x38(s0)
;     }
8022b828: 39 a0        	j	0x8022b836 <_ZN4core6option15Option$LT$T$GT$6map_or17ha390f041983568e2E+0x50>
8022b82a: 03 35 84 fc  	ld	a0, -0x38(s0)
8022b82e: a6 60        	ld	ra, 0x48(sp)
8022b830: 06 64        	ld	s0, 0x40(sp)
8022b832: 61 61        	addi	sp, sp, 0x50
8022b834: 82 80        	ret
8022b836: d5 bf        	j	0x8022b82a <_ZN4core6option15Option$LT$T$GT$6map_or17ha390f041983568e2E+0x44>

000000008022b838 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h891932adad0abd59E>:
;     pub fn ok(self) -> Option<T> {
8022b838: 79 71        	addi	sp, sp, -0x30
8022b83a: 06 f4        	sd	ra, 0x28(sp)
8022b83c: 22 f0        	sd	s0, 0x20(sp)
8022b83e: 00 18        	addi	s0, sp, 0x30
8022b840: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         match self {
8022b844: 03 35 84 fd  	ld	a0, -0x28(s0)
8022b848: 09 c9        	beqz	a0, 0x8022b85a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h891932adad0abd59E+0x22>
8022b84a: 09 a0        	j	0x8022b84c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h891932adad0abd59E+0x14>
;             Ok(x) => Some(x),
8022b84c: 03 35 84 fd  	ld	a0, -0x28(s0)
8022b850: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022b854: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b858: 29 a0        	j	0x8022b862 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h891932adad0abd59E+0x2a>
8022b85a: 01 45        	li	a0, 0x0
;             Err(_) => None,
8022b85c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b860: 09 a0        	j	0x8022b862 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h891932adad0abd59E+0x2a>
;     }
8022b862: 03 35 84 fd  	ld	a0, -0x28(s0)
8022b866: 01 c9        	beqz	a0, 0x8022b876 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h891932adad0abd59E+0x3e>
8022b868: 09 a0        	j	0x8022b86a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h891932adad0abd59E+0x32>
8022b86a: 03 35 04 fe  	ld	a0, -0x20(s0)
8022b86e: a2 70        	ld	ra, 0x28(sp)
8022b870: 02 74        	ld	s0, 0x20(sp)
8022b872: 45 61        	addi	sp, sp, 0x30
8022b874: 82 80        	ret
8022b876: d5 bf        	j	0x8022b86a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h891932adad0abd59E+0x32>

000000008022b878 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7670f89f4c25f1b8E>:
;     fn into_iter(self) -> I {
8022b878: 01 11        	addi	sp, sp, -0x20
8022b87a: 06 ec        	sd	ra, 0x18(sp)
8022b87c: 22 e8        	sd	s0, 0x10(sp)
8022b87e: 00 10        	addi	s0, sp, 0x20
8022b880: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022b884: aa 85        	mv	a1, a0
8022b886: 03 35 84 fe  	ld	a0, -0x18(s0)
;         self
8022b88a: 10 69        	ld	a2, 0x10(a0)
8022b88c: 90 e9        	sd	a2, 0x10(a1)
8022b88e: 10 65        	ld	a2, 0x8(a0)
8022b890: 90 e5        	sd	a2, 0x8(a1)
8022b892: 08 61        	ld	a0, 0x0(a0)
8022b894: 88 e1        	sd	a0, 0x0(a1)
8022b896: e2 60        	ld	ra, 0x18(sp)
8022b898: 42 64        	ld	s0, 0x10(sp)
;     }
8022b89a: 05 61        	addi	sp, sp, 0x20
8022b89c: 82 80        	ret

000000008022b89e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h8aee58dfd1a9ad91E>:
;     fn into_iter(self) -> I {
8022b89e: 01 11        	addi	sp, sp, -0x20
8022b8a0: 06 ec        	sd	ra, 0x18(sp)
8022b8a2: 22 e8        	sd	s0, 0x10(sp)
8022b8a4: 00 10        	addi	s0, sp, 0x20
8022b8a6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b8aa: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022b8ae: e2 60        	ld	ra, 0x18(sp)
8022b8b0: 42 64        	ld	s0, 0x10(sp)
;     }
8022b8b2: 05 61        	addi	sp, sp, 0x20
8022b8b4: 82 80        	ret

000000008022b8b6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb7ed3f92a62e2c8bE>:
;     fn into_iter(self) -> I {
8022b8b6: 01 11        	addi	sp, sp, -0x20
8022b8b8: 06 ec        	sd	ra, 0x18(sp)
8022b8ba: 22 e8        	sd	s0, 0x10(sp)
8022b8bc: 00 10        	addi	s0, sp, 0x20
8022b8be: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022b8c2: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022b8c6: e2 60        	ld	ra, 0x18(sp)
8022b8c8: 42 64        	ld	s0, 0x10(sp)
;     }
8022b8ca: 05 61        	addi	sp, sp, 0x20
8022b8cc: 82 80        	ret

000000008022b8ce <_ZN79_$LT$spin..mutex..MutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hf652265eb1fb4a55E>:
;     fn deref_mut(&mut self) -> &mut T {
8022b8ce: 01 11        	addi	sp, sp, -0x20
8022b8d0: 06 ec        	sd	ra, 0x18(sp)
8022b8d2: 22 e8        	sd	s0, 0x10(sp)
8022b8d4: 00 10        	addi	s0, sp, 0x20
8022b8d6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         &mut *self.inner
8022b8da: 97 00 00 00  	auipc	ra, 0x0
8022b8de: e7 80 00 21  	jalr	0x210(ra) <_ZN93_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h998ecfdd02cd1757E>
8022b8e2: e2 60        	ld	ra, 0x18(sp)
8022b8e4: 42 64        	ld	s0, 0x10(sp)
;     }
8022b8e6: 05 61        	addi	sp, sp, 0x20
8022b8e8: 82 80        	ret

000000008022b8ea <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h005e8bdf77355252E>:
;     fn drop(&mut self) {
8022b8ea: 39 71        	addi	sp, sp, -0x40
8022b8ec: 06 fc        	sd	ra, 0x38(sp)
8022b8ee: 22 f8        	sd	s0, 0x30(sp)
8022b8f0: 80 00        	addi	s0, sp, 0x40
8022b8f2: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022b8f6: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         let new_ticket = self.ticket + 1;
8022b8fa: 08 69        	ld	a0, 0x10(a0)
8022b8fc: 05 05        	addi	a0, a0, 0x1
8022b8fe: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022b902: 15 c5        	beqz	a0, 0x8022b92e <.Lpcrel_hi29>
8022b904: 09 a0        	j	0x8022b906 <_ZN88_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h005e8bdf77355252E+0x1c>
8022b906: 83 35 04 fd  	ld	a1, -0x30(s0)
8022b90a: 03 35 84 fc  	ld	a0, -0x38(s0)
;         let new_ticket = self.ticket + 1;
8022b90e: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.next_serving.store(new_ticket, Ordering::Release);
8022b912: 08 61        	ld	a0, 0x0(a0)
8022b914: 05 46        	li	a2, 0x1
8022b916: a3 0f c4 fc  	sb	a2, -0x21(s0)
8022b91a: 03 46 f4 fd  	lbu	a2, -0x21(s0)
8022b91e: 97 00 00 00  	auipc	ra, 0x0
8022b922: e7 80 c0 d5  	jalr	-0x2a4(ra) <_ZN4core4sync6atomic11AtomicUsize5store17ha8cc85af728bc120E>
8022b926: e2 70        	ld	ra, 0x38(sp)
8022b928: 42 74        	ld	s0, 0x30(sp)
;     }
8022b92a: 21 61        	addi	sp, sp, 0x40
8022b92c: 82 80        	ret

000000008022b92e <.Lpcrel_hi29>:
;         let new_ticket = self.ticket + 1;
8022b92e: 17 f5 00 00  	auipc	a0, 0xf
8022b932: 13 05 25 d9  	addi	a0, a0, -0x26e

000000008022b936 <.Lpcrel_hi30>:
8022b936: 97 f5 00 00  	auipc	a1, 0xf
8022b93a: 13 86 25 ef  	addi	a2, a1, -0x10e
8022b93e: f1 45        	li	a1, 0x1c
8022b940: 97 50 00 00  	auipc	ra, 0x5
8022b944: e7 80 80 8d  	jalr	-0x728(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022b948 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h6f703f706824bfd3E>:
;     fn spec_next_back(&mut self) -> Option<T> {
8022b948: 5d 71        	addi	sp, sp, -0x50
8022b94a: 86 e4        	sd	ra, 0x48(sp)
8022b94c: a2 e0        	sd	s0, 0x40(sp)
8022b94e: 80 08        	addi	s0, sp, 0x50
8022b950: aa 85        	mv	a1, a0
8022b952: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022b956: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         if self.start < self.end {
8022b95a: 13 85 85 00  	addi	a0, a1, 0x8
8022b95e: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022b962: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
8022b966: 88 61        	ld	a0, 0x0(a1)
8022b968: 8c 65        	ld	a1, 0x8(a1)
;         if self.start < self.end {
8022b96a: 63 67 b5 00  	bltu	a0, a1, 0x8022b978 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h6f703f706824bfd3E+0x30>
8022b96e: 09 a0        	j	0x8022b970 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h6f703f706824bfd3E+0x28>
8022b970: 01 45        	li	a0, 0x0
;             None
8022b972: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if self.start < self.end {
8022b976: 3d a0        	j	0x8022b9a4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h6f703f706824bfd3E+0x5c>
8022b978: 03 35 04 fc  	ld	a0, -0x40(s0)
;             self.end = unsafe { Step::backward_unchecked(self.end, 1) };
8022b97c: 08 65        	ld	a0, 0x8(a0)
8022b97e: 85 45        	li	a1, 0x1
8022b980: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022b984: 97 00 00 00  	auipc	ra, 0x0
8022b988: e7 80 a0 86  	jalr	-0x796(ra) <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17hdc76f18424f917a2E>
8022b98c: 83 35 04 fc  	ld	a1, -0x40(s0)
8022b990: 2a 86        	mv	a2, a0
8022b992: 03 35 84 fb  	ld	a0, -0x48(s0)
8022b996: 90 e5        	sd	a2, 0x8(a1)
;             Some(self.end)
8022b998: 8c 65        	ld	a1, 0x8(a1)
8022b99a: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022b99e: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         if self.start < self.end {
8022b9a2: 09 a0        	j	0x8022b9a4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$14spec_next_back17h6f703f706824bfd3E+0x5c>
;     }
8022b9a4: 03 35 84 fc  	ld	a0, -0x38(s0)
8022b9a8: 83 35 04 fd  	ld	a1, -0x30(s0)
8022b9ac: a6 60        	ld	ra, 0x48(sp)
8022b9ae: 06 64        	ld	s0, 0x40(sp)
8022b9b0: 61 61        	addi	sp, sp, 0x50
8022b9b2: 82 80        	ret

000000008022b9b4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h7b98844647f14fd2E>:
;     fn spec_next(&mut self) -> Option<T> {
8022b9b4: 1d 71        	addi	sp, sp, -0x60
8022b9b6: 86 ec        	sd	ra, 0x58(sp)
8022b9b8: a2 e8        	sd	s0, 0x50(sp)
8022b9ba: 80 10        	addi	s0, sp, 0x60
8022b9bc: aa 85        	mv	a1, a0
8022b9be: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022b9c2: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         if self.start < self.end {
8022b9c6: 13 85 85 00  	addi	a0, a1, 0x8
8022b9ca: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022b9ce: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
8022b9d2: 88 61        	ld	a0, 0x0(a1)
8022b9d4: 8c 65        	ld	a1, 0x8(a1)
;         if self.start < self.end {
8022b9d6: 63 67 b5 00  	bltu	a0, a1, 0x8022b9e4 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h7b98844647f14fd2E+0x30>
8022b9da: 09 a0        	j	0x8022b9dc <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h7b98844647f14fd2E+0x28>
8022b9dc: 01 45        	li	a0, 0x0
;             None
8022b9de: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if self.start < self.end {
8022b9e2: 25 a8        	j	0x8022ba1a <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h7b98844647f14fd2E+0x66>
8022b9e4: 03 35 84 fb  	ld	a0, -0x48(s0)
;             let old = self.start;
8022b9e8: 08 61        	ld	a0, 0x0(a0)
8022b9ea: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022b9ee: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022b9f2: 85 45        	li	a1, 0x1
8022b9f4: 23 38 b4 fa  	sd	a1, -0x50(s0)
;             self.start = unsafe { Step::forward_unchecked(old, 1) };
8022b9f8: 97 f0 ff ff  	auipc	ra, 0xfffff
8022b9fc: e7 80 c0 7d  	jalr	0x7dc(ra) <ekernel+0xffcde1d4>
8022ba00: 83 36 84 fb  	ld	a3, -0x48(s0)
8022ba04: 83 35 84 fa  	ld	a1, -0x58(s0)
8022ba08: 2a 86        	mv	a2, a0
8022ba0a: 03 35 04 fb  	ld	a0, -0x50(s0)
8022ba0e: 90 e2        	sd	a2, 0x0(a3)
;             Some(old)
8022ba10: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022ba14: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         if self.start < self.end {
8022ba18: 09 a0        	j	0x8022ba1a <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h7b98844647f14fd2E+0x66>
;     }
8022ba1a: 03 35 04 fc  	ld	a0, -0x40(s0)
8022ba1e: 83 35 84 fc  	ld	a1, -0x38(s0)
8022ba22: e6 60        	ld	ra, 0x58(sp)
8022ba24: 46 64        	ld	s0, 0x50(sp)
8022ba26: 25 61        	addi	sp, sp, 0x60
8022ba28: 82 80        	ret

000000008022ba2a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E>:
;             fn next(&mut self) -> Option<$elem> {
8022ba2a: 31 71        	addi	sp, sp, -0xc0
8022ba2c: 06 fd        	sd	ra, 0xb8(sp)
8022ba2e: 22 f9        	sd	s0, 0xb0(sp)
8022ba30: 80 01        	addi	s0, sp, 0xc0
8022ba32: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022ba36: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
8022ba38: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     uint_impl! {
8022ba3c: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
8022ba40: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022ba44: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     if is_empty!(self) {
8022ba48: 09 a0        	j	0x8022ba4a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E+0x20>
8022ba4a: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     if is_empty!(self) {
8022ba4e: 93 05 85 00  	addi	a1, a0, 0x8
8022ba52: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022ba56: 0c 65        	ld	a1, 0x8(a0)
8022ba58: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022ba5c: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022ba60: 93 05 84 f7  	addi	a1, s0, -0x88
8022ba64: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.as_ptr() == other.as_ptr()
8022ba68: 08 61        	ld	a0, 0x0(a0)
8022ba6a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022ba6e: 83 35 84 f7  	ld	a1, -0x88(s0)
8022ba72: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022ba76: 2d 8d        	xor	a0, a0, a1
8022ba78: 13 35 15 00  	seqz	a0, a0
8022ba7c: a3 0b a4 f6  	sb	a0, -0x89(s0)
;                     if is_empty!(self) {
8022ba80: 09 a0        	j	0x8022ba82 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E+0x58>
8022ba82: 03 45 74 f7  	lbu	a0, -0x89(s0)
8022ba86: 05 89        	andi	a0, a0, 0x1
8022ba88: 01 e9        	bnez	a0, 0x8022ba98 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E+0x6e>
8022ba8a: 09 a0        	j	0x8022ba8c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E+0x62>
8022ba8c: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let old = self.ptr;
8022ba90: 08 61        	ld	a0, 0x0(a0)
8022ba92: 23 30 a4 f8  	sd	a0, -0x80(s0)
;                     if_zst!(mut self,
8022ba96: 29 a0        	j	0x8022baa0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E+0x76>
8022ba98: 01 45        	li	a0, 0x0
;                         None
8022ba9a: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8022ba9e: 81 a0        	j	0x8022bade <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E+0xb4>
8022baa0: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                     if_zst!(mut self,
8022baa4: 13 85 85 00  	addi	a0, a1, 0x8
8022baa8: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as _
8022baac: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8022bab0: 88 61        	ld	a0, 0x0(a1)
8022bab2: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8022bab6: 21 05        	addi	a0, a0, 0x8
8022bab8: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8022babc: 03 35 84 f8  	ld	a0, -0x78(s0)
8022bac0: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
8022bac2: 09 a0        	j	0x8022bac4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E+0x9a>
8022bac4: 13 05 04 f8  	addi	a0, s0, -0x80
;                         Some(next_unchecked!(self))
8022bac8: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8022bacc: 03 35 04 f8  	ld	a0, -0x80(s0)
8022bad0: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
8022bad4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
8022bad8: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8022badc: 09 a0        	j	0x8022bade <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h09829f8f8c09b605E+0xb4>
;             }
8022bade: 03 35 84 f6  	ld	a0, -0x98(s0)
8022bae2: ea 70        	ld	ra, 0xb8(sp)
8022bae4: 4a 74        	ld	s0, 0xb0(sp)
8022bae6: 29 61        	addi	sp, sp, 0xc0
8022bae8: 82 80        	ret

000000008022baea <_ZN93_$LT$spin..mutex..ticket..TicketMutexGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h998ecfdd02cd1757E>:
;     fn deref_mut(&mut self) -> &mut T {
8022baea: 01 11        	addi	sp, sp, -0x20
8022baec: 06 ec        	sd	ra, 0x18(sp)
8022baee: 22 e8        	sd	s0, 0x10(sp)
8022baf0: 00 10        	addi	s0, sp, 0x20
8022baf2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.value
8022baf6: 08 65        	ld	a0, 0x8(a0)
8022baf8: e2 60        	ld	ra, 0x18(sp)
8022bafa: 42 64        	ld	s0, 0x10(sp)
;     }
8022bafc: 05 61        	addi	sp, sp, 0x20
8022bafe: 82 80        	ret

000000008022bb00 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc96430ec4796e8e5E>:
;     fn next(&mut self) -> Option<<I as Iterator>::Item> {
8022bb00: 01 11        	addi	sp, sp, -0x20
8022bb02: 06 ec        	sd	ra, 0x18(sp)
8022bb04: 22 e8        	sd	s0, 0x10(sp)
8022bb06: 00 10        	addi	s0, sp, 0x20
8022bb08: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.iter.next_back()
8022bb0c: 97 00 00 00  	auipc	ra, 0x0
8022bb10: e7 80 60 b0  	jalr	-0x4fa(ra) <_ZN4core4iter5range116_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$9next_back17h57cd4ce66b288dcbE>
8022bb14: e2 60        	ld	ra, 0x18(sp)
8022bb16: 42 64        	ld	s0, 0x10(sp)
;     }
8022bb18: 05 61        	addi	sp, sp, 0x20
8022bb1a: 82 80        	ret

000000008022bb1c <_ZN22buddy_system_allocator11linked_list10LinkedList8is_empty17h6ac8a69e1b25c069E>:
;     pub fn is_empty(&self) -> bool {
8022bb1c: 01 11        	addi	sp, sp, -0x20
8022bb1e: 06 ec        	sd	ra, 0x18(sp)
8022bb20: 22 e8        	sd	s0, 0x10(sp)
8022bb22: 00 10        	addi	s0, sp, 0x20
8022bb24: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.head.is_null()
8022bb28: 08 61        	ld	a0, 0x0(a0)
8022bb2a: 97 00 00 00  	auipc	ra, 0x0
8022bb2e: e7 80 60 9c  	jalr	-0x63a(ra) <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h730609e5ae6fdae8E>
8022bb32: e2 60        	ld	ra, 0x18(sp)
8022bb34: 42 64        	ld	s0, 0x10(sp)
;     }
8022bb36: 05 61        	addi	sp, sp, 0x20
8022bb38: 82 80        	ret

000000008022bb3a <_ZN22buddy_system_allocator11linked_list10LinkedList4push17hc40cab70080c727eE>:
;     pub unsafe fn push(&mut self, item: *mut usize) {
8022bb3a: 01 11        	addi	sp, sp, -0x20
8022bb3c: 06 ec        	sd	ra, 0x18(sp)
8022bb3e: 22 e8        	sd	s0, 0x10(sp)
8022bb40: 00 10        	addi	s0, sp, 0x20
8022bb42: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022bb46: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         *item = self.head as usize;
8022bb4a: 10 61        	ld	a2, 0x0(a0)
8022bb4c: 90 e1        	sd	a2, 0x0(a1)
;         self.head = item;
8022bb4e: 0c e1        	sd	a1, 0x0(a0)
8022bb50: e2 60        	ld	ra, 0x18(sp)
8022bb52: 42 64        	ld	s0, 0x10(sp)
;     }
8022bb54: 05 61        	addi	sp, sp, 0x20
8022bb56: 82 80        	ret

000000008022bb58 <_ZN22buddy_system_allocator11linked_list10LinkedList3pop17hf2dd87887f3bbb7dE>:
;     pub fn pop(&mut self) -> Option<*mut usize> {
8022bb58: 39 71        	addi	sp, sp, -0x40
8022bb5a: 06 fc        	sd	ra, 0x38(sp)
8022bb5c: 22 f8        	sd	s0, 0x30(sp)
8022bb5e: 80 00        	addi	s0, sp, 0x40
8022bb60: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022bb64: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         match self.is_empty() {
8022bb68: 97 00 00 00  	auipc	ra, 0x0
8022bb6c: e7 80 40 fb  	jalr	-0x4c(ra) <_ZN22buddy_system_allocator11linked_list10LinkedList8is_empty17h6ac8a69e1b25c069E>
8022bb70: 19 ed        	bnez	a0, 0x8022bb8e <_ZN22buddy_system_allocator11linked_list10LinkedList3pop17hf2dd87887f3bbb7dE+0x36>
8022bb72: 09 a0        	j	0x8022bb74 <_ZN22buddy_system_allocator11linked_list10LinkedList3pop17hf2dd87887f3bbb7dE+0x1c>
8022bb74: 03 36 84 fc  	ld	a2, -0x38(s0)
;                 let item = self.head;
8022bb78: 08 62        	ld	a0, 0x0(a2)
8022bb7a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                 self.head = unsafe { *item as *mut usize };
8022bb7e: 0c 61        	ld	a1, 0x0(a0)
8022bb80: 0c e2        	sd	a1, 0x0(a2)
;                 Some(item)
8022bb82: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022bb86: 05 45        	li	a0, 0x1
8022bb88: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             }
8022bb8c: 29 a0        	j	0x8022bb96 <_ZN22buddy_system_allocator11linked_list10LinkedList3pop17hf2dd87887f3bbb7dE+0x3e>
8022bb8e: 01 45        	li	a0, 0x0
;             true => None,
8022bb90: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022bb94: 09 a0        	j	0x8022bb96 <_ZN22buddy_system_allocator11linked_list10LinkedList3pop17hf2dd87887f3bbb7dE+0x3e>
;     }
8022bb96: 03 35 04 fd  	ld	a0, -0x30(s0)
8022bb9a: 83 35 84 fd  	ld	a1, -0x28(s0)
8022bb9e: e2 70        	ld	ra, 0x38(sp)
8022bba0: 42 74        	ld	s0, 0x30(sp)
8022bba2: 21 61        	addi	sp, sp, 0x40
8022bba4: 82 80        	ret

000000008022bba6 <_ZN22buddy_system_allocator11linked_list10LinkedList8iter_mut17h4f261e220cf0e8a5E>:
;     pub fn iter_mut(&mut self) -> IterMut {
8022bba6: 01 11        	addi	sp, sp, -0x20
8022bba8: 06 ec        	sd	ra, 0x18(sp)
8022bbaa: 22 e8        	sd	s0, 0x10(sp)
8022bbac: 00 10        	addi	s0, sp, 0x20
8022bbae: 2e 86        	mv	a2, a1
8022bbb0: aa 85        	mv	a1, a0
8022bbb2: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             curr: self.head,
8022bbb6: 08 62        	ld	a0, 0x0(a2)
;         IterMut {
8022bbb8: 90 e1        	sd	a2, 0x0(a1)
8022bbba: 90 e5        	sd	a2, 0x8(a1)
8022bbbc: 88 e9        	sd	a0, 0x10(a1)
8022bbbe: e2 60        	ld	ra, 0x18(sp)
8022bbc0: 42 64        	ld	s0, 0x10(sp)
;     }
8022bbc2: 05 61        	addi	sp, sp, 0x20
8022bbc4: 82 80        	ret

000000008022bbc6 <_ZN22buddy_system_allocator11linked_list8ListNode3pop17he575af68fd5b1be5E>:
;     pub fn pop(self) -> *mut usize {
8022bbc6: 01 11        	addi	sp, sp, -0x20
8022bbc8: 06 ec        	sd	ra, 0x18(sp)
8022bbca: 22 e8        	sd	s0, 0x10(sp)
8022bbcc: 00 10        	addi	s0, sp, 0x20
8022bbce: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022bbd2: 23 34 b4 fe  	sd	a1, -0x18(s0)
;             *(self.prev) = *(self.curr);
8022bbd6: 03 35 84 fe  	ld	a0, -0x18(s0)
8022bbda: 08 61        	ld	a0, 0x0(a0)
8022bbdc: 83 35 04 fe  	ld	a1, -0x20(s0)
8022bbe0: 88 e1        	sd	a0, 0x0(a1)
;         self.curr
8022bbe2: 03 35 84 fe  	ld	a0, -0x18(s0)
8022bbe6: e2 60        	ld	ra, 0x18(sp)
8022bbe8: 42 64        	ld	s0, 0x10(sp)
;     }
8022bbea: 05 61        	addi	sp, sp, 0x20
8022bbec: 82 80        	ret

000000008022bbee <_ZN22buddy_system_allocator11linked_list8ListNode5value17h9397258cba69b183E>:
;     pub fn value(&self) -> *mut usize {
8022bbee: 01 11        	addi	sp, sp, -0x20
8022bbf0: 06 ec        	sd	ra, 0x18(sp)
8022bbf2: 22 e8        	sd	s0, 0x10(sp)
8022bbf4: 00 10        	addi	s0, sp, 0x20
8022bbf6: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.curr
8022bbfa: 08 65        	ld	a0, 0x8(a0)
8022bbfc: e2 60        	ld	ra, 0x18(sp)
8022bbfe: 42 64        	ld	s0, 0x10(sp)
;     }
8022bc00: 05 61        	addi	sp, sp, 0x20
8022bc02: 82 80        	ret

000000008022bc04 <_ZN103_$LT$buddy_system_allocator..linked_list..IterMut$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he951060a0edf13a4E>:
;     fn next(&mut self) -> Option<Self::Item> {
8022bc04: 39 71        	addi	sp, sp, -0x40
8022bc06: 06 fc        	sd	ra, 0x38(sp)
8022bc08: 22 f8        	sd	s0, 0x30(sp)
8022bc0a: 80 00        	addi	s0, sp, 0x40
8022bc0c: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022bc10: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022bc14: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         if self.curr.is_null() {
8022bc18: 88 69        	ld	a0, 0x10(a1)
8022bc1a: 97 00 00 00  	auipc	ra, 0x0
8022bc1e: e7 80 60 8d  	jalr	-0x72a(ra) <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h730609e5ae6fdae8E>
8022bc22: 15 e9        	bnez	a0, 0x8022bc56 <_ZN103_$LT$buddy_system_allocator..linked_list..IterMut$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he951060a0edf13a4E+0x52>
8022bc24: 09 a0        	j	0x8022bc26 <_ZN103_$LT$buddy_system_allocator..linked_list..IterMut$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he951060a0edf13a4E+0x22>
8022bc26: 83 35 04 fd  	ld	a1, -0x30(s0)
8022bc2a: 03 36 84 fc  	ld	a2, -0x38(s0)
;                 prev: self.prev,
8022bc2e: 14 66        	ld	a3, 0x8(a2)
;                 curr: self.curr,
8022bc30: 08 6a        	ld	a0, 0x10(a2)
;             let res = ListNode {
8022bc32: 23 3c d4 fc  	sd	a3, -0x28(s0)
8022bc36: 23 30 a4 fe  	sd	a0, -0x20(s0)
;             self.prev = self.curr;
8022bc3a: 08 6a        	ld	a0, 0x10(a2)
8022bc3c: 08 e6        	sd	a0, 0x8(a2)
;             self.curr = unsafe { *self.curr as *mut usize };
8022bc3e: 08 6a        	ld	a0, 0x10(a2)
8022bc40: 08 61        	ld	a0, 0x0(a0)
8022bc42: 08 ea        	sd	a0, 0x10(a2)
;             Some(res)
8022bc44: 03 36 84 fd  	ld	a2, -0x28(s0)
8022bc48: 03 35 04 fe  	ld	a0, -0x20(s0)
8022bc4c: 90 e5        	sd	a2, 0x8(a1)
8022bc4e: 88 e9        	sd	a0, 0x10(a1)
8022bc50: 05 45        	li	a0, 0x1
8022bc52: 88 e1        	sd	a0, 0x0(a1)
;         if self.curr.is_null() {
8022bc54: 31 a0        	j	0x8022bc60 <_ZN103_$LT$buddy_system_allocator..linked_list..IterMut$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he951060a0edf13a4E+0x5c>
8022bc56: 83 35 04 fd  	ld	a1, -0x30(s0)
8022bc5a: 01 45        	li	a0, 0x0
;             None
8022bc5c: 88 e1        	sd	a0, 0x0(a1)
;         if self.curr.is_null() {
8022bc5e: 09 a0        	j	0x8022bc60 <_ZN103_$LT$buddy_system_allocator..linked_list..IterMut$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he951060a0edf13a4E+0x5c>
8022bc60: e2 70        	ld	ra, 0x38(sp)
8022bc62: 42 74        	ld	s0, 0x30(sp)
;     }
8022bc64: 21 61        	addi	sp, sp, 0x40
8022bc66: 82 80        	ret

000000008022bc68 <_ZN22buddy_system_allocator4Heap11add_to_heap17h7460bb32e14f2153E>:
;     pub unsafe fn add_to_heap(&mut self, mut start: usize, mut end: usize) {
8022bc68: 51 71        	addi	sp, sp, -0xf0
8022bc6a: 86 f5        	sd	ra, 0xe8(sp)
8022bc6c: a2 f1        	sd	s0, 0xe0(sp)
8022bc6e: 80 19        	addi	s0, sp, 0xf0
8022bc70: 23 3c a4 f8  	sd	a0, -0x68(s0)
8022bc74: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022bc78: 23 38 c4 fa  	sd	a2, -0x50(s0)
8022bc7c: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         start = (start + size_of::<usize>() - 1) & (!size_of::<usize>() + 1);
8022bc80: 83 35 84 fa  	ld	a1, -0x58(s0)
8022bc84: 13 85 85 00  	addi	a0, a1, 0x8
8022bc88: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022bc8c: 63 6b b5 00  	bltu	a0, a1, 0x8022bca2 <.Lpcrel_hi83>
8022bc90: 09 a0        	j	0x8022bc92 <_ZN22buddy_system_allocator4Heap11add_to_heap17h7460bb32e14f2153E+0x2a>
8022bc92: 03 35 04 fa  	ld	a0, -0x60(s0)
;         start = (start + size_of::<usize>() - 1) & (!size_of::<usize>() + 1);
8022bc96: 93 05 f5 ff  	addi	a1, a0, -0x1
8022bc9a: 23 38 b4 f8  	sd	a1, -0x70(s0)
8022bc9e: 0d c5        	beqz	a0, 0x8022bcc8 <.Lpcrel_hi85>
8022bca0: 31 a8        	j	0x8022bcbc <.Lpcrel_hi84+0x12>

000000008022bca2 <.Lpcrel_hi83>:
8022bca2: 17 f5 00 00  	auipc	a0, 0xf
8022bca6: 13 05 e5 a1  	addi	a0, a0, -0x5e2

000000008022bcaa <.Lpcrel_hi84>:
8022bcaa: 97 f5 00 00  	auipc	a1, 0xf
8022bcae: 13 86 65 c7  	addi	a2, a1, -0x38a
8022bcb2: f1 45        	li	a1, 0x1c
8022bcb4: 97 40 00 00  	auipc	ra, 0x4
8022bcb8: e7 80 40 56  	jalr	0x564(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022bcbc: 61 55        	li	a0, -0x8
8022bcbe: 23 34 a4 f8  	sd	a0, -0x78(s0)
8022bcc2: 01 45        	li	a0, 0x0
;         start = (start + size_of::<usize>() - 1) & (!size_of::<usize>() + 1);
8022bcc4: 29 e1        	bnez	a0, 0x8022bd06 <.Lpcrel_hi87>
8022bcc6: 39 a8        	j	0x8022bce4 <.Lpcrel_hi86+0x14>

000000008022bcc8 <.Lpcrel_hi85>:
8022bcc8: 17 f5 00 00  	auipc	a0, 0xf
8022bccc: 13 05 85 b9  	addi	a0, a0, -0x468

000000008022bcd0 <.Lpcrel_hi86>:
8022bcd0: 97 f5 00 00  	auipc	a1, 0xf
8022bcd4: 13 86 85 c6  	addi	a2, a1, -0x398
8022bcd8: 93 05 10 02  	li	a1, 0x21
8022bcdc: 97 40 00 00  	auipc	ra, 0x4
8022bce0: e7 80 c0 53  	jalr	0x53c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022bce4: 03 35 04 f9  	ld	a0, -0x70(s0)
8022bce8: 83 35 84 f8  	ld	a1, -0x78(s0)
;         start = (start + size_of::<usize>() - 1) & (!size_of::<usize>() + 1);
8022bcec: 6d 8d        	and	a0, a0, a1
8022bcee: 23 34 a4 fa  	sd	a0, -0x58(s0)
;         end = end & (!size_of::<usize>() + 1);
8022bcf2: 03 35 04 fb  	ld	a0, -0x50(s0)
8022bcf6: 23 3c a4 f6  	sd	a0, -0x88(s0)
8022bcfa: 61 55        	li	a0, -0x8
8022bcfc: 23 30 a4 f8  	sd	a0, -0x80(s0)
8022bd00: 01 45        	li	a0, 0x0
8022bd02: 0d ed        	bnez	a0, 0x8022bd3c <.Lpcrel_hi89>
8022bd04: 31 a8        	j	0x8022bd20 <.Lpcrel_hi88+0x12>

000000008022bd06 <.Lpcrel_hi87>:
;         start = (start + size_of::<usize>() - 1) & (!size_of::<usize>() + 1);
8022bd06: 17 f5 00 00  	auipc	a0, 0xf
8022bd0a: 13 05 a5 9b  	addi	a0, a0, -0x646

000000008022bd0e <.Lpcrel_hi88>:
8022bd0e: 97 f5 00 00  	auipc	a1, 0xf
8022bd12: 13 86 25 c4  	addi	a2, a1, -0x3be
8022bd16: f1 45        	li	a1, 0x1c
8022bd18: 97 40 00 00  	auipc	ra, 0x4
8022bd1c: e7 80 00 50  	jalr	0x500(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022bd20: 03 35 84 f7  	ld	a0, -0x88(s0)
8022bd24: 83 35 04 f8  	ld	a1, -0x80(s0)
;         end = end & (!size_of::<usize>() + 1);
8022bd28: 6d 8d        	and	a0, a0, a1
8022bd2a: 23 38 a4 fa  	sd	a0, -0x50(s0)
;         assert!(start <= end);
8022bd2e: 83 35 84 fa  	ld	a1, -0x58(s0)
8022bd32: 03 35 04 fb  	ld	a0, -0x50(s0)
8022bd36: 63 7d b5 02  	bgeu	a0, a1, 0x8022bd70 <.Lpcrel_hi92+0x12>
8022bd3a: 31 a8        	j	0x8022bd56 <.Lpcrel_hi91>

000000008022bd3c <.Lpcrel_hi89>:
;         end = end & (!size_of::<usize>() + 1);
8022bd3c: 17 f5 00 00  	auipc	a0, 0xf
8022bd40: 13 05 45 98  	addi	a0, a0, -0x67c

000000008022bd44 <.Lpcrel_hi90>:
8022bd44: 97 f5 00 00  	auipc	a1, 0xf
8022bd48: 13 86 45 c2  	addi	a2, a1, -0x3dc
8022bd4c: f1 45        	li	a1, 0x1c
8022bd4e: 97 40 00 00  	auipc	ra, 0x4
8022bd52: e7 80 a0 4c  	jalr	0x4ca(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022bd56 <.Lpcrel_hi91>:
;         assert!(start <= end);
8022bd56: 17 f5 00 00  	auipc	a0, 0xf
8022bd5a: 13 05 a5 ae  	addi	a0, a0, -0x516

000000008022bd5e <.Lpcrel_hi92>:
8022bd5e: 97 f5 00 00  	auipc	a1, 0xf
8022bd62: 13 86 25 c2  	addi	a2, a1, -0x3de
8022bd66: f9 45        	li	a1, 0x1e
8022bd68: 97 40 00 00  	auipc	ra, 0x4
8022bd6c: e7 80 00 4b  	jalr	0x4b0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022bd70: 01 45        	li	a0, 0x0
;         let mut total = 0;
8022bd72: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         let mut current_start = start;
8022bd76: 03 35 84 fa  	ld	a0, -0x58(s0)
8022bd7a: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         while current_start + size_of::<usize>() <= end {
8022bd7e: 09 a0        	j	0x8022bd80 <.Lpcrel_hi92+0x22>
8022bd80: 83 35 04 fc  	ld	a1, -0x40(s0)
8022bd84: 13 85 85 00  	addi	a0, a1, 0x8
8022bd88: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022bd8c: 63 6a b5 00  	bltu	a0, a1, 0x8022bda0 <.Lpcrel_hi93>
8022bd90: 09 a0        	j	0x8022bd92 <.Lpcrel_hi92+0x34>
8022bd92: 83 35 04 f7  	ld	a1, -0x90(s0)
;         while current_start + size_of::<usize>() <= end {
8022bd96: 03 35 04 fb  	ld	a0, -0x50(s0)
8022bd9a: 63 7c b5 02  	bgeu	a0, a1, 0x8022bdd2 <.Lpcrel_hi94+0x2a>
8022bd9e: 31 a8        	j	0x8022bdba <.Lpcrel_hi94+0x12>

000000008022bda0 <.Lpcrel_hi93>:
8022bda0: 17 f5 00 00  	auipc	a0, 0xf
8022bda4: 13 05 05 92  	addi	a0, a0, -0x6e0

000000008022bda8 <.Lpcrel_hi94>:
8022bda8: 97 f5 00 00  	auipc	a1, 0xf
8022bdac: 13 86 05 bf  	addi	a2, a1, -0x410
8022bdb0: f1 45        	li	a1, 0x1c
8022bdb2: 97 40 00 00  	auipc	ra, 0x4
8022bdb6: e7 80 60 46  	jalr	0x466(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022bdba: 83 35 84 f9  	ld	a1, -0x68(s0)
;         self.total += total;
8022bdbe: 03 35 84 fb  	ld	a0, -0x48(s0)
8022bdc2: 83 b5 05 11  	ld	a1, 0x110(a1)
8022bdc6: 2e 95        	add	a0, a0, a1
8022bdc8: 23 34 a4 f6  	sd	a0, -0x98(s0)
8022bdcc: 63 69 b5 02  	bltu	a0, a1, 0x8022bdfe <.Lpcrel_hi95>
8022bdd0: 29 a8        	j	0x8022bdea <.Lpcrel_hi94+0x42>
;             let lowbit = current_start & (!current_start + 1);
8022bdd2: 83 35 04 fc  	ld	a1, -0x40(s0)
8022bdd6: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8022bdda: 01 45        	li	a0, 0x0
8022bddc: b3 05 b5 40  	sub	a1, a0, a1
8022bde0: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022bde4: 63 7e b5 04  	bgeu	a0, a1, 0x8022be40 <.Lpcrel_hi97>
8022bde8: 05 a8        	j	0x8022be18 <.Lpcrel_hi96+0x12>
8022bdea: 03 35 84 f6  	ld	a0, -0x98(s0)
8022bdee: 83 35 84 f9  	ld	a1, -0x68(s0)
;         self.total += total;
8022bdf2: 23 b8 a5 10  	sd	a0, 0x110(a1)
8022bdf6: ae 70        	ld	ra, 0xe8(sp)
8022bdf8: 0e 74        	ld	s0, 0xe0(sp)
;     }
8022bdfa: 6d 61        	addi	sp, sp, 0xf0
8022bdfc: 82 80        	ret

000000008022bdfe <.Lpcrel_hi95>:
;         self.total += total;
8022bdfe: 17 f5 00 00  	auipc	a0, 0xf
8022be02: 13 05 25 8c  	addi	a0, a0, -0x73e

000000008022be06 <.Lpcrel_hi96>:
8022be06: 97 f5 00 00  	auipc	a1, 0xf
8022be0a: 13 86 a5 ba  	addi	a2, a1, -0x456
8022be0e: f1 45        	li	a1, 0x1c
8022be10: 97 40 00 00  	auipc	ra, 0x4
8022be14: e7 80 80 40  	jalr	0x408(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022be18: 03 35 84 f5  	ld	a0, -0xa8(s0)
8022be1c: 83 35 04 f6  	ld	a1, -0xa0(s0)
;             let lowbit = current_start & (!current_start + 1);
8022be20: 6d 8d        	and	a0, a0, a1
8022be22: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022be26: 23 38 a4 fc  	sd	a0, -0x30(s0)
;             let size = min(lowbit, prev_power_of_two(end - current_start));
8022be2a: 03 35 04 fb  	ld	a0, -0x50(s0)
8022be2e: 83 35 04 fc  	ld	a1, -0x40(s0)
8022be32: 33 06 b5 40  	sub	a2, a0, a1
8022be36: 23 38 c4 f4  	sd	a2, -0xb0(s0)
8022be3a: 63 6a b5 04  	bltu	a0, a1, 0x8022be8e <.Lpcrel_hi99>
8022be3e: 31 a8        	j	0x8022be5a <.Lpcrel_hi98+0x12>

000000008022be40 <.Lpcrel_hi97>:
;             let lowbit = current_start & (!current_start + 1);
8022be40: 17 f5 00 00  	auipc	a0, 0xf
8022be44: 13 05 05 88  	addi	a0, a0, -0x780

000000008022be48 <.Lpcrel_hi98>:
8022be48: 97 f5 00 00  	auipc	a1, 0xf
8022be4c: 13 86 05 b8  	addi	a2, a1, -0x480
8022be50: f1 45        	li	a1, 0x1c
8022be52: 97 40 00 00  	auipc	ra, 0x4
8022be56: e7 80 60 3c  	jalr	0x3c6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022be5a: 03 35 04 f5  	ld	a0, -0xb0(s0)
;             let size = min(lowbit, prev_power_of_two(end - current_start));
8022be5e: 97 10 00 00  	auipc	ra, 0x1
8022be62: e7 80 40 c2  	jalr	-0x3dc(ra) <_ZN22buddy_system_allocator17prev_power_of_two17h5de0028518631452E>
8022be66: aa 85        	mv	a1, a0
8022be68: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022be6c: 97 f0 ff ff  	auipc	ra, 0xfffff
8022be70: e7 80 c0 3f  	jalr	0x3fc(ra) <ekernel+0xffcde268>
8022be74: aa 85        	mv	a1, a0
8022be76: 23 3c b4 f2  	sd	a1, -0xc8(s0)
8022be7a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             total += size;
8022be7e: 83 35 84 fb  	ld	a1, -0x48(s0)
8022be82: 2e 95        	add	a0, a0, a1
8022be84: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022be88: 63 64 b5 08  	bltu	a0, a1, 0x8022bf10 <.Lpcrel_hi103>
8022be8c: 39 a8        	j	0x8022beaa <.Lpcrel_hi100+0x14>

000000008022be8e <.Lpcrel_hi99>:
;             let size = min(lowbit, prev_power_of_two(end - current_start));
8022be8e: 17 f5 00 00  	auipc	a0, 0xf
8022be92: 13 05 25 9d  	addi	a0, a0, -0x62e

000000008022be96 <.Lpcrel_hi100>:
8022be96: 97 f5 00 00  	auipc	a1, 0xf
8022be9a: 13 86 a5 b4  	addi	a2, a1, -0x4b6
8022be9e: 93 05 10 02  	li	a1, 0x21
8022bea2: 97 40 00 00  	auipc	ra, 0x4
8022bea6: e7 80 60 37  	jalr	0x376(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022beaa: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022beae: 83 35 04 f4  	ld	a1, -0xc0(s0)
;             total += size;
8022beb2: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022beb6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022beba: 81 45        	li	a1, 0x0
;             intrinsics::cttz(self) as u32
8022bebc: 89 8d        	sub	a1, a1, a0
8022bebe: e9 8d        	and	a1, a1, a0

000000008022bec0 <.Lpcrel_hi101>:
8022bec0: 17 a6 01 00  	auipc	a2, 0x1a
8022bec4: 13 06 06 06  	addi	a2, a2, 0x60
8022bec8: 10 62        	ld	a2, 0x0(a2)
8022beca: b3 85 c5 02  	mul	a1, a1, a2
8022bece: 13 d6 a5 03  	srli	a2, a1, 0x3a

000000008022bed2 <.Lpcrel_hi102>:
8022bed2: 97 e5 00 00  	auipc	a1, 0xe
8022bed6: 93 85 e5 72  	addi	a1, a1, 0x72e
8022beda: b2 95        	add	a1, a1, a2
8022bedc: 83 c5 05 00  	lbu	a1, 0x0(a1)
8022bee0: 13 06 00 04  	li	a2, 0x40
8022bee4: 23 34 c4 f2  	sd	a2, -0xd8(s0)
8022bee8: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8022beec: 09 e5        	bnez	a0, 0x8022bef6 <.Lpcrel_hi102+0x24>
8022beee: 03 35 84 f2  	ld	a0, -0xd8(s0)
8022bef2: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8022bef6: 03 35 04 f3  	ld	a0, -0xd0(s0)
;             intrinsics::cttz(self) as u32
8022befa: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022befe: 03 65 84 fe  	lwu	a0, -0x18(s0)
8022bf02: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8022bf06: 93 05 00 02  	li	a1, 0x20
;             self.free_list[size.trailing_zeros() as usize].push(current_start as *mut usize);
8022bf0a: 63 60 b5 02  	bltu	a0, a1, 0x8022bf2a <.Lpcrel_hi104+0x12>
8022bf0e: a1 a0        	j	0x8022bf56 <.Lpcrel_hi104+0x3e>

000000008022bf10 <.Lpcrel_hi103>:
;             total += size;
8022bf10: 17 e5 00 00  	auipc	a0, 0xe
8022bf14: 13 05 05 7b  	addi	a0, a0, 0x7b0

000000008022bf18 <.Lpcrel_hi104>:
8022bf18: 97 f5 00 00  	auipc	a1, 0xf
8022bf1c: 13 86 05 ae  	addi	a2, a1, -0x520
8022bf20: f1 45        	li	a1, 0x1c
8022bf22: 97 40 00 00  	auipc	ra, 0x4
8022bf26: e7 80 60 2f  	jalr	0x2f6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022bf2a: 03 35 84 f9  	ld	a0, -0x68(s0)
8022bf2e: 83 35 04 f2  	ld	a1, -0xe0(s0)
;             self.free_list[size.trailing_zeros() as usize].push(current_start as *mut usize);
8022bf32: 8e 05        	slli	a1, a1, 0x3
8022bf34: 2e 95        	add	a0, a0, a1
8022bf36: 83 35 04 fc  	ld	a1, -0x40(s0)
8022bf3a: 97 00 00 00  	auipc	ra, 0x0
8022bf3e: e7 80 00 c0  	jalr	-0x400(ra) <_ZN22buddy_system_allocator11linked_list10LinkedList4push17hc40cab70080c727eE>
8022bf42: 03 35 84 f3  	ld	a0, -0xc8(s0)
;             current_start += size;
8022bf46: 83 35 04 fc  	ld	a1, -0x40(s0)
8022bf4a: 2e 95        	add	a0, a0, a1
8022bf4c: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8022bf50: 63 64 b5 02  	bltu	a0, a1, 0x8022bf78 <.Lpcrel_hi106>
8022bf54: 29 a8        	j	0x8022bf6e <.Lpcrel_hi105+0x14>
8022bf56: 03 35 04 f2  	ld	a0, -0xe0(s0)

000000008022bf5a <.Lpcrel_hi105>:
;             self.free_list[size.trailing_zeros() as usize].push(current_start as *mut usize);
8022bf5a: 97 f5 00 00  	auipc	a1, 0xf
8022bf5e: 13 86 65 ab  	addi	a2, a1, -0x54a
8022bf62: 93 05 00 02  	li	a1, 0x20
8022bf66: 97 40 00 00  	auipc	ra, 0x4
8022bf6a: e7 80 a0 34  	jalr	0x34a(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8022bf6e: 03 35 84 f1  	ld	a0, -0xe8(s0)
;             current_start += size;
8022bf72: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         while current_start + size_of::<usize>() <= end {
8022bf76: 29 b5        	j	0x8022bd80 <.Lpcrel_hi92+0x22>

000000008022bf78 <.Lpcrel_hi106>:
;             current_start += size;
8022bf78: 17 e5 00 00  	auipc	a0, 0xe
8022bf7c: 13 05 85 74  	addi	a0, a0, 0x748

000000008022bf80 <.Lpcrel_hi107>:
8022bf80: 97 f5 00 00  	auipc	a1, 0xf
8022bf84: 13 86 85 aa  	addi	a2, a1, -0x558
8022bf88: f1 45        	li	a1, 0x1c
8022bf8a: 97 40 00 00  	auipc	ra, 0x4
8022bf8e: e7 80 e0 28  	jalr	0x28e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022bf92 <_ZN22buddy_system_allocator4Heap4init17h0db55cc383a9fc70E>:
;     pub unsafe fn init(&mut self, start: usize, size: usize) {
8022bf92: 39 71        	addi	sp, sp, -0x40
8022bf94: 06 fc        	sd	ra, 0x38(sp)
8022bf96: 22 f8        	sd	s0, 0x30(sp)
8022bf98: 80 00        	addi	s0, sp, 0x40
8022bf9a: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022bf9e: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022bfa2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022bfa6: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022bfaa: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         self.add_to_heap(start, start + size);
8022bfae: 33 85 c5 00  	add	a0, a1, a2
8022bfb2: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022bfb6: 63 61 b5 02  	bltu	a0, a1, 0x8022bfd8 <.Lpcrel_hi108>
8022bfba: 09 a0        	j	0x8022bfbc <_ZN22buddy_system_allocator4Heap4init17h0db55cc383a9fc70E+0x2a>
8022bfbc: 03 36 04 fd  	ld	a2, -0x30(s0)
8022bfc0: 83 35 04 fc  	ld	a1, -0x40(s0)
8022bfc4: 03 35 84 fc  	ld	a0, -0x38(s0)
;         self.add_to_heap(start, start + size);
8022bfc8: 97 00 00 00  	auipc	ra, 0x0
8022bfcc: e7 80 00 ca  	jalr	-0x360(ra) <_ZN22buddy_system_allocator4Heap11add_to_heap17h7460bb32e14f2153E>
8022bfd0: e2 70        	ld	ra, 0x38(sp)
8022bfd2: 42 74        	ld	s0, 0x30(sp)
;     }
8022bfd4: 21 61        	addi	sp, sp, 0x40
8022bfd6: 82 80        	ret

000000008022bfd8 <.Lpcrel_hi108>:
;         self.add_to_heap(start, start + size);
8022bfd8: 17 e5 00 00  	auipc	a0, 0xe
8022bfdc: 13 05 85 6e  	addi	a0, a0, 0x6e8

000000008022bfe0 <.Lpcrel_hi109>:
8022bfe0: 97 f5 00 00  	auipc	a1, 0xf
8022bfe4: 13 86 05 a6  	addi	a2, a1, -0x5a0
8022bfe8: f1 45        	li	a1, 0x1c
8022bfea: 97 40 00 00  	auipc	ra, 0x4
8022bfee: e7 80 e0 22  	jalr	0x22e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022bff2 <_ZN22buddy_system_allocator4Heap5alloc17h4e4c78bebee3fff0E>:
;     pub fn alloc(&mut self, layout: Layout) -> Result<NonNull<u8>, ()> {
8022bff2: 65 71        	addi	sp, sp, -0x190
8022bff4: 06 e7        	sd	ra, 0x188(sp)
8022bff6: 22 e3        	sd	s0, 0x180(sp)
8022bff8: 00 0b        	addi	s0, sp, 0x190
8022bffa: 23 34 a4 ee  	sd	a0, -0x118(s0)
8022bffe: 23 3c b4 f0  	sd	a1, -0xe8(s0)
8022c002: 23 30 c4 f2  	sd	a2, -0xe0(s0)
8022c006: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022c00a: 13 05 84 f1  	addi	a0, s0, -0xe8
8022c00e: 23 38 a4 ee  	sd	a0, -0x110(s0)
;             layout.size().next_power_of_two(),
8022c012: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c016: e7 80 c0 74  	jalr	0x74c(ra) <ekernel+0xffcde75e>
8022c01a: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c01e: e7 80 60 3b  	jalr	0x3b6(ra) <ekernel+0xffcde3d0>
8022c022: aa 85        	mv	a1, a0
8022c024: 03 35 04 ef  	ld	a0, -0x110(s0)
8022c028: 23 3c b4 ee  	sd	a1, -0x108(s0)
;             max(layout.align(), size_of::<usize>()),
8022c02c: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c030: e7 80 80 74  	jalr	0x748(ra) <ekernel+0xffcde774>
8022c034: a1 45        	li	a1, 0x8
8022c036: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c03a: e7 80 20 21  	jalr	0x212(ra) <ekernel+0xffcde248>
8022c03e: aa 85        	mv	a1, a0
8022c040: 03 35 84 ef  	ld	a0, -0x108(s0)
;         let size = max(
8022c044: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c048: e7 80 40 20  	jalr	0x204(ra) <ekernel+0xffcde248>
8022c04c: aa 85        	mv	a1, a0
8022c04e: 23 30 b4 f0  	sd	a1, -0x100(s0)
8022c052: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022c056: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022c05a: 81 45        	li	a1, 0x0
;             intrinsics::cttz(self) as u32
8022c05c: 89 8d        	sub	a1, a1, a0
8022c05e: e9 8d        	and	a1, a1, a0

000000008022c060 <.Lpcrel_hi110>:
8022c060: 17 a6 01 00  	auipc	a2, 0x1a
8022c064: 13 06 86 ec  	addi	a2, a2, -0x138
8022c068: 10 62        	ld	a2, 0x0(a2)
8022c06a: b3 85 c5 02  	mul	a1, a1, a2
8022c06e: 13 d6 a5 03  	srli	a2, a1, 0x3a

000000008022c072 <.Lpcrel_hi111>:
8022c072: 97 e5 00 00  	auipc	a1, 0xe
8022c076: 93 85 e5 5c  	addi	a1, a1, 0x5ce
8022c07a: b2 95        	add	a1, a1, a2
8022c07c: 83 c5 05 00  	lbu	a1, 0x0(a1)
8022c080: 13 06 00 04  	li	a2, 0x40
8022c084: 23 34 c4 f0  	sd	a2, -0xf8(s0)
8022c088: 23 38 b4 f0  	sd	a1, -0xf0(s0)
8022c08c: 09 e5        	bnez	a0, 0x8022c096 <.Lpcrel_hi111+0x24>
8022c08e: 03 35 84 f0  	ld	a0, -0xf8(s0)
8022c092: 23 38 a4 f0  	sd	a0, -0xf0(s0)
8022c096: 03 35 04 f1  	ld	a0, -0xf0(s0)
;             intrinsics::cttz(self) as u32
8022c09a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022c09e: 03 65 84 fe  	lwu	a0, -0x18(s0)
8022c0a2: 23 30 a4 ee  	sd	a0, -0x120(s0)
;         let class = size.trailing_zeros() as usize;
8022c0a6: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         for i in class..self.free_list.len() {
8022c0aa: 23 38 a4 f2  	sd	a0, -0xd0(s0)
8022c0ae: 13 05 00 02  	li	a0, 0x20
8022c0b2: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022c0b6: 03 35 04 f3  	ld	a0, -0xd0(s0)
8022c0ba: 83 35 84 f3  	ld	a1, -0xc8(s0)
8022c0be: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c0c2: e7 80 80 7f  	jalr	0x7f8(ra) <ekernel+0xffcde8b6>
8022c0c6: 23 30 a4 f4  	sd	a0, -0xc0(s0)
8022c0ca: 23 34 b4 f4  	sd	a1, -0xb8(s0)
8022c0ce: 09 a0        	j	0x8022c0d0 <.Lpcrel_hi111+0x5e>
8022c0d0: 13 05 04 f4  	addi	a0, s0, -0xc0
;         for i in class..self.free_list.len() {
8022c0d4: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c0d8: e7 80 20 52  	jalr	0x522(ra) <ekernel+0xffcde5f6>
8022c0dc: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8022c0e0: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8022c0e4: 03 35 04 f5  	ld	a0, -0xb0(s0)
8022c0e8: 11 e5        	bnez	a0, 0x8022c0f4 <.Lpcrel_hi111+0x82>
8022c0ea: 09 a0        	j	0x8022c0ec <.Lpcrel_hi111+0x7a>
8022c0ec: 01 45        	li	a0, 0x0
;         Err(())
8022c0ee: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;     }
8022c0f2: 21 a8        	j	0x8022c10a <.Lpcrel_hi111+0x98>
;         for i in class..self.free_list.len() {
8022c0f4: 03 35 84 f5  	ld	a0, -0xa8(s0)
8022c0f8: 23 3c a4 ec  	sd	a0, -0x128(s0)
8022c0fc: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022c100: 93 05 00 02  	li	a1, 0x20
;             if !self.free_list[i].is_empty() {
8022c104: 63 69 b5 00  	bltu	a0, a1, 0x8022c116 <.Lpcrel_hi111+0xa4>
8022c108: 1d a0        	j	0x8022c12e <.Lpcrel_hi111+0xbc>
;     }
8022c10a: 03 35 84 f2  	ld	a0, -0xd8(s0)
8022c10e: ba 60        	ld	ra, 0x188(sp)
8022c110: 1a 64        	ld	s0, 0x180(sp)
8022c112: 59 61        	addi	sp, sp, 0x190
8022c114: 82 80        	ret
8022c116: 03 35 84 ee  	ld	a0, -0x118(s0)
8022c11a: 83 35 84 ed  	ld	a1, -0x128(s0)
;             if !self.free_list[i].is_empty() {
8022c11e: 8e 05        	slli	a1, a1, 0x3
8022c120: 2e 95        	add	a0, a0, a1
8022c122: 97 00 00 00  	auipc	ra, 0x0
8022c126: e7 80 a0 9f  	jalr	-0x606(ra) <_ZN22buddy_system_allocator11linked_list10LinkedList8is_empty17h6ac8a69e1b25c069E>
8022c12a: 5d f1        	bnez	a0, 0x8022c0d0 <.Lpcrel_hi111+0x5e>
8022c12c: 29 a8        	j	0x8022c146 <.Lpcrel_hi112+0x14>
8022c12e: 03 35 84 ed  	ld	a0, -0x128(s0)

000000008022c132 <.Lpcrel_hi112>:
;             if !self.free_list[i].is_empty() {
8022c132: 97 f5 00 00  	auipc	a1, 0xf
8022c136: 13 86 65 92  	addi	a2, a1, -0x6da
8022c13a: 93 05 00 02  	li	a1, 0x20
8022c13e: 97 40 00 00  	auipc	ra, 0x4
8022c142: e7 80 20 17  	jalr	0x172(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8022c146: 03 35 04 ee  	ld	a0, -0x120(s0)
;                 for j in (class + 1..i + 1).rev() {
8022c14a: 05 05        	addi	a0, a0, 0x1
8022c14c: 23 38 a4 ec  	sd	a0, -0x130(s0)
8022c150: 09 c9        	beqz	a0, 0x8022c162 <.Lpcrel_hi113>
8022c152: 09 a0        	j	0x8022c154 <.Lpcrel_hi112+0x22>
8022c154: 03 35 84 ed  	ld	a0, -0x128(s0)
;                 for j in (class + 1..i + 1).rev() {
8022c158: 05 05        	addi	a0, a0, 0x1
8022c15a: 23 34 a4 ec  	sd	a0, -0x138(s0)
8022c15e: 21 c9        	beqz	a0, 0x8022c1ae <.Lpcrel_hi115>
8022c160: 31 a8        	j	0x8022c17c <.Lpcrel_hi114+0x12>

000000008022c162 <.Lpcrel_hi113>:
8022c162: 17 e5 00 00  	auipc	a0, 0xe
8022c166: 13 05 e5 55  	addi	a0, a0, 0x55e

000000008022c16a <.Lpcrel_hi114>:
8022c16a: 97 f5 00 00  	auipc	a1, 0xf
8022c16e: 13 86 65 90  	addi	a2, a1, -0x6fa
8022c172: f1 45        	li	a1, 0x1c
8022c174: 97 40 00 00  	auipc	ra, 0x4
8022c178: e7 80 40 0a  	jalr	0xa4(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c17c: 03 35 84 ec  	ld	a0, -0x138(s0)
8022c180: 83 35 04 ed  	ld	a1, -0x130(s0)
;                 for j in (class + 1..i + 1).rev() {
8022c184: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022c188: 23 34 a4 f6  	sd	a0, -0x98(s0)
8022c18c: 03 35 04 f6  	ld	a0, -0xa0(s0)
8022c190: 83 35 84 f6  	ld	a1, -0x98(s0)
8022c194: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c198: e7 80 a0 49  	jalr	0x49a(ra) <ekernel+0xffcde62e>
8022c19c: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c1a0: e7 80 20 70  	jalr	0x702(ra) <ekernel+0xffcde89e>
8022c1a4: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022c1a8: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022c1ac: 31 a8        	j	0x8022c1c8 <.Lpcrel_hi116+0x12>

000000008022c1ae <.Lpcrel_hi115>:
8022c1ae: 17 e5 00 00  	auipc	a0, 0xe
8022c1b2: 13 05 25 51  	addi	a0, a0, 0x512

000000008022c1b6 <.Lpcrel_hi116>:
8022c1b6: 97 f5 00 00  	auipc	a1, 0xf
8022c1ba: 13 86 25 8d  	addi	a2, a1, -0x72e
8022c1be: f1 45        	li	a1, 0x1c
8022c1c0: 97 40 00 00  	auipc	ra, 0x4
8022c1c4: e7 80 80 05  	jalr	0x58(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c1c8: 13 05 04 f7  	addi	a0, s0, -0x90
;                 for j in (class + 1..i + 1).rev() {
8022c1cc: 97 00 00 00  	auipc	ra, 0x0
8022c1d0: e7 80 40 93  	jalr	-0x6cc(ra) <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc96430ec4796e8e5E>
8022c1d4: 23 30 a4 f8  	sd	a0, -0x80(s0)
8022c1d8: 23 34 b4 f8  	sd	a1, -0x78(s0)
8022c1dc: 03 35 04 f8  	ld	a0, -0x80(s0)
8022c1e0: 09 e9        	bnez	a0, 0x8022c1f2 <.Lpcrel_hi116+0x3c>
8022c1e2: 09 a0        	j	0x8022c1e4 <.Lpcrel_hi116+0x2e>
8022c1e4: 03 35 04 ee  	ld	a0, -0x120(s0)
8022c1e8: 93 05 00 02  	li	a1, 0x20
;                     self.free_list[class]
8022c1ec: 63 6e b5 00  	bltu	a0, a1, 0x8022c208 <.Lpcrel_hi116+0x52>
8022c1f0: b1 a8        	j	0x8022c24c <.Lpcrel_hi118+0x28>
;                 for j in (class + 1..i + 1).rev() {
8022c1f2: 03 35 84 f8  	ld	a0, -0x78(s0)
8022c1f6: 23 30 a4 ec  	sd	a0, -0x140(s0)
8022c1fa: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022c1fe: 93 05 00 02  	li	a1, 0x20
;                     if let Some(block) = self.free_list[j].pop() {
8022c202: 63 60 b5 10  	bltu	a0, a1, 0x8022c302 <.Lpcrel_hi123+0x12>
8022c206: 05 a2        	j	0x8022c326 <.Lpcrel_hi123+0x36>
8022c208: 03 35 84 ee  	ld	a0, -0x118(s0)
8022c20c: 83 35 04 ee  	ld	a1, -0x120(s0)
;                     self.free_list[class]
8022c210: 8e 05        	slli	a1, a1, 0x3
8022c212: 2e 95        	add	a0, a0, a1
8022c214: 97 00 00 00  	auipc	ra, 0x0
8022c218: e7 80 40 94  	jalr	-0x6bc(ra) <_ZN22buddy_system_allocator11linked_list10LinkedList3pop17hf2dd87887f3bbb7dE>

000000008022c21c <.Lpcrel_hi117>:
8022c21c: 17 f6 00 00  	auipc	a2, 0xf
8022c220: 13 06 c6 89  	addi	a2, a2, -0x764

000000008022c224 <.Lpcrel_hi118>:
8022c224: 97 f6 00 00  	auipc	a3, 0xf
8022c228: 13 87 c6 8b  	addi	a4, a3, -0x744
8022c22c: 93 06 80 02  	li	a3, 0x28
8022c230: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c234: e7 80 60 56  	jalr	0x566(ra) <ekernel+0xffcde796>
;                 let result = NonNull::new(
8022c238: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c23c: e7 80 40 35  	jalr	0x354(ra) <ekernel+0xffcde58c>
8022c240: 23 30 a4 fa  	sd	a0, -0x60(s0)
;                 if let Some(result) = result {
8022c244: 03 35 04 fa  	ld	a0, -0x60(s0)
8022c248: 11 ed        	bnez	a0, 0x8022c264 <.Lpcrel_hi119+0x14>
8022c24a: 99 a0        	j	0x8022c290 <.Lpcrel_hi119+0x40>
8022c24c: 03 35 04 ee  	ld	a0, -0x120(s0)

000000008022c250 <.Lpcrel_hi119>:
;                     self.free_list[class]
8022c250: 97 f5 00 00  	auipc	a1, 0xf
8022c254: 13 86 05 85  	addi	a2, a1, -0x7b0
8022c258: 93 05 00 02  	li	a1, 0x20
8022c25c: 97 40 00 00  	auipc	ra, 0x4
8022c260: e7 80 40 05  	jalr	0x54(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
;                 if let Some(result) = result {
8022c264: 03 35 04 fa  	ld	a0, -0x60(s0)
8022c268: 23 38 a4 ea  	sd	a0, -0x150(s0)
8022c26c: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022c270: 13 05 84 f1  	addi	a0, s0, -0xe8
;                     self.user += layout.size();
8022c274: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c278: e7 80 a0 4e  	jalr	0x4ea(ra) <ekernel+0xffcde75e>
8022c27c: 83 35 84 ee  	ld	a1, -0x118(s0)
8022c280: 83 b5 05 10  	ld	a1, 0x100(a1)
8022c284: 2e 95        	add	a0, a0, a1
8022c286: 23 3c a4 ea  	sd	a0, -0x148(s0)
8022c28a: 63 67 b5 02  	bltu	a0, a1, 0x8022c2b8 <.Lpcrel_hi120>
8022c28e: 29 a0        	j	0x8022c298 <.Lpcrel_hi119+0x48>
8022c290: 01 45        	li	a0, 0x0
;                     return Err(());
8022c292: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8022c296: 95 bd        	j	0x8022c10a <.Lpcrel_hi111+0x98>
8022c298: 03 35 04 f0  	ld	a0, -0x100(s0)
8022c29c: 83 35 84 ee  	ld	a1, -0x118(s0)
8022c2a0: 03 36 84 eb  	ld	a2, -0x148(s0)
;                     self.user += layout.size();
8022c2a4: 23 b0 c5 10  	sd	a2, 0x100(a1)
;                     self.allocated += size;
8022c2a8: 83 b5 85 10  	ld	a1, 0x108(a1)
8022c2ac: 2e 95        	add	a0, a0, a1
8022c2ae: 23 34 a4 ea  	sd	a0, -0x158(s0)
8022c2b2: 63 6b b5 02  	bltu	a0, a1, 0x8022c2e8 <.Lpcrel_hi122>
8022c2b6: 31 a8        	j	0x8022c2d2 <.Lpcrel_hi121+0x12>

000000008022c2b8 <.Lpcrel_hi120>:
;                     self.user += layout.size();
8022c2b8: 17 e5 00 00  	auipc	a0, 0xe
8022c2bc: 13 05 85 40  	addi	a0, a0, 0x408

000000008022c2c0 <.Lpcrel_hi121>:
8022c2c0: 97 f5 00 00  	auipc	a1, 0xf
8022c2c4: 13 86 85 83  	addi	a2, a1, -0x7c8
8022c2c8: f1 45        	li	a1, 0x1c
8022c2ca: 97 40 00 00  	auipc	ra, 0x4
8022c2ce: e7 80 e0 f4  	jalr	-0xb2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c2d2: 03 35 04 eb  	ld	a0, -0x150(s0)
8022c2d6: 83 35 84 ea  	ld	a1, -0x158(s0)
8022c2da: 03 36 84 ee  	ld	a2, -0x118(s0)
;                     self.allocated += size;
8022c2de: 23 34 b6 10  	sd	a1, 0x108(a2)
;                     return Ok(result);
8022c2e2: 23 34 a4 f2  	sd	a0, -0xd8(s0)
; #![cfg_attr(feature = "const_fn", feature(const_mut_refs, const_fn_fn_ptr_basics))]
8022c2e6: 15 b5        	j	0x8022c10a <.Lpcrel_hi111+0x98>

000000008022c2e8 <.Lpcrel_hi122>:
;                     self.allocated += size;
8022c2e8: 17 e5 00 00  	auipc	a0, 0xe
8022c2ec: 13 05 85 3d  	addi	a0, a0, 0x3d8

000000008022c2f0 <.Lpcrel_hi123>:
8022c2f0: 97 f5 00 00  	auipc	a1, 0xf
8022c2f4: 13 86 05 82  	addi	a2, a1, -0x7e0
8022c2f8: f1 45        	li	a1, 0x1c
8022c2fa: 97 40 00 00  	auipc	ra, 0x4
8022c2fe: e7 80 e0 f1  	jalr	-0xe2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c302: 03 35 84 ee  	ld	a0, -0x118(s0)
8022c306: 83 35 04 ec  	ld	a1, -0x140(s0)
;                     if let Some(block) = self.free_list[j].pop() {
8022c30a: 8e 05        	slli	a1, a1, 0x3
8022c30c: 2e 95        	add	a0, a0, a1
8022c30e: 97 00 00 00  	auipc	ra, 0x0
8022c312: e7 80 a0 84  	jalr	-0x7b6(ra) <_ZN22buddy_system_allocator11linked_list10LinkedList3pop17hf2dd87887f3bbb7dE>
8022c316: 23 38 a4 f8  	sd	a0, -0x70(s0)
8022c31a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022c31e: 03 35 04 f9  	ld	a0, -0x70(s0)
8022c322: 11 ed        	bnez	a0, 0x8022c33e <.Lpcrel_hi124+0x14>
8022c324: 1d a8        	j	0x8022c35a <.Lpcrel_hi124+0x30>
8022c326: 03 35 04 ec  	ld	a0, -0x140(s0)

000000008022c32a <.Lpcrel_hi124>:
;                     if let Some(block) = self.free_list[j].pop() {
8022c32a: 97 e5 00 00  	auipc	a1, 0xe
8022c32e: 13 86 e5 7f  	addi	a2, a1, 0x7fe
8022c332: 93 05 00 02  	li	a1, 0x20
8022c336: 97 40 00 00  	auipc	ra, 0x4
8022c33a: e7 80 a0 f7  	jalr	-0x86(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8022c33e: 03 35 04 ec  	ld	a0, -0x140(s0)
;                     if let Some(block) = self.free_list[j].pop() {
8022c342: 83 35 84 f9  	ld	a1, -0x68(s0)
8022c346: 23 3c b4 e8  	sd	a1, -0x168(s0)
8022c34a: 23 3c b4 fc  	sd	a1, -0x28(s0)
;                             self.free_list[j - 1]
8022c34e: 93 05 f5 ff  	addi	a1, a0, -0x1
8022c352: 23 30 b4 ea  	sd	a1, -0x160(s0)
8022c356: 09 cd        	beqz	a0, 0x8022c370 <.Lpcrel_hi125>
8022c358: 29 a0        	j	0x8022c362 <.Lpcrel_hi124+0x38>
8022c35a: 01 45        	li	a0, 0x0
;                         return Err(());
8022c35c: 23 34 a4 f2  	sd	a0, -0xd8(s0)
; #![cfg_attr(feature = "const_fn", feature(const_mut_refs, const_fn_fn_ptr_basics))]
8022c360: 6d b3        	j	0x8022c10a <.Lpcrel_hi111+0x98>
8022c362: 03 35 04 ea  	ld	a0, -0x160(s0)
8022c366: 93 05 00 02  	li	a1, 0x20
;                             self.free_list[j - 1]
8022c36a: 63 61 b5 02  	bltu	a0, a1, 0x8022c38c <.Lpcrel_hi126+0x14>
8022c36e: 99 a0        	j	0x8022c3b4 <.Lpcrel_hi126+0x3c>

000000008022c370 <.Lpcrel_hi125>:
8022c370: 17 e5 00 00  	auipc	a0, 0xe
8022c374: 13 05 05 4f  	addi	a0, a0, 0x4f0

000000008022c378 <.Lpcrel_hi126>:
8022c378: 97 e5 00 00  	auipc	a1, 0xe
8022c37c: 13 86 85 7c  	addi	a2, a1, 0x7c8
8022c380: 93 05 10 02  	li	a1, 0x21
8022c384: 97 40 00 00  	auipc	ra, 0x4
8022c388: e7 80 40 e9  	jalr	-0x16c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c38c: 03 35 04 ec  	ld	a0, -0x140(s0)
8022c390: 83 35 84 e9  	ld	a1, -0x168(s0)
8022c394: 03 36 84 ee  	ld	a2, -0x118(s0)
8022c398: 83 36 04 ea  	ld	a3, -0x160(s0)
;                             self.free_list[j - 1]
8022c39c: 8e 06        	slli	a3, a3, 0x3
8022c39e: 36 96        	add	a2, a2, a3
8022c3a0: 23 30 c4 e8  	sd	a2, -0x180(s0)
8022c3a4: 23 34 b4 e8  	sd	a1, -0x178(s0)
;                                 .push((block as usize + (1 << (j - 1))) as *mut usize);
8022c3a8: 93 05 f5 ff  	addi	a1, a0, -0x1
8022c3ac: 23 38 b4 e8  	sd	a1, -0x170(s0)
8022c3b0: 0d c5        	beqz	a0, 0x8022c3da <.Lpcrel_hi128>
8022c3b2: 29 a8        	j	0x8022c3cc <.Lpcrel_hi127+0x14>
8022c3b4: 03 35 04 ea  	ld	a0, -0x160(s0)

000000008022c3b8 <.Lpcrel_hi127>:
;                             self.free_list[j - 1]
8022c3b8: 97 e5 00 00  	auipc	a1, 0xe
8022c3bc: 13 86 05 7a  	addi	a2, a1, 0x7a0
8022c3c0: 93 05 00 02  	li	a1, 0x20
8022c3c4: 97 40 00 00  	auipc	ra, 0x4
8022c3c8: e7 80 c0 ee  	jalr	-0x114(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8022c3cc: 03 35 04 e9  	ld	a0, -0x170(s0)
8022c3d0: 93 05 00 04  	li	a1, 0x40
;                                 .push((block as usize + (1 << (j - 1))) as *mut usize);
8022c3d4: 63 61 b5 02  	bltu	a0, a1, 0x8022c3f6 <.Lpcrel_hi129+0x14>
8022c3d8: 25 a8        	j	0x8022c410 <.Lpcrel_hi130>

000000008022c3da <.Lpcrel_hi128>:
8022c3da: 17 e5 00 00  	auipc	a0, 0xe
8022c3de: 13 05 65 48  	addi	a0, a0, 0x486

000000008022c3e2 <.Lpcrel_hi129>:
8022c3e2: 97 e5 00 00  	auipc	a1, 0xe
8022c3e6: 13 86 e5 78  	addi	a2, a1, 0x78e
8022c3ea: 93 05 10 02  	li	a1, 0x21
8022c3ee: 97 40 00 00  	auipc	ra, 0x4
8022c3f2: e7 80 a0 e2  	jalr	-0x1d6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c3f6: 83 35 84 e8  	ld	a1, -0x178(s0)
8022c3fa: 03 36 04 e9  	ld	a2, -0x170(s0)
8022c3fe: 05 45        	li	a0, 0x1
;                                 .push((block as usize + (1 << (j - 1))) as *mut usize);
8022c400: 33 15 c5 00  	sll	a0, a0, a2
8022c404: 2e 95        	add	a0, a0, a1
8022c406: 23 3c a4 e6  	sd	a0, -0x188(s0)
8022c40a: 63 61 b5 04  	bltu	a0, a1, 0x8022c44c <.Lpcrel_hi132>
8022c40e: 39 a8        	j	0x8022c42c <.Lpcrel_hi131+0x14>

000000008022c410 <.Lpcrel_hi130>:
8022c410: 17 e5 00 00  	auipc	a0, 0xe
8022c414: 13 05 05 48  	addi	a0, a0, 0x480

000000008022c418 <.Lpcrel_hi131>:
8022c418: 97 e5 00 00  	auipc	a1, 0xe
8022c41c: 13 86 05 77  	addi	a2, a1, 0x770
8022c420: 93 05 30 02  	li	a1, 0x23
8022c424: 97 40 00 00  	auipc	ra, 0x4
8022c428: e7 80 40 df  	jalr	-0x20c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c42c: 83 35 84 e7  	ld	a1, -0x188(s0)
8022c430: 03 35 04 e8  	ld	a0, -0x180(s0)
;                             self.free_list[j - 1]
8022c434: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c438: e7 80 60 70  	jalr	0x706(ra) <ekernel+0xffcdeb3a>
8022c43c: 03 35 04 ec  	ld	a0, -0x140(s0)
;                             self.free_list[j - 1].push(block);
8022c440: 93 05 f5 ff  	addi	a1, a0, -0x1
8022c444: 23 38 b4 e6  	sd	a1, -0x190(s0)
8022c448: 15 c5        	beqz	a0, 0x8022c474 <.Lpcrel_hi134>
8022c44a: 31 a8        	j	0x8022c466 <.Lpcrel_hi133+0x12>

000000008022c44c <.Lpcrel_hi132>:
;                                 .push((block as usize + (1 << (j - 1))) as *mut usize);
8022c44c: 17 e5 00 00  	auipc	a0, 0xe
8022c450: 13 05 45 27  	addi	a0, a0, 0x274

000000008022c454 <.Lpcrel_hi133>:
8022c454: 97 e5 00 00  	auipc	a1, 0xe
8022c458: 13 86 c5 74  	addi	a2, a1, 0x74c
8022c45c: f1 45        	li	a1, 0x1c
8022c45e: 97 40 00 00  	auipc	ra, 0x4
8022c462: e7 80 a0 db  	jalr	-0x246(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c466: 03 35 04 e7  	ld	a0, -0x190(s0)
8022c46a: 93 05 00 02  	li	a1, 0x20
;                             self.free_list[j - 1].push(block);
8022c46e: 63 61 b5 02  	bltu	a0, a1, 0x8022c490 <.Lpcrel_hi135+0x14>
8022c472: 25 a8        	j	0x8022c4aa <.Lpcrel_hi135+0x2e>

000000008022c474 <.Lpcrel_hi134>:
8022c474: 17 e5 00 00  	auipc	a0, 0xe
8022c478: 13 05 c5 3e  	addi	a0, a0, 0x3ec

000000008022c47c <.Lpcrel_hi135>:
8022c47c: 97 e5 00 00  	auipc	a1, 0xe
8022c480: 13 86 c5 73  	addi	a2, a1, 0x73c
8022c484: 93 05 10 02  	li	a1, 0x21
8022c488: 97 40 00 00  	auipc	ra, 0x4
8022c48c: e7 80 00 d9  	jalr	-0x270(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c490: 83 35 84 e9  	ld	a1, -0x168(s0)
8022c494: 03 35 84 ee  	ld	a0, -0x118(s0)
8022c498: 03 36 04 e7  	ld	a2, -0x190(s0)
;                             self.free_list[j - 1].push(block);
8022c49c: 0e 06        	slli	a2, a2, 0x3
8022c49e: 32 95        	add	a0, a0, a2
8022c4a0: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c4a4: e7 80 a0 69  	jalr	0x69a(ra) <ekernel+0xffcdeb3a>
8022c4a8: 05 b3        	j	0x8022c1c8 <.Lpcrel_hi116+0x12>
8022c4aa: 03 35 04 e7  	ld	a0, -0x190(s0)

000000008022c4ae <.Lpcrel_hi136>:
;                             self.free_list[j - 1].push(block);
8022c4ae: 97 e5 00 00  	auipc	a1, 0xe
8022c4b2: 13 86 25 72  	addi	a2, a1, 0x722
8022c4b6: 93 05 00 02  	li	a1, 0x20
8022c4ba: 97 40 00 00  	auipc	ra, 0x4
8022c4be: e7 80 60 df  	jalr	-0x20a(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008022c4c2 <_ZN22buddy_system_allocator4Heap7dealloc17h229e0eea0b3aeb4eE>:
;     pub fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {
8022c4c2: 09 71        	addi	sp, sp, -0x180
8022c4c4: 86 fe        	sd	ra, 0x178(sp)
8022c4c6: a2 fa        	sd	s0, 0x170(sp)
8022c4c8: 00 03        	addi	s0, sp, 0x180
8022c4ca: 23 3c b4 ec  	sd	a1, -0x128(s0)
8022c4ce: 23 30 a4 ee  	sd	a0, -0x120(s0)
8022c4d2: 23 38 c4 f0  	sd	a2, -0xf0(s0)
8022c4d6: 23 3c d4 f0  	sd	a3, -0xe8(s0)
8022c4da: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022c4de: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022c4e2: 13 05 04 f1  	addi	a0, s0, -0xf0
8022c4e6: 23 34 a4 ee  	sd	a0, -0x118(s0)
;             layout.size().next_power_of_two(),
8022c4ea: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c4ee: e7 80 40 27  	jalr	0x274(ra) <ekernel+0xffcde75e>
8022c4f2: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c4f6: e7 80 e0 ed  	jalr	-0x122(ra) <ekernel+0xffcde3d0>
8022c4fa: aa 85        	mv	a1, a0
8022c4fc: 03 35 84 ee  	ld	a0, -0x118(s0)
8022c500: 23 38 b4 ee  	sd	a1, -0x110(s0)
;             max(layout.align(), size_of::<usize>()),
8022c504: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c508: e7 80 00 27  	jalr	0x270(ra) <ekernel+0xffcde774>
8022c50c: a1 45        	li	a1, 0x8
8022c50e: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c512: e7 80 a0 d3  	jalr	-0x2c6(ra) <ekernel+0xffcde248>
8022c516: aa 85        	mv	a1, a0
8022c518: 03 35 04 ef  	ld	a0, -0x110(s0)
;         let size = max(
8022c51c: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c520: e7 80 c0 d2  	jalr	-0x2d4(ra) <ekernel+0xffcde248>
8022c524: aa 85        	mv	a1, a0
8022c526: 23 3c b4 ee  	sd	a1, -0x108(s0)
8022c52a: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022c52e: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022c532: 81 45        	li	a1, 0x0
;             intrinsics::cttz(self) as u32
8022c534: 89 8d        	sub	a1, a1, a0
8022c536: e9 8d        	and	a1, a1, a0

000000008022c538 <.Lpcrel_hi137>:
8022c538: 17 a6 01 00  	auipc	a2, 0x1a
8022c53c: 13 06 86 9f  	addi	a2, a2, -0x608
8022c540: 10 62        	ld	a2, 0x0(a2)
8022c542: b3 85 c5 02  	mul	a1, a1, a2
8022c546: 13 d6 a5 03  	srli	a2, a1, 0x3a

000000008022c54a <.Lpcrel_hi138>:
8022c54a: 97 e5 00 00  	auipc	a1, 0xe
8022c54e: 93 85 65 13  	addi	a1, a1, 0x136
8022c552: b2 95        	add	a1, a1, a2
8022c554: 83 c5 05 00  	lbu	a1, 0x0(a1)
8022c558: 13 06 00 04  	li	a2, 0x40
8022c55c: 23 30 c4 f0  	sd	a2, -0x100(s0)
8022c560: 23 34 b4 f0  	sd	a1, -0xf8(s0)
8022c564: 09 e5        	bnez	a0, 0x8022c56e <.Lpcrel_hi138+0x24>
8022c566: 03 35 04 f0  	ld	a0, -0x100(s0)
8022c56a: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8022c56e: 03 35 84 f0  	ld	a0, -0xf8(s0)
;             intrinsics::cttz(self) as u32
8022c572: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022c576: 83 65 84 fd  	lwu	a1, -0x28(s0)
8022c57a: 23 38 b4 ec  	sd	a1, -0x130(s0)
;         let class = size.trailing_zeros() as usize;
8022c57e: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022c582: 7d 45        	li	a0, 0x1f
;             self.free_list[class].push(ptr.as_ptr() as *mut usize);
8022c584: 63 6c b5 02  	bltu	a0, a1, 0x8022c5bc <.Lpcrel_hi138+0x72>
8022c588: 09 a0        	j	0x8022c58a <.Lpcrel_hi138+0x40>
8022c58a: 03 36 04 ed  	ld	a2, -0x130(s0)
8022c58e: 83 35 84 ed  	ld	a1, -0x128(s0)
8022c592: 03 35 04 ee  	ld	a0, -0x120(s0)
;             self.free_list[class].push(ptr.as_ptr() as *mut usize);
8022c596: 0e 06        	slli	a2, a2, 0x3
8022c598: 32 95        	add	a0, a0, a2
8022c59a: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022c59e: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c5a2: e7 80 c0 59  	jalr	0x59c(ra) <ekernel+0xffcdeb3a>
8022c5a6: 83 35 84 ed  	ld	a1, -0x128(s0)
8022c5aa: 03 35 04 ed  	ld	a0, -0x130(s0)
8022c5ae: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             let mut current_ptr = ptr.as_ptr() as usize;
8022c5b2: 23 30 b4 f2  	sd	a1, -0xe0(s0)
;             let mut current_class = class;
8022c5b6: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;             while current_class < self.free_list.len() {
8022c5ba: 29 a8        	j	0x8022c5d4 <.Lpcrel_hi139+0x14>
8022c5bc: 03 35 04 ed  	ld	a0, -0x130(s0)

000000008022c5c0 <.Lpcrel_hi139>:
;             self.free_list[class].push(ptr.as_ptr() as *mut usize);
8022c5c0: 97 e5 00 00  	auipc	a1, 0xe
8022c5c4: 13 86 85 62  	addi	a2, a1, 0x628
8022c5c8: 93 05 00 02  	li	a1, 0x20
8022c5cc: 97 40 00 00  	auipc	ra, 0x4
8022c5d0: e7 80 40 ce  	jalr	-0x31c(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
;             while current_class < self.free_list.len() {
8022c5d4: 03 35 84 f2  	ld	a0, -0xd8(s0)
8022c5d8: 93 05 00 02  	li	a1, 0x20
8022c5dc: 63 65 b5 02  	bltu	a0, a1, 0x8022c606 <.Lpcrel_hi139+0x46>
8022c5e0: 09 a0        	j	0x8022c5e2 <.Lpcrel_hi139+0x22>
8022c5e2: 13 05 04 f1  	addi	a0, s0, -0xf0
;         self.user -= layout.size();
8022c5e6: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c5ea: e7 80 80 17  	jalr	0x178(ra) <ekernel+0xffcde75e>
8022c5ee: aa 85        	mv	a1, a0
8022c5f0: 03 35 04 ee  	ld	a0, -0x120(s0)
8022c5f4: 03 35 05 10  	ld	a0, 0x100(a0)
8022c5f8: 33 06 b5 40  	sub	a2, a0, a1
8022c5fc: 23 34 c4 ec  	sd	a2, -0x138(s0)
8022c600: 63 6f b5 14  	bltu	a0, a1, 0x8022c75e <.Lpcrel_hi143>
8022c604: 25 aa        	j	0x8022c73c <.Lpcrel_hi142+0x86>
;                 let buddy = current_ptr ^ (1 << current_class);
8022c606: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022c60a: 23 3c a4 ea  	sd	a0, -0x148(s0)
8022c60e: 83 35 84 f2  	ld	a1, -0xd8(s0)
8022c612: 23 30 b4 ec  	sd	a1, -0x140(s0)
8022c616: 13 05 f0 03  	li	a0, 0x3f
8022c61a: 63 6b b5 02  	bltu	a0, a1, 0x8022c650 <.Lpcrel_hi140>
8022c61e: 09 a0        	j	0x8022c620 <.Lpcrel_hi139+0x60>
8022c620: 03 35 84 eb  	ld	a0, -0x148(s0)
8022c624: 03 36 04 ec  	ld	a2, -0x140(s0)
8022c628: 85 45        	li	a1, 0x1
;                 let buddy = current_ptr ^ (1 << current_class);
8022c62a: b3 95 c5 00  	sll	a1, a1, a2
8022c62e: 2d 8d        	xor	a0, a0, a1
8022c630: 23 34 a4 ea  	sd	a0, -0x158(s0)
8022c634: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022c638: 01 45        	li	a0, 0x0
;                 let mut flag = false;
8022c63a: a3 0b a4 f2  	sb	a0, -0xc9(s0)
;                 for block in self.free_list[current_class].iter_mut() {
8022c63e: 03 35 84 f2  	ld	a0, -0xd8(s0)
8022c642: 23 38 a4 ea  	sd	a0, -0x150(s0)
8022c646: 93 05 00 02  	li	a1, 0x20
8022c64a: 63 61 b5 02  	bltu	a0, a1, 0x8022c66c <.Lpcrel_hi141+0x14>
8022c64e: 95 a0        	j	0x8022c6b2 <.Lpcrel_hi141+0x5a>

000000008022c650 <.Lpcrel_hi140>:
;                 let buddy = current_ptr ^ (1 << current_class);
8022c650: 17 e5 00 00  	auipc	a0, 0xe
8022c654: 13 05 05 24  	addi	a0, a0, 0x240

000000008022c658 <.Lpcrel_hi141>:
8022c658: 97 e5 00 00  	auipc	a1, 0xe
8022c65c: 13 86 85 5a  	addi	a2, a1, 0x5a8
8022c660: 93 05 30 02  	li	a1, 0x23
8022c664: 97 40 00 00  	auipc	ra, 0x4
8022c668: e7 80 40 bb  	jalr	-0x44c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c66c: 03 35 04 ee  	ld	a0, -0x120(s0)
8022c670: 83 35 04 eb  	ld	a1, -0x150(s0)
;                 for block in self.free_list[current_class].iter_mut() {
8022c674: 8e 05        	slli	a1, a1, 0x3
8022c676: aa 95        	add	a1, a1, a0
8022c678: 13 05 04 f5  	addi	a0, s0, -0xb0
8022c67c: 23 30 a4 ea  	sd	a0, -0x160(s0)
8022c680: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c684: e7 80 60 52  	jalr	0x526(ra) <ekernel+0xffcdeba6>
8022c688: 83 35 04 ea  	ld	a1, -0x160(s0)
8022c68c: 13 05 84 f3  	addi	a0, s0, -0xc8
8022c690: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c694: e7 80 80 1e  	jalr	0x1e8(ra) <ekernel+0xffcde878>
8022c698: 03 35 84 f4  	ld	a0, -0xb8(s0)
8022c69c: 23 3c a4 f6  	sd	a0, -0x88(s0)
8022c6a0: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022c6a4: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022c6a8: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022c6ac: 23 34 a4 f6  	sd	a0, -0x98(s0)
8022c6b0: 29 a8        	j	0x8022c6ca <.Lpcrel_hi142+0x14>
8022c6b2: 03 35 04 eb  	ld	a0, -0x150(s0)

000000008022c6b6 <.Lpcrel_hi142>:
;                 for block in self.free_list[current_class].iter_mut() {
8022c6b6: 97 e5 00 00  	auipc	a1, 0xe
8022c6ba: 13 86 25 56  	addi	a2, a1, 0x562
8022c6be: 93 05 00 02  	li	a1, 0x20
8022c6c2: 97 40 00 00  	auipc	ra, 0x4
8022c6c6: e7 80 e0 be  	jalr	-0x412(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8022c6ca: 13 05 04 f8  	addi	a0, s0, -0x80
8022c6ce: 93 05 84 f6  	addi	a1, s0, -0x98
;                 for block in self.free_list[current_class].iter_mut() {
8022c6d2: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c6d6: e7 80 20 53  	jalr	0x532(ra) <ekernel+0xffcdec04>
8022c6da: 03 35 04 f8  	ld	a0, -0x80(s0)
8022c6de: 19 e5        	bnez	a0, 0x8022c6ec <.Lpcrel_hi142+0x36>
8022c6e0: 09 a0        	j	0x8022c6e2 <.Lpcrel_hi142+0x2c>
;                 if flag {
8022c6e2: 03 45 74 f3  	lbu	a0, -0xc9(s0)
8022c6e6: 05 89        	andi	a0, a0, 0x1
8022c6e8: 29 e1        	bnez	a0, 0x8022c72a <.Lpcrel_hi142+0x74>
8022c6ea: e5 bd        	j	0x8022c5e2 <.Lpcrel_hi139+0x22>
;                 for block in self.free_list[current_class].iter_mut() {
8022c6ec: 83 35 84 f8  	ld	a1, -0x78(s0)
8022c6f0: 03 35 04 f9  	ld	a0, -0x70(s0)
8022c6f4: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022c6f8: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022c6fc: 13 05 84 f9  	addi	a0, s0, -0x68
;                     if block.value() as usize == buddy {
8022c700: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c704: e7 80 e0 4e  	jalr	0x4ee(ra) <ekernel+0xffcdebee>
8022c708: 83 35 84 ea  	ld	a1, -0x158(s0)
8022c70c: e3 1f b5 fa  	bne	a0, a1, 0x8022c6ca <.Lpcrel_hi142+0x14>
8022c710: 09 a0        	j	0x8022c712 <.Lpcrel_hi142+0x5c>
;                         block.pop();
8022c712: 03 35 84 f9  	ld	a0, -0x68(s0)
8022c716: 83 35 04 fa  	ld	a1, -0x60(s0)
8022c71a: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c71e: e7 80 c0 4a  	jalr	0x4ac(ra) <ekernel+0xffcdebc6>
8022c722: 05 45        	li	a0, 0x1
;                         flag = true;
8022c724: a3 0b a4 f2  	sb	a0, -0xc9(s0)
; #![cfg_attr(feature = "const_fn", feature(const_mut_refs, const_fn_fn_ptr_basics))]
8022c728: 6d bf        	j	0x8022c6e2 <.Lpcrel_hi142+0x2c>
;                     self.free_list[current_class].pop();
8022c72a: 03 35 84 f2  	ld	a0, -0xd8(s0)
8022c72e: 23 3c a4 e8  	sd	a0, -0x168(s0)
8022c732: 93 05 00 02  	li	a1, 0x20
8022c736: 63 6a b5 06  	bltu	a0, a1, 0x8022c7aa <.Lpcrel_hi146+0x14>
8022c73a: 5d a0        	j	0x8022c7e0 <.Lpcrel_hi146+0x4a>
8022c73c: 83 35 84 ef  	ld	a1, -0x108(s0)
8022c740: 03 35 04 ee  	ld	a0, -0x120(s0)
8022c744: 03 36 84 ec  	ld	a2, -0x138(s0)
;         self.user -= layout.size();
8022c748: 23 30 c5 10  	sd	a2, 0x100(a0)
;         self.allocated -= size;
8022c74c: 03 35 85 10  	ld	a0, 0x108(a0)
8022c750: 33 06 b5 40  	sub	a2, a0, a1
8022c754: 23 38 c4 e8  	sd	a2, -0x170(s0)
8022c758: 63 6b b5 02  	bltu	a0, a1, 0x8022c78e <.Lpcrel_hi145>
8022c75c: 39 a8        	j	0x8022c77a <.Lpcrel_hi144+0x14>

000000008022c75e <.Lpcrel_hi143>:
;         self.user -= layout.size();
8022c75e: 17 e5 00 00  	auipc	a0, 0xe
8022c762: 13 05 25 10  	addi	a0, a0, 0x102

000000008022c766 <.Lpcrel_hi144>:
8022c766: 97 e5 00 00  	auipc	a1, 0xe
8022c76a: 13 86 a5 4c  	addi	a2, a1, 0x4ca
8022c76e: 93 05 10 02  	li	a1, 0x21
8022c772: 97 40 00 00  	auipc	ra, 0x4
8022c776: e7 80 60 aa  	jalr	-0x55a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c77a: 03 35 04 e9  	ld	a0, -0x170(s0)
8022c77e: 83 35 04 ee  	ld	a1, -0x120(s0)
;         self.allocated -= size;
8022c782: 23 b4 a5 10  	sd	a0, 0x108(a1)
8022c786: f6 70        	ld	ra, 0x178(sp)
8022c788: 56 74        	ld	s0, 0x170(sp)
;     }
8022c78a: 19 61        	addi	sp, sp, 0x180
8022c78c: 82 80        	ret

000000008022c78e <.Lpcrel_hi145>:
;         self.allocated -= size;
8022c78e: 17 e5 00 00  	auipc	a0, 0xe
8022c792: 13 05 25 0d  	addi	a0, a0, 0xd2

000000008022c796 <.Lpcrel_hi146>:
8022c796: 97 e5 00 00  	auipc	a1, 0xe
8022c79a: 13 86 25 4b  	addi	a2, a1, 0x4b2
8022c79e: 93 05 10 02  	li	a1, 0x21
8022c7a2: 97 40 00 00  	auipc	ra, 0x4
8022c7a6: e7 80 60 a7  	jalr	-0x58a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c7aa: 03 35 04 ee  	ld	a0, -0x120(s0)
8022c7ae: 83 35 84 e9  	ld	a1, -0x168(s0)
;                     self.free_list[current_class].pop();
8022c7b2: 8e 05        	slli	a1, a1, 0x3
8022c7b4: 2e 95        	add	a0, a0, a1
8022c7b6: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c7ba: e7 80 20 3a  	jalr	0x3a2(ra) <ekernel+0xffcdeb58>
8022c7be: 83 35 84 ea  	ld	a1, -0x158(s0)
;                     current_ptr = min(current_ptr, buddy);
8022c7c2: 03 35 04 f2  	ld	a0, -0xe0(s0)
8022c7c6: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c7ca: e7 80 20 aa  	jalr	-0x55e(ra) <ekernel+0xffcde268>
8022c7ce: 23 30 a4 f2  	sd	a0, -0xe0(s0)
;                     current_class += 1;
8022c7d2: 03 35 84 f2  	ld	a0, -0xd8(s0)
8022c7d6: 05 05        	addi	a0, a0, 0x1
8022c7d8: 23 34 a4 e8  	sd	a0, -0x178(s0)
8022c7dc: 1d c9        	beqz	a0, 0x8022c812 <.Lpcrel_hi148>
8022c7de: 29 a8        	j	0x8022c7f8 <.Lpcrel_hi147+0x14>
8022c7e0: 03 35 84 e9  	ld	a0, -0x168(s0)

000000008022c7e4 <.Lpcrel_hi147>:
;                     self.free_list[current_class].pop();
8022c7e4: 97 e5 00 00  	auipc	a1, 0xe
8022c7e8: 13 86 c5 47  	addi	a2, a1, 0x47c
8022c7ec: 93 05 00 02  	li	a1, 0x20
8022c7f0: 97 40 00 00  	auipc	ra, 0x4
8022c7f4: e7 80 00 ac  	jalr	-0x540(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>
8022c7f8: 03 35 84 e8  	ld	a0, -0x178(s0)
;                     current_class += 1;
8022c7fc: 23 34 a4 f2  	sd	a0, -0xd8(s0)
;                     self.free_list[current_class].push(current_ptr as *mut usize);
8022c800: 03 35 84 f2  	ld	a0, -0xd8(s0)
8022c804: 23 30 a4 e8  	sd	a0, -0x180(s0)
8022c808: 93 05 00 02  	li	a1, 0x20
8022c80c: 63 60 b5 02  	bltu	a0, a1, 0x8022c82c <.Lpcrel_hi149+0x12>
8022c810: 1d a8        	j	0x8022c846 <.Lpcrel_hi149+0x2c>

000000008022c812 <.Lpcrel_hi148>:
;                     current_class += 1;
8022c812: 17 e5 00 00  	auipc	a0, 0xe
8022c816: 13 05 e5 ea  	addi	a0, a0, -0x152

000000008022c81a <.Lpcrel_hi149>:
8022c81a: 97 e5 00 00  	auipc	a1, 0xe
8022c81e: 13 86 e5 45  	addi	a2, a1, 0x45e
8022c822: f1 45        	li	a1, 0x1c
8022c824: 97 40 00 00  	auipc	ra, 0x4
8022c828: e7 80 40 9f  	jalr	-0x60c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022c82c: 03 35 04 ee  	ld	a0, -0x120(s0)
8022c830: 83 35 04 e8  	ld	a1, -0x180(s0)
;                     self.free_list[current_class].push(current_ptr as *mut usize);
8022c834: 8e 05        	slli	a1, a1, 0x3
8022c836: 2e 95        	add	a0, a0, a1
8022c838: 83 35 04 f2  	ld	a1, -0xe0(s0)
8022c83c: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c840: e7 80 e0 2f  	jalr	0x2fe(ra) <ekernel+0xffcdeb3a>
8022c844: 41 bb        	j	0x8022c5d4 <.Lpcrel_hi139+0x14>
8022c846: 03 35 04 e8  	ld	a0, -0x180(s0)

000000008022c84a <.Lpcrel_hi150>:
;                     self.free_list[current_class].push(current_ptr as *mut usize);
8022c84a: 97 e5 00 00  	auipc	a1, 0xe
8022c84e: 13 86 65 44  	addi	a2, a1, 0x446
8022c852: 93 05 00 02  	li	a1, 0x20
8022c856: 97 40 00 00  	auipc	ra, 0x4
8022c85a: e7 80 a0 a5  	jalr	-0x5a6(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008022c85e <_ZN78_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc3e893983b613bb1E>:
;     fn deref(&self) -> &Mutex<Heap> {
8022c85e: 01 11        	addi	sp, sp, -0x20
8022c860: 06 ec        	sd	ra, 0x18(sp)
8022c862: 22 e8        	sd	s0, 0x10(sp)
8022c864: 00 10        	addi	s0, sp, 0x20
8022c866: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022c86a: e2 60        	ld	ra, 0x18(sp)
8022c86c: 42 64        	ld	s0, 0x10(sp)
;     }
8022c86e: 05 61        	addi	sp, sp, 0x20
8022c870: 82 80        	ret

000000008022c872 <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hba892e8a7ee7ae28E>:
;     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
8022c872: 71 71        	addi	sp, sp, -0xb0
8022c874: 06 f5        	sd	ra, 0xa8(sp)
8022c876: 22 f1        	sd	s0, 0xa0(sp)
8022c878: 00 19        	addi	s0, sp, 0xb0
8022c87a: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8022c87e: 23 34 b4 f6  	sd	a1, -0x98(s0)
8022c882: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022c886: 23 3c a4 f8  	sd	a0, -0x68(s0)
8022c88a: 23 30 b4 fa  	sd	a1, -0x60(s0)
8022c88e: 23 34 c4 fa  	sd	a2, -0x58(s0)
8022c892: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022c896: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022c89a: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8022c89c: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8022c8a0: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8022c8a4: 85 45        	li	a1, 0x1
8022c8a6: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c8aa: e7 80 c0 df  	jalr	-0x204(ra) <ekernel+0xffcde6a2>
8022c8ae: aa 85        	mv	a1, a0
8022c8b0: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022c8b4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022c8b8: 09 a0        	j	0x8022c8ba <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hba892e8a7ee7ae28E+0x48>
8022c8ba: 03 35 04 f7  	ld	a0, -0x90(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8022c8be: 21 05        	addi	a0, a0, 0x8
8022c8c0: 89 45        	li	a1, 0x2
8022c8c2: a3 0b b4 fc  	sb	a1, -0x29(s0)
8022c8c6: 83 45 74 fd  	lbu	a1, -0x29(s0)
8022c8ca: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c8ce: e7 80 c0 d8  	jalr	-0x274(ra) <ekernel+0xffcde656>
8022c8d2: 83 35 84 f7  	ld	a1, -0x88(s0)
8022c8d6: 63 08 b5 00  	beq	a0, a1, 0x8022c8e6 <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hba892e8a7ee7ae28E+0x74>
8022c8da: 09 a0        	j	0x8022c8dc <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hba892e8a7ee7ae28E+0x6a>
;             crate::relax();
8022c8dc: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c8e0: e7 80 e0 e6  	jalr	-0x192(ra) <ekernel+0xffcde74a>
8022c8e4: d9 bf        	j	0x8022c8ba <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hba892e8a7ee7ae28E+0x48>
8022c8e6: 83 35 84 f7  	ld	a1, -0x88(s0)
8022c8ea: 03 35 04 f7  	ld	a0, -0x90(s0)
;             next_serving: &self.next_serving,
8022c8ee: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8022c8f2: 41 05        	addi	a0, a0, 0x10
8022c8f4: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8022c8f8: 23 38 c4 fa  	sd	a2, -0x50(s0)
8022c8fc: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022c900: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8022c904: 03 35 04 fc  	ld	a0, -0x40(s0)
8022c908: 23 38 a4 f8  	sd	a0, -0x70(s0)
8022c90c: 03 35 84 fb  	ld	a0, -0x48(s0)
8022c910: 23 34 a4 f8  	sd	a0, -0x78(s0)
8022c914: 03 35 04 fb  	ld	a0, -0x50(s0)
8022c918: 23 30 a4 f8  	sd	a0, -0x80(s0)
8022c91c: 13 05 04 f8  	addi	a0, s0, -0x80
8022c920: 23 38 a4 f4  	sd	a0, -0xb0(s0)
;         self.0
8022c924: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c928: e7 80 a0 fa  	jalr	-0x56(ra) <ekernel+0xffcde8ce>
8022c92c: 83 35 84 f6  	ld	a1, -0x98(s0)
8022c930: 03 36 04 f6  	ld	a2, -0xa0(s0)
8022c934: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c938: e7 80 e0 6b  	jalr	0x6be(ra) <ekernel+0xffcdeff2>
8022c93c: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c940: e7 80 c0 ef  	jalr	-0x104(ra) <ekernel+0xffcde838>
8022c944: 81 45        	li	a1, 0x0
8022c946: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c94a: e7 80 00 ea  	jalr	-0x160(ra) <ekernel+0xffcde7e6>
8022c94e: aa 85        	mv	a1, a0
8022c950: 03 35 04 f5  	ld	a0, -0xb0(s0)
8022c954: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     }
8022c958: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c95c: e7 80 40 bb  	jalr	-0x44c(ra) <ekernel+0xffcde50c>
8022c960: 03 35 84 f5  	ld	a0, -0xa8(s0)
8022c964: aa 70        	ld	ra, 0xa8(sp)
8022c966: 0a 74        	ld	s0, 0xa0(sp)
8022c968: 4d 61        	addi	sp, sp, 0xb0
8022c96a: 82 80        	ret

000000008022c96c <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h5c87363fdacc9b2fE>:
;             .map_or(0 as *mut u8, |allocation| allocation.as_ptr())
8022c96c: 79 71        	addi	sp, sp, -0x30
8022c96e: 06 f4        	sd	ra, 0x28(sp)
8022c970: 22 f0        	sd	s0, 0x20(sp)
8022c972: 00 18        	addi	s0, sp, 0x30
8022c974: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022c978: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022c97c: a2 70        	ld	ra, 0x28(sp)
8022c97e: 02 74        	ld	s0, 0x20(sp)
8022c980: 45 61        	addi	sp, sp, 0x30
8022c982: 82 80        	ret

000000008022c984 <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h70a0674c9280ca80E>:
;     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {
8022c984: 31 71        	addi	sp, sp, -0xc0
8022c986: 06 fd        	sd	ra, 0xb8(sp)
8022c988: 22 f9        	sd	s0, 0xb0(sp)
8022c98a: 80 01        	addi	s0, sp, 0xc0
8022c98c: 23 38 d4 f4  	sd	a3, -0xb0(s0)
8022c990: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8022c994: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022c998: 23 34 a4 f6  	sd	a0, -0x98(s0)
8022c99c: 23 38 a4 f8  	sd	a0, -0x70(s0)
8022c9a0: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022c9a4: 23 30 c4 fa  	sd	a2, -0x60(s0)
8022c9a8: 23 34 d4 fa  	sd	a3, -0x58(s0)
8022c9ac: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022c9b0: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022c9b4: 81 45        	li	a1, 0x0
;         let ticket = self.next_ticket.fetch_add(1, Ordering::Relaxed);
8022c9b6: 23 0b b4 fc  	sb	a1, -0x2a(s0)
8022c9ba: 03 46 64 fd  	lbu	a2, -0x2a(s0)
8022c9be: 85 45        	li	a1, 0x1
8022c9c0: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c9c4: e7 80 20 ce  	jalr	-0x31e(ra) <ekernel+0xffcde6a2>
8022c9c8: aa 85        	mv	a1, a0
8022c9ca: 23 38 b4 f6  	sd	a1, -0x90(s0)
8022c9ce: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022c9d2: 09 a0        	j	0x8022c9d4 <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h70a0674c9280ca80E+0x50>
8022c9d4: 03 35 84 f6  	ld	a0, -0x98(s0)
;         while self.next_serving.load(Ordering::Acquire) != ticket {
8022c9d8: 21 05        	addi	a0, a0, 0x8
8022c9da: 89 45        	li	a1, 0x2
8022c9dc: a3 0b b4 fc  	sb	a1, -0x29(s0)
8022c9e0: 83 45 74 fd  	lbu	a1, -0x29(s0)
8022c9e4: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c9e8: e7 80 20 c7  	jalr	-0x38e(ra) <ekernel+0xffcde656>
8022c9ec: 83 35 04 f7  	ld	a1, -0x90(s0)
8022c9f0: 63 08 b5 00  	beq	a0, a1, 0x8022ca00 <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h70a0674c9280ca80E+0x7c>
8022c9f4: 09 a0        	j	0x8022c9f6 <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h70a0674c9280ca80E+0x72>
;             crate::relax();
8022c9f6: 97 f0 ff ff  	auipc	ra, 0xfffff
8022c9fa: e7 80 40 d5  	jalr	-0x2ac(ra) <ekernel+0xffcde74a>
8022c9fe: d9 bf        	j	0x8022c9d4 <_ZN87_$LT$buddy_system_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h70a0674c9280ca80E+0x50>
8022ca00: 83 35 04 f7  	ld	a1, -0x90(s0)
8022ca04: 03 35 84 f6  	ld	a0, -0x98(s0)
;             next_serving: &self.next_serving,
8022ca08: 13 06 85 00  	addi	a2, a0, 0x8
;             value: unsafe { &mut *self.value.get() },
8022ca0c: 41 05        	addi	a0, a0, 0x10
8022ca0e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         TicketMutexGuard {
8022ca12: 23 38 c4 fa  	sd	a2, -0x50(s0)
8022ca16: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022ca1a: 23 3c a4 fa  	sd	a0, -0x48(s0)
;         MutexGuard {
8022ca1e: 03 35 04 fc  	ld	a0, -0x40(s0)
8022ca22: 23 34 a4 f8  	sd	a0, -0x78(s0)
8022ca26: 03 35 84 fb  	ld	a0, -0x48(s0)
8022ca2a: 23 30 a4 f8  	sd	a0, -0x80(s0)
8022ca2e: 03 35 04 fb  	ld	a0, -0x50(s0)
8022ca32: 23 3c a4 f6  	sd	a0, -0x88(s0)
8022ca36: 13 05 84 f7  	addi	a0, s0, -0x88
8022ca3a: 23 34 a4 f4  	sd	a0, -0xb8(s0)
;         self.0.lock().dealloc(NonNull::new_unchecked(ptr), layout)
8022ca3e: 97 f0 ff ff  	auipc	ra, 0xfffff
8022ca42: e7 80 00 e9  	jalr	-0x170(ra) <ekernel+0xffcde8ce>
8022ca46: aa 85        	mv	a1, a0
8022ca48: 03 35 04 f6  	ld	a0, -0xa0(s0)
8022ca4c: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8022ca50: 97 f0 ff ff  	auipc	ra, 0xfffff
8022ca54: e7 80 80 ad  	jalr	-0x528(ra) <ekernel+0xffcde528>
8022ca58: 03 36 84 f5  	ld	a2, -0xa8(s0)
8022ca5c: 83 36 04 f5  	ld	a3, -0xb0(s0)
8022ca60: aa 85        	mv	a1, a0
8022ca62: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022ca66: 97 00 00 00  	auipc	ra, 0x0
8022ca6a: e7 80 c0 a5  	jalr	-0x5a4(ra) <_ZN22buddy_system_allocator4Heap7dealloc17h229e0eea0b3aeb4eE>
8022ca6e: 03 35 84 f4  	ld	a0, -0xb8(s0)
;     }
8022ca72: 97 f0 ff ff  	auipc	ra, 0xfffff
8022ca76: e7 80 a0 a9  	jalr	-0x566(ra) <ekernel+0xffcde50c>
8022ca7a: ea 70        	ld	ra, 0xb8(sp)
8022ca7c: 4a 74        	ld	s0, 0xb0(sp)
8022ca7e: 29 61        	addi	sp, sp, 0xc0
8022ca80: 82 80        	ret

000000008022ca82 <_ZN22buddy_system_allocator17prev_power_of_two17h5de0028518631452E>:
; pub(crate) fn prev_power_of_two(num: usize) -> usize {
8022ca82: 5d 71        	addi	sp, sp, -0x50
8022ca84: 86 e4        	sd	ra, 0x48(sp)
8022ca86: a2 e0        	sd	s0, 0x40(sp)
8022ca88: 80 08        	addi	s0, sp, 0x50
8022ca8a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022ca8e: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022ca92: 13 05 00 04  	li	a0, 0x40
8022ca96: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022ca9a: 01 45        	li	a0, 0x0
;     1 << (8 * (size_of::<usize>()) - num.leading_zeros() as usize - 1)
8022ca9c: 45 e5        	bnez	a0, 0x8022cb44 <.Lpcrel_hi156>
8022ca9e: 09 a0        	j	0x8022caa0 <_ZN22buddy_system_allocator17prev_power_of_two17h5de0028518631452E+0x1e>
8022caa0: 03 35 04 fd  	ld	a0, -0x30(s0)
8022caa4: 83 35 84 fc  	ld	a1, -0x38(s0)
8022caa8: 23 30 b4 fe  	sd	a1, -0x20(s0)
;             intrinsics::ctlz(self as $ActualT) as u32
8022caac: 13 d6 15 00  	srli	a2, a1, 0x1
8022cab0: d1 8d        	or	a1, a1, a2
8022cab2: 13 d6 25 00  	srli	a2, a1, 0x2
8022cab6: d1 8d        	or	a1, a1, a2
8022cab8: 13 d6 45 00  	srli	a2, a1, 0x4
8022cabc: d1 8d        	or	a1, a1, a2
8022cabe: 13 d6 85 00  	srli	a2, a1, 0x8
8022cac2: d1 8d        	or	a1, a1, a2
8022cac4: 13 d6 05 01  	srli	a2, a1, 0x10
8022cac8: d1 8d        	or	a1, a1, a2
8022caca: 13 d6 05 02  	srli	a2, a1, 0x20
8022cace: d1 8d        	or	a1, a1, a2
8022cad0: 93 c5 f5 ff  	not	a1, a1
8022cad4: 13 d6 15 00  	srli	a2, a1, 0x1
8022cad8: b7 56 55 55  	lui	a3, 0x55555
8022cadc: 9b 86 56 55  	addiw	a3, a3, 0x555
8022cae0: 13 97 06 02  	slli	a4, a3, 0x20
8022cae4: ba 96        	add	a3, a3, a4
8022cae6: 75 8e        	and	a2, a2, a3
8022cae8: 33 86 c5 40  	sub	a2, a1, a2
8022caec: b7 35 33 33  	lui	a1, 0x33333
8022caf0: 9b 85 35 33  	addiw	a1, a1, 0x333
8022caf4: 93 96 05 02  	slli	a3, a1, 0x20
8022caf8: ae 96        	add	a3, a3, a1
8022cafa: b3 75 d6 00  	and	a1, a2, a3
8022cafe: 09 82        	srli	a2, a2, 0x2
8022cb00: 75 8e        	and	a2, a2, a3
8022cb02: b2 95        	add	a1, a1, a2
8022cb04: 13 d6 45 00  	srli	a2, a1, 0x4
8022cb08: b2 95        	add	a1, a1, a2
8022cb0a: 37 16 0f 0f  	lui	a2, 0xf0f1
8022cb0e: 1b 06 f6 f0  	addiw	a2, a2, -0xf1
8022cb12: 93 16 06 02  	slli	a3, a2, 0x20
8022cb16: 36 96        	add	a2, a2, a3
8022cb18: f1 8d        	and	a1, a1, a2
8022cb1a: 37 06 01 01  	lui	a2, 0x1010
8022cb1e: 1b 06 16 10  	addiw	a2, a2, 0x101
8022cb22: 93 16 06 02  	slli	a3, a2, 0x20
8022cb26: 36 96        	add	a2, a2, a3
8022cb28: b3 85 c5 02  	mul	a1, a1, a2
8022cb2c: e1 91        	srli	a1, a1, 0x38
8022cb2e: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022cb32: 83 65 84 fe  	lwu	a1, -0x18(s0)
;     1 << (8 * (size_of::<usize>()) - num.leading_zeros() as usize - 1)
8022cb36: 33 06 b5 40  	sub	a2, a0, a1
8022cb3a: 23 30 c4 fc  	sd	a2, -0x40(s0)
8022cb3e: 63 69 b5 02  	bltu	a0, a1, 0x8022cb70 <.Lpcrel_hi158>
8022cb42: 39 a8        	j	0x8022cb60 <.Lpcrel_hi157+0x14>

000000008022cb44 <.Lpcrel_hi156>:
8022cb44: 17 e5 00 00  	auipc	a0, 0xe
8022cb48: 13 05 c5 17  	addi	a0, a0, 0x17c

000000008022cb4c <.Lpcrel_hi157>:
8022cb4c: 97 e5 00 00  	auipc	a1, 0xe
8022cb50: 13 86 c5 15  	addi	a2, a1, 0x15c
8022cb54: 93 05 10 02  	li	a1, 0x21
8022cb58: 97 30 00 00  	auipc	ra, 0x3
8022cb5c: e7 80 00 6c  	jalr	0x6c0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022cb60: 03 35 04 fc  	ld	a0, -0x40(s0)
;     1 << (8 * (size_of::<usize>()) - num.leading_zeros() as usize - 1)
8022cb64: 93 05 f5 ff  	addi	a1, a0, -0x1
8022cb68: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022cb6c: 1d c5        	beqz	a0, 0x8022cb9a <.Lpcrel_hi160>
8022cb6e: 39 a8        	j	0x8022cb8c <.Lpcrel_hi159+0x14>

000000008022cb70 <.Lpcrel_hi158>:
8022cb70: 17 e5 00 00  	auipc	a0, 0xe
8022cb74: 13 05 05 cf  	addi	a0, a0, -0x310

000000008022cb78 <.Lpcrel_hi159>:
8022cb78: 97 e5 00 00  	auipc	a1, 0xe
8022cb7c: 13 86 05 13  	addi	a2, a1, 0x130
8022cb80: 93 05 10 02  	li	a1, 0x21
8022cb84: 97 30 00 00  	auipc	ra, 0x3
8022cb88: e7 80 40 69  	jalr	0x694(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022cb8c: 03 35 84 fb  	ld	a0, -0x48(s0)
8022cb90: 93 05 00 04  	li	a1, 0x40
;     1 << (8 * (size_of::<usize>()) - num.leading_zeros() as usize - 1)
8022cb94: 63 61 b5 02  	bltu	a0, a1, 0x8022cbb6 <.Lpcrel_hi161+0x14>
8022cb98: 05 a8        	j	0x8022cbc8 <.Lpcrel_hi162>

000000008022cb9a <.Lpcrel_hi160>:
8022cb9a: 17 e5 00 00  	auipc	a0, 0xe
8022cb9e: 13 05 65 cc  	addi	a0, a0, -0x33a

000000008022cba2 <.Lpcrel_hi161>:
8022cba2: 97 e5 00 00  	auipc	a1, 0xe
8022cba6: 13 86 65 14  	addi	a2, a1, 0x146
8022cbaa: 93 05 10 02  	li	a1, 0x21
8022cbae: 97 30 00 00  	auipc	ra, 0x3
8022cbb2: e7 80 a0 66  	jalr	0x66a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022cbb6: 83 35 84 fb  	ld	a1, -0x48(s0)
8022cbba: 05 45        	li	a0, 0x1
;     1 << (8 * (size_of::<usize>()) - num.leading_zeros() as usize - 1)
8022cbbc: 33 15 b5 00  	sll	a0, a0, a1
8022cbc0: a6 60        	ld	ra, 0x48(sp)
8022cbc2: 06 64        	ld	s0, 0x40(sp)
; }
8022cbc4: 61 61        	addi	sp, sp, 0x50
8022cbc6: 82 80        	ret

000000008022cbc8 <.Lpcrel_hi162>:
;     1 << (8 * (size_of::<usize>()) - num.leading_zeros() as usize - 1)
8022cbc8: 17 e5 00 00  	auipc	a0, 0xe
8022cbcc: 13 05 85 cc  	addi	a0, a0, -0x338

000000008022cbd0 <.Lpcrel_hi163>:
8022cbd0: 97 e5 00 00  	auipc	a1, 0xe
8022cbd4: 13 86 05 13  	addi	a2, a1, 0x130
8022cbd8: 93 05 30 02  	li	a1, 0x23
8022cbdc: 97 30 00 00  	auipc	ra, 0x3
8022cbe0: e7 80 c0 63  	jalr	0x63c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022cbe4 <_ZN4core4sync6atomic11atomic_load17h21b744b61142d056E>:
; unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
8022cbe4: 31 71        	addi	sp, sp, -0xc0
8022cbe6: 06 fd        	sd	ra, 0xb8(sp)
8022cbe8: 22 f9        	sd	s0, 0xb0(sp)
8022cbea: 80 01        	addi	s0, sp, 0xc0
8022cbec: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022cbf0: a3 0f b4 f4  	sb	a1, -0xa1(s0)
8022cbf4: 23 34 a4 fc  	sd	a0, -0x38(s0)
;         match order {
8022cbf8: 03 45 f4 f5  	lbu	a0, -0xa1(s0)
8022cbfc: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8022cc00: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         match order {
8022cc04: 0e 05        	slli	a0, a0, 0x3

000000008022cc06 <.Lpcrel_hi1>:
8022cc06: 97 e5 00 00  	auipc	a1, 0xe
8022cc0a: 93 85 25 11  	addi	a1, a1, 0x112
8022cc0e: 2e 95        	add	a0, a0, a1
8022cc10: 08 61        	ld	a0, 0x0(a0)
8022cc12: 02 85        	jr	a0
8022cc14: 00 00        	unimp

000000008022cc16 <.LBB7_3>:
8022cc16: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             Relaxed => intrinsics::atomic_load_relaxed(dst),
8022cc1a: 08 61        	ld	a0, 0x0(a0)
8022cc1c: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8022cc20: f9 a0        	j	0x8022ccee <.LBB7_7+0x14>

000000008022cc22 <.Lpcrel_hi2>:
;             Release => panic!("there is no such thing as a release load"),
8022cc22: 17 e5 00 00  	auipc	a0, 0xe
8022cc26: 93 05 e5 16  	addi	a1, a0, 0x16e
8022cc2a: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022cc2e: 05 45        	li	a0, 0x1
8022cc30: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8022cc34: 23 34 b4 f6  	sd	a1, -0x98(s0)
8022cc38: 23 38 a4 f6  	sd	a0, -0x90(s0)

000000008022cc3c <.Lpcrel_hi3>:
8022cc3c: 17 65 00 00  	auipc	a0, 0x6
8022cc40: 13 05 45 65  	addi	a0, a0, 0x654
8022cc44: 0c 61        	ld	a1, 0x0(a0)
8022cc46: 08 65        	ld	a0, 0x8(a0)
8022cc48: 23 34 b4 f8  	sd	a1, -0x78(s0)
8022cc4c: 23 38 a4 f8  	sd	a0, -0x70(s0)

000000008022cc50 <.Lpcrel_hi4>:
8022cc50: 17 e5 00 00  	auipc	a0, 0xe
8022cc54: 13 05 05 15  	addi	a0, a0, 0x150
8022cc58: 23 3c a4 f6  	sd	a0, -0x88(s0)
8022cc5c: 01 45        	li	a0, 0x0
8022cc5e: 23 30 a4 f8  	sd	a0, -0x80(s0)

000000008022cc62 <.Lpcrel_hi5>:
;             Release => panic!("there is no such thing as a release load"),
8022cc62: 17 e5 00 00  	auipc	a0, 0xe
8022cc66: 93 05 65 1b  	addi	a1, a0, 0x1b6
8022cc6a: 13 05 84 f6  	addi	a0, s0, -0x98
8022cc6e: 97 30 00 00  	auipc	ra, 0x3
8022cc72: e7 80 a0 53  	jalr	0x53a(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022cc76 <.LBB7_5>:
8022cc76: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             Acquire => intrinsics::atomic_load_acquire(dst),
8022cc7a: 08 61        	ld	a0, 0x0(a0)
8022cc7c: 0f 00 30 02  	fence	r, rw
8022cc80: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8022cc84: ad a0        	j	0x8022ccee <.LBB7_7+0x14>

000000008022cc86 <.Lpcrel_hi6>:
;             AcqRel => panic!("there is no such thing as an acquire-release load"),
8022cc86: 17 e5 00 00  	auipc	a0, 0xe
8022cc8a: 93 05 25 1e  	addi	a1, a0, 0x1e2
8022cc8e: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022cc92: 05 45        	li	a0, 0x1
8022cc94: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8022cc98: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022cc9c: 23 30 a4 fa  	sd	a0, -0x60(s0)

000000008022cca0 <.Lpcrel_hi7>:
8022cca0: 17 65 00 00  	auipc	a0, 0x6
8022cca4: 13 05 05 5f  	addi	a0, a0, 0x5f0
8022cca8: 0c 61        	ld	a1, 0x0(a0)
8022ccaa: 08 65        	ld	a0, 0x8(a0)
8022ccac: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022ccb0: 23 30 a4 fc  	sd	a0, -0x40(s0)

000000008022ccb4 <.Lpcrel_hi8>:
8022ccb4: 17 e5 00 00  	auipc	a0, 0xe
8022ccb8: 13 05 c5 0e  	addi	a0, a0, 0xec
8022ccbc: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022ccc0: 01 45        	li	a0, 0x0
8022ccc2: 23 38 a4 fa  	sd	a0, -0x50(s0)

000000008022ccc6 <.Lpcrel_hi9>:
;             AcqRel => panic!("there is no such thing as an acquire-release load"),
8022ccc6: 17 e5 00 00  	auipc	a0, 0xe
8022ccca: 93 05 25 1b  	addi	a1, a0, 0x1b2
8022ccce: 13 05 84 f9  	addi	a0, s0, -0x68
8022ccd2: 97 30 00 00  	auipc	ra, 0x3
8022ccd6: e7 80 60 4d  	jalr	0x4d6(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022ccda <.LBB7_7>:
8022ccda: 03 35 84 f4  	ld	a0, -0xb8(s0)
;             SeqCst => intrinsics::atomic_load_seqcst(dst),
8022ccde: 0f 00 30 03  	fence	rw, rw
8022cce2: 08 61        	ld	a0, 0x0(a0)
8022cce4: 0f 00 30 02  	fence	r, rw
8022cce8: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8022ccec: 09 a0        	j	0x8022ccee <.LBB7_7+0x14>
; }
8022ccee: 03 35 04 f6  	ld	a0, -0xa0(s0)
8022ccf2: ea 70        	ld	ra, 0xb8(sp)
8022ccf4: 4a 74        	ld	s0, 0xb0(sp)
8022ccf6: 29 61        	addi	sp, sp, 0xc0
8022ccf8: 82 80        	ret

000000008022ccfa <_ZN4core4sync6atomic12atomic_store17hb88dc25073c81290E>:
; unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
8022ccfa: 31 71        	addi	sp, sp, -0xc0
8022ccfc: 06 fd        	sd	ra, 0xb8(sp)
8022ccfe: 22 f9        	sd	s0, 0xb0(sp)
8022cd00: 80 01        	addi	s0, sp, 0xc0
8022cd02: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8022cd06: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022cd0a: a3 0f c4 f4  	sb	a2, -0xa1(s0)
8022cd0e: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022cd12: 23 34 b4 fc  	sd	a1, -0x38(s0)
;         match order {
8022cd16: 03 45 f4 f5  	lbu	a0, -0xa1(s0)
8022cd1a: 23 38 a4 f4  	sd	a0, -0xb0(s0)
8022cd1e: 03 35 04 f5  	ld	a0, -0xb0(s0)
;         match order {
8022cd22: 0e 05        	slli	a0, a0, 0x3

000000008022cd24 <.Lpcrel_hi10>:
8022cd24: 97 e5 00 00  	auipc	a1, 0xe
8022cd28: 93 85 c5 01  	addi	a1, a1, 0x1c
8022cd2c: 2e 95        	add	a0, a0, a1
8022cd2e: 08 61        	ld	a0, 0x0(a0)
8022cd30: 02 85        	jr	a0
8022cd32: 00 00        	unimp

000000008022cd34 <.LBB8_3>:
8022cd34: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022cd38: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             Relaxed => intrinsics::atomic_store_relaxed(dst, val),
8022cd3c: 88 e1        	sd	a0, 0x0(a1)
8022cd3e: e9 a0        	j	0x8022ce08 <.LBB8_7+0x10>

000000008022cd40 <.LBB8_4>:
8022cd40: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022cd44: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             Release => intrinsics::atomic_store_release(dst, val),
8022cd48: 0f 00 10 03  	fence	rw, w
8022cd4c: 88 e1        	sd	a0, 0x0(a1)
8022cd4e: 6d a8        	j	0x8022ce08 <.LBB8_7+0x10>

000000008022cd50 <.Lpcrel_hi11>:
;             Acquire => panic!("there is no such thing as an acquire store"),
8022cd50: 17 e5 00 00  	auipc	a0, 0xe
8022cd54: 93 05 05 17  	addi	a1, a0, 0x170
8022cd58: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022cd5c: 05 45        	li	a0, 0x1
8022cd5e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8022cd62: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022cd66: 23 34 a4 f6  	sd	a0, -0x98(s0)

000000008022cd6a <.Lpcrel_hi12>:
8022cd6a: 17 65 00 00  	auipc	a0, 0x6
8022cd6e: 13 05 65 52  	addi	a0, a0, 0x526
8022cd72: 0c 61        	ld	a1, 0x0(a0)
8022cd74: 08 65        	ld	a0, 0x8(a0)
8022cd76: 23 30 b4 f8  	sd	a1, -0x80(s0)
8022cd7a: 23 34 a4 f8  	sd	a0, -0x78(s0)

000000008022cd7e <.Lpcrel_hi13>:
8022cd7e: 17 e5 00 00  	auipc	a0, 0xe
8022cd82: 13 05 25 02  	addi	a0, a0, 0x22
8022cd86: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022cd8a: 01 45        	li	a0, 0x0
8022cd8c: 23 3c a4 f6  	sd	a0, -0x88(s0)

000000008022cd90 <.Lpcrel_hi14>:
;             Acquire => panic!("there is no such thing as an acquire store"),
8022cd90: 17 e5 00 00  	auipc	a0, 0xe
8022cd94: 93 05 05 14  	addi	a1, a0, 0x140
8022cd98: 13 05 04 f6  	addi	a0, s0, -0xa0
8022cd9c: 97 30 00 00  	auipc	ra, 0x3
8022cda0: e7 80 c0 40  	jalr	0x40c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022cda4 <.Lpcrel_hi15>:
;             AcqRel => panic!("there is no such thing as an acquire-release store"),
8022cda4: 17 e5 00 00  	auipc	a0, 0xe
8022cda8: 93 05 c5 17  	addi	a1, a0, 0x17c
8022cdac: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022cdb0: 05 45        	li	a0, 0x1
8022cdb2: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8022cdb6: 23 38 b4 f8  	sd	a1, -0x70(s0)
8022cdba: 23 3c a4 f8  	sd	a0, -0x68(s0)

000000008022cdbe <.Lpcrel_hi16>:
8022cdbe: 17 65 00 00  	auipc	a0, 0x6
8022cdc2: 13 05 25 4d  	addi	a0, a0, 0x4d2
8022cdc6: 0c 61        	ld	a1, 0x0(a0)
8022cdc8: 08 65        	ld	a0, 0x8(a0)
8022cdca: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022cdce: 23 3c a4 fa  	sd	a0, -0x48(s0)

000000008022cdd2 <.Lpcrel_hi17>:
8022cdd2: 17 e5 00 00  	auipc	a0, 0xe
8022cdd6: 13 05 e5 fc  	addi	a0, a0, -0x32
8022cdda: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022cdde: 01 45        	li	a0, 0x0
8022cde0: 23 34 a4 fa  	sd	a0, -0x58(s0)

000000008022cde4 <.Lpcrel_hi18>:
;             AcqRel => panic!("there is no such thing as an acquire-release store"),
8022cde4: 17 e5 00 00  	auipc	a0, 0xe
8022cde8: 93 05 c5 14  	addi	a1, a0, 0x14c
8022cdec: 13 05 04 f9  	addi	a0, s0, -0x70
8022cdf0: 97 30 00 00  	auipc	ra, 0x3
8022cdf4: e7 80 80 3b  	jalr	0x3b8(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022cdf8 <.LBB8_7>:
8022cdf8: 03 35 04 f4  	ld	a0, -0xc0(s0)
8022cdfc: 83 35 84 f4  	ld	a1, -0xb8(s0)
;             SeqCst => intrinsics::atomic_store_seqcst(dst, val),
8022ce00: 0f 00 10 03  	fence	rw, w
8022ce04: 88 e1        	sd	a0, 0x0(a1)
8022ce06: 09 a0        	j	0x8022ce08 <.LBB8_7+0x10>
8022ce08: ea 70        	ld	ra, 0xb8(sp)
8022ce0a: 4a 74        	ld	s0, 0xb0(sp)
; }
8022ce0c: 29 61        	addi	sp, sp, 0xc0
8022ce0e: 82 80        	ret

000000008022ce10 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2fbbc83ed43ab629E>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
8022ce10: 01 11        	addi	sp, sp, -0x20
8022ce12: 06 ec        	sd	ra, 0x18(sp)
8022ce14: 22 e8        	sd	s0, 0x10(sp)
8022ce16: 00 10        	addi	s0, sp, 0x20
8022ce18: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022ce1c: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022ce20: 08 61        	ld	a0, 0x0(a0)
8022ce22: 97 00 00 00  	auipc	ra, 0x0
8022ce26: e7 80 00 01  	jalr	0x10(ra) <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E>
8022ce2a: e2 60        	ld	ra, 0x18(sp)
8022ce2c: 42 64        	ld	s0, 0x10(sp)
8022ce2e: 05 61        	addi	sp, sp, 0x20
8022ce30: 82 80        	ret

000000008022ce32 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E>:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8022ce32: 39 71        	addi	sp, sp, -0x40
8022ce34: 06 fc        	sd	ra, 0x38(sp)
8022ce36: 22 f8        	sd	s0, 0x30(sp)
8022ce38: 80 00        	addi	s0, sp, 0x40
8022ce3a: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022ce3e: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022ce42: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022ce46: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if f.debug_lower_hex() {
8022ce4a: 03 c5 45 03  	lbu	a0, 0x34(a1)
8022ce4e: 41 89        	andi	a0, a0, 0x10
8022ce50: 11 e9        	bnez	a0, 0x8022ce64 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E+0x32>
8022ce52: 09 a0        	j	0x8022ce54 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E+0x22>
8022ce54: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 } else if f.debug_upper_hex() {
8022ce58: 03 45 45 03  	lbu	a0, 0x34(a0)
8022ce5c: 13 75 05 02  	andi	a0, a0, 0x20
8022ce60: 09 cd        	beqz	a0, 0x8022ce7a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E+0x48>
8022ce62: 3d a0        	j	0x8022ce90 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E+0x5e>
8022ce64: 83 35 84 fc  	ld	a1, -0x38(s0)
8022ce68: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::LowerHex::fmt(self, f)
8022ce6c: 97 20 00 00  	auipc	ra, 0x2
8022ce70: e7 80 80 14  	jalr	0x148(ra) <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E>
8022ce74: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022ce78: 05 a8        	j	0x8022cea8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E+0x76>
8022ce7a: 83 35 84 fc  	ld	a1, -0x38(s0)
8022ce7e: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::Display::fmt(self, f)
8022ce82: 97 40 00 00  	auipc	ra, 0x4
8022ce86: e7 80 c0 20  	jalr	0x20c(ra) <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h6446c111abea6893E>
8022ce8a: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022ce8e: 21 a8        	j	0x8022cea6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E+0x74>
8022ce90: 83 35 84 fc  	ld	a1, -0x38(s0)
8022ce94: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::UpperHex::fmt(self, f)
8022ce98: 97 20 00 00  	auipc	ra, 0x2
8022ce9c: e7 80 a0 18  	jalr	0x18a(ra) <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h035bce1319a3ef5cE>
8022cea0: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022cea4: 09 a0        	j	0x8022cea6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E+0x74>
;                 if f.debug_lower_hex() {
8022cea6: 09 a0        	j	0x8022cea8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u64$GT$3fmt17h23653f6d7fca1e89E+0x76>
;             }
8022cea8: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8022ceac: e2 70        	ld	ra, 0x38(sp)
8022ceae: 42 74        	ld	s0, 0x30(sp)
8022ceb0: 21 61        	addi	sp, sp, 0x40
8022ceb2: 82 80        	ret

000000008022ceb4 <_ZN5riscv8register6scause9Interrupt4from17h835f47cffa852076E>:
;     pub fn from(nr: usize) -> Self {
8022ceb4: 79 71        	addi	sp, sp, -0x30
8022ceb6: 06 f4        	sd	ra, 0x28(sp)
8022ceb8: 22 f0        	sd	s0, 0x20(sp)
8022ceba: 00 18        	addi	s0, sp, 0x30
8022cebc: aa 85        	mv	a1, a0
8022cebe: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         match nr {
8022cec2: 2e 85        	mv	a0, a1
8022cec4: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022cec8: 29 45        	li	a0, 0xa
8022ceca: 63 6c b5 00  	bltu	a0, a1, 0x8022cee2 <.LBB176_2>
8022cece: 03 35 84 fd  	ld	a0, -0x28(s0)
;         match nr {
8022ced2: 0e 05        	slli	a0, a0, 0x3

000000008022ced4 <.Lpcrel_hi292>:
8022ced4: 97 e5 00 00  	auipc	a1, 0xe
8022ced8: 93 85 45 07  	addi	a1, a1, 0x74
8022cedc: 2e 95        	add	a0, a0, a1
8022cede: 08 61        	ld	a0, 0x0(a0)
8022cee0: 02 85        	jr	a0

000000008022cee2 <.LBB176_2>:
8022cee2: 25 45        	li	a0, 0x9
;             _ => Interrupt::Unknown,
8022cee4: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cee8: a9 a0        	j	0x8022cf32 <.LBB176_11+0x8>

000000008022ceea <.LBB176_3>:
8022ceea: 01 45        	li	a0, 0x0
;             0 => Interrupt::UserSoft,
8022ceec: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cef0: 89 a0        	j	0x8022cf32 <.LBB176_11+0x8>

000000008022cef2 <.LBB176_4>:
8022cef2: 09 45        	li	a0, 0x2
;             1 => Interrupt::SupervisorSoft,
8022cef4: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cef8: 2d a8        	j	0x8022cf32 <.LBB176_11+0x8>

000000008022cefa <.LBB176_5>:
8022cefa: 05 45        	li	a0, 0x1
;             2 => Interrupt::VirtualSupervisorSoft,
8022cefc: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf00: 0d a8        	j	0x8022cf32 <.LBB176_11+0x8>

000000008022cf02 <.LBB176_6>:
8022cf02: 0d 45        	li	a0, 0x3
;             4 => Interrupt::UserTimer,
8022cf04: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf08: 2d a0        	j	0x8022cf32 <.LBB176_11+0x8>

000000008022cf0a <.LBB176_7>:
8022cf0a: 15 45        	li	a0, 0x5
;             5 => Interrupt::SupervisorTimer,
8022cf0c: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf10: 0d a0        	j	0x8022cf32 <.LBB176_11+0x8>

000000008022cf12 <.LBB176_8>:
8022cf12: 11 45        	li	a0, 0x4
;             6 => Interrupt::VirtualSupervisorTimer,
8022cf14: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf18: 29 a8        	j	0x8022cf32 <.LBB176_11+0x8>

000000008022cf1a <.LBB176_9>:
8022cf1a: 19 45        	li	a0, 0x6
;             8 => Interrupt::UserExternal,
8022cf1c: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf20: 09 a8        	j	0x8022cf32 <.LBB176_11+0x8>

000000008022cf22 <.LBB176_10>:
8022cf22: 21 45        	li	a0, 0x8
;             9 => Interrupt::SupervisorExternal,
8022cf24: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf28: 29 a0        	j	0x8022cf32 <.LBB176_11+0x8>

000000008022cf2a <.LBB176_11>:
8022cf2a: 1d 45        	li	a0, 0x7
;             10 => Interrupt::VirtualSupervisorExternal,
8022cf2c: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf30: 09 a0        	j	0x8022cf32 <.LBB176_11+0x8>
;     }
8022cf32: 03 45 74 fe  	lbu	a0, -0x19(s0)
8022cf36: a2 70        	ld	ra, 0x28(sp)
8022cf38: 02 74        	ld	s0, 0x20(sp)
8022cf3a: 45 61        	addi	sp, sp, 0x30
8022cf3c: 82 80        	ret

000000008022cf3e <_ZN5riscv8register6scause9Exception4from17hb490ad6c623c9c7dE>:
;     pub fn from(nr: usize) -> Self {
8022cf3e: 79 71        	addi	sp, sp, -0x30
8022cf40: 06 f4        	sd	ra, 0x28(sp)
8022cf42: 22 f0        	sd	s0, 0x20(sp)
8022cf44: 00 18        	addi	s0, sp, 0x30
8022cf46: aa 85        	mv	a1, a0
8022cf48: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         match nr {
8022cf4c: 2e 85        	mv	a0, a1
8022cf4e: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022cf52: 5d 45        	li	a0, 0x17
8022cf54: 63 6c b5 00  	bltu	a0, a1, 0x8022cf6c <.LBB177_2>
8022cf58: 03 35 84 fd  	ld	a0, -0x28(s0)
;         match nr {
8022cf5c: 0e 05        	slli	a0, a0, 0x3

000000008022cf5e <.Lpcrel_hi293>:
8022cf5e: 97 e5 00 00  	auipc	a1, 0xe
8022cf62: 93 85 25 04  	addi	a1, a1, 0x42
8022cf66: 2e 95        	add	a0, a0, a1
8022cf68: 08 61        	ld	a0, 0x0(a0)
8022cf6a: 02 85        	jr	a0

000000008022cf6c <.LBB177_2>:
8022cf6c: 41 45        	li	a0, 0x10
;             _ => Exception::Unknown,
8022cf6e: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf72: 49 a0        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cf74 <.LBB177_3>:
8022cf74: 01 45        	li	a0, 0x0
;             0 => Exception::InstructionMisaligned,
8022cf76: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf7a: ad a8        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cf7c <.LBB177_4>:
8022cf7c: 05 45        	li	a0, 0x1
;             1 => Exception::InstructionFault,
8022cf7e: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf82: 8d a8        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cf84 <.LBB177_5>:
8022cf84: 09 45        	li	a0, 0x2
;             2 => Exception::IllegalInstruction,
8022cf86: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf8a: ad a0        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cf8c <.LBB177_6>:
8022cf8c: 0d 45        	li	a0, 0x3
;             3 => Exception::Breakpoint,
8022cf8e: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf92: 8d a0        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cf94 <.LBB177_7>:
8022cf94: 11 45        	li	a0, 0x4
;             5 => Exception::LoadFault,
8022cf96: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cf9a: a9 a8        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cf9c <.LBB177_8>:
8022cf9c: 15 45        	li	a0, 0x5
;             6 => Exception::StoreMisaligned,
8022cf9e: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfa2: 89 a8        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfa4 <.LBB177_9>:
8022cfa4: 19 45        	li	a0, 0x6
;             7 => Exception::StoreFault,
8022cfa6: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfaa: a9 a0        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfac <.LBB177_10>:
8022cfac: 1d 45        	li	a0, 0x7
;             8 => Exception::UserEnvCall,
8022cfae: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfb2: 89 a0        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfb4 <.LBB177_11>:
8022cfb4: 21 45        	li	a0, 0x8
;             10 => Exception::VirtualSupervisorEnvCall,
8022cfb6: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfba: 2d a8        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfbc <.LBB177_12>:
8022cfbc: 25 45        	li	a0, 0x9
;             12 => Exception::InstructionPageFault,
8022cfbe: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfc2: 0d a8        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfc4 <.LBB177_13>:
8022cfc4: 29 45        	li	a0, 0xa
;             13 => Exception::LoadPageFault,
8022cfc6: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfca: 2d a0        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfcc <.LBB177_14>:
8022cfcc: 2d 45        	li	a0, 0xb
;             15 => Exception::StorePageFault,
8022cfce: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfd2: 0d a0        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfd4 <.LBB177_15>:
8022cfd4: 31 45        	li	a0, 0xc
;             20 => Exception::InstructionGuestPageFault,
8022cfd6: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfda: 29 a8        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfdc <.LBB177_16>:
8022cfdc: 35 45        	li	a0, 0xd
;             21 => Exception::LoadGuestPageFault,
8022cfde: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfe2: 09 a8        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfe4 <.LBB177_17>:
8022cfe4: 39 45        	li	a0, 0xe
;             22 => Exception::VirtualInstruction,
8022cfe6: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cfea: 29 a0        	j	0x8022cff4 <.LBB177_18+0x8>

000000008022cfec <.LBB177_18>:
8022cfec: 3d 45        	li	a0, 0xf
;             23 => Exception::StoreGuestPageFault,
8022cfee: a3 03 a4 fe  	sb	a0, -0x19(s0)
8022cff2: 09 a0        	j	0x8022cff4 <.LBB177_18+0x8>
;     }
8022cff4: 03 45 74 fe  	lbu	a0, -0x19(s0)
8022cff8: a2 70        	ld	ra, 0x28(sp)
8022cffa: 02 74        	ld	s0, 0x20(sp)
8022cffc: 45 61        	addi	sp, sp, 0x30
8022cffe: 82 80        	ret

000000008022d000 <_ZN5riscv8register6scause6Scause4code17h04c3ac167dda56e7E>:
;     pub fn code(&self) -> usize {
8022d000: 39 71        	addi	sp, sp, -0x40
8022d002: 06 fc        	sd	ra, 0x38(sp)
8022d004: 22 f8        	sd	s0, 0x30(sp)
8022d006: 80 00        	addi	s0, sp, 0x40
8022d008: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d00c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d010: 13 05 00 04  	li	a0, 0x40
8022d014: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022d018: 01 45        	li	a0, 0x0
;         let bit = 1 << (size_of::<usize>() * 8 - 1);
8022d01a: 11 e9        	bnez	a0, 0x8022d02e <.Lpcrel_hi294>
8022d01c: 09 a0        	j	0x8022d01e <_ZN5riscv8register6scause6Scause4code17h04c3ac167dda56e7E+0x1e>
8022d01e: 03 35 84 fd  	ld	a0, -0x28(s0)
;         let bit = 1 << (size_of::<usize>() * 8 - 1);
8022d022: 93 05 f5 ff  	addi	a1, a0, -0x1
8022d026: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022d02a: 1d c5        	beqz	a0, 0x8022d058 <.Lpcrel_hi296>
8022d02c: 39 a8        	j	0x8022d04a <.Lpcrel_hi295+0x14>

000000008022d02e <.Lpcrel_hi294>:
8022d02e: 17 e5 00 00  	auipc	a0, 0xe
8022d032: 13 05 25 10  	addi	a0, a0, 0x102

000000008022d036 <.Lpcrel_hi295>:
8022d036: 97 e5 00 00  	auipc	a1, 0xe
8022d03a: 13 86 a5 0d  	addi	a2, a1, 0xda
8022d03e: 93 05 10 02  	li	a1, 0x21
8022d042: 97 30 00 00  	auipc	ra, 0x3
8022d046: e7 80 60 1d  	jalr	0x1d6(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d04a: 03 35 84 fc  	ld	a0, -0x38(s0)
8022d04e: 93 05 00 04  	li	a1, 0x40
;         let bit = 1 << (size_of::<usize>() * 8 - 1);
8022d052: 63 61 b5 02  	bltu	a0, a1, 0x8022d074 <.Lpcrel_hi297+0x14>
8022d056: 81 a0        	j	0x8022d096 <.Lpcrel_hi298>

000000008022d058 <.Lpcrel_hi296>:
8022d058: 17 e5 00 00  	auipc	a0, 0xe
8022d05c: 13 05 85 00  	addi	a0, a0, 0x8

000000008022d060 <.Lpcrel_hi297>:
8022d060: 97 e5 00 00  	auipc	a1, 0xe
8022d064: 13 86 85 0f  	addi	a2, a1, 0xf8
8022d068: 93 05 10 02  	li	a1, 0x21
8022d06c: 97 30 00 00  	auipc	ra, 0x3
8022d070: e7 80 c0 1a  	jalr	0x1ac(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d074: 03 35 04 fd  	ld	a0, -0x30(s0)
8022d078: 03 36 84 fc  	ld	a2, -0x38(s0)
8022d07c: 85 45        	li	a1, 0x1
;         let bit = 1 << (size_of::<usize>() * 8 - 1);
8022d07e: b3 95 c5 00  	sll	a1, a1, a2
8022d082: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         self.bits & !bit
8022d086: 08 61        	ld	a0, 0x0(a0)
8022d088: 93 c5 f5 ff  	not	a1, a1
8022d08c: 6d 8d        	and	a0, a0, a1
8022d08e: e2 70        	ld	ra, 0x38(sp)
8022d090: 42 74        	ld	s0, 0x30(sp)
;     }
8022d092: 21 61        	addi	sp, sp, 0x40
8022d094: 82 80        	ret

000000008022d096 <.Lpcrel_hi298>:
;         let bit = 1 << (size_of::<usize>() * 8 - 1);
8022d096: 17 e5 00 00  	auipc	a0, 0xe
8022d09a: 13 05 a5 ff  	addi	a0, a0, -0x6

000000008022d09e <.Lpcrel_hi299>:
8022d09e: 97 e5 00 00  	auipc	a1, 0xe
8022d0a2: 13 86 25 0d  	addi	a2, a1, 0xd2
8022d0a6: 93 05 30 02  	li	a1, 0x23
8022d0aa: 97 30 00 00  	auipc	ra, 0x3
8022d0ae: e7 80 e0 16  	jalr	0x16e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022d0b2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h47f40d91cca42b11E>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
8022d0b2: 01 11        	addi	sp, sp, -0x20
8022d0b4: 06 ec        	sd	ra, 0x18(sp)
8022d0b6: 22 e8        	sd	s0, 0x10(sp)
8022d0b8: 00 10        	addi	s0, sp, 0x20
8022d0ba: 2e 86        	mv	a2, a1
8022d0bc: aa 85        	mv	a1, a0
8022d0be: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022d0c2: 23 34 c4 fe  	sd	a2, -0x18(s0)
8022d0c6: 88 61        	ld	a0, 0x0(a1)
8022d0c8: 8c 65        	ld	a1, 0x8(a1)
8022d0ca: 97 30 00 00  	auipc	ra, 0x3
8022d0ce: e7 80 80 bc  	jalr	-0x438(ra) <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E>
8022d0d2: e2 60        	ld	ra, 0x18(sp)
8022d0d4: 42 64        	ld	s0, 0x10(sp)
8022d0d6: 05 61        	addi	sp, sp, 0x20
8022d0d8: 82 80        	ret

000000008022d0da <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h99f67a6e2e127edfE>:
8022d0da: 01 11        	addi	sp, sp, -0x20
8022d0dc: 06 ec        	sd	ra, 0x18(sp)
8022d0de: 22 e8        	sd	s0, 0x10(sp)
8022d0e0: 00 10        	addi	s0, sp, 0x20
8022d0e2: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d0e6: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022d0ea: 08 61        	ld	a0, 0x0(a0)
8022d0ec: 97 00 00 00  	auipc	ra, 0x0
8022d0f0: e7 80 a0 0a  	jalr	0xaa(ra) <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE>
8022d0f4: e2 60        	ld	ra, 0x18(sp)
8022d0f6: 42 64        	ld	s0, 0x10(sp)
8022d0f8: 05 61        	addi	sp, sp, 0x20
8022d0fa: 82 80        	ret

000000008022d0fc <_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1f3eb79e230979daE>:
;     fn fmt(&self, f: &mut Formatter<'_>) -> Result {
8022d0fc: 75 71        	addi	sp, sp, -0x90
8022d0fe: 06 e5        	sd	ra, 0x88(sp)
8022d100: 22 e1        	sd	s0, 0x80(sp)
8022d102: 00 09        	addi	s0, sp, 0x90
8022d104: 23 38 c4 f6  	sd	a2, -0x90(s0)
8022d108: 2e 86        	mv	a2, a1
8022d10a: 83 35 04 f7  	ld	a1, -0x90(s0)
8022d10e: 23 3c c4 f6  	sd	a2, -0x88(s0)
8022d112: 2a 86        	mv	a2, a0
8022d114: 03 35 84 f7  	ld	a0, -0x88(s0)
8022d118: 23 30 c4 f8  	sd	a2, -0x80(s0)
8022d11c: 23 34 c4 fc  	sd	a2, -0x38(s0)
8022d120: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d124: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022d128: 13 05 84 f8  	addi	a0, s0, -0x78
;         f.debug_list().entries(self.iter()).finish()
8022d12c: 97 30 00 00  	auipc	ra, 0x3
8022d130: e7 80 20 b3  	jalr	-0x4ce(ra) <_ZN4core3fmt9Formatter10debug_list17heb53eb4dbb5886dcE>
8022d134: 83 35 84 f7  	ld	a1, -0x88(s0)
8022d138: 03 35 04 f8  	ld	a0, -0x80(s0)
;         let len = slice.len();
8022d13c: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { NonNull { pointer: reference as *const T } }
8022d140: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022d144: 23 3c b4 fa  	sd	a1, -0x48(s0)
;         unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
8022d148: 23 34 a4 fa  	sd	a0, -0x58(s0)
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
8022d14c: 09 a0        	j	0x8022d14e <_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1f3eb79e230979daE+0x52>
8022d14e: 03 35 04 f8  	ld	a0, -0x80(s0)
8022d152: 83 35 84 f7  	ld	a1, -0x88(s0)
;         self.pointer as *mut T
8022d156: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         unsafe { intrinsics::offset(self, count) }
8022d15a: 2e 95        	add	a0, a0, a1
;                 if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
8022d15c: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022d160: 09 a0        	j	0x8022d162 <_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17h1f3eb79e230979daE+0x66>
;             Self { ptr, end_or_len, _marker: PhantomData }
8022d162: 03 35 04 fc  	ld	a0, -0x40(s0)
8022d166: 83 35 84 fa  	ld	a1, -0x58(s0)
8022d16a: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022d16e: 23 30 a4 fa  	sd	a0, -0x60(s0)
;         f.debug_list().entries(self.iter()).finish()
8022d172: 83 35 84 f9  	ld	a1, -0x68(s0)
8022d176: 03 36 04 fa  	ld	a2, -0x60(s0)
8022d17a: 13 05 84 f8  	addi	a0, s0, -0x78
8022d17e: 97 10 00 00  	auipc	ra, 0x1
8022d182: e7 80 20 c6  	jalr	-0x39e(ra) <_ZN4core3fmt8builders9DebugList7entries17hc33f7e00aed5e105E>
8022d186: 97 40 00 00  	auipc	ra, 0x4
8022d18a: e7 80 60 88  	jalr	-0x77a(ra) <_ZN4core3fmt8builders9DebugList6finish17h599b8ae84f2379ceE>
8022d18e: aa 60        	ld	ra, 0x88(sp)
8022d190: 0a 64        	ld	s0, 0x80(sp)
;     }
8022d192: 49 61        	addi	sp, sp, 0x90
8022d194: 82 80        	ret

000000008022d196 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE>:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8022d196: 39 71        	addi	sp, sp, -0x40
8022d198: 06 fc        	sd	ra, 0x38(sp)
8022d19a: 22 f8        	sd	s0, 0x30(sp)
8022d19c: 80 00        	addi	s0, sp, 0x40
8022d19e: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022d1a2: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d1a6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d1aa: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if f.debug_lower_hex() {
8022d1ae: 03 c5 45 03  	lbu	a0, 0x34(a1)
8022d1b2: 41 89        	andi	a0, a0, 0x10
8022d1b4: 11 e9        	bnez	a0, 0x8022d1c8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE+0x32>
8022d1b6: 09 a0        	j	0x8022d1b8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE+0x22>
8022d1b8: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 } else if f.debug_upper_hex() {
8022d1bc: 03 45 45 03  	lbu	a0, 0x34(a0)
8022d1c0: 13 75 05 02  	andi	a0, a0, 0x20
8022d1c4: 09 cd        	beqz	a0, 0x8022d1de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE+0x48>
8022d1c6: 3d a0        	j	0x8022d1f4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE+0x5e>
8022d1c8: 83 35 84 fc  	ld	a1, -0x38(s0)
8022d1cc: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::LowerHex::fmt(self, f)
8022d1d0: 97 20 00 00  	auipc	ra, 0x2
8022d1d4: e7 80 40 de  	jalr	-0x21c(ra) <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E>
8022d1d8: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022d1dc: 05 a8        	j	0x8022d20c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE+0x76>
8022d1de: 83 35 84 fc  	ld	a1, -0x38(s0)
8022d1e2: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::Display::fmt(self, f)
8022d1e6: 97 40 00 00  	auipc	ra, 0x4
8022d1ea: e7 80 80 ea  	jalr	-0x158(ra) <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h6446c111abea6893E>
8022d1ee: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022d1f2: 21 a8        	j	0x8022d20a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE+0x74>
8022d1f4: 83 35 84 fc  	ld	a1, -0x38(s0)
8022d1f8: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::UpperHex::fmt(self, f)
8022d1fc: 97 20 00 00  	auipc	ra, 0x2
8022d200: e7 80 60 e2  	jalr	-0x1da(ra) <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h035bce1319a3ef5cE>
8022d204: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022d208: 09 a0        	j	0x8022d20a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE+0x74>
;                 if f.debug_lower_hex() {
8022d20a: 09 a0        	j	0x8022d20c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hfdc79d1a34d09ffcE+0x76>
;             }
8022d20c: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8022d210: e2 70        	ld	ra, 0x38(sp)
8022d212: 42 74        	ld	s0, 0x30(sp)
8022d214: 21 61        	addi	sp, sp, 0x40
8022d216: 82 80        	ret

000000008022d218 <_ZN4core5slice3raw14from_raw_parts17hbd12e2870e3a2a05E>:
; pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
8022d218: 1d 71        	addi	sp, sp, -0x60
8022d21a: 86 ec        	sd	ra, 0x58(sp)
8022d21c: a2 e8        	sd	s0, 0x50(sp)
8022d21e: 80 10        	addi	s0, sp, 0x60
8022d220: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022d224: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022d228: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022d22c: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         assert_unsafe_precondition!(
8022d230: 09 a0        	j	0x8022d232 <_ZN4core5slice3raw14from_raw_parts17hbd12e2870e3a2a05E+0x1a>
8022d232: 83 36 84 fa  	ld	a3, -0x58(s0)
8022d236: 03 35 04 fb  	ld	a0, -0x50(s0)
8022d23a: 05 46        	li	a2, 0x1
;         assert_unsafe_precondition!(
8022d23c: b2 85        	mv	a1, a2
8022d23e: 97 00 00 00  	auipc	ra, 0x0
8022d242: e7 80 e0 03  	jalr	0x3e(ra) <_ZN4core5slice3raw14from_raw_parts18precondition_check17h786dc2d78b44d153E>
8022d246: 09 a0        	j	0x8022d248 <_ZN4core5slice3raw14from_raw_parts17hbd12e2870e3a2a05E+0x30>
8022d248: 03 35 84 fa  	ld	a0, -0x58(s0)
8022d24c: 83 35 04 fb  	ld	a1, -0x50(s0)
;         self as _
8022d250: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
8022d254: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022d258: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d25c: 83 35 84 fc  	ld	a1, -0x38(s0)
8022d260: 03 35 04 fd  	ld	a0, -0x30(s0)
8022d264: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022d268: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022d26c: 03 35 84 fb  	ld	a0, -0x48(s0)
8022d270: 83 35 04 fc  	ld	a1, -0x40(s0)
8022d274: e6 60        	ld	ra, 0x58(sp)
8022d276: 46 64        	ld	s0, 0x50(sp)
; }
8022d278: 25 61        	addi	sp, sp, 0x60
8022d27a: 82 80        	ret

000000008022d27c <_ZN4core5slice3raw14from_raw_parts18precondition_check17h786dc2d78b44d153E>:
;             const fn precondition_check($($name:$ty),*) {
8022d27c: 1d 71        	addi	sp, sp, -0x60
8022d27e: 86 ec        	sd	ra, 0x58(sp)
8022d280: a2 e8        	sd	s0, 0x50(sp)
8022d282: 80 10        	addi	s0, sp, 0x60
8022d284: 23 38 d4 fa  	sd	a3, -0x50(s0)
8022d288: 23 3c c4 fa  	sd	a2, -0x48(s0)
8022d28c: 2e 86        	mv	a2, a1
8022d28e: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d292: 23 30 c4 fc  	sd	a2, -0x40(s0)
8022d296: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d29a: 23 3c c4 fc  	sd	a2, -0x28(s0)
8022d29e: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022d2a2: 23 34 d4 fe  	sd	a3, -0x18(s0)
;                 is_aligned_and_not_null(data, align)
8022d2a6: 97 10 00 00  	auipc	ra, 0x1
8022d2aa: e7 80 c0 a2  	jalr	-0x5d4(ra) <_ZN4core10intrinsics23is_aligned_and_not_null17h3640266eb5d4143dE>
8022d2ae: 19 e1        	bnez	a0, 0x8022d2b4 <_ZN4core5slice3raw14from_raw_parts18precondition_check17h786dc2d78b44d153E+0x38>
8022d2b0: 09 a0        	j	0x8022d2b2 <_ZN4core5slice3raw14from_raw_parts18precondition_check17h786dc2d78b44d153E+0x36>
; #![no_std]
8022d2b2: 09 a8        	j	0x8022d2c4 <.Lpcrel_hi12>
8022d2b4: 03 35 04 fc  	ld	a0, -0x40(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8022d2b8: 93 35 15 00  	seqz	a1, a0
8022d2bc: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022d2c0: 01 cd        	beqz	a0, 0x8022d2d8 <.Lpcrel_hi12+0x14>
8022d2c2: 39 a8        	j	0x8022d2e0 <.Lpcrel_hi12+0x1c>

000000008022d2c4 <.Lpcrel_hi12>:
;                     ::core::panicking::panic_nounwind(
8022d2c4: 17 e5 00 00  	auipc	a0, 0xe
8022d2c8: 13 05 55 f7  	addi	a0, a0, -0x8b
8022d2cc: 93 05 20 0a  	li	a1, 0xa2
8022d2d0: 97 30 00 00  	auipc	ra, 0x3
8022d2d4: e7 80 00 f7  	jalr	-0x90(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8022d2d8: 7d 55        	li	a0, -0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8022d2da: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022d2de: 31 a0        	j	0x8022d2ea <.Lpcrel_hi12+0x26>
8022d2e0: 03 35 84 fa  	ld	a0, -0x58(s0)
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8022d2e4: 05 89        	andi	a0, a0, 0x1
8022d2e6: 15 e1        	bnez	a0, 0x8022d30a <.Lpcrel_hi13>
8022d2e8: 01 a8        	j	0x8022d2f8 <.Lpcrel_hi12+0x34>
8022d2ea: 83 35 04 fb  	ld	a1, -0x50(s0)
;     len <= max_len
8022d2ee: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 && is_valid_allocation_size(size, len)
8022d2f2: 63 7a b5 02  	bgeu	a0, a1, 0x8022d326 <.Lpcrel_hi14+0x14>
8022d2f6: 3d a0        	j	0x8022d324 <.Lpcrel_hi14+0x12>
8022d2f8: 83 35 04 fc  	ld	a1, -0x40(s0)
8022d2fc: 7d 55        	li	a0, -0x1
8022d2fe: 05 81        	srli	a0, a0, 0x1
;     let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
8022d300: 33 55 b5 02  	divu	a0, a0, a1
8022d304: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022d308: cd b7        	j	0x8022d2ea <.Lpcrel_hi12+0x26>

000000008022d30a <.Lpcrel_hi13>:
8022d30a: 17 e5 00 00  	auipc	a0, 0xe
8022d30e: 13 05 65 f1  	addi	a0, a0, -0xea

000000008022d312 <.Lpcrel_hi14>:
8022d312: 97 e5 00 00  	auipc	a1, 0xe
8022d316: 13 86 e5 ee  	addi	a2, a1, -0x112
8022d31a: e5 45        	li	a1, 0x19
8022d31c: 97 30 00 00  	auipc	ra, 0x3
8022d320: e7 80 c0 ef  	jalr	-0x104(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
; #![no_std]
8022d324: 45 b7        	j	0x8022d2c4 <.Lpcrel_hi12>
8022d326: e6 60        	ld	ra, 0x58(sp)
8022d328: 46 64        	ld	s0, 0x50(sp)
;             }
8022d32a: 25 61        	addi	sp, sp, 0x60
8022d32c: 82 80        	ret

000000008022d32e <_ZN4zero11read_unsafe17h041f513ad371b89cE>:
; pub unsafe fn read_unsafe<T: Sized>(input: &[u8]) -> &T {
8022d32e: 79 71        	addi	sp, sp, -0x30
8022d330: 06 f4        	sd	ra, 0x28(sp)
8022d332: 22 f0        	sd	s0, 0x20(sp)
8022d334: 00 18        	addi	s0, sp, 0x30
8022d336: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d33a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022d33e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d342: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022d346: a2 70        	ld	ra, 0x28(sp)
8022d348: 02 74        	ld	s0, 0x20(sp)
; }
8022d34a: 45 61        	addi	sp, sp, 0x30
8022d34c: 82 80        	ret

000000008022d34e <_ZN4zero11read_unsafe17h5a50e7be978db227E>:
; pub unsafe fn read_unsafe<T: Sized>(input: &[u8]) -> &T {
8022d34e: 79 71        	addi	sp, sp, -0x30
8022d350: 06 f4        	sd	ra, 0x28(sp)
8022d352: 22 f0        	sd	s0, 0x20(sp)
8022d354: 00 18        	addi	s0, sp, 0x30
8022d356: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d35a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022d35e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d362: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022d366: a2 70        	ld	ra, 0x28(sp)
8022d368: 02 74        	ld	s0, 0x20(sp)
; }
8022d36a: 45 61        	addi	sp, sp, 0x30
8022d36c: 82 80        	ret

000000008022d36e <_ZN4zero11read_unsafe17h6a07f218fe978e0bE>:
; pub unsafe fn read_unsafe<T: Sized>(input: &[u8]) -> &T {
8022d36e: 79 71        	addi	sp, sp, -0x30
8022d370: 06 f4        	sd	ra, 0x28(sp)
8022d372: 22 f0        	sd	s0, 0x20(sp)
8022d374: 00 18        	addi	s0, sp, 0x30
8022d376: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d37a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022d37e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d382: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022d386: a2 70        	ld	ra, 0x28(sp)
8022d388: 02 74        	ld	s0, 0x20(sp)
; }
8022d38a: 45 61        	addi	sp, sp, 0x30
8022d38c: 82 80        	ret

000000008022d38e <_ZN4zero11read_unsafe17h6eb690e6d49de445E>:
; pub unsafe fn read_unsafe<T: Sized>(input: &[u8]) -> &T {
8022d38e: 79 71        	addi	sp, sp, -0x30
8022d390: 06 f4        	sd	ra, 0x28(sp)
8022d392: 22 f0        	sd	s0, 0x20(sp)
8022d394: 00 18        	addi	s0, sp, 0x30
8022d396: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d39a: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022d39e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d3a2: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022d3a6: a2 70        	ld	ra, 0x28(sp)
8022d3a8: 02 74        	ld	s0, 0x20(sp)
; }
8022d3aa: 45 61        	addi	sp, sp, 0x30
8022d3ac: 82 80        	ret

000000008022d3ae <_ZN4zero11read_unsafe17h7c0dedf311365251E>:
; pub unsafe fn read_unsafe<T: Sized>(input: &[u8]) -> &T {
8022d3ae: 79 71        	addi	sp, sp, -0x30
8022d3b0: 06 f4        	sd	ra, 0x28(sp)
8022d3b2: 22 f0        	sd	s0, 0x20(sp)
8022d3b4: 00 18        	addi	s0, sp, 0x30
8022d3b6: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022d3ba: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022d3be: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d3c2: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022d3c6: a2 70        	ld	ra, 0x28(sp)
8022d3c8: 02 74        	ld	s0, 0x20(sp)
; }
8022d3ca: 45 61        	addi	sp, sp, 0x30
8022d3cc: 82 80        	ret

000000008022d3ce <_ZN4zero4read17h2b238126f32f3221E>:
; pub fn read<T: Pod>(input: &[u8]) -> &T {
8022d3ce: 1d 71        	addi	sp, sp, -0x60
8022d3d0: 86 ec        	sd	ra, 0x58(sp)
8022d3d2: a2 e8        	sd	s0, 0x50(sp)
8022d3d4: 80 10        	addi	s0, sp, 0x60
8022d3d6: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022d3da: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022d3de: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022d3e2: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022d3e6: 3d 45        	li	a0, 0xf
;     assert!(mem::size_of::<T>() <= input.len());
8022d3e8: 63 61 b5 02  	bltu	a0, a1, 0x8022d40a <.Lpcrel_hi164+0x14>
8022d3ec: 09 a0        	j	0x8022d3ee <.Lpcrel_hi163>

000000008022d3ee <.Lpcrel_hi163>:
8022d3ee: 17 e5 00 00  	auipc	a0, 0xe
8022d3f2: 13 05 35 f7  	addi	a0, a0, -0x8d

000000008022d3f6 <.Lpcrel_hi164>:
8022d3f6: 97 e5 00 00  	auipc	a1, 0xe
8022d3fa: 13 86 25 fa  	addi	a2, a1, -0x5e
8022d3fe: 93 05 40 03  	li	a1, 0x34
8022d402: 97 30 00 00  	auipc	ra, 0x3
8022d406: e7 80 60 e1  	jalr	-0x1ea(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d40a: 03 35 04 fc  	ld	a0, -0x40(s0)
8022d40e: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d412: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d416: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     let addr = input.as_ptr() as usize;
8022d41a: aa 85        	mv	a1, a0
8022d41c: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022d420: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022d424: 01 45        	li	a0, 0x0
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d426: aa 85        	mv	a1, a0
8022d428: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022d42c: 09 e9        	bnez	a0, 0x8022d43e <.Lpcrel_hi165>
8022d42e: 09 a0        	j	0x8022d430 <.Lpcrel_hi164+0x3a>
8022d430: 03 35 84 fa  	ld	a0, -0x58(s0)
8022d434: 83 35 04 fb  	ld	a1, -0x50(s0)
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d438: 6d 8d        	and	a0, a0, a1
8022d43a: 05 c1        	beqz	a0, 0x8022d45a <.Lpcrel_hi166+0x14>
8022d43c: 1d a8        	j	0x8022d472 <.Lpcrel_hi167>

000000008022d43e <.Lpcrel_hi165>:
8022d43e: 17 e5 00 00  	auipc	a0, 0xe
8022d442: 13 05 25 f0  	addi	a0, a0, -0xfe

000000008022d446 <.Lpcrel_hi166>:
8022d446: 97 e5 00 00  	auipc	a1, 0xe
8022d44a: 13 86 a5 f6  	addi	a2, a1, -0x96
8022d44e: 93 05 10 02  	li	a1, 0x21
8022d452: 97 30 00 00  	auipc	ra, 0x3
8022d456: e7 80 60 dc  	jalr	-0x23a(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d45a: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d45e: 03 35 04 fc  	ld	a0, -0x40(s0)
;     unsafe { read_unsafe(input) }
8022d462: 97 00 00 00  	auipc	ra, 0x0
8022d466: e7 80 c0 f0  	jalr	-0xf4(ra) <_ZN4zero11read_unsafe17h6a07f218fe978e0bE>
8022d46a: e6 60        	ld	ra, 0x58(sp)
8022d46c: 46 64        	ld	s0, 0x50(sp)
; }
8022d46e: 25 61        	addi	sp, sp, 0x60
8022d470: 82 80        	ret

000000008022d472 <.Lpcrel_hi167>:
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d472: 17 e5 00 00  	auipc	a0, 0xe
8022d476: 13 05 65 f5  	addi	a0, a0, -0xaa

000000008022d47a <.Lpcrel_hi168>:
8022d47a: 97 e5 00 00  	auipc	a1, 0xe
8022d47e: 13 86 e5 f8  	addi	a2, a1, -0x72
8022d482: 93 05 a0 03  	li	a1, 0x3a
8022d486: 97 30 00 00  	auipc	ra, 0x3
8022d48a: e7 80 20 d9  	jalr	-0x26e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022d48e <_ZN4zero4read17h31beaabe75fa597eE>:
; pub fn read<T: Pod>(input: &[u8]) -> &T {
8022d48e: 1d 71        	addi	sp, sp, -0x60
8022d490: 86 ec        	sd	ra, 0x58(sp)
8022d492: a2 e8        	sd	s0, 0x50(sp)
8022d494: 80 10        	addi	s0, sp, 0x60
8022d496: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022d49a: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022d49e: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022d4a2: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022d4a6: 13 05 f0 02  	li	a0, 0x2f
;     assert!(mem::size_of::<T>() <= input.len());
8022d4aa: 63 61 b5 02  	bltu	a0, a1, 0x8022d4cc <.Lpcrel_hi176+0x14>
8022d4ae: 09 a0        	j	0x8022d4b0 <.Lpcrel_hi175>

000000008022d4b0 <.Lpcrel_hi175>:
8022d4b0: 17 e5 00 00  	auipc	a0, 0xe
8022d4b4: 13 05 15 eb  	addi	a0, a0, -0x14f

000000008022d4b8 <.Lpcrel_hi176>:
8022d4b8: 97 e5 00 00  	auipc	a1, 0xe
8022d4bc: 13 86 05 ee  	addi	a2, a1, -0x120
8022d4c0: 93 05 40 03  	li	a1, 0x34
8022d4c4: 97 30 00 00  	auipc	ra, 0x3
8022d4c8: e7 80 40 d5  	jalr	-0x2ac(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d4cc: 03 35 04 fc  	ld	a0, -0x40(s0)
8022d4d0: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d4d4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d4d8: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     let addr = input.as_ptr() as usize;
8022d4dc: aa 85        	mv	a1, a0
8022d4de: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022d4e2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022d4e6: 1d 45        	li	a0, 0x7
8022d4e8: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022d4ec: 01 45        	li	a0, 0x0
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d4ee: 09 e9        	bnez	a0, 0x8022d500 <.Lpcrel_hi177>
8022d4f0: 09 a0        	j	0x8022d4f2 <.Lpcrel_hi176+0x3a>
8022d4f2: 03 35 84 fa  	ld	a0, -0x58(s0)
8022d4f6: 83 35 04 fb  	ld	a1, -0x50(s0)
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d4fa: 6d 8d        	and	a0, a0, a1
8022d4fc: 05 c1        	beqz	a0, 0x8022d51c <.Lpcrel_hi178+0x14>
8022d4fe: 1d a8        	j	0x8022d534 <.Lpcrel_hi179>

000000008022d500 <.Lpcrel_hi177>:
8022d500: 17 e5 00 00  	auipc	a0, 0xe
8022d504: 13 05 05 e4  	addi	a0, a0, -0x1c0

000000008022d508 <.Lpcrel_hi178>:
8022d508: 97 e5 00 00  	auipc	a1, 0xe
8022d50c: 13 86 85 ea  	addi	a2, a1, -0x158
8022d510: 93 05 10 02  	li	a1, 0x21
8022d514: 97 30 00 00  	auipc	ra, 0x3
8022d518: e7 80 40 d0  	jalr	-0x2fc(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d51c: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d520: 03 35 04 fc  	ld	a0, -0x40(s0)
;     unsafe { read_unsafe(input) }
8022d524: 97 00 00 00  	auipc	ra, 0x0
8022d528: e7 80 a0 e6  	jalr	-0x196(ra) <_ZN4zero11read_unsafe17h6eb690e6d49de445E>
8022d52c: e6 60        	ld	ra, 0x58(sp)
8022d52e: 46 64        	ld	s0, 0x50(sp)
; }
8022d530: 25 61        	addi	sp, sp, 0x60
8022d532: 82 80        	ret

000000008022d534 <.Lpcrel_hi179>:
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d534: 17 e5 00 00  	auipc	a0, 0xe
8022d538: 13 05 45 e9  	addi	a0, a0, -0x16c

000000008022d53c <.Lpcrel_hi180>:
8022d53c: 97 e5 00 00  	auipc	a1, 0xe
8022d540: 13 86 c5 ec  	addi	a2, a1, -0x134
8022d544: 93 05 a0 03  	li	a1, 0x3a
8022d548: 97 30 00 00  	auipc	ra, 0x3
8022d54c: e7 80 00 cd  	jalr	-0x330(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022d550 <_ZN4zero4read17h451fe89d7d041850E>:
; pub fn read<T: Pod>(input: &[u8]) -> &T {
8022d550: 1d 71        	addi	sp, sp, -0x60
8022d552: 86 ec        	sd	ra, 0x58(sp)
8022d554: a2 e8        	sd	s0, 0x50(sp)
8022d556: 80 10        	addi	s0, sp, 0x60
8022d558: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022d55c: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022d560: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022d564: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022d568: 7d 45        	li	a0, 0x1f
;     assert!(mem::size_of::<T>() <= input.len());
8022d56a: 63 61 b5 02  	bltu	a0, a1, 0x8022d58c <.Lpcrel_hi188+0x14>
8022d56e: 09 a0        	j	0x8022d570 <.Lpcrel_hi187>

000000008022d570 <.Lpcrel_hi187>:
8022d570: 17 e5 00 00  	auipc	a0, 0xe
8022d574: 13 05 15 df  	addi	a0, a0, -0x20f

000000008022d578 <.Lpcrel_hi188>:
8022d578: 97 e5 00 00  	auipc	a1, 0xe
8022d57c: 13 86 05 e2  	addi	a2, a1, -0x1e0
8022d580: 93 05 40 03  	li	a1, 0x34
8022d584: 97 30 00 00  	auipc	ra, 0x3
8022d588: e7 80 40 c9  	jalr	-0x36c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d58c: 03 35 04 fc  	ld	a0, -0x40(s0)
8022d590: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d594: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d598: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     let addr = input.as_ptr() as usize;
8022d59c: aa 85        	mv	a1, a0
8022d59e: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022d5a2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022d5a6: 0d 45        	li	a0, 0x3
8022d5a8: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022d5ac: 01 45        	li	a0, 0x0
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d5ae: 09 e9        	bnez	a0, 0x8022d5c0 <.Lpcrel_hi189>
8022d5b0: 09 a0        	j	0x8022d5b2 <.Lpcrel_hi188+0x3a>
8022d5b2: 03 35 84 fa  	ld	a0, -0x58(s0)
8022d5b6: 83 35 04 fb  	ld	a1, -0x50(s0)
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d5ba: 6d 8d        	and	a0, a0, a1
8022d5bc: 05 c1        	beqz	a0, 0x8022d5dc <.Lpcrel_hi190+0x14>
8022d5be: 1d a8        	j	0x8022d5f4 <.Lpcrel_hi191>

000000008022d5c0 <.Lpcrel_hi189>:
8022d5c0: 17 e5 00 00  	auipc	a0, 0xe
8022d5c4: 13 05 05 d8  	addi	a0, a0, -0x280

000000008022d5c8 <.Lpcrel_hi190>:
8022d5c8: 97 e5 00 00  	auipc	a1, 0xe
8022d5cc: 13 86 85 de  	addi	a2, a1, -0x218
8022d5d0: 93 05 10 02  	li	a1, 0x21
8022d5d4: 97 30 00 00  	auipc	ra, 0x3
8022d5d8: e7 80 40 c4  	jalr	-0x3bc(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d5dc: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d5e0: 03 35 04 fc  	ld	a0, -0x40(s0)
;     unsafe { read_unsafe(input) }
8022d5e4: 97 00 00 00  	auipc	ra, 0x0
8022d5e8: e7 80 a0 dc  	jalr	-0x236(ra) <_ZN4zero11read_unsafe17h7c0dedf311365251E>
8022d5ec: e6 60        	ld	ra, 0x58(sp)
8022d5ee: 46 64        	ld	s0, 0x50(sp)
; }
8022d5f0: 25 61        	addi	sp, sp, 0x60
8022d5f2: 82 80        	ret

000000008022d5f4 <.Lpcrel_hi191>:
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d5f4: 17 e5 00 00  	auipc	a0, 0xe
8022d5f8: 13 05 45 dd  	addi	a0, a0, -0x22c

000000008022d5fc <.Lpcrel_hi192>:
8022d5fc: 97 e5 00 00  	auipc	a1, 0xe
8022d600: 13 86 c5 e0  	addi	a2, a1, -0x1f4
8022d604: 93 05 a0 03  	li	a1, 0x3a
8022d608: 97 30 00 00  	auipc	ra, 0x3
8022d60c: e7 80 00 c1  	jalr	-0x3f0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022d610 <_ZN4zero4read17hbbfa3a9bdfeebeb7E>:
; pub fn read<T: Pod>(input: &[u8]) -> &T {
8022d610: 1d 71        	addi	sp, sp, -0x60
8022d612: 86 ec        	sd	ra, 0x58(sp)
8022d614: a2 e8        	sd	s0, 0x50(sp)
8022d616: 80 10        	addi	s0, sp, 0x60
8022d618: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022d61c: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022d620: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022d624: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022d628: 13 05 70 03  	li	a0, 0x37
;     assert!(mem::size_of::<T>() <= input.len());
8022d62c: 63 61 b5 02  	bltu	a0, a1, 0x8022d64e <.Lpcrel_hi206+0x14>
8022d630: 09 a0        	j	0x8022d632 <.Lpcrel_hi205>

000000008022d632 <.Lpcrel_hi205>:
8022d632: 17 e5 00 00  	auipc	a0, 0xe
8022d636: 13 05 f5 d2  	addi	a0, a0, -0x2d1

000000008022d63a <.Lpcrel_hi206>:
8022d63a: 97 e5 00 00  	auipc	a1, 0xe
8022d63e: 13 86 e5 d5  	addi	a2, a1, -0x2a2
8022d642: 93 05 40 03  	li	a1, 0x34
8022d646: 97 30 00 00  	auipc	ra, 0x3
8022d64a: e7 80 20 bd  	jalr	-0x42e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d64e: 03 35 04 fc  	ld	a0, -0x40(s0)
8022d652: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d656: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d65a: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     let addr = input.as_ptr() as usize;
8022d65e: aa 85        	mv	a1, a0
8022d660: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022d664: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022d668: 1d 45        	li	a0, 0x7
8022d66a: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022d66e: 01 45        	li	a0, 0x0
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d670: 09 e9        	bnez	a0, 0x8022d682 <.Lpcrel_hi207>
8022d672: 09 a0        	j	0x8022d674 <.Lpcrel_hi206+0x3a>
8022d674: 03 35 84 fa  	ld	a0, -0x58(s0)
8022d678: 83 35 04 fb  	ld	a1, -0x50(s0)
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d67c: 6d 8d        	and	a0, a0, a1
8022d67e: 05 c1        	beqz	a0, 0x8022d69e <.Lpcrel_hi208+0x14>
8022d680: 1d a8        	j	0x8022d6b6 <.Lpcrel_hi209>

000000008022d682 <.Lpcrel_hi207>:
8022d682: 17 e5 00 00  	auipc	a0, 0xe
8022d686: 13 05 e5 cb  	addi	a0, a0, -0x342

000000008022d68a <.Lpcrel_hi208>:
8022d68a: 97 e5 00 00  	auipc	a1, 0xe
8022d68e: 13 86 65 d2  	addi	a2, a1, -0x2da
8022d692: 93 05 10 02  	li	a1, 0x21
8022d696: 97 30 00 00  	auipc	ra, 0x3
8022d69a: e7 80 20 b8  	jalr	-0x47e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d69e: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d6a2: 03 35 04 fc  	ld	a0, -0x40(s0)
;     unsafe { read_unsafe(input) }
8022d6a6: 97 00 00 00  	auipc	ra, 0x0
8022d6aa: e7 80 80 ca  	jalr	-0x358(ra) <_ZN4zero11read_unsafe17h5a50e7be978db227E>
8022d6ae: e6 60        	ld	ra, 0x58(sp)
8022d6b0: 46 64        	ld	s0, 0x50(sp)
; }
8022d6b2: 25 61        	addi	sp, sp, 0x60
8022d6b4: 82 80        	ret

000000008022d6b6 <.Lpcrel_hi209>:
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d6b6: 17 e5 00 00  	auipc	a0, 0xe
8022d6ba: 13 05 25 d1  	addi	a0, a0, -0x2ee

000000008022d6be <.Lpcrel_hi210>:
8022d6be: 97 e5 00 00  	auipc	a1, 0xe
8022d6c2: 13 86 a5 d4  	addi	a2, a1, -0x2b6
8022d6c6: 93 05 a0 03  	li	a1, 0x3a
8022d6ca: 97 30 00 00  	auipc	ra, 0x3
8022d6ce: e7 80 e0 b4  	jalr	-0x4b2(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022d6d2 <_ZN4zero4read17hec155e7b52588d39E>:
; pub fn read<T: Pod>(input: &[u8]) -> &T {
8022d6d2: 1d 71        	addi	sp, sp, -0x60
8022d6d4: 86 ec        	sd	ra, 0x58(sp)
8022d6d6: a2 e8        	sd	s0, 0x50(sp)
8022d6d8: 80 10        	addi	s0, sp, 0x60
8022d6da: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022d6de: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022d6e2: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022d6e6: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022d6ea: 13 05 30 02  	li	a0, 0x23
;     assert!(mem::size_of::<T>() <= input.len());
8022d6ee: 63 61 b5 02  	bltu	a0, a1, 0x8022d710 <.Lpcrel_hi218+0x14>
8022d6f2: 09 a0        	j	0x8022d6f4 <.Lpcrel_hi217>

000000008022d6f4 <.Lpcrel_hi217>:
8022d6f4: 17 e5 00 00  	auipc	a0, 0xe
8022d6f8: 13 05 d5 c6  	addi	a0, a0, -0x393

000000008022d6fc <.Lpcrel_hi218>:
8022d6fc: 97 e5 00 00  	auipc	a1, 0xe
8022d700: 13 86 c5 c9  	addi	a2, a1, -0x364
8022d704: 93 05 40 03  	li	a1, 0x34
8022d708: 97 30 00 00  	auipc	ra, 0x3
8022d70c: e7 80 00 b1  	jalr	-0x4f0(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d710: 03 35 04 fc  	ld	a0, -0x40(s0)
8022d714: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d718: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022d71c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     let addr = input.as_ptr() as usize;
8022d720: aa 85        	mv	a1, a0
8022d722: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022d726: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022d72a: 0d 45        	li	a0, 0x3
8022d72c: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022d730: 01 45        	li	a0, 0x0
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d732: 09 e9        	bnez	a0, 0x8022d744 <.Lpcrel_hi219>
8022d734: 09 a0        	j	0x8022d736 <.Lpcrel_hi218+0x3a>
8022d736: 03 35 84 fa  	ld	a0, -0x58(s0)
8022d73a: 83 35 04 fb  	ld	a1, -0x50(s0)
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d73e: 6d 8d        	and	a0, a0, a1
8022d740: 05 c1        	beqz	a0, 0x8022d760 <.Lpcrel_hi220+0x14>
8022d742: 1d a8        	j	0x8022d778 <.Lpcrel_hi221>

000000008022d744 <.Lpcrel_hi219>:
8022d744: 17 e5 00 00  	auipc	a0, 0xe
8022d748: 13 05 c5 bf  	addi	a0, a0, -0x404

000000008022d74c <.Lpcrel_hi220>:
8022d74c: 97 e5 00 00  	auipc	a1, 0xe
8022d750: 13 86 45 c6  	addi	a2, a1, -0x39c
8022d754: 93 05 10 02  	li	a1, 0x21
8022d758: 97 30 00 00  	auipc	ra, 0x3
8022d75c: e7 80 00 ac  	jalr	-0x540(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022d760: 83 35 84 fb  	ld	a1, -0x48(s0)
8022d764: 03 35 04 fc  	ld	a0, -0x40(s0)
;     unsafe { read_unsafe(input) }
8022d768: 97 00 00 00  	auipc	ra, 0x0
8022d76c: e7 80 60 bc  	jalr	-0x43a(ra) <_ZN4zero11read_unsafe17h041f513ad371b89cE>
8022d770: e6 60        	ld	ra, 0x58(sp)
8022d772: 46 64        	ld	s0, 0x50(sp)
; }
8022d774: 25 61        	addi	sp, sp, 0x60
8022d776: 82 80        	ret

000000008022d778 <.Lpcrel_hi221>:
;     assert!((addr & (mem::align_of::<T>() - 1)) == 0);
8022d778: 17 e5 00 00  	auipc	a0, 0xe
8022d77c: 13 05 05 c5  	addi	a0, a0, -0x3b0

000000008022d780 <.Lpcrel_hi222>:
8022d780: 97 e5 00 00  	auipc	a1, 0xe
8022d784: 13 86 85 c8  	addi	a2, a1, -0x378
8022d788: 93 05 a0 03  	li	a1, 0x3a
8022d78c: 97 30 00 00  	auipc	ra, 0x3
8022d790: e7 80 c0 a8  	jalr	-0x574(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>

000000008022d794 <_ZN8xmas_elf6header12parse_header17h002a5022ec99cf12E>:
; pub fn parse_header<'a>(input: &'a [u8]) -> Result<Header<'a>, &'static str> {
8022d794: 05 71        	addi	sp, sp, -0x1e0
8022d796: 86 ef        	sd	ra, 0x1d8(sp)
8022d798: a2 eb        	sd	s0, 0x1d0(sp)
8022d79a: 80 13        	addi	s0, sp, 0x1e0
8022d79c: 23 38 c4 e6  	sd	a2, -0x190(s0)
8022d7a0: 23 3c b4 e6  	sd	a1, -0x188(s0)
8022d7a4: 23 30 a4 e8  	sd	a0, -0x180(s0)
8022d7a8: 23 30 b4 ee  	sd	a1, -0x120(s0)
8022d7ac: 23 34 c4 ee  	sd	a2, -0x118(s0)
8022d7b0: 41 45        	li	a0, 0x10
;     let size_pt1 = mem::size_of::<HeaderPt1>();
8022d7b2: 23 38 a4 ee  	sd	a0, -0x110(s0)
;     if input.len() < size_pt1 {
8022d7b6: 63 6e a6 0c  	bltu	a2, a0, 0x8022d892 <.Lpcrel_hi225+0x14>
8022d7ba: 09 a0        	j	0x8022d7bc <_ZN8xmas_elf6header12parse_header17h002a5022ec99cf12E+0x28>
8022d7bc: 03 36 04 e7  	ld	a2, -0x190(s0)
8022d7c0: 83 36 84 e7  	ld	a3, -0x188(s0)
8022d7c4: 41 45        	li	a0, 0x10
;     let header_1: &'a HeaderPt1 = read(&input[..size_pt1]);
8022d7c6: 23 34 a4 e8  	sd	a0, -0x178(s0)
8022d7ca: 03 35 84 e8  	ld	a0, -0x178(s0)
8022d7ce: 23 38 d4 f8  	sd	a3, -0x70(s0)
8022d7d2: 23 3c c4 f8  	sd	a2, -0x68(s0)
8022d7d6: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022d7da: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022d7de: 23 30 d4 fc  	sd	a3, -0x40(s0)
8022d7e2: 23 34 c4 fc  	sd	a2, -0x38(s0)
8022d7e6: 81 45        	li	a1, 0x0
;         (0..self.end).index(slice)
8022d7e8: 23 34 b4 fa  	sd	a1, -0x58(s0)
8022d7ec: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022d7f0: 83 35 84 fa  	ld	a1, -0x58(s0)
8022d7f4: 23 30 b4 e6  	sd	a1, -0x1a0(s0)
8022d7f8: 03 35 04 fb  	ld	a0, -0x50(s0)
8022d7fc: 23 34 a4 e6  	sd	a0, -0x198(s0)
8022d800: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022d804: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022d808: 23 30 d4 fe  	sd	a3, -0x20(s0)
8022d80c: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         if self.start > self.end {
8022d810: 63 6a b5 00  	bltu	a0, a1, 0x8022d824 <_ZN8xmas_elf6header12parse_header17h002a5022ec99cf12E+0x90>
8022d814: 09 a0        	j	0x8022d816 <_ZN8xmas_elf6header12parse_header17h002a5022ec99cf12E+0x82>
8022d816: 03 35 04 e7  	ld	a0, -0x190(s0)
8022d81a: 83 35 84 e6  	ld	a1, -0x198(s0)
;         } else if self.end > slice.len() {
8022d81e: 63 6f b5 00  	bltu	a0, a1, 0x8022d83c <.Lpcrel_hi223+0x10>
8022d822: 0d a8        	j	0x8022d854 <.Lpcrel_hi224+0x10>
8022d824: 83 35 84 e6  	ld	a1, -0x198(s0)
8022d828: 03 35 04 e6  	ld	a0, -0x1a0(s0)

000000008022d82c <.Lpcrel_hi223>:
;             slice_index_order_fail(self.start, self.end);
8022d82c: 17 e6 00 00  	auipc	a2, 0xe
8022d830: 13 06 46 c5  	addi	a2, a2, -0x3ac
8022d834: 97 40 00 00  	auipc	ra, 0x4
8022d838: e7 80 00 eb  	jalr	-0x150(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
8022d83c: 83 35 04 e7  	ld	a1, -0x190(s0)
8022d840: 03 35 84 e6  	ld	a0, -0x198(s0)

000000008022d844 <.Lpcrel_hi224>:
;             slice_end_index_len_fail(self.end, slice.len());
8022d844: 17 e6 00 00  	auipc	a2, 0xe
8022d848: 13 06 c6 c3  	addi	a2, a2, -0x3c4
8022d84c: 97 40 00 00  	auipc	ra, 0x4
8022d850: e7 80 40 e5  	jalr	-0x1ac(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
8022d854: 83 36 04 e7  	ld	a3, -0x190(s0)
8022d858: 03 36 84 e7  	ld	a2, -0x188(s0)
8022d85c: 83 35 84 e6  	ld	a1, -0x198(s0)
8022d860: 03 35 04 e6  	ld	a0, -0x1a0(s0)
;         unsafe { &*self.get_unchecked(slice) }
8022d864: 97 10 00 00  	auipc	ra, 0x1
8022d868: e7 80 c0 0b  	jalr	0xbc(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E>
;     let header_1: &'a HeaderPt1 = read(&input[..size_pt1]);
8022d86c: 97 00 00 00  	auipc	ra, 0x0
8022d870: e7 80 20 b6  	jalr	-0x49e(ra) <_ZN4zero4read17h2b238126f32f3221E>
8022d874: aa 85        	mv	a1, a0
8022d876: 23 3c b4 e4  	sd	a1, -0x1a8(s0)
8022d87a: 23 3c a4 ee  	sd	a0, -0x108(s0)

000000008022d87e <.Lpcrel_hi225>:
;     if header_1.magic != MAGIC {
8022d87e: 97 65 00 00  	auipc	a1, 0x6
8022d882: 93 85 a5 f3  	addi	a1, a1, -0xc6
8022d886: 97 00 00 00  	auipc	ra, 0x0
8022d88a: e7 80 c0 66  	jalr	0x66c(ra) <_ZN4core5array8equality103_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$U$u3b$$u20$N$u5d$$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$2ne17he25b4e55e92507b3E>
8022d88e: 21 ed        	bnez	a0, 0x8022d8e6 <.Lpcrel_hi226+0x50>
8022d890: 31 a8        	j	0x8022d8ac <.Lpcrel_hi226+0x16>
8022d892: 83 35 04 e8  	ld	a1, -0x180(s0)

000000008022d896 <.Lpcrel_hi226>:
;         return Err("File is shorter than the first ELF header part");
8022d896: 17 e5 00 00  	auipc	a0, 0xe
8022d89a: 13 05 05 cb  	addi	a0, a0, -0x350
8022d89e: 88 e5        	sd	a0, 0x8(a1)
8022d8a0: 13 05 e0 02  	li	a0, 0x2e
8022d8a4: 88 e9        	sd	a0, 0x10(a1)
8022d8a6: 09 45        	li	a0, 0x2
8022d8a8: 88 e1        	sd	a0, 0x0(a1)
; #![no_std]
8022d8aa: 95 a4        	j	0x8022db0e <.Lpcrel_hi236+0x12>
8022d8ac: 03 35 84 e5  	ld	a0, -0x1a8(s0)
;     let header_2 = match header_1.class() {
8022d8b0: 97 00 00 00  	auipc	ra, 0x0
8022d8b4: e7 80 60 26  	jalr	0x266(ra) <_ZN8xmas_elf6header9HeaderPt15class17hba6d3d913f3693d2E>
8022d8b8: 23 03 a4 ea  	sb	a0, -0x15a(s0)
8022d8bc: a3 03 b4 ea  	sb	a1, -0x159(s0)
8022d8c0: 03 45 64 ea  	lbu	a0, -0x15a(s0)
8022d8c4: 23 38 a4 e4  	sd	a0, -0x1b0(s0)
8022d8c8: 05 cd        	beqz	a0, 0x8022d900 <.Lpcrel_hi227+0x16>
8022d8ca: 09 a0        	j	0x8022d8cc <.Lpcrel_hi226+0x36>
8022d8cc: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8022d8d0: 85 45        	li	a1, 0x1
;     let header_2 = match header_1.class() {
8022d8d2: 63 03 b5 04  	beq	a0, a1, 0x8022d918 <.Lpcrel_hi228+0x14>
8022d8d6: 09 a0        	j	0x8022d8d8 <.Lpcrel_hi226+0x42>
8022d8d8: 03 35 04 e5  	ld	a0, -0x1b0(s0)
8022d8dc: 89 45        	li	a1, 0x2
;     let header_2 = match header_1.class() {
8022d8de: 63 04 b5 04  	beq	a0, a1, 0x8022d926 <.Lpcrel_hi228+0x22>
8022d8e2: 09 a0        	j	0x8022d8e4 <.Lpcrel_hi226+0x4e>
8022d8e4: 31 a8        	j	0x8022d900 <.Lpcrel_hi227+0x16>
8022d8e6: 83 35 04 e8  	ld	a1, -0x180(s0)

000000008022d8ea <.Lpcrel_hi227>:
;         return Err("Did not find ELF magic number");
8022d8ea: 17 e5 00 00  	auipc	a0, 0xe
8022d8ee: 13 05 f5 c3  	addi	a0, a0, -0x3c1
8022d8f2: 88 e5        	sd	a0, 0x8(a1)
8022d8f4: 75 45        	li	a0, 0x1d
8022d8f6: 88 e9        	sd	a0, 0x10(a1)
8022d8f8: 09 45        	li	a0, 0x2
8022d8fa: 88 e1        	sd	a0, 0x0(a1)
; #![no_std]
8022d8fc: 09 ac        	j	0x8022db0e <.Lpcrel_hi236+0x12>
;     let header_2 = match header_1.class() {
8022d8fe: 00 00        	unimp
8022d900: 83 35 04 e8  	ld	a1, -0x180(s0)

000000008022d904 <.Lpcrel_hi228>:
;         Class::None | Class::Other(_) => return Err("Invalid ELF class"),
8022d904: 17 e5 00 00  	auipc	a0, 0xe
8022d908: 13 05 45 c1  	addi	a0, a0, -0x3ec
8022d90c: 88 e5        	sd	a0, 0x8(a1)
8022d90e: 45 45        	li	a0, 0x11
8022d910: 88 e9        	sd	a0, 0x10(a1)
8022d912: 09 45        	li	a0, 0x2
8022d914: 88 e1        	sd	a0, 0x0(a1)
; #![no_std]
8022d916: e5 aa        	j	0x8022db0e <.Lpcrel_hi236+0x12>
8022d918: 13 05 40 03  	li	a0, 0x34
8022d91c: 23 34 a4 e4  	sd	a0, -0x1b8(s0)
8022d920: 01 45        	li	a0, 0x0
;                 read(&input[size_pt1..size_pt1 + mem::size_of::<HeaderPt2_<P32>>()]);
8022d922: 79 e5        	bnez	a0, 0x8022d9f0 <.Lpcrel_hi231>
8022d924: 09 a8        	j	0x8022d936 <.Lpcrel_hi228+0x32>
8022d926: 13 05 00 04  	li	a0, 0x40
8022d92a: 23 30 a4 e4  	sd	a0, -0x1c0(s0)
8022d92e: 01 45        	li	a0, 0x0
;                 read(&input[size_pt1..size_pt1 + mem::size_of::<HeaderPt2_<P64>>()]);
8022d930: 63 12 05 1c  	bnez	a0, 0x8022daf4 <.Lpcrel_hi235>
8022d934: 19 a2        	j	0x8022da3a <.Lpcrel_hi232+0x42>
8022d936: 03 36 04 e7  	ld	a2, -0x190(s0)
8022d93a: 83 36 84 e7  	ld	a3, -0x188(s0)
8022d93e: 03 35 84 e4  	ld	a0, -0x1b8(s0)
8022d942: c1 45        	li	a1, 0x10
;                 read(&input[size_pt1..size_pt1 + mem::size_of::<HeaderPt2_<P32>>()]);
8022d944: 23 34 b4 ea  	sd	a1, -0x158(s0)
8022d948: 23 38 a4 ea  	sd	a0, -0x150(s0)
8022d94c: 83 35 84 ea  	ld	a1, -0x158(s0)
8022d950: 23 38 b4 e2  	sd	a1, -0x1d0(s0)
8022d954: 03 35 04 eb  	ld	a0, -0x150(s0)
8022d958: 23 3c a4 e2  	sd	a0, -0x1c8(s0)
8022d95c: 23 38 d4 f4  	sd	a3, -0xb0(s0)
8022d960: 23 3c c4 f4  	sd	a2, -0xa8(s0)
8022d964: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022d968: 23 34 a4 f6  	sd	a0, -0x98(s0)
8022d96c: 23 38 b4 f6  	sd	a1, -0x90(s0)
8022d970: 23 3c a4 f6  	sd	a0, -0x88(s0)
8022d974: 23 30 d4 f8  	sd	a3, -0x80(s0)
8022d978: 23 34 c4 f8  	sd	a2, -0x78(s0)
;         if self.start > self.end {
8022d97c: 63 6a b5 00  	bltu	a0, a1, 0x8022d990 <.Lpcrel_hi228+0x8c>
8022d980: 09 a0        	j	0x8022d982 <.Lpcrel_hi228+0x7e>
8022d982: 03 35 04 e7  	ld	a0, -0x190(s0)
8022d986: 83 35 84 e3  	ld	a1, -0x1c8(s0)
;         } else if self.end > slice.len() {
8022d98a: 63 6f b5 00  	bltu	a0, a1, 0x8022d9a8 <.Lpcrel_hi229+0x10>
8022d98e: 0d a8        	j	0x8022d9c0 <.Lpcrel_hi230+0x10>
8022d990: 83 35 84 e3  	ld	a1, -0x1c8(s0)
8022d994: 03 35 04 e3  	ld	a0, -0x1d0(s0)

000000008022d998 <.Lpcrel_hi229>:
;             slice_index_order_fail(self.start, self.end);
8022d998: 17 e6 00 00  	auipc	a2, 0xe
8022d99c: 13 06 86 b3  	addi	a2, a2, -0x4c8
8022d9a0: 97 40 00 00  	auipc	ra, 0x4
8022d9a4: e7 80 40 d4  	jalr	-0x2bc(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
8022d9a8: 83 35 04 e7  	ld	a1, -0x190(s0)
8022d9ac: 03 35 84 e3  	ld	a0, -0x1c8(s0)

000000008022d9b0 <.Lpcrel_hi230>:
;             slice_end_index_len_fail(self.end, slice.len());
8022d9b0: 17 e6 00 00  	auipc	a2, 0xe
8022d9b4: 13 06 06 b2  	addi	a2, a2, -0x4e0
8022d9b8: 97 40 00 00  	auipc	ra, 0x4
8022d9bc: e7 80 80 ce  	jalr	-0x318(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
8022d9c0: 83 36 04 e7  	ld	a3, -0x190(s0)
8022d9c4: 03 36 84 e7  	ld	a2, -0x188(s0)
8022d9c8: 83 35 84 e3  	ld	a1, -0x1c8(s0)
8022d9cc: 03 35 04 e3  	ld	a0, -0x1d0(s0)
;         unsafe { &*self.get_unchecked(slice) }
8022d9d0: 97 10 00 00  	auipc	ra, 0x1
8022d9d4: e7 80 00 f5  	jalr	-0xb0(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E>
;                 read(&input[size_pt1..size_pt1 + mem::size_of::<HeaderPt2_<P32>>()]);
8022d9d8: 97 00 00 00  	auipc	ra, 0x0
8022d9dc: e7 80 a0 cf  	jalr	-0x306(ra) <_ZN4zero4read17hec155e7b52588d39E>
8022d9e0: 23 30 a4 f0  	sd	a0, -0x100(s0)
;             HeaderPt2::Header32(header_2)
8022d9e4: 23 3c a4 e8  	sd	a0, -0x168(s0)
8022d9e8: 01 45        	li	a0, 0x0
8022d9ea: 23 38 a4 e8  	sd	a0, -0x170(s0)
;         }
8022d9ee: 31 a8        	j	0x8022da0a <.Lpcrel_hi232+0x12>

000000008022d9f0 <.Lpcrel_hi231>:
;                 read(&input[size_pt1..size_pt1 + mem::size_of::<HeaderPt2_<P32>>()]);
8022d9f0: 17 e5 00 00  	auipc	a0, 0xe
8022d9f4: 13 05 05 ac  	addi	a0, a0, -0x540

000000008022d9f8 <.Lpcrel_hi232>:
8022d9f8: 97 e5 00 00  	auipc	a1, 0xe
8022d9fc: 13 86 05 aa  	addi	a2, a1, -0x560
8022da00: f1 45        	li	a1, 0x1c
8022da02: 97 30 00 00  	auipc	ra, 0x3
8022da06: e7 80 60 81  	jalr	-0x7ea(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022da0a: 83 35 04 e8  	ld	a1, -0x180(s0)
8022da0e: 83 36 84 e5  	ld	a3, -0x1a8(s0)
;         pt2: header_2,
8022da12: 03 36 04 e9  	ld	a2, -0x170(s0)
8022da16: 03 35 84 e9  	ld	a0, -0x168(s0)
;     Ok(Header {
8022da1a: 23 3c d4 ec  	sd	a3, -0x128(s0)
8022da1e: 23 34 c4 ec  	sd	a2, -0x138(s0)
8022da22: 23 38 a4 ec  	sd	a0, -0x130(s0)
8022da26: 03 35 84 ed  	ld	a0, -0x128(s0)
8022da2a: 88 e9        	sd	a0, 0x10(a1)
8022da2c: 03 35 04 ed  	ld	a0, -0x130(s0)
8022da30: 88 e5        	sd	a0, 0x8(a1)
8022da32: 03 35 84 ec  	ld	a0, -0x138(s0)
8022da36: 88 e1        	sd	a0, 0x0(a1)
; }
8022da38: d9 a8        	j	0x8022db0e <.Lpcrel_hi236+0x12>
8022da3a: 03 36 04 e7  	ld	a2, -0x190(s0)
8022da3e: 83 36 84 e7  	ld	a3, -0x188(s0)
8022da42: 03 35 04 e4  	ld	a0, -0x1c0(s0)
8022da46: c1 45        	li	a1, 0x10
;                 read(&input[size_pt1..size_pt1 + mem::size_of::<HeaderPt2_<P64>>()]);
8022da48: 23 3c b4 ea  	sd	a1, -0x148(s0)
8022da4c: 23 30 a4 ec  	sd	a0, -0x140(s0)
8022da50: 83 35 84 eb  	ld	a1, -0x148(s0)
8022da54: 23 30 b4 e2  	sd	a1, -0x1e0(s0)
8022da58: 03 35 04 ec  	ld	a0, -0x140(s0)
8022da5c: 23 34 a4 e2  	sd	a0, -0x1d8(s0)
8022da60: 23 38 d4 f0  	sd	a3, -0xf0(s0)
8022da64: 23 3c c4 f0  	sd	a2, -0xe8(s0)
8022da68: 23 30 b4 f2  	sd	a1, -0xe0(s0)
8022da6c: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8022da70: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8022da74: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022da78: 23 30 d4 f4  	sd	a3, -0xc0(s0)
8022da7c: 23 34 c4 f4  	sd	a2, -0xb8(s0)
;         if self.start > self.end {
8022da80: 63 6a b5 00  	bltu	a0, a1, 0x8022da94 <.Lpcrel_hi232+0x9c>
8022da84: 09 a0        	j	0x8022da86 <.Lpcrel_hi232+0x8e>
8022da86: 03 35 04 e7  	ld	a0, -0x190(s0)
8022da8a: 83 35 84 e2  	ld	a1, -0x1d8(s0)
;         } else if self.end > slice.len() {
8022da8e: 63 6f b5 00  	bltu	a0, a1, 0x8022daac <.Lpcrel_hi233+0x10>
8022da92: 0d a8        	j	0x8022dac4 <.Lpcrel_hi234+0x10>
8022da94: 83 35 84 e2  	ld	a1, -0x1d8(s0)
8022da98: 03 35 04 e2  	ld	a0, -0x1e0(s0)

000000008022da9c <.Lpcrel_hi233>:
;             slice_index_order_fail(self.start, self.end);
8022da9c: 17 e6 00 00  	auipc	a2, 0xe
8022daa0: 13 06 46 a6  	addi	a2, a2, -0x59c
8022daa4: 97 40 00 00  	auipc	ra, 0x4
8022daa8: e7 80 00 c4  	jalr	-0x3c0(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
8022daac: 83 35 04 e7  	ld	a1, -0x190(s0)
8022dab0: 03 35 84 e2  	ld	a0, -0x1d8(s0)

000000008022dab4 <.Lpcrel_hi234>:
;             slice_end_index_len_fail(self.end, slice.len());
8022dab4: 17 e6 00 00  	auipc	a2, 0xe
8022dab8: 13 06 c6 a4  	addi	a2, a2, -0x5b4
8022dabc: 97 40 00 00  	auipc	ra, 0x4
8022dac0: e7 80 40 be  	jalr	-0x41c(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
8022dac4: 83 36 04 e7  	ld	a3, -0x190(s0)
8022dac8: 03 36 84 e7  	ld	a2, -0x188(s0)
8022dacc: 83 35 84 e2  	ld	a1, -0x1d8(s0)
8022dad0: 03 35 04 e2  	ld	a0, -0x1e0(s0)
;         unsafe { &*self.get_unchecked(slice) }
8022dad4: 97 10 00 00  	auipc	ra, 0x1
8022dad8: e7 80 c0 e4  	jalr	-0x1b4(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E>
;                 read(&input[size_pt1..size_pt1 + mem::size_of::<HeaderPt2_<P64>>()]);
8022dadc: 97 00 00 00  	auipc	ra, 0x0
8022dae0: e7 80 20 9b  	jalr	-0x64e(ra) <_ZN4zero4read17h31beaabe75fa597eE>
8022dae4: 23 34 a4 f0  	sd	a0, -0xf8(s0)
;             HeaderPt2::Header64(header_2)
8022dae8: 23 3c a4 e8  	sd	a0, -0x168(s0)
8022daec: 05 45        	li	a0, 0x1
8022daee: 23 38 a4 e8  	sd	a0, -0x170(s0)
;         }
8022daf2: 21 bf        	j	0x8022da0a <.Lpcrel_hi232+0x12>

000000008022daf4 <.Lpcrel_hi235>:
;                 read(&input[size_pt1..size_pt1 + mem::size_of::<HeaderPt2_<P64>>()]);
8022daf4: 17 e5 00 00  	auipc	a0, 0xe
8022daf8: 13 05 c5 9b  	addi	a0, a0, -0x644

000000008022dafc <.Lpcrel_hi236>:
8022dafc: 97 e5 00 00  	auipc	a1, 0xe
8022db00: 13 86 c5 9e  	addi	a2, a1, -0x614
8022db04: f1 45        	li	a1, 0x1c
8022db06: 97 20 00 00  	auipc	ra, 0x2
8022db0a: e7 80 20 71  	jalr	0x712(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022db0e: fe 60        	ld	ra, 0x1d8(sp)
8022db10: 5e 64        	ld	s0, 0x1d0(sp)
; }
8022db12: 3d 61        	addi	sp, sp, 0x1e0
8022db14: 82 80        	ret

000000008022db16 <_ZN8xmas_elf6header9HeaderPt15class17hba6d3d913f3693d2E>:
;     pub fn class(&self) -> Class {
8022db16: 01 11        	addi	sp, sp, -0x20
8022db18: 06 ec        	sd	ra, 0x18(sp)
8022db1a: 22 e8        	sd	s0, 0x10(sp)
8022db1c: 00 10        	addi	s0, sp, 0x20
8022db1e: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.class.as_class()
8022db22: 03 45 45 00  	lbu	a0, 0x4(a0)
8022db26: 97 00 00 00  	auipc	ra, 0x0
8022db2a: e7 80 00 01  	jalr	0x10(ra) <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE>
8022db2e: e2 60        	ld	ra, 0x18(sp)
8022db30: 42 64        	ld	s0, 0x10(sp)
;     }
8022db32: 05 61        	addi	sp, sp, 0x20
8022db34: 82 80        	ret

000000008022db36 <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE>:
;     pub fn as_class(self) -> Class {
8022db36: 01 11        	addi	sp, sp, -0x20
8022db38: 06 ec        	sd	ra, 0x18(sp)
8022db3a: 22 e8        	sd	s0, 0x10(sp)
8022db3c: 00 10        	addi	s0, sp, 0x20
8022db3e: aa 85        	mv	a1, a0
8022db40: 13 f5 f5 0f  	andi	a0, a1, 0xff
8022db44: 2e 86        	mv	a2, a1
8022db46: 23 30 c4 fe  	sd	a2, -0x20(s0)
8022db4a: 23 07 b4 fe  	sb	a1, -0x12(s0)
;         match self.0 {
8022db4e: 05 cd        	beqz	a0, 0x8022db86 <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x50>
8022db50: 09 a0        	j	0x8022db52 <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x1c>
8022db52: 03 35 04 fe  	ld	a0, -0x20(s0)
8022db56: 13 75 f5 0f  	andi	a0, a0, 0xff
8022db5a: 85 45        	li	a1, 0x1
;         match self.0 {
8022db5c: 63 09 b5 02  	beq	a0, a1, 0x8022db8e <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x58>
8022db60: 09 a0        	j	0x8022db62 <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x2c>
8022db62: 03 35 04 fe  	ld	a0, -0x20(s0)
8022db66: 13 75 f5 0f  	andi	a0, a0, 0xff
8022db6a: 89 45        	li	a1, 0x2
;         match self.0 {
8022db6c: 63 05 b5 02  	beq	a0, a1, 0x8022db96 <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x60>
8022db70: 09 a0        	j	0x8022db72 <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x3c>
8022db72: 03 35 04 fe  	ld	a0, -0x20(s0)
;             other => Class::Other(other),
8022db76: a3 07 a4 fe  	sb	a0, -0x11(s0)
8022db7a: a3 06 a4 fe  	sb	a0, -0x13(s0)
8022db7e: 0d 45        	li	a0, 0x3
8022db80: 23 06 a4 fe  	sb	a0, -0x14(s0)
8022db84: 29 a8        	j	0x8022db9e <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x68>
8022db86: 01 45        	li	a0, 0x0
;             0 => Class::None,
8022db88: 23 06 a4 fe  	sb	a0, -0x14(s0)
8022db8c: 09 a8        	j	0x8022db9e <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x68>
8022db8e: 05 45        	li	a0, 0x1
;             1 => Class::ThirtyTwo,
8022db90: 23 06 a4 fe  	sb	a0, -0x14(s0)
8022db94: 29 a0        	j	0x8022db9e <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x68>
8022db96: 09 45        	li	a0, 0x2
;             2 => Class::SixtyFour,
8022db98: 23 06 a4 fe  	sb	a0, -0x14(s0)
8022db9c: 09 a0        	j	0x8022db9e <_ZN8xmas_elf6header6Class_8as_class17hc86c54cf74b6a5abE+0x68>
;     }
8022db9e: 03 45 c4 fe  	lbu	a0, -0x14(s0)
8022dba2: 83 45 d4 fe  	lbu	a1, -0x13(s0)
8022dba6: e2 60        	ld	ra, 0x18(sp)
8022dba8: 42 64        	ld	s0, 0x10(sp)
8022dbaa: 05 61        	addi	sp, sp, 0x20
8022dbac: 82 80        	ret

000000008022dbae <_ZN8xmas_elf6header9HeaderPt211entry_point17h8769ecfa5c515708E>:
;         pub fn $name(&self) -> $typ {
8022dbae: 39 71        	addi	sp, sp, -0x40
8022dbb0: 06 fc        	sd	ra, 0x38(sp)
8022dbb2: 22 f8        	sd	s0, 0x30(sp)
8022dbb4: 80 00        	addi	s0, sp, 0x40
8022dbb6: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022dbba: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             match *self {
8022dbbe: 08 61        	ld	a0, 0x0(a0)
8022dbc0: 01 ed        	bnez	a0, 0x8022dbd8 <_ZN8xmas_elf6header9HeaderPt211entry_point17h8769ecfa5c515708E+0x2a>
8022dbc2: 09 a0        	j	0x8022dbc4 <_ZN8xmas_elf6header9HeaderPt211entry_point17h8769ecfa5c515708E+0x16>
8022dbc4: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 HeaderPt2::Header32(h) => h.$name as $typ,
8022dbc8: 08 65        	ld	a0, 0x8(a0)
8022dbca: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022dbce: 03 65 85 00  	lwu	a0, 0x8(a0)
8022dbd2: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022dbd6: 11 a8        	j	0x8022dbea <_ZN8xmas_elf6header9HeaderPt211entry_point17h8769ecfa5c515708E+0x3c>
8022dbd8: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 HeaderPt2::Header64(h) => h.$name as $typ,
8022dbdc: 08 65        	ld	a0, 0x8(a0)
8022dbde: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022dbe2: 08 65        	ld	a0, 0x8(a0)
8022dbe4: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022dbe8: 09 a0        	j	0x8022dbea <_ZN8xmas_elf6header9HeaderPt211entry_point17h8769ecfa5c515708E+0x3c>
;         }
8022dbea: 03 35 04 fd  	ld	a0, -0x30(s0)
8022dbee: e2 70        	ld	ra, 0x38(sp)
8022dbf0: 42 74        	ld	s0, 0x30(sp)
8022dbf2: 21 61        	addi	sp, sp, 0x40
8022dbf4: 82 80        	ret

000000008022dbf6 <_ZN8xmas_elf6header9HeaderPt29ph_offset17he34da7e3ca864948E>:
;         pub fn $name(&self) -> $typ {
8022dbf6: 39 71        	addi	sp, sp, -0x40
8022dbf8: 06 fc        	sd	ra, 0x38(sp)
8022dbfa: 22 f8        	sd	s0, 0x30(sp)
8022dbfc: 80 00        	addi	s0, sp, 0x40
8022dbfe: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022dc02: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             match *self {
8022dc06: 08 61        	ld	a0, 0x0(a0)
8022dc08: 01 ed        	bnez	a0, 0x8022dc20 <_ZN8xmas_elf6header9HeaderPt29ph_offset17he34da7e3ca864948E+0x2a>
8022dc0a: 09 a0        	j	0x8022dc0c <_ZN8xmas_elf6header9HeaderPt29ph_offset17he34da7e3ca864948E+0x16>
8022dc0c: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 HeaderPt2::Header32(h) => h.$name as $typ,
8022dc10: 08 65        	ld	a0, 0x8(a0)
8022dc12: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022dc16: 03 65 c5 00  	lwu	a0, 0xc(a0)
8022dc1a: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022dc1e: 11 a8        	j	0x8022dc32 <_ZN8xmas_elf6header9HeaderPt29ph_offset17he34da7e3ca864948E+0x3c>
8022dc20: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 HeaderPt2::Header64(h) => h.$name as $typ,
8022dc24: 08 65        	ld	a0, 0x8(a0)
8022dc26: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022dc2a: 08 69        	ld	a0, 0x10(a0)
8022dc2c: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022dc30: 09 a0        	j	0x8022dc32 <_ZN8xmas_elf6header9HeaderPt29ph_offset17he34da7e3ca864948E+0x3c>
;         }
8022dc32: 03 35 04 fd  	ld	a0, -0x30(s0)
8022dc36: e2 70        	ld	ra, 0x38(sp)
8022dc38: 42 74        	ld	s0, 0x30(sp)
8022dc3a: 21 61        	addi	sp, sp, 0x40
8022dc3c: 82 80        	ret

000000008022dc3e <_ZN8xmas_elf6header9HeaderPt213ph_entry_size17h6d261b529e06d006E>:
;         pub fn $name(&self) -> $typ {
8022dc3e: 39 71        	addi	sp, sp, -0x40
8022dc40: 06 fc        	sd	ra, 0x38(sp)
8022dc42: 22 f8        	sd	s0, 0x30(sp)
8022dc44: 80 00        	addi	s0, sp, 0x40
8022dc46: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022dc4a: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             match *self {
8022dc4e: 08 61        	ld	a0, 0x0(a0)
8022dc50: 01 ed        	bnez	a0, 0x8022dc68 <_ZN8xmas_elf6header9HeaderPt213ph_entry_size17h6d261b529e06d006E+0x2a>
8022dc52: 09 a0        	j	0x8022dc54 <_ZN8xmas_elf6header9HeaderPt213ph_entry_size17h6d261b529e06d006E+0x16>
8022dc54: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 HeaderPt2::Header32(h) => h.$name as $typ,
8022dc58: 08 65        	ld	a0, 0x8(a0)
8022dc5a: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022dc5e: 03 15 a5 01  	lh	a0, 0x1a(a0)
8022dc62: 23 1b a4 fc  	sh	a0, -0x2a(s0)
8022dc66: 19 a8        	j	0x8022dc7c <_ZN8xmas_elf6header9HeaderPt213ph_entry_size17h6d261b529e06d006E+0x3e>
8022dc68: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 HeaderPt2::Header64(h) => h.$name as $typ,
8022dc6c: 08 65        	ld	a0, 0x8(a0)
8022dc6e: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022dc72: 03 15 65 02  	lh	a0, 0x26(a0)
8022dc76: 23 1b a4 fc  	sh	a0, -0x2a(s0)
8022dc7a: 09 a0        	j	0x8022dc7c <_ZN8xmas_elf6header9HeaderPt213ph_entry_size17h6d261b529e06d006E+0x3e>
;         }
8022dc7c: 03 15 64 fd  	lh	a0, -0x2a(s0)
8022dc80: e2 70        	ld	ra, 0x38(sp)
8022dc82: 42 74        	ld	s0, 0x30(sp)
8022dc84: 21 61        	addi	sp, sp, 0x40
8022dc86: 82 80        	ret

000000008022dc88 <_ZN8xmas_elf6header9HeaderPt28ph_count17hd37dd8189c08ff03E>:
;         pub fn $name(&self) -> $typ {
8022dc88: 39 71        	addi	sp, sp, -0x40
8022dc8a: 06 fc        	sd	ra, 0x38(sp)
8022dc8c: 22 f8        	sd	s0, 0x30(sp)
8022dc8e: 80 00        	addi	s0, sp, 0x40
8022dc90: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022dc94: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             match *self {
8022dc98: 08 61        	ld	a0, 0x0(a0)
8022dc9a: 01 ed        	bnez	a0, 0x8022dcb2 <_ZN8xmas_elf6header9HeaderPt28ph_count17hd37dd8189c08ff03E+0x2a>
8022dc9c: 09 a0        	j	0x8022dc9e <_ZN8xmas_elf6header9HeaderPt28ph_count17hd37dd8189c08ff03E+0x16>
8022dc9e: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 HeaderPt2::Header32(h) => h.$name as $typ,
8022dca2: 08 65        	ld	a0, 0x8(a0)
8022dca4: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022dca8: 03 15 c5 01  	lh	a0, 0x1c(a0)
8022dcac: 23 1b a4 fc  	sh	a0, -0x2a(s0)
8022dcb0: 19 a8        	j	0x8022dcc6 <_ZN8xmas_elf6header9HeaderPt28ph_count17hd37dd8189c08ff03E+0x3e>
8022dcb2: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 HeaderPt2::Header64(h) => h.$name as $typ,
8022dcb6: 08 65        	ld	a0, 0x8(a0)
8022dcb8: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022dcbc: 03 15 85 02  	lh	a0, 0x28(a0)
8022dcc0: 23 1b a4 fc  	sh	a0, -0x2a(s0)
8022dcc4: 09 a0        	j	0x8022dcc6 <_ZN8xmas_elf6header9HeaderPt28ph_count17hd37dd8189c08ff03E+0x3e>
;         }
8022dcc6: 03 15 64 fd  	lh	a0, -0x2a(s0)
8022dcca: e2 70        	ld	ra, 0x38(sp)
8022dccc: 42 74        	ld	s0, 0x30(sp)
8022dcce: 21 61        	addi	sp, sp, 0x40
8022dcd0: 82 80        	ret

000000008022dcd2 <_ZN4core10intrinsics23is_aligned_and_not_null17h3640266eb5d4143dE>:
; pub(crate) const fn is_aligned_and_not_null(ptr: *const (), align: usize) -> bool {
8022dcd2: 75 71        	addi	sp, sp, -0x90
8022dcd4: 06 e5        	sd	ra, 0x88(sp)
8022dcd6: 22 e1        	sd	s0, 0x80(sp)
8022dcd8: 00 09        	addi	s0, sp, 0x90
8022dcda: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022dcde: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022dce2: 23 34 b4 fc  	sd	a1, -0x38(s0)
;             const_eval_select((self as *const u8,), const_impl, runtime_impl)
8022dce6: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { mem::transmute(self.cast::<()>()) }
8022dcea: aa 85        	mv	a1, a0
8022dcec: 23 30 b4 f8  	sd	a1, -0x80(s0)
;     !ptr.is_null() && ptr.is_aligned_to(align)
8022dcf0: 11 e5        	bnez	a0, 0x8022dcfc <_ZN4core10intrinsics23is_aligned_and_not_null17h3640266eb5d4143dE+0x2a>
8022dcf2: 09 a0        	j	0x8022dcf4 <_ZN4core10intrinsics23is_aligned_and_not_null17h3640266eb5d4143dE+0x22>
8022dcf4: 01 45        	li	a0, 0x0
;     !ptr.is_null() && ptr.is_aligned_to(align)
8022dcf6: a3 07 a4 f8  	sb	a0, -0x71(s0)
8022dcfa: 85 a8        	j	0x8022dd6a <_ZN4core10intrinsics23is_aligned_and_not_null17h3640266eb5d4143dE+0x98>
8022dcfc: 03 35 84 f7  	ld	a0, -0x88(s0)
;     uint_impl! {
8022dd00: 93 55 15 00  	srli	a1, a0, 0x1
8022dd04: 37 56 55 55  	lui	a2, 0x55555
8022dd08: 1b 06 56 55  	addiw	a2, a2, 0x555
8022dd0c: 93 16 06 02  	slli	a3, a2, 0x20
8022dd10: 36 96        	add	a2, a2, a3
8022dd12: f1 8d        	and	a1, a1, a2
8022dd14: b3 05 b5 40  	sub	a1, a0, a1
8022dd18: 37 35 33 33  	lui	a0, 0x33333
8022dd1c: 1b 05 35 33  	addiw	a0, a0, 0x333
8022dd20: 13 16 05 02  	slli	a2, a0, 0x20
8022dd24: 2a 96        	add	a2, a2, a0
8022dd26: 33 f5 c5 00  	and	a0, a1, a2
8022dd2a: 89 81        	srli	a1, a1, 0x2
8022dd2c: f1 8d        	and	a1, a1, a2
8022dd2e: 2e 95        	add	a0, a0, a1
8022dd30: 93 55 45 00  	srli	a1, a0, 0x4
8022dd34: 2e 95        	add	a0, a0, a1
8022dd36: b7 15 0f 0f  	lui	a1, 0xf0f1
8022dd3a: 9b 85 f5 f0  	addiw	a1, a1, -0xf1
8022dd3e: 13 96 05 02  	slli	a2, a1, 0x20
8022dd42: b2 95        	add	a1, a1, a2
8022dd44: 6d 8d        	and	a0, a0, a1
8022dd46: b7 05 01 01  	lui	a1, 0x1010
8022dd4a: 9b 85 15 10  	addiw	a1, a1, 0x101
8022dd4e: 13 96 05 02  	slli	a2, a1, 0x20
8022dd52: b2 95        	add	a1, a1, a2
8022dd54: 33 05 b5 02  	mul	a0, a0, a1
8022dd58: 61 91        	srli	a0, a0, 0x38
8022dd5a: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022dd5e: 03 25 84 fd  	lw	a0, -0x28(s0)
8022dd62: 85 45        	li	a1, 0x1
;         if !align.is_power_of_two() {
8022dd64: 63 09 b5 00  	beq	a0, a1, 0x8022dd76 <_ZN4core10intrinsics23is_aligned_and_not_null17h3640266eb5d4143dE+0xa4>
8022dd68: 15 a0        	j	0x8022dd8c <.Lpcrel_hi0>
; }
8022dd6a: 03 45 f4 f8  	lbu	a0, -0x71(s0)
8022dd6e: aa 60        	ld	ra, 0x88(sp)
8022dd70: 0a 64        	ld	s0, 0x80(sp)
8022dd72: 49 61        	addi	sp, sp, 0x90
8022dd74: 82 80        	ret
8022dd76: 03 35 04 f8  	ld	a0, -0x80(s0)
8022dd7a: 83 35 84 f7  	ld	a1, -0x88(s0)
;             ptr.addr() & (align - 1) == 0
8022dd7e: fd 15        	addi	a1, a1, -0x1
8022dd80: 6d 8d        	and	a0, a0, a1
8022dd82: 13 35 15 00  	seqz	a0, a0
8022dd86: a3 07 a4 f8  	sb	a0, -0x71(s0)
;     !ptr.is_null() && ptr.is_aligned_to(align)
8022dd8a: c5 b7        	j	0x8022dd6a <_ZN4core10intrinsics23is_aligned_and_not_null17h3640266eb5d4143dE+0x98>

000000008022dd8c <.Lpcrel_hi0>:
;             panic!("is_aligned_to: align is not a power-of-two");
8022dd8c: 17 e5 00 00  	auipc	a0, 0xe
8022dd90: 93 05 45 81  	addi	a1, a0, -0x7ec
8022dd94: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022dd98: 05 45        	li	a0, 0x1
8022dd9a: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         Arguments { pieces, fmt: None, args: &[] }
8022dd9e: 23 38 b4 f8  	sd	a1, -0x70(s0)
8022dda2: 23 3c a4 f8  	sd	a0, -0x68(s0)

000000008022dda6 <.Lpcrel_hi1>:
8022dda6: 17 55 00 00  	auipc	a0, 0x5
8022ddaa: 13 05 a5 4e  	addi	a0, a0, 0x4ea
8022ddae: 0c 61        	ld	a1, 0x0(a0)
8022ddb0: 08 65        	ld	a0, 0x8(a0)
8022ddb2: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022ddb6: 23 3c a4 fa  	sd	a0, -0x48(s0)

000000008022ddba <.Lpcrel_hi2>:
8022ddba: 17 d5 00 00  	auipc	a0, 0xd
8022ddbe: 13 05 65 7f  	addi	a0, a0, 0x7f6
8022ddc2: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022ddc6: 01 45        	li	a0, 0x0
8022ddc8: 23 34 a4 fa  	sd	a0, -0x58(s0)

000000008022ddcc <.Lpcrel_hi3>:
;             panic!("is_aligned_to: align is not a power-of-two");
8022ddcc: 17 e5 00 00  	auipc	a0, 0xe
8022ddd0: 93 05 c5 85  	addi	a1, a0, -0x7a4
8022ddd4: 13 05 04 f9  	addi	a0, s0, -0x70
8022ddd8: 97 20 00 00  	auipc	ra, 0x2
8022dddc: e7 80 00 3d  	jalr	0x3d0(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022dde0 <_ZN4core3fmt8builders9DebugList7entries17hc33f7e00aed5e105E>:
;     pub fn entries<D, I>(&mut self, entries: I) -> &mut Self
8022dde0: 1d 71        	addi	sp, sp, -0x60
8022dde2: 86 ec        	sd	ra, 0x58(sp)
8022dde4: a2 e8        	sd	s0, 0x50(sp)
8022dde6: 80 10        	addi	s0, sp, 0x60
8022dde8: 23 30 c4 fa  	sd	a2, -0x60(s0)
8022ddec: 2e 86        	mv	a2, a1
8022ddee: 83 35 04 fa  	ld	a1, -0x60(s0)
8022ddf2: 23 34 c4 fa  	sd	a2, -0x58(s0)
8022ddf6: 2a 86        	mv	a2, a0
8022ddf8: 03 35 84 fa  	ld	a0, -0x58(s0)
8022ddfc: 23 38 c4 fa  	sd	a2, -0x50(s0)
8022de00: 23 3c c4 fc  	sd	a2, -0x28(s0)
8022de04: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022de08: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         for entry in entries {
8022de0c: 97 00 00 00  	auipc	ra, 0x0
8022de10: e7 80 80 13  	jalr	0x138(ra) <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h87ff06332bd9c2ebE>
8022de14: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022de18: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022de1c: 09 a0        	j	0x8022de1e <_ZN4core3fmt8builders9DebugList7entries17hc33f7e00aed5e105E+0x3e>
8022de1e: 13 05 84 fb  	addi	a0, s0, -0x48
;         for entry in entries {
8022de22: 97 10 00 00  	auipc	ra, 0x1
8022de26: e7 80 c0 d3  	jalr	-0x2c4(ra) <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE>
8022de2a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022de2e: 03 35 84 fc  	ld	a0, -0x38(s0)
8022de32: 01 e9        	bnez	a0, 0x8022de42 <_ZN4core3fmt8builders9DebugList7entries17hc33f7e00aed5e105E+0x62>
8022de34: 09 a0        	j	0x8022de36 <_ZN4core3fmt8builders9DebugList7entries17hc33f7e00aed5e105E+0x56>
8022de36: 03 35 04 fb  	ld	a0, -0x50(s0)
8022de3a: e6 60        	ld	ra, 0x58(sp)
8022de3c: 46 64        	ld	s0, 0x50(sp)
;     }
8022de3e: 25 61        	addi	sp, sp, 0x60
8022de40: 82 80        	ret
8022de42: 03 35 04 fb  	ld	a0, -0x50(s0)
;         for entry in entries {
8022de46: 83 35 84 fc  	ld	a1, -0x38(s0)
8022de4a: 23 38 b4 fc  	sd	a1, -0x30(s0)

000000008022de4e <.Lpcrel_hi4>:
;             self.entry(&entry);
8022de4e: 97 d5 00 00  	auipc	a1, 0xd
8022de52: 13 86 25 7f  	addi	a2, a1, 0x7f2
8022de56: 93 05 04 fd  	addi	a1, s0, -0x30
8022de5a: 97 30 00 00  	auipc	ra, 0x3
8022de5e: e7 80 a0 aa  	jalr	-0x556(ra) <_ZN4core3fmt8builders9DebugList5entry17hf8aa446d165ad807E>
;         for entry in entries {
8022de62: 75 bf        	j	0x8022de1e <_ZN4core3fmt8builders9DebugList7entries17hc33f7e00aed5e105E+0x3e>

000000008022de64 <_ZN4core3ptr27drop_in_place$LT$$RF$u8$GT$17h95f44a9dd84cde12E>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8022de64: 01 11        	addi	sp, sp, -0x20
8022de66: 06 ec        	sd	ra, 0x18(sp)
8022de68: 22 e8        	sd	s0, 0x10(sp)
8022de6a: 00 10        	addi	s0, sp, 0x20
8022de6c: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022de70: e2 60        	ld	ra, 0x18(sp)
8022de72: 42 64        	ld	s0, 0x10(sp)
8022de74: 05 61        	addi	sp, sp, 0x20
8022de76: 82 80        	ret

000000008022de78 <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17hb1239da2747f4aa9E>:
8022de78: 01 11        	addi	sp, sp, -0x20
8022de7a: 06 ec        	sd	ra, 0x18(sp)
8022de7c: 22 e8        	sd	s0, 0x10(sp)
8022de7e: 00 10        	addi	s0, sp, 0x20
8022de80: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022de84: e2 60        	ld	ra, 0x18(sp)
8022de86: 42 64        	ld	s0, 0x10(sp)
8022de88: 05 61        	addi	sp, sp, 0x20
8022de8a: 82 80        	ret

000000008022de8c <_ZN4core5array69_$LT$impl$u20$core..fmt..Debug$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$3fmt17h2ed576a1f2e906feE>:
;     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8022de8c: 5d 71        	addi	sp, sp, -0x50
8022de8e: 86 e4        	sd	ra, 0x48(sp)
8022de90: a2 e0        	sd	s0, 0x40(sp)
8022de92: 80 08        	addi	s0, sp, 0x50
8022de94: 2e 86        	mv	a2, a1
8022de96: aa 85        	mv	a1, a0
;     fn index(self, slice: &[T]) -> &[T] {
8022de98: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022de9c: 23 38 c4 fc  	sd	a2, -0x30(s0)
;         Index::index(self as &[T], index)
8022dea0: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022dea4: 11 45        	li	a0, 0x4
8022dea6: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         fmt::Debug::fmt(&&self[..], f)
8022deaa: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022deae: 23 30 a4 fc  	sd	a0, -0x40(s0)
8022deb2: 13 05 84 fb  	addi	a0, s0, -0x48
8022deb6: 23 34 a4 fe  	sd	a0, -0x18(s0)
; fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }
8022deba: 03 35 84 fb  	ld	a0, -0x48(s0)
8022debe: 83 35 04 fc  	ld	a1, -0x40(s0)
8022dec2: 97 f0 ff ff  	auipc	ra, 0xfffff
8022dec6: e7 80 a0 23  	jalr	0x23a(ra) <ekernel+0xffce00fc>
8022deca: a6 60        	ld	ra, 0x48(sp)
8022decc: 06 64        	ld	s0, 0x40(sp)
;     }
8022dece: 61 61        	addi	sp, sp, 0x50
8022ded0: 82 80        	ret

000000008022ded2 <_ZN4core5array8equality103_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$U$u3b$$u20$N$u5d$$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$2eq17h756c2887ce260762E>:
;     fn eq(&self, other: &[U; N]) -> bool {
8022ded2: 01 11        	addi	sp, sp, -0x20
8022ded4: 06 ec        	sd	ra, 0x18(sp)
8022ded6: 22 e8        	sd	s0, 0x10(sp)
8022ded8: 00 10        	addi	s0, sp, 0x20
8022deda: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022dede: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         SpecArrayEq::spec_eq(self, other)
8022dee2: 97 00 00 00  	auipc	ra, 0x0
8022dee6: e7 80 a0 07  	jalr	0x7a(ra) <_ZN69_$LT$T$u20$as$u20$core..array..equality..SpecArrayEq$LT$U$C$_$GT$$GT$7spec_eq17h5be87b921749f3a9E>
8022deea: e2 60        	ld	ra, 0x18(sp)
8022deec: 42 64        	ld	s0, 0x10(sp)
;     }
8022deee: 05 61        	addi	sp, sp, 0x20
8022def0: 82 80        	ret

000000008022def2 <_ZN4core5array8equality103_$LT$impl$u20$core..cmp..PartialEq$LT$$u5b$U$u3b$$u20$N$u5d$$GT$$u20$for$u20$$u5b$T$u3b$$u20$N$u5d$$GT$2ne17he25b4e55e92507b3E>:
;     fn ne(&self, other: &[U; N]) -> bool {
8022def2: 01 11        	addi	sp, sp, -0x20
8022def4: 06 ec        	sd	ra, 0x18(sp)
8022def6: 22 e8        	sd	s0, 0x10(sp)
8022def8: 00 10        	addi	s0, sp, 0x20
8022defa: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022defe: 23 34 b4 fe  	sd	a1, -0x18(s0)
;         SpecArrayEq::spec_ne(self, other)
8022df02: 97 00 00 00  	auipc	ra, 0x0
8022df06: e7 80 80 0b  	jalr	0xb8(ra) <_ZN69_$LT$T$u20$as$u20$core..array..equality..SpecArrayEq$LT$U$C$_$GT$$GT$7spec_ne17h77666abf49d88939E>
8022df0a: e2 60        	ld	ra, 0x18(sp)
8022df0c: 42 64        	ld	s0, 0x10(sp)
;     }
8022df0e: 05 61        	addi	sp, sp, 0x20
8022df10: 82 80        	ret

000000008022df12 <_ZN4core9panicking13assert_failed17h770217dc7d738624E>:
; pub fn assert_failed<T, U>(
8022df12: 79 71        	addi	sp, sp, -0x30
8022df14: 06 f4        	sd	ra, 0x28(sp)
8022df16: 22 f0        	sd	s0, 0x20(sp)
8022df18: 00 18        	addi	s0, sp, 0x30
8022df1a: 3a 88        	mv	a6, a4
8022df1c: b6 87        	mv	a5, a3
8022df1e: 23 3c b4 fc  	sd	a1, -0x28(s0)
8022df22: 23 30 c4 fe  	sd	a2, -0x20(s0)
8022df26: a3 07 a4 fe  	sb	a0, -0x11(s0)

000000008022df2a <.Lpcrel_hi5>:
;     assert_failed_inner(kind, &left, &right, args)
8022df2a: 97 d5 00 00  	auipc	a1, 0xd
8022df2e: 13 87 65 73  	addi	a4, a1, 0x736
8022df32: 93 05 84 fd  	addi	a1, s0, -0x28
8022df36: 93 06 04 fe  	addi	a3, s0, -0x20
8022df3a: 3a 86        	mv	a2, a4
8022df3c: 97 20 00 00  	auipc	ra, 0x2
8022df40: e7 80 40 43  	jalr	0x434(ra) <_ZN4core9panicking19assert_failed_inner17h4c07be238101dcd6E>

000000008022df44 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h87ff06332bd9c2ebE>:
;     fn into_iter(self) -> I {
8022df44: 01 11        	addi	sp, sp, -0x20
8022df46: 06 ec        	sd	ra, 0x18(sp)
8022df48: 22 e8        	sd	s0, 0x10(sp)
8022df4a: 00 10        	addi	s0, sp, 0x20
8022df4c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022df50: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022df54: e2 60        	ld	ra, 0x18(sp)
8022df56: 42 64        	ld	s0, 0x10(sp)
;     }
8022df58: 05 61        	addi	sp, sp, 0x20
8022df5a: 82 80        	ret

000000008022df5c <_ZN69_$LT$T$u20$as$u20$core..array..equality..SpecArrayEq$LT$U$C$_$GT$$GT$7spec_eq17h5be87b921749f3a9E>:
;     fn spec_eq(a: &[T; N], b: &[U; N]) -> bool {
8022df5c: 79 71        	addi	sp, sp, -0x30
8022df5e: 06 f4        	sd	ra, 0x28(sp)
8022df60: 22 f0        	sd	s0, 0x20(sp)
8022df62: 00 18        	addi	s0, sp, 0x30
8022df64: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022df68: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { crate::intrinsics::raw_eq(a, crate::mem::transmute(b)) }
8022df6c: 83 46 05 00  	lbu	a3, 0x0(a0)
8022df70: 03 46 15 00  	lbu	a2, 0x1(a0)
8022df74: 22 06        	slli	a2, a2, 0x8
8022df76: 55 8e        	or	a2, a2, a3
8022df78: 83 46 25 00  	lbu	a3, 0x2(a0)
8022df7c: c2 06        	slli	a3, a3, 0x10
8022df7e: 03 05 35 00  	lb	a0, 0x3(a0)
8022df82: 62 05        	slli	a0, a0, 0x18
8022df84: 55 8d        	or	a0, a0, a3
8022df86: 51 8d        	or	a0, a0, a2
8022df88: 83 c6 05 00  	lbu	a3, 0x0(a1)
8022df8c: 03 c6 15 00  	lbu	a2, 0x1(a1)
8022df90: 22 06        	slli	a2, a2, 0x8
8022df92: 55 8e        	or	a2, a2, a3
8022df94: 83 c6 25 00  	lbu	a3, 0x2(a1)
8022df98: c2 06        	slli	a3, a3, 0x10
8022df9a: 83 85 35 00  	lb	a1, 0x3(a1)
8022df9e: e2 05        	slli	a1, a1, 0x18
8022dfa0: d5 8d        	or	a1, a1, a3
8022dfa2: d1 8d        	or	a1, a1, a2
8022dfa4: 2d 8d        	xor	a0, a0, a1
8022dfa6: 13 35 15 00  	seqz	a0, a0
8022dfaa: a3 07 a4 fe  	sb	a0, -0x11(s0)
8022dfae: 03 45 f4 fe  	lbu	a0, -0x11(s0)
8022dfb2: a2 70        	ld	ra, 0x28(sp)
8022dfb4: 02 74        	ld	s0, 0x20(sp)
;     }
8022dfb6: 45 61        	addi	sp, sp, 0x30
8022dfb8: 82 80        	ret

000000008022dfba <_ZN69_$LT$T$u20$as$u20$core..array..equality..SpecArrayEq$LT$U$C$_$GT$$GT$7spec_ne17h77666abf49d88939E>:
;     fn spec_ne(a: &[T; N], b: &[U; N]) -> bool {
8022dfba: 79 71        	addi	sp, sp, -0x30
8022dfbc: 06 f4        	sd	ra, 0x28(sp)
8022dfbe: 22 f0        	sd	s0, 0x20(sp)
8022dfc0: 00 18        	addi	s0, sp, 0x30
8022dfc2: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022dfc6: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         unsafe { crate::intrinsics::raw_eq(a, crate::mem::transmute(b)) }
8022dfca: 83 46 05 00  	lbu	a3, 0x0(a0)
8022dfce: 03 46 15 00  	lbu	a2, 0x1(a0)
8022dfd2: 22 06        	slli	a2, a2, 0x8
8022dfd4: 55 8e        	or	a2, a2, a3
8022dfd6: 83 46 25 00  	lbu	a3, 0x2(a0)
8022dfda: c2 06        	slli	a3, a3, 0x10
8022dfdc: 03 05 35 00  	lb	a0, 0x3(a0)
8022dfe0: 62 05        	slli	a0, a0, 0x18
8022dfe2: 55 8d        	or	a0, a0, a3
8022dfe4: 51 8d        	or	a0, a0, a2
8022dfe6: 83 c6 05 00  	lbu	a3, 0x0(a1)
8022dfea: 03 c6 15 00  	lbu	a2, 0x1(a1)
8022dfee: 22 06        	slli	a2, a2, 0x8
8022dff0: 55 8e        	or	a2, a2, a3
8022dff2: 83 c6 25 00  	lbu	a3, 0x2(a1)
8022dff6: c2 06        	slli	a3, a3, 0x10
8022dff8: 83 85 35 00  	lb	a1, 0x3(a1)
8022dffc: e2 05        	slli	a1, a1, 0x18
8022dffe: d5 8d        	or	a1, a1, a3
8022e000: d1 8d        	or	a1, a1, a2
8022e002: 2d 8d        	xor	a0, a0, a1
8022e004: 13 35 15 00  	seqz	a0, a0
8022e008: a3 07 a4 fe  	sb	a0, -0x11(s0)
8022e00c: 03 45 f4 fe  	lbu	a0, -0x11(s0)
;         !Self::spec_eq(a, b)
8022e010: 13 45 f5 ff  	not	a0, a0
;     }
8022e014: 05 89        	andi	a0, a0, 0x1
8022e016: a2 70        	ld	ra, 0x28(sp)
8022e018: 02 74        	ld	s0, 0x20(sp)
8022e01a: 45 61        	addi	sp, sp, 0x30
8022e01c: 82 80        	ret

000000008022e01e <_ZN8xmas_elf7ElfFile3new17h553277ee79c5e940E>:
;     pub fn new(input: &'a [u8]) -> Result<ElfFile<'a>, &'static str> {
8022e01e: 71 71        	addi	sp, sp, -0xb0
8022e020: 06 f5        	sd	ra, 0xa8(sp)
8022e022: 22 f1        	sd	s0, 0xa0(sp)
8022e024: 00 19        	addi	s0, sp, 0xb0
8022e026: 23 38 c4 f4  	sd	a2, -0xb0(s0)
8022e02a: 23 3c b4 f4  	sd	a1, -0xa8(s0)
8022e02e: 23 30 a4 f6  	sd	a0, -0xa0(s0)
8022e032: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022e036: 23 34 c4 fc  	sd	a2, -0x38(s0)
8022e03a: 13 05 84 f6  	addi	a0, s0, -0x98
;         let header = try!(header::parse_header(input));
8022e03e: 97 f0 ff ff  	auipc	ra, 0xfffff
8022e042: e7 80 60 75  	jalr	0x756(ra) <ekernel+0xffce0794>
8022e046: 03 35 84 f6  	ld	a0, -0x98(s0)
8022e04a: 89 45        	li	a1, 0x2
8022e04c: 63 05 b5 06  	beq	a0, a1, 0x8022e0b6 <_ZN8xmas_elf7ElfFile3new17h553277ee79c5e940E+0x98>
8022e050: 09 a0        	j	0x8022e052 <_ZN8xmas_elf7ElfFile3new17h553277ee79c5e940E+0x34>
8022e052: 83 35 04 f6  	ld	a1, -0xa0(s0)
8022e056: 03 35 04 f5  	ld	a0, -0xb0(s0)
8022e05a: 03 36 84 f5  	ld	a2, -0xa8(s0)
;         let header = try!(header::parse_header(input));
8022e05e: 83 36 84 f7  	ld	a3, -0x88(s0)
8022e062: 23 38 d4 f8  	sd	a3, -0x70(s0)
8022e066: 83 36 04 f7  	ld	a3, -0x90(s0)
8022e06a: 23 34 d4 f8  	sd	a3, -0x78(s0)
8022e06e: 83 36 84 f6  	ld	a3, -0x98(s0)
8022e072: 23 30 d4 f8  	sd	a3, -0x80(s0)
;         Ok(ElfFile {
8022e076: 23 38 c4 fa  	sd	a2, -0x50(s0)
8022e07a: 23 3c a4 fa  	sd	a0, -0x48(s0)
8022e07e: 03 35 04 f9  	ld	a0, -0x70(s0)
8022e082: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022e086: 03 35 84 f8  	ld	a0, -0x78(s0)
8022e08a: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022e08e: 03 35 04 f8  	ld	a0, -0x80(s0)
8022e092: 23 3c a4 f8  	sd	a0, -0x68(s0)
8022e096: 03 35 84 fb  	ld	a0, -0x48(s0)
8022e09a: 88 f1        	sd	a0, 0x20(a1)
8022e09c: 03 35 04 fb  	ld	a0, -0x50(s0)
8022e0a0: 88 ed        	sd	a0, 0x18(a1)
8022e0a2: 03 35 84 fa  	ld	a0, -0x58(s0)
8022e0a6: 88 e9        	sd	a0, 0x10(a1)
8022e0a8: 03 35 04 fa  	ld	a0, -0x60(s0)
8022e0ac: 88 e5        	sd	a0, 0x8(a1)
8022e0ae: 03 35 84 f9  	ld	a0, -0x68(s0)
8022e0b2: 88 e1        	sd	a0, 0x0(a1)
;     }
8022e0b4: 25 a0        	j	0x8022e0dc <_ZN8xmas_elf7ElfFile3new17h553277ee79c5e940E+0xbe>
8022e0b6: 83 35 04 f6  	ld	a1, -0xa0(s0)
;         let header = try!(header::parse_header(input));
8022e0ba: 03 36 04 f7  	ld	a2, -0x90(s0)
8022e0be: 03 35 84 f7  	ld	a0, -0x88(s0)
8022e0c2: 23 38 c4 fc  	sd	a2, -0x30(s0)
8022e0c6: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022e0ca: 23 30 c4 fe  	sd	a2, -0x20(s0)
8022e0ce: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022e0d2: 90 e5        	sd	a2, 0x8(a1)
8022e0d4: 88 e9        	sd	a0, 0x10(a1)
8022e0d6: 09 45        	li	a0, 0x2
8022e0d8: 88 e1        	sd	a0, 0x0(a1)
;     }
8022e0da: 09 a0        	j	0x8022e0dc <_ZN8xmas_elf7ElfFile3new17h553277ee79c5e940E+0xbe>
8022e0dc: aa 70        	ld	ra, 0xa8(sp)
8022e0de: 0a 74        	ld	s0, 0xa0(sp)
;     }
8022e0e0: 4d 61        	addi	sp, sp, 0xb0
8022e0e2: 82 80        	ret

000000008022e0e4 <_ZN8xmas_elf7ElfFile14program_header17h983bd7c8c7596623E>:
;     pub fn program_header(&self, index: u16) -> Result<ProgramHeader<'a>, &'static str> {
8022e0e4: 39 71        	addi	sp, sp, -0x40
8022e0e6: 06 fc        	sd	ra, 0x38(sp)
8022e0e8: 22 f8        	sd	s0, 0x30(sp)
8022e0ea: 80 00        	addi	s0, sp, 0x40
8022e0ec: 32 87        	mv	a4, a2
8022e0ee: ae 86        	mv	a3, a1
8022e0f0: 23 30 d4 fe  	sd	a3, -0x20(s0)
8022e0f4: 23 17 e4 fe  	sh	a4, -0x12(s0)
;         program::parse_program_header(self.input, self.header, index)
8022e0f8: 8c 6e        	ld	a1, 0x18(a3)
8022e0fa: 90 72        	ld	a2, 0x20(a3)
8022e0fc: 9c 6a        	ld	a5, 0x10(a3)
8022e0fe: 23 3c f4 fc  	sd	a5, -0x28(s0)
8022e102: 9c 66        	ld	a5, 0x8(a3)
8022e104: 23 38 f4 fc  	sd	a5, -0x30(s0)
8022e108: 94 62        	ld	a3, 0x0(a3)
8022e10a: 23 34 d4 fc  	sd	a3, -0x38(s0)
8022e10e: 93 06 84 fc  	addi	a3, s0, -0x38
8022e112: 97 00 00 00  	auipc	ra, 0x0
8022e116: e7 80 00 01  	jalr	0x10(ra) <_ZN8xmas_elf7program20parse_program_header17hb4f38b1b12cbfc7eE>
8022e11a: e2 70        	ld	ra, 0x38(sp)
8022e11c: 42 74        	ld	s0, 0x30(sp)
;     }
8022e11e: 21 61        	addi	sp, sp, 0x40
8022e120: 82 80        	ret

000000008022e122 <_ZN8xmas_elf7program20parse_program_header17hb4f38b1b12cbfc7eE>:
; pub fn parse_program_header<'a>(input: &'a [u8],
8022e122: 25 71        	addi	sp, sp, -0x1a0
8022e124: 06 ef        	sd	ra, 0x198(sp)
8022e126: 22 eb        	sd	s0, 0x190(sp)
8022e128: 00 13        	addi	s0, sp, 0x1a0
8022e12a: 23 38 d4 ec  	sd	a3, -0x130(s0)
8022e12e: 23 30 c4 ec  	sd	a2, -0x140(s0)
8022e132: 23 34 b4 ec  	sd	a1, -0x138(s0)
8022e136: aa 86        	mv	a3, a0
8022e138: 03 35 04 ed  	ld	a0, -0x130(s0)
8022e13c: 23 3c d4 ec  	sd	a3, -0x128(s0)
8022e140: c1 66        	lui	a3, 0x10
8022e142: fd 36        	addiw	a3, a3, -0x1
8022e144: 23 34 d4 ee  	sd	a3, -0x118(s0)
8022e148: f9 8e        	and	a3, a3, a4
8022e14a: 23 38 d4 ee  	sd	a3, -0x110(s0)
8022e14e: ba 86        	mv	a3, a4
8022e150: 23 30 d4 ee  	sd	a3, -0x120(s0)
8022e154: 23 30 b4 f4  	sd	a1, -0xc0(s0)
8022e158: 23 34 c4 f4  	sd	a2, -0xb8(s0)
8022e15c: 23 1b e4 f4  	sh	a4, -0xaa(s0)
;     let pt2 = &header.pt2;
8022e160: 23 3c a4 f4  	sd	a0, -0xa8(s0)
;     if !(index < pt2.ph_count() && pt2.ph_offset() > 0 && pt2.ph_entry_size() > 0) {
8022e164: 97 00 00 00  	auipc	ra, 0x0
8022e168: e7 80 40 b2  	jalr	-0x4dc(ra) <_ZN8xmas_elf6header9HeaderPt28ph_count17hd37dd8189c08ff03E>
8022e16c: 03 36 84 ee  	ld	a2, -0x118(s0)
8022e170: aa 85        	mv	a1, a0
8022e172: 03 35 04 ef  	ld	a0, -0x110(s0)
8022e176: f1 8d        	and	a1, a1, a2
8022e178: 63 60 b5 02  	bltu	a0, a1, 0x8022e198 <.Lpcrel_hi28+0x16>
8022e17c: 09 a0        	j	0x8022e17e <_ZN8xmas_elf7program20parse_program_header17hb4f38b1b12cbfc7eE+0x5c>
8022e17e: 83 35 84 ed  	ld	a1, -0x128(s0)

000000008022e182 <.Lpcrel_hi28>:
;         return Err("There are no program headers in this file")
8022e182: 17 d5 00 00  	auipc	a0, 0xd
8022e186: 13 05 e5 4f  	addi	a0, a0, 0x4fe
8022e18a: 88 e5        	sd	a0, 0x8(a1)
8022e18c: 13 05 90 02  	li	a0, 0x29
8022e190: 88 e9        	sd	a0, 0x10(a1)
8022e192: 05 45        	li	a0, 0x1
8022e194: 88 e1        	sd	a0, 0x0(a1)
; }
8022e196: bd a0        	j	0x8022e204 <.Lpcrel_hi28+0x82>
8022e198: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if !(index < pt2.ph_count() && pt2.ph_offset() > 0 && pt2.ph_entry_size() > 0) {
8022e19c: 97 00 00 00  	auipc	ra, 0x0
8022e1a0: e7 80 a0 a5  	jalr	-0x5a6(ra) <_ZN8xmas_elf6header9HeaderPt29ph_offset17he34da7e3ca864948E>
8022e1a4: 69 dd        	beqz	a0, 0x8022e17e <_ZN8xmas_elf7program20parse_program_header17hb4f38b1b12cbfc7eE+0x5c>
8022e1a6: 09 a0        	j	0x8022e1a8 <.Lpcrel_hi28+0x26>
8022e1a8: 03 35 04 ed  	ld	a0, -0x130(s0)
;     if !(index < pt2.ph_count() && pt2.ph_offset() > 0 && pt2.ph_entry_size() > 0) {
8022e1ac: 97 00 00 00  	auipc	ra, 0x0
8022e1b0: e7 80 20 a9  	jalr	-0x56e(ra) <_ZN8xmas_elf6header9HeaderPt213ph_entry_size17h6d261b529e06d006E>
8022e1b4: 42 15        	slli	a0, a0, 0x30
8022e1b6: 61 d5        	beqz	a0, 0x8022e17e <_ZN8xmas_elf7program20parse_program_header17hb4f38b1b12cbfc7eE+0x5c>
8022e1b8: 09 a0        	j	0x8022e1ba <.Lpcrel_hi28+0x38>
8022e1ba: 03 35 04 ed  	ld	a0, -0x130(s0)
;     let start = pt2.ph_offset() as usize + index as usize * pt2.ph_entry_size() as usize;
8022e1be: 97 00 00 00  	auipc	ra, 0x0
8022e1c2: e7 80 80 a3  	jalr	-0x5c8(ra) <_ZN8xmas_elf6header9HeaderPt29ph_offset17he34da7e3ca864948E>
8022e1c6: 83 35 04 ee  	ld	a1, -0x120(s0)
8022e1ca: 2a 86        	mv	a2, a0
8022e1cc: 03 35 04 ed  	ld	a0, -0x130(s0)
8022e1d0: 23 30 c4 ea  	sd	a2, -0x160(s0)
8022e1d4: 41 66        	lui	a2, 0x10
8022e1d6: 7d 36        	addiw	a2, a2, -0x1
8022e1d8: 23 34 c4 ea  	sd	a2, -0x158(s0)
8022e1dc: f1 8d        	and	a1, a1, a2
8022e1de: 23 38 b4 ea  	sd	a1, -0x150(s0)
8022e1e2: 97 00 00 00  	auipc	ra, 0x0
8022e1e6: e7 80 c0 a5  	jalr	-0x5a4(ra) <_ZN8xmas_elf6header9HeaderPt213ph_entry_size17h6d261b529e06d006E>
8022e1ea: 03 36 84 ea  	ld	a2, -0x158(s0)
8022e1ee: aa 85        	mv	a1, a0
8022e1f0: 03 35 04 eb  	ld	a0, -0x150(s0)
8022e1f4: f1 8d        	and	a1, a1, a2
8022e1f6: 33 05 b5 02  	mul	a0, a0, a1
8022e1fa: 23 3c a4 ea  	sd	a0, -0x148(s0)
8022e1fe: 01 45        	li	a0, 0x0
8022e200: 05 e1        	bnez	a0, 0x8022e220 <.Lpcrel_hi29>
8022e202: 29 a0        	j	0x8022e20c <.Lpcrel_hi28+0x8a>
8022e204: fa 60        	ld	ra, 0x198(sp)
8022e206: 5a 64        	ld	s0, 0x190(sp)
; }
8022e208: 1d 61        	addi	sp, sp, 0x1a0
8022e20a: 82 80        	ret
8022e20c: 83 35 04 ea  	ld	a1, -0x160(s0)
8022e210: 03 35 84 eb  	ld	a0, -0x148(s0)
;     let start = pt2.ph_offset() as usize + index as usize * pt2.ph_entry_size() as usize;
8022e214: 2e 95        	add	a0, a0, a1
8022e216: 23 3c a4 e8  	sd	a0, -0x168(s0)
8022e21a: 63 65 b5 04  	bltu	a0, a1, 0x8022e264 <.Lpcrel_hi31>
8022e21e: 39 a8        	j	0x8022e23c <.Lpcrel_hi30+0x14>

000000008022e220 <.Lpcrel_hi29>:
8022e220: 17 d5 00 00  	auipc	a0, 0xd
8022e224: 13 05 05 50  	addi	a0, a0, 0x500

000000008022e228 <.Lpcrel_hi30>:
8022e228: 97 d5 00 00  	auipc	a1, 0xd
8022e22c: 13 86 05 4e  	addi	a2, a1, 0x4e0
8022e230: 93 05 10 02  	li	a1, 0x21
8022e234: 97 20 00 00  	auipc	ra, 0x2
8022e238: e7 80 40 fe  	jalr	-0x1c(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022e23c: 83 35 84 e9  	ld	a1, -0x168(s0)
8022e240: 03 35 04 ed  	ld	a0, -0x130(s0)
;     let start = pt2.ph_offset() as usize + index as usize * pt2.ph_entry_size() as usize;
8022e244: 23 30 b4 f6  	sd	a1, -0xa0(s0)
;     let end = start + pt2.ph_entry_size() as usize;
8022e248: 97 00 00 00  	auipc	ra, 0x0
8022e24c: e7 80 60 9f  	jalr	-0x60a(ra) <_ZN8xmas_elf6header9HeaderPt213ph_entry_size17h6d261b529e06d006E>
8022e250: 83 35 84 e9  	ld	a1, -0x168(s0)
8022e254: 42 15        	slli	a0, a0, 0x30
8022e256: 41 91        	srli	a0, a0, 0x30
8022e258: 2e 95        	add	a0, a0, a1
8022e25a: 23 38 a4 e8  	sd	a0, -0x170(s0)
8022e25e: 63 62 b5 06  	bltu	a0, a1, 0x8022e2c2 <.Lpcrel_hi33>
8022e262: 31 a8        	j	0x8022e27e <.Lpcrel_hi32+0x12>

000000008022e264 <.Lpcrel_hi31>:
;     let start = pt2.ph_offset() as usize + index as usize * pt2.ph_entry_size() as usize;
8022e264: 17 d5 00 00  	auipc	a0, 0xd
8022e268: 13 05 c5 4f  	addi	a0, a0, 0x4fc

000000008022e26c <.Lpcrel_hi32>:
8022e26c: 97 d5 00 00  	auipc	a1, 0xd
8022e270: 13 86 c5 4d  	addi	a2, a1, 0x4dc
8022e274: f1 45        	li	a1, 0x1c
8022e276: 97 20 00 00  	auipc	ra, 0x2
8022e27a: e7 80 20 fa  	jalr	-0x5e(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022e27e: 03 35 04 ed  	ld	a0, -0x130(s0)
8022e282: 83 35 04 e9  	ld	a1, -0x170(s0)
;     let end = start + pt2.ph_entry_size() as usize;
8022e286: 23 34 b4 f6  	sd	a1, -0x98(s0)
;     match header.pt1.class() {
8022e28a: 08 69        	ld	a0, 0x10(a0)
8022e28c: 97 00 00 00  	auipc	ra, 0x0
8022e290: e7 80 a0 88  	jalr	-0x776(ra) <_ZN8xmas_elf6header9HeaderPt15class17hba6d3d913f3693d2E>
8022e294: 23 0f a4 ee  	sb	a0, -0x102(s0)
8022e298: a3 0f b4 ee  	sb	a1, -0x101(s0)
8022e29c: 03 45 e4 ef  	lbu	a0, -0x102(s0)
8022e2a0: 23 34 a4 e8  	sd	a0, -0x178(s0)
8022e2a4: 0d cd        	beqz	a0, 0x8022e2de <.Lpcrel_hi35>
8022e2a6: 09 a0        	j	0x8022e2a8 <.Lpcrel_hi32+0x3c>
8022e2a8: 03 35 84 e8  	ld	a0, -0x178(s0)
8022e2ac: 85 45        	li	a1, 0x1
;     match header.pt1.class() {
8022e2ae: 63 06 b5 04  	beq	a0, a1, 0x8022e2fa <.Lpcrel_hi36+0x14>
8022e2b2: 09 a0        	j	0x8022e2b4 <.Lpcrel_hi32+0x48>
8022e2b4: 03 35 84 e8  	ld	a0, -0x178(s0)
8022e2b8: 89 45        	li	a1, 0x2
;     match header.pt1.class() {
8022e2ba: 63 05 b5 10  	beq	a0, a1, 0x8022e3c4 <.Lpcrel_hi38+0x4e>
8022e2be: 09 a0        	j	0x8022e2c0 <.Lpcrel_hi32+0x54>
8022e2c0: 39 a8        	j	0x8022e2de <.Lpcrel_hi35>

000000008022e2c2 <.Lpcrel_hi33>:
;     let end = start + pt2.ph_entry_size() as usize;
8022e2c2: 17 d5 00 00  	auipc	a0, 0xd
8022e2c6: 13 05 e5 49  	addi	a0, a0, 0x49e

000000008022e2ca <.Lpcrel_hi34>:
8022e2ca: 97 d5 00 00  	auipc	a1, 0xd
8022e2ce: 13 86 65 4b  	addi	a2, a1, 0x4b6
8022e2d2: f1 45        	li	a1, 0x1c
8022e2d4: 97 20 00 00  	auipc	ra, 0x2
8022e2d8: e7 80 40 f4  	jalr	-0xbc(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
;     match header.pt1.class() {
8022e2dc: 00 00        	unimp

000000008022e2de <.Lpcrel_hi35>:
;         Class::None | Class::Other(_) => unreachable!(),
8022e2de: 17 d5 00 00  	auipc	a0, 0xd
8022e2e2: 13 05 a5 4e  	addi	a0, a0, 0x4ea

000000008022e2e6 <.Lpcrel_hi36>:
8022e2e6: 97 d5 00 00  	auipc	a1, 0xd
8022e2ea: 13 86 a5 50  	addi	a2, a1, 0x50a
8022e2ee: 93 05 80 02  	li	a1, 0x28
8022e2f2: 97 20 00 00  	auipc	ra, 0x2
8022e2f6: e7 80 60 f2  	jalr	-0xda(ra) <_ZN4core9panicking5panic17hb9241eaa1adcf543E>
8022e2fa: 03 36 04 ec  	ld	a2, -0x140(s0)
8022e2fe: 83 36 84 ec  	ld	a3, -0x138(s0)
8022e302: 03 35 04 e9  	ld	a0, -0x170(s0)
8022e306: 83 35 84 e9  	ld	a1, -0x168(s0)
;             Ok(ProgramHeader::Ph32(read(&input[start..end])))
8022e30a: 23 38 b4 f0  	sd	a1, -0xf0(s0)
8022e30e: 23 3c a4 f0  	sd	a0, -0xe8(s0)
8022e312: 83 35 04 f1  	ld	a1, -0xf0(s0)
8022e316: 23 3c b4 e6  	sd	a1, -0x188(s0)
8022e31a: 03 35 84 f1  	ld	a0, -0xe8(s0)
8022e31e: 23 30 a4 e8  	sd	a0, -0x180(s0)
8022e322: 23 38 d4 fa  	sd	a3, -0x50(s0)
8022e326: 23 3c c4 fa  	sd	a2, -0x48(s0)
8022e32a: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022e32e: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022e332: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022e336: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022e33a: 23 30 d4 fe  	sd	a3, -0x20(s0)
8022e33e: 23 34 c4 fe  	sd	a2, -0x18(s0)
;         if self.start > self.end {
8022e342: 63 6a b5 00  	bltu	a0, a1, 0x8022e356 <.Lpcrel_hi36+0x70>
8022e346: 09 a0        	j	0x8022e348 <.Lpcrel_hi36+0x62>
8022e348: 03 35 04 ec  	ld	a0, -0x140(s0)
8022e34c: 83 35 04 e8  	ld	a1, -0x180(s0)
;         } else if self.end > slice.len() {
8022e350: 63 6f b5 00  	bltu	a0, a1, 0x8022e36e <.Lpcrel_hi37+0x10>
8022e354: 0d a8        	j	0x8022e386 <.Lpcrel_hi38+0x10>
8022e356: 83 35 04 e8  	ld	a1, -0x180(s0)
8022e35a: 03 35 84 e7  	ld	a0, -0x188(s0)

000000008022e35e <.Lpcrel_hi37>:
;             slice_index_order_fail(self.start, self.end);
8022e35e: 17 d6 00 00  	auipc	a2, 0xd
8022e362: 13 06 a6 43  	addi	a2, a2, 0x43a
8022e366: 97 30 00 00  	auipc	ra, 0x3
8022e36a: e7 80 e0 37  	jalr	0x37e(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
8022e36e: 83 35 04 ec  	ld	a1, -0x140(s0)
8022e372: 03 35 04 e8  	ld	a0, -0x180(s0)

000000008022e376 <.Lpcrel_hi38>:
;             slice_end_index_len_fail(self.end, slice.len());
8022e376: 17 d6 00 00  	auipc	a2, 0xd
8022e37a: 13 06 26 42  	addi	a2, a2, 0x422
8022e37e: 97 30 00 00  	auipc	ra, 0x3
8022e382: e7 80 20 32  	jalr	0x322(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
8022e386: 83 36 04 ec  	ld	a3, -0x140(s0)
8022e38a: 03 36 84 ec  	ld	a2, -0x138(s0)
8022e38e: 83 35 04 e8  	ld	a1, -0x180(s0)
8022e392: 03 35 84 e7  	ld	a0, -0x188(s0)
;         unsafe { &*self.get_unchecked(slice) }
8022e396: 97 00 00 00  	auipc	ra, 0x0
8022e39a: e7 80 a0 58  	jalr	0x58a(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E>
;             Ok(ProgramHeader::Ph32(read(&input[start..end])))
8022e39e: 97 f0 ff ff  	auipc	ra, 0xfffff
8022e3a2: e7 80 20 1b  	jalr	0x1b2(ra) <ekernel+0xffce0550>
8022e3a6: 83 35 84 ed  	ld	a1, -0x128(s0)
8022e3aa: 23 34 a4 f0  	sd	a0, -0xf8(s0)
8022e3ae: 01 45        	li	a0, 0x0
8022e3b0: 23 30 a4 f0  	sd	a0, -0x100(s0)
8022e3b4: 83 36 04 f0  	ld	a3, -0x100(s0)
8022e3b8: 03 36 84 f0  	ld	a2, -0xf8(s0)
8022e3bc: 94 e5        	sd	a3, 0x8(a1)
8022e3be: 90 e9        	sd	a2, 0x10(a1)
8022e3c0: 88 e1        	sd	a0, 0x0(a1)
;         }
8022e3c2: 89 b5        	j	0x8022e204 <.Lpcrel_hi28+0x82>
8022e3c4: 03 36 04 ec  	ld	a2, -0x140(s0)
8022e3c8: 83 36 84 ec  	ld	a3, -0x138(s0)
8022e3cc: 03 35 04 e9  	ld	a0, -0x170(s0)
8022e3d0: 83 35 84 e9  	ld	a1, -0x168(s0)
;             Ok(ProgramHeader::Ph64(read(&input[start..end])))
8022e3d4: 23 38 b4 f2  	sd	a1, -0xd0(s0)
8022e3d8: 23 3c a4 f2  	sd	a0, -0xc8(s0)
8022e3dc: 83 35 04 f3  	ld	a1, -0xd0(s0)
8022e3e0: 23 34 b4 e6  	sd	a1, -0x198(s0)
8022e3e4: 03 35 84 f3  	ld	a0, -0xc8(s0)
8022e3e8: 23 38 a4 e6  	sd	a0, -0x190(s0)
8022e3ec: 23 38 d4 f6  	sd	a3, -0x90(s0)
8022e3f0: 23 3c c4 f6  	sd	a2, -0x88(s0)
8022e3f4: 23 30 b4 f8  	sd	a1, -0x80(s0)
8022e3f8: 23 34 a4 f8  	sd	a0, -0x78(s0)
8022e3fc: 23 38 b4 f8  	sd	a1, -0x70(s0)
8022e400: 23 3c a4 f8  	sd	a0, -0x68(s0)
8022e404: 23 30 d4 fa  	sd	a3, -0x60(s0)
8022e408: 23 34 c4 fa  	sd	a2, -0x58(s0)
;         if self.start > self.end {
8022e40c: 63 6a b5 00  	bltu	a0, a1, 0x8022e420 <.Lpcrel_hi38+0xaa>
8022e410: 09 a0        	j	0x8022e412 <.Lpcrel_hi38+0x9c>
8022e412: 03 35 04 ec  	ld	a0, -0x140(s0)
8022e416: 83 35 04 e7  	ld	a1, -0x190(s0)
;         } else if self.end > slice.len() {
8022e41a: 63 6f b5 00  	bltu	a0, a1, 0x8022e438 <.Lpcrel_hi39+0x10>
8022e41e: 0d a8        	j	0x8022e450 <.Lpcrel_hi40+0x10>
8022e420: 83 35 04 e7  	ld	a1, -0x190(s0)
8022e424: 03 35 84 e6  	ld	a0, -0x198(s0)

000000008022e428 <.Lpcrel_hi39>:
;             slice_index_order_fail(self.start, self.end);
8022e428: 17 d6 00 00  	auipc	a2, 0xd
8022e42c: 13 06 86 38  	addi	a2, a2, 0x388
8022e430: 97 30 00 00  	auipc	ra, 0x3
8022e434: e7 80 40 2b  	jalr	0x2b4(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
8022e438: 83 35 04 ec  	ld	a1, -0x140(s0)
8022e43c: 03 35 04 e7  	ld	a0, -0x190(s0)

000000008022e440 <.Lpcrel_hi40>:
;             slice_end_index_len_fail(self.end, slice.len());
8022e440: 17 d6 00 00  	auipc	a2, 0xd
8022e444: 13 06 06 37  	addi	a2, a2, 0x370
8022e448: 97 30 00 00  	auipc	ra, 0x3
8022e44c: e7 80 80 25  	jalr	0x258(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>
8022e450: 83 36 04 ec  	ld	a3, -0x140(s0)
8022e454: 03 36 84 ec  	ld	a2, -0x138(s0)
8022e458: 83 35 04 e7  	ld	a1, -0x190(s0)
8022e45c: 03 35 84 e6  	ld	a0, -0x198(s0)
;         unsafe { &*self.get_unchecked(slice) }
8022e460: 97 00 00 00  	auipc	ra, 0x0
8022e464: e7 80 00 4c  	jalr	0x4c0(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E>
;             Ok(ProgramHeader::Ph64(read(&input[start..end])))
8022e468: 97 f0 ff ff  	auipc	ra, 0xfffff
8022e46c: e7 80 80 1a  	jalr	0x1a8(ra) <ekernel+0xffce0610>
8022e470: 83 35 84 ed  	ld	a1, -0x128(s0)
8022e474: 23 34 a4 f2  	sd	a0, -0xd8(s0)
8022e478: 05 45        	li	a0, 0x1
8022e47a: 23 30 a4 f2  	sd	a0, -0xe0(s0)
8022e47e: 03 36 04 f2  	ld	a2, -0xe0(s0)
8022e482: 03 35 84 f2  	ld	a0, -0xd8(s0)
8022e486: 90 e5        	sd	a2, 0x8(a1)
8022e488: 88 e9        	sd	a0, 0x10(a1)
8022e48a: 01 45        	li	a0, 0x0
8022e48c: 88 e1        	sd	a0, 0x0(a1)
;         }
8022e48e: 9d bb        	j	0x8022e204 <.Lpcrel_hi28+0x82>

000000008022e490 <_ZN8xmas_elf7program13ProgramHeader8get_type17h2445591a8c7dbe32E>:
;     pub fn get_type(&self) -> Result<Type, &'static str> {
8022e490: 39 71        	addi	sp, sp, -0x40
8022e492: 06 fc        	sd	ra, 0x38(sp)
8022e494: 22 f8        	sd	s0, 0x30(sp)
8022e496: 80 00        	addi	s0, sp, 0x40
8022e498: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022e49c: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022e4a0: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         match *self {
8022e4a4: 88 61        	ld	a0, 0x0(a1)
8022e4a6: 11 ed        	bnez	a0, 0x8022e4c2 <_ZN8xmas_elf7program13ProgramHeader8get_type17h2445591a8c7dbe32E+0x32>
8022e4a8: 09 a0        	j	0x8022e4aa <_ZN8xmas_elf7program13ProgramHeader8get_type17h2445591a8c7dbe32E+0x1a>
8022e4aa: 03 35 04 fd  	ld	a0, -0x30(s0)
8022e4ae: 83 35 84 fc  	ld	a1, -0x38(s0)
;             ProgramHeader::Ph32(ph) => ph.get_type(),
8022e4b2: 8c 65        	ld	a1, 0x8(a1)
8022e4b4: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022e4b8: 97 00 00 00  	auipc	ra, 0x0
8022e4bc: e7 80 00 43  	jalr	0x430(ra) <_ZN8xmas_elf7program15ProgramHeader328get_type17h7940184e57749af1E>
8022e4c0: 29 a8        	j	0x8022e4da <_ZN8xmas_elf7program13ProgramHeader8get_type17h2445591a8c7dbe32E+0x4a>
8022e4c2: 03 35 04 fd  	ld	a0, -0x30(s0)
8022e4c6: 83 35 84 fc  	ld	a1, -0x38(s0)
;             ProgramHeader::Ph64(ph) => ph.get_type(),
8022e4ca: 8c 65        	ld	a1, 0x8(a1)
8022e4cc: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022e4d0: 97 00 00 00  	auipc	ra, 0x0
8022e4d4: e7 80 40 43  	jalr	0x434(ra) <_ZN8xmas_elf7program15ProgramHeader648get_type17ha79489ee0296c6edE>
8022e4d8: 09 a0        	j	0x8022e4da <_ZN8xmas_elf7program13ProgramHeader8get_type17h2445591a8c7dbe32E+0x4a>
8022e4da: e2 70        	ld	ra, 0x38(sp)
8022e4dc: 42 74        	ld	s0, 0x30(sp)
;     }
8022e4de: 21 61        	addi	sp, sp, 0x40
8022e4e0: 82 80        	ret

000000008022e4e2 <_ZN8xmas_elf7program5Flags10is_execute17h3dea0ef687c0b621E>:
;     pub fn is_execute(&self) -> bool {
8022e4e2: 01 11        	addi	sp, sp, -0x20
8022e4e4: 06 ec        	sd	ra, 0x18(sp)
8022e4e6: 22 e8        	sd	s0, 0x10(sp)
8022e4e8: 00 10        	addi	s0, sp, 0x20
8022e4ea: 23 34 a4 fe  	sd	a0, -0x18(s0)
;     }
8022e4ee: 03 65 05 00  	lwu	a0, 0x0(a0)
8022e4f2: 05 89        	andi	a0, a0, 0x1
8022e4f4: e2 60        	ld	ra, 0x18(sp)
8022e4f6: 42 64        	ld	s0, 0x10(sp)
8022e4f8: 05 61        	addi	sp, sp, 0x20
8022e4fa: 82 80        	ret

000000008022e4fc <_ZN8xmas_elf7program5Flags8is_write17hc539e70bf4c89eafE>:
;     pub fn is_write(&self) -> bool {
8022e4fc: 01 11        	addi	sp, sp, -0x20
8022e4fe: 06 ec        	sd	ra, 0x18(sp)
8022e500: 22 e8        	sd	s0, 0x10(sp)
8022e502: 00 10        	addi	s0, sp, 0x20
8022e504: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0 & FLAG_W == FLAG_W
8022e508: 03 45 05 00  	lbu	a0, 0x0(a0)
8022e50c: 7a 15        	slli	a0, a0, 0x3e
8022e50e: 7d 91        	srli	a0, a0, 0x3f
8022e510: e2 60        	ld	ra, 0x18(sp)
8022e512: 42 64        	ld	s0, 0x10(sp)
;     }
8022e514: 05 61        	addi	sp, sp, 0x20
8022e516: 82 80        	ret

000000008022e518 <_ZN8xmas_elf7program5Flags7is_read17h1c8d1c518bdc6d4aE>:
;     pub fn is_read(&self) -> bool {
8022e518: 01 11        	addi	sp, sp, -0x20
8022e51a: 06 ec        	sd	ra, 0x18(sp)
8022e51c: 22 e8        	sd	s0, 0x10(sp)
8022e51e: 00 10        	addi	s0, sp, 0x20
8022e520: 23 34 a4 fe  	sd	a0, -0x18(s0)
;         self.0 & FLAG_R == FLAG_R
8022e524: 03 45 05 00  	lbu	a0, 0x0(a0)
8022e528: 76 15        	slli	a0, a0, 0x3d
8022e52a: 7d 91        	srli	a0, a0, 0x3f
8022e52c: e2 60        	ld	ra, 0x18(sp)
8022e52e: 42 64        	ld	s0, 0x10(sp)
;     }
8022e530: 05 61        	addi	sp, sp, 0x20
8022e532: 82 80        	ret

000000008022e534 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E>:
;     fn as_type(&self) -> Result<Type, &'static str> {
8022e534: 35 71        	addi	sp, sp, -0xa0
8022e536: 06 ed        	sd	ra, 0x98(sp)
8022e538: 22 e9        	sd	s0, 0x90(sp)
8022e53a: 00 11        	addi	s0, sp, 0xa0
8022e53c: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022e540: 23 34 a4 f6  	sd	a0, -0x98(s0)
8022e544: 23 38 b4 fc  	sd	a1, -0x30(s0)
;         match self.0 {
8022e548: 88 41        	lw	a0, 0x0(a1)
8022e54a: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022e54e: 49 c9        	beqz	a0, 0x8022e5e0 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0xac>
8022e550: 09 a0        	j	0x8022e552 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1e>
8022e552: 03 35 04 f7  	ld	a0, -0x90(s0)
8022e556: 01 25        	sext.w	a0, a0
8022e558: 85 45        	li	a1, 0x1
;         match self.0 {
8022e55a: 63 00 b5 0a  	beq	a0, a1, 0x8022e5fa <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0xc6>
8022e55e: 09 a0        	j	0x8022e560 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x2c>
8022e560: 03 35 04 f7  	ld	a0, -0x90(s0)
8022e564: 01 25        	sext.w	a0, a0
8022e566: 89 45        	li	a1, 0x2
;         match self.0 {
8022e568: 63 07 b5 0a  	beq	a0, a1, 0x8022e616 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0xe2>
8022e56c: 09 a0        	j	0x8022e56e <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x3a>
8022e56e: 03 35 04 f7  	ld	a0, -0x90(s0)
8022e572: 01 25        	sext.w	a0, a0
8022e574: 8d 45        	li	a1, 0x3
;         match self.0 {
8022e576: 63 0e b5 0a  	beq	a0, a1, 0x8022e632 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0xfe>
8022e57a: 09 a0        	j	0x8022e57c <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x48>
8022e57c: 03 35 04 f7  	ld	a0, -0x90(s0)
8022e580: 01 25        	sext.w	a0, a0
8022e582: 91 45        	li	a1, 0x4
;         match self.0 {
8022e584: 63 05 b5 0c  	beq	a0, a1, 0x8022e64e <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x11a>
8022e588: 09 a0        	j	0x8022e58a <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x56>
8022e58a: 03 35 04 f7  	ld	a0, -0x90(s0)
8022e58e: 01 25        	sext.w	a0, a0
8022e590: 95 45        	li	a1, 0x5
;         match self.0 {
8022e592: 63 0c b5 0c  	beq	a0, a1, 0x8022e66a <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x136>
8022e596: 09 a0        	j	0x8022e598 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x64>
8022e598: 03 35 04 f7  	ld	a0, -0x90(s0)
8022e59c: 01 25        	sext.w	a0, a0
8022e59e: 99 45        	li	a1, 0x6
;         match self.0 {
8022e5a0: 63 03 b5 0e  	beq	a0, a1, 0x8022e686 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x152>
8022e5a4: 09 a0        	j	0x8022e5a6 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x72>
8022e5a6: 03 35 04 f7  	ld	a0, -0x90(s0)
8022e5aa: 01 25        	sext.w	a0, a0
8022e5ac: 9d 45        	li	a1, 0x7
;         match self.0 {
8022e5ae: 63 0a b5 0e  	beq	a0, a1, 0x8022e6a2 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x16e>
8022e5b2: 09 a0        	j	0x8022e5b4 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x80>
8022e5b4: 03 35 04 f7  	ld	a0, -0x90(s0)
8022e5b8: 01 25        	sext.w	a0, a0
8022e5ba: b7 e5 74 64  	lui	a1, 0x6474e
8022e5be: 9b 85 25 55  	addiw	a1, a1, 0x552
;         match self.0 {
8022e5c2: 63 0e b5 0e  	beq	a0, a1, 0x8022e6be <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x18a>
8022e5c6: 09 a0        	j	0x8022e5c8 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x94>
8022e5c8: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             t if t >= TYPE_LOOS && t <= TYPE_HIOS => Ok(Type::OsSpecific(t)),
8022e5cc: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022e5d0: 03 65 05 00  	lwu	a0, 0x0(a0)
8022e5d4: 93 55 d5 01  	srli	a1, a0, 0x1d
8022e5d8: 09 45        	li	a0, 0x2
8022e5da: 63 60 b5 12  	bltu	a0, a1, 0x8022e6fa <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1c6>
8022e5de: 11 a2        	j	0x8022e6e2 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1ae>
8022e5e0: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e5e4: 01 45        	li	a0, 0x0
;             0 => Ok(Type::Null),
8022e5e6: 23 2c a4 f6  	sw	a0, -0x88(s0)
8022e5ea: 83 26 84 f7  	lw	a3, -0x88(s0)
8022e5ee: 03 26 c4 f7  	lw	a2, -0x84(s0)
8022e5f2: 94 c5        	sw	a3, 0x8(a1)
8022e5f4: d0 c5        	sw	a2, 0xc(a1)
8022e5f6: 88 e1        	sd	a0, 0x0(a1)
8022e5f8: cd a0        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e5fa: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e5fe: 05 45        	li	a0, 0x1
;             1 => Ok(Type::Load),
8022e600: 23 20 a4 f8  	sw	a0, -0x80(s0)
8022e604: 03 26 04 f8  	lw	a2, -0x80(s0)
8022e608: 03 25 44 f8  	lw	a0, -0x7c(s0)
8022e60c: 90 c5        	sw	a2, 0x8(a1)
8022e60e: c8 c5        	sw	a0, 0xc(a1)
8022e610: 01 45        	li	a0, 0x0
8022e612: 88 e1        	sd	a0, 0x0(a1)
8022e614: d9 a0        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e616: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e61a: 09 45        	li	a0, 0x2
;             2 => Ok(Type::Dynamic),
8022e61c: 23 24 a4 f8  	sw	a0, -0x78(s0)
8022e620: 03 26 84 f8  	lw	a2, -0x78(s0)
8022e624: 03 25 c4 f8  	lw	a0, -0x74(s0)
8022e628: 90 c5        	sw	a2, 0x8(a1)
8022e62a: c8 c5        	sw	a0, 0xc(a1)
8022e62c: 01 45        	li	a0, 0x0
8022e62e: 88 e1        	sd	a0, 0x0(a1)
8022e630: 6d a0        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e632: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e636: 0d 45        	li	a0, 0x3
;             3 => Ok(Type::Interp),
8022e638: 23 28 a4 f8  	sw	a0, -0x70(s0)
8022e63c: 03 26 04 f9  	lw	a2, -0x70(s0)
8022e640: 03 25 44 f9  	lw	a0, -0x6c(s0)
8022e644: 90 c5        	sw	a2, 0x8(a1)
8022e646: c8 c5        	sw	a0, 0xc(a1)
8022e648: 01 45        	li	a0, 0x0
8022e64a: 88 e1        	sd	a0, 0x0(a1)
8022e64c: 79 a0        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e64e: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e652: 11 45        	li	a0, 0x4
;             4 => Ok(Type::Note),
8022e654: 23 2c a4 f8  	sw	a0, -0x68(s0)
8022e658: 03 26 84 f9  	lw	a2, -0x68(s0)
8022e65c: 03 25 c4 f9  	lw	a0, -0x64(s0)
8022e660: 90 c5        	sw	a2, 0x8(a1)
8022e662: c8 c5        	sw	a0, 0xc(a1)
8022e664: 01 45        	li	a0, 0x0
8022e666: 88 e1        	sd	a0, 0x0(a1)
8022e668: 8d a8        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e66a: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e66e: 15 45        	li	a0, 0x5
;             5 => Ok(Type::ShLib),
8022e670: 23 20 a4 fa  	sw	a0, -0x60(s0)
8022e674: 03 26 04 fa  	lw	a2, -0x60(s0)
8022e678: 03 25 44 fa  	lw	a0, -0x5c(s0)
8022e67c: 90 c5        	sw	a2, 0x8(a1)
8022e67e: c8 c5        	sw	a0, 0xc(a1)
8022e680: 01 45        	li	a0, 0x0
8022e682: 88 e1        	sd	a0, 0x0(a1)
8022e684: 99 a8        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e686: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e68a: 19 45        	li	a0, 0x6
;             6 => Ok(Type::Phdr),
8022e68c: 23 24 a4 fa  	sw	a0, -0x58(s0)
8022e690: 03 26 84 fa  	lw	a2, -0x58(s0)
8022e694: 03 25 c4 fa  	lw	a0, -0x54(s0)
8022e698: 90 c5        	sw	a2, 0x8(a1)
8022e69a: c8 c5        	sw	a0, 0xc(a1)
8022e69c: 01 45        	li	a0, 0x0
8022e69e: 88 e1        	sd	a0, 0x0(a1)
8022e6a0: 2d a8        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e6a2: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e6a6: 1d 45        	li	a0, 0x7
;             7 => Ok(Type::Tls),
8022e6a8: 23 28 a4 fa  	sw	a0, -0x50(s0)
8022e6ac: 03 26 04 fb  	lw	a2, -0x50(s0)
8022e6b0: 03 25 44 fb  	lw	a0, -0x4c(s0)
8022e6b4: 90 c5        	sw	a2, 0x8(a1)
8022e6b6: c8 c5        	sw	a0, 0xc(a1)
8022e6b8: 01 45        	li	a0, 0x0
8022e6ba: 88 e1        	sd	a0, 0x0(a1)
8022e6bc: 39 a8        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e6be: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e6c2: 21 45        	li	a0, 0x8
;             TYPE_GNU_RELRO => Ok(Type::GnuRelro),
8022e6c4: 23 2c a4 fa  	sw	a0, -0x48(s0)
8022e6c8: 03 26 84 fb  	lw	a2, -0x48(s0)
8022e6cc: 03 25 c4 fb  	lw	a0, -0x44(s0)
8022e6d0: 90 c5        	sw	a2, 0x8(a1)
8022e6d2: c8 c5        	sw	a0, 0xc(a1)
8022e6d4: 01 45        	li	a0, 0x0
8022e6d6: 88 e1        	sd	a0, 0x0(a1)
8022e6d8: 09 a0        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e6da: ea 60        	ld	ra, 0x98(sp)
8022e6dc: 4a 64        	ld	s0, 0x90(sp)
;     }
8022e6de: 0d 61        	addi	sp, sp, 0xa0
8022e6e0: 82 80        	ret
8022e6e2: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             t if t >= TYPE_LOPROC && t <= TYPE_HIPROC => Ok(Type::ProcessorSpecific(t)),
8022e6e6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022e6ea: 03 65 05 00  	lwu	a0, 0x0(a0)
8022e6ee: 93 55 c5 01  	srli	a1, a0, 0x1c
8022e6f2: 19 45        	li	a0, 0x6
8022e6f4: 63 6c b5 04  	bltu	a0, a1, 0x8022e74c <.Lpcrel_hi49+0x10>
8022e6f8: 81 a0        	j	0x8022e738 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x204>
8022e6fa: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             t if t >= TYPE_LOOS && t <= TYPE_HIOS => Ok(Type::OsSpecific(t)),
8022e6fe: 03 65 05 00  	lwu	a0, 0x0(a0)
8022e702: 93 55 c5 01  	srli	a1, a0, 0x1c
8022e706: 19 45        	li	a0, 0x6
8022e708: e3 6d b5 fc  	bltu	a0, a1, 0x8022e6e2 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1ae>
8022e70c: 09 a0        	j	0x8022e70e <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1da>
8022e70e: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e712: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             t if t >= TYPE_LOOS && t <= TYPE_HIOS => Ok(Type::OsSpecific(t)),
8022e716: 08 41        	lw	a0, 0x0(a0)
8022e718: 23 26 a4 fe  	sw	a0, -0x14(s0)
8022e71c: 23 22 a4 fc  	sw	a0, -0x3c(s0)
8022e720: 25 45        	li	a0, 0x9
8022e722: 23 20 a4 fc  	sw	a0, -0x40(s0)
8022e726: 03 26 04 fc  	lw	a2, -0x40(s0)
8022e72a: 03 25 44 fc  	lw	a0, -0x3c(s0)
8022e72e: 90 c5        	sw	a2, 0x8(a1)
8022e730: c8 c5        	sw	a0, 0xc(a1)
8022e732: 01 45        	li	a0, 0x0
8022e734: 88 e1        	sd	a0, 0x0(a1)
8022e736: 55 b7        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e738: 83 35 84 f6  	ld	a1, -0x98(s0)

000000008022e73c <.Lpcrel_hi49>:
;             _ => Err("Invalid type"),
8022e73c: 17 d5 00 00  	auipc	a0, 0xd
8022e740: 13 05 c5 0c  	addi	a0, a0, 0xcc
8022e744: 88 e1        	sd	a0, 0x0(a1)
8022e746: 31 45        	li	a0, 0xc
8022e748: 88 e5        	sd	a0, 0x8(a1)
8022e74a: 41 bf        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>
8022e74c: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             t if t >= TYPE_LOPROC && t <= TYPE_HIPROC => Ok(Type::ProcessorSpecific(t)),
8022e750: 08 41        	lw	a0, 0x0(a0)
8022e752: e3 43 05 fe  	bltz	a0, 0x8022e738 <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x204>
8022e756: 09 a0        	j	0x8022e758 <.Lpcrel_hi49+0x1c>
8022e758: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e75c: 03 35 04 f6  	ld	a0, -0xa0(s0)
;             t if t >= TYPE_LOPROC && t <= TYPE_HIPROC => Ok(Type::ProcessorSpecific(t)),
8022e760: 08 41        	lw	a0, 0x0(a0)
8022e762: 23 24 a4 fe  	sw	a0, -0x18(s0)
8022e766: 23 26 a4 fc  	sw	a0, -0x34(s0)
8022e76a: 29 45        	li	a0, 0xa
8022e76c: 23 24 a4 fc  	sw	a0, -0x38(s0)
8022e770: 03 26 84 fc  	lw	a2, -0x38(s0)
8022e774: 03 25 c4 fc  	lw	a0, -0x34(s0)
8022e778: 90 c5        	sw	a2, 0x8(a1)
8022e77a: c8 c5        	sw	a0, 0xc(a1)
8022e77c: 01 45        	li	a0, 0x0
8022e77e: 88 e1        	sd	a0, 0x0(a1)
8022e780: a9 bf        	j	0x8022e6da <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E+0x1a6>

000000008022e782 <_ZN8xmas_elf7program13ProgramHeader9file_size17hb5be7498b03aa39cE>:
;         pub fn $name(&self) -> $typ {
8022e782: 39 71        	addi	sp, sp, -0x40
8022e784: 06 fc        	sd	ra, 0x38(sp)
8022e786: 22 f8        	sd	s0, 0x30(sp)
8022e788: 80 00        	addi	s0, sp, 0x40
8022e78a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022e78e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             match *self {
8022e792: 08 61        	ld	a0, 0x0(a0)
8022e794: 01 ed        	bnez	a0, 0x8022e7ac <_ZN8xmas_elf7program13ProgramHeader9file_size17hb5be7498b03aa39cE+0x2a>
8022e796: 09 a0        	j	0x8022e798 <_ZN8xmas_elf7program13ProgramHeader9file_size17hb5be7498b03aa39cE+0x16>
8022e798: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph32(h) => h.$name as $typ,
8022e79c: 08 65        	ld	a0, 0x8(a0)
8022e79e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022e7a2: 03 65 05 01  	lwu	a0, 0x10(a0)
8022e7a6: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022e7aa: 11 a8        	j	0x8022e7be <_ZN8xmas_elf7program13ProgramHeader9file_size17hb5be7498b03aa39cE+0x3c>
8022e7ac: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph64(h) => h.$name as $typ,
8022e7b0: 08 65        	ld	a0, 0x8(a0)
8022e7b2: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022e7b6: 08 71        	ld	a0, 0x20(a0)
8022e7b8: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022e7bc: 09 a0        	j	0x8022e7be <_ZN8xmas_elf7program13ProgramHeader9file_size17hb5be7498b03aa39cE+0x3c>
;         }
8022e7be: 03 35 04 fd  	ld	a0, -0x30(s0)
8022e7c2: e2 70        	ld	ra, 0x38(sp)
8022e7c4: 42 74        	ld	s0, 0x30(sp)
8022e7c6: 21 61        	addi	sp, sp, 0x40
8022e7c8: 82 80        	ret

000000008022e7ca <_ZN8xmas_elf7program13ProgramHeader8mem_size17h6acfb5bc2d9f5ac3E>:
;         pub fn $name(&self) -> $typ {
8022e7ca: 39 71        	addi	sp, sp, -0x40
8022e7cc: 06 fc        	sd	ra, 0x38(sp)
8022e7ce: 22 f8        	sd	s0, 0x30(sp)
8022e7d0: 80 00        	addi	s0, sp, 0x40
8022e7d2: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022e7d6: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             match *self {
8022e7da: 08 61        	ld	a0, 0x0(a0)
8022e7dc: 01 ed        	bnez	a0, 0x8022e7f4 <_ZN8xmas_elf7program13ProgramHeader8mem_size17h6acfb5bc2d9f5ac3E+0x2a>
8022e7de: 09 a0        	j	0x8022e7e0 <_ZN8xmas_elf7program13ProgramHeader8mem_size17h6acfb5bc2d9f5ac3E+0x16>
8022e7e0: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph32(h) => h.$name as $typ,
8022e7e4: 08 65        	ld	a0, 0x8(a0)
8022e7e6: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022e7ea: 03 65 45 01  	lwu	a0, 0x14(a0)
8022e7ee: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022e7f2: 11 a8        	j	0x8022e806 <_ZN8xmas_elf7program13ProgramHeader8mem_size17h6acfb5bc2d9f5ac3E+0x3c>
8022e7f4: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph64(h) => h.$name as $typ,
8022e7f8: 08 65        	ld	a0, 0x8(a0)
8022e7fa: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022e7fe: 08 75        	ld	a0, 0x28(a0)
8022e800: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022e804: 09 a0        	j	0x8022e806 <_ZN8xmas_elf7program13ProgramHeader8mem_size17h6acfb5bc2d9f5ac3E+0x3c>
;         }
8022e806: 03 35 04 fd  	ld	a0, -0x30(s0)
8022e80a: e2 70        	ld	ra, 0x38(sp)
8022e80c: 42 74        	ld	s0, 0x30(sp)
8022e80e: 21 61        	addi	sp, sp, 0x40
8022e810: 82 80        	ret

000000008022e812 <_ZN8xmas_elf7program13ProgramHeader6offset17h76f321c8305c1d9cE>:
;         pub fn $name(&self) -> $typ {
8022e812: 39 71        	addi	sp, sp, -0x40
8022e814: 06 fc        	sd	ra, 0x38(sp)
8022e816: 22 f8        	sd	s0, 0x30(sp)
8022e818: 80 00        	addi	s0, sp, 0x40
8022e81a: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022e81e: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             match *self {
8022e822: 08 61        	ld	a0, 0x0(a0)
8022e824: 01 ed        	bnez	a0, 0x8022e83c <_ZN8xmas_elf7program13ProgramHeader6offset17h76f321c8305c1d9cE+0x2a>
8022e826: 09 a0        	j	0x8022e828 <_ZN8xmas_elf7program13ProgramHeader6offset17h76f321c8305c1d9cE+0x16>
8022e828: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph32(h) => h.$name as $typ,
8022e82c: 08 65        	ld	a0, 0x8(a0)
8022e82e: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022e832: 03 65 45 00  	lwu	a0, 0x4(a0)
8022e836: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022e83a: 11 a8        	j	0x8022e84e <_ZN8xmas_elf7program13ProgramHeader6offset17h76f321c8305c1d9cE+0x3c>
8022e83c: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph64(h) => h.$name as $typ,
8022e840: 08 65        	ld	a0, 0x8(a0)
8022e842: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022e846: 08 65        	ld	a0, 0x8(a0)
8022e848: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022e84c: 09 a0        	j	0x8022e84e <_ZN8xmas_elf7program13ProgramHeader6offset17h76f321c8305c1d9cE+0x3c>
;         }
8022e84e: 03 35 04 fd  	ld	a0, -0x30(s0)
8022e852: e2 70        	ld	ra, 0x38(sp)
8022e854: 42 74        	ld	s0, 0x30(sp)
8022e856: 21 61        	addi	sp, sp, 0x40
8022e858: 82 80        	ret

000000008022e85a <_ZN8xmas_elf7program13ProgramHeader12virtual_addr17h6f651e4be22ac28dE>:
;         pub fn $name(&self) -> $typ {
8022e85a: 39 71        	addi	sp, sp, -0x40
8022e85c: 06 fc        	sd	ra, 0x38(sp)
8022e85e: 22 f8        	sd	s0, 0x30(sp)
8022e860: 80 00        	addi	s0, sp, 0x40
8022e862: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022e866: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             match *self {
8022e86a: 08 61        	ld	a0, 0x0(a0)
8022e86c: 01 ed        	bnez	a0, 0x8022e884 <_ZN8xmas_elf7program13ProgramHeader12virtual_addr17h6f651e4be22ac28dE+0x2a>
8022e86e: 09 a0        	j	0x8022e870 <_ZN8xmas_elf7program13ProgramHeader12virtual_addr17h6f651e4be22ac28dE+0x16>
8022e870: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph32(h) => h.$name as $typ,
8022e874: 08 65        	ld	a0, 0x8(a0)
8022e876: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022e87a: 03 65 85 00  	lwu	a0, 0x8(a0)
8022e87e: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022e882: 11 a8        	j	0x8022e896 <_ZN8xmas_elf7program13ProgramHeader12virtual_addr17h6f651e4be22ac28dE+0x3c>
8022e884: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph64(h) => h.$name as $typ,
8022e888: 08 65        	ld	a0, 0x8(a0)
8022e88a: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022e88e: 08 69        	ld	a0, 0x10(a0)
8022e890: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022e894: 09 a0        	j	0x8022e896 <_ZN8xmas_elf7program13ProgramHeader12virtual_addr17h6f651e4be22ac28dE+0x3c>
;         }
8022e896: 03 35 04 fd  	ld	a0, -0x30(s0)
8022e89a: e2 70        	ld	ra, 0x38(sp)
8022e89c: 42 74        	ld	s0, 0x30(sp)
8022e89e: 21 61        	addi	sp, sp, 0x40
8022e8a0: 82 80        	ret

000000008022e8a2 <_ZN8xmas_elf7program13ProgramHeader5flags17h5a7366a46d585ab5E>:
;         pub fn $name(&self) -> $typ {
8022e8a2: 39 71        	addi	sp, sp, -0x40
8022e8a4: 06 fc        	sd	ra, 0x38(sp)
8022e8a6: 22 f8        	sd	s0, 0x30(sp)
8022e8a8: 80 00        	addi	s0, sp, 0x40
8022e8aa: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022e8ae: 23 3c a4 fc  	sd	a0, -0x28(s0)
;             match *self {
8022e8b2: 08 61        	ld	a0, 0x0(a0)
8022e8b4: 19 e9        	bnez	a0, 0x8022e8ca <_ZN8xmas_elf7program13ProgramHeader5flags17h5a7366a46d585ab5E+0x28>
8022e8b6: 09 a0        	j	0x8022e8b8 <_ZN8xmas_elf7program13ProgramHeader5flags17h5a7366a46d585ab5E+0x16>
8022e8b8: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph32(h) => h.$name as $typ,
8022e8bc: 08 65        	ld	a0, 0x8(a0)
8022e8be: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022e8c2: 08 4d        	lw	a0, 0x18(a0)
8022e8c4: 23 2a a4 fc  	sw	a0, -0x2c(s0)
8022e8c8: 11 a8        	j	0x8022e8dc <_ZN8xmas_elf7program13ProgramHeader5flags17h5a7366a46d585ab5E+0x3a>
8022e8ca: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 ProgramHeader::Ph64(h) => h.$name as $typ,
8022e8ce: 08 65        	ld	a0, 0x8(a0)
8022e8d0: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022e8d4: 48 41        	lw	a0, 0x4(a0)
8022e8d6: 23 2a a4 fc  	sw	a0, -0x2c(s0)
8022e8da: 09 a0        	j	0x8022e8dc <_ZN8xmas_elf7program13ProgramHeader5flags17h5a7366a46d585ab5E+0x3a>
;         }
8022e8dc: 03 25 44 fd  	lw	a0, -0x2c(s0)
8022e8e0: e2 70        	ld	ra, 0x38(sp)
8022e8e2: 42 74        	ld	s0, 0x30(sp)
8022e8e4: 21 61        	addi	sp, sp, 0x40
8022e8e6: 82 80        	ret

000000008022e8e8 <_ZN8xmas_elf7program15ProgramHeader328get_type17h7940184e57749af1E>:
;             pub fn get_type(&self) -> Result<Type, &'static str> {
8022e8e8: 01 11        	addi	sp, sp, -0x20
8022e8ea: 06 ec        	sd	ra, 0x18(sp)
8022e8ec: 22 e8        	sd	s0, 0x10(sp)
8022e8ee: 00 10        	addi	s0, sp, 0x20
8022e8f0: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 self.type_.as_type()
8022e8f4: 97 00 00 00  	auipc	ra, 0x0
8022e8f8: e7 80 00 c4  	jalr	-0x3c0(ra) <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E>
8022e8fc: e2 60        	ld	ra, 0x18(sp)
8022e8fe: 42 64        	ld	s0, 0x10(sp)
;             }
8022e900: 05 61        	addi	sp, sp, 0x20
8022e902: 82 80        	ret

000000008022e904 <_ZN8xmas_elf7program15ProgramHeader648get_type17ha79489ee0296c6edE>:
;             pub fn get_type(&self) -> Result<Type, &'static str> {
8022e904: 01 11        	addi	sp, sp, -0x20
8022e906: 06 ec        	sd	ra, 0x18(sp)
8022e908: 22 e8        	sd	s0, 0x10(sp)
8022e90a: 00 10        	addi	s0, sp, 0x20
8022e90c: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 self.type_.as_type()
8022e910: 97 00 00 00  	auipc	ra, 0x0
8022e914: e7 80 40 c2  	jalr	-0x3dc(ra) <_ZN8xmas_elf7program5Type_7as_type17he2c3b89997f01937E>
8022e918: e2 60        	ld	ra, 0x18(sp)
8022e91a: 42 64        	ld	s0, 0x10(sp)
;             }
8022e91c: 05 61        	addi	sp, sp, 0x20
8022e91e: 82 80        	ret

000000008022e920 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E>:
;     unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
8022e920: 71 71        	addi	sp, sp, -0xb0
8022e922: 06 f5        	sd	ra, 0xa8(sp)
8022e924: 22 f1        	sd	s0, 0xa0(sp)
8022e926: 00 19        	addi	s0, sp, 0xb0
8022e928: 23 3c d4 f4  	sd	a3, -0xa8(s0)
8022e92c: 23 30 c4 f6  	sd	a2, -0xa0(s0)
8022e930: 23 34 b4 f6  	sd	a1, -0x98(s0)
8022e934: 23 38 a4 f6  	sd	a0, -0x90(s0)
8022e938: 23 34 a4 fa  	sd	a0, -0x58(s0)
8022e93c: 23 38 b4 fa  	sd	a1, -0x50(s0)
8022e940: 23 3c c4 fa  	sd	a2, -0x48(s0)
8022e944: 23 30 d4 fc  	sd	a3, -0x40(s0)
;         assert_unsafe_precondition!(
8022e948: 09 a0        	j	0x8022e94a <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E+0x2a>
8022e94a: 83 35 84 f6  	ld	a1, -0x98(s0)
8022e94e: 03 35 04 f7  	ld	a0, -0x90(s0)
8022e952: 03 36 84 f5  	ld	a2, -0xa8(s0)
8022e956: 83 36 04 f6  	ld	a3, -0xa0(s0)
;     unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
8022e95a: 23 3c d4 f6  	sd	a3, -0x88(s0)
8022e95e: 23 30 c4 f8  	sd	a2, -0x80(s0)
8022e962: 03 36 04 f8  	ld	a2, -0x80(s0)
;         assert_unsafe_precondition!(
8022e966: 97 00 00 00  	auipc	ra, 0x0
8022e96a: e7 80 60 05  	jalr	0x56(ra) <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1d78710528318189E>
8022e96e: 09 a0        	j	0x8022e970 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hdef163a8e33a6eb5E+0x50>
8022e970: 83 35 04 f6  	ld	a1, -0xa0(s0)
8022e974: 03 36 04 f7  	ld	a2, -0x90(s0)
8022e978: 03 35 84 f6  	ld	a0, -0x98(s0)
;             let new_len = unchecked_sub(self.end, self.start);
8022e97c: 23 34 c4 fc  	sd	a2, -0x38(s0)
8022e980: 11 8d        	sub	a0, a0, a2
8022e982: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         self as *const T
8022e986: 23 3c b4 fc  	sd	a1, -0x28(s0)
;         unsafe { intrinsics::offset(self, count) }
8022e98a: b2 95        	add	a1, a1, a2
8022e98c: 23 30 b4 fe  	sd	a1, -0x20(s0)
;         self as _
8022e990: 23 34 b4 fe  	sd	a1, -0x18(s0)
;     unsafe { PtrRepr { components: PtrComponents { data_pointer, metadata } }.const_ptr }
8022e994: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022e998: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022e99c: 83 35 84 f9  	ld	a1, -0x68(s0)
8022e9a0: 03 35 04 fa  	ld	a0, -0x60(s0)
8022e9a4: 23 34 b4 f8  	sd	a1, -0x78(s0)
8022e9a8: 23 38 a4 f8  	sd	a0, -0x70(s0)
8022e9ac: 03 35 84 f8  	ld	a0, -0x78(s0)
8022e9b0: 83 35 04 f9  	ld	a1, -0x70(s0)
8022e9b4: aa 70        	ld	ra, 0xa8(sp)
8022e9b6: 0a 74        	ld	s0, 0xa0(sp)
;     }
8022e9b8: 4d 61        	addi	sp, sp, 0xb0
8022e9ba: 82 80        	ret

000000008022e9bc <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked18precondition_check17h1d78710528318189E>:
;             const fn precondition_check($($name:$ty),*) {
8022e9bc: 39 71        	addi	sp, sp, -0x40
8022e9be: 06 fc        	sd	ra, 0x38(sp)
8022e9c0: 22 f8        	sd	s0, 0x30(sp)
8022e9c2: 80 00        	addi	s0, sp, 0x40
8022e9c4: 23 34 c4 fc  	sd	a2, -0x38(s0)
8022e9c8: 23 38 b4 fc  	sd	a1, -0x30(s0)
8022e9cc: 23 3c a4 fc  	sd	a0, -0x28(s0)
8022e9d0: 23 30 b4 fe  	sd	a1, -0x20(s0)
8022e9d4: 23 34 c4 fe  	sd	a2, -0x18(s0)
;             ) => end >= start && end <= len
8022e9d8: 63 fd a5 00  	bgeu	a1, a0, 0x8022e9f2 <.Lpcrel_hi0+0x14>
8022e9dc: 09 a0        	j	0x8022e9de <.Lpcrel_hi0>

000000008022e9de <.Lpcrel_hi0>:
;                     ::core::panicking::panic_nounwind(
8022e9de: 17 d5 00 00  	auipc	a0, 0xd
8022e9e2: 13 05 65 e3  	addi	a0, a0, -0x1ca
8022e9e6: 93 05 10 06  	li	a1, 0x61
8022e9ea: 97 20 00 00  	auipc	ra, 0x2
8022e9ee: e7 80 60 85  	jalr	-0x7aa(ra) <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>
8022e9f2: 03 35 84 fc  	ld	a0, -0x38(s0)
8022e9f6: 83 35 04 fd  	ld	a1, -0x30(s0)
;             ) => end >= start && end <= len
8022e9fa: e3 62 b5 fe  	bltu	a0, a1, 0x8022e9de <.Lpcrel_hi0>
8022e9fe: 09 a0        	j	0x8022ea00 <.Lpcrel_hi0+0x22>
8022ea00: e2 70        	ld	ra, 0x38(sp)
8022ea02: 42 74        	ld	s0, 0x30(sp)
;             }
8022ea04: 21 61        	addi	sp, sp, 0x40
8022ea06: 82 80        	ret

000000008022ea08 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hacf954b50e172984E>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
8022ea08: 01 11        	addi	sp, sp, -0x20
8022ea0a: 06 ec        	sd	ra, 0x18(sp)
8022ea0c: 22 e8        	sd	s0, 0x10(sp)
8022ea0e: 00 10        	addi	s0, sp, 0x20
8022ea10: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022ea14: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022ea18: 08 61        	ld	a0, 0x0(a0)
8022ea1a: 97 00 00 00  	auipc	ra, 0x0
8022ea1e: e7 80 20 03  	jalr	0x32(ra) <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E>
8022ea22: e2 60        	ld	ra, 0x18(sp)
8022ea24: 42 64        	ld	s0, 0x10(sp)
8022ea26: 05 61        	addi	sp, sp, 0x20
8022ea28: 82 80        	ret

000000008022ea2a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hcdcad7a417d08532E>:
8022ea2a: 01 11        	addi	sp, sp, -0x20
8022ea2c: 06 ec        	sd	ra, 0x18(sp)
8022ea2e: 22 e8        	sd	s0, 0x10(sp)
8022ea30: 00 10        	addi	s0, sp, 0x20
8022ea32: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022ea36: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022ea3a: 08 61        	ld	a0, 0x0(a0)
8022ea3c: 97 00 00 00  	auipc	ra, 0x0
8022ea40: e7 80 60 0a  	jalr	0xa6(ra) <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h650009f20bdc8afcE>
8022ea44: e2 60        	ld	ra, 0x18(sp)
8022ea46: 42 64        	ld	s0, 0x10(sp)
8022ea48: 05 61        	addi	sp, sp, 0x20
8022ea4a: 82 80        	ret

000000008022ea4c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E>:
;             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
8022ea4c: 39 71        	addi	sp, sp, -0x40
8022ea4e: 06 fc        	sd	ra, 0x38(sp)
8022ea50: 22 f8        	sd	s0, 0x30(sp)
8022ea52: 80 00        	addi	s0, sp, 0x40
8022ea54: 23 34 b4 fc  	sd	a1, -0x38(s0)
8022ea58: 23 38 a4 fc  	sd	a0, -0x30(s0)
8022ea5c: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022ea60: 23 34 b4 fe  	sd	a1, -0x18(s0)
;                 if f.debug_lower_hex() {
8022ea64: 03 c5 45 03  	lbu	a0, 0x34(a1)
8022ea68: 41 89        	andi	a0, a0, 0x10
8022ea6a: 11 e9        	bnez	a0, 0x8022ea7e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E+0x32>
8022ea6c: 09 a0        	j	0x8022ea6e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E+0x22>
8022ea6e: 03 35 84 fc  	ld	a0, -0x38(s0)
;                 } else if f.debug_upper_hex() {
8022ea72: 03 45 45 03  	lbu	a0, 0x34(a0)
8022ea76: 13 75 05 02  	andi	a0, a0, 0x20
8022ea7a: 09 cd        	beqz	a0, 0x8022ea94 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E+0x48>
8022ea7c: 3d a0        	j	0x8022eaaa <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E+0x5e>
8022ea7e: 83 35 84 fc  	ld	a1, -0x38(s0)
8022ea82: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::LowerHex::fmt(self, f)
8022ea86: 97 00 00 00  	auipc	ra, 0x0
8022ea8a: e7 80 60 28  	jalr	0x286(ra) <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h7332f3b1315002d6E>
8022ea8e: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022ea92: 05 a8        	j	0x8022eac2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E+0x76>
8022ea94: 83 35 84 fc  	ld	a1, -0x38(s0)
8022ea98: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::Display::fmt(self, f)
8022ea9c: 97 20 00 00  	auipc	ra, 0x2
8022eaa0: e7 80 00 5a  	jalr	0x5a0(ra) <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17hcdc3a7a7d6bb39feE>
8022eaa4: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022eaa8: 21 a8        	j	0x8022eac0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E+0x74>
8022eaaa: 83 35 84 fc  	ld	a1, -0x38(s0)
8022eaae: 03 35 04 fd  	ld	a0, -0x30(s0)
;                     fmt::UpperHex::fmt(self, f)
8022eab2: 97 00 00 00  	auipc	ra, 0x0
8022eab6: e7 80 c0 2c  	jalr	0x2cc(ra) <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17haa0c736f7a89de33E>
8022eaba: a3 0f a4 fc  	sb	a0, -0x21(s0)
8022eabe: 09 a0        	j	0x8022eac0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E+0x74>
;                 if f.debug_lower_hex() {
8022eac0: 09 a0        	j	0x8022eac2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hcd111e22a05e9338E+0x76>
;             }
8022eac2: 03 45 f4 fd  	lbu	a0, -0x21(s0)
8022eac6: e2 70        	ld	ra, 0x38(sp)
8022eac8: 42 74        	ld	s0, 0x30(sp)
8022eaca: 21 61        	addi	sp, sp, 0x40
8022eacc: 82 80        	ret

000000008022eace <_ZN4core3ptr27drop_in_place$LT$$RF$u8$GT$17hb49472351ff9683fE>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
8022eace: 01 11        	addi	sp, sp, -0x20
8022ead0: 06 ec        	sd	ra, 0x18(sp)
8022ead2: 22 e8        	sd	s0, 0x10(sp)
8022ead4: 00 10        	addi	s0, sp, 0x20
8022ead6: 23 34 a4 fe  	sd	a0, -0x18(s0)
8022eada: e2 60        	ld	ra, 0x18(sp)
8022eadc: 42 64        	ld	s0, 0x10(sp)
8022eade: 05 61        	addi	sp, sp, 0x20
8022eae0: 82 80        	ret

000000008022eae2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h650009f20bdc8afcE>:
; #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]
8022eae2: 39 71        	addi	sp, sp, -0x40
8022eae4: 06 fc        	sd	ra, 0x38(sp)
8022eae6: 22 f8        	sd	s0, 0x30(sp)
8022eae8: 80 00        	addi	s0, sp, 0x40
8022eaea: 23 30 b4 fc  	sd	a1, -0x40(s0)
8022eaee: 23 34 a4 fc  	sd	a0, -0x38(s0)
8022eaf2: 23 30 a4 fe  	sd	a0, -0x20(s0)
8022eaf6: 23 34 b4 fe  	sd	a1, -0x18(s0)
8022eafa: 03 45 05 00  	lbu	a0, 0x0(a0)
8022eafe: 05 89        	andi	a0, a0, 0x1
8022eb00: 05 e1        	bnez	a0, 0x8022eb20 <.Lpcrel_hi13+0x18>
8022eb02: 09 a0        	j	0x8022eb04 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h650009f20bdc8afcE+0x22>
8022eb04: 03 35 04 fc  	ld	a0, -0x40(s0)

000000008022eb08 <.Lpcrel_hi13>:
; #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]
8022eb08: 97 55 00 00  	auipc	a1, 0x5
8022eb0c: 93 85 05 ca  	addi	a1, a1, -0x360
8022eb10: 11 46        	li	a2, 0x4
8022eb12: 97 10 00 00  	auipc	ra, 0x1
8022eb16: e7 80 40 f2  	jalr	-0xdc(ra) <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>
8022eb1a: a3 0b a4 fc  	sb	a0, -0x29(s0)
8022eb1e: 15 a8        	j	0x8022eb52 <.Lpcrel_hi15+0x1c>
8022eb20: 03 35 04 fc  	ld	a0, -0x40(s0)
8022eb24: 83 35 84 fc  	ld	a1, -0x38(s0)
;     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
8022eb28: 85 05        	addi	a1, a1, 0x1
8022eb2a: 23 3c b4 fc  	sd	a1, -0x28(s0)

000000008022eb2e <.Lpcrel_hi14>:
; #[derive(Copy, PartialOrd, Eq, Ord, Debug, Hash)]
8022eb2e: 97 55 00 00  	auipc	a1, 0x5
8022eb32: 93 85 25 c7  	addi	a1, a1, -0x38e

000000008022eb36 <.Lpcrel_hi15>:
8022eb36: 17 d6 00 00  	auipc	a2, 0xd
8022eb3a: 13 07 26 d4  	addi	a4, a2, -0x2be
8022eb3e: 11 46        	li	a2, 0x4
8022eb40: 93 06 84 fd  	addi	a3, s0, -0x28
8022eb44: 97 10 00 00  	auipc	ra, 0x1
8022eb48: e7 80 00 08  	jalr	0x80(ra) <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>
8022eb4c: a3 0b a4 fc  	sb	a0, -0x29(s0)
8022eb50: 09 a0        	j	0x8022eb52 <.Lpcrel_hi15+0x1c>
8022eb52: 03 45 74 fd  	lbu	a0, -0x29(s0)
8022eb56: e2 70        	ld	ra, 0x38(sp)
8022eb58: 42 74        	ld	s0, 0x30(sp)
8022eb5a: 21 61        	addi	sp, sp, 0x40
8022eb5c: 82 80        	ret

000000008022eb5e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE>:
;             fn next(&mut self) -> Option<$elem> {
8022eb5e: 31 71        	addi	sp, sp, -0xc0
8022eb60: 06 fd        	sd	ra, 0xb8(sp)
8022eb62: 22 f9        	sd	s0, 0xb0(sp)
8022eb64: 80 01        	addi	s0, sp, 0xc0
8022eb66: 23 34 a4 f4  	sd	a0, -0xb8(s0)
8022eb6a: 85 45        	li	a1, 0x1
;             unsafe fn post_inc_start(&mut self, offset: usize) -> NonNull<T> {
8022eb6c: 23 38 b4 f4  	sd	a1, -0xb0(s0)
;     uint_impl! {
8022eb70: 23 3c b4 f4  	sd	a1, -0xa8(s0)
;     pub const unsafe fn add(self, count: usize) -> Self
8022eb74: 23 30 b4 f6  	sd	a1, -0xa0(s0)
8022eb78: 23 38 a4 f8  	sd	a0, -0x70(s0)
;                     if is_empty!(self) {
8022eb7c: 09 a0        	j	0x8022eb7e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE+0x20>
8022eb7e: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                     if is_empty!(self) {
8022eb82: 93 05 85 00  	addi	a1, a0, 0x8
8022eb86: 23 3c b4 f8  	sd	a1, -0x68(s0)
8022eb8a: 0c 65        	ld	a1, 0x8(a0)
8022eb8c: 23 3c b4 f6  	sd	a1, -0x88(s0)
8022eb90: 23 30 a4 fa  	sd	a0, -0x60(s0)
8022eb94: 93 05 84 f7  	addi	a1, s0, -0x88
8022eb98: 23 34 b4 fa  	sd	a1, -0x58(s0)
;         self.as_ptr() == other.as_ptr()
8022eb9c: 08 61        	ld	a0, 0x0(a0)
8022eb9e: 23 38 a4 fa  	sd	a0, -0x50(s0)
8022eba2: 83 35 84 f7  	ld	a1, -0x88(s0)
8022eba6: 23 3c b4 fa  	sd	a1, -0x48(s0)
8022ebaa: 2d 8d        	xor	a0, a0, a1
8022ebac: 13 35 15 00  	seqz	a0, a0
8022ebb0: a3 0b a4 f6  	sb	a0, -0x89(s0)
;                     if is_empty!(self) {
8022ebb4: 09 a0        	j	0x8022ebb6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE+0x58>
8022ebb6: 03 45 74 f7  	lbu	a0, -0x89(s0)
8022ebba: 05 89        	andi	a0, a0, 0x1
8022ebbc: 01 e9        	bnez	a0, 0x8022ebcc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE+0x6e>
8022ebbe: 09 a0        	j	0x8022ebc0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE+0x62>
8022ebc0: 03 35 84 f4  	ld	a0, -0xb8(s0)
;                 let old = self.ptr;
8022ebc4: 08 61        	ld	a0, 0x0(a0)
8022ebc6: 23 30 a4 f8  	sd	a0, -0x80(s0)
;                     if_zst!(mut self,
8022ebca: 29 a0        	j	0x8022ebd4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE+0x76>
8022ebcc: 01 45        	li	a0, 0x0
;                         None
8022ebce: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8022ebd2: 81 a0        	j	0x8022ec12 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE+0xb4>
8022ebd4: 83 35 84 f4  	ld	a1, -0xb8(s0)
;                     if_zst!(mut self,
8022ebd8: 13 85 85 00  	addi	a0, a1, 0x8
8022ebdc: 23 30 a4 fc  	sd	a0, -0x40(s0)
;         self as _
8022ebe0: 23 34 a4 fc  	sd	a0, -0x38(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8022ebe4: 88 61        	ld	a0, 0x0(a1)
8022ebe6: 23 38 a4 fc  	sd	a0, -0x30(s0)
;         unsafe { NonNull { pointer: intrinsics::offset(self.pointer, count) } }
8022ebea: 05 05        	addi	a0, a0, 0x1
8022ebec: 23 34 a4 f8  	sd	a0, -0x78(s0)
;                         _end => self.ptr = self.ptr.add(offset),
8022ebf0: 03 35 84 f8  	ld	a0, -0x78(s0)
8022ebf4: 88 e1        	sd	a0, 0x0(a1)
;                     if_zst!(mut self,
8022ebf6: 09 a0        	j	0x8022ebf8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE+0x9a>
8022ebf8: 13 05 04 f8  	addi	a0, s0, -0x80
;                         Some(next_unchecked!(self))
8022ebfc: 23 3c a4 fc  	sd	a0, -0x28(s0)
;         unsafe { &*self.as_ptr().cast_const() }
8022ec00: 03 35 04 f8  	ld	a0, -0x80(s0)
8022ec04: 23 30 a4 fe  	sd	a0, -0x20(s0)
;         self.pointer as *mut T
8022ec08: 23 34 a4 fe  	sd	a0, -0x18(s0)
;                         Some(next_unchecked!(self))
8022ec0c: 23 34 a4 f6  	sd	a0, -0x98(s0)
;                     if is_empty!(self) {
8022ec10: 09 a0        	j	0x8022ec12 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc6fa63398dc48e6aE+0xb4>
;             }
8022ec12: 03 35 84 f6  	ld	a0, -0x98(s0)
8022ec16: ea 70        	ld	ra, 0xb8(sp)
8022ec18: 4a 74        	ld	s0, 0xb0(sp)
8022ec1a: 29 61        	addi	sp, sp, 0xc0
8022ec1c: 82 80        	ret

000000008022ec1e <_ZN60_$LT$alloc..string..String$u20$as$u20$core..clone..Clone$GT$5clone17h43b2a3c1a6b05605E>:
8022ec1e: 79 71        	addi	sp, sp, -0x30
8022ec20: 06 f4        	sd	ra, 0x28(sp)
8022ec22: 22 f0        	sd	s0, 0x20(sp)
8022ec24: 26 ec        	sd	s1, 0x18(sp)
8022ec26: 4a e8        	sd	s2, 0x10(sp)
8022ec28: 4e e4        	sd	s3, 0x8(sp)
8022ec2a: 80 69        	ld	s0, 0x10(a1)
8022ec2c: 03 b9 85 00  	ld	s2, 0x8(a1)
8022ec30: aa 89        	mv	s3, a0
8022ec32: 05 c0        	beqz	s0, 0x8022ec52 <.Lpcrel_hi7+0x1a>
8022ec34: 63 44 04 04  	bltz	s0, 0x8022ec7c <.Lpcrel_hi7+0x44>

000000008022ec38 <.Lpcrel_hi7>:
8022ec38: 17 d5 31 00  	auipc	a0, 0x31d
8022ec3c: 03 40 15 7a  	lbu	zero, 0x7a1(a0)
8022ec40: 85 45        	li	a1, 0x1
8022ec42: 22 85        	mv	a0, s0
8022ec44: 97 d0 fd ff  	auipc	ra, 0xfffdd
8022ec48: e7 80 40 9f  	jalr	-0x60c(ra) <ekernel+0xffcbe638>
8022ec4c: 05 cd        	beqz	a0, 0x8022ec84 <.Lpcrel_hi7+0x4c>
8022ec4e: aa 84        	mv	s1, a0
8022ec50: 11 a0        	j	0x8022ec54 <.Lpcrel_hi7+0x1c>
8022ec52: 85 44        	li	s1, 0x1
8022ec54: 26 85        	mv	a0, s1
8022ec56: ca 85        	mv	a1, s2
8022ec58: 22 86        	mv	a2, s0
8022ec5a: 97 30 00 00  	auipc	ra, 0x3
8022ec5e: e7 80 40 01  	jalr	0x14(ra) <memcpy>
8022ec62: 23 b0 89 00  	sd	s0, 0x0(s3)
8022ec66: 23 b4 99 00  	sd	s1, 0x8(s3)
8022ec6a: 23 b8 89 00  	sd	s0, 0x10(s3)
8022ec6e: a2 70        	ld	ra, 0x28(sp)
8022ec70: 02 74        	ld	s0, 0x20(sp)
8022ec72: e2 64        	ld	s1, 0x18(sp)
8022ec74: 42 69        	ld	s2, 0x10(sp)
8022ec76: a2 69        	ld	s3, 0x8(sp)
8022ec78: 45 61        	addi	sp, sp, 0x30
8022ec7a: 82 80        	ret
8022ec7c: 97 00 00 00  	auipc	ra, 0x0
8022ec80: e7 80 00 06  	jalr	0x60(ra) <_ZN5alloc7raw_vec17capacity_overflow17h2dbe2fc7824cfb2aE>
8022ec84: 05 45        	li	a0, 0x1
8022ec86: a2 85        	mv	a1, s0
8022ec88: 97 00 00 00  	auipc	ra, 0x0
8022ec8c: e7 80 80 00  	jalr	0x8(ra) <_ZN5alloc5alloc18handle_alloc_error17h82a5a817f63685d8E>

000000008022ec90 <_ZN5alloc5alloc18handle_alloc_error17h82a5a817f63685d8E>:
8022ec90: 2a 86        	mv	a2, a0
8022ec92: 2e 85        	mv	a0, a1
8022ec94: b2 85        	mv	a1, a2
8022ec96: 97 b0 fe ff  	auipc	ra, 0xfffeb
8022ec9a: e7 80 60 e1  	jalr	-0x1ea(ra) <ekernel+0xffcccaac>

000000008022ec9e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6remove13assert_failed17h6abd3d52231cda7aE>:
8022ec9e: 1d 71        	addi	sp, sp, -0x60
8022eca0: 2a e0        	sd	a0, 0x0(sp)
8022eca2: 2e e4        	sd	a1, 0x8(sp)
8022eca4: 0a 85        	mv	a0, sp
8022eca6: aa e0        	sd	a0, 0x40(sp)

000000008022eca8 <.Lpcrel_hi4>:
8022eca8: 17 25 00 00  	auipc	a0, 0x2
8022ecac: 13 05 65 3e  	addi	a0, a0, 0x3e6
8022ecb0: aa e4        	sd	a0, 0x48(sp)
8022ecb2: 2c 00        	addi	a1, sp, 0x8
8022ecb4: ae e8        	sd	a1, 0x50(sp)
8022ecb6: aa ec        	sd	a0, 0x58(sp)

000000008022ecb8 <.Lpcrel_hi5>:
8022ecb8: 17 d5 00 00  	auipc	a0, 0xd
8022ecbc: 13 05 05 c1  	addi	a0, a0, -0x3f0
8022ecc0: 2a e8        	sd	a0, 0x10(sp)
8022ecc2: 0d 45        	li	a0, 0x3
8022ecc4: 2a ec        	sd	a0, 0x18(sp)
8022ecc6: 02 f8        	sd	zero, 0x30(sp)
8022ecc8: 88 00        	addi	a0, sp, 0x40
8022ecca: 2a f0        	sd	a0, 0x20(sp)
8022eccc: 09 45        	li	a0, 0x2
8022ecce: 2a f4        	sd	a0, 0x28(sp)
8022ecd0: 08 08        	addi	a0, sp, 0x10
8022ecd2: b2 85        	mv	a1, a2
8022ecd4: 97 10 00 00  	auipc	ra, 0x1
8022ecd8: e7 80 40 4d  	jalr	0x4d4(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022ecdc <_ZN5alloc7raw_vec17capacity_overflow17h2dbe2fc7824cfb2aE>:
8022ecdc: 79 71        	addi	sp, sp, -0x30

000000008022ecde <.Lpcrel_hi0>:
8022ecde: 17 d5 00 00  	auipc	a0, 0xd
8022ece2: 13 05 25 c3  	addi	a0, a0, -0x3ce
8022ece6: 2a e0        	sd	a0, 0x0(sp)
8022ece8: 05 45        	li	a0, 0x1
8022ecea: 2a e4        	sd	a0, 0x8(sp)
8022ecec: 02 f0        	sd	zero, 0x20(sp)

000000008022ecee <.Lpcrel_hi1>:
8022ecee: 17 d5 00 00  	auipc	a0, 0xd
8022ecf2: 13 05 a5 c0  	addi	a0, a0, -0x3f6
8022ecf6: 2a e8        	sd	a0, 0x10(sp)
8022ecf8: 02 ec        	sd	zero, 0x18(sp)

000000008022ecfa <.Lpcrel_hi2>:
8022ecfa: 17 d5 00 00  	auipc	a0, 0xd
8022ecfe: 93 05 e5 c9  	addi	a1, a0, -0x362
8022ed02: 0a 85        	mv	a0, sp
8022ed04: 97 10 00 00  	auipc	ra, 0x1
8022ed08: e7 80 40 4a  	jalr	0x4a4(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008022ed0c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h7332f3b1315002d6E>:
8022ed0c: 75 71        	addi	sp, sp, -0x90
8022ed0e: 06 e5        	sd	ra, 0x88(sp)
8022ed10: 03 45 05 00  	lbu	a0, 0x0(a0)
8022ed14: 2e 88        	mv	a6, a1
8022ed16: 81 47        	li	a5, 0x0
8022ed18: 30 01        	addi	a2, sp, 0x88
8022ed1a: a9 45        	li	a1, 0xa
8022ed1c: 21 a8        	j	0x8022ed34 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h7332f3b1315002d6E+0x28>
8022ed1e: 93 86 76 05  	addi	a3, a3, 0x57
8022ed22: 13 07 f6 ff  	addi	a4, a2, -0x1
8022ed26: 62 15        	slli	a0, a0, 0x38
8022ed28: 71 91        	srli	a0, a0, 0x3c
8022ed2a: a3 0f d6 fe  	sb	a3, -0x1(a2)
8022ed2e: 85 07        	addi	a5, a5, 0x1
8022ed30: 3a 86        	mv	a2, a4
8022ed32: 01 c9        	beqz	a0, 0x8022ed42 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h7332f3b1315002d6E+0x36>
8022ed34: 93 76 f5 00  	andi	a3, a0, 0xf
8022ed38: e3 f3 b6 fe  	bgeu	a3, a1, 0x8022ed1e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h7332f3b1315002d6E+0x12>
8022ed3c: 93 86 06 03  	addi	a3, a3, 0x30
8022ed40: cd b7        	j	0x8022ed22 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h7332f3b1315002d6E+0x16>
8022ed42: 93 05 00 08  	li	a1, 0x80
8022ed46: 33 85 f5 40  	sub	a0, a1, a5
8022ed4a: 63 e0 a5 02  	bltu	a1, a0, 0x8022ed6a <.Lpcrel_hi39>

000000008022ed4e <.Lpcrel_hi40>:
8022ed4e: 17 d5 00 00  	auipc	a0, 0xd
8022ed52: 13 06 a5 ce  	addi	a2, a0, -0x316
8022ed56: 85 45        	li	a1, 0x1
8022ed58: 89 46        	li	a3, 0x2
8022ed5a: 42 85        	mv	a0, a6
8022ed5c: 97 10 00 00  	auipc	ra, 0x1
8022ed60: e7 80 20 87  	jalr	-0x78e(ra) <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E>
8022ed64: aa 60        	ld	ra, 0x88(sp)
8022ed66: 49 61        	addi	sp, sp, 0x90
8022ed68: 82 80        	ret

000000008022ed6a <.Lpcrel_hi39>:
8022ed6a: 97 d5 00 00  	auipc	a1, 0xd
8022ed6e: 13 86 65 cb  	addi	a2, a1, -0x34a
8022ed72: 93 05 00 08  	li	a1, 0x80
8022ed76: 97 30 00 00  	auipc	ra, 0x3
8022ed7a: e7 80 60 8e  	jalr	-0x71a(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022ed7e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17haa0c736f7a89de33E>:
8022ed7e: 75 71        	addi	sp, sp, -0x90
8022ed80: 06 e5        	sd	ra, 0x88(sp)
8022ed82: 03 45 05 00  	lbu	a0, 0x0(a0)
8022ed86: 2e 88        	mv	a6, a1
8022ed88: 81 47        	li	a5, 0x0
8022ed8a: 30 01        	addi	a2, sp, 0x88
8022ed8c: a9 45        	li	a1, 0xa
8022ed8e: 21 a8        	j	0x8022eda6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17haa0c736f7a89de33E+0x28>
8022ed90: 93 86 76 03  	addi	a3, a3, 0x37
8022ed94: 13 07 f6 ff  	addi	a4, a2, -0x1
8022ed98: 62 15        	slli	a0, a0, 0x38
8022ed9a: 71 91        	srli	a0, a0, 0x3c
8022ed9c: a3 0f d6 fe  	sb	a3, -0x1(a2)
8022eda0: 85 07        	addi	a5, a5, 0x1
8022eda2: 3a 86        	mv	a2, a4
8022eda4: 01 c9        	beqz	a0, 0x8022edb4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17haa0c736f7a89de33E+0x36>
8022eda6: 93 76 f5 00  	andi	a3, a0, 0xf
8022edaa: e3 f3 b6 fe  	bgeu	a3, a1, 0x8022ed90 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17haa0c736f7a89de33E+0x12>
8022edae: 93 86 06 03  	addi	a3, a3, 0x30
8022edb2: cd b7        	j	0x8022ed94 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17haa0c736f7a89de33E+0x16>
8022edb4: 93 05 00 08  	li	a1, 0x80
8022edb8: 33 85 f5 40  	sub	a0, a1, a5
8022edbc: 63 e0 a5 02  	bltu	a1, a0, 0x8022eddc <.Lpcrel_hi41>

000000008022edc0 <.Lpcrel_hi42>:
8022edc0: 17 d5 00 00  	auipc	a0, 0xd
8022edc4: 13 06 85 c7  	addi	a2, a0, -0x388
8022edc8: 85 45        	li	a1, 0x1
8022edca: 89 46        	li	a3, 0x2
8022edcc: 42 85        	mv	a0, a6
8022edce: 97 10 00 00  	auipc	ra, 0x1
8022edd2: e7 80 00 80  	jalr	-0x800(ra) <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E>
8022edd6: aa 60        	ld	ra, 0x88(sp)
8022edd8: 49 61        	addi	sp, sp, 0x90
8022edda: 82 80        	ret

000000008022eddc <.Lpcrel_hi41>:
8022eddc: 97 d5 00 00  	auipc	a1, 0xd
8022ede0: 13 86 45 c4  	addi	a2, a1, -0x3bc
8022ede4: 93 05 00 08  	li	a1, 0x80
8022ede8: 97 30 00 00  	auipc	ra, 0x3
8022edec: e7 80 40 87  	jalr	-0x78c(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022edf0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hd5cf8571588553cdE>:
8022edf0: 75 71        	addi	sp, sp, -0x90
8022edf2: 06 e5        	sd	ra, 0x88(sp)
8022edf4: 03 55 05 00  	lhu	a0, 0x0(a0)
8022edf8: 2e 88        	mv	a6, a1
8022edfa: 81 47        	li	a5, 0x0
8022edfc: 30 01        	addi	a2, sp, 0x88
8022edfe: a9 45        	li	a1, 0xa
8022ee00: 21 a8        	j	0x8022ee18 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hd5cf8571588553cdE+0x28>
8022ee02: 93 86 76 05  	addi	a3, a3, 0x57
8022ee06: 13 07 f6 ff  	addi	a4, a2, -0x1
8022ee0a: 42 15        	slli	a0, a0, 0x30
8022ee0c: 51 91        	srli	a0, a0, 0x34
8022ee0e: a3 0f d6 fe  	sb	a3, -0x1(a2)
8022ee12: 85 07        	addi	a5, a5, 0x1
8022ee14: 3a 86        	mv	a2, a4
8022ee16: 01 c9        	beqz	a0, 0x8022ee26 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hd5cf8571588553cdE+0x36>
8022ee18: 93 76 f5 00  	andi	a3, a0, 0xf
8022ee1c: e3 f3 b6 fe  	bgeu	a3, a1, 0x8022ee02 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hd5cf8571588553cdE+0x12>
8022ee20: 93 86 06 03  	addi	a3, a3, 0x30
8022ee24: cd b7        	j	0x8022ee06 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hd5cf8571588553cdE+0x16>
8022ee26: 93 05 00 08  	li	a1, 0x80
8022ee2a: 33 85 f5 40  	sub	a0, a1, a5
8022ee2e: 63 e0 a5 02  	bltu	a1, a0, 0x8022ee4e <.Lpcrel_hi47>

000000008022ee32 <.Lpcrel_hi48>:
8022ee32: 17 d5 00 00  	auipc	a0, 0xd
8022ee36: 13 06 65 c0  	addi	a2, a0, -0x3fa
8022ee3a: 85 45        	li	a1, 0x1
8022ee3c: 89 46        	li	a3, 0x2
8022ee3e: 42 85        	mv	a0, a6
8022ee40: 97 00 00 00  	auipc	ra, 0x0
8022ee44: e7 80 e0 78  	jalr	0x78e(ra) <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E>
8022ee48: aa 60        	ld	ra, 0x88(sp)
8022ee4a: 49 61        	addi	sp, sp, 0x90
8022ee4c: 82 80        	ret

000000008022ee4e <.Lpcrel_hi47>:
8022ee4e: 97 d5 00 00  	auipc	a1, 0xd
8022ee52: 13 86 25 bd  	addi	a2, a1, -0x42e
8022ee56: 93 05 00 08  	li	a1, 0x80
8022ee5a: 97 30 00 00  	auipc	ra, 0x3
8022ee5e: e7 80 20 80  	jalr	-0x7fe(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022ee62 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hef912459862fd0f7E>:
8022ee62: 75 71        	addi	sp, sp, -0x90
8022ee64: 06 e5        	sd	ra, 0x88(sp)
8022ee66: 03 55 05 00  	lhu	a0, 0x0(a0)
8022ee6a: 2e 88        	mv	a6, a1
8022ee6c: 81 47        	li	a5, 0x0
8022ee6e: 30 01        	addi	a2, sp, 0x88
8022ee70: a9 45        	li	a1, 0xa
8022ee72: 21 a8        	j	0x8022ee8a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hef912459862fd0f7E+0x28>
8022ee74: 93 86 76 03  	addi	a3, a3, 0x37
8022ee78: 13 07 f6 ff  	addi	a4, a2, -0x1
8022ee7c: 42 15        	slli	a0, a0, 0x30
8022ee7e: 51 91        	srli	a0, a0, 0x34
8022ee80: a3 0f d6 fe  	sb	a3, -0x1(a2)
8022ee84: 85 07        	addi	a5, a5, 0x1
8022ee86: 3a 86        	mv	a2, a4
8022ee88: 01 c9        	beqz	a0, 0x8022ee98 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hef912459862fd0f7E+0x36>
8022ee8a: 93 76 f5 00  	andi	a3, a0, 0xf
8022ee8e: e3 f3 b6 fe  	bgeu	a3, a1, 0x8022ee74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hef912459862fd0f7E+0x12>
8022ee92: 93 86 06 03  	addi	a3, a3, 0x30
8022ee96: cd b7        	j	0x8022ee78 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hef912459862fd0f7E+0x16>
8022ee98: 93 05 00 08  	li	a1, 0x80
8022ee9c: 33 85 f5 40  	sub	a0, a1, a5
8022eea0: 63 e0 a5 02  	bltu	a1, a0, 0x8022eec0 <.Lpcrel_hi49>

000000008022eea4 <.Lpcrel_hi50>:
8022eea4: 17 d5 00 00  	auipc	a0, 0xd
8022eea8: 13 06 45 b9  	addi	a2, a0, -0x46c
8022eeac: 85 45        	li	a1, 0x1
8022eeae: 89 46        	li	a3, 0x2
8022eeb0: 42 85        	mv	a0, a6
8022eeb2: 97 00 00 00  	auipc	ra, 0x0
8022eeb6: e7 80 c0 71  	jalr	0x71c(ra) <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E>
8022eeba: aa 60        	ld	ra, 0x88(sp)
8022eebc: 49 61        	addi	sp, sp, 0x90
8022eebe: 82 80        	ret

000000008022eec0 <.Lpcrel_hi49>:
8022eec0: 97 d5 00 00  	auipc	a1, 0xd
8022eec4: 13 86 05 b6  	addi	a2, a1, -0x4a0
8022eec8: 93 05 00 08  	li	a1, 0x80
8022eecc: 97 20 00 00  	auipc	ra, 0x2
8022eed0: e7 80 00 79  	jalr	0x790(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022eed4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h933c609d9d935718E>:
8022eed4: 75 71        	addi	sp, sp, -0x90
8022eed6: 06 e5        	sd	ra, 0x88(sp)
8022eed8: 08 41        	lw	a0, 0x0(a0)
8022eeda: 2e 88        	mv	a6, a1
8022eedc: 81 47        	li	a5, 0x0
8022eede: 30 01        	addi	a2, sp, 0x88
8022eee0: a9 45        	li	a1, 0xa
8022eee2: 21 a8        	j	0x8022eefa <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h933c609d9d935718E+0x26>
8022eee4: 93 86 76 05  	addi	a3, a3, 0x57
8022eee8: 13 07 f6 ff  	addi	a4, a2, -0x1
8022eeec: 1b 55 45 00  	srliw	a0, a0, 0x4
8022eef0: a3 0f d6 fe  	sb	a3, -0x1(a2)
8022eef4: 85 07        	addi	a5, a5, 0x1
8022eef6: 3a 86        	mv	a2, a4
8022eef8: 01 c9        	beqz	a0, 0x8022ef08 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h933c609d9d935718E+0x34>
8022eefa: 93 76 f5 00  	andi	a3, a0, 0xf
8022eefe: e3 f3 b6 fe  	bgeu	a3, a1, 0x8022eee4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h933c609d9d935718E+0x10>
8022ef02: 93 86 06 03  	addi	a3, a3, 0x30
8022ef06: cd b7        	j	0x8022eee8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h933c609d9d935718E+0x14>
8022ef08: 93 05 00 08  	li	a1, 0x80
8022ef0c: 33 85 f5 40  	sub	a0, a1, a5
8022ef10: 63 e0 a5 02  	bltu	a1, a0, 0x8022ef30 <.Lpcrel_hi55>

000000008022ef14 <.Lpcrel_hi56>:
8022ef14: 17 d5 00 00  	auipc	a0, 0xd
8022ef18: 13 06 45 b2  	addi	a2, a0, -0x4dc
8022ef1c: 85 45        	li	a1, 0x1
8022ef1e: 89 46        	li	a3, 0x2
8022ef20: 42 85        	mv	a0, a6
8022ef22: 97 00 00 00  	auipc	ra, 0x0
8022ef26: e7 80 c0 6a  	jalr	0x6ac(ra) <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E>
8022ef2a: aa 60        	ld	ra, 0x88(sp)
8022ef2c: 49 61        	addi	sp, sp, 0x90
8022ef2e: 82 80        	ret

000000008022ef30 <.Lpcrel_hi55>:
8022ef30: 97 d5 00 00  	auipc	a1, 0xd
8022ef34: 13 86 05 af  	addi	a2, a1, -0x510
8022ef38: 93 05 00 08  	li	a1, 0x80
8022ef3c: 97 20 00 00  	auipc	ra, 0x2
8022ef40: e7 80 00 72  	jalr	0x720(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022ef44 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hed31c89a7b8664afE>:
8022ef44: 75 71        	addi	sp, sp, -0x90
8022ef46: 06 e5        	sd	ra, 0x88(sp)
8022ef48: 08 41        	lw	a0, 0x0(a0)
8022ef4a: 2e 88        	mv	a6, a1
8022ef4c: 81 47        	li	a5, 0x0
8022ef4e: 30 01        	addi	a2, sp, 0x88
8022ef50: a9 45        	li	a1, 0xa
8022ef52: 21 a8        	j	0x8022ef6a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hed31c89a7b8664afE+0x26>
8022ef54: 93 86 76 03  	addi	a3, a3, 0x37
8022ef58: 13 07 f6 ff  	addi	a4, a2, -0x1
8022ef5c: 1b 55 45 00  	srliw	a0, a0, 0x4
8022ef60: a3 0f d6 fe  	sb	a3, -0x1(a2)
8022ef64: 85 07        	addi	a5, a5, 0x1
8022ef66: 3a 86        	mv	a2, a4
8022ef68: 01 c9        	beqz	a0, 0x8022ef78 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hed31c89a7b8664afE+0x34>
8022ef6a: 93 76 f5 00  	andi	a3, a0, 0xf
8022ef6e: e3 f3 b6 fe  	bgeu	a3, a1, 0x8022ef54 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hed31c89a7b8664afE+0x10>
8022ef72: 93 86 06 03  	addi	a3, a3, 0x30
8022ef76: cd b7        	j	0x8022ef58 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hed31c89a7b8664afE+0x14>
8022ef78: 93 05 00 08  	li	a1, 0x80
8022ef7c: 33 85 f5 40  	sub	a0, a1, a5
8022ef80: 63 e0 a5 02  	bltu	a1, a0, 0x8022efa0 <.Lpcrel_hi57>

000000008022ef84 <.Lpcrel_hi58>:
8022ef84: 17 d5 00 00  	auipc	a0, 0xd
8022ef88: 13 06 45 ab  	addi	a2, a0, -0x54c
8022ef8c: 85 45        	li	a1, 0x1
8022ef8e: 89 46        	li	a3, 0x2
8022ef90: 42 85        	mv	a0, a6
8022ef92: 97 00 00 00  	auipc	ra, 0x0
8022ef96: e7 80 c0 63  	jalr	0x63c(ra) <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E>
8022ef9a: aa 60        	ld	ra, 0x88(sp)
8022ef9c: 49 61        	addi	sp, sp, 0x90
8022ef9e: 82 80        	ret

000000008022efa0 <.Lpcrel_hi57>:
8022efa0: 97 d5 00 00  	auipc	a1, 0xd
8022efa4: 13 86 05 a8  	addi	a2, a1, -0x580
8022efa8: 93 05 00 08  	li	a1, 0x80
8022efac: 97 20 00 00  	auipc	ra, 0x2
8022efb0: e7 80 00 6b  	jalr	0x6b0(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022efb4 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E>:
8022efb4: 75 71        	addi	sp, sp, -0x90
8022efb6: 06 e5        	sd	ra, 0x88(sp)
8022efb8: 08 61        	ld	a0, 0x0(a0)
8022efba: 2e 88        	mv	a6, a1
8022efbc: 81 47        	li	a5, 0x0
8022efbe: 30 01        	addi	a2, sp, 0x88
8022efc0: a9 45        	li	a1, 0xa
8022efc2: 19 a8        	j	0x8022efd8 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E+0x24>
8022efc4: 93 86 76 05  	addi	a3, a3, 0x57
8022efc8: 13 07 f6 ff  	addi	a4, a2, -0x1
8022efcc: 11 81        	srli	a0, a0, 0x4
8022efce: a3 0f d6 fe  	sb	a3, -0x1(a2)
8022efd2: 85 07        	addi	a5, a5, 0x1
8022efd4: 3a 86        	mv	a2, a4
8022efd6: 01 c9        	beqz	a0, 0x8022efe6 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E+0x32>
8022efd8: 93 76 f5 00  	andi	a3, a0, 0xf
8022efdc: e3 f4 b6 fe  	bgeu	a3, a1, 0x8022efc4 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E+0x10>
8022efe0: 93 86 06 03  	addi	a3, a3, 0x30
8022efe4: d5 b7        	j	0x8022efc8 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h80279df3f7dd0d18E+0x14>
8022efe6: 93 05 00 08  	li	a1, 0x80
8022efea: 33 85 f5 40  	sub	a0, a1, a5
8022efee: 63 e0 a5 02  	bltu	a1, a0, 0x8022f00e <.Lpcrel_hi63>

000000008022eff2 <.Lpcrel_hi64>:
8022eff2: 17 d5 00 00  	auipc	a0, 0xd
8022eff6: 13 06 65 a4  	addi	a2, a0, -0x5ba
8022effa: 85 45        	li	a1, 0x1
8022effc: 89 46        	li	a3, 0x2
8022effe: 42 85        	mv	a0, a6
8022f000: 97 00 00 00  	auipc	ra, 0x0
8022f004: e7 80 e0 5c  	jalr	0x5ce(ra) <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E>
8022f008: aa 60        	ld	ra, 0x88(sp)
8022f00a: 49 61        	addi	sp, sp, 0x90
8022f00c: 82 80        	ret

000000008022f00e <.Lpcrel_hi63>:
8022f00e: 97 d5 00 00  	auipc	a1, 0xd
8022f012: 13 86 25 a1  	addi	a2, a1, -0x5ee
8022f016: 93 05 00 08  	li	a1, 0x80
8022f01a: 97 20 00 00  	auipc	ra, 0x2
8022f01e: e7 80 20 64  	jalr	0x642(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022f022 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h035bce1319a3ef5cE>:
8022f022: 75 71        	addi	sp, sp, -0x90
8022f024: 06 e5        	sd	ra, 0x88(sp)
8022f026: 08 61        	ld	a0, 0x0(a0)
8022f028: 2e 88        	mv	a6, a1
8022f02a: 81 47        	li	a5, 0x0
8022f02c: 30 01        	addi	a2, sp, 0x88
8022f02e: a9 45        	li	a1, 0xa
8022f030: 19 a8        	j	0x8022f046 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h035bce1319a3ef5cE+0x24>
8022f032: 93 86 76 03  	addi	a3, a3, 0x37
8022f036: 13 07 f6 ff  	addi	a4, a2, -0x1
8022f03a: 11 81        	srli	a0, a0, 0x4
8022f03c: a3 0f d6 fe  	sb	a3, -0x1(a2)
8022f040: 85 07        	addi	a5, a5, 0x1
8022f042: 3a 86        	mv	a2, a4
8022f044: 01 c9        	beqz	a0, 0x8022f054 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h035bce1319a3ef5cE+0x32>
8022f046: 93 76 f5 00  	andi	a3, a0, 0xf
8022f04a: e3 f4 b6 fe  	bgeu	a3, a1, 0x8022f032 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h035bce1319a3ef5cE+0x10>
8022f04e: 93 86 06 03  	addi	a3, a3, 0x30
8022f052: d5 b7        	j	0x8022f036 <_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h035bce1319a3ef5cE+0x14>
8022f054: 93 05 00 08  	li	a1, 0x80
8022f058: 33 85 f5 40  	sub	a0, a1, a5
8022f05c: 63 e0 a5 02  	bltu	a1, a0, 0x8022f07c <.Lpcrel_hi65>

000000008022f060 <.Lpcrel_hi66>:
8022f060: 17 d5 00 00  	auipc	a0, 0xd
8022f064: 13 06 85 9d  	addi	a2, a0, -0x628
8022f068: 85 45        	li	a1, 0x1
8022f06a: 89 46        	li	a3, 0x2
8022f06c: 42 85        	mv	a0, a6
8022f06e: 97 00 00 00  	auipc	ra, 0x0
8022f072: e7 80 00 56  	jalr	0x560(ra) <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E>
8022f076: aa 60        	ld	ra, 0x88(sp)
8022f078: 49 61        	addi	sp, sp, 0x90
8022f07a: 82 80        	ret

000000008022f07c <.Lpcrel_hi65>:
8022f07c: 97 d5 00 00  	auipc	a1, 0xd
8022f080: 13 86 45 9a  	addi	a2, a1, -0x65c
8022f084: 93 05 00 08  	li	a1, 0x80
8022f088: 97 20 00 00  	auipc	ra, 0x2
8022f08c: e7 80 40 5d  	jalr	0x5d4(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022f090 <_ZN4core3ptr52drop_in_place$LT$core..fmt..builders..PadAdapter$GT$17hd4674cdd55b28151E.llvm.7827431036748061175>:
8022f090: 82 80        	ret

000000008022f092 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17h9c450fa638f5a388E>:
8022f092: 79 71        	addi	sp, sp, -0x30
8022f094: 06 f4        	sd	ra, 0x28(sp)
8022f096: 22 f0        	sd	s0, 0x20(sp)
8022f098: 26 ec        	sd	s1, 0x18(sp)
8022f09a: 9b 86 05 00  	sext.w	a3, a1
8022f09e: 13 07 70 02  	li	a4, 0x27
8022f0a2: 63 6f d7 00  	bltu	a4, a3, 0x8022f0c0 <.LBB1_2+0x8>
8022f0a6: 13 97 36 00  	slli	a4, a3, 0x3

000000008022f0aa <.Lpcrel_hi0>:
8022f0aa: 97 d7 00 00  	auipc	a5, 0xd
8022f0ae: 93 87 e7 a5  	addi	a5, a5, -0x5a2
8022f0b2: 3e 97        	add	a4, a4, a5
8022f0b4: 18 63        	ld	a4, 0x0(a4)
8022f0b6: 02 87        	jr	a4

000000008022f0b8 <.LBB1_2>:
8022f0b8: 8d 65        	lui	a1, 0x3
8022f0ba: 93 85 c5 05  	addi	a1, a1, 0x5c
8022f0be: 0d a6        	j	0x8022f3e0 <.Lpcrel_hi6+0x64>
8022f0c0: 13 07 c0 05  	li	a4, 0x5c
8022f0c4: 63 96 e6 00  	bne	a3, a4, 0x8022f0d0 <.LBB1_5>
8022f0c8: 99 65        	lui	a1, 0x6
8022f0ca: 93 85 c5 c5  	addi	a1, a1, -0x3a4
8022f0ce: 09 ae        	j	0x8022f3e0 <.Lpcrel_hi6+0x64>

000000008022f0d0 <.LBB1_5>:
8022f0d0: 13 07 00 08  	li	a4, 0x80
8022f0d4: 63 ed e6 18  	bltu	a3, a4, 0x8022f26e <.LBB1_15+0x6>
8022f0d8: 05 8a        	andi	a2, a2, 0x1
8022f0da: 63 0a 06 18  	beqz	a2, 0x8022f26e <.LBB1_15+0x6>
8022f0de: 2a 84        	mv	s0, a0
8022f0e0: 2e 85        	mv	a0, a1
8022f0e2: ae 84        	mv	s1, a1
8022f0e4: 97 20 00 00  	auipc	ra, 0x2
8022f0e8: e7 80 a0 fc  	jalr	-0x36(ra) <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h9ee555fd8386e57cE>
8022f0ec: a6 85        	mv	a1, s1
8022f0ee: 2a 86        	mv	a2, a0
8022f0f0: 22 85        	mv	a0, s0
8022f0f2: 63 0e 06 16  	beqz	a2, 0x8022f26e <.LBB1_15+0x6>
8022f0f6: 13 96 85 02  	slli	a2, a1, 0x28
8022f0fa: 71 92        	srli	a2, a2, 0x3c

000000008022f0fc <.Lpcrel_hi1>:
8022f0fc: 97 46 00 00  	auipc	a3, 0x4
8022f100: 93 86 46 1b  	addi	a3, a3, 0x1b4
8022f104: 36 96        	add	a2, a2, a3
8022f106: 03 46 06 00  	lbu	a2, 0x0(a2)
8022f10a: 13 07 d0 07  	li	a4, 0x7d
8022f10e: a3 0b e1 00  	sb	a4, 0x17(sp)
8022f112: a3 08 c1 00  	sb	a2, 0x11(sp)
8022f116: 13 96 c5 02  	slli	a2, a1, 0x2c
8022f11a: 71 92        	srli	a2, a2, 0x3c
8022f11c: 36 96        	add	a2, a2, a3
8022f11e: 03 46 06 00  	lbu	a2, 0x0(a2)
8022f122: 13 97 05 03  	slli	a4, a1, 0x30
8022f126: 71 93        	srli	a4, a4, 0x3c
8022f128: 36 97        	add	a4, a4, a3
8022f12a: 03 47 07 00  	lbu	a4, 0x0(a4)
8022f12e: 93 97 45 03  	slli	a5, a1, 0x34
8022f132: f1 93        	srli	a5, a5, 0x3c
8022f134: b6 97        	add	a5, a5, a3
8022f136: 83 c7 07 00  	lbu	a5, 0x0(a5)
8022f13a: 93 94 85 03  	slli	s1, a1, 0x38
8022f13e: f1 90        	srli	s1, s1, 0x3c
8022f140: b6 94        	add	s1, s1, a3
8022f142: 83 c4 04 00  	lbu	s1, 0x0(s1)
8022f146: 23 09 c1 00  	sb	a2, 0x12(sp)
8022f14a: a3 09 e1 00  	sb	a4, 0x13(sp)
8022f14e: 23 0a f1 00  	sb	a5, 0x14(sp)
8022f152: a3 0a 91 00  	sb	s1, 0x15(sp)
8022f156: 13 f6 f5 00  	andi	a2, a1, 0xf
8022f15a: 36 96        	add	a2, a2, a3
8022f15c: 9b d6 25 00  	srliw	a3, a1, 0x2
8022f160: 86 06        	slli	a3, a3, 0x1
8022f162: d5 8d        	or	a1, a1, a3
8022f164: 9b d6 35 00  	srliw	a3, a1, 0x3
8022f168: 86 06        	slli	a3, a3, 0x1
8022f16a: d5 8d        	or	a1, a1, a3
8022f16c: 9b d6 55 00  	srliw	a3, a1, 0x5
8022f170: 86 06        	slli	a3, a3, 0x1
8022f172: d5 8d        	or	a1, a1, a3
8022f174: 9b d6 95 00  	srliw	a3, a1, 0x9
8022f178: 86 06        	slli	a3, a3, 0x1
8022f17a: d5 8d        	or	a1, a1, a3
8022f17c: 9b d6 15 01  	srliw	a3, a1, 0x11
8022f180: 86 06        	slli	a3, a3, 0x1
8022f182: d5 8d        	or	a1, a1, a3
8022f184: 93 c5 f5 ff  	not	a1, a1
8022f188: 93 d6 15 00  	srli	a3, a1, 0x1
8022f18c: 37 57 55 55  	lui	a4, 0x55555
8022f190: 1b 07 57 55  	addiw	a4, a4, 0x555
8022f194: f9 8e        	and	a3, a3, a4
8022f196: f9 99        	andi	a1, a1, -0x2
8022f198: 95 8d        	sub	a1, a1, a3
8022f19a: b7 36 33 33  	lui	a3, 0x33333
8022f19e: 9b 86 36 33  	addiw	a3, a3, 0x333
8022f1a2: 33 f7 d5 00  	and	a4, a1, a3
8022f1a6: 89 81        	srli	a1, a1, 0x2
8022f1a8: f5 8d        	and	a1, a1, a3
8022f1aa: 23 08 01 00  	sb	zero, 0x10(sp)
8022f1ae: 23 17 01 00  	sh	zero, 0xe(sp)
8022f1b2: 03 46 06 00  	lbu	a2, 0x0(a2)
8022f1b6: ba 95        	add	a1, a1, a4
8022f1b8: 93 d6 45 00  	srli	a3, a1, 0x4
8022f1bc: b6 95        	add	a1, a1, a3
8022f1be: b7 16 0f 0f  	lui	a3, 0xf0f1
8022f1c2: 93 86 f6 f0  	addi	a3, a3, -0xf1
8022f1c6: f5 8d        	and	a1, a1, a3
8022f1c8: b7 06 01 01  	lui	a3, 0x1010
8022f1cc: 93 86 16 10  	addi	a3, a3, 0x101
8022f1d0: b3 85 d5 02  	mul	a1, a1, a3
8022f1d4: 9b d6 a5 01  	srliw	a3, a1, 0x1a
8022f1d8: f9 16        	addi	a3, a3, -0x2
8022f1da: ad 45        	li	a1, 0xb
8022f1dc: 23 0b c1 00  	sb	a2, 0x16(sp)
8022f1e0: 63 f9 b6 22  	bgeu	a3, a1, 0x8022f412 <.Lpcrel_hi2>
8022f1e4: 93 05 e1 00  	addi	a1, sp, 0xe

000000008022f1e8 <.Lpcrel_hi3>:
8022f1e8: 17 d6 00 00  	auipc	a2, 0xd
8022f1ec: 13 06 86 e3  	addi	a2, a2, -0x1c8
8022f1f0: 03 47 26 00  	lbu	a4, 0x2(a2)
8022f1f4: 83 47 16 00  	lbu	a5, 0x1(a2)
8022f1f8: 03 46 06 00  	lbu	a2, 0x0(a2)
8022f1fc: b6 95        	add	a1, a1, a3
8022f1fe: 23 81 e5 00  	sb	a4, 0x2(a1)
8022f202: a3 80 f5 00  	sb	a5, 0x1(a1)
8022f206: 23 80 c5 00  	sb	a2, 0x0(a1)
8022f20a: 83 55 01 01  	lhu	a1, 0x10(sp)
8022f20e: 03 56 e1 00  	lhu	a2, 0xe(sp)
8022f212: c2 05        	slli	a1, a1, 0x10
8022f214: 03 57 21 01  	lhu	a4, 0x12(sp)
8022f218: 83 57 41 01  	lhu	a5, 0x14(sp)
8022f21c: d1 8d        	or	a1, a1, a2
8022f21e: 03 56 61 01  	lhu	a2, 0x16(sp)
8022f222: 02 17        	slli	a4, a4, 0x20
8022f224: c2 17        	slli	a5, a5, 0x30
8022f226: 5d 8f        	or	a4, a4, a5
8022f228: 4d 8f        	or	a4, a4, a1
8022f22a: 3a e0        	sd	a4, 0x0(sp)
8022f22c: 12 47        	lw	a4, 0x4(sp)
8022f22e: 23 14 c1 00  	sh	a2, 0x8(sp)
8022f232: 23 14 c5 00  	sh	a2, 0x8(a0)
8022f236: 58 c1        	sw	a4, 0x4(a0)
8022f238: 0c c1        	sw	a1, 0x0(a0)
8022f23a: 23 05 d5 00  	sb	a3, 0xa(a0)
8022f23e: a9 45        	li	a1, 0xa
8022f240: a3 05 b5 00  	sb	a1, 0xb(a0)
8022f244: 4d aa        	j	0x8022f3f6 <.Lpcrel_hi6+0x7a>

000000008022f246 <.LBB1_10>:
8022f246: 9d 65        	lui	a1, 0x7
8022f248: 93 85 c5 e5  	addi	a1, a1, -0x1a4
8022f24c: 51 aa        	j	0x8022f3e0 <.Lpcrel_hi6+0x64>

000000008022f24e <.LBB1_11>:
8022f24e: 13 76 06 10  	andi	a2, a2, 0x100
8022f252: 11 ce        	beqz	a2, 0x8022f26e <.LBB1_15+0x6>
8022f254: 89 65        	lui	a1, 0x2
8022f256: 93 85 c5 75  	addi	a1, a1, 0x75c
8022f25a: 59 a2        	j	0x8022f3e0 <.Lpcrel_hi6+0x64>

000000008022f25c <.LBB1_13>:
8022f25c: 9d 65        	lui	a1, 0x7
8022f25e: bd aa        	j	0x8022f3dc <.Lpcrel_hi6+0x60>

000000008022f260 <.LBB1_14>:
8022f260: 9d 65        	lui	a1, 0x7
8022f262: 93 85 c5 45  	addi	a1, a1, 0x45c
8022f266: ad aa        	j	0x8022f3e0 <.Lpcrel_hi6+0x64>

000000008022f268 <.LBB1_15>:
8022f268: 3e 16        	slli	a2, a2, 0x2f
8022f26a: 63 48 06 16  	bltz	a2, 0x8022f3da <.Lpcrel_hi6+0x5e>
8022f26e: 2a 84        	mv	s0, a0
8022f270: ae 84        	mv	s1, a1
8022f272: 2e 85        	mv	a0, a1
8022f274: 97 20 00 00  	auipc	ra, 0x2
8022f278: e7 80 c0 2b  	jalr	0x2bc(ra) <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E>
8022f27c: 19 c5        	beqz	a0, 0x8022f28a <.LBB1_15+0x22>
8022f27e: 13 05 00 08  	li	a0, 0x80
8022f282: 23 00 a4 00  	sb	a0, 0x0(s0)
8022f286: 44 c0        	sw	s1, 0x4(s0)
8022f288: bd a2        	j	0x8022f3f6 <.Lpcrel_hi6+0x7a>
8022f28a: 13 95 84 02  	slli	a0, s1, 0x28
8022f28e: 71 91        	srli	a0, a0, 0x3c

000000008022f290 <.Lpcrel_hi4>:
8022f290: 97 45 00 00  	auipc	a1, 0x4
8022f294: 93 85 05 02  	addi	a1, a1, 0x20
8022f298: 2e 95        	add	a0, a0, a1
8022f29a: 03 45 05 00  	lbu	a0, 0x0(a0)
8022f29e: 13 06 d0 07  	li	a2, 0x7d
8022f2a2: a3 0b c1 00  	sb	a2, 0x17(sp)
8022f2a6: a3 08 a1 00  	sb	a0, 0x11(sp)
8022f2aa: 13 95 c4 02  	slli	a0, s1, 0x2c
8022f2ae: 71 91        	srli	a0, a0, 0x3c
8022f2b0: 2e 95        	add	a0, a0, a1
8022f2b2: 03 45 05 00  	lbu	a0, 0x0(a0)
8022f2b6: 13 96 04 03  	slli	a2, s1, 0x30
8022f2ba: 71 92        	srli	a2, a2, 0x3c
8022f2bc: 2e 96        	add	a2, a2, a1
8022f2be: 03 46 06 00  	lbu	a2, 0x0(a2)
8022f2c2: 93 96 44 03  	slli	a3, s1, 0x34
8022f2c6: f1 92        	srli	a3, a3, 0x3c
8022f2c8: ae 96        	add	a3, a3, a1
8022f2ca: 83 c6 06 00  	lbu	a3, 0x0(a3)
8022f2ce: 13 97 84 03  	slli	a4, s1, 0x38
8022f2d2: 71 93        	srli	a4, a4, 0x3c
8022f2d4: 2e 97        	add	a4, a4, a1
8022f2d6: 03 47 07 00  	lbu	a4, 0x0(a4)
8022f2da: 23 09 a1 00  	sb	a0, 0x12(sp)
8022f2de: a3 09 c1 00  	sb	a2, 0x13(sp)
8022f2e2: 23 0a d1 00  	sb	a3, 0x14(sp)
8022f2e6: a3 0a e1 00  	sb	a4, 0x15(sp)
8022f2ea: 13 f5 f4 00  	andi	a0, s1, 0xf
8022f2ee: 2e 95        	add	a0, a0, a1
8022f2f0: 9b d5 24 00  	srliw	a1, s1, 0x2
8022f2f4: 86 05        	slli	a1, a1, 0x1
8022f2f6: c5 8d        	or	a1, a1, s1
8022f2f8: 1b d6 35 00  	srliw	a2, a1, 0x3
8022f2fc: 06 06        	slli	a2, a2, 0x1
8022f2fe: d1 8d        	or	a1, a1, a2
8022f300: 1b d6 55 00  	srliw	a2, a1, 0x5
8022f304: 06 06        	slli	a2, a2, 0x1
8022f306: d1 8d        	or	a1, a1, a2
8022f308: 1b d6 95 00  	srliw	a2, a1, 0x9
8022f30c: 06 06        	slli	a2, a2, 0x1
8022f30e: d1 8d        	or	a1, a1, a2
8022f310: 1b d6 15 01  	srliw	a2, a1, 0x11
8022f314: 06 06        	slli	a2, a2, 0x1
8022f316: d1 8d        	or	a1, a1, a2
8022f318: 93 c5 f5 ff  	not	a1, a1
8022f31c: 13 d6 15 00  	srli	a2, a1, 0x1
8022f320: b7 56 55 55  	lui	a3, 0x55555
8022f324: 9b 86 56 55  	addiw	a3, a3, 0x555
8022f328: 75 8e        	and	a2, a2, a3
8022f32a: f9 99        	andi	a1, a1, -0x2
8022f32c: 91 8d        	sub	a1, a1, a2
8022f32e: 37 36 33 33  	lui	a2, 0x33333
8022f332: 1b 06 36 33  	addiw	a2, a2, 0x333
8022f336: b3 f6 c5 00  	and	a3, a1, a2
8022f33a: 89 81        	srli	a1, a1, 0x2
8022f33c: f1 8d        	and	a1, a1, a2
8022f33e: 23 08 01 00  	sb	zero, 0x10(sp)
8022f342: 23 17 01 00  	sh	zero, 0xe(sp)
8022f346: 03 46 05 00  	lbu	a2, 0x0(a0)
8022f34a: b6 95        	add	a1, a1, a3
8022f34c: 13 d5 45 00  	srli	a0, a1, 0x4
8022f350: 2e 95        	add	a0, a0, a1
8022f352: b7 15 0f 0f  	lui	a1, 0xf0f1
8022f356: 93 85 f5 f0  	addi	a1, a1, -0xf1
8022f35a: 6d 8d        	and	a0, a0, a1
8022f35c: b7 05 01 01  	lui	a1, 0x1010
8022f360: 93 85 15 10  	addi	a1, a1, 0x101
8022f364: 33 05 b5 02  	mul	a0, a0, a1
8022f368: 1b 55 a5 01  	srliw	a0, a0, 0x1a
8022f36c: 79 15        	addi	a0, a0, -0x2
8022f36e: ad 45        	li	a1, 0xb
8022f370: 23 0b c1 00  	sb	a2, 0x16(sp)
8022f374: 63 76 b5 08  	bgeu	a0, a1, 0x8022f400 <.Lpcrel_hi5>
8022f378: 93 05 e1 00  	addi	a1, sp, 0xe

000000008022f37c <.Lpcrel_hi6>:
8022f37c: 17 d6 00 00  	auipc	a2, 0xd
8022f380: 13 06 46 ca  	addi	a2, a2, -0x35c
8022f384: 83 46 26 00  	lbu	a3, 0x2(a2)
8022f388: 03 47 16 00  	lbu	a4, 0x1(a2)
8022f38c: 03 46 06 00  	lbu	a2, 0x0(a2)
8022f390: aa 95        	add	a1, a1, a0
8022f392: 23 81 d5 00  	sb	a3, 0x2(a1)
8022f396: a3 80 e5 00  	sb	a4, 0x1(a1)
8022f39a: 23 80 c5 00  	sb	a2, 0x0(a1)
8022f39e: 83 55 01 01  	lhu	a1, 0x10(sp)
8022f3a2: 03 56 e1 00  	lhu	a2, 0xe(sp)
8022f3a6: c2 05        	slli	a1, a1, 0x10
8022f3a8: 83 56 21 01  	lhu	a3, 0x12(sp)
8022f3ac: 03 57 41 01  	lhu	a4, 0x14(sp)
8022f3b0: d1 8d        	or	a1, a1, a2
8022f3b2: 03 56 61 01  	lhu	a2, 0x16(sp)
8022f3b6: 82 16        	slli	a3, a3, 0x20
8022f3b8: 42 17        	slli	a4, a4, 0x30
8022f3ba: d9 8e        	or	a3, a3, a4
8022f3bc: cd 8e        	or	a3, a3, a1
8022f3be: 36 e0        	sd	a3, 0x0(sp)
8022f3c0: 92 46        	lw	a3, 0x4(sp)
8022f3c2: 23 14 c1 00  	sh	a2, 0x8(sp)
8022f3c6: 23 14 c4 00  	sh	a2, 0x8(s0)
8022f3ca: 54 c0        	sw	a3, 0x4(s0)
8022f3cc: 0c c0        	sw	a1, 0x0(s0)
8022f3ce: 23 05 a4 00  	sb	a0, 0xa(s0)
8022f3d2: 29 45        	li	a0, 0xa
8022f3d4: a3 05 a4 00  	sb	a0, 0xb(s0)
8022f3d8: 39 a8        	j	0x8022f3f6 <.Lpcrel_hi6+0x7a>
8022f3da: 89 65        	lui	a1, 0x2
8022f3dc: 93 85 c5 25  	addi	a1, a1, 0x25c
8022f3e0: 0c c1        	sw	a1, 0x0(a0)
8022f3e2: 23 14 05 00  	sh	zero, 0x8(a0)
8022f3e6: 23 13 05 00  	sh	zero, 0x6(a0)
8022f3ea: 23 12 05 00  	sh	zero, 0x4(a0)
8022f3ee: 93 05 00 20  	li	a1, 0x200
8022f3f2: 23 15 b5 00  	sh	a1, 0xa(a0)
8022f3f6: a2 70        	ld	ra, 0x28(sp)
8022f3f8: 02 74        	ld	s0, 0x20(sp)
8022f3fa: e2 64        	ld	s1, 0x18(sp)
8022f3fc: 45 61        	addi	sp, sp, 0x30
8022f3fe: 82 80        	ret

000000008022f400 <.Lpcrel_hi5>:
8022f400: 97 d5 00 00  	auipc	a1, 0xd
8022f404: 13 86 85 c0  	addi	a2, a1, -0x3f8
8022f408: a9 45        	li	a1, 0xa
8022f40a: 97 20 00 00  	auipc	ra, 0x2
8022f40e: e7 80 20 25  	jalr	0x252(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022f412 <.Lpcrel_hi2>:
8022f412: 17 d5 00 00  	auipc	a0, 0xd
8022f416: 13 06 65 bf  	addi	a2, a0, -0x40a
8022f41a: a9 45        	li	a1, 0xa
8022f41c: 36 85        	mv	a0, a3
8022f41e: 97 20 00 00  	auipc	ra, 0x2
8022f422: e7 80 e0 23  	jalr	0x23e(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

000000008022f426 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h27dd291ee8f8fb50E>:
8022f426: 90 71        	ld	a2, 0x20(a1)
8022f428: 8c 75        	ld	a1, 0x28(a1)
8022f42a: aa 86        	mv	a3, a0
8022f42c: 32 85        	mv	a0, a2
8022f42e: 36 86        	mv	a2, a3
8022f430: 17 03 00 00  	auipc	t1, 0x0
8022f434: 67 00 83 00  	jr	0x8(t1) <_ZN4core3fmt5write17hd0b37d6a687c8e0fE>

000000008022f438 <_ZN4core3fmt5write17hd0b37d6a687c8e0fE>:
8022f438: 75 71        	addi	sp, sp, -0x90
8022f43a: 06 e5        	sd	ra, 0x88(sp)
8022f43c: 22 e1        	sd	s0, 0x80(sp)
8022f43e: a6 fc        	sd	s1, 0x78(sp)
8022f440: ca f8        	sd	s2, 0x70(sp)
8022f442: ce f4        	sd	s3, 0x68(sp)
8022f444: d2 f0        	sd	s4, 0x60(sp)
8022f446: d6 ec        	sd	s5, 0x58(sp)
8022f448: da e8        	sd	s6, 0x50(sp)
8022f44a: de e4        	sd	s7, 0x48(sp)
8022f44c: e2 e0        	sd	s8, 0x40(sp)
8022f44e: b2 89        	mv	s3, a2
8022f450: 13 06 00 02  	li	a2, 0x20
8022f454: 32 f8        	sd	a2, 0x30(sp)
8022f456: 0d 46        	li	a2, 0x3
8022f458: 23 0c c1 02  	sb	a2, 0x38(sp)
8022f45c: 83 b4 09 02  	ld	s1, 0x20(s3)
8022f460: 02 e0        	sd	zero, 0x0(sp)
8022f462: 02 e8        	sd	zero, 0x10(sp)
8022f464: 2a f0        	sd	a0, 0x20(sp)
8022f466: 2e f4        	sd	a1, 0x28(sp)
8022f468: e1 c8        	beqz	s1, 0x8022f538 <.Lpcrel_hi7+0xa2>
8022f46a: 03 b5 89 02  	ld	a0, 0x28(s3)
8022f46e: 63 0f 05 10  	beqz	a0, 0x8022f58c <.Lpcrel_hi7+0xf6>
8022f472: 03 b4 09 00  	ld	s0, 0x0(s3)
8022f476: 03 ba 09 01  	ld	s4, 0x10(s3)
8022f47a: 93 05 f5 ff  	addi	a1, a0, -0x1
8022f47e: 8e 05        	slli	a1, a1, 0x3
8022f480: 8d 81        	srli	a1, a1, 0x3
8022f482: 13 89 15 00  	addi	s2, a1, 0x1
8022f486: 21 04        	addi	s0, s0, 0x8
8022f488: 93 05 80 03  	li	a1, 0x38
8022f48c: b3 0a b5 02  	mul	s5, a0, a1
8022f490: e1 04        	addi	s1, s1, 0x18
8022f492: 09 4b        	li	s6, 0x2
8022f494: 85 4b        	li	s7, 0x1

000000008022f496 <.Lpcrel_hi7>:
8022f496: 17 25 00 00  	auipc	a0, 0x2
8022f49a: 13 0c 45 d2  	addi	s8, a0, -0x2dc
8022f49e: 10 60        	ld	a2, 0x0(s0)
8022f4a0: 09 ca        	beqz	a2, 0x8022f4b2 <.Lpcrel_hi7+0x1c>
8022f4a2: a2 76        	ld	a3, 0x28(sp)
8022f4a4: 02 75        	ld	a0, 0x20(sp)
8022f4a6: 83 35 84 ff  	ld	a1, -0x8(s0)
8022f4aa: 94 6e        	ld	a3, 0x18(a3)
8022f4ac: 82 96        	jalr	a3
8022f4ae: 63 11 05 10  	bnez	a0, 0x8022f5b0 <.Lpcrel_hi7+0x11a>
8022f4b2: 88 68        	ld	a0, 0x10(s1)
8022f4b4: 2a f8        	sd	a0, 0x30(sp)
8022f4b6: 03 c6 84 01  	lbu	a2, 0x18(s1)
8022f4ba: 83 b5 84 ff  	ld	a1, -0x8(s1)
8022f4be: 88 60        	ld	a0, 0x0(s1)
8022f4c0: 23 0c c1 02  	sb	a2, 0x38(sp)
8022f4c4: 95 c1        	beqz	a1, 0x8022f4e8 <.Lpcrel_hi7+0x52>
8022f4c6: 63 97 75 01  	bne	a1, s7, 0x8022f4d4 <.Lpcrel_hi7+0x3e>
8022f4ca: 12 05        	slli	a0, a0, 0x4
8022f4cc: 52 95        	add	a0, a0, s4
8022f4ce: 0c 65        	ld	a1, 0x8(a0)
8022f4d0: 63 8a 85 01  	beq	a1, s8, 0x8022f4e4 <.Lpcrel_hi7+0x4e>
8022f4d4: 81 45        	li	a1, 0x0
8022f4d6: 03 b6 84 fe  	ld	a2, -0x18(s1)
8022f4da: 02 e0        	sd	zero, 0x0(sp)
8022f4dc: 2a e4        	sd	a0, 0x8(sp)
8022f4de: 63 1c 66 01  	bne	a2, s6, 0x8022f4f6 <.Lpcrel_hi7+0x60>
8022f4e2: 25 a0        	j	0x8022f50a <.Lpcrel_hi7+0x74>
8022f4e4: 08 61        	ld	a0, 0x0(a0)
8022f4e6: 08 61        	ld	a0, 0x0(a0)
8022f4e8: 85 45        	li	a1, 0x1
8022f4ea: 03 b6 84 fe  	ld	a2, -0x18(s1)
8022f4ee: 2e e0        	sd	a1, 0x0(sp)
8022f4f0: 2a e4        	sd	a0, 0x8(sp)
8022f4f2: 63 0c 66 01  	beq	a2, s6, 0x8022f50a <.Lpcrel_hi7+0x74>
8022f4f6: 83 b5 04 ff  	ld	a1, -0x10(s1)
8022f4fa: 63 1c 76 01  	bne	a2, s7, 0x8022f512 <.Lpcrel_hi7+0x7c>
8022f4fe: 13 95 45 00  	slli	a0, a1, 0x4
8022f502: 52 95        	add	a0, a0, s4
8022f504: 0c 65        	ld	a1, 0x8(a0)
8022f506: 63 84 85 01  	beq	a1, s8, 0x8022f50e <.Lpcrel_hi7+0x78>
8022f50a: 01 46        	li	a2, 0x0
8022f50c: 21 a0        	j	0x8022f514 <.Lpcrel_hi7+0x7e>
8022f50e: 08 61        	ld	a0, 0x0(a0)
8022f510: 0c 61        	ld	a1, 0x0(a0)
8022f512: 05 46        	li	a2, 0x1
8022f514: 88 64        	ld	a0, 0x8(s1)
8022f516: 12 05        	slli	a0, a0, 0x4
8022f518: 52 95        	add	a0, a0, s4
8022f51a: 14 65        	ld	a3, 0x8(a0)
8022f51c: 08 61        	ld	a0, 0x0(a0)
8022f51e: 32 e8        	sd	a2, 0x10(sp)
8022f520: 2e ec        	sd	a1, 0x18(sp)
8022f522: 8a 85        	mv	a1, sp
8022f524: 82 96        	jalr	a3
8022f526: 49 e5        	bnez	a0, 0x8022f5b0 <.Lpcrel_hi7+0x11a>
8022f528: 41 04        	addi	s0, s0, 0x10
8022f52a: 93 8a 8a fc  	addi	s5, s5, -0x38
8022f52e: 93 84 84 03  	addi	s1, s1, 0x38
8022f532: e3 96 0a f6  	bnez	s5, 0x8022f49e <.Lpcrel_hi7+0x8>
8022f536: b1 a0        	j	0x8022f582 <.Lpcrel_hi7+0xec>
8022f538: 03 ba 89 01  	ld	s4, 0x18(s3)
8022f53c: 63 08 0a 04  	beqz	s4, 0x8022f58c <.Lpcrel_hi7+0xf6>
8022f540: 83 b4 09 01  	ld	s1, 0x10(s3)
8022f544: 03 b4 09 00  	ld	s0, 0x0(s3)
8022f548: 13 05 fa ff  	addi	a0, s4, -0x1
8022f54c: 12 05        	slli	a0, a0, 0x4
8022f54e: 11 81        	srli	a0, a0, 0x4
8022f550: 13 09 15 00  	addi	s2, a0, 0x1
8022f554: 21 04        	addi	s0, s0, 0x8
8022f556: a1 04        	addi	s1, s1, 0x8
8022f558: 12 0a        	slli	s4, s4, 0x4
8022f55a: 10 60        	ld	a2, 0x0(s0)
8022f55c: 01 ca        	beqz	a2, 0x8022f56c <.Lpcrel_hi7+0xd6>
8022f55e: a2 76        	ld	a3, 0x28(sp)
8022f560: 02 75        	ld	a0, 0x20(sp)
8022f562: 83 35 84 ff  	ld	a1, -0x8(s0)
8022f566: 94 6e        	ld	a3, 0x18(a3)
8022f568: 82 96        	jalr	a3
8022f56a: 39 e1        	bnez	a0, 0x8022f5b0 <.Lpcrel_hi7+0x11a>
8022f56c: 90 60        	ld	a2, 0x0(s1)
8022f56e: 03 b5 84 ff  	ld	a0, -0x8(s1)
8022f572: 8a 85        	mv	a1, sp
8022f574: 02 96        	jalr	a2
8022f576: 0d ed        	bnez	a0, 0x8022f5b0 <.Lpcrel_hi7+0x11a>
8022f578: 41 04        	addi	s0, s0, 0x10
8022f57a: 41 1a        	addi	s4, s4, -0x10
8022f57c: c1 04        	addi	s1, s1, 0x10
8022f57e: e3 1e 0a fc  	bnez	s4, 0x8022f55a <.Lpcrel_hi7+0xc4>
8022f582: 03 b5 89 00  	ld	a0, 0x8(s3)
8022f586: 63 68 a9 00  	bltu	s2, a0, 0x8022f596 <.Lpcrel_hi7+0x100>
8022f58a: 2d a0        	j	0x8022f5b4 <.Lpcrel_hi7+0x11e>
8022f58c: 01 49        	li	s2, 0x0
8022f58e: 03 b5 89 00  	ld	a0, 0x8(s3)
8022f592: 63 71 a0 02  	bgeu	zero, a0, 0x8022f5b4 <.Lpcrel_hi7+0x11e>
8022f596: 03 b5 09 00  	ld	a0, 0x0(s3)
8022f59a: 12 09        	slli	s2, s2, 0x4
8022f59c: 2a 99        	add	s2, s2, a0
8022f59e: a2 76        	ld	a3, 0x28(sp)
8022f5a0: 02 75        	ld	a0, 0x20(sp)
8022f5a2: 83 35 09 00  	ld	a1, 0x0(s2)
8022f5a6: 03 36 89 00  	ld	a2, 0x8(s2)
8022f5aa: 94 6e        	ld	a3, 0x18(a3)
8022f5ac: 82 96        	jalr	a3
8022f5ae: 19 c1        	beqz	a0, 0x8022f5b4 <.Lpcrel_hi7+0x11e>
8022f5b0: 05 45        	li	a0, 0x1
8022f5b2: 11 a0        	j	0x8022f5b6 <.Lpcrel_hi7+0x120>
8022f5b4: 01 45        	li	a0, 0x0
8022f5b6: aa 60        	ld	ra, 0x88(sp)
8022f5b8: 0a 64        	ld	s0, 0x80(sp)
8022f5ba: e6 74        	ld	s1, 0x78(sp)
8022f5bc: 46 79        	ld	s2, 0x70(sp)
8022f5be: a6 79        	ld	s3, 0x68(sp)
8022f5c0: 06 7a        	ld	s4, 0x60(sp)
8022f5c2: e6 6a        	ld	s5, 0x58(sp)
8022f5c4: 46 6b        	ld	s6, 0x50(sp)
8022f5c6: a6 6b        	ld	s7, 0x48(sp)
8022f5c8: 06 6c        	ld	s8, 0x40(sp)
8022f5ca: 49 61        	addi	sp, sp, 0x90
8022f5cc: 82 80        	ret

000000008022f5ce <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E>:
8022f5ce: 59 71        	addi	sp, sp, -0x70
8022f5d0: 86 f4        	sd	ra, 0x68(sp)
8022f5d2: a2 f0        	sd	s0, 0x60(sp)
8022f5d4: a6 ec        	sd	s1, 0x58(sp)
8022f5d6: ca e8        	sd	s2, 0x50(sp)
8022f5d8: ce e4        	sd	s3, 0x48(sp)
8022f5da: d2 e0        	sd	s4, 0x40(sp)
8022f5dc: 56 fc        	sd	s5, 0x38(sp)
8022f5de: 5a f8        	sd	s6, 0x30(sp)
8022f5e0: 5e f4        	sd	s7, 0x28(sp)
8022f5e2: 62 f0        	sd	s8, 0x20(sp)
8022f5e4: 66 ec        	sd	s9, 0x18(sp)
8022f5e6: 6a e8        	sd	s10, 0x10(sp)
8022f5e8: 6e e4        	sd	s11, 0x8(sp)
8022f5ea: be 89        	mv	s3, a5
8022f5ec: 3a 89        	mv	s2, a4
8022f5ee: b6 8a        	mv	s5, a3
8022f5f0: 32 8b        	mv	s6, a2
8022f5f2: b9 c5        	beqz	a1, 0x8022f640 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x72>
8022f5f4: 83 64 45 03  	lwu	s1, 0x34(a0)
8022f5f8: 93 fb 14 00  	andi	s7, s1, 0x1
8022f5fc: 37 0a 11 00  	lui	s4, 0x110
8022f600: 63 84 0b 00  	beqz	s7, 0x8022f608 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x3a>
8022f604: 13 0a b0 02  	li	s4, 0x2b
8022f608: ce 9b        	add	s7, s7, s3
8022f60a: 93 f5 44 00  	andi	a1, s1, 0x4
8022f60e: a9 c1        	beqz	a1, 0x8022f650 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x82>
8022f610: 93 05 00 02  	li	a1, 0x20
8022f614: 63 f2 ba 04  	bgeu	s5, a1, 0x8022f658 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x8a>
8022f618: 81 45        	li	a1, 0x0
8022f61a: 63 8f 0a 00  	beqz	s5, 0x8022f638 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x6a>
8022f61e: 33 06 5b 01  	add	a2, s6, s5
8022f622: da 86        	mv	a3, s6
8022f624: 03 87 06 00  	lb	a4, 0x0(a3)
8022f628: 13 27 07 fc  	slti	a4, a4, -0x40
8022f62c: 13 47 17 00  	xori	a4, a4, 0x1
8022f630: 85 06        	addi	a3, a3, 0x1
8022f632: ba 95        	add	a1, a1, a4
8022f634: e3 98 c6 fe  	bne	a3, a2, 0x8022f624 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x56>
8022f638: ae 9b        	add	s7, s7, a1
8022f63a: 0c 61        	ld	a1, 0x0(a0)
8022f63c: 95 e9        	bnez	a1, 0x8022f670 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0xa2>
8022f63e: b9 a0        	j	0x8022f68c <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0xbe>
8022f640: 44 59        	lw	s1, 0x34(a0)
8022f642: 93 8b 19 00  	addi	s7, s3, 0x1
8022f646: 13 0a d0 02  	li	s4, 0x2d
8022f64a: 93 f5 44 00  	andi	a1, s1, 0x4
8022f64e: e9 f1        	bnez	a1, 0x8022f610 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x42>
8022f650: 01 4b        	li	s6, 0x0
8022f652: 0c 61        	ld	a1, 0x0(a0)
8022f654: 91 ed        	bnez	a1, 0x8022f670 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0xa2>
8022f656: 1d a8        	j	0x8022f68c <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0xbe>
8022f658: 2a 84        	mv	s0, a0
8022f65a: 5a 85        	mv	a0, s6
8022f65c: d6 85        	mv	a1, s5
8022f65e: 97 10 00 00  	auipc	ra, 0x1
8022f662: e7 80 80 70  	jalr	0x708(ra) <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE>
8022f666: aa 85        	mv	a1, a0
8022f668: 22 85        	mv	a0, s0
8022f66a: ae 9b        	add	s7, s7, a1
8022f66c: 0c 60        	ld	a1, 0x0(s0)
8022f66e: 99 cd        	beqz	a1, 0x8022f68c <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0xbe>
8022f670: 00 65        	ld	s0, 0x8(a0)
8022f672: 63 fd 8b 00  	bgeu	s7, s0, 0x8022f68c <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0xbe>
8022f676: a1 88        	andi	s1, s1, 0x8
8022f678: b9 e8        	bnez	s1, 0x8022f6ce <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x100>
8022f67a: 83 45 85 03  	lbu	a1, 0x38(a0)
8022f67e: 05 46        	li	a2, 0x1
8022f680: 33 0c 74 41  	sub	s8, s0, s7
8022f684: 63 49 b6 08  	blt	a2, a1, 0x8022f716 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x148>
8022f688: d5 c1        	beqz	a1, 0x8022f72c <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x15e>
8022f68a: 79 a8        	j	0x8022f728 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x15a>
8022f68c: 00 71        	ld	s0, 0x20(a0)
8022f68e: 04 75        	ld	s1, 0x28(a0)
8022f690: 22 85        	mv	a0, s0
8022f692: a6 85        	mv	a1, s1
8022f694: 52 86        	mv	a2, s4
8022f696: da 86        	mv	a3, s6
8022f698: 56 87        	mv	a4, s5
8022f69a: 97 00 00 00  	auipc	ra, 0x0
8022f69e: e7 80 c0 13  	jalr	0x13c(ra) <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h9342e5076e99fcd7E>
8022f6a2: aa 85        	mv	a1, a0
8022f6a4: 05 45        	li	a0, 0x1
8022f6a6: d5 e1        	bnez	a1, 0x8022f74a <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x17c>
8022f6a8: 9c 6c        	ld	a5, 0x18(s1)
8022f6aa: 22 85        	mv	a0, s0
8022f6ac: ca 85        	mv	a1, s2
8022f6ae: 4e 86        	mv	a2, s3
8022f6b0: a6 70        	ld	ra, 0x68(sp)
8022f6b2: 06 74        	ld	s0, 0x60(sp)
8022f6b4: e6 64        	ld	s1, 0x58(sp)
8022f6b6: 46 69        	ld	s2, 0x50(sp)
8022f6b8: a6 69        	ld	s3, 0x48(sp)
8022f6ba: 06 6a        	ld	s4, 0x40(sp)
8022f6bc: e2 7a        	ld	s5, 0x38(sp)
8022f6be: 42 7b        	ld	s6, 0x30(sp)
8022f6c0: a2 7b        	ld	s7, 0x28(sp)
8022f6c2: 02 7c        	ld	s8, 0x20(sp)
8022f6c4: e2 6c        	ld	s9, 0x18(sp)
8022f6c6: 42 6d        	ld	s10, 0x10(sp)
8022f6c8: a2 6d        	ld	s11, 0x8(sp)
8022f6ca: 65 61        	addi	sp, sp, 0x70
8022f6cc: 82 87        	jr	a5
8022f6ce: 03 2c 05 03  	lw	s8, 0x30(a0)
8022f6d2: 93 05 00 03  	li	a1, 0x30
8022f6d6: 83 4c 85 03  	lbu	s9, 0x38(a0)
8022f6da: 83 3d 05 02  	ld	s11, 0x20(a0)
8022f6de: 04 75        	ld	s1, 0x28(a0)
8022f6e0: 0c d9        	sw	a1, 0x30(a0)
8022f6e2: 85 45        	li	a1, 0x1
8022f6e4: 2a 8d        	mv	s10, a0
8022f6e6: 23 0c b5 02  	sb	a1, 0x38(a0)
8022f6ea: 6e 85        	mv	a0, s11
8022f6ec: a6 85        	mv	a1, s1
8022f6ee: 52 86        	mv	a2, s4
8022f6f0: da 86        	mv	a3, s6
8022f6f2: 56 87        	mv	a4, s5
8022f6f4: 97 00 00 00  	auipc	ra, 0x0
8022f6f8: e7 80 20 0e  	jalr	0xe2(ra) <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h9342e5076e99fcd7E>
8022f6fc: 31 e5        	bnez	a0, 0x8022f748 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x17a>
8022f6fe: 33 04 74 41  	sub	s0, s0, s7
8022f702: 05 04        	addi	s0, s0, 0x1
8022f704: 7d 14        	addi	s0, s0, -0x1
8022f706: 55 c4        	beqz	s0, 0x8022f7b2 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x1e4>
8022f708: 90 70        	ld	a2, 0x20(s1)
8022f70a: 93 05 00 03  	li	a1, 0x30
8022f70e: 6e 85        	mv	a0, s11
8022f710: 02 96        	jalr	a2
8022f712: 6d d9        	beqz	a0, 0x8022f704 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x136>
8022f714: 15 a8        	j	0x8022f748 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x17a>
8022f716: 09 46        	li	a2, 0x2
8022f718: 63 98 c5 00  	bne	a1, a2, 0x8022f728 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x15a>
8022f71c: 93 55 1c 00  	srli	a1, s8, 0x1
8022f720: 05 0c        	addi	s8, s8, 0x1
8022f722: 13 5c 1c 00  	srli	s8, s8, 0x1
8022f726: 19 a0        	j	0x8022f72c <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x15e>
8022f728: e2 85        	mv	a1, s8
8022f72a: 01 4c        	li	s8, 0x0
8022f72c: 83 3c 05 02  	ld	s9, 0x20(a0)
8022f730: 00 75        	ld	s0, 0x28(a0)
8022f732: 83 2b 05 03  	lw	s7, 0x30(a0)
8022f736: 93 84 15 00  	addi	s1, a1, 0x1
8022f73a: fd 14        	addi	s1, s1, -0x1
8022f73c: 95 c4        	beqz	s1, 0x8022f768 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x19a>
8022f73e: 10 70        	ld	a2, 0x20(s0)
8022f740: 66 85        	mv	a0, s9
8022f742: de 85        	mv	a1, s7
8022f744: 02 96        	jalr	a2
8022f746: 75 d9        	beqz	a0, 0x8022f73a <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x16c>
8022f748: 05 45        	li	a0, 0x1
8022f74a: a6 70        	ld	ra, 0x68(sp)
8022f74c: 06 74        	ld	s0, 0x60(sp)
8022f74e: e6 64        	ld	s1, 0x58(sp)
8022f750: 46 69        	ld	s2, 0x50(sp)
8022f752: a6 69        	ld	s3, 0x48(sp)
8022f754: 06 6a        	ld	s4, 0x40(sp)
8022f756: e2 7a        	ld	s5, 0x38(sp)
8022f758: 42 7b        	ld	s6, 0x30(sp)
8022f75a: a2 7b        	ld	s7, 0x28(sp)
8022f75c: 02 7c        	ld	s8, 0x20(sp)
8022f75e: e2 6c        	ld	s9, 0x18(sp)
8022f760: 42 6d        	ld	s10, 0x10(sp)
8022f762: a2 6d        	ld	s11, 0x8(sp)
8022f764: 65 61        	addi	sp, sp, 0x70
8022f766: 82 80        	ret
8022f768: 66 85        	mv	a0, s9
8022f76a: a2 85        	mv	a1, s0
8022f76c: 52 86        	mv	a2, s4
8022f76e: da 86        	mv	a3, s6
8022f770: 56 87        	mv	a4, s5
8022f772: 97 00 00 00  	auipc	ra, 0x0
8022f776: e7 80 40 06  	jalr	0x64(ra) <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h9342e5076e99fcd7E>
8022f77a: aa 85        	mv	a1, a0
8022f77c: 05 45        	li	a0, 0x1
8022f77e: f1 f5        	bnez	a1, 0x8022f74a <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x17c>
8022f780: 14 6c        	ld	a3, 0x18(s0)
8022f782: 66 85        	mv	a0, s9
8022f784: ca 85        	mv	a1, s2
8022f786: 4e 86        	mv	a2, s3
8022f788: 82 96        	jalr	a3
8022f78a: aa 85        	mv	a1, a0
8022f78c: 05 45        	li	a0, 0x1
8022f78e: d5 fd        	bnez	a1, 0x8022f74a <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x17c>
8022f790: 33 09 80 41  	neg	s2, s8
8022f794: fd 59        	li	s3, -0x1
8022f796: fd 54        	li	s1, -0x1
8022f798: 33 05 99 00  	add	a0, s2, s1
8022f79c: 63 09 35 03  	beq	a0, s3, 0x8022f7ce <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x200>
8022f7a0: 10 70        	ld	a2, 0x20(s0)
8022f7a2: 66 85        	mv	a0, s9
8022f7a4: de 85        	mv	a1, s7
8022f7a6: 02 96        	jalr	a2
8022f7a8: 85 04        	addi	s1, s1, 0x1
8022f7aa: 7d d5        	beqz	a0, 0x8022f798 <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x1ca>
8022f7ac: 33 b5 84 01  	sltu	a0, s1, s8
8022f7b0: 69 bf        	j	0x8022f74a <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x17c>
8022f7b2: 94 6c        	ld	a3, 0x18(s1)
8022f7b4: 6e 85        	mv	a0, s11
8022f7b6: ca 85        	mv	a1, s2
8022f7b8: 4e 86        	mv	a2, s3
8022f7ba: 82 96        	jalr	a3
8022f7bc: aa 85        	mv	a1, a0
8022f7be: 05 45        	li	a0, 0x1
8022f7c0: c9 f5        	bnez	a1, 0x8022f74a <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x17c>
8022f7c2: 01 45        	li	a0, 0x0
8022f7c4: 23 28 8d 03  	sw	s8, 0x30(s10)
8022f7c8: 23 0c 9d 03  	sb	s9, 0x38(s10)
8022f7cc: bd bf        	j	0x8022f74a <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x17c>
8022f7ce: e2 84        	mv	s1, s8
8022f7d0: 33 35 8c 01  	sltu	a0, s8, s8
8022f7d4: 9d bf        	j	0x8022f74a <_ZN4core3fmt9Formatter12pad_integral17h9f00230ab78cf8f8E+0x17c>

000000008022f7d6 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h9342e5076e99fcd7E>:
8022f7d6: 79 71        	addi	sp, sp, -0x30
8022f7d8: 06 f4        	sd	ra, 0x28(sp)
8022f7da: 22 f0        	sd	s0, 0x20(sp)
8022f7dc: 26 ec        	sd	s1, 0x18(sp)
8022f7de: 4a e8        	sd	s2, 0x10(sp)
8022f7e0: 4e e4        	sd	s3, 0x8(sp)
8022f7e2: 9b 07 06 00  	sext.w	a5, a2
8022f7e6: 37 04 11 00  	lui	s0, 0x110
8022f7ea: 3a 89        	mv	s2, a4
8022f7ec: b6 84        	mv	s1, a3
8022f7ee: ae 89        	mv	s3, a1
8022f7f0: 63 8b 87 00  	beq	a5, s0, 0x8022f806 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h9342e5076e99fcd7E+0x30>
8022f7f4: 83 b6 09 02  	ld	a3, 0x20(s3)
8022f7f8: 2a 84        	mv	s0, a0
8022f7fa: b2 85        	mv	a1, a2
8022f7fc: 82 96        	jalr	a3
8022f7fe: 2a 86        	mv	a2, a0
8022f800: 22 85        	mv	a0, s0
8022f802: 85 45        	li	a1, 0x1
8022f804: 11 ee        	bnez	a2, 0x8022f820 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h9342e5076e99fcd7E+0x4a>
8022f806: 81 cc        	beqz	s1, 0x8022f81e <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h9342e5076e99fcd7E+0x48>
8022f808: 83 b7 89 01  	ld	a5, 0x18(s3)
8022f80c: a6 85        	mv	a1, s1
8022f80e: 4a 86        	mv	a2, s2
8022f810: a2 70        	ld	ra, 0x28(sp)
8022f812: 02 74        	ld	s0, 0x20(sp)
8022f814: e2 64        	ld	s1, 0x18(sp)
8022f816: 42 69        	ld	s2, 0x10(sp)
8022f818: a2 69        	ld	s3, 0x8(sp)
8022f81a: 45 61        	addi	sp, sp, 0x30
8022f81c: 82 87        	jr	a5
8022f81e: 81 45        	li	a1, 0x0
8022f820: 2e 85        	mv	a0, a1
8022f822: a2 70        	ld	ra, 0x28(sp)
8022f824: 02 74        	ld	s0, 0x20(sp)
8022f826: e2 64        	ld	s1, 0x18(sp)
8022f828: 42 69        	ld	s2, 0x10(sp)
8022f82a: a2 69        	ld	s3, 0x8(sp)
8022f82c: 45 61        	addi	sp, sp, 0x30
8022f82e: 82 80        	ret

000000008022f830 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E>:
8022f830: 39 71        	addi	sp, sp, -0x40
8022f832: 06 fc        	sd	ra, 0x38(sp)
8022f834: 22 f8        	sd	s0, 0x30(sp)
8022f836: 26 f4        	sd	s1, 0x28(sp)
8022f838: 4a f0        	sd	s2, 0x20(sp)
8022f83a: 4e ec        	sd	s3, 0x18(sp)
8022f83c: 52 e8        	sd	s4, 0x10(sp)
8022f83e: 56 e4        	sd	s5, 0x8(sp)
8022f840: 5a e0        	sd	s6, 0x0(sp)
8022f842: 03 33 05 00  	ld	t1, 0x0(a0)
8022f846: 18 69        	ld	a4, 0x10(a0)
8022f848: b3 67 e3 00  	or	a5, t1, a4
8022f84c: b2 89        	mv	s3, a2
8022f84e: 2e 89        	mv	s2, a1
8022f850: 63 88 07 14  	beqz	a5, 0x8022f9a0 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x170>
8022f854: 75 c7        	beqz	a4, 0x8022f940 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x110>
8022f856: 18 6d        	ld	a4, 0x18(a0)
8022f858: 33 06 39 01  	add	a2, s2, s3
8022f85c: 81 44        	li	s1, 0x0
8022f85e: 35 cb        	beqz	a4, 0x8022f8d2 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0xa2>
8022f860: 93 02 00 0e  	li	t0, 0xe0
8022f864: 93 08 00 0f  	li	a7, 0xf0
8022f868: 37 08 11 00  	lui	a6, 0x110
8022f86c: 4a 84        	mv	s0, s2
8022f86e: 01 a8        	j	0x8022f87e <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x4e>
8022f870: 93 05 14 00  	addi	a1, s0, 0x1
8022f874: 81 8c        	sub	s1, s1, s0
8022f876: 7d 17        	addi	a4, a4, -0x1
8022f878: ae 94        	add	s1, s1, a1
8022f87a: 2e 84        	mv	s0, a1
8022f87c: 21 cf        	beqz	a4, 0x8022f8d4 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0xa4>
8022f87e: 63 01 c4 0c  	beq	s0, a2, 0x8022f940 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x110>
8022f882: 83 05 04 00  	lb	a1, 0x0(s0)
8022f886: e3 d5 05 fe  	bgez	a1, 0x8022f870 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x40>
8022f88a: 93 f5 f5 0f  	andi	a1, a1, 0xff
8022f88e: 63 ec 55 02  	bltu	a1, t0, 0x8022f8c6 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x96>
8022f892: 63 ed 15 03  	bltu	a1, a7, 0x8022f8cc <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x9c>
8022f896: 83 47 14 00  	lbu	a5, 0x1(s0)
8022f89a: 83 46 24 00  	lbu	a3, 0x2(s0)
8022f89e: 93 f7 f7 03  	andi	a5, a5, 0x3f
8022f8a2: 93 f6 f6 03  	andi	a3, a3, 0x3f
8022f8a6: 83 43 34 00  	lbu	t2, 0x3(s0)
8022f8aa: f6 15        	slli	a1, a1, 0x3d
8022f8ac: ad 91        	srli	a1, a1, 0x2b
8022f8ae: b2 07        	slli	a5, a5, 0xc
8022f8b0: 9a 06        	slli	a3, a3, 0x6
8022f8b2: dd 8e        	or	a3, a3, a5
8022f8b4: 93 f7 f3 03  	andi	a5, t2, 0x3f
8022f8b8: dd 8e        	or	a3, a3, a5
8022f8ba: d5 8d        	or	a1, a1, a3
8022f8bc: 63 82 05 09  	beq	a1, a6, 0x8022f940 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x110>
8022f8c0: 93 05 44 00  	addi	a1, s0, 0x4
8022f8c4: 45 bf        	j	0x8022f874 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x44>
8022f8c6: 93 05 24 00  	addi	a1, s0, 0x2
8022f8ca: 6d b7        	j	0x8022f874 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x44>
8022f8cc: 93 05 34 00  	addi	a1, s0, 0x3
8022f8d0: 55 b7        	j	0x8022f874 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x44>
8022f8d2: ca 85        	mv	a1, s2
8022f8d4: 63 86 c5 06  	beq	a1, a2, 0x8022f940 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x110>
8022f8d8: 03 86 05 00  	lb	a2, 0x0(a1)
8022f8dc: 63 53 06 04  	bgez	a2, 0x8022f922 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0xf2>
8022f8e0: 13 76 f6 0f  	andi	a2, a2, 0xff
8022f8e4: 93 06 00 0e  	li	a3, 0xe0
8022f8e8: 63 6d d6 02  	bltu	a2, a3, 0x8022f922 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0xf2>
8022f8ec: 93 06 00 0f  	li	a3, 0xf0
8022f8f0: 63 69 d6 02  	bltu	a2, a3, 0x8022f922 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0xf2>
8022f8f4: 83 c6 15 00  	lbu	a3, 0x1(a1)
8022f8f8: 03 c7 25 00  	lbu	a4, 0x2(a1)
8022f8fc: 93 f6 f6 03  	andi	a3, a3, 0x3f
8022f900: 13 77 f7 03  	andi	a4, a4, 0x3f
8022f904: 83 c5 35 00  	lbu	a1, 0x3(a1)
8022f908: 76 16        	slli	a2, a2, 0x3d
8022f90a: 2d 92        	srli	a2, a2, 0x2b
8022f90c: b2 06        	slli	a3, a3, 0xc
8022f90e: 1a 07        	slli	a4, a4, 0x6
8022f910: d9 8e        	or	a3, a3, a4
8022f912: 93 f5 f5 03  	andi	a1, a1, 0x3f
8022f916: d5 8d        	or	a1, a1, a3
8022f918: d1 8d        	or	a1, a1, a2
8022f91a: 37 06 11 00  	lui	a2, 0x110
8022f91e: 63 81 c5 02  	beq	a1, a2, 0x8022f940 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x110>
8022f922: 91 cc        	beqz	s1, 0x8022f93e <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x10e>
8022f924: 63 fb 34 01  	bgeu	s1, s3, 0x8022f93a <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x10a>
8022f928: b3 05 99 00  	add	a1, s2, s1
8022f92c: 83 85 05 00  	lb	a1, 0x0(a1)
8022f930: 13 06 00 fc  	li	a2, -0x40
8022f934: 63 d5 c5 00  	bge	a1, a2, 0x8022f93e <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x10e>
8022f938: 21 a0        	j	0x8022f940 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x110>
8022f93a: 63 93 34 01  	bne	s1, s3, 0x8022f940 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x110>
8022f93e: a6 89        	mv	s3, s1
8022f940: 63 00 03 06  	beqz	t1, 0x8022f9a0 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x170>
8022f944: 00 65        	ld	s0, 0x8(a0)
8022f946: 93 05 00 02  	li	a1, 0x20
8022f94a: 63 f0 b9 04  	bgeu	s3, a1, 0x8022f98a <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x15a>
8022f94e: 81 45        	li	a1, 0x0
8022f950: 63 8f 09 00  	beqz	s3, 0x8022f96e <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x13e>
8022f954: 33 06 39 01  	add	a2, s2, s3
8022f958: ca 86        	mv	a3, s2
8022f95a: 03 87 06 00  	lb	a4, 0x0(a3)
8022f95e: 13 27 07 fc  	slti	a4, a4, -0x40
8022f962: 13 47 17 00  	xori	a4, a4, 0x1
8022f966: 85 06        	addi	a3, a3, 0x1
8022f968: ba 95        	add	a1, a1, a4
8022f96a: e3 98 c6 fe  	bne	a3, a2, 0x8022f95a <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x12a>
8022f96e: 63 f9 85 02  	bgeu	a1, s0, 0x8022f9a0 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x170>
8022f972: 83 46 85 03  	lbu	a3, 0x38(a0)
8022f976: 01 46        	li	a2, 0x0
8022f978: 05 47        	li	a4, 0x1
8022f97a: 33 0a b4 40  	sub	s4, s0, a1
8022f97e: 63 40 d7 04  	blt	a4, a3, 0x8022f9be <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x18e>
8022f982: b1 c6        	beqz	a3, 0x8022f9ce <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x19e>
8022f984: 52 86        	mv	a2, s4
8022f986: 01 4a        	li	s4, 0x0
8022f988: 99 a0        	j	0x8022f9ce <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x19e>
8022f98a: aa 84        	mv	s1, a0
8022f98c: 4a 85        	mv	a0, s2
8022f98e: ce 85        	mv	a1, s3
8022f990: 97 10 00 00  	auipc	ra, 0x1
8022f994: e7 80 60 3d  	jalr	0x3d6(ra) <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE>
8022f998: aa 85        	mv	a1, a0
8022f99a: 26 85        	mv	a0, s1
8022f99c: e3 eb 85 fc  	bltu	a1, s0, 0x8022f972 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x142>
8022f9a0: 0c 75        	ld	a1, 0x28(a0)
8022f9a2: 08 71        	ld	a0, 0x20(a0)
8022f9a4: 9c 6d        	ld	a5, 0x18(a1)
8022f9a6: ca 85        	mv	a1, s2
8022f9a8: 4e 86        	mv	a2, s3
8022f9aa: e2 70        	ld	ra, 0x38(sp)
8022f9ac: 42 74        	ld	s0, 0x30(sp)
8022f9ae: a2 74        	ld	s1, 0x28(sp)
8022f9b0: 02 79        	ld	s2, 0x20(sp)
8022f9b2: e2 69        	ld	s3, 0x18(sp)
8022f9b4: 42 6a        	ld	s4, 0x10(sp)
8022f9b6: a2 6a        	ld	s5, 0x8(sp)
8022f9b8: 02 6b        	ld	s6, 0x0(sp)
8022f9ba: 21 61        	addi	sp, sp, 0x40
8022f9bc: 82 87        	jr	a5
8022f9be: 89 45        	li	a1, 0x2
8022f9c0: 63 97 b6 00  	bne	a3, a1, 0x8022f9ce <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x19e>
8022f9c4: 13 56 1a 00  	srli	a2, s4, 0x1
8022f9c8: 05 0a        	addi	s4, s4, 0x1
8022f9ca: 13 5a 1a 00  	srli	s4, s4, 0x1
8022f9ce: 83 3a 05 02  	ld	s5, 0x20(a0)
8022f9d2: 04 75        	ld	s1, 0x28(a0)
8022f9d4: 03 2b 05 03  	lw	s6, 0x30(a0)
8022f9d8: 13 04 16 00  	addi	s0, a2, 0x1
8022f9dc: 7d 14        	addi	s0, s0, -0x1
8022f9de: 01 c8        	beqz	s0, 0x8022f9ee <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x1be>
8022f9e0: 90 70        	ld	a2, 0x20(s1)
8022f9e2: 56 85        	mv	a0, s5
8022f9e4: da 85        	mv	a1, s6
8022f9e6: 02 96        	jalr	a2
8022f9e8: 75 d9        	beqz	a0, 0x8022f9dc <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x1ac>
8022f9ea: 05 45        	li	a0, 0x1
8022f9ec: 1d a8        	j	0x8022fa22 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x1f2>
8022f9ee: 94 6c        	ld	a3, 0x18(s1)
8022f9f0: 56 85        	mv	a0, s5
8022f9f2: ca 85        	mv	a1, s2
8022f9f4: 4e 86        	mv	a2, s3
8022f9f6: 82 96        	jalr	a3
8022f9f8: aa 85        	mv	a1, a0
8022f9fa: 05 45        	li	a0, 0x1
8022f9fc: 9d e1        	bnez	a1, 0x8022fa22 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x1f2>
8022f9fe: 33 09 40 41  	neg	s2, s4
8022fa02: fd 59        	li	s3, -0x1
8022fa04: 7d 54        	li	s0, -0x1
8022fa06: 33 05 89 00  	add	a0, s2, s0
8022fa0a: 63 09 35 01  	beq	a0, s3, 0x8022fa1c <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x1ec>
8022fa0e: 90 70        	ld	a2, 0x20(s1)
8022fa10: 56 85        	mv	a0, s5
8022fa12: da 85        	mv	a1, s6
8022fa14: 02 96        	jalr	a2
8022fa16: 05 04        	addi	s0, s0, 0x1
8022fa18: 7d d5        	beqz	a0, 0x8022fa06 <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x1d6>
8022fa1a: 11 a0        	j	0x8022fa1e <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E+0x1ee>
8022fa1c: 52 84        	mv	s0, s4
8022fa1e: 33 35 44 01  	sltu	a0, s0, s4
8022fa22: e2 70        	ld	ra, 0x38(sp)
8022fa24: 42 74        	ld	s0, 0x30(sp)
8022fa26: a2 74        	ld	s1, 0x28(sp)
8022fa28: 02 79        	ld	s2, 0x20(sp)
8022fa2a: e2 69        	ld	s3, 0x18(sp)
8022fa2c: 42 6a        	ld	s4, 0x10(sp)
8022fa2e: a2 6a        	ld	s5, 0x8(sp)
8022fa30: 02 6b        	ld	s6, 0x0(sp)
8022fa32: 21 61        	addi	sp, sp, 0x40
8022fa34: 82 80        	ret

000000008022fa36 <_ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17ha77da4ed15c33a24E>:
8022fa36: 14 75        	ld	a3, 0x28(a0)
8022fa38: 08 71        	ld	a0, 0x20(a0)
8022fa3a: 9c 6e        	ld	a5, 0x18(a3)
8022fa3c: 82 87        	jr	a5

000000008022fa3e <_ZN4core3fmt9Formatter26debug_struct_field2_finish17hcbf4a098f012dba6E>:
8022fa3e: 59 71        	addi	sp, sp, -0x70
8022fa40: 86 f4        	sd	ra, 0x68(sp)
8022fa42: a2 f0        	sd	s0, 0x60(sp)
8022fa44: a6 ec        	sd	s1, 0x58(sp)
8022fa46: ca e8        	sd	s2, 0x50(sp)
8022fa48: ce e4        	sd	s3, 0x48(sp)
8022fa4a: d2 e0        	sd	s4, 0x40(sp)
8022fa4c: 56 fc        	sd	s5, 0x38(sp)
8022fa4e: 5a f8        	sd	s6, 0x30(sp)
8022fa50: 5e f4        	sd	s7, 0x28(sp)
8022fa52: 62 f0        	sd	s8, 0x20(sp)
8022fa54: 66 ec        	sd	s9, 0x18(sp)
8022fa56: 2a 84        	mv	s0, a0
8022fa58: 46 79        	ld	s2, 0x70(sp)
8022fa5a: 04 75        	ld	s1, 0x28(a0)
8022fa5c: 66 7a        	ld	s4, 0x78(sp)
8022fa5e: 8a 69        	ld	s3, 0x80(sp)
8022fa60: 08 71        	ld	a0, 0x20(a0)
8022fa62: 84 6c        	ld	s1, 0x18(s1)
8022fa64: c6 8a        	mv	s5, a7
8022fa66: 42 8b        	mv	s6, a6
8022fa68: be 8b        	mv	s7, a5
8022fa6a: 3a 8c        	mv	s8, a4
8022fa6c: b6 8c        	mv	s9, a3
8022fa6e: 82 94        	jalr	s1
8022fa70: 22 e4        	sd	s0, 0x8(sp)
8022fa72: 23 08 a1 00  	sb	a0, 0x10(sp)
8022fa76: a3 08 01 00  	sb	zero, 0x11(sp)
8022fa7a: 28 00        	addi	a0, sp, 0x8
8022fa7c: e6 85        	mv	a1, s9
8022fa7e: 62 86        	mv	a2, s8
8022fa80: de 86        	mv	a3, s7
8022fa82: 5a 87        	mv	a4, s6
8022fa84: 97 10 00 00  	auipc	ra, 0x1
8022fa88: e7 80 60 c0  	jalr	-0x3fa(ra) <_ZN4core3fmt8builders11DebugStruct5field17h204890760642458cE>
8022fa8c: 28 00        	addi	a0, sp, 0x8
8022fa8e: d6 85        	mv	a1, s5
8022fa90: 4a 86        	mv	a2, s2
8022fa92: d2 86        	mv	a3, s4
8022fa94: 4e 87        	mv	a4, s3
8022fa96: 97 10 00 00  	auipc	ra, 0x1
8022fa9a: e7 80 40 bf  	jalr	-0x40c(ra) <_ZN4core3fmt8builders11DebugStruct5field17h204890760642458cE>
8022fa9e: 03 45 11 01  	lbu	a0, 0x11(sp)
8022faa2: 83 45 01 01  	lbu	a1, 0x10(sp)
8022faa6: 0d c1        	beqz	a0, 0x8022fac8 <.Lpcrel_hi13+0xc>
8022faa8: 05 45        	li	a0, 0x1
8022faaa: 9d e9        	bnez	a1, 0x8022fae0 <.Lpcrel_hi14+0xc>
8022faac: 22 65        	ld	a0, 0x8(sp)
8022faae: 83 45 45 03  	lbu	a1, 0x34(a0)
8022fab2: 91 89        	andi	a1, a1, 0x4
8022fab4: 89 ed        	bnez	a1, 0x8022face <.Lpcrel_hi13+0x12>
8022fab6: 0c 75        	ld	a1, 0x28(a0)
8022fab8: 08 71        	ld	a0, 0x20(a0)
8022faba: 94 6d        	ld	a3, 0x18(a1)

000000008022fabc <.Lpcrel_hi13>:
8022fabc: 97 c5 00 00  	auipc	a1, 0xc
8022fac0: 93 85 15 59  	addi	a1, a1, 0x591
8022fac4: 09 46        	li	a2, 0x2
8022fac6: 21 a8        	j	0x8022fade <.Lpcrel_hi14+0xa>
8022fac8: 33 35 b0 00  	snez	a0, a1
8022facc: 11 a8        	j	0x8022fae0 <.Lpcrel_hi14+0xc>
8022face: 0c 75        	ld	a1, 0x28(a0)
8022fad0: 08 71        	ld	a0, 0x20(a0)
8022fad2: 94 6d        	ld	a3, 0x18(a1)

000000008022fad4 <.Lpcrel_hi14>:
8022fad4: 97 c5 00 00  	auipc	a1, 0xc
8022fad8: 93 85 85 57  	addi	a1, a1, 0x578
8022fadc: 05 46        	li	a2, 0x1
8022fade: 82 96        	jalr	a3
8022fae0: a6 70        	ld	ra, 0x68(sp)
8022fae2: 06 74        	ld	s0, 0x60(sp)
8022fae4: e6 64        	ld	s1, 0x58(sp)
8022fae6: 46 69        	ld	s2, 0x50(sp)
8022fae8: a6 69        	ld	s3, 0x48(sp)
8022faea: 06 6a        	ld	s4, 0x40(sp)
8022faec: e2 7a        	ld	s5, 0x38(sp)
8022faee: 42 7b        	ld	s6, 0x30(sp)
8022faf0: a2 7b        	ld	s7, 0x28(sp)
8022faf2: 02 7c        	ld	s8, 0x20(sp)
8022faf4: e2 6c        	ld	s9, 0x18(sp)
8022faf6: 65 61        	addi	sp, sp, 0x70
8022faf8: 82 80        	ret

000000008022fafa <_ZN4core3fmt9Formatter26debug_struct_fields_finish17hceb5608869353109E>:
8022fafa: 59 71        	addi	sp, sp, -0x70
8022fafc: 86 f4        	sd	ra, 0x68(sp)
8022fafe: a2 f0        	sd	s0, 0x60(sp)
8022fb00: a6 ec        	sd	s1, 0x58(sp)
8022fb02: ca e8        	sd	s2, 0x50(sp)
8022fb04: ce e4        	sd	s3, 0x48(sp)
8022fb06: d2 e0        	sd	s4, 0x40(sp)
8022fb08: 3a e0        	sd	a4, 0x0(sp)
8022fb0a: 42 e4        	sd	a6, 0x8(sp)
8022fb0c: 63 1f 07 09  	bne	a4, a6, 0x8022fbaa <.Lpcrel_hi24+0x10>
8022fb10: 3e 8a        	mv	s4, a5
8022fb12: ba 84        	mv	s1, a4
8022fb14: 36 89        	mv	s2, a3
8022fb16: aa 89        	mv	s3, a0
8022fb18: 14 75        	ld	a3, 0x28(a0)
8022fb1a: 08 71        	ld	a0, 0x20(a0)
8022fb1c: 94 6e        	ld	a3, 0x18(a3)
8022fb1e: 82 96        	jalr	a3
8022fb20: 4e e8        	sd	s3, 0x10(sp)
8022fb22: 23 0c a1 00  	sb	a0, 0x18(sp)
8022fb26: a3 0c 01 00  	sb	zero, 0x19(sp)
8022fb2a: b1 c8        	beqz	s1, 0x8022fb7e <.Lpcrel_hi23+0xc>
8022fb2c: 13 04 89 00  	addi	s0, s2, 0x8

000000008022fb30 <.Lpcrel_hi22>:
8022fb30: 17 c5 00 00  	auipc	a0, 0xc
8022fb34: 13 09 05 1d  	addi	s2, a0, 0x1d0
8022fb38: 83 35 84 ff  	ld	a1, -0x8(s0)
8022fb3c: 10 60        	ld	a2, 0x0(s0)
8022fb3e: 08 08        	addi	a0, sp, 0x10
8022fb40: d2 86        	mv	a3, s4
8022fb42: 4a 87        	mv	a4, s2
8022fb44: 97 10 00 00  	auipc	ra, 0x1
8022fb48: e7 80 60 b4  	jalr	-0x4ba(ra) <_ZN4core3fmt8builders11DebugStruct5field17h204890760642458cE>
8022fb4c: fd 14        	addi	s1, s1, -0x1
8022fb4e: 41 0a        	addi	s4, s4, 0x10
8022fb50: 41 04        	addi	s0, s0, 0x10
8022fb52: fd f0        	bnez	s1, 0x8022fb38 <.Lpcrel_hi22+0x8>
8022fb54: 83 45 91 01  	lbu	a1, 0x19(sp)
8022fb58: 03 45 81 01  	lbu	a0, 0x18(sp)
8022fb5c: 8d c1        	beqz	a1, 0x8022fb7e <.Lpcrel_hi23+0xc>
8022fb5e: 85 45        	li	a1, 0x1
8022fb60: 0d e1        	bnez	a0, 0x8022fb82 <.Lpcrel_hi23+0x10>
8022fb62: 42 65        	ld	a0, 0x10(sp)
8022fb64: 83 45 45 03  	lbu	a1, 0x34(a0)
8022fb68: 91 89        	andi	a1, a1, 0x4
8022fb6a: 8d e5        	bnez	a1, 0x8022fb94 <.Lpcrel_hi23+0x22>
8022fb6c: 0c 75        	ld	a1, 0x28(a0)
8022fb6e: 08 71        	ld	a0, 0x20(a0)
8022fb70: 94 6d        	ld	a3, 0x18(a1)

000000008022fb72 <.Lpcrel_hi23>:
8022fb72: 97 c5 00 00  	auipc	a1, 0xc
8022fb76: 93 85 b5 4d  	addi	a1, a1, 0x4db
8022fb7a: 09 46        	li	a2, 0x2
8022fb7c: 25 a0        	j	0x8022fba4 <.Lpcrel_hi24+0xa>
8022fb7e: b3 35 a0 00  	snez	a1, a0
8022fb82: 2e 85        	mv	a0, a1
8022fb84: a6 70        	ld	ra, 0x68(sp)
8022fb86: 06 74        	ld	s0, 0x60(sp)
8022fb88: e6 64        	ld	s1, 0x58(sp)
8022fb8a: 46 69        	ld	s2, 0x50(sp)
8022fb8c: a6 69        	ld	s3, 0x48(sp)
8022fb8e: 06 6a        	ld	s4, 0x40(sp)
8022fb90: 65 61        	addi	sp, sp, 0x70
8022fb92: 82 80        	ret
8022fb94: 0c 75        	ld	a1, 0x28(a0)
8022fb96: 08 71        	ld	a0, 0x20(a0)
8022fb98: 94 6d        	ld	a3, 0x18(a1)

000000008022fb9a <.Lpcrel_hi24>:
8022fb9a: 97 c5 00 00  	auipc	a1, 0xc
8022fb9e: 93 85 25 4b  	addi	a1, a1, 0x4b2
8022fba2: 05 46        	li	a2, 0x1
8022fba4: 82 96        	jalr	a3
8022fba6: aa 85        	mv	a1, a0
8022fba8: e9 bf        	j	0x8022fb82 <.Lpcrel_hi23+0x10>
8022fbaa: 02 e8        	sd	zero, 0x10(sp)

000000008022fbac <.Lpcrel_hi21>:
8022fbac: 17 c5 00 00  	auipc	a0, 0xc
8022fbb0: 13 07 c5 13  	addi	a4, a0, 0x13c
8022fbb4: 8a 85        	mv	a1, sp
8022fbb6: 30 00        	addi	a2, sp, 0x8
8022fbb8: 14 08        	addi	a3, sp, 0x10
8022fbba: 01 45        	li	a0, 0x0
8022fbbc: 97 00 00 00  	auipc	ra, 0x0
8022fbc0: e7 80 40 79  	jalr	0x794(ra) <_ZN4core9panicking13assert_failed17h8d87a4e33aaca84cE>

000000008022fbc4 <_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h3b9aad081ca76a73E>:
8022fbc4: 39 71        	addi	sp, sp, -0x40
8022fbc6: 06 fc        	sd	ra, 0x38(sp)
8022fbc8: 22 f8        	sd	s0, 0x30(sp)
8022fbca: 26 f4        	sd	s1, 0x28(sp)
8022fbcc: 4a f0        	sd	s2, 0x20(sp)
8022fbce: 4e ec        	sd	s3, 0x18(sp)
8022fbd0: 2a 84        	mv	s0, a0
8022fbd2: 1c 75        	ld	a5, 0x28(a0)
8022fbd4: 08 71        	ld	a0, 0x20(a0)
8022fbd6: 9c 6f        	ld	a5, 0x18(a5)
8022fbd8: 3a 89        	mv	s2, a4
8022fbda: b6 89        	mv	s3, a3
8022fbdc: b2 84        	mv	s1, a2
8022fbde: 82 97        	jalr	a5
8022fbe0: 93 b5 14 00  	seqz	a1, s1
8022fbe4: 22 e4        	sd	s0, 0x8(sp)
8022fbe6: 23 08 a1 00  	sb	a0, 0x10(sp)
8022fbea: 02 e0        	sd	zero, 0x0(sp)
8022fbec: a3 08 b1 00  	sb	a1, 0x11(sp)
8022fbf0: 0a 85        	mv	a0, sp
8022fbf2: ce 85        	mv	a1, s3
8022fbf4: 4a 86        	mv	a2, s2
8022fbf6: 97 10 00 00  	auipc	ra, 0x1
8022fbfa: e7 80 20 c0  	jalr	-0x3fe(ra) <_ZN4core3fmt8builders10DebugTuple5field17h52def8de52344731E>
8022fbfe: 82 65        	ld	a1, 0x0(sp)
8022fc00: 03 46 01 01  	lbu	a2, 0x10(sp)
8022fc04: a1 c5        	beqz	a1, 0x8022fc4c <.Lpcrel_hi25+0xe>
8022fc06: 05 45        	li	a0, 0x1
8022fc08: 21 e6        	bnez	a2, 0x8022fc50 <.Lpcrel_hi25+0x12>
8022fc0a: 22 64        	ld	s0, 0x8(sp)
8022fc0c: 05 45        	li	a0, 0x1
8022fc0e: 63 95 a5 02  	bne	a1, a0, 0x8022fc38 <.Lpcrel_hi26+0x12>
8022fc12: 03 45 11 01  	lbu	a0, 0x11(sp)
8022fc16: 0d c1        	beqz	a0, 0x8022fc38 <.Lpcrel_hi26+0x12>
8022fc18: 03 45 44 03  	lbu	a0, 0x34(s0)
8022fc1c: 11 89        	andi	a0, a0, 0x4
8022fc1e: 09 ed        	bnez	a0, 0x8022fc38 <.Lpcrel_hi26+0x12>
8022fc20: 0c 74        	ld	a1, 0x28(s0)
8022fc22: 08 70        	ld	a0, 0x20(s0)
8022fc24: 94 6d        	ld	a3, 0x18(a1)

000000008022fc26 <.Lpcrel_hi26>:
8022fc26: 97 c5 00 00  	auipc	a1, 0xc
8022fc2a: 93 85 c5 42  	addi	a1, a1, 0x42c
8022fc2e: 05 46        	li	a2, 0x1
8022fc30: 82 96        	jalr	a3
8022fc32: aa 85        	mv	a1, a0
8022fc34: 05 45        	li	a0, 0x1
8022fc36: 89 ed        	bnez	a1, 0x8022fc50 <.Lpcrel_hi25+0x12>
8022fc38: 0c 74        	ld	a1, 0x28(s0)
8022fc3a: 08 70        	ld	a0, 0x20(s0)
8022fc3c: 94 6d        	ld	a3, 0x18(a1)

000000008022fc3e <.Lpcrel_hi25>:
8022fc3e: 97 c5 00 00  	auipc	a1, 0xc
8022fc42: 93 85 55 41  	addi	a1, a1, 0x415
8022fc46: 05 46        	li	a2, 0x1
8022fc48: 82 96        	jalr	a3
8022fc4a: 19 a0        	j	0x8022fc50 <.Lpcrel_hi25+0x12>
8022fc4c: 33 35 c0 00  	snez	a0, a2
8022fc50: e2 70        	ld	ra, 0x38(sp)
8022fc52: 42 74        	ld	s0, 0x30(sp)
8022fc54: a2 74        	ld	s1, 0x28(sp)
8022fc56: 02 79        	ld	s2, 0x20(sp)
8022fc58: e2 69        	ld	s3, 0x18(sp)
8022fc5a: 21 61        	addi	sp, sp, 0x40
8022fc5c: 82 80        	ret

000000008022fc5e <_ZN4core3fmt9Formatter10debug_list17heb53eb4dbb5886dcE>:
8022fc5e: 01 11        	addi	sp, sp, -0x20
8022fc60: 06 ec        	sd	ra, 0x18(sp)
8022fc62: 22 e8        	sd	s0, 0x10(sp)
8022fc64: 26 e4        	sd	s1, 0x8(sp)
8022fc66: 2e 84        	mv	s0, a1
8022fc68: 8c 75        	ld	a1, 0x28(a1)
8022fc6a: 14 70        	ld	a3, 0x20(s0)
8022fc6c: 98 6d        	ld	a4, 0x18(a1)
8022fc6e: aa 84        	mv	s1, a0

000000008022fc70 <.Lpcrel_hi38>:
8022fc70: 17 c5 00 00  	auipc	a0, 0xc
8022fc74: 93 05 55 3e  	addi	a1, a0, 0x3e5
8022fc78: 05 46        	li	a2, 0x1
8022fc7a: 36 85        	mv	a0, a3
8022fc7c: 02 97        	jalr	a4
8022fc7e: 80 e0        	sd	s0, 0x0(s1)
8022fc80: 23 84 a4 00  	sb	a0, 0x8(s1)
8022fc84: a3 84 04 00  	sb	zero, 0x9(s1)
8022fc88: e2 60        	ld	ra, 0x18(sp)
8022fc8a: 42 64        	ld	s0, 0x10(sp)
8022fc8c: a2 64        	ld	s1, 0x8(sp)
8022fc8e: 05 61        	addi	sp, sp, 0x20
8022fc90: 82 80        	ret

000000008022fc92 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E>:
8022fc92: 71 71        	addi	sp, sp, -0xb0
8022fc94: 06 f5        	sd	ra, 0xa8(sp)
8022fc96: 22 f1        	sd	s0, 0xa0(sp)
8022fc98: 26 ed        	sd	s1, 0x98(sp)
8022fc9a: 4a e9        	sd	s2, 0x90(sp)
8022fc9c: 4e e5        	sd	s3, 0x88(sp)
8022fc9e: 52 e1        	sd	s4, 0x80(sp)
8022fca0: d6 fc        	sd	s5, 0x78(sp)
8022fca2: da f8        	sd	s6, 0x70(sp)
8022fca4: de f4        	sd	s7, 0x68(sp)
8022fca6: e2 f0        	sd	s8, 0x60(sp)
8022fca8: e6 ec        	sd	s9, 0x58(sp)
8022fcaa: ea e8        	sd	s10, 0x50(sp)
8022fcac: ee e4        	sd	s11, 0x48(sp)
8022fcae: 03 3c 86 02  	ld	s8, 0x28(a2)
8022fcb2: 83 3a 06 02  	ld	s5, 0x20(a2)
8022fcb6: 83 37 0c 02  	ld	a5, 0x20(s8)
8022fcba: ae 89        	mv	s3, a1
8022fcbc: 2a 8a        	mv	s4, a0
8022fcbe: 93 05 20 02  	li	a1, 0x22
8022fcc2: 56 85        	mv	a0, s5
8022fcc4: 3e f0        	sd	a5, 0x20(sp)
8022fcc6: 82 97        	jalr	a5
8022fcc8: 0d c1        	beqz	a0, 0x8022fcea <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x58>
8022fcca: 05 45        	li	a0, 0x1
8022fccc: aa 70        	ld	ra, 0xa8(sp)
8022fcce: 0a 74        	ld	s0, 0xa0(sp)
8022fcd0: ea 64        	ld	s1, 0x98(sp)
8022fcd2: 4a 69        	ld	s2, 0x90(sp)
8022fcd4: aa 69        	ld	s3, 0x88(sp)
8022fcd6: 0a 6a        	ld	s4, 0x80(sp)
8022fcd8: e6 7a        	ld	s5, 0x78(sp)
8022fcda: 46 7b        	ld	s6, 0x70(sp)
8022fcdc: a6 7b        	ld	s7, 0x68(sp)
8022fcde: 06 7c        	ld	s8, 0x60(sp)
8022fce0: e6 6c        	ld	s9, 0x58(sp)
8022fce2: 46 6d        	ld	s10, 0x50(sp)
8022fce4: a6 6d        	ld	s11, 0x48(sp)
8022fce6: 4d 61        	addi	sp, sp, 0xb0
8022fce8: 82 80        	ret
8022fcea: 63 81 09 20  	beqz	s3, 0x8022feec <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x25a>
8022fcee: 01 44        	li	s0, 0x0
8022fcf0: 01 4b        	li	s6, 0x0
8022fcf2: b3 0c 3a 01  	add	s9, s4, s3
8022fcf6: 41 65        	lui	a0, 0x10
8022fcf8: 9b 04 15 00  	addiw	s1, a0, 0x1
8022fcfc: 13 0d 00 08  	li	s10, 0x80
8022fd00: 52 89        	mv	s2, s4
8022fd02: 52 ec        	sd	s4, 0x18(sp)
8022fd04: 62 e8        	sd	s8, 0x10(sp)
8022fd06: 66 e4        	sd	s9, 0x8(sp)
8022fd08: 26 e0        	sd	s1, 0x0(sp)
8022fd0a: 19 a8        	j	0x8022fd20 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x8e>
8022fd0c: 5a 94        	add	s0, s0, s6
8022fd0e: 62 6a        	ld	s4, 0x18(sp)
8022fd10: 42 6c        	ld	s8, 0x10(sp)
8022fd12: a2 6c        	ld	s9, 0x8(sp)
8022fd14: 82 64        	ld	s1, 0x0(sp)
8022fd16: 33 0b bb 41  	sub	s6, s6, s11
8022fd1a: 4a 9b        	add	s6, s6, s2
8022fd1c: 63 0b 99 1b  	beq	s2, s9, 0x8022fed2 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x240>
8022fd20: ca 8d        	mv	s11, s2
8022fd22: 03 05 09 00  	lb	a0, 0x0(s2)
8022fd26: 93 7b f5 0f  	andi	s7, a0, 0xff
8022fd2a: 63 45 05 00  	bltz	a0, 0x8022fd34 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0xa2>
8022fd2e: 13 89 1d 00  	addi	s2, s11, 0x1
8022fd32: 8d a0        	j	0x8022fd94 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x102>
8022fd34: 83 c5 1d 00  	lbu	a1, 0x1(s11)
8022fd38: 13 f5 fb 01  	andi	a0, s7, 0x1f
8022fd3c: 93 f5 f5 03  	andi	a1, a1, 0x3f
8022fd40: 13 06 f0 0d  	li	a2, 0xdf
8022fd44: 63 7f 76 03  	bgeu	a2, s7, 0x8022fd82 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0xf0>
8022fd48: 03 c6 2d 00  	lbu	a2, 0x2(s11)
8022fd4c: 13 89 3d 00  	addi	s2, s11, 0x3
8022fd50: 9a 05        	slli	a1, a1, 0x6
8022fd52: 13 76 f6 03  	andi	a2, a2, 0x3f
8022fd56: d1 8d        	or	a1, a1, a2
8022fd58: 13 06 00 0f  	li	a2, 0xf0
8022fd5c: 63 e9 cb 02  	bltu	s7, a2, 0x8022fd8e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0xfc>
8022fd60: 03 46 09 00  	lbu	a2, 0x0(s2)
8022fd64: 76 15        	slli	a0, a0, 0x3d
8022fd66: 2d 91        	srli	a0, a0, 0x2b
8022fd68: 9a 05        	slli	a1, a1, 0x6
8022fd6a: 13 76 f6 03  	andi	a2, a2, 0x3f
8022fd6e: d1 8d        	or	a1, a1, a2
8022fd70: b3 eb a5 00  	or	s7, a1, a0
8022fd74: 37 05 11 00  	lui	a0, 0x110
8022fd78: 63 8d ab 14  	beq	s7, a0, 0x8022fed2 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x240>
8022fd7c: 13 89 4d 00  	addi	s2, s11, 0x4
8022fd80: 11 a8        	j	0x8022fd94 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x102>
8022fd82: 13 89 2d 00  	addi	s2, s11, 0x2
8022fd86: 1a 05        	slli	a0, a0, 0x6
8022fd88: b3 6b b5 00  	or	s7, a0, a1
8022fd8c: 21 a0        	j	0x8022fd94 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x102>
8022fd8e: 32 05        	slli	a0, a0, 0xc
8022fd90: b3 eb a5 00  	or	s7, a1, a0
8022fd94: 68 10        	addi	a0, sp, 0x2c
8022fd96: de 85        	mv	a1, s7
8022fd98: 26 86        	mv	a2, s1
8022fd9a: 97 f0 ff ff  	auipc	ra, 0xfffff
8022fd9e: e7 80 80 2f  	jalr	0x2f8(ra) <ekernel+0xffce2092>
8022fda2: 03 45 c1 02  	lbu	a0, 0x2c(sp)
8022fda6: e3 08 a5 f7  	beq	a0, s10, 0x8022fd16 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x84>
8022fdaa: 03 45 71 03  	lbu	a0, 0x37(sp)
8022fdae: 83 45 61 03  	lbu	a1, 0x36(sp)
8022fdb2: 0d 9d        	subw	a0, a0, a1
8022fdb4: 13 75 f5 0f  	andi	a0, a0, 0xff
8022fdb8: 85 45        	li	a1, 0x1
8022fdba: e3 0e b5 f4  	beq	a0, a1, 0x8022fd16 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x84>
8022fdbe: 63 6e 8b 18  	bltu	s6, s0, 0x8022ff5a <.Lpcrel_hi45>
8022fdc2: b3 05 8a 00  	add	a1, s4, s0
8022fdc6: 01 cc        	beqz	s0, 0x8022fdde <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x14c>
8022fdc8: 63 79 34 01  	bgeu	s0, s3, 0x8022fdda <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x148>
8022fdcc: 03 85 05 00  	lb	a0, 0x0(a1)
8022fdd0: 13 06 00 fc  	li	a2, -0x40
8022fdd4: 63 55 c5 00  	bge	a0, a2, 0x8022fdde <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x14c>
8022fdd8: 49 a2        	j	0x8022ff5a <.Lpcrel_hi45>
8022fdda: 63 10 34 19  	bne	s0, s3, 0x8022ff5a <.Lpcrel_hi45>
8022fdde: 63 0f 0b 00  	beqz	s6, 0x8022fdfc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x16a>
8022fde2: 63 7b 3b 01  	bgeu	s6, s3, 0x8022fdf8 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x166>
8022fde6: 33 05 6a 01  	add	a0, s4, s6
8022fdea: 03 05 05 00  	lb	a0, 0x0(a0)
8022fdee: 13 06 f0 fb  	li	a2, -0x41
8022fdf2: 63 45 a6 00  	blt	a2, a0, 0x8022fdfc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x16a>
8022fdf6: 95 a2        	j	0x8022ff5a <.Lpcrel_hi45>
8022fdf8: 63 11 3b 17  	bne	s6, s3, 0x8022ff5a <.Lpcrel_hi45>
8022fdfc: 83 36 8c 01  	ld	a3, 0x18(s8)
8022fe00: 33 06 8b 40  	sub	a2, s6, s0
8022fe04: 56 85        	mv	a0, s5
8022fe06: 82 96        	jalr	a3
8022fe08: e3 11 05 ec  	bnez	a0, 0x8022fcca <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x38>
8022fe0c: 52 55        	lw	a0, 0x34(sp)
8022fe0e: 83 65 01 03  	lwu	a1, 0x30(sp)
8022fe12: 03 66 c1 02  	lwu	a2, 0x2c(sp)
8022fe16: aa c0        	sw	a0, 0x40(sp)
8022fe18: 82 15        	slli	a1, a1, 0x20
8022fe1a: d1 8d        	or	a1, a1, a2
8022fe1c: 13 f5 f5 0f  	andi	a0, a1, 0xff
8022fe20: 2e fc        	sd	a1, 0x38(sp)
8022fe22: 63 14 a5 05  	bne	a0, s10, 0x8022fe6a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x1d8>
8022fe26: 93 04 00 08  	li	s1, 0x80
8022fe2a: 11 a8        	j	0x8022fe3e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x1ac>
8022fe2c: f2 55        	lw	a1, 0x3c(sp)
8022fe2e: 81 44        	li	s1, 0x0
8022fe30: 82 c0        	sw	zero, 0x40(sp)
8022fe32: 02 fc        	sd	zero, 0x38(sp)
8022fe34: 56 85        	mv	a0, s5
8022fe36: 82 77        	ld	a5, 0x20(sp)
8022fe38: 82 97        	jalr	a5
8022fe3a: e3 18 05 e8  	bnez	a0, 0x8022fcca <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x38>
8022fe3e: 13 f5 f4 0f  	andi	a0, s1, 0xff
8022fe42: e3 05 a5 ff  	beq	a0, s10, 0x8022fe2c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x19a>
8022fe46: 03 44 21 04  	lbu	s0, 0x42(sp)
8022fe4a: 03 45 31 04  	lbu	a0, 0x43(sp)
8022fe4e: 63 74 a4 06  	bgeu	s0, a0, 0x8022feb6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x224>
8022fe52: 13 05 14 00  	addi	a0, s0, 0x1
8022fe56: 23 01 a1 04  	sb	a0, 0x42(sp)
8022fe5a: 29 45        	li	a0, 0xa
8022fe5c: 63 75 a4 0e  	bgeu	s0, a0, 0x8022ff46 <.Lpcrel_hi46>
8022fe60: 28 18        	addi	a0, sp, 0x38
8022fe62: 2a 94        	add	s0, s0, a0
8022fe64: 83 45 04 00  	lbu	a1, 0x0(s0)
8022fe68: f1 b7        	j	0x8022fe34 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x1a2>
8022fe6a: 03 4a 21 04  	lbu	s4, 0x42(sp)
8022fe6e: 29 45        	li	a0, 0xa
8022fe70: 52 84        	mv	s0, s4
8022fe72: 63 63 45 01  	bltu	a0, s4, 0x8022fe78 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x1e6>
8022fe76: 29 44        	li	s0, 0xa
8022fe78: 03 45 31 04  	lbu	a0, 0x43(sp)
8022fe7c: b3 04 44 41  	sub	s1, s0, s4
8022fe80: b3 05 45 41  	sub	a1, a0, s4
8022fe84: 33 35 b5 00  	sltu	a0, a0, a1
8022fe88: 7d 15        	addi	a0, a0, -0x1
8022fe8a: b3 7c b5 00  	and	s9, a0, a1
8022fe8e: 13 0c 81 03  	addi	s8, sp, 0x38
8022fe92: 52 9c        	add	s8, s8, s4
8022fe94: 05 0a        	addi	s4, s4, 0x1
8022fe96: 63 80 0c 02  	beqz	s9, 0x8022feb6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x224>
8022fe9a: 23 01 41 05  	sb	s4, 0x42(sp)
8022fe9e: c5 c4        	beqz	s1, 0x8022ff46 <.Lpcrel_hi46>
8022fea0: 83 45 0c 00  	lbu	a1, 0x0(s8)
8022fea4: 56 85        	mv	a0, s5
8022fea6: 82 77        	ld	a5, 0x20(sp)
8022fea8: 82 97        	jalr	a5
8022feaa: fd 14        	addi	s1, s1, -0x1
8022feac: fd 1c        	addi	s9, s9, -0x1
8022feae: 05 0c        	addi	s8, s8, 0x1
8022feb0: 05 0a        	addi	s4, s4, 0x1
8022feb2: 75 d1        	beqz	a0, 0x8022fe96 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x204>
8022feb4: 19 bd        	j	0x8022fcca <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x38>
8022feb6: 05 44        	li	s0, 0x1
8022feb8: e3 ea ab e5  	bltu	s7, s10, 0x8022fd0c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x7a>
8022febc: 13 d5 bb 00  	srli	a0, s7, 0xb
8022fec0: 09 44        	li	s0, 0x2
8022fec2: e3 05 05 e4  	beqz	a0, 0x8022fd0c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x7a>
8022fec6: 13 d5 0b 01  	srli	a0, s7, 0x10
8022feca: 33 34 a0 00  	snez	s0, a0
8022fece: 0d 04        	addi	s0, s0, 0x3
8022fed0: 35 bd        	j	0x8022fd0c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x7a>
8022fed2: 09 cc        	beqz	s0, 0x8022feec <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x25a>
8022fed4: 63 7a 34 05  	bgeu	s0, s3, 0x8022ff28 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x296>
8022fed8: 33 05 8a 00  	add	a0, s4, s0
8022fedc: 03 05 05 00  	lb	a0, 0x0(a0)
8022fee0: 93 05 f0 fb  	li	a1, -0x41
8022fee4: 63 d5 a5 04  	bge	a1, a0, 0x8022ff2e <.Lpcrel_hi44>
8022fee8: 22 85        	mv	a0, s0
8022feea: 11 a0        	j	0x8022feee <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x25c>
8022feec: 01 45        	li	a0, 0x0
8022feee: 83 36 8c 01  	ld	a3, 0x18(s8)
8022fef2: b3 05 aa 00  	add	a1, s4, a0
8022fef6: 33 86 a9 40  	sub	a2, s3, a0
8022fefa: 56 85        	mv	a0, s5
8022fefc: 82 96        	jalr	a3
8022fefe: e3 16 05 dc  	bnez	a0, 0x8022fcca <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x38>
8022ff02: 93 05 20 02  	li	a1, 0x22
8022ff06: 56 85        	mv	a0, s5
8022ff08: 82 77        	ld	a5, 0x20(sp)
8022ff0a: aa 70        	ld	ra, 0xa8(sp)
8022ff0c: 0a 74        	ld	s0, 0xa0(sp)
8022ff0e: ea 64        	ld	s1, 0x98(sp)
8022ff10: 4a 69        	ld	s2, 0x90(sp)
8022ff12: aa 69        	ld	s3, 0x88(sp)
8022ff14: 0a 6a        	ld	s4, 0x80(sp)
8022ff16: e6 7a        	ld	s5, 0x78(sp)
8022ff18: 46 7b        	ld	s6, 0x70(sp)
8022ff1a: a6 7b        	ld	s7, 0x68(sp)
8022ff1c: 06 7c        	ld	s8, 0x60(sp)
8022ff1e: e6 6c        	ld	s9, 0x58(sp)
8022ff20: 46 6d        	ld	s10, 0x50(sp)
8022ff22: a6 6d        	ld	s11, 0x48(sp)
8022ff24: 4d 61        	addi	sp, sp, 0xb0
8022ff26: 82 87        	jr	a5
8022ff28: 4e 85        	mv	a0, s3
8022ff2a: e3 02 34 fd  	beq	s0, s3, 0x8022feee <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17hb5a8d9c76ef412b1E+0x25c>

000000008022ff2e <.Lpcrel_hi44>:
8022ff2e: 17 c5 00 00  	auipc	a0, 0xc
8022ff32: 13 07 25 df  	addi	a4, a0, -0x20e
8022ff36: 52 85        	mv	a0, s4
8022ff38: ce 85        	mv	a1, s3
8022ff3a: 22 86        	mv	a2, s0
8022ff3c: ce 86        	mv	a3, s3
8022ff3e: 97 10 00 00  	auipc	ra, 0x1
8022ff42: e7 80 20 28  	jalr	0x282(ra) <_ZN4core3str16slice_error_fail17haf0c98b3a2e131ceE>

000000008022ff46 <.Lpcrel_hi46>:
8022ff46: 17 c5 00 00  	auipc	a0, 0xc
8022ff4a: 13 06 25 0e  	addi	a2, a0, 0xe2
8022ff4e: a9 45        	li	a1, 0xa
8022ff50: 22 85        	mv	a0, s0
8022ff52: 97 00 00 00  	auipc	ra, 0x0
8022ff56: e7 80 e0 35  	jalr	0x35e(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

000000008022ff5a <.Lpcrel_hi45>:
8022ff5a: 17 c5 00 00  	auipc	a0, 0xc
8022ff5e: 13 07 e5 dd  	addi	a4, a0, -0x222
8022ff62: 52 85        	mv	a0, s4
8022ff64: ce 85        	mv	a1, s3
8022ff66: 22 86        	mv	a2, s0
8022ff68: da 86        	mv	a3, s6
8022ff6a: 97 10 00 00  	auipc	ra, 0x1
8022ff6e: e7 80 60 25  	jalr	0x256(ra) <_ZN4core3str16slice_error_fail17haf0c98b3a2e131ceE>

000000008022ff72 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17hd7ed1d762e2594f9E>:
8022ff72: ae 86        	mv	a3, a1
8022ff74: aa 85        	mv	a1, a0
8022ff76: 32 85        	mv	a0, a2
8022ff78: 36 86        	mv	a2, a3
8022ff7a: 17 03 00 00  	auipc	t1, 0x0
8022ff7e: 67 00 63 8b  	jr	-0x74a(t1) <_ZN4core3fmt9Formatter3pad17h7f26da9a3b2d5a37E>

000000008022ff82 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E>:
8022ff82: 1d 71        	addi	sp, sp, -0x60
8022ff84: 86 ec        	sd	ra, 0x58(sp)
8022ff86: a2 e8        	sd	s0, 0x50(sp)
8022ff88: a6 e4        	sd	s1, 0x48(sp)
8022ff8a: ca e0        	sd	s2, 0x40(sp)
8022ff8c: 4e fc        	sd	s3, 0x38(sp)
8022ff8e: 52 f8        	sd	s4, 0x30(sp)
8022ff90: 56 f4        	sd	s5, 0x28(sp)
8022ff92: 5a f0        	sd	s6, 0x20(sp)
8022ff94: 90 75        	ld	a2, 0x28(a1)
8022ff96: 83 ba 05 02  	ld	s5, 0x20(a1)
8022ff9a: 1c 72        	ld	a5, 0x20(a2)
8022ff9c: aa 84        	mv	s1, a0
8022ff9e: 93 05 70 02  	li	a1, 0x27
8022ffa2: 56 85        	mv	a0, s5
8022ffa4: 3e e4        	sd	a5, 0x8(sp)
8022ffa6: 82 97        	jalr	a5
8022ffa8: 01 cd        	beqz	a0, 0x8022ffc0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0x3e>
8022ffaa: 05 45        	li	a0, 0x1
8022ffac: e6 60        	ld	ra, 0x58(sp)
8022ffae: 46 64        	ld	s0, 0x50(sp)
8022ffb0: a6 64        	ld	s1, 0x48(sp)
8022ffb2: 06 69        	ld	s2, 0x40(sp)
8022ffb4: e2 79        	ld	s3, 0x38(sp)
8022ffb6: 42 7a        	ld	s4, 0x30(sp)
8022ffb8: a2 7a        	ld	s5, 0x28(sp)
8022ffba: 02 7b        	ld	s6, 0x20(sp)
8022ffbc: 25 61        	addi	sp, sp, 0x60
8022ffbe: 82 80        	ret
8022ffc0: 8c 40        	lw	a1, 0x0(s1)
8022ffc2: 08 08        	addi	a0, sp, 0x10
8022ffc4: 13 06 10 10  	li	a2, 0x101
8022ffc8: 13 09 01 01  	addi	s2, sp, 0x10
8022ffcc: 97 f0 ff ff  	auipc	ra, 0xfffff
8022ffd0: e7 80 60 0c  	jalr	0xc6(ra) <ekernel+0xffce2092>
8022ffd4: 03 45 01 01  	lbu	a0, 0x10(sp)
8022ffd8: 93 09 00 08  	li	s3, 0x80
8022ffdc: 63 16 35 05  	bne	a0, s3, 0x80230028 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0xa6>
8022ffe0: 29 4a        	li	s4, 0xa
8022ffe2: 13 04 00 08  	li	s0, 0x80
8022ffe6: 09 a8        	j	0x8022fff8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0x76>
8022ffe8: d2 45        	lw	a1, 0x14(sp)
8022ffea: 01 44        	li	s0, 0x0
8022ffec: 02 cc        	sw	zero, 0x18(sp)
8022ffee: 02 e8        	sd	zero, 0x10(sp)
8022fff0: 56 85        	mv	a0, s5
8022fff2: a2 67        	ld	a5, 0x8(sp)
8022fff4: 82 97        	jalr	a5
8022fff6: 55 f9        	bnez	a0, 0x8022ffaa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0x28>
8022fff8: 13 75 f4 0f  	andi	a0, s0, 0xff
8022fffc: e3 06 35 ff  	beq	a0, s3, 0x8022ffe8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0x66>
80230000: 03 4b a1 01  	lbu	s6, 0x1a(sp)
80230004: 03 45 b1 01  	lbu	a0, 0x1b(sp)
80230008: 63 76 ab 06  	bgeu	s6, a0, 0x80230074 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0xf2>
8023000c: 13 05 1b 00  	addi	a0, s6, 0x1
80230010: 23 0d a1 00  	sb	a0, 0x1a(sp)
80230014: 63 7e 4b 07  	bgeu	s6, s4, 0x80230090 <.Lpcrel_hi47>
80230018: 4a 9b        	add	s6, s6, s2
8023001a: 83 45 0b 00  	lbu	a1, 0x0(s6)
8023001e: 56 85        	mv	a0, s5
80230020: a2 67        	ld	a5, 0x8(sp)
80230022: 82 97        	jalr	a5
80230024: 71 d9        	beqz	a0, 0x8022fff8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0x76>
80230026: 51 b7        	j	0x8022ffaa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0x28>
80230028: 83 44 a1 01  	lbu	s1, 0x1a(sp)
8023002c: 03 45 b1 01  	lbu	a0, 0x1b(sp)
80230030: a9 45        	li	a1, 0xa
80230032: 26 8b        	mv	s6, s1
80230034: 63 e3 95 00  	bltu	a1, s1, 0x8023003a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0xb8>
80230038: 29 4b        	li	s6, 0xa
8023003a: 33 09 9b 40  	sub	s2, s6, s1
8023003e: b3 05 95 40  	sub	a1, a0, s1
80230042: 33 35 b5 00  	sltu	a0, a0, a1
80230046: 7d 15        	addi	a0, a0, -0x1
80230048: b3 79 b5 00  	and	s3, a0, a1
8023004c: 00 08        	addi	s0, sp, 0x10
8023004e: 26 94        	add	s0, s0, s1
80230050: 85 04        	addi	s1, s1, 0x1
80230052: 63 81 09 02  	beqz	s3, 0x80230074 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0xf2>
80230056: 23 0d 91 00  	sb	s1, 0x1a(sp)
8023005a: 63 0b 09 02  	beqz	s2, 0x80230090 <.Lpcrel_hi47>
8023005e: 83 45 04 00  	lbu	a1, 0x0(s0)
80230062: 56 85        	mv	a0, s5
80230064: a2 67        	ld	a5, 0x8(sp)
80230066: 82 97        	jalr	a5
80230068: 7d 19        	addi	s2, s2, -0x1
8023006a: fd 19        	addi	s3, s3, -0x1
8023006c: 05 04        	addi	s0, s0, 0x1
8023006e: 85 04        	addi	s1, s1, 0x1
80230070: 6d d1        	beqz	a0, 0x80230052 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0xd0>
80230072: 25 bf        	j	0x8022ffaa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17he1bc17831bf2c547E+0x28>
80230074: 93 05 70 02  	li	a1, 0x27
80230078: 56 85        	mv	a0, s5
8023007a: a2 67        	ld	a5, 0x8(sp)
8023007c: e6 60        	ld	ra, 0x58(sp)
8023007e: 46 64        	ld	s0, 0x50(sp)
80230080: a6 64        	ld	s1, 0x48(sp)
80230082: 06 69        	ld	s2, 0x40(sp)
80230084: e2 79        	ld	s3, 0x38(sp)
80230086: 42 7a        	ld	s4, 0x30(sp)
80230088: a2 7a        	ld	s5, 0x28(sp)
8023008a: 02 7b        	ld	s6, 0x20(sp)
8023008c: 25 61        	addi	sp, sp, 0x60
8023008e: 82 87        	jr	a5

0000000080230090 <.Lpcrel_hi47>:
80230090: 17 c5 00 00  	auipc	a0, 0xc
80230094: 13 06 85 f9  	addi	a2, a0, -0x68
80230098: a9 45        	li	a1, 0xa
8023009a: 5a 85        	mv	a0, s6
8023009c: 97 00 00 00  	auipc	ra, 0x0
802300a0: e7 80 40 21  	jalr	0x214(ra) <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>

00000000802300a4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h63ff666a53ad54bfE>:
802300a4: 10 65        	ld	a2, 0x8(a0)
802300a6: 08 61        	ld	a0, 0x0(a0)
802300a8: 1c 6e        	ld	a5, 0x18(a2)
802300aa: 82 87        	jr	a5

00000000802300ac <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb9dcea06e1f7b53cE>:
802300ac: 75 71        	addi	sp, sp, -0x90
802300ae: 06 e5        	sd	ra, 0x88(sp)
802300b0: 2e 88        	mv	a6, a1
802300b2: 83 e5 45 03  	lwu	a1, 0x34(a1)
802300b6: 08 61        	ld	a0, 0x0(a0)
802300b8: 13 f6 05 01  	andi	a2, a1, 0x10
802300bc: 09 ee        	bnez	a2, 0x802300d6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb9dcea06e1f7b53cE+0x2a>
802300be: 93 f5 05 02  	andi	a1, a1, 0x20
802300c2: b9 e9        	bnez	a1, 0x80230118 <.Lpcrel_hi53+0xa>
802300c4: 08 61        	ld	a0, 0x0(a0)
802300c6: 85 45        	li	a1, 0x1
802300c8: 42 86        	mv	a2, a6
802300ca: aa 60        	ld	ra, 0x88(sp)
802300cc: 49 61        	addi	sp, sp, 0x90
802300ce: 17 13 00 00  	auipc	t1, 0x1
802300d2: 67 00 c3 e2  	jr	-0x1d4(t1) <_ZN4core3fmt3num3imp7fmt_u6417h7453891336dff777E.llvm.11516760488915390033>
802300d6: 08 61        	ld	a0, 0x0(a0)
802300d8: 81 47        	li	a5, 0x0
802300da: 30 01        	addi	a2, sp, 0x88
802300dc: a9 45        	li	a1, 0xa
802300de: 19 a8        	j	0x802300f4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb9dcea06e1f7b53cE+0x48>
802300e0: 93 86 76 05  	addi	a3, a3, 0x57
802300e4: 13 07 f6 ff  	addi	a4, a2, -0x1
802300e8: 11 81        	srli	a0, a0, 0x4
802300ea: a3 0f d6 fe  	sb	a3, -0x1(a2)
802300ee: 85 07        	addi	a5, a5, 0x1
802300f0: 3a 86        	mv	a2, a4
802300f2: 01 c9        	beqz	a0, 0x80230102 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb9dcea06e1f7b53cE+0x56>
802300f4: 93 76 f5 00  	andi	a3, a0, 0xf
802300f8: e3 f4 b6 fe  	bgeu	a3, a1, 0x802300e0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb9dcea06e1f7b53cE+0x34>
802300fc: 93 86 06 03  	addi	a3, a3, 0x30
80230100: d5 b7        	j	0x802300e4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb9dcea06e1f7b53cE+0x38>
80230102: 93 05 00 08  	li	a1, 0x80
80230106: 33 85 f5 40  	sub	a0, a1, a5
8023010a: 63 e1 a5 06  	bltu	a1, a0, 0x8023016c <.Lpcrel_hi52>

000000008023010e <.Lpcrel_hi53>:
8023010e: 17 c5 00 00  	auipc	a0, 0xc
80230112: 13 06 a5 92  	addi	a2, a0, -0x6d6
80230116: 89 a0        	j	0x80230158 <.Lpcrel_hi55+0x8>
80230118: 08 61        	ld	a0, 0x0(a0)
8023011a: 81 47        	li	a5, 0x0
8023011c: 30 01        	addi	a2, sp, 0x88
8023011e: a9 45        	li	a1, 0xa
80230120: 19 a8        	j	0x80230136 <.Lpcrel_hi53+0x28>
80230122: 93 86 76 03  	addi	a3, a3, 0x37
80230126: 13 07 f6 ff  	addi	a4, a2, -0x1
8023012a: 11 81        	srli	a0, a0, 0x4
8023012c: a3 0f d6 fe  	sb	a3, -0x1(a2)
80230130: 85 07        	addi	a5, a5, 0x1
80230132: 3a 86        	mv	a2, a4
80230134: 01 c9        	beqz	a0, 0x80230144 <.Lpcrel_hi53+0x36>
80230136: 93 76 f5 00  	andi	a3, a0, 0xf
8023013a: e3 f4 b6 fe  	bgeu	a3, a1, 0x80230122 <.Lpcrel_hi53+0x14>
8023013e: 93 86 06 03  	addi	a3, a3, 0x30
80230142: d5 b7        	j	0x80230126 <.Lpcrel_hi53+0x18>
80230144: 93 05 00 08  	li	a1, 0x80
80230148: 33 85 f5 40  	sub	a0, a1, a5
8023014c: 63 ea a5 02  	bltu	a1, a0, 0x80230180 <.Lpcrel_hi54>

0000000080230150 <.Lpcrel_hi55>:
80230150: 17 c5 00 00  	auipc	a0, 0xc
80230154: 13 06 85 8e  	addi	a2, a0, -0x718
80230158: 85 45        	li	a1, 0x1
8023015a: 89 46        	li	a3, 0x2
8023015c: 42 85        	mv	a0, a6
8023015e: 97 f0 ff ff  	auipc	ra, 0xfffff
80230162: e7 80 00 47  	jalr	0x470(ra) <ekernel+0xffce25ce>
80230166: aa 60        	ld	ra, 0x88(sp)
80230168: 49 61        	addi	sp, sp, 0x90
8023016a: 82 80        	ret

000000008023016c <.Lpcrel_hi52>:
8023016c: 97 c5 00 00  	auipc	a1, 0xc
80230170: 13 86 45 8b  	addi	a2, a1, -0x74c
80230174: 93 05 00 08  	li	a1, 0x80
80230178: 97 10 00 00  	auipc	ra, 0x1
8023017c: e7 80 40 4e  	jalr	0x4e4(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

0000000080230180 <.Lpcrel_hi54>:
80230180: 97 c5 00 00  	auipc	a1, 0xc
80230184: 13 86 05 8a  	addi	a2, a1, -0x760
80230188: 93 05 00 08  	li	a1, 0x80
8023018c: 97 10 00 00  	auipc	ra, 0x1
80230190: e7 80 00 4d  	jalr	0x4d0(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

0000000080230194 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hdb20a813d94b86d0E>:
80230194: 14 61        	ld	a3, 0x0(a0)
80230196: 10 65        	ld	a2, 0x8(a0)
80230198: 2e 85        	mv	a0, a1
8023019a: b6 85        	mv	a1, a3
8023019c: 17 f3 ff ff  	auipc	t1, 0xfffff
802301a0: 67 00 43 69  	jr	0x694(t1) <ekernel+0xffce2830>

00000000802301a4 <_ZN4core3ptr28drop_in_place$LT$$RF$u64$GT$17h4f452c96bc7d8114E>:
802301a4: 82 80        	ret

00000000802301a6 <_ZN4core3ptr88drop_in_place$LT$core..panic..panic_info..PanicInfo..internal_constructor..NoPayload$GT$17hb09b58eec139d1a3E>:
802301a6: 82 80        	ret

00000000802301a8 <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>:
802301a8: 79 71        	addi	sp, sp, -0x30

00000000802301aa <.Lpcrel_hi0>:
802301aa: 17 c6 00 00  	auipc	a2, 0xc
802301ae: 13 06 66 ba  	addi	a2, a2, -0x45a
802301b2: 32 e4        	sd	a2, 0x8(sp)

00000000802301b4 <.Lpcrel_hi1>:
802301b4: 17 c6 00 00  	auipc	a2, 0xc
802301b8: 13 06 c6 b9  	addi	a2, a2, -0x464
802301bc: 32 e8        	sd	a2, 0x10(sp)
802301be: 2a ec        	sd	a0, 0x18(sp)
802301c0: 2e f0        	sd	a1, 0x20(sp)
802301c2: 05 45        	li	a0, 0x1
802301c4: 23 14 a1 02  	sh	a0, 0x28(sp)
802301c8: 28 00        	addi	a0, sp, 0x8
802301ca: 97 60 fd ff  	auipc	ra, 0xfffd6
802301ce: e7 80 80 62  	jalr	0x628(ra) <ekernel+0xffcb97f2>

00000000802301d2 <_ZN4core9panicking18panic_nounwind_fmt17hc7c1c779817a7c2dE>:
802301d2: 1d 71        	addi	sp, sp, -0x60
802301d4: 14 75        	ld	a3, 0x28(a0)
802301d6: 18 71        	ld	a4, 0x20(a0)
802301d8: 36 f8        	sd	a3, 0x30(sp)
802301da: 3a f4        	sd	a4, 0x28(sp)
802301dc: 14 6d        	ld	a3, 0x18(a0)
802301de: 18 69        	ld	a4, 0x10(a0)
802301e0: 1c 65        	ld	a5, 0x8(a0)
802301e2: 08 61        	ld	a0, 0x0(a0)
802301e4: 36 f0        	sd	a3, 0x20(sp)
802301e6: 3a ec        	sd	a4, 0x18(sp)
802301e8: 3e e8        	sd	a5, 0x10(sp)
802301ea: 2a e4        	sd	a0, 0x8(sp)

00000000802301ec <.Lpcrel_hi2>:
802301ec: 17 c5 00 00  	auipc	a0, 0xc
802301f0: 13 05 45 b6  	addi	a0, a0, -0x49c
802301f4: 2a fc        	sd	a0, 0x38(sp)

00000000802301f6 <.Lpcrel_hi3>:
802301f6: 17 c5 00 00  	auipc	a0, 0xc
802301fa: 13 05 a5 b5  	addi	a0, a0, -0x4a6
802301fe: aa e0        	sd	a0, 0x40(sp)
80230200: 28 00        	addi	a0, sp, 0x8
80230202: aa e4        	sd	a0, 0x48(sp)
80230204: b2 e8        	sd	a2, 0x50(sp)
80230206: 23 0c 01 04  	sb	zero, 0x58(sp)
8023020a: a3 0c b1 04  	sb	a1, 0x59(sp)
8023020e: 28 18        	addi	a0, sp, 0x38
80230210: 97 60 fd ff  	auipc	ra, 0xfffd6
80230214: e7 80 20 5e  	jalr	0x5e2(ra) <ekernel+0xffcb97f2>

0000000080230218 <_ZN4core9panicking5panic17hb9241eaa1adcf543E>:
80230218: 39 71        	addi	sp, sp, -0x40
8023021a: 2a f8        	sd	a0, 0x30(sp)
8023021c: 2e fc        	sd	a1, 0x38(sp)
8023021e: 08 18        	addi	a0, sp, 0x30
80230220: 2a e0        	sd	a0, 0x0(sp)
80230222: 05 45        	li	a0, 0x1
80230224: 2a e4        	sd	a0, 0x8(sp)
80230226: 02 f0        	sd	zero, 0x20(sp)

0000000080230228 <.Lpcrel_hi4>:
80230228: 17 c5 00 00  	auipc	a0, 0xc
8023022c: 13 05 85 b2  	addi	a0, a0, -0x4d8
80230230: 2a e8        	sd	a0, 0x10(sp)
80230232: 02 ec        	sd	zero, 0x18(sp)
80230234: 0a 85        	mv	a0, sp
80230236: b2 85        	mv	a1, a2
80230238: 97 00 00 00  	auipc	ra, 0x0
8023023c: e7 80 00 f7  	jalr	-0x90(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

0000000080230240 <_ZN4core9panicking14panic_nounwind17h232f513c0227845bE>:
80230240: 39 71        	addi	sp, sp, -0x40
80230242: 2a f8        	sd	a0, 0x30(sp)
80230244: 2e fc        	sd	a1, 0x38(sp)
80230246: 08 18        	addi	a0, sp, 0x30
80230248: 2a e0        	sd	a0, 0x0(sp)
8023024a: 05 45        	li	a0, 0x1
8023024c: 2a e4        	sd	a0, 0x8(sp)
8023024e: 02 f0        	sd	zero, 0x20(sp)

0000000080230250 <.Lpcrel_hi5>:
80230250: 17 c5 00 00  	auipc	a0, 0xc
80230254: 13 05 05 b0  	addi	a0, a0, -0x500
80230258: 2a e8        	sd	a0, 0x10(sp)
8023025a: 02 ec        	sd	zero, 0x18(sp)

000000008023025c <.Lpcrel_hi6>:
8023025c: 17 c5 00 00  	auipc	a0, 0xc
80230260: 13 06 c5 b8  	addi	a2, a0, -0x474
80230264: 0a 85        	mv	a0, sp
80230266: 81 45        	li	a1, 0x0
80230268: 97 00 00 00  	auipc	ra, 0x0
8023026c: e7 80 a0 f6  	jalr	-0x96(ra) <_ZN4core9panicking18panic_nounwind_fmt17hc7c1c779817a7c2dE>

0000000080230270 <_ZN4core9panicking14panic_explicit17h498d6efec0ee05d9E>:
80230270: aa 85        	mv	a1, a0

0000000080230272 <.Lpcrel_hi9>:
80230272: 17 c5 00 00  	auipc	a0, 0xc
80230276: 13 05 e5 b9  	addi	a0, a0, -0x462
8023027a: 97 00 00 00  	auipc	ra, 0x0
8023027e: e7 80 80 00  	jalr	0x8(ra) <_ZN4core9panicking13panic_display17h4f5486ff24301170E>

0000000080230282 <_ZN4core9panicking13panic_display17h4f5486ff24301170E>:
80230282: 39 71        	addi	sp, sp, -0x40
80230284: 2a f8        	sd	a0, 0x30(sp)

0000000080230286 <.Lpcrel_hi10>:
80230286: 17 05 00 00  	auipc	a0, 0x0
8023028a: 13 05 e5 f0  	addi	a0, a0, -0xf2
8023028e: 2a fc        	sd	a0, 0x38(sp)

0000000080230290 <.Lpcrel_hi11>:
80230290: 17 c5 00 00  	auipc	a0, 0xc
80230294: 13 05 05 b9  	addi	a0, a0, -0x470
80230298: 2a e0        	sd	a0, 0x0(sp)
8023029a: 05 45        	li	a0, 0x1
8023029c: 2a e4        	sd	a0, 0x8(sp)
8023029e: 02 f0        	sd	zero, 0x20(sp)
802302a0: 10 18        	addi	a2, sp, 0x30
802302a2: 32 e8        	sd	a2, 0x10(sp)
802302a4: 2a ec        	sd	a0, 0x18(sp)
802302a6: 0a 85        	mv	a0, sp
802302a8: 97 00 00 00  	auipc	ra, 0x0
802302ac: e7 80 00 f0  	jalr	-0x100(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802302b0 <_ZN4core9panicking18panic_bounds_check17hf1995e6071f0f2d6E>:
802302b0: 1d 71        	addi	sp, sp, -0x60
802302b2: 2a e0        	sd	a0, 0x0(sp)
802302b4: 2e e4        	sd	a1, 0x8(sp)
802302b6: 28 00        	addi	a0, sp, 0x8
802302b8: aa e0        	sd	a0, 0x40(sp)

00000000802302ba <.Lpcrel_hi12>:
802302ba: 17 15 00 00  	auipc	a0, 0x1
802302be: 13 05 45 dd  	addi	a0, a0, -0x22c
802302c2: aa e4        	sd	a0, 0x48(sp)
802302c4: 8a 85        	mv	a1, sp
802302c6: ae e8        	sd	a1, 0x50(sp)
802302c8: aa ec        	sd	a0, 0x58(sp)

00000000802302ca <.Lpcrel_hi13>:
802302ca: 17 c5 00 00  	auipc	a0, 0xc
802302ce: 13 05 e5 b7  	addi	a0, a0, -0x482
802302d2: 2a e8        	sd	a0, 0x10(sp)
802302d4: 09 45        	li	a0, 0x2
802302d6: 2a ec        	sd	a0, 0x18(sp)
802302d8: 02 f8        	sd	zero, 0x30(sp)
802302da: 8c 00        	addi	a1, sp, 0x40
802302dc: 2e f0        	sd	a1, 0x20(sp)
802302de: 2a f4        	sd	a0, 0x28(sp)
802302e0: 08 08        	addi	a0, sp, 0x10
802302e2: b2 85        	mv	a1, a2
802302e4: 97 00 00 00  	auipc	ra, 0x0
802302e8: e7 80 40 ec  	jalr	-0x13c(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

00000000802302ec <_ZN4core9panicking36panic_misaligned_pointer_dereference17ha88c8de3abe8e532E>:
802302ec: 55 71        	addi	sp, sp, -0xd0
802302ee: 2a e0        	sd	a0, 0x0(sp)
802302f0: 2e e4        	sd	a1, 0x8(sp)
802302f2: 0a 85        	mv	a0, sp
802302f4: aa e0        	sd	a0, 0x40(sp)

00000000802302f6 <.Lpcrel_hi14>:
802302f6: 17 f5 ff ff  	auipc	a0, 0xfffff
802302fa: 13 05 e5 cb  	addi	a0, a0, -0x342
802302fe: aa e4        	sd	a0, 0x48(sp)
80230300: 2c 00        	addi	a1, sp, 0x8
80230302: ae e8        	sd	a1, 0x50(sp)
80230304: aa ec        	sd	a0, 0x58(sp)
80230306: 09 45        	li	a0, 0x2
80230308: aa f0        	sd	a0, 0x60(sp)
8023030a: aa f8        	sd	a0, 0x70(sp)
8023030c: 02 e1        	sd	zero, 0x80(sp)
8023030e: 85 45        	li	a1, 0x1
80230310: 93 96 25 02  	slli	a3, a1, 0x22
80230314: 93 86 06 02  	addi	a3, a3, 0x20
80230318: 36 e5        	sd	a3, 0x88(sp)
8023031a: 0d 47        	li	a4, 0x3
8023031c: 23 08 e1 08  	sb	a4, 0x90(sp)
80230320: 2a ed        	sd	a0, 0x98(sp)
80230322: 2a f5        	sd	a0, 0xa8(sp)
80230324: 2e fd        	sd	a1, 0xb8(sp)
80230326: b6 e1        	sd	a3, 0xc0(sp)
80230328: 23 04 e1 0c  	sb	a4, 0xc8(sp)

000000008023032c <.Lpcrel_hi15>:
8023032c: 97 c5 00 00  	auipc	a1, 0xc
80230330: 93 85 c5 b7  	addi	a1, a1, -0x484
80230334: 2e e8        	sd	a1, 0x10(sp)
80230336: 2a ec        	sd	a0, 0x18(sp)
80230338: 8c 10        	addi	a1, sp, 0x60
8023033a: 2e f8        	sd	a1, 0x30(sp)
8023033c: 2a fc        	sd	a0, 0x38(sp)
8023033e: 8c 00        	addi	a1, sp, 0x40
80230340: 2e f0        	sd	a1, 0x20(sp)
80230342: 2a f4        	sd	a0, 0x28(sp)
80230344: 08 08        	addi	a0, sp, 0x10
80230346: 81 45        	li	a1, 0x0
80230348: 97 00 00 00  	auipc	ra, 0x0
8023034c: e7 80 a0 e8  	jalr	-0x176(ra) <_ZN4core9panicking18panic_nounwind_fmt17hc7c1c779817a7c2dE>

0000000080230350 <_ZN4core9panicking13assert_failed17h8d87a4e33aaca84cE>:
80230350: 41 11        	addi	sp, sp, -0x10
80230352: 3a 88        	mv	a6, a4
80230354: b6 87        	mv	a5, a3
80230356: 2e e0        	sd	a1, 0x0(sp)
80230358: 32 e4        	sd	a2, 0x8(sp)

000000008023035a <.Lpcrel_hi20>:
8023035a: 97 c5 00 00  	auipc	a1, 0xc
8023035e: 13 86 e5 b6  	addi	a2, a1, -0x492
80230362: 8a 85        	mv	a1, sp
80230364: 34 00        	addi	a3, sp, 0x8
80230366: 32 87        	mv	a4, a2
80230368: 97 00 00 00  	auipc	ra, 0x0
8023036c: e7 80 80 00  	jalr	0x8(ra) <_ZN4core9panicking19assert_failed_inner17h4c07be238101dcd6E>

0000000080230370 <_ZN4core9panicking19assert_failed_inner17h4c07be238101dcd6E>:
80230370: 55 71        	addi	sp, sp, -0xd0
80230372: 2e e0        	sd	a1, 0x0(sp)
80230374: 32 e4        	sd	a2, 0x8(sp)
80230376: 36 e8        	sd	a3, 0x10(sp)
80230378: 13 75 f5 0f  	andi	a0, a0, 0xff
8023037c: 3a ec        	sd	a4, 0x18(sp)
8023037e: 09 c9        	beqz	a0, 0x80230390 <.Lpcrel_hi22>
80230380: 85 45        	li	a1, 0x1
80230382: 63 18 b5 04  	bne	a0, a1, 0x802303d2 <.Lpcrel_hi24>

0000000080230386 <.Lpcrel_hi23>:
80230386: 17 c5 00 00  	auipc	a0, 0xc
8023038a: 13 05 45 b6  	addi	a0, a0, -0x49c
8023038e: 29 a0        	j	0x80230398 <.Lpcrel_hi22+0x8>

0000000080230390 <.Lpcrel_hi22>:
80230390: 17 c5 00 00  	auipc	a0, 0xc
80230394: 13 05 85 b5  	addi	a0, a0, -0x4a8
80230398: 2a f0        	sd	a0, 0x20(sp)
8023039a: 09 45        	li	a0, 0x2
8023039c: 8c 63        	ld	a1, 0x0(a5)
8023039e: 2a f4        	sd	a0, 0x28(sp)
802303a0: b1 e1        	bnez	a1, 0x802303e4 <.Lpcrel_hi24+0x12>
802303a2: 08 10        	addi	a0, sp, 0x20
802303a4: aa f0        	sd	a0, 0x60(sp)

00000000802303a6 <.Lpcrel_hi25>:
802303a6: 17 05 00 00  	auipc	a0, 0x0
802303aa: 13 05 e5 de  	addi	a0, a0, -0x212
802303ae: aa f4        	sd	a0, 0x68(sp)
802303b0: 0a 85        	mv	a0, sp
802303b2: aa f8        	sd	a0, 0x70(sp)

00000000802303b4 <.Lpcrel_hi26>:
802303b4: 17 05 00 00  	auipc	a0, 0x0
802303b8: 13 05 05 cf  	addi	a0, a0, -0x310
802303bc: aa fc        	sd	a0, 0x78(sp)
802303be: 0c 08        	addi	a1, sp, 0x10
802303c0: 2e e1        	sd	a1, 0x80(sp)
802303c2: 2a e5        	sd	a0, 0x88(sp)

00000000802303c4 <.Lpcrel_hi27>:
802303c4: 17 c5 00 00  	auipc	a0, 0xc
802303c8: 13 05 45 b5  	addi	a0, a0, -0x4ac
802303cc: 2a f1        	sd	a0, 0xa0(sp)
802303ce: 0d 45        	li	a0, 0x3
802303d0: a5 a0        	j	0x80230438 <.Lpcrel_hi31+0xc>

00000000802303d2 <.Lpcrel_hi24>:
802303d2: 17 c5 00 00  	auipc	a0, 0xc
802303d6: 13 05 a5 b1  	addi	a0, a0, -0x4e6
802303da: 2a f0        	sd	a0, 0x20(sp)
802303dc: 1d 45        	li	a0, 0x7
802303de: 8c 63        	ld	a1, 0x0(a5)
802303e0: 2a f4        	sd	a0, 0x28(sp)
802303e2: e1 d1        	beqz	a1, 0x802303a2 <.Lpcrel_hi22+0x12>
802303e4: 88 77        	ld	a0, 0x28(a5)
802303e6: 8c 73        	ld	a1, 0x20(a5)
802303e8: aa ec        	sd	a0, 0x58(sp)
802303ea: ae e8        	sd	a1, 0x50(sp)
802303ec: 88 6f        	ld	a0, 0x18(a5)
802303ee: 8c 6b        	ld	a1, 0x10(a5)
802303f0: 90 67        	ld	a2, 0x8(a5)
802303f2: 94 63        	ld	a3, 0x0(a5)
802303f4: aa e4        	sd	a0, 0x48(sp)
802303f6: ae e0        	sd	a1, 0x40(sp)
802303f8: 32 fc        	sd	a2, 0x38(sp)
802303fa: 36 f8        	sd	a3, 0x30(sp)
802303fc: 08 10        	addi	a0, sp, 0x20
802303fe: aa f0        	sd	a0, 0x60(sp)

0000000080230400 <.Lpcrel_hi28>:
80230400: 17 05 00 00  	auipc	a0, 0x0
80230404: 13 05 45 d9  	addi	a0, a0, -0x26c
80230408: aa f4        	sd	a0, 0x68(sp)
8023040a: 08 18        	addi	a0, sp, 0x30
8023040c: aa f8        	sd	a0, 0x70(sp)

000000008023040e <.Lpcrel_hi29>:
8023040e: 17 f5 ff ff  	auipc	a0, 0xfffff
80230412: 13 05 85 01  	addi	a0, a0, 0x18
80230416: aa fc        	sd	a0, 0x78(sp)
80230418: 0a 85        	mv	a0, sp
8023041a: 2a e1        	sd	a0, 0x80(sp)

000000008023041c <.Lpcrel_hi30>:
8023041c: 17 05 00 00  	auipc	a0, 0x0
80230420: 13 05 85 c8  	addi	a0, a0, -0x378
80230424: 2a e5        	sd	a0, 0x88(sp)
80230426: 0c 08        	addi	a1, sp, 0x10
80230428: 2e e9        	sd	a1, 0x90(sp)
8023042a: 2a ed        	sd	a0, 0x98(sp)

000000008023042c <.Lpcrel_hi31>:
8023042c: 17 c5 00 00  	auipc	a0, 0xc
80230430: 13 05 c5 b2  	addi	a0, a0, -0x4d4
80230434: 2a f1        	sd	a0, 0xa0(sp)
80230436: 11 45        	li	a0, 0x4
80230438: 2a f5        	sd	a0, 0xa8(sp)
8023043a: 82 e1        	sd	zero, 0xc0(sp)
8023043c: 8c 10        	addi	a1, sp, 0x60
8023043e: 2e f9        	sd	a1, 0xb0(sp)
80230440: 2a fd        	sd	a0, 0xb8(sp)
80230442: 08 11        	addi	a0, sp, 0xa0
80230444: c2 85        	mv	a1, a6
80230446: 97 00 00 00  	auipc	ra, 0x0
8023044a: e7 80 20 d6  	jalr	-0x29e(ra) <_ZN4core9panicking9panic_fmt17h2a18629b52842fa8E>

000000008023044e <_ZN4core3ptr52drop_in_place$LT$core..fmt..builders..PadAdapter$GT$17hd4674cdd55b28151E>:
8023044e: 82 80        	ret

0000000080230450 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17ha2effa6a76e5d459E>:
80230450: 75 71        	addi	sp, sp, -0x90
80230452: 06 e5        	sd	ra, 0x88(sp)
80230454: 22 e1        	sd	s0, 0x80(sp)
80230456: a6 fc        	sd	s1, 0x78(sp)
80230458: ca f8        	sd	s2, 0x70(sp)
8023045a: ce f4        	sd	s3, 0x68(sp)
8023045c: d2 f0        	sd	s4, 0x60(sp)
8023045e: d6 ec        	sd	s5, 0x58(sp)
80230460: da e8        	sd	s6, 0x50(sp)
80230462: de e4        	sd	s7, 0x48(sp)
80230464: e2 e0        	sd	s8, 0x40(sp)
80230466: 66 fc        	sd	s9, 0x38(sp)
80230468: 6a f8        	sd	s10, 0x30(sp)
8023046a: 6e f4        	sd	s11, 0x28(sp)
8023046c: 32 8c        	mv	s8, a2
8023046e: 2e 8a        	mv	s4, a1
80230470: 81 4d        	li	s11, 0x0
80230472: 81 4c        	li	s9, 0x0
80230474: b7 05 ff fe  	lui	a1, 0xfeff0
80230478: 9b 84 f5 ef  	addiw	s1, a1, -0x101
8023047c: 93 95 04 02  	slli	a1, s1, 0x20
80230480: 33 89 b4 00  	add	s2, s1, a1
80230484: b7 15 0a 0a  	lui	a1, 0xa0a1
80230488: 1b 84 a5 a0  	addiw	s0, a1, -0x5f6
8023048c: 93 15 04 02  	slli	a1, s0, 0x20
80230490: b3 0b b4 00  	add	s7, s0, a1
80230494: 00 69        	ld	s0, 0x10(a0)
80230496: 04 61        	ld	s1, 0x0(a0)
80230498: 08 65        	ld	a0, 0x8(a0)
8023049a: 2a f0        	sd	a0, 0x20(sp)
8023049c: 13 05 fa ff  	addi	a0, s4, -0x1
802304a0: 2a e8        	sd	a0, 0x10(sp)
802304a2: 13 05 8a 00  	addi	a0, s4, 0x8
802304a6: 2a e0        	sd	a0, 0x0(sp)

00000000802304a8 <.Lpcrel_hi4>:
802304a8: 17 35 00 00  	auipc	a0, 0x3
802304ac: 13 05 85 31  	addi	a0, a0, 0x318
802304b0: 2a ec        	sd	a0, 0x18(sp)
802304b2: 29 4d        	li	s10, 0xa
802304b4: 22 e4        	sd	s0, 0x8(sp)
802304b6: 3d a0        	j	0x802304e4 <.Lpcrel_hi4+0x3c>
802304b8: 42 65        	ld	a0, 0x10(sp)
802304ba: 56 95        	add	a0, a0, s5
802304bc: 03 45 05 00  	lbu	a0, 0x0(a0)
802304c0: 59 15        	addi	a0, a0, -0xa
802304c2: 13 35 15 00  	seqz	a0, a0
802304c6: 23 00 a4 00  	sb	a0, 0x0(s0)
802304ca: 02 75        	ld	a0, 0x20(sp)
802304cc: 14 6d        	ld	a3, 0x18(a0)
802304ce: 33 86 ba 41  	sub	a2, s5, s11
802304d2: b3 05 ba 01  	add	a1, s4, s11
802304d6: 26 85        	mv	a0, s1
802304d8: 82 96        	jalr	a3
802304da: b3 65 35 01  	or	a1, a0, s3
802304de: da 8d        	mv	s11, s6
802304e0: 63 92 05 12  	bnez	a1, 0x80230604 <.Lpcrel_hi5+0xb6>
802304e4: 63 77 9c 01  	bgeu	s8, s9, 0x802304f2 <.Lpcrel_hi4+0x4a>
802304e8: 66 8b        	mv	s6, s9
802304ea: dd a0        	j	0x802305d0 <.Lpcrel_hi5+0x82>
802304ec: da 8c        	mv	s9, s6
802304ee: 63 61 6c 0f  	bltu	s8, s6, 0x802305d0 <.Lpcrel_hi5+0x82>
802304f2: 33 05 9c 41  	sub	a0, s8, s9
802304f6: b3 05 9a 01  	add	a1, s4, s9
802304fa: 41 46        	li	a2, 0x10
802304fc: 63 7f c5 00  	bgeu	a0, a2, 0x8023051a <.Lpcrel_hi4+0x72>
80230500: 63 04 9c 0d  	beq	s8, s9, 0x802305c8 <.Lpcrel_hi5+0x7a>
80230504: 81 46        	li	a3, 0x0
80230506: 33 86 d5 00  	add	a2, a1, a3
8023050a: 03 46 06 00  	lbu	a2, 0x0(a2)
8023050e: 63 0d a6 09  	beq	a2, s10, 0x802305a8 <.Lpcrel_hi5+0x5a>
80230512: 85 06        	addi	a3, a3, 0x1
80230514: e3 19 d5 fe  	bne	a0, a3, 0x80230506 <.Lpcrel_hi4+0x5e>
80230518: 45 a8        	j	0x802305c8 <.Lpcrel_hi5+0x7a>
8023051a: a6 88        	mv	a7, s1
8023051c: 13 86 75 00  	addi	a2, a1, 0x7
80230520: 61 9a        	andi	a2, a2, -0x8
80230522: 63 14 b6 04  	bne	a2, a1, 0x8023056a <.Lpcrel_hi5+0x1c>
80230526: 81 44        	li	s1, 0x0
80230528: 13 08 05 ff  	addi	a6, a0, -0x10
8023052c: 02 67        	ld	a4, 0x0(sp)
8023052e: 66 97        	add	a4, a4, s9
80230530: b3 87 95 00  	add	a5, a1, s1
80230534: 80 63        	ld	s0, 0x0(a5)
80230536: 33 06 97 00  	add	a2, a4, s1
8023053a: 10 62        	ld	a2, 0x0(a2)
8023053c: b3 47 74 01  	xor	a5, s0, s7
80230540: ca 97        	add	a5, a5, s2
80230542: 13 44 f4 ff  	not	s0, s0
80230546: e1 8f        	and	a5, a5, s0
80230548: 33 44 76 01  	xor	s0, a2, s7
8023054c: 4a 94        	add	s0, s0, s2

000000008023054e <.Lpcrel_hi5>:
8023054e: 97 66 01 00  	auipc	a3, 0x16
80230552: 83 b6 a6 9e  	ld	a3, -0x616(a3)
80230556: 13 46 f6 ff  	not	a2, a2
8023055a: 61 8e        	and	a2, a2, s0
8023055c: 5d 8e        	or	a2, a2, a5
8023055e: 75 8e        	and	a2, a2, a3
80230560: 0d e6        	bnez	a2, 0x8023058a <.Lpcrel_hi5+0x3c>
80230562: c1 04        	addi	s1, s1, 0x10
80230564: e3 76 98 fc  	bgeu	a6, s1, 0x80230530 <.Lpcrel_hi4+0x88>
80230568: 0d a0        	j	0x8023058a <.Lpcrel_hi5+0x3c>
8023056a: 81 46        	li	a3, 0x0
8023056c: b3 04 b6 40  	sub	s1, a2, a1
80230570: 33 87 d5 00  	add	a4, a1, a3
80230574: 03 47 07 00  	lbu	a4, 0x0(a4)
80230578: 63 07 a7 03  	beq	a4, s10, 0x802305a6 <.Lpcrel_hi5+0x58>
8023057c: 85 06        	addi	a3, a3, 0x1
8023057e: e3 99 d4 fe  	bne	s1, a3, 0x80230570 <.Lpcrel_hi5+0x22>
80230582: 13 08 05 ff  	addi	a6, a0, -0x10
80230586: e3 73 98 fa  	bgeu	a6, s1, 0x8023052c <.Lpcrel_hi4+0x84>
8023058a: 63 07 95 06  	beq	a0, s1, 0x802305f8 <.Lpcrel_hi5+0xaa>
8023058e: 22 64        	ld	s0, 0x8(sp)
80230590: 33 86 95 00  	add	a2, a1, s1
80230594: 03 46 06 00  	lbu	a2, 0x0(a2)
80230598: 63 06 a6 01  	beq	a2, s10, 0x802305a4 <.Lpcrel_hi5+0x56>
8023059c: 85 04        	addi	s1, s1, 0x1
8023059e: e3 19 95 fe  	bne	a0, s1, 0x80230590 <.Lpcrel_hi5+0x42>
802305a2: 2d a0        	j	0x802305cc <.Lpcrel_hi5+0x7e>
802305a4: a6 86        	mv	a3, s1
802305a6: c6 84        	mv	s1, a7
802305a8: 33 85 96 01  	add	a0, a3, s9
802305ac: 13 0b 15 00  	addi	s6, a0, 0x1
802305b0: e3 7e 85 f3  	bgeu	a0, s8, 0x802304ec <.Lpcrel_hi4+0x44>
802305b4: d2 96        	add	a3, a3, s4
802305b6: e6 96        	add	a3, a3, s9
802305b8: 03 c5 06 00  	lbu	a0, 0x0(a3)
802305bc: e3 18 a5 f3  	bne	a0, s10, 0x802304ec <.Lpcrel_hi4+0x44>
802305c0: 81 49        	li	s3, 0x0
802305c2: da 8c        	mv	s9, s6
802305c4: da 8a        	mv	s5, s6
802305c6: 19 a8        	j	0x802305dc <.Lpcrel_hi5+0x8e>
802305c8: 62 8b        	mv	s6, s8
802305ca: 19 a0        	j	0x802305d0 <.Lpcrel_hi5+0x82>
802305cc: 62 8b        	mv	s6, s8
802305ce: c6 84        	mv	s1, a7
802305d0: da 8c        	mv	s9, s6
802305d2: 85 49        	li	s3, 0x1
802305d4: 6e 8b        	mv	s6, s11
802305d6: e2 8a        	mv	s5, s8
802305d8: 63 83 8d 03  	beq	s11, s8, 0x802305fe <.Lpcrel_hi5+0xb0>
802305dc: 03 45 04 00  	lbu	a0, 0x0(s0)
802305e0: 01 c9        	beqz	a0, 0x802305f0 <.Lpcrel_hi5+0xa2>
802305e2: 02 75        	ld	a0, 0x20(sp)
802305e4: 14 6d        	ld	a3, 0x18(a0)
802305e6: 11 46        	li	a2, 0x4
802305e8: 26 85        	mv	a0, s1
802305ea: e2 65        	ld	a1, 0x18(sp)
802305ec: 82 96        	jalr	a3
802305ee: 11 e9        	bnez	a0, 0x80230602 <.Lpcrel_hi5+0xb4>
802305f0: e3 94 ba ed  	bne	s5, s11, 0x802304b8 <.Lpcrel_hi4+0x10>
802305f4: 01 45        	li	a0, 0x0
802305f6: c1 bd        	j	0x802304c6 <.Lpcrel_hi4+0x1e>
802305f8: 62 8b        	mv	s6, s8
802305fa: 22 64        	ld	s0, 0x8(sp)
802305fc: c9 bf        	j	0x802305ce <.Lpcrel_hi5+0x80>
802305fe: 01 45        	li	a0, 0x0
80230600: 11 a0        	j	0x80230604 <.Lpcrel_hi5+0xb6>
80230602: 05 45        	li	a0, 0x1
80230604: aa 60        	ld	ra, 0x88(sp)
80230606: 0a 64        	ld	s0, 0x80(sp)
80230608: e6 74        	ld	s1, 0x78(sp)
8023060a: 46 79        	ld	s2, 0x70(sp)
8023060c: a6 79        	ld	s3, 0x68(sp)
8023060e: 06 7a        	ld	s4, 0x60(sp)
80230610: e6 6a        	ld	s5, 0x58(sp)
80230612: 46 6b        	ld	s6, 0x50(sp)
80230614: a6 6b        	ld	s7, 0x48(sp)
80230616: 06 6c        	ld	s8, 0x40(sp)
80230618: e2 7c        	ld	s9, 0x38(sp)
8023061a: 42 7d        	ld	s10, 0x30(sp)
8023061c: a2 7d        	ld	s11, 0x28(sp)
8023061e: 49 61        	addi	sp, sp, 0x90
80230620: 82 80        	ret

0000000080230622 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$10write_char17hbd210014417169b4E>:
80230622: 79 71        	addi	sp, sp, -0x30
80230624: 06 f4        	sd	ra, 0x28(sp)
80230626: 22 f0        	sd	s0, 0x20(sp)
80230628: 26 ec        	sd	s1, 0x18(sp)
8023062a: 4a e8        	sd	s2, 0x10(sp)
8023062c: 4e e4        	sd	s3, 0x8(sp)
8023062e: 04 69        	ld	s1, 0x10(a0)
80230630: 03 c6 04 00  	lbu	a2, 0x0(s1)
80230634: 03 39 05 00  	ld	s2, 0x0(a0)
80230638: 83 39 85 00  	ld	s3, 0x8(a0)
8023063c: 15 c6        	beqz	a2, 0x80230668 <.Lpcrel_hi6+0x26>
8023063e: 03 b7 89 01  	ld	a4, 0x18(s3)

0000000080230642 <.Lpcrel_hi6>:
80230642: 17 35 00 00  	auipc	a0, 0x3
80230646: 93 06 e5 17  	addi	a3, a0, 0x17e
8023064a: 11 46        	li	a2, 0x4
8023064c: 4a 85        	mv	a0, s2
8023064e: 2e 84        	mv	s0, a1
80230650: b6 85        	mv	a1, a3
80230652: 02 97        	jalr	a4
80230654: a2 85        	mv	a1, s0
80230656: 09 c9        	beqz	a0, 0x80230668 <.Lpcrel_hi6+0x26>
80230658: 05 45        	li	a0, 0x1
8023065a: a2 70        	ld	ra, 0x28(sp)
8023065c: 02 74        	ld	s0, 0x20(sp)
8023065e: e2 64        	ld	s1, 0x18(sp)
80230660: 42 69        	ld	s2, 0x10(sp)
80230662: a2 69        	ld	s3, 0x8(sp)
80230664: 45 61        	addi	sp, sp, 0x30
80230666: 82 80        	ret
80230668: 1b 85 05 00  	sext.w	a0, a1
8023066c: 59 15        	addi	a0, a0, -0xa
8023066e: 13 35 15 00  	seqz	a0, a0
80230672: 23 80 a4 00  	sb	a0, 0x0(s1)
80230676: 83 b7 09 02  	ld	a5, 0x20(s3)
8023067a: 4a 85        	mv	a0, s2
8023067c: a2 70        	ld	ra, 0x28(sp)
8023067e: 02 74        	ld	s0, 0x20(sp)
80230680: e2 64        	ld	s1, 0x18(sp)
80230682: 42 69        	ld	s2, 0x10(sp)
80230684: a2 69        	ld	s3, 0x8(sp)
80230686: 45 61        	addi	sp, sp, 0x30
80230688: 82 87        	jr	a5

000000008023068a <_ZN4core3fmt8builders11DebugStruct5field17h204890760642458cE>:
8023068a: 71 71        	addi	sp, sp, -0xb0
8023068c: 06 f5        	sd	ra, 0xa8(sp)
8023068e: 22 f1        	sd	s0, 0xa0(sp)
80230690: 26 ed        	sd	s1, 0x98(sp)
80230692: 4a e9        	sd	s2, 0x90(sp)
80230694: 4e e5        	sd	s3, 0x88(sp)
80230696: 52 e1        	sd	s4, 0x80(sp)
80230698: d6 fc        	sd	s5, 0x78(sp)
8023069a: da f8        	sd	s6, 0x70(sp)
8023069c: de f4        	sd	s7, 0x68(sp)
8023069e: 83 47 85 00  	lbu	a5, 0x8(a0)
802306a2: 05 4a        	li	s4, 0x1
802306a4: 85 44        	li	s1, 0x1
802306a6: 63 9a 07 12  	bnez	a5, 0x802307da <.Lpcrel_hi9+0x22>
802306aa: ba 89        	mv	s3, a4
802306ac: 36 89        	mv	s2, a3
802306ae: 00 61        	ld	s0, 0x0(a0)
802306b0: 83 66 44 03  	lwu	a3, 0x34(s0)
802306b4: 03 47 95 00  	lbu	a4, 0x9(a0)
802306b8: 93 f7 46 00  	andi	a5, a3, 0x4
802306bc: aa 8a        	mv	s5, a0
802306be: 99 eb        	bnez	a5, 0x802306d4 <.Lpcrel_hi8+0xa>
802306c0: 93 36 17 00  	seqz	a3, a4
802306c4: ae 8b        	mv	s7, a1
802306c6: 32 8b        	mv	s6, a2
802306c8: 4d cf        	beqz	a4, 0x80230782 <.Lpcrel_hi7>

00000000802306ca <.Lpcrel_hi8>:
802306ca: 17 c5 00 00  	auipc	a0, 0xc
802306ce: 93 05 95 97  	addi	a1, a0, -0x687
802306d2: 65 a8        	j	0x8023078a <.Lpcrel_hi7+0x8>
802306d4: 05 e7        	bnez	a4, 0x802306fc <.Lpcrel_hi10+0x20>
802306d6: 14 74        	ld	a3, 0x28(s0)
802306d8: 08 70        	ld	a0, 0x20(s0)
802306da: 98 6e        	ld	a4, 0x18(a3)

00000000802306dc <.Lpcrel_hi10>:
802306dc: 97 c6 00 00  	auipc	a3, 0xc
802306e0: 93 86 b6 96  	addi	a3, a3, -0x695
802306e4: 32 8b        	mv	s6, a2
802306e6: 0d 46        	li	a2, 0x3
802306e8: ae 84        	mv	s1, a1
802306ea: b6 85        	mv	a1, a3
802306ec: 02 97        	jalr	a4
802306ee: a6 85        	mv	a1, s1
802306f0: aa 86        	mv	a3, a0
802306f2: 85 44        	li	s1, 0x1
802306f4: 56 85        	mv	a0, s5
802306f6: f5 e2        	bnez	a3, 0x802307da <.Lpcrel_hi9+0x22>
802306f8: 5a 86        	mv	a2, s6
802306fa: 54 58        	lw	a3, 0x34(s0)
802306fc: 08 70        	ld	a0, 0x20(s0)
802306fe: 18 74        	ld	a4, 0x28(s0)
80230700: 85 44        	li	s1, 0x1
80230702: a3 03 91 02  	sb	s1, 0x27(sp)
80230706: 2a e4        	sd	a0, 0x8(sp)
80230708: 3a e8        	sd	a4, 0x10(sp)
8023070a: 13 05 71 02  	addi	a0, sp, 0x27
8023070e: 2a ec        	sd	a0, 0x18(sp)
80230710: 08 58        	lw	a0, 0x30(s0)
80230712: 03 47 84 03  	lbu	a4, 0x38(s0)
80230716: 1c 60        	ld	a5, 0x0(s0)
80230718: 03 38 84 00  	ld	a6, 0x8(s0)
8023071c: 83 38 04 01  	ld	a7, 0x10(s0)
80230720: 00 6c        	ld	s0, 0x18(s0)
80230722: b6 ce        	sw	a3, 0x5c(sp)
80230724: aa cc        	sw	a0, 0x58(sp)
80230726: 23 00 e1 06  	sb	a4, 0x60(sp)
8023072a: 3e f4        	sd	a5, 0x28(sp)
8023072c: 42 f8        	sd	a6, 0x30(sp)
8023072e: 46 fc        	sd	a7, 0x38(sp)
80230730: a2 e0        	sd	s0, 0x40(sp)
80230732: 28 00        	addi	a0, sp, 0x8
80230734: aa e4        	sd	a0, 0x48(sp)

0000000080230736 <.Lpcrel_hi11>:
80230736: 17 b5 00 00  	auipc	a0, 0xb
8023073a: 13 05 25 58  	addi	a0, a0, 0x582
8023073e: aa e8        	sd	a0, 0x50(sp)
80230740: 28 00        	addi	a0, sp, 0x8
80230742: 97 00 00 00  	auipc	ra, 0x0
80230746: e7 80 e0 d0  	jalr	-0x2f2(ra) <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17ha2effa6a76e5d459E>
8023074a: 59 e5        	bnez	a0, 0x802307d8 <.Lpcrel_hi9+0x20>

000000008023074c <.Lpcrel_hi12>:
8023074c: 17 c5 00 00  	auipc	a0, 0xc
80230750: 93 05 95 8f  	addi	a1, a0, -0x707
80230754: 28 00        	addi	a0, sp, 0x8
80230756: 09 46        	li	a2, 0x2
80230758: 97 00 00 00  	auipc	ra, 0x0
8023075c: e7 80 80 cf  	jalr	-0x308(ra) <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17ha2effa6a76e5d459E>
80230760: 25 ed        	bnez	a0, 0x802307d8 <.Lpcrel_hi9+0x20>
80230762: 03 b6 89 01  	ld	a2, 0x18(s3)
80230766: 2c 10        	addi	a1, sp, 0x28
80230768: 4a 85        	mv	a0, s2
8023076a: 02 96        	jalr	a2
8023076c: 35 e5        	bnez	a0, 0x802307d8 <.Lpcrel_hi9+0x20>
8023076e: c6 65        	ld	a1, 0x50(sp)
80230770: 26 65        	ld	a0, 0x48(sp)
80230772: 94 6d        	ld	a3, 0x18(a1)

0000000080230774 <.Lpcrel_hi13>:
80230774: 97 c5 00 00  	auipc	a1, 0xc
80230778: 93 85 65 8d  	addi	a1, a1, -0x72a
8023077c: 09 46        	li	a2, 0x2
8023077e: 82 96        	jalr	a3
80230780: 99 a8        	j	0x802307d6 <.Lpcrel_hi9+0x1e>

0000000080230782 <.Lpcrel_hi7>:
80230782: 17 c5 00 00  	auipc	a0, 0xc
80230786: 93 05 e5 8b  	addi	a1, a0, -0x742
8023078a: 10 74        	ld	a2, 0x28(s0)
8023078c: 08 70        	ld	a0, 0x20(s0)
8023078e: 18 6e        	ld	a4, 0x18(a2)
80230790: 13 86 26 00  	addi	a2, a3, 0x2
80230794: 02 97        	jalr	a4
80230796: aa 86        	mv	a3, a0
80230798: 85 44        	li	s1, 0x1
8023079a: 56 85        	mv	a0, s5
8023079c: 9d ee        	bnez	a3, 0x802307da <.Lpcrel_hi9+0x22>
8023079e: 5a 86        	mv	a2, s6
802307a0: de 85        	mv	a1, s7
802307a2: 14 74        	ld	a3, 0x28(s0)
802307a4: 08 70        	ld	a0, 0x20(s0)
802307a6: 94 6e        	ld	a3, 0x18(a3)
802307a8: 82 96        	jalr	a3
802307aa: aa 85        	mv	a1, a0
802307ac: 56 85        	mv	a0, s5
802307ae: 85 44        	li	s1, 0x1
802307b0: 8d e5        	bnez	a1, 0x802307da <.Lpcrel_hi9+0x22>
802307b2: 0c 74        	ld	a1, 0x28(s0)
802307b4: 08 70        	ld	a0, 0x20(s0)
802307b6: 94 6d        	ld	a3, 0x18(a1)

00000000802307b8 <.Lpcrel_hi9>:
802307b8: 97 c5 00 00  	auipc	a1, 0xc
802307bc: 93 85 d5 88  	addi	a1, a1, -0x773
802307c0: 09 46        	li	a2, 0x2
802307c2: 82 96        	jalr	a3
802307c4: aa 85        	mv	a1, a0
802307c6: 56 85        	mv	a0, s5
802307c8: 85 44        	li	s1, 0x1
802307ca: 81 e9        	bnez	a1, 0x802307da <.Lpcrel_hi9+0x22>
802307cc: 03 b6 89 01  	ld	a2, 0x18(s3)
802307d0: 4a 85        	mv	a0, s2
802307d2: a2 85        	mv	a1, s0
802307d4: 02 96        	jalr	a2
802307d6: aa 84        	mv	s1, a0
802307d8: 56 85        	mv	a0, s5
802307da: 23 04 95 00  	sb	s1, 0x8(a0)
802307de: a3 04 45 01  	sb	s4, 0x9(a0)
802307e2: aa 70        	ld	ra, 0xa8(sp)
802307e4: 0a 74        	ld	s0, 0xa0(sp)
802307e6: ea 64        	ld	s1, 0x98(sp)
802307e8: 4a 69        	ld	s2, 0x90(sp)
802307ea: aa 69        	ld	s3, 0x88(sp)
802307ec: 0a 6a        	ld	s4, 0x80(sp)
802307ee: e6 7a        	ld	s5, 0x78(sp)
802307f0: 46 7b        	ld	s6, 0x70(sp)
802307f2: a6 7b        	ld	s7, 0x68(sp)
802307f4: 4d 61        	addi	sp, sp, 0xb0
802307f6: 82 80        	ret

00000000802307f8 <_ZN4core3fmt8builders10DebugTuple5field17h52def8de52344731E>:
802307f8: 35 71        	addi	sp, sp, -0xa0
802307fa: 06 ed        	sd	ra, 0x98(sp)
802307fc: 22 e9        	sd	s0, 0x90(sp)
802307fe: 26 e5        	sd	s1, 0x88(sp)
80230800: 4a e1        	sd	s2, 0x80(sp)
80230802: ce fc        	sd	s3, 0x78(sp)
80230804: d2 f8        	sd	s4, 0x70(sp)
80230806: d6 f4        	sd	s5, 0x68(sp)
80230808: 83 46 05 01  	lbu	a3, 0x10(a0)
8023080c: 83 39 05 00  	ld	s3, 0x0(a0)
80230810: 05 44        	li	s0, 0x1
80230812: f9 ea        	bnez	a3, 0x802308e8 <.Lpcrel_hi20+0x2a>
80230814: 04 65        	ld	s1, 0x8(a0)
80230816: 83 e6 44 03  	lwu	a3, 0x34(s1)
8023081a: 13 f7 46 00  	andi	a4, a3, 0x4
8023081e: 09 ef        	bnez	a4, 0x80230838 <.Lpcrel_hi21+0xa>
80230820: b3 36 30 01  	snez	a3, s3
80230824: 32 8a        	mv	s4, a2
80230826: 2e 89        	mv	s2, a1
80230828: aa 8a        	mv	s5, a0
8023082a: 63 8a 09 08  	beqz	s3, 0x802308be <.Lpcrel_hi20>

000000008023082e <.Lpcrel_hi21>:
8023082e: 17 c5 00 00  	auipc	a0, 0xc
80230832: 93 05 55 81  	addi	a1, a0, -0x7eb
80230836: 41 a8        	j	0x802308c6 <.Lpcrel_hi20+0x8>
80230838: 2e 89        	mv	s2, a1
8023083a: 2a 8a        	mv	s4, a0
8023083c: 63 91 09 02  	bnez	s3, 0x8023085e <.Lpcrel_hi22+0x16>
80230840: b2 8a        	mv	s5, a2
80230842: 8c 74        	ld	a1, 0x28(s1)
80230844: 88 70        	ld	a0, 0x20(s1)
80230846: 94 6d        	ld	a3, 0x18(a1)

0000000080230848 <.Lpcrel_hi22>:
80230848: 97 c5 00 00  	auipc	a1, 0xc
8023084c: 93 85 85 80  	addi	a1, a1, -0x7f8
80230850: 09 46        	li	a2, 0x2
80230852: 82 96        	jalr	a3
80230854: aa 85        	mv	a1, a0
80230856: 52 85        	mv	a0, s4
80230858: c1 e9        	bnez	a1, 0x802308e8 <.Lpcrel_hi20+0x2a>
8023085a: d4 58        	lw	a3, 0x34(s1)
8023085c: 56 86        	mv	a2, s5
8023085e: 88 70        	ld	a0, 0x20(s1)
80230860: 8c 74        	ld	a1, 0x28(s1)
80230862: 05 44        	li	s0, 0x1
80230864: a3 03 81 02  	sb	s0, 0x27(sp)
80230868: 2a e4        	sd	a0, 0x8(sp)
8023086a: 2e e8        	sd	a1, 0x10(sp)
8023086c: 13 05 71 02  	addi	a0, sp, 0x27
80230870: 2a ec        	sd	a0, 0x18(sp)
80230872: 88 58        	lw	a0, 0x30(s1)
80230874: 83 c5 84 03  	lbu	a1, 0x38(s1)
80230878: 98 60        	ld	a4, 0x0(s1)
8023087a: 9c 64        	ld	a5, 0x8(s1)
8023087c: 03 b8 04 01  	ld	a6, 0x10(s1)
80230880: 84 6c        	ld	s1, 0x18(s1)
80230882: b6 ce        	sw	a3, 0x5c(sp)
80230884: aa cc        	sw	a0, 0x58(sp)
80230886: 23 00 b1 06  	sb	a1, 0x60(sp)
8023088a: 3a f4        	sd	a4, 0x28(sp)
8023088c: 3e f8        	sd	a5, 0x30(sp)
8023088e: 42 fc        	sd	a6, 0x38(sp)
80230890: a6 e0        	sd	s1, 0x40(sp)
80230892: 28 00        	addi	a0, sp, 0x8
80230894: aa e4        	sd	a0, 0x48(sp)
80230896: 10 6e        	ld	a2, 0x18(a2)

0000000080230898 <.Lpcrel_hi23>:
80230898: 17 b5 00 00  	auipc	a0, 0xb
8023089c: 13 05 05 42  	addi	a0, a0, 0x420
802308a0: aa e8        	sd	a0, 0x50(sp)
802308a2: 2c 10        	addi	a1, sp, 0x28
802308a4: 4a 85        	mv	a0, s2
802308a6: 02 96        	jalr	a2
802308a8: 1d ed        	bnez	a0, 0x802308e6 <.Lpcrel_hi20+0x28>
802308aa: c6 65        	ld	a1, 0x50(sp)
802308ac: 26 65        	ld	a0, 0x48(sp)
802308ae: 94 6d        	ld	a3, 0x18(a1)

00000000802308b0 <.Lpcrel_hi24>:
802308b0: 97 b5 00 00  	auipc	a1, 0xb
802308b4: 93 85 a5 79  	addi	a1, a1, 0x79a
802308b8: 09 46        	li	a2, 0x2
802308ba: 82 96        	jalr	a3
802308bc: 25 a0        	j	0x802308e4 <.Lpcrel_hi20+0x26>

00000000802308be <.Lpcrel_hi20>:
802308be: 17 b5 00 00  	auipc	a0, 0xb
802308c2: 93 05 15 79  	addi	a1, a0, 0x791
802308c6: 90 74        	ld	a2, 0x28(s1)
802308c8: 88 70        	ld	a0, 0x20(s1)
802308ca: 18 6e        	ld	a4, 0x18(a2)
802308cc: 13 86 16 00  	addi	a2, a3, 0x1
802308d0: 02 97        	jalr	a4
802308d2: aa 85        	mv	a1, a0
802308d4: 56 85        	mv	a0, s5
802308d6: 89 e9        	bnez	a1, 0x802308e8 <.Lpcrel_hi20+0x2a>
802308d8: 03 36 8a 01  	ld	a2, 0x18(s4)
802308dc: 2a 8a        	mv	s4, a0
802308de: 4a 85        	mv	a0, s2
802308e0: a6 85        	mv	a1, s1
802308e2: 02 96        	jalr	a2
802308e4: 2a 84        	mv	s0, a0
802308e6: 52 85        	mv	a0, s4
802308e8: 23 08 85 00  	sb	s0, 0x10(a0)
802308ec: 85 09        	addi	s3, s3, 0x1
802308ee: 23 30 35 01  	sd	s3, 0x0(a0)
802308f2: ea 60        	ld	ra, 0x98(sp)
802308f4: 4a 64        	ld	s0, 0x90(sp)
802308f6: aa 64        	ld	s1, 0x88(sp)
802308f8: 0a 69        	ld	s2, 0x80(sp)
802308fa: e6 79        	ld	s3, 0x78(sp)
802308fc: 46 7a        	ld	s4, 0x70(sp)
802308fe: a6 7a        	ld	s5, 0x68(sp)
80230900: 0d 61        	addi	sp, sp, 0xa0
80230902: 82 80        	ret

0000000080230904 <_ZN4core3fmt8builders9DebugList5entry17hf8aa446d165ad807E>:
80230904: 35 71        	addi	sp, sp, -0xa0
80230906: 06 ed        	sd	ra, 0x98(sp)
80230908: 22 e9        	sd	s0, 0x90(sp)
8023090a: 26 e5        	sd	s1, 0x88(sp)
8023090c: 4a e1        	sd	s2, 0x80(sp)
8023090e: ce fc        	sd	s3, 0x78(sp)
80230910: d2 f8        	sd	s4, 0x70(sp)
80230912: d6 f4        	sd	s5, 0x68(sp)
80230914: 83 46 85 00  	lbu	a3, 0x8(a0)
80230918: 85 49        	li	s3, 0x1
8023091a: 85 44        	li	s1, 0x1
8023091c: 91 ce        	beqz	a3, 0x80230938 <_ZN4core3fmt8builders9DebugList5entry17hf8aa446d165ad807E+0x34>
8023091e: 23 04 95 00  	sb	s1, 0x8(a0)
80230922: a3 04 35 01  	sb	s3, 0x9(a0)
80230926: ea 60        	ld	ra, 0x98(sp)
80230928: 4a 64        	ld	s0, 0x90(sp)
8023092a: aa 64        	ld	s1, 0x88(sp)
8023092c: 0a 69        	ld	s2, 0x80(sp)
8023092e: e6 79        	ld	s3, 0x78(sp)
80230930: 46 7a        	ld	s4, 0x70(sp)
80230932: a6 7a        	ld	s5, 0x68(sp)
80230934: 0d 61        	addi	sp, sp, 0xa0
80230936: 82 80        	ret
80230938: 00 61        	ld	s0, 0x0(a0)
8023093a: 83 66 44 03  	lwu	a3, 0x34(s0)
8023093e: 03 47 95 00  	lbu	a4, 0x9(a0)
80230942: 93 f7 46 00  	andi	a5, a3, 0x4
80230946: 95 ef        	bnez	a5, 0x80230982 <.Lpcrel_hi28+0x32>
80230948: 0d c7        	beqz	a4, 0x80230972 <.Lpcrel_hi28+0x22>
8023094a: 18 74        	ld	a4, 0x28(s0)
8023094c: 14 70        	ld	a3, 0x20(s0)
8023094e: 1c 6f        	ld	a5, 0x18(a4)

0000000080230950 <.Lpcrel_hi28>:
80230950: 17 b7 00 00  	auipc	a4, 0xb
80230954: 13 07 37 6f  	addi	a4, a4, 0x6f3
80230958: 32 89        	mv	s2, a2
8023095a: 09 46        	li	a2, 0x2
8023095c: 2a 8a        	mv	s4, a0
8023095e: 36 85        	mv	a0, a3
80230960: ae 84        	mv	s1, a1
80230962: ba 85        	mv	a1, a4
80230964: 82 97        	jalr	a5
80230966: 4a 86        	mv	a2, s2
80230968: a6 85        	mv	a1, s1
8023096a: aa 86        	mv	a3, a0
8023096c: 52 85        	mv	a0, s4
8023096e: 85 44        	li	s1, 0x1
80230970: dd f6        	bnez	a3, 0x8023091e <_ZN4core3fmt8builders9DebugList5entry17hf8aa446d165ad807E+0x1a>
80230972: 10 6e        	ld	a2, 0x18(a2)
80230974: 2a 89        	mv	s2, a0
80230976: 2e 85        	mv	a0, a1
80230978: a2 85        	mv	a1, s0
8023097a: 02 96        	jalr	a2
8023097c: aa 84        	mv	s1, a0
8023097e: 4a 85        	mv	a0, s2
80230980: 79 bf        	j	0x8023091e <_ZN4core3fmt8builders9DebugList5entry17hf8aa446d165ad807E+0x1a>
80230982: 2e 89        	mv	s2, a1
80230984: 2a 8a        	mv	s4, a0
80230986: 0d e3        	bnez	a4, 0x802309a8 <.Lpcrel_hi29+0x1a>
80230988: 0c 74        	ld	a1, 0x28(s0)
8023098a: 08 70        	ld	a0, 0x20(s0)
8023098c: 94 6d        	ld	a3, 0x18(a1)

000000008023098e <.Lpcrel_hi29>:
8023098e: 97 b5 00 00  	auipc	a1, 0xb
80230992: 93 85 65 6c  	addi	a1, a1, 0x6c6
80230996: b2 8a        	mv	s5, a2
80230998: 05 46        	li	a2, 0x1
8023099a: 85 44        	li	s1, 0x1
8023099c: 82 96        	jalr	a3
8023099e: aa 85        	mv	a1, a0
802309a0: 52 85        	mv	a0, s4
802309a2: b5 fd        	bnez	a1, 0x8023091e <_ZN4core3fmt8builders9DebugList5entry17hf8aa446d165ad807E+0x1a>
802309a4: 56 86        	mv	a2, s5
802309a6: 54 58        	lw	a3, 0x34(s0)
802309a8: 08 70        	ld	a0, 0x20(s0)
802309aa: 0c 74        	ld	a1, 0x28(s0)
802309ac: 85 44        	li	s1, 0x1
802309ae: a3 03 91 02  	sb	s1, 0x27(sp)
802309b2: 2a e4        	sd	a0, 0x8(sp)
802309b4: 2e e8        	sd	a1, 0x10(sp)
802309b6: 13 05 71 02  	addi	a0, sp, 0x27
802309ba: 2a ec        	sd	a0, 0x18(sp)
802309bc: 08 58        	lw	a0, 0x30(s0)
802309be: 83 45 84 03  	lbu	a1, 0x38(s0)
802309c2: 18 60        	ld	a4, 0x0(s0)
802309c4: 1c 64        	ld	a5, 0x8(s0)
802309c6: 03 38 04 01  	ld	a6, 0x10(s0)
802309ca: 00 6c        	ld	s0, 0x18(s0)
802309cc: b6 ce        	sw	a3, 0x5c(sp)
802309ce: aa cc        	sw	a0, 0x58(sp)
802309d0: 23 00 b1 06  	sb	a1, 0x60(sp)
802309d4: 3a f4        	sd	a4, 0x28(sp)
802309d6: 3e f8        	sd	a5, 0x30(sp)
802309d8: 42 fc        	sd	a6, 0x38(sp)
802309da: a2 e0        	sd	s0, 0x40(sp)
802309dc: 28 00        	addi	a0, sp, 0x8
802309de: aa e4        	sd	a0, 0x48(sp)
802309e0: 10 6e        	ld	a2, 0x18(a2)

00000000802309e2 <.Lpcrel_hi30>:
802309e2: 17 b5 00 00  	auipc	a0, 0xb
802309e6: 13 05 65 2d  	addi	a0, a0, 0x2d6
802309ea: aa e8        	sd	a0, 0x50(sp)
802309ec: 2c 10        	addi	a1, sp, 0x28
802309ee: 4a 85        	mv	a0, s2
802309f0: 02 96        	jalr	a2
802309f2: 19 e9        	bnez	a0, 0x80230a08 <.Lpcrel_hi31+0xe>
802309f4: c6 65        	ld	a1, 0x50(sp)
802309f6: 26 65        	ld	a0, 0x48(sp)
802309f8: 94 6d        	ld	a3, 0x18(a1)

00000000802309fa <.Lpcrel_hi31>:
802309fa: 97 b5 00 00  	auipc	a1, 0xb
802309fe: 93 85 05 65  	addi	a1, a1, 0x650
80230a02: 09 46        	li	a2, 0x2
80230a04: 82 96        	jalr	a3
80230a06: aa 84        	mv	s1, a0
80230a08: 52 85        	mv	a0, s4
80230a0a: 11 bf        	j	0x8023091e <_ZN4core3fmt8builders9DebugList5entry17hf8aa446d165ad807E+0x1a>

0000000080230a0c <_ZN4core3fmt8builders9DebugList6finish17h599b8ae84f2379ceE>:
80230a0c: 83 45 85 00  	lbu	a1, 0x8(a0)
80230a10: 99 c1        	beqz	a1, 0x80230a16 <_ZN4core3fmt8builders9DebugList6finish17h599b8ae84f2379ceE+0xa>
80230a12: 05 45        	li	a0, 0x1
80230a14: 82 80        	ret
80230a16: 08 61        	ld	a0, 0x0(a0)
80230a18: 0c 75        	ld	a1, 0x28(a0)
80230a1a: 08 71        	ld	a0, 0x20(a0)
80230a1c: 9c 6d        	ld	a5, 0x18(a1)

0000000080230a1e <.Lpcrel_hi35>:
80230a1e: 97 b5 00 00  	auipc	a1, 0xb
80230a22: 93 85 85 63  	addi	a1, a1, 0x638
80230a26: 05 46        	li	a2, 0x1
80230a28: 82 87        	jr	a5

0000000080230a2a <_ZN4core3fmt5Write9write_fmt17h2f788142dedaaa73E>:
80230a2a: 17 b6 00 00  	auipc	a2, 0xb
80230a2e: 13 06 e6 62  	addi	a2, a2, 0x62e
80230a32: ae 86        	mv	a3, a1
80230a34: b2 85        	mv	a1, a2
80230a36: 36 86        	mv	a2, a3
80230a38: 17 f3 ff ff  	auipc	t1, 0xfffff
80230a3c: 67 00 03 a0  	jr	-0x600(t1) <ekernel+0xffce2438>

0000000080230a40 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17h34229ff4dc515a17E>:
80230a40: 1d 71        	addi	sp, sp, -0x60
80230a42: 2a e0        	sd	a0, 0x0(sp)
80230a44: 2e e4        	sd	a1, 0x8(sp)
80230a46: 28 00        	addi	a0, sp, 0x8
80230a48: aa e0        	sd	a0, 0x40(sp)

0000000080230a4a <.Lpcrel_hi17>:
80230a4a: 17 05 00 00  	auipc	a0, 0x0
80230a4e: 13 05 45 64  	addi	a0, a0, 0x644
80230a52: aa e4        	sd	a0, 0x48(sp)
80230a54: 8a 85        	mv	a1, sp
80230a56: ae e8        	sd	a1, 0x50(sp)
80230a58: aa ec        	sd	a0, 0x58(sp)

0000000080230a5a <.Lpcrel_hi18>:
80230a5a: 17 b5 00 00  	auipc	a0, 0xb
80230a5e: 13 05 65 67  	addi	a0, a0, 0x676
80230a62: 2a e8        	sd	a0, 0x10(sp)
80230a64: 0d 45        	li	a0, 0x3
80230a66: 2a ec        	sd	a0, 0x18(sp)
80230a68: 02 f8        	sd	zero, 0x30(sp)
80230a6a: 88 00        	addi	a0, sp, 0x40
80230a6c: 2a f0        	sd	a0, 0x20(sp)
80230a6e: 09 45        	li	a0, 0x2
80230a70: 2a f4        	sd	a0, 0x28(sp)
80230a72: 08 08        	addi	a0, sp, 0x10
80230a74: b2 85        	mv	a1, a2
80230a76: 97 f0 ff ff  	auipc	ra, 0xfffff
80230a7a: e7 80 20 73  	jalr	0x732(ra) <ekernel+0xffce31a8>

0000000080230a7e <_ZN4core3str8converts9from_utf817ha40bb0c757063278E>:
80230a7e: 59 71        	addi	sp, sp, -0x70
80230a80: 86 f4        	sd	ra, 0x68(sp)
80230a82: a2 f0        	sd	s0, 0x60(sp)
80230a84: a6 ec        	sd	s1, 0x58(sp)
80230a86: ca e8        	sd	s2, 0x50(sp)
80230a88: ce e4        	sd	s3, 0x48(sp)
80230a8a: d2 e0        	sd	s4, 0x40(sp)
80230a8c: 56 fc        	sd	s5, 0x38(sp)
80230a8e: 5a f8        	sd	s6, 0x30(sp)
80230a90: 5e f4        	sd	s7, 0x28(sp)
80230a92: 62 f0        	sd	s8, 0x20(sp)
80230a94: 66 ec        	sd	s9, 0x18(sp)
80230a96: 6a e8        	sd	s10, 0x10(sp)
80230a98: 6e e4        	sd	s11, 0x8(sp)
80230a9a: 63 05 06 1a  	beqz	a2, 0x80230c44 <.Lpcrel_hi21+0xee>
80230a9e: 81 46        	li	a3, 0x0
80230aa0: 13 07 16 ff  	addi	a4, a2, -0xf
80230aa4: b3 37 e6 00  	sltu	a5, a2, a4
80230aa8: fd 17        	addi	a5, a5, -0x1
80230aaa: 7d 8f        	and	a4, a4, a5
80230aac: 93 87 75 00  	addi	a5, a1, 0x7
80230ab0: e1 9b        	andi	a5, a5, -0x8
80230ab2: 33 88 b7 40  	sub	a6, a5, a1
80230ab6: 93 83 85 00  	addi	t2, a1, 0x8

0000000080230aba <.Lpcrel_hi20>:
80230aba: 97 b4 00 00  	auipc	s1, 0xb
80230abe: 93 88 64 64  	addi	a7, s1, 0x646
80230ac2: 91 42        	li	t0, 0x4
80230ac4: 13 03 00 0f  	li	t1, 0xf0
80230ac8: 13 0e f0 fb  	li	t3, -0x41
80230acc: 93 0e 40 0f  	li	t4, 0xf4
80230ad0: 13 0f f0 f8  	li	t5, -0x71
80230ad4: 89 4f        	li	t6, 0x2
80230ad6: 13 09 00 fc  	li	s2, -0x40
80230ada: 8d 4c        	li	s9, 0x3
80230adc: 13 0c 00 0e  	li	s8, 0xe0
80230ae0: 93 09 00 fa  	li	s3, -0x60
80230ae4: 13 0a d0 0e  	li	s4, 0xed
80230ae8: 93 0a f0 f9  	li	s5, -0x61
80230aec: 31 4b        	li	s6, 0xc
80230aee: 05 4d        	li	s10, 0x1
80230af0: 29 a0        	j	0x80230afa <.Lpcrel_hi20+0x40>
80230af2: 93 06 14 00  	addi	a3, s0, 0x1
80230af6: 63 f7 c6 14  	bgeu	a3, a2, 0x80230c44 <.Lpcrel_hi21+0xee>
80230afa: 33 84 d5 00  	add	s0, a1, a3
80230afe: 83 4b 04 00  	lbu	s7, 0x0(s0)
80230b02: 13 94 8b 03  	slli	s0, s7, 0x38
80230b06: 63 48 04 00  	bltz	s0, 0x80230b16 <.Lpcrel_hi20+0x5c>
80230b0a: 3b 04 d8 40  	subw	s0, a6, a3
80230b0e: 1d 88        	andi	s0, s0, 0x7
80230b10: 1d c8        	beqz	s0, 0x80230b46 <.Lpcrel_hi20+0x8c>
80230b12: 85 06        	addi	a3, a3, 0x1
80230b14: bd a0        	j	0x80230b82 <.Lpcrel_hi21+0x2c>
80230b16: b3 87 78 01  	add	a5, a7, s7
80230b1a: 83 c4 07 00  	lbu	s1, 0x0(a5)
80230b1e: 93 50 84 43  	srai	ra, s0, 0x38
80230b22: 63 81 54 08  	beq	s1, t0, 0x80230ba4 <.Lpcrel_hi21+0x4e>
80230b26: 63 81 94 07  	beq	s1, s9, 0x80230b88 <.Lpcrel_hi21+0x32>
80230b2a: 63 93 f4 13  	bne	s1, t6, 0x80230c50 <.Lpcrel_hi21+0xfa>
80230b2e: 13 84 16 00  	addi	s0, a3, 0x1
80230b32: 63 7d c4 10  	bgeu	s0, a2, 0x80230c4c <.Lpcrel_hi21+0xf6>
80230b36: b3 87 85 00  	add	a5, a1, s0
80230b3a: 83 87 07 00  	lb	a5, 0x0(a5)
80230b3e: 85 44        	li	s1, 0x1
80230b40: e3 59 fe fa  	bge	t3, a5, 0x80230af2 <.Lpcrel_hi20+0x38>
80230b44: 09 aa        	j	0x80230c56 <.Lpcrel_hi21+0x100>
80230b46: 63 f2 e6 02  	bgeu	a3, a4, 0x80230b6a <.Lpcrel_hi21+0x14>
80230b4a: 33 84 d5 00  	add	s0, a1, a3
80230b4e: 00 60        	ld	s0, 0x0(s0)
80230b50: b3 84 d3 00  	add	s1, t2, a3
80230b54: 84 60        	ld	s1, 0x0(s1)

0000000080230b56 <.Lpcrel_hi21>:
80230b56: 97 57 01 00  	auipc	a5, 0x15
80230b5a: 83 b7 a7 3f  	ld	a5, 0x3fa(a5)
80230b5e: 45 8c        	or	s0, s0, s1
80230b60: e1 8f        	and	a5, a5, s0
80230b62: 81 e7        	bnez	a5, 0x80230b6a <.Lpcrel_hi21+0x14>
80230b64: c1 06        	addi	a3, a3, 0x10
80230b66: e3 e2 e6 fe  	bltu	a3, a4, 0x80230b4a <.Lpcrel_hi20+0x90>
80230b6a: 63 fc c6 00  	bgeu	a3, a2, 0x80230b82 <.Lpcrel_hi21+0x2c>
80230b6e: b3 87 d5 00  	add	a5, a1, a3
80230b72: 83 87 07 00  	lb	a5, 0x0(a5)
80230b76: 63 c6 07 00  	bltz	a5, 0x80230b82 <.Lpcrel_hi21+0x2c>
80230b7a: 85 06        	addi	a3, a3, 0x1
80230b7c: e3 19 d6 fe  	bne	a2, a3, 0x80230b6e <.Lpcrel_hi21+0x18>
80230b80: d1 a0        	j	0x80230c44 <.Lpcrel_hi21+0xee>
80230b82: e3 ec c6 f6  	bltu	a3, a2, 0x80230afa <.Lpcrel_hi20+0x40>
80230b86: 7d a8        	j	0x80230c44 <.Lpcrel_hi21+0xee>
80230b88: 13 84 16 00  	addi	s0, a3, 0x1
80230b8c: 63 70 c4 0c  	bgeu	s0, a2, 0x80230c4c <.Lpcrel_hi21+0xf6>
80230b90: 2e 94        	add	s0, s0, a1
80230b92: 83 0d 04 00  	lb	s11, 0x0(s0)
80230b96: 63 85 8b 03  	beq	s7, s8, 0x80230bc0 <.Lpcrel_hi21+0x6a>
80230b9a: 63 91 4b 05  	bne	s7, s4, 0x80230bdc <.Lpcrel_hi21+0x86>
80230b9e: 63 dc ba 05  	bge	s5, s11, 0x80230bf6 <.Lpcrel_hi21+0xa0>
80230ba2: 7d a0        	j	0x80230c50 <.Lpcrel_hi21+0xfa>
80230ba4: 13 84 16 00  	addi	s0, a3, 0x1
80230ba8: 63 72 c4 0a  	bgeu	s0, a2, 0x80230c4c <.Lpcrel_hi21+0xf6>
80230bac: 2e 94        	add	s0, s0, a1
80230bae: 83 0d 04 00  	lb	s11, 0x0(s0)
80230bb2: 63 8c 6b 00  	beq	s7, t1, 0x80230bca <.Lpcrel_hi21+0x74>
80230bb6: 63 9b db 05  	bne	s7, t4, 0x80230c0c <.Lpcrel_hi21+0xb6>
80230bba: 63 50 bf 07  	bge	t5, s11, 0x80230c1a <.Lpcrel_hi21+0xc4>
80230bbe: 49 a8        	j	0x80230c50 <.Lpcrel_hi21+0xfa>
80230bc0: 93 f7 0d fe  	andi	a5, s11, -0x20
80230bc4: 63 89 37 03  	beq	a5, s3, 0x80230bf6 <.Lpcrel_hi21+0xa0>
80230bc8: 61 a0        	j	0x80230c50 <.Lpcrel_hi21+0xfa>
80230bca: 93 87 0d 07  	addi	a5, s11, 0x70
80230bce: 93 f7 f7 0f  	andi	a5, a5, 0xff
80230bd2: 13 04 00 03  	li	s0, 0x30
80230bd6: 63 e2 87 04  	bltu	a5, s0, 0x80230c1a <.Lpcrel_hi21+0xc4>
80230bda: 9d a8        	j	0x80230c50 <.Lpcrel_hi21+0xfa>
80230bdc: 93 87 f0 01  	addi	a5, ra, 0x1f
80230be0: 93 f7 f7 0f  	andi	a5, a5, 0xff
80230be4: 63 e7 67 01  	bltu	a5, s6, 0x80230bf2 <.Lpcrel_hi21+0x9c>
80230be8: 93 f7 e0 ff  	andi	a5, ra, -0x2
80230bec: 39 54        	li	s0, -0x12
80230bee: 63 91 87 06  	bne	a5, s0, 0x80230c50 <.Lpcrel_hi21+0xfa>
80230bf2: 63 df 2d 05  	bge	s11, s2, 0x80230c50 <.Lpcrel_hi21+0xfa>
80230bf6: 13 84 26 00  	addi	s0, a3, 0x2
80230bfa: 63 79 c4 04  	bgeu	s0, a2, 0x80230c4c <.Lpcrel_hi21+0xf6>
80230bfe: b3 87 85 00  	add	a5, a1, s0
80230c02: 83 87 07 00  	lb	a5, 0x0(a5)
80230c06: e3 56 fe ee  	bge	t3, a5, 0x80230af2 <.Lpcrel_hi20+0x38>
80230c0a: a9 a0        	j	0x80230c54 <.Lpcrel_hi21+0xfe>
80230c0c: bd 00        	addi	ra, ra, 0xf
80230c0e: 93 f7 f0 0f  	andi	a5, ra, 0xff
80230c12: 63 ef ff 02  	bltu	t6, a5, 0x80230c50 <.Lpcrel_hi21+0xfa>
80230c16: 63 dd 2d 03  	bge	s11, s2, 0x80230c50 <.Lpcrel_hi21+0xfa>
80230c1a: 13 84 26 00  	addi	s0, a3, 0x2
80230c1e: 63 77 c4 02  	bgeu	s0, a2, 0x80230c4c <.Lpcrel_hi21+0xf6>
80230c22: 2e 94        	add	s0, s0, a1
80230c24: 83 07 04 00  	lb	a5, 0x0(s0)
80230c28: 63 46 fe 02  	blt	t3, a5, 0x80230c54 <.Lpcrel_hi21+0xfe>
80230c2c: 13 84 36 00  	addi	s0, a3, 0x3
80230c30: 63 7e c4 00  	bgeu	s0, a2, 0x80230c4c <.Lpcrel_hi21+0xf6>
80230c34: b3 87 85 00  	add	a5, a1, s0
80230c38: 83 87 07 00  	lb	a5, 0x0(a5)
80230c3c: e3 5b fe ea  	bge	t3, a5, 0x80230af2 <.Lpcrel_hi20+0x38>
80230c40: 8d 44        	li	s1, 0x3
80230c42: 11 a8        	j	0x80230c56 <.Lpcrel_hi21+0x100>
80230c44: 81 46        	li	a3, 0x0
80230c46: 0c e5        	sd	a1, 0x8(a0)
80230c48: 10 e9        	sd	a2, 0x10(a0)
80230c4a: 21 a8        	j	0x80230c62 <.Lpcrel_hi21+0x10c>
80230c4c: 01 4d        	li	s10, 0x0
80230c4e: 21 a0        	j	0x80230c56 <.Lpcrel_hi21+0x100>
80230c50: 85 44        	li	s1, 0x1
80230c52: 11 a0        	j	0x80230c56 <.Lpcrel_hi21+0x100>
80230c54: 89 44        	li	s1, 0x2
80230c56: 14 e5        	sd	a3, 0x8(a0)
80230c58: 23 08 a5 01  	sb	s10, 0x10(a0)
80230c5c: a3 08 95 00  	sb	s1, 0x11(a0)
80230c60: 85 46        	li	a3, 0x1
80230c62: 14 e1        	sd	a3, 0x0(a0)
80230c64: a6 70        	ld	ra, 0x68(sp)
80230c66: 06 74        	ld	s0, 0x60(sp)
80230c68: e6 64        	ld	s1, 0x58(sp)
80230c6a: 46 69        	ld	s2, 0x50(sp)
80230c6c: a6 69        	ld	s3, 0x48(sp)
80230c6e: 06 6a        	ld	s4, 0x40(sp)
80230c70: e2 7a        	ld	s5, 0x38(sp)
80230c72: 42 7b        	ld	s6, 0x30(sp)
80230c74: a2 7b        	ld	s7, 0x28(sp)
80230c76: 02 7c        	ld	s8, 0x20(sp)
80230c78: e2 6c        	ld	s9, 0x18(sp)
80230c7a: 42 6d        	ld	s10, 0x10(sp)
80230c7c: a2 6d        	ld	s11, 0x8(sp)
80230c7e: 65 61        	addi	sp, sp, 0x70
80230c80: 82 80        	ret

0000000080230c82 <_ZN63_$LT$core..cell..BorrowMutError$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e8a4ad550e5d54bE>:
80230c82: 90 75        	ld	a2, 0x28(a1)
80230c84: 88 71        	ld	a0, 0x20(a1)
80230c86: 1c 6e        	ld	a5, 0x18(a2)

0000000080230c88 <.Lpcrel_hi24>:
80230c88: 97 b5 00 00  	auipc	a1, 0xb
80230c8c: 93 85 85 57  	addi	a1, a1, 0x578
80230c90: 39 46        	li	a2, 0xe
80230c92: 82 87        	jr	a5

0000000080230c94 <_ZN4core4cell22panic_already_borrowed17h74ac598938e12d26E>:
80230c94: 5d 71        	addi	sp, sp, -0x50
80230c96: aa 85        	mv	a1, a0
80230c98: 13 05 f1 04  	addi	a0, sp, 0x4f
80230c9c: 2a fc        	sd	a0, 0x38(sp)

0000000080230c9e <.Lpcrel_hi26>:
80230c9e: 17 05 00 00  	auipc	a0, 0x0
80230ca2: 13 05 45 fe  	addi	a0, a0, -0x1c
80230ca6: aa e0        	sd	a0, 0x40(sp)

0000000080230ca8 <.Lpcrel_hi27>:
80230ca8: 17 b5 00 00  	auipc	a0, 0xb
80230cac: 13 05 85 57  	addi	a0, a0, 0x578
80230cb0: 2a e4        	sd	a0, 0x8(sp)
80230cb2: 05 45        	li	a0, 0x1
80230cb4: 2a e8        	sd	a0, 0x10(sp)
80230cb6: 02 f4        	sd	zero, 0x28(sp)
80230cb8: 30 18        	addi	a2, sp, 0x38
80230cba: 32 ec        	sd	a2, 0x18(sp)
80230cbc: 2a f0        	sd	a0, 0x20(sp)
80230cbe: 28 00        	addi	a0, sp, 0x8
80230cc0: 97 f0 ff ff  	auipc	ra, 0xfffff
80230cc4: e7 80 80 4e  	jalr	0x4e8(ra) <ekernel+0xffce31a8>

0000000080230cc8 <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>:
80230cc8: 2a 86        	mv	a2, a0

0000000080230cca <.Lpcrel_hi33>:
80230cca: 17 b5 00 00  	auipc	a0, 0xb
80230cce: 13 05 65 56  	addi	a0, a0, 0x566
80230cd2: 93 05 b0 02  	li	a1, 0x2b
80230cd6: 97 f0 ff ff  	auipc	ra, 0xfffff
80230cda: e7 80 20 54  	jalr	0x542(ra) <ekernel+0xffce3218>

0000000080230cde <_ZN4core6option13expect_failed17h188406d5b767976cE>:
80230cde: 41 11        	addi	sp, sp, -0x10
80230ce0: 2a e0        	sd	a0, 0x0(sp)
80230ce2: 2e e4        	sd	a1, 0x8(sp)
80230ce4: 0a 85        	mv	a0, sp
80230ce6: b2 85        	mv	a1, a2
80230ce8: 97 00 00 00  	auipc	ra, 0x0
80230cec: e7 80 80 00  	jalr	0x8(ra) <_ZN4core9panicking13panic_display17h4f5486ff24301170E>

0000000080230cf0 <_ZN4core9panicking13panic_display17h4f5486ff24301170E>:
80230cf0: 39 71        	addi	sp, sp, -0x40
80230cf2: 2a f8        	sd	a0, 0x30(sp)

0000000080230cf4 <.Lpcrel_hi34>:
80230cf4: 17 f5 ff ff  	auipc	a0, 0xfffff
80230cf8: 13 05 05 4a  	addi	a0, a0, 0x4a0
80230cfc: 2a fc        	sd	a0, 0x38(sp)

0000000080230cfe <.Lpcrel_hi35>:
80230cfe: 17 b5 00 00  	auipc	a0, 0xb
80230d02: 13 05 25 56  	addi	a0, a0, 0x562
80230d06: 2a e0        	sd	a0, 0x0(sp)
80230d08: 05 45        	li	a0, 0x1
80230d0a: 2a e4        	sd	a0, 0x8(sp)
80230d0c: 02 f0        	sd	zero, 0x20(sp)
80230d0e: 10 18        	addi	a2, sp, 0x30
80230d10: 32 e8        	sd	a2, 0x10(sp)
80230d12: 2a ec        	sd	a0, 0x18(sp)
80230d14: 0a 85        	mv	a0, sp
80230d16: 97 f0 ff ff  	auipc	ra, 0xfffff
80230d1a: e7 80 20 49  	jalr	0x492(ra) <ekernel+0xffce31a8>

0000000080230d1e <_ZN4core6result13unwrap_failed17hd7dd91774099986cE>:
80230d1e: 59 71        	addi	sp, sp, -0x70
80230d20: 2a e0        	sd	a0, 0x0(sp)
80230d22: 2e e4        	sd	a1, 0x8(sp)
80230d24: 32 e8        	sd	a2, 0x10(sp)
80230d26: 36 ec        	sd	a3, 0x18(sp)
80230d28: 0a 85        	mv	a0, sp
80230d2a: aa e8        	sd	a0, 0x50(sp)

0000000080230d2c <.Lpcrel_hi36>:
80230d2c: 17 f5 ff ff  	auipc	a0, 0xfffff
80230d30: 13 05 85 46  	addi	a0, a0, 0x468
80230d34: aa ec        	sd	a0, 0x58(sp)
80230d36: 08 08        	addi	a0, sp, 0x10
80230d38: aa f0        	sd	a0, 0x60(sp)

0000000080230d3a <.Lpcrel_hi37>:
80230d3a: 17 f5 ff ff  	auipc	a0, 0xfffff
80230d3e: 13 05 a5 36  	addi	a0, a0, 0x36a
80230d42: aa f4        	sd	a0, 0x68(sp)

0000000080230d44 <.Lpcrel_hi38>:
80230d44: 17 b5 00 00  	auipc	a0, 0xb
80230d48: 13 05 45 53  	addi	a0, a0, 0x534
80230d4c: 2a f0        	sd	a0, 0x20(sp)
80230d4e: 09 45        	li	a0, 0x2
80230d50: 2a f4        	sd	a0, 0x28(sp)
80230d52: 82 e0        	sd	zero, 0x40(sp)
80230d54: 8c 08        	addi	a1, sp, 0x50
80230d56: 2e f8        	sd	a1, 0x30(sp)
80230d58: 2a fc        	sd	a0, 0x38(sp)
80230d5a: 08 10        	addi	a0, sp, 0x20
80230d5c: ba 85        	mv	a1, a4
80230d5e: 97 f0 ff ff  	auipc	ra, 0xfffff
80230d62: e7 80 a0 44  	jalr	0x44a(ra) <ekernel+0xffce31a8>

0000000080230d66 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE>:
80230d66: 2a 86        	mv	a2, a0
80230d68: 93 07 75 00  	addi	a5, a0, 0x7
80230d6c: e1 9b        	andi	a5, a5, -0x8
80230d6e: b3 86 a7 40  	sub	a3, a5, a0
80230d72: 63 e0 d5 12  	bltu	a1, a3, 0x80230e92 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x12c>
80230d76: 33 87 d5 40  	sub	a4, a1, a3
80230d7a: 13 53 37 00  	srli	t1, a4, 0x3
80230d7e: 63 0a 03 10  	beqz	t1, 0x80230e92 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x12c>
80230d82: b2 96        	add	a3, a3, a2
80230d84: 13 78 77 00  	andi	a6, a4, 0x7
80230d88: 01 45        	li	a0, 0x0
80230d8a: 63 8c c7 00  	beq	a5, a2, 0x80230da2 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x3c>
80230d8e: 83 05 06 00  	lb	a1, 0x0(a2)
80230d92: 93 a5 05 fc  	slti	a1, a1, -0x40
80230d96: 93 c5 15 00  	xori	a1, a1, 0x1
80230d9a: 05 06        	addi	a2, a2, 0x1
80230d9c: 2e 95        	add	a0, a0, a1
80230d9e: e3 18 d6 fe  	bne	a2, a3, 0x80230d8e <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x28>
80230da2: 01 46        	li	a2, 0x0
80230da4: 63 01 08 02  	beqz	a6, 0x80230dc6 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x60>
80230da8: 61 9b        	andi	a4, a4, -0x8
80230daa: b3 05 f7 00  	add	a1, a4, a5
80230dae: 36 97        	add	a4, a4, a3
80230db0: c2 95        	add	a1, a1, a6
80230db2: 83 07 07 00  	lb	a5, 0x0(a4)
80230db6: 93 a7 07 fc  	slti	a5, a5, -0x40
80230dba: 93 c7 17 00  	xori	a5, a5, 0x1
80230dbe: 05 07        	addi	a4, a4, 0x1
80230dc0: 3e 96        	add	a2, a2, a5
80230dc2: e3 18 b7 fe  	bne	a4, a1, 0x80230db2 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x4c>
80230dc6: b7 05 01 01  	lui	a1, 0x1010
80230dca: 9b 85 15 10  	addiw	a1, a1, 0x101
80230dce: 13 97 05 02  	slli	a4, a1, 0x20
80230dd2: b3 8f e5 00  	add	t6, a1, a4
80230dd6: 37 07 ff 00  	lui	a4, 0xff0
80230dda: 9b 08 f7 0f  	addiw	a7, a4, 0xff
80230dde: 13 97 08 02  	slli	a4, a7, 0x20
80230de2: ba 98        	add	a7, a7, a4
80230de4: 41 67        	lui	a4, 0x10
80230de6: 05 27        	addiw	a4, a4, 0x1
80230de8: 13 18 07 02  	slli	a6, a4, 0x20
80230dec: 3a 98        	add	a6, a6, a4
80230dee: 32 95        	add	a0, a0, a2
80230df0: 91 42        	li	t0, 0x4
80230df2: 15 a0        	j	0x80230e16 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0xb0>
80230df4: b3 06 6e 00  	add	a3, t3, t1
80230df8: 33 83 7e 40  	sub	t1, t4, t2
80230dfc: 93 f5 33 00  	andi	a1, t2, 0x3
80230e00: 33 f6 17 01  	and	a2, a5, a7
80230e04: a1 83        	srli	a5, a5, 0x8
80230e06: 33 f7 17 01  	and	a4, a5, a7
80230e0a: 3a 96        	add	a2, a2, a4
80230e0c: 33 06 06 03  	mul	a2, a2, a6
80230e10: 41 92        	srli	a2, a2, 0x30
80230e12: 32 95        	add	a0, a0, a2
80230e14: c9 ed        	bnez	a1, 0x80230eae <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x148>
80230e16: 63 0b 03 08  	beqz	t1, 0x80230eac <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x146>
80230e1a: 36 8e        	mv	t3, a3
80230e1c: 9a 8e        	mv	t4, t1
80230e1e: 13 06 00 0c  	li	a2, 0xc0
80230e22: 9a 83        	mv	t2, t1
80230e24: 63 64 c3 00  	bltu	t1, a2, 0x80230e2c <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0xc6>
80230e28: 93 03 00 0c  	li	t2, 0xc0
80230e2c: 13 93 33 00  	slli	t1, t2, 0x3
80230e30: 81 47        	li	a5, 0x0
80230e32: e3 e1 5e fc  	bltu	t4, t0, 0x80230df4 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x8e>
80230e36: 13 76 03 7e  	andi	a2, t1, 0x7e0
80230e3a: 33 0f ce 00  	add	t5, t3, a2
80230e3e: f2 86        	mv	a3, t3
80230e40: 98 62        	ld	a4, 0x0(a3)
80230e42: 13 46 f7 ff  	not	a2, a4
80230e46: 1d 82        	srli	a2, a2, 0x7
80230e48: 19 83        	srli	a4, a4, 0x6
80230e4a: 8c 66        	ld	a1, 0x8(a3)
80230e4c: 59 8e        	or	a2, a2, a4
80230e4e: 33 76 f6 01  	and	a2, a2, t6
80230e52: 3e 96        	add	a2, a2, a5
80230e54: 13 c7 f5 ff  	not	a4, a1
80230e58: 1d 83        	srli	a4, a4, 0x7
80230e5a: 9c 6a        	ld	a5, 0x10(a3)
80230e5c: 99 81        	srli	a1, a1, 0x6
80230e5e: d9 8d        	or	a1, a1, a4
80230e60: b3 f5 f5 01  	and	a1, a1, t6
80230e64: 13 c7 f7 ff  	not	a4, a5
80230e68: 1d 83        	srli	a4, a4, 0x7
80230e6a: 99 83        	srli	a5, a5, 0x6
80230e6c: 5d 8f        	or	a4, a4, a5
80230e6e: 9c 6e        	ld	a5, 0x18(a3)
80230e70: 33 77 f7 01  	and	a4, a4, t6
80230e74: ba 95        	add	a1, a1, a4
80230e76: b2 95        	add	a1, a1, a2
80230e78: 13 c6 f7 ff  	not	a2, a5
80230e7c: 1d 82        	srli	a2, a2, 0x7
80230e7e: 99 83        	srli	a5, a5, 0x6
80230e80: 5d 8e        	or	a2, a2, a5
80230e82: b3 77 f6 01  	and	a5, a2, t6
80230e86: 93 86 06 02  	addi	a3, a3, 0x20
80230e8a: ae 97        	add	a5, a5, a1
80230e8c: e3 9a e6 fb  	bne	a3, t5, 0x80230e40 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0xda>
80230e90: 95 b7        	j	0x80230df4 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x8e>
80230e92: 01 45        	li	a0, 0x0
80230e94: 81 cd        	beqz	a1, 0x80230eac <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x146>
80230e96: b2 95        	add	a1, a1, a2
80230e98: 83 06 06 00  	lb	a3, 0x0(a2)
80230e9c: 93 a6 06 fc  	slti	a3, a3, -0x40
80230ea0: 93 c6 16 00  	xori	a3, a3, 0x1
80230ea4: 05 06        	addi	a2, a2, 0x1
80230ea6: 36 95        	add	a0, a0, a3
80230ea8: e3 18 b6 fe  	bne	a2, a1, 0x80230e98 <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x132>
80230eac: 82 80        	ret
80230eae: 01 46        	li	a2, 0x0
80230eb0: 93 f5 c3 0f  	andi	a1, t2, 0xfc
80230eb4: 8e 05        	slli	a1, a1, 0x3
80230eb6: 2e 9e        	add	t3, t3, a1
80230eb8: 93 b5 0e 0c  	sltiu	a1, t4, 0xc0
80230ebc: bb 05 b0 40  	negw	a1, a1
80230ec0: b3 f5 be 00  	and	a1, t4, a1
80230ec4: 8d 89        	andi	a1, a1, 0x3
80230ec6: 93 96 35 00  	slli	a3, a1, 0x3
80230eca: 83 35 0e 00  	ld	a1, 0x0(t3)
80230ece: 21 0e        	addi	t3, t3, 0x8
80230ed0: 13 c7 f5 ff  	not	a4, a1
80230ed4: 1d 83        	srli	a4, a4, 0x7
80230ed6: 99 81        	srli	a1, a1, 0x6
80230ed8: d9 8d        	or	a1, a1, a4
80230eda: b3 f5 f5 01  	and	a1, a1, t6
80230ede: e1 16        	addi	a3, a3, -0x8
80230ee0: 2e 96        	add	a2, a2, a1
80230ee2: e5 f6        	bnez	a3, 0x80230eca <_ZN4core3str5count14do_count_chars17h96ebf8d53d7e0d2cE+0x164>
80230ee4: b3 75 16 01  	and	a1, a2, a7
80230ee8: 21 82        	srli	a2, a2, 0x8
80230eea: 33 76 16 01  	and	a2, a2, a7
80230eee: b2 95        	add	a1, a1, a2
80230ef0: b3 85 05 03  	mul	a1, a1, a6
80230ef4: c1 91        	srli	a1, a1, 0x30
80230ef6: 2e 95        	add	a0, a0, a1
80230ef8: 82 80        	ret

0000000080230efa <_ZN4core3fmt3num3imp7fmt_u6417h7453891336dff777E.llvm.11516760488915390033>:
80230efa: 79 71        	addi	sp, sp, -0x30
80230efc: 06 f4        	sd	ra, 0x28(sp)
80230efe: 32 88        	mv	a6, a2
80230f00: 93 56 45 00  	srli	a3, a0, 0x4
80230f04: 13 0f 70 02  	li	t5, 0x27
80230f08: 93 07 10 27  	li	a5, 0x271

0000000080230f0c <.Lpcrel_hi36>:
80230f0c: 17 b7 00 00  	auipc	a4, 0xb
80230f10: 93 0e e7 b2  	addi	t4, a4, -0x4d2
80230f14: 63 e3 f6 08  	bltu	a3, a5, 0x80230f9a <.Lpcrel_hi37+0x7a>
80230f18: 13 0f 70 02  	li	t5, 0x27
80230f1c: 93 07 61 02  	addi	a5, sp, 0x26

0000000080230f20 <.Lpcrel_hi37>:
80230f20: 97 56 01 00  	auipc	a3, 0x15
80230f24: 83 b8 06 06  	ld	a7, 0x60(a3)
80230f28: 89 66        	lui	a3, 0x2
80230f2a: 93 82 06 71  	addi	t0, a3, 0x710
80230f2e: 85 66        	lui	a3, 0x1
80230f30: 9b 83 b6 47  	addiw	t2, a3, 0x47b
80230f34: 13 03 40 06  	li	t1, 0x64
80230f38: b7 e6 f5 05  	lui	a3, 0x5f5e
80230f3c: 1b 8e f6 0f  	addiw	t3, a3, 0xff
80230f40: aa 8f        	mv	t6, a0
80230f42: 33 35 15 03  	mulhu	a0, a0, a7
80230f46: 2d 81        	srli	a0, a0, 0xb
80230f48: 33 07 55 02  	mul	a4, a0, t0
80230f4c: bb 86 ef 40  	subw	a3, t6, a4
80230f50: 13 97 06 03  	slli	a4, a3, 0x30
80230f54: 49 93        	srli	a4, a4, 0x32
80230f56: 33 07 77 02  	mul	a4, a4, t2
80230f5a: 13 56 17 01  	srli	a2, a4, 0x11
80230f5e: 41 83        	srli	a4, a4, 0x10
80230f60: 13 77 e7 7f  	andi	a4, a4, 0x7fe
80230f64: 33 06 66 02  	mul	a2, a2, t1
80230f68: 91 9e        	subw	a3, a3, a2
80230f6a: 76 97        	add	a4, a4, t4
80230f6c: 03 46 17 00  	lbu	a2, 0x1(a4)
80230f70: c6 16        	slli	a3, a3, 0x31
80230f72: c1 92        	srli	a3, a3, 0x30
80230f74: 03 47 07 00  	lbu	a4, 0x0(a4)
80230f78: a3 8f c7 fe  	sb	a2, -0x1(a5)
80230f7c: f6 96        	add	a3, a3, t4
80230f7e: 03 c6 16 00  	lbu	a2, 0x1(a3)
80230f82: 83 c6 06 00  	lbu	a3, 0x0(a3)
80230f86: 71 1f        	addi	t5, t5, -0x4
80230f88: 23 8f e7 fe  	sb	a4, -0x2(a5)
80230f8c: a3 80 c7 00  	sb	a2, 0x1(a5)
80230f90: 23 80 d7 00  	sb	a3, 0x0(a5)
80230f94: f1 17        	addi	a5, a5, -0x4
80230f96: e3 65 fe fb  	bltu	t3, t6, 0x80230f40 <.Lpcrel_hi37+0x20>
80230f9a: 93 06 30 06  	li	a3, 0x63
80230f9e: 63 f0 a6 04  	bgeu	a3, a0, 0x80230fde <.Lpcrel_hi37+0xbe>
80230fa2: 13 16 05 03  	slli	a2, a0, 0x30
80230fa6: 49 92        	srli	a2, a2, 0x32
80230fa8: 85 66        	lui	a3, 0x1
80230faa: 9b 86 b6 47  	addiw	a3, a3, 0x47b
80230fae: 33 06 d6 02  	mul	a2, a2, a3
80230fb2: 45 82        	srli	a2, a2, 0x11
80230fb4: 93 06 40 06  	li	a3, 0x64
80230fb8: b3 06 d6 02  	mul	a3, a2, a3
80230fbc: 15 9d        	subw	a0, a0, a3
80230fbe: 46 15        	slli	a0, a0, 0x31
80230fc0: 41 91        	srli	a0, a0, 0x30
80230fc2: 79 1f        	addi	t5, t5, -0x2
80230fc4: 76 95        	add	a0, a0, t4
80230fc6: 83 46 15 00  	lbu	a3, 0x1(a0)
80230fca: 03 45 05 00  	lbu	a0, 0x0(a0)
80230fce: 13 07 11 00  	addi	a4, sp, 0x1
80230fd2: 7a 97        	add	a4, a4, t5
80230fd4: a3 00 d7 00  	sb	a3, 0x1(a4)
80230fd8: 23 00 a7 00  	sb	a0, 0x0(a4)
80230fdc: 32 85        	mv	a0, a2
80230fde: 29 46        	li	a2, 0xa
80230fe0: 63 7c c5 00  	bgeu	a0, a2, 0x80230ff8 <.Lpcrel_hi37+0xd8>
80230fe4: 13 06 ff ff  	addi	a2, t5, -0x1
80230fe8: 93 06 11 00  	addi	a3, sp, 0x1
80230fec: b2 96        	add	a3, a3, a2
80230fee: 13 65 05 03  	ori	a0, a0, 0x30
80230ff2: 23 80 a6 00  	sb	a0, 0x0(a3)
80230ff6: 05 a0        	j	0x80231016 <.Lpcrel_hi37+0xf6>
80230ff8: 06 05        	slli	a0, a0, 0x1
80230ffa: 13 06 ef ff  	addi	a2, t5, -0x2
80230ffe: 76 95        	add	a0, a0, t4
80231000: 83 46 15 00  	lbu	a3, 0x1(a0)
80231004: 03 45 05 00  	lbu	a0, 0x0(a0)
80231008: 13 07 11 00  	addi	a4, sp, 0x1
8023100c: 32 97        	add	a4, a4, a2
8023100e: a3 00 d7 00  	sb	a3, 0x1(a4)
80231012: 23 00 a7 00  	sb	a0, 0x0(a4)
80231016: 13 07 11 00  	addi	a4, sp, 0x1
8023101a: 32 97        	add	a4, a4, a2
8023101c: 93 07 70 02  	li	a5, 0x27
80231020: 91 8f        	sub	a5, a5, a2

0000000080231022 <.Lpcrel_hi38>:
80231022: 17 b5 00 00  	auipc	a0, 0xb
80231026: 13 06 65 27  	addi	a2, a0, 0x276
8023102a: 42 85        	mv	a0, a6
8023102c: 81 46        	li	a3, 0x0
8023102e: 97 e0 ff ff  	auipc	ra, 0xffffe
80231032: e7 80 00 5a  	jalr	0x5a0(ra) <ekernel+0xffce25ce>
80231036: a2 70        	ld	ra, 0x28(sp)
80231038: 45 61        	addi	sp, sp, 0x30
8023103a: 82 80        	ret

000000008023103c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17hcdc3a7a7d6bb39feE>:
8023103c: 03 45 05 00  	lbu	a0, 0x0(a0)
80231040: 2e 86        	mv	a2, a1
80231042: 85 45        	li	a1, 0x1
80231044: 17 03 00 00  	auipc	t1, 0x0
80231048: 67 00 63 eb  	jr	-0x14a(t1) <_ZN4core3fmt3num3imp7fmt_u6417h7453891336dff777E.llvm.11516760488915390033>

000000008023104c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17hfbd06b8f9fd36410E>:
8023104c: 03 55 05 00  	lhu	a0, 0x0(a0)
80231050: 2e 86        	mv	a2, a1
80231052: 85 45        	li	a1, 0x1
80231054: 17 03 00 00  	auipc	t1, 0x0
80231058: 67 00 63 ea  	jr	-0x15a(t1) <_ZN4core3fmt3num3imp7fmt_u6417h7453891336dff777E.llvm.11516760488915390033>

000000008023105c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h058f198655760c96E>:
8023105c: 10 41        	lw	a2, 0x0(a0)
8023105e: 13 55 f6 43  	srai	a0, a2, 0x3f
80231062: b3 46 a6 00  	xor	a3, a2, a0
80231066: 33 85 a6 40  	sub	a0, a3, a0
8023106a: 13 46 f6 ff  	not	a2, a2
8023106e: 7d 92        	srli	a2, a2, 0x3f
80231070: ae 86        	mv	a3, a1
80231072: b2 85        	mv	a1, a2
80231074: 36 86        	mv	a2, a3
80231076: 17 03 00 00  	auipc	t1, 0x0
8023107a: 67 00 43 e8  	jr	-0x17c(t1) <_ZN4core3fmt3num3imp7fmt_u6417h7453891336dff777E.llvm.11516760488915390033>

000000008023107e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h25b4b8f7e2ff91dcE>:
8023107e: 03 65 05 00  	lwu	a0, 0x0(a0)
80231082: 2e 86        	mv	a2, a1
80231084: 85 45        	li	a1, 0x1
80231086: 17 03 00 00  	auipc	t1, 0x0
8023108a: 67 00 43 e7  	jr	-0x18c(t1) <_ZN4core3fmt3num3imp7fmt_u6417h7453891336dff777E.llvm.11516760488915390033>

000000008023108e <_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h6446c111abea6893E>:
8023108e: 08 61        	ld	a0, 0x0(a0)
80231090: 2e 86        	mv	a2, a1
80231092: 85 45        	li	a1, 0x1
80231094: 17 03 00 00  	auipc	t1, 0x0
80231098: 67 00 63 e6  	jr	-0x19a(t1) <_ZN4core3fmt3num3imp7fmt_u6417h7453891336dff777E.llvm.11516760488915390033>

000000008023109c <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hbe2a056bacaa50a0E>:
8023109c: 17 55 01 00  	auipc	a0, 0x15
802310a0: 03 35 45 f2  	ld	a0, -0xdc(a0)

00000000802310a4 <.Lpcrel_hi98>:
802310a4: 97 55 01 00  	auipc	a1, 0x15
802310a8: 83 b5 45 f2  	ld	a1, -0xdc(a1)
802310ac: 82 80        	ret

00000000802310ae <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17h9ee555fd8386e57cE>:
802310ae: 81 48        	li	a7, 0x0
802310b0: 1b 16 b5 00  	slliw	a2, a0, 0xb
802310b4: 93 07 10 02  	li	a5, 0x21

00000000802310b8 <.Lpcrel_hi142>:
802310b8: 97 b5 00 00  	auipc	a1, 0xb
802310bc: 13 88 05 29  	addi	a6, a1, 0x290
802310c0: 93 05 10 02  	li	a1, 0x21
802310c4: 31 a0        	j	0x802310d0 <.Lpcrel_hi142+0x18>
802310c6: b3 07 17 41  	sub	a5, a4, a7
802310ca: ba 85        	mv	a1, a4
802310cc: 63 fa e8 02  	bgeu	a7, a4, 0x80231100 <.Lpcrel_hi142+0x48>
802310d0: 85 83        	srli	a5, a5, 0x1
802310d2: c6 97        	add	a5, a5, a7
802310d4: 93 96 27 00  	slli	a3, a5, 0x2
802310d8: c2 96        	add	a3, a3, a6
802310da: 94 42        	lw	a3, 0x0(a3)
802310dc: 9b 96 b6 00  	slliw	a3, a3, 0xb
802310e0: 63 8e c6 00  	beq	a3, a2, 0x802310fc <.Lpcrel_hi142+0x44>
802310e4: 3e 87        	mv	a4, a5
802310e6: 63 75 d6 00  	bgeu	a2, a3, 0x802310f0 <.Lpcrel_hi142+0x38>
802310ea: e3 fe c6 fc  	bgeu	a3, a2, 0x802310c6 <.Lpcrel_hi142+0xe>
802310ee: 21 a0        	j	0x802310f6 <.Lpcrel_hi142+0x3e>
802310f0: 2e 87        	mv	a4, a1
802310f2: e3 fa c6 fc  	bgeu	a3, a2, 0x802310c6 <.Lpcrel_hi142+0xe>
802310f6: 93 88 17 00  	addi	a7, a5, 0x1
802310fa: f1 b7        	j	0x802310c6 <.Lpcrel_hi142+0xe>
802310fc: 93 88 17 00  	addi	a7, a5, 0x1
80231100: 93 06 00 02  	li	a3, 0x20
80231104: 63 e0 16 0b  	bltu	a3, a7, 0x802311a4 <.Lpcrel_hi143>
80231108: 13 97 28 00  	slli	a4, a7, 0x2
8023110c: 42 97        	add	a4, a4, a6
8023110e: 83 65 07 00  	lwu	a1, 0x0(a4)
80231112: 93 02 70 2d  	li	t0, 0x2d7
80231116: 63 89 d8 00  	beq	a7, a3, 0x80231128 <.Lpcrel_hi142+0x70>
8023111a: 93 06 47 00  	addi	a3, a4, 0x4
8023111e: 89 c6        	beqz	a3, 0x80231128 <.Lpcrel_hi142+0x70>
80231120: 03 e6 06 00  	lwu	a2, 0x0(a3)
80231124: 93 52 56 01  	srli	t0, a2, 0x15
80231128: 13 d6 55 01  	srli	a2, a1, 0x15
8023112c: 63 8e 08 00  	beqz	a7, 0x80231148 <.Lpcrel_hi142+0x90>
80231130: 83 66 c7 ff  	lwu	a3, -0x4(a4)
80231134: ae 16        	slli	a3, a3, 0x2b
80231136: 13 d7 b6 02  	srli	a4, a3, 0x2b
8023113a: 93 46 f6 ff  	not	a3, a2
8023113e: 96 96        	add	a3, a3, t0
80231140: 89 ea        	bnez	a3, 0x80231152 <.Lpcrel_hi142+0x9a>
80231142: 13 75 16 00  	andi	a0, a2, 0x1
80231146: 82 80        	ret
80231148: 01 47        	li	a4, 0x0
8023114a: 93 46 f6 ff  	not	a3, a2
8023114e: 96 96        	add	a3, a3, t0
80231150: ed da        	beqz	a3, 0x80231142 <.Lpcrel_hi142+0x8a>
80231152: 93 07 70 2d  	li	a5, 0x2d7
80231156: 32 88        	mv	a6, a2
80231158: 63 e4 c7 00  	bltu	a5, a2, 0x80231160 <.Lpcrel_hi142+0xa8>
8023115c: 13 08 70 2d  	li	a6, 0x2d7
80231160: 81 47        	li	a5, 0x0
80231162: 19 9d        	subw	a0, a0, a4
80231164: 93 86 f2 ff  	addi	a3, t0, -0x1

0000000080231168 <.Lpcrel_hi144>:
80231168: 17 b7 00 00  	auipc	a4, 0xb
8023116c: 13 07 47 26  	addi	a4, a4, 0x264
80231170: 63 0f c8 00  	beq	a6, a2, 0x8023118e <.Lpcrel_hi145>
80231174: b3 05 c7 00  	add	a1, a4, a2
80231178: 83 c5 05 00  	lbu	a1, 0x0(a1)
8023117c: ad 9f        	addw	a5, a5, a1
8023117e: e3 62 f5 fc  	bltu	a0, a5, 0x80231142 <.Lpcrel_hi142+0x8a>
80231182: 05 06        	addi	a2, a2, 0x1
80231184: e3 96 c6 fe  	bne	a3, a2, 0x80231170 <.Lpcrel_hi144+0x8>
80231188: 13 f5 16 00  	andi	a0, a3, 0x1
8023118c: 82 80        	ret

000000008023118e <.Lpcrel_hi145>:
8023118e: 17 b5 00 00  	auipc	a0, 0xb
80231192: 13 06 25 1a  	addi	a2, a0, 0x1a2
80231196: 93 05 70 2d  	li	a1, 0x2d7
8023119a: 42 85        	mv	a0, a6
8023119c: 97 f0 ff ff  	auipc	ra, 0xfffff
802311a0: e7 80 40 11  	jalr	0x114(ra) <ekernel+0xffce32b0>

00000000802311a4 <.Lpcrel_hi143>:
802311a4: 17 b5 00 00  	auipc	a0, 0xb
802311a8: 13 06 45 17  	addi	a2, a0, 0x174
802311ac: 93 05 10 02  	li	a1, 0x21
802311b0: 46 85        	mv	a0, a7
802311b2: 97 f0 ff ff  	auipc	ra, 0xfffff
802311b6: e7 80 e0 0f  	jalr	0xfe(ra) <ekernel+0xffce32b0>

00000000802311ba <_ZN4core3ops8function6FnOnce9call_once17h5fdeed6e827ca17eE.llvm.9825526177170663789>:
802311ba: 03 30 05 00  	ld	zero, 0x0(a0)
802311be: 01 a0        	j	0x802311be <_ZN4core3ops8function6FnOnce9call_once17h5fdeed6e827ca17eE.llvm.9825526177170663789+0x4>

00000000802311c0 <_ZN4core3str16slice_error_fail17haf0c98b3a2e131ceE>:
802311c0: 97 00 00 00  	auipc	ra, 0x0
802311c4: e7 80 80 00  	jalr	0x8(ra) <_ZN4core3str19slice_error_fail_rt17hd61051a5fbf855ceE>

00000000802311c8 <_ZN4core3str19slice_error_fail_rt17hd61051a5fbf855ceE>:
802311c8: 55 71        	addi	sp, sp, -0xd0
802311ca: 32 e0        	sd	a2, 0x0(sp)
802311cc: 93 07 10 10  	li	a5, 0x101
802311d0: 36 e4        	sd	a3, 0x8(sp)
802311d2: 63 e8 f5 04  	bltu	a1, a5, 0x80231222 <.Lpcrel_hi36+0x12>
802311d6: 83 08 05 10  	lb	a7, 0x100(a0)
802311da: 13 08 f0 fb  	li	a6, -0x41
802311de: 8d 47        	li	a5, 0x3
802311e0: 63 4d 18 01  	blt	a6, a7, 0x802311fa <_ZN4core3str19slice_error_fail_rt17hd61051a5fbf855ceE+0x32>
802311e4: 83 08 f5 0f  	lb	a7, 0xff(a0)
802311e8: 89 47        	li	a5, 0x2
802311ea: 63 48 18 01  	blt	a6, a7, 0x802311fa <_ZN4core3str19slice_error_fail_rt17hd61051a5fbf855ceE+0x32>
802311ee: 83 07 e5 0f  	lb	a5, 0xfe(a0)
802311f2: 93 a7 07 fc  	slti	a5, a5, -0x40
802311f6: 93 c7 17 00  	xori	a5, a5, 0x1
802311fa: 93 88 d7 0f  	addi	a7, a5, 0xfd
802311fe: b3 07 15 01  	add	a5, a0, a7
80231202: 83 87 07 00  	lb	a5, 0x0(a5)
80231206: 63 5e f8 0a  	bge	a6, a5, 0x802312c2 <.Lpcrel_hi48+0x22>
8023120a: 2a e8        	sd	a0, 0x10(sp)
8023120c: 46 ec        	sd	a7, 0x18(sp)
8023120e: 15 48        	li	a6, 0x5

0000000080231210 <.Lpcrel_hi36>:
80231210: 97 b7 00 00  	auipc	a5, 0xb
80231214: 93 87 87 49  	addi	a5, a5, 0x498
80231218: 3e f0        	sd	a5, 0x20(sp)
8023121a: 42 f4        	sd	a6, 0x28(sp)
8023121c: 63 fe c5 00  	bgeu	a1, a2, 0x80231238 <.Lpcrel_hi35+0x10>
80231220: 99 a8        	j	0x80231276 <.Lpcrel_hi39+0xe>
80231222: 01 48        	li	a6, 0x0
80231224: 2a e8        	sd	a0, 0x10(sp)
80231226: 2e ec        	sd	a1, 0x18(sp)

0000000080231228 <.Lpcrel_hi35>:
80231228: 97 b7 00 00  	auipc	a5, 0xb
8023122c: 93 87 07 48  	addi	a5, a5, 0x480
80231230: 3e f0        	sd	a5, 0x20(sp)
80231232: 02 f4        	sd	zero, 0x28(sp)
80231234: 63 e1 c5 04  	bltu	a1, a2, 0x80231276 <.Lpcrel_hi39+0xe>
80231238: 63 ef d5 02  	bltu	a1, a3, 0x80231276 <.Lpcrel_hi39+0xe>
8023123c: 63 f9 c6 08  	bgeu	a3, a2, 0x802312ce <.Lpcrel_hi48+0x2e>
80231240: 0a 85        	mv	a0, sp
80231242: 2a e1        	sd	a0, 0x80(sp)

0000000080231244 <.Lpcrel_hi37>:
80231244: 17 05 00 00  	auipc	a0, 0x0
80231248: 13 05 a5 e4  	addi	a0, a0, -0x1b6
8023124c: 2a e5        	sd	a0, 0x88(sp)
8023124e: 2c 00        	addi	a1, sp, 0x8
80231250: 2e e9        	sd	a1, 0x90(sp)
80231252: 2a ed        	sd	a0, 0x98(sp)
80231254: 08 08        	addi	a0, sp, 0x10
80231256: 2a f1        	sd	a0, 0xa0(sp)

0000000080231258 <.Lpcrel_hi38>:
80231258: 17 f5 ff ff  	auipc	a0, 0xfffff
8023125c: 13 05 c5 f3  	addi	a0, a0, -0xc4
80231260: 2a f5        	sd	a0, 0xa8(sp)
80231262: 0c 10        	addi	a1, sp, 0x20
80231264: 2e f9        	sd	a1, 0xb0(sp)
80231266: 2a fd        	sd	a0, 0xb8(sp)

0000000080231268 <.Lpcrel_hi39>:
80231268: 17 b5 00 00  	auipc	a0, 0xb
8023126c: 13 05 85 45  	addi	a0, a0, 0x458
80231270: aa e8        	sd	a0, 0x50(sp)
80231272: 11 45        	li	a0, 0x4
80231274: 25 a8        	j	0x802312ac <.Lpcrel_hi48+0xc>
80231276: 63 e3 c5 00  	bltu	a1, a2, 0x8023127c <.Lpcrel_hi39+0x14>
8023127a: 36 86        	mv	a2, a3
8023127c: b2 e0        	sd	a2, 0x40(sp)
8023127e: 88 00        	addi	a0, sp, 0x40
80231280: 2a e1        	sd	a0, 0x80(sp)

0000000080231282 <.Lpcrel_hi46>:
80231282: 17 05 00 00  	auipc	a0, 0x0
80231286: 13 05 c5 e0  	addi	a0, a0, -0x1f4
8023128a: 2a e5        	sd	a0, 0x88(sp)
8023128c: 08 08        	addi	a0, sp, 0x10
8023128e: 2a e9        	sd	a0, 0x90(sp)

0000000080231290 <.Lpcrel_hi47>:
80231290: 17 f5 ff ff  	auipc	a0, 0xfffff
80231294: 13 05 45 f0  	addi	a0, a0, -0xfc
80231298: 2a ed        	sd	a0, 0x98(sp)
8023129a: 0c 10        	addi	a1, sp, 0x20
8023129c: 2e f1        	sd	a1, 0xa0(sp)
8023129e: 2a f5        	sd	a0, 0xa8(sp)

00000000802312a0 <.Lpcrel_hi48>:
802312a0: 17 b5 00 00  	auipc	a0, 0xb
802312a4: 13 05 05 50  	addi	a0, a0, 0x500
802312a8: aa e8        	sd	a0, 0x50(sp)
802312aa: 0d 45        	li	a0, 0x3
802312ac: aa ec        	sd	a0, 0x58(sp)
802312ae: 82 f8        	sd	zero, 0x70(sp)
802312b0: 0c 01        	addi	a1, sp, 0x80
802312b2: ae f0        	sd	a1, 0x60(sp)
802312b4: aa f4        	sd	a0, 0x68(sp)
802312b6: 88 08        	addi	a0, sp, 0x50
802312b8: ba 85        	mv	a1, a4
802312ba: 97 f0 ff ff  	auipc	ra, 0xfffff
802312be: e7 80 e0 ee  	jalr	-0x112(ra) <ekernel+0xffce31a8>
802312c2: 01 46        	li	a2, 0x0
802312c4: c6 86        	mv	a3, a7
802312c6: 97 00 00 00  	auipc	ra, 0x0
802312ca: e7 80 a0 ef  	jalr	-0x106(ra) <_ZN4core3str16slice_error_fail17haf0c98b3a2e131ceE>
802312ce: 19 ca        	beqz	a2, 0x802312e4 <.Lpcrel_hi48+0x44>
802312d0: 63 7a b6 00  	bgeu	a2, a1, 0x802312e4 <.Lpcrel_hi48+0x44>
802312d4: b3 07 c5 00  	add	a5, a0, a2
802312d8: 03 88 07 00  	lb	a6, 0x0(a5)
802312dc: 93 07 00 fc  	li	a5, -0x40
802312e0: 63 43 f8 00  	blt	a6, a5, 0x802312e6 <.Lpcrel_hi48+0x46>
802312e4: 36 86        	mv	a2, a3
802312e6: 32 f8        	sd	a2, 0x30(sp)
802312e8: ae 86        	mv	a3, a1
802312ea: 63 77 b6 04  	bgeu	a2, a1, 0x80231338 <.Lpcrel_hi40+0x34>
802312ee: 93 06 d6 ff  	addi	a3, a2, -0x3
802312f2: b3 37 d6 00  	sltu	a5, a2, a3
802312f6: fd 17        	addi	a5, a5, -0x1
802312f8: 33 f8 d7 00  	and	a6, a5, a3
802312fc: 93 07 16 00  	addi	a5, a2, 0x1
80231300: 63 fc 07 01  	bgeu	a5, a6, 0x80231318 <.Lpcrel_hi40+0x14>

0000000080231304 <.Lpcrel_hi40>:
80231304: 17 b5 00 00  	auipc	a0, 0xb
80231308: 13 06 c5 53  	addi	a2, a0, 0x53c
8023130c: 42 85        	mv	a0, a6
8023130e: be 85        	mv	a1, a5
80231310: 97 00 00 00  	auipc	ra, 0x0
80231314: e7 80 40 3d  	jalr	0x3d4(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>
80231318: b3 06 05 01  	add	a3, a0, a6
8023131c: aa 97        	add	a5, a5, a0
8023131e: 95 8f        	sub	a5, a5, a3
80231320: 2a 96        	add	a2, a2, a0
80231322: 93 08 00 fc  	li	a7, -0x40
80231326: 99 c7        	beqz	a5, 0x80231334 <.Lpcrel_hi40+0x30>
80231328: 83 06 06 00  	lb	a3, 0x0(a2)
8023132c: fd 17        	addi	a5, a5, -0x1
8023132e: 7d 16        	addi	a2, a2, -0x1
80231330: e3 cb 16 ff  	blt	a3, a7, 0x80231326 <.Lpcrel_hi40+0x22>
80231334: b3 86 07 01  	add	a3, a5, a6
80231338: 33 06 d5 00  	add	a2, a0, a3
8023133c: 81 ea        	bnez	a3, 0x8023134c <.Lpcrel_hi40+0x48>
8023133e: 63 90 b6 02  	bne	a3, a1, 0x8023135e <.Lpcrel_hi40+0x5a>
80231342: 3a 85        	mv	a0, a4
80231344: 97 00 00 00  	auipc	ra, 0x0
80231348: e7 80 40 98  	jalr	-0x67c(ra) <_ZN4core6option13unwrap_failed17h8c42ef9711ef6989E>
8023134c: 63 f2 b6 02  	bgeu	a3, a1, 0x80231370 <.Lpcrel_hi40+0x6c>
80231350: 03 08 06 00  	lb	a6, 0x0(a2)
80231354: 93 07 f0 fb  	li	a5, -0x41
80231358: e3 c3 07 ff  	blt	a5, a6, 0x8023133e <.Lpcrel_hi40+0x3a>
8023135c: 21 a8        	j	0x80231374 <.Lpcrel_hi40+0x70>
8023135e: 83 05 06 00  	lb	a1, 0x0(a2)
80231362: 13 f5 f5 0f  	andi	a0, a1, 0xff
80231366: 63 cd 05 00  	bltz	a1, 0x80231380 <.Lpcrel_hi40+0x7c>
8023136a: 2a de        	sw	a0, 0x3c(sp)
8023136c: 85 45        	li	a1, 0x1
8023136e: 51 a0        	j	0x802313f2 <.Lpcrel_hi40+0xee>
80231370: e3 87 b6 fc  	beq	a3, a1, 0x8023133e <.Lpcrel_hi40+0x3a>
80231374: 36 86        	mv	a2, a3
80231376: ae 86        	mv	a3, a1
80231378: 97 00 00 00  	auipc	ra, 0x0
8023137c: e7 80 80 e4  	jalr	-0x1b8(ra) <_ZN4core3str16slice_error_fail17haf0c98b3a2e131ceE>
80231380: 83 47 16 00  	lbu	a5, 0x1(a2)
80231384: 93 75 f5 01  	andi	a1, a0, 0x1f
80231388: 13 08 f0 0d  	li	a6, 0xdf
8023138c: 93 f7 f7 03  	andi	a5, a5, 0x3f
80231390: 63 7c a8 02  	bgeu	a6, a0, 0x802313c8 <.Lpcrel_hi40+0xc4>
80231394: 03 48 26 00  	lbu	a6, 0x2(a2)
80231398: 93 98 67 00  	slli	a7, a5, 0x6
8023139c: 93 77 f8 03  	andi	a5, a6, 0x3f
802313a0: 13 08 00 0f  	li	a6, 0xf0
802313a4: b3 e7 f8 00  	or	a5, a7, a5
802313a8: 63 64 05 03  	bltu	a0, a6, 0x802313d0 <.Lpcrel_hi40+0xcc>
802313ac: 03 45 36 00  	lbu	a0, 0x3(a2)
802313b0: f6 15        	slli	a1, a1, 0x3d
802313b2: ad 91        	srli	a1, a1, 0x2b
802313b4: 9a 07        	slli	a5, a5, 0x6
802313b6: 13 75 f5 03  	andi	a0, a0, 0x3f
802313ba: 5d 8d        	or	a0, a0, a5
802313bc: 4d 8d        	or	a0, a0, a1
802313be: b7 05 11 00  	lui	a1, 0x110
802313c2: e3 00 b5 f8  	beq	a0, a1, 0x80231342 <.Lpcrel_hi40+0x3e>
802313c6: 01 a8        	j	0x802313d6 <.Lpcrel_hi40+0xd2>
802313c8: 13 95 65 00  	slli	a0, a1, 0x6
802313cc: 5d 8d        	or	a0, a0, a5
802313ce: 21 a0        	j	0x802313d6 <.Lpcrel_hi40+0xd2>
802313d0: 13 95 c5 00  	slli	a0, a1, 0xc
802313d4: 5d 8d        	or	a0, a0, a5
802313d6: 2a de        	sw	a0, 0x3c(sp)
802313d8: 13 06 00 08  	li	a2, 0x80
802313dc: 85 45        	li	a1, 0x1
802313de: 63 6a c5 00  	bltu	a0, a2, 0x802313f2 <.Lpcrel_hi40+0xee>
802313e2: 13 56 b5 00  	srli	a2, a0, 0xb
802313e6: 89 45        	li	a1, 0x2
802313e8: 09 c6        	beqz	a2, 0x802313f2 <.Lpcrel_hi40+0xee>
802313ea: 41 81        	srli	a0, a0, 0x10
802313ec: b3 35 a0 00  	snez	a1, a0
802313f0: 8d 05        	addi	a1, a1, 0x3
802313f2: b6 95        	add	a1, a1, a3
802313f4: b6 e0        	sd	a3, 0x40(sp)
802313f6: ae e4        	sd	a1, 0x48(sp)
802313f8: 08 18        	addi	a0, sp, 0x30
802313fa: 2a e1        	sd	a0, 0x80(sp)

00000000802313fc <.Lpcrel_hi41>:
802313fc: 17 05 00 00  	auipc	a0, 0x0
80231400: 13 05 25 c9  	addi	a0, a0, -0x36e
80231404: 2a e5        	sd	a0, 0x88(sp)
80231406: 68 18        	addi	a0, sp, 0x3c
80231408: 2a e9        	sd	a0, 0x90(sp)

000000008023140a <.Lpcrel_hi42>:
8023140a: 17 f5 ff ff  	auipc	a0, 0xfffff
8023140e: 13 05 85 b7  	addi	a0, a0, -0x488
80231412: 2a ed        	sd	a0, 0x98(sp)
80231414: 88 00        	addi	a0, sp, 0x40
80231416: 2a f1        	sd	a0, 0xa0(sp)

0000000080231418 <.Lpcrel_hi43>:
80231418: 17 05 00 00  	auipc	a0, 0x0
8023141c: 13 05 85 3d  	addi	a0, a0, 0x3d8
80231420: 2a f5        	sd	a0, 0xa8(sp)
80231422: 08 08        	addi	a0, sp, 0x10
80231424: 2a f9        	sd	a0, 0xb0(sp)

0000000080231426 <.Lpcrel_hi44>:
80231426: 17 f5 ff ff  	auipc	a0, 0xfffff
8023142a: 13 05 e5 d6  	addi	a0, a0, -0x292
8023142e: 2a fd        	sd	a0, 0xb8(sp)
80231430: 0c 10        	addi	a1, sp, 0x20
80231432: ae e1        	sd	a1, 0xc0(sp)
80231434: aa e5        	sd	a0, 0xc8(sp)

0000000080231436 <.Lpcrel_hi45>:
80231436: 17 b5 00 00  	auipc	a0, 0xb
8023143a: 13 05 25 30  	addi	a0, a0, 0x302
8023143e: aa e8        	sd	a0, 0x50(sp)
80231440: 15 45        	li	a0, 0x5
80231442: ad b5        	j	0x802312ac <.Lpcrel_hi48+0xc>

0000000080231444 <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402>:
80231444: 93 12 05 03  	slli	t0, a0, 0x30
80231448: 29 c6        	beqz	a2, 0x80231492 <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0x4e>
8023144a: aa 88        	mv	a7, a0
8023144c: 01 45        	li	a0, 0x0
8023144e: 13 d3 82 03  	srli	t1, t0, 0x38
80231452: 06 06        	slli	a2, a2, 0x1
80231454: b3 83 c5 00  	add	t2, a1, a2
80231458: 13 fe f8 0f  	andi	t3, a7, 0xff
8023145c: 83 ce 05 00  	lbu	t4, 0x0(a1)
80231460: 03 c6 15 00  	lbu	a2, 0x1(a1)
80231464: 89 05        	addi	a1, a1, 0x2
80231466: b3 08 c5 00  	add	a7, a0, a2
8023146a: 63 9f 6e 00  	bne	t4, t1, 0x80231488 <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0x44>
8023146e: 63 ee a8 08  	bltu	a7, a0, 0x8023150a <.Lpcrel_hi52>
80231472: 63 65 17 0b  	bltu	a4, a7, 0x8023151c <.Lpcrel_hi53>
80231476: 36 95        	add	a0, a0, a3
80231478: 11 ca        	beqz	a2, 0x8023148c <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0x48>
8023147a: 83 4e 05 00  	lbu	t4, 0x0(a0)
8023147e: 05 05        	addi	a0, a0, 0x1
80231480: 7d 16        	addi	a2, a2, -0x1
80231482: e3 9b ce ff  	bne	t4, t3, 0x80231478 <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0x34>
80231486: a5 a0        	j	0x802314ee <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0xaa>
80231488: 63 65 d3 01  	bltu	t1, t4, 0x80231492 <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0x4e>
8023148c: 46 85        	mv	a0, a7
8023148e: e3 97 75 fc  	bne	a1, t2, 0x8023145c <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0x18>
80231492: 63 01 08 06  	beqz	a6, 0x802314f4 <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0xb0>
80231496: b3 85 07 01  	add	a1, a5, a6
8023149a: b3 36 00 01  	snez	a3, a6
8023149e: be 96        	add	a3, a3, a5
802314a0: 13 d6 02 03  	srli	a2, t0, 0x30
802314a4: 05 45        	li	a0, 0x1
802314a6: 03 87 07 00  	lb	a4, 0x0(a5)
802314aa: 63 49 07 00  	bltz	a4, 0x802314bc <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0x78>
802314ae: 13 77 f7 0f  	andi	a4, a4, 0xff
802314b2: b6 87        	mv	a5, a3
802314b4: 19 9e        	subw	a2, a2, a4
802314b6: 63 51 06 02  	bgez	a2, 0x802314d8 <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0x94>
802314ba: 05 a8        	j	0x802314ea <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0xa6>
802314bc: 63 8f b6 02  	beq	a3, a1, 0x802314fa <.Lpcrel_hi54>
802314c0: 03 c8 06 00  	lbu	a6, 0x0(a3)
802314c4: 93 87 16 00  	addi	a5, a3, 0x1
802314c8: 93 76 f7 07  	andi	a3, a4, 0x7f
802314cc: a2 06        	slli	a3, a3, 0x8
802314ce: 33 e7 06 01  	or	a4, a3, a6
802314d2: 19 9e        	subw	a2, a2, a4
802314d4: 63 4b 06 00  	bltz	a2, 0x802314ea <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0xa6>
802314d8: 13 45 15 00  	xori	a0, a0, 0x1
802314dc: b3 c6 b7 00  	xor	a3, a5, a1
802314e0: b3 36 d0 00  	snez	a3, a3
802314e4: be 96        	add	a3, a3, a5
802314e6: e3 90 b7 fc  	bne	a5, a1, 0x802314a6 <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402+0x62>
802314ea: 05 89        	andi	a0, a0, 0x1
802314ec: 82 80        	ret
802314ee: 13 75 10 00  	andi	a0, zero, 0x1
802314f2: 82 80        	ret
802314f4: 05 45        	li	a0, 0x1
802314f6: 05 89        	andi	a0, a0, 0x1
802314f8: 82 80        	ret

00000000802314fa <.Lpcrel_hi54>:
802314fa: 17 b5 00 00  	auipc	a0, 0xb
802314fe: 13 05 e5 3d  	addi	a0, a0, 0x3de
80231502: 97 f0 ff ff  	auipc	ra, 0xfffff
80231506: e7 80 60 7c  	jalr	0x7c6(ra) <ekernel+0xffce3cc8>

000000008023150a <.Lpcrel_hi52>:
8023150a: 97 b5 00 00  	auipc	a1, 0xb
8023150e: 13 86 65 3e  	addi	a2, a1, 0x3e6
80231512: c6 85        	mv	a1, a7
80231514: 97 00 00 00  	auipc	ra, 0x0
80231518: e7 80 00 1d  	jalr	0x1d0(ra) <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>

000000008023151c <.Lpcrel_hi53>:
8023151c: 17 b5 00 00  	auipc	a0, 0xb
80231520: 13 06 45 3d  	addi	a2, a0, 0x3d4
80231524: 46 85        	mv	a0, a7
80231526: ba 85        	mv	a1, a4
80231528: 97 00 00 00  	auipc	ra, 0x0
8023152c: e7 80 80 17  	jalr	0x178(ra) <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>

0000000080231530 <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E>:
80231530: 1b 06 05 00  	sext.w	a2, a0
80231534: 93 05 00 02  	li	a1, 0x20
80231538: 63 74 b6 00  	bgeu	a2, a1, 0x80231540 <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x10>
8023153c: 01 45        	li	a0, 0x0
8023153e: 82 80        	ret
80231540: 93 06 f0 07  	li	a3, 0x7f
80231544: 85 45        	li	a1, 0x1
80231546: 63 74 d6 00  	bgeu	a2, a3, 0x8023154e <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x1e>
8023154a: 2e 85        	mv	a0, a1
8023154c: 82 80        	ret
8023154e: 9b 55 05 01  	srliw	a1, a0, 0x10
80231552: 9d e5        	bnez	a1, 0x80231580 <.Lpcrel_hi57+0x1c>

0000000080231554 <.Lpcrel_hi55>:
80231554: 97 b5 00 00  	auipc	a1, 0xb
80231558: 93 85 25 69  	addi	a1, a1, 0x692

000000008023155c <.Lpcrel_hi56>:
8023155c: 17 b6 00 00  	auipc	a2, 0xb
80231560: 93 06 a6 6d  	addi	a3, a2, 0x6da

0000000080231564 <.Lpcrel_hi57>:
80231564: 17 b6 00 00  	auipc	a2, 0xb
80231568: 93 07 16 7f  	addi	a5, a2, 0x7f1
8023156c: 13 06 80 02  	li	a2, 0x28
80231570: 13 07 f0 11  	li	a4, 0x11f
80231574: 13 08 f0 12  	li	a6, 0x12f
80231578: 17 03 00 00  	auipc	t1, 0x0
8023157c: 67 00 c3 ec  	jr	-0x134(t1) <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402>
80231580: 9b 55 15 01  	srliw	a1, a0, 0x11
80231584: 9d e5        	bnez	a1, 0x802315b2 <.Lpcrel_hi60+0x1c>

0000000080231586 <.Lpcrel_hi58>:
80231586: 97 b5 00 00  	auipc	a1, 0xb
8023158a: 93 85 25 38  	addi	a1, a1, 0x382

000000008023158e <.Lpcrel_hi59>:
8023158e: 17 b6 00 00  	auipc	a2, 0xb
80231592: 93 06 26 3d  	addi	a3, a2, 0x3d2

0000000080231596 <.Lpcrel_hi60>:
80231596: 17 b6 00 00  	auipc	a2, 0xb
8023159a: 93 07 e6 48  	addi	a5, a2, 0x48e
8023159e: 13 06 c0 02  	li	a2, 0x2c
802315a2: 13 07 40 0c  	li	a4, 0xc4
802315a6: 13 08 20 1c  	li	a6, 0x1c2
802315aa: 17 03 00 00  	auipc	t1, 0x0
802315ae: 67 00 a3 e9  	jr	-0x166(t1) <_ZN4core7unicode9printable5check17h123505bf127c95c3E.llvm.10556943227288069402>
802315b2: b7 e5 fc ff  	lui	a1, 0xfffce
802315b6: 93 85 05 c5  	addi	a1, a1, -0x3b0
802315ba: 3b 06 b5 00  	addw	a2, a0, a1
802315be: b7 e5 0a 00  	lui	a1, 0xae
802315c2: 9b 86 05 d5  	addiw	a3, a1, -0x2b0
802315c6: 81 45        	li	a1, 0x0
802315c8: e3 61 d6 f8  	bltu	a2, a3, 0x8023154a <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x1a>
802315cc: 37 f6 fc ff  	lui	a2, 0xfffcf
802315d0: 13 06 56 cb  	addi	a2, a2, -0x34b
802315d4: 29 9e        	addw	a2, a2, a0
802315d6: 95 46        	li	a3, 0x5
802315d8: e3 69 d6 f6  	bltu	a2, a3, 0x8023154a <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x1a>
802315dc: 37 06 fd ff  	lui	a2, 0xfffd0
802315e0: 13 06 26 5e  	addi	a2, a2, 0x5e2
802315e4: 29 9e        	addw	a2, a2, a0
802315e6: 93 06 20 5e  	li	a3, 0x5e2
802315ea: e3 60 d6 f6  	bltu	a2, a3, 0x8023154a <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x1a>
802315ee: 37 16 fd ff  	lui	a2, 0xfffd1
802315f2: 13 06 f6 41  	addi	a2, a2, 0x41f
802315f6: 29 9e        	addw	a2, a2, a0
802315f8: 85 66        	lui	a3, 0x1
802315fa: 9b 86 f6 c1  	addiw	a3, a3, -0x3e1
802315fe: e3 66 d6 f4  	bltu	a2, a3, 0x8023154a <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x1a>
80231602: 37 36 fd ff  	lui	a2, 0xfffd3
80231606: 13 06 e6 15  	addi	a2, a2, 0x15e
8023160a: 29 9e        	addw	a2, a2, a0
8023160c: b9 46        	li	a3, 0xe
8023160e: e3 6e d6 f2  	bltu	a2, a3, 0x8023154a <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x1a>
80231612: 13 76 e5 ff  	andi	a2, a0, -0x2
80231616: 01 26        	sext.w	a2, a2
80231618: b7 c6 02 00  	lui	a3, 0x2c
8023161c: 9b 86 e6 81  	addiw	a3, a3, -0x7e2
80231620: e3 05 d6 f2  	beq	a2, a3, 0x8023154a <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x1a>
80231624: 13 76 05 fe  	andi	a2, a0, -0x20
80231628: 01 26        	sext.w	a2, a2
8023162a: b7 a6 02 00  	lui	a3, 0x2a
8023162e: 9b 86 06 6e  	addiw	a3, a3, 0x6e0
80231632: e3 0c d6 f0  	beq	a2, a3, 0x8023154a <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x1a>
80231636: 37 56 fd ff  	lui	a2, 0xfffd5
8023163a: 13 06 66 8c  	addi	a2, a2, -0x73a
8023163e: 29 9e        	addw	a2, a2, a0
80231640: 99 46        	li	a3, 0x6
80231642: e3 64 d6 f0  	bltu	a2, a3, 0x8023154a <_ZN4core7unicode9printable12is_printable17ha133ccbe03af3c47E+0x1a>
80231646: b7 05 ef ff  	lui	a1, 0xffef0
8023164a: 2d 9d        	addw	a0, a0, a1
8023164c: b7 05 fd ff  	lui	a1, 0xfffd0
80231650: 9b 85 05 1f  	addiw	a1, a1, 0x1f0
80231654: b3 35 b5 00  	sltu	a1, a0, a1
80231658: 2e 85        	mv	a0, a1
8023165a: 82 80        	ret

000000008023165c <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>:
8023165c: 97 00 00 00  	auipc	ra, 0x0
80231660: e7 80 80 00  	jalr	0x8(ra) <_ZN4core5slice5index29slice_start_index_len_fail_rt17h02b69394511b4adeE>

0000000080231664 <_ZN4core5slice5index29slice_start_index_len_fail_rt17h02b69394511b4adeE>:
80231664: 1d 71        	addi	sp, sp, -0x60
80231666: 2a e0        	sd	a0, 0x0(sp)
80231668: 2e e4        	sd	a1, 0x8(sp)
8023166a: 0a 85        	mv	a0, sp
8023166c: aa e0        	sd	a0, 0x40(sp)

000000008023166e <.Lpcrel_hi5>:
8023166e: 17 05 00 00  	auipc	a0, 0x0
80231672: 13 05 05 a2  	addi	a0, a0, -0x5e0
80231676: aa e4        	sd	a0, 0x48(sp)
80231678: 2c 00        	addi	a1, sp, 0x8
8023167a: ae e8        	sd	a1, 0x50(sp)
8023167c: aa ec        	sd	a0, 0x58(sp)

000000008023167e <.Lpcrel_hi6>:
8023167e: 17 c5 00 00  	auipc	a0, 0xc
80231682: 13 05 25 84  	addi	a0, a0, -0x7be
80231686: 2a e8        	sd	a0, 0x10(sp)
80231688: 09 45        	li	a0, 0x2
8023168a: 2a ec        	sd	a0, 0x18(sp)
8023168c: 02 f8        	sd	zero, 0x30(sp)
8023168e: 8c 00        	addi	a1, sp, 0x40
80231690: 2e f0        	sd	a1, 0x20(sp)
80231692: 2a f4        	sd	a0, 0x28(sp)
80231694: 08 08        	addi	a0, sp, 0x10
80231696: b2 85        	mv	a1, a2
80231698: 97 f0 ff ff  	auipc	ra, 0xfffff
8023169c: e7 80 00 b1  	jalr	-0x4f0(ra) <ekernel+0xffce31a8>

00000000802316a0 <_ZN4core5slice5index24slice_end_index_len_fail17h38ed7f93e5e8b23eE>:
802316a0: 97 00 00 00  	auipc	ra, 0x0
802316a4: e7 80 80 00  	jalr	0x8(ra) <_ZN4core5slice5index27slice_end_index_len_fail_rt17h09262aaafa727e12E>

00000000802316a8 <_ZN4core5slice5index27slice_end_index_len_fail_rt17h09262aaafa727e12E>:
802316a8: 1d 71        	addi	sp, sp, -0x60
802316aa: 2a e0        	sd	a0, 0x0(sp)
802316ac: 2e e4        	sd	a1, 0x8(sp)
802316ae: 0a 85        	mv	a0, sp
802316b0: aa e0        	sd	a0, 0x40(sp)

00000000802316b2 <.Lpcrel_hi7>:
802316b2: 17 05 00 00  	auipc	a0, 0x0
802316b6: 13 05 c5 9d  	addi	a0, a0, -0x624
802316ba: aa e4        	sd	a0, 0x48(sp)
802316bc: 2c 00        	addi	a1, sp, 0x8
802316be: ae e8        	sd	a1, 0x50(sp)
802316c0: aa ec        	sd	a0, 0x58(sp)

00000000802316c2 <.Lpcrel_hi8>:
802316c2: 17 c5 00 00  	auipc	a0, 0xc
802316c6: 13 05 e5 81  	addi	a0, a0, -0x7e2
802316ca: 2a e8        	sd	a0, 0x10(sp)
802316cc: 09 45        	li	a0, 0x2
802316ce: 2a ec        	sd	a0, 0x18(sp)
802316d0: 02 f8        	sd	zero, 0x30(sp)
802316d2: 8c 00        	addi	a1, sp, 0x40
802316d4: 2e f0        	sd	a1, 0x20(sp)
802316d6: 2a f4        	sd	a0, 0x28(sp)
802316d8: 08 08        	addi	a0, sp, 0x10
802316da: b2 85        	mv	a1, a2
802316dc: 97 f0 ff ff  	auipc	ra, 0xfffff
802316e0: e7 80 c0 ac  	jalr	-0x534(ra) <ekernel+0xffce31a8>

00000000802316e4 <_ZN4core5slice5index22slice_index_order_fail17h1844128c1b3e441aE>:
802316e4: 97 00 00 00  	auipc	ra, 0x0
802316e8: e7 80 80 00  	jalr	0x8(ra) <_ZN4core5slice5index25slice_index_order_fail_rt17h94eab4b24aa44a8aE>

00000000802316ec <_ZN4core5slice5index25slice_index_order_fail_rt17h94eab4b24aa44a8aE>:
802316ec: 1d 71        	addi	sp, sp, -0x60
802316ee: 2a e0        	sd	a0, 0x0(sp)
802316f0: 2e e4        	sd	a1, 0x8(sp)
802316f2: 0a 85        	mv	a0, sp
802316f4: aa e0        	sd	a0, 0x40(sp)

00000000802316f6 <.Lpcrel_hi9>:
802316f6: 17 05 00 00  	auipc	a0, 0x0
802316fa: 13 05 85 99  	addi	a0, a0, -0x668
802316fe: aa e4        	sd	a0, 0x48(sp)
80231700: 2c 00        	addi	a1, sp, 0x8
80231702: ae e8        	sd	a1, 0x50(sp)
80231704: aa ec        	sd	a0, 0x58(sp)

0000000080231706 <.Lpcrel_hi10>:
80231706: 17 c5 00 00  	auipc	a0, 0xc
8023170a: 13 05 25 82  	addi	a0, a0, -0x7de
8023170e: 2a e8        	sd	a0, 0x10(sp)
80231710: 09 45        	li	a0, 0x2
80231712: 2a ec        	sd	a0, 0x18(sp)
80231714: 02 f8        	sd	zero, 0x30(sp)
80231716: 8c 00        	addi	a1, sp, 0x40
80231718: 2e f0        	sd	a1, 0x20(sp)
8023171a: 2a f4        	sd	a0, 0x28(sp)
8023171c: 08 08        	addi	a0, sp, 0x10
8023171e: b2 85        	mv	a1, a2
80231720: 97 f0 ff ff  	auipc	ra, 0xfffff
80231724: e7 80 80 a8  	jalr	-0x578(ra) <ekernel+0xffce31a8>

0000000080231728 <_ZN4core5slice5index31slice_start_index_overflow_fail17h85c10391efa3df9fE>:
80231728: 79 71        	addi	sp, sp, -0x30
8023172a: aa 85        	mv	a1, a0

000000008023172c <.Lpcrel_hi11>:
8023172c: 17 c5 00 00  	auipc	a0, 0xc
80231730: 13 05 45 85  	addi	a0, a0, -0x7ac
80231734: 2a e0        	sd	a0, 0x0(sp)
80231736: 05 45        	li	a0, 0x1
80231738: 2a e4        	sd	a0, 0x8(sp)
8023173a: 02 f0        	sd	zero, 0x20(sp)

000000008023173c <.Lpcrel_hi12>:
8023173c: 17 b5 00 00  	auipc	a0, 0xb
80231740: 13 05 c5 74  	addi	a0, a0, 0x74c
80231744: 2a e8        	sd	a0, 0x10(sp)
80231746: 02 ec        	sd	zero, 0x18(sp)
80231748: 0a 85        	mv	a0, sp
8023174a: 97 f0 ff ff  	auipc	ra, 0xfffff
8023174e: e7 80 e0 a5  	jalr	-0x5a2(ra) <ekernel+0xffce31a8>

0000000080231752 <_ZN4core5slice5index29slice_end_index_overflow_fail17h45f808951b1a1b78E>:
80231752: 79 71        	addi	sp, sp, -0x30
80231754: aa 85        	mv	a1, a0

0000000080231756 <.Lpcrel_hi13>:
80231756: 17 c5 00 00  	auipc	a0, 0xc
8023175a: 13 05 a5 86  	addi	a0, a0, -0x796
8023175e: 2a e0        	sd	a0, 0x0(sp)
80231760: 05 45        	li	a0, 0x1
80231762: 2a e4        	sd	a0, 0x8(sp)
80231764: 02 f0        	sd	zero, 0x20(sp)

0000000080231766 <.Lpcrel_hi14>:
80231766: 17 b5 00 00  	auipc	a0, 0xb
8023176a: 13 05 25 72  	addi	a0, a0, 0x722
8023176e: 2a e8        	sd	a0, 0x10(sp)
80231770: 02 ec        	sd	zero, 0x18(sp)
80231772: 0a 85        	mv	a0, sp
80231774: 97 f0 ff ff  	auipc	ra, 0xfffff
80231778: e7 80 40 a3  	jalr	-0x5cc(ra) <ekernel+0xffce31a8>

000000008023177c <_ZN68_$LT$core..ptr..alignment..Alignment$u20$as$u20$core..fmt..Debug$GT$3fmt17h950e5f6f08955949E>:
8023177c: 59 71        	addi	sp, sp, -0x70
8023177e: 86 f4        	sd	ra, 0x68(sp)
80231780: 08 61        	ld	a0, 0x0(a0)

0000000080231782 <.Lpcrel_hi7>:
80231782: 17 56 01 00  	auipc	a2, 0x15
80231786: 03 36 e6 85  	ld	a2, -0x7a2(a2)
8023178a: b3 06 a0 40  	neg	a3, a0
8023178e: e9 8e        	and	a3, a3, a0
80231790: 33 86 c6 02  	mul	a2, a3, a2
80231794: 69 92        	srli	a2, a2, 0x3a

0000000080231796 <.Lpcrel_hi8>:
80231796: 97 c6 00 00  	auipc	a3, 0xc
8023179a: 93 86 a6 83  	addi	a3, a3, -0x7c6
8023179e: 36 96        	add	a2, a2, a3
802317a0: 03 46 06 00  	lbu	a2, 0x0(a2)
802317a4: aa ec        	sd	a0, 0x58(sp)
802317a6: b2 d2        	sw	a2, 0x64(sp)
802317a8: a8 08        	addi	a0, sp, 0x58
802317aa: 2a fc        	sd	a0, 0x38(sp)

00000000802317ac <.Lpcrel_hi9>:
802317ac: 17 05 00 00  	auipc	a0, 0x0
802317b0: 13 05 45 24  	addi	a0, a0, 0x244
802317b4: aa e0        	sd	a0, 0x40(sp)
802317b6: c8 10        	addi	a0, sp, 0x64
802317b8: aa e4        	sd	a0, 0x48(sp)

00000000802317ba <.Lpcrel_hi10>:
802317ba: 17 05 00 00  	auipc	a0, 0x0
802317be: 13 05 85 31  	addi	a0, a0, 0x318
802317c2: aa e8        	sd	a0, 0x50(sp)

00000000802317c4 <.Lpcrel_hi11>:
802317c4: 17 c5 00 00  	auipc	a0, 0xc
802317c8: 13 05 45 85  	addi	a0, a0, -0x7ac
802317cc: 2a e4        	sd	a0, 0x8(sp)
802317ce: 0d 45        	li	a0, 0x3
802317d0: 2a e8        	sd	a0, 0x10(sp)
802317d2: 02 f4        	sd	zero, 0x28(sp)
802317d4: 30 18        	addi	a2, sp, 0x38
802317d6: 88 71        	ld	a0, 0x20(a1)
802317d8: 8c 75        	ld	a1, 0x28(a1)
802317da: 32 ec        	sd	a2, 0x18(sp)
802317dc: 09 46        	li	a2, 0x2
802317de: 32 f0        	sd	a2, 0x20(sp)
802317e0: 30 00        	addi	a2, sp, 0x8
802317e2: 97 e0 ff ff  	auipc	ra, 0xffffe
802317e6: e7 80 60 c5  	jalr	-0x3aa(ra) <ekernel+0xffce2438>
802317ea: a6 70        	ld	ra, 0x68(sp)
802317ec: 65 61        	addi	sp, sp, 0x70
802317ee: 82 80        	ret

00000000802317f0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h6c6095b226a8eb7fE>:
802317f0: 35 71        	addi	sp, sp, -0xa0
802317f2: 06 ed        	sd	ra, 0x98(sp)
802317f4: 22 e9        	sd	s0, 0x90(sp)
802317f6: 26 e5        	sd	s1, 0x88(sp)
802317f8: 4a e1        	sd	s2, 0x80(sp)
802317fa: 2e 84        	mv	s0, a1
802317fc: 83 e5 45 03  	lwu	a1, 0x34(a1)
80231800: 13 f6 05 01  	andi	a2, a1, 0x10
80231804: 2a 89        	mv	s2, a0
80231806: 19 ee        	bnez	a2, 0x80231824 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h6c6095b226a8eb7fE+0x34>
80231808: 13 f5 05 02  	andi	a0, a1, 0x20
8023180c: 31 ed        	bnez	a0, 0x80231868 <.Lpcrel_hi16+0xa>
8023180e: 03 35 09 00  	ld	a0, 0x0(s2)
80231812: 85 45        	li	a1, 0x1
80231814: 85 44        	li	s1, 0x1
80231816: 22 86        	mv	a2, s0
80231818: 97 f0 ff ff  	auipc	ra, 0xfffff
8023181c: e7 80 20 6e  	jalr	0x6e2(ra) <ekernel+0xffce3efa>
80231820: 51 cd        	beqz	a0, 0x802318bc <.Lpcrel_hi14+0x1a>
80231822: 85 aa        	j	0x80231992 <.Lpcrel_hi21+0x18>
80231824: 03 35 09 00  	ld	a0, 0x0(s2)
80231828: 81 47        	li	a5, 0x0
8023182a: 10 01        	addi	a2, sp, 0x80
8023182c: a9 45        	li	a1, 0xa
8023182e: 19 a8        	j	0x80231844 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h6c6095b226a8eb7fE+0x54>
80231830: 93 86 76 05  	addi	a3, a3, 0x57
80231834: 13 07 f6 ff  	addi	a4, a2, -0x1
80231838: 11 81        	srli	a0, a0, 0x4
8023183a: a3 0f d6 fe  	sb	a3, -0x1(a2)
8023183e: 85 07        	addi	a5, a5, 0x1
80231840: 3a 86        	mv	a2, a4
80231842: 01 c9        	beqz	a0, 0x80231852 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h6c6095b226a8eb7fE+0x62>
80231844: 93 76 f5 00  	andi	a3, a0, 0xf
80231848: e3 f4 b6 fe  	bgeu	a3, a1, 0x80231830 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h6c6095b226a8eb7fE+0x40>
8023184c: 93 86 06 03  	addi	a3, a3, 0x30
80231850: d5 b7        	j	0x80231834 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h6c6095b226a8eb7fE+0x44>
80231852: 93 05 00 08  	li	a1, 0x80
80231856: 33 85 f5 40  	sub	a0, a1, a5
8023185a: 63 e3 a5 14  	bltu	a1, a0, 0x802319a0 <.Lpcrel_hi15>

000000008023185e <.Lpcrel_hi16>:
8023185e: 17 a5 00 00  	auipc	a0, 0xa
80231862: 13 06 a5 1d  	addi	a2, a0, 0x1da
80231866: 91 a0        	j	0x802318aa <.Lpcrel_hi14+0x8>
80231868: 03 35 09 00  	ld	a0, 0x0(s2)
8023186c: 81 47        	li	a5, 0x0
8023186e: 10 01        	addi	a2, sp, 0x80
80231870: a9 45        	li	a1, 0xa
80231872: 19 a8        	j	0x80231888 <.Lpcrel_hi16+0x2a>
80231874: 93 86 76 03  	addi	a3, a3, 0x37
80231878: 13 07 f6 ff  	addi	a4, a2, -0x1
8023187c: 11 81        	srli	a0, a0, 0x4
8023187e: a3 0f d6 fe  	sb	a3, -0x1(a2)
80231882: 85 07        	addi	a5, a5, 0x1
80231884: 3a 86        	mv	a2, a4
80231886: 01 c9        	beqz	a0, 0x80231896 <.Lpcrel_hi16+0x38>
80231888: 93 76 f5 00  	andi	a3, a0, 0xf
8023188c: e3 f4 b6 fe  	bgeu	a3, a1, 0x80231874 <.Lpcrel_hi16+0x16>
80231890: 93 86 06 03  	addi	a3, a3, 0x30
80231894: d5 b7        	j	0x80231878 <.Lpcrel_hi16+0x1a>
80231896: 93 05 00 08  	li	a1, 0x80
8023189a: 33 85 f5 40  	sub	a0, a1, a5
8023189e: 63 eb a5 10  	bltu	a1, a0, 0x802319b4 <.Lpcrel_hi13>

00000000802318a2 <.Lpcrel_hi14>:
802318a2: 17 a5 00 00  	auipc	a0, 0xa
802318a6: 13 06 65 19  	addi	a2, a0, 0x196
802318aa: 85 45        	li	a1, 0x1
802318ac: 89 46        	li	a3, 0x2
802318ae: 85 44        	li	s1, 0x1
802318b0: 22 85        	mv	a0, s0
802318b2: 97 e0 ff ff  	auipc	ra, 0xffffe
802318b6: e7 80 c0 d1  	jalr	-0x2e4(ra) <ekernel+0xffce25ce>
802318ba: 61 ed        	bnez	a0, 0x80231992 <.Lpcrel_hi21+0x18>
802318bc: 0c 74        	ld	a1, 0x28(s0)
802318be: 08 70        	ld	a0, 0x20(s0)
802318c0: 94 6d        	ld	a3, 0x18(a1)

00000000802318c2 <.Lpcrel_hi17>:
802318c2: 97 b5 00 00  	auipc	a1, 0xb
802318c6: 93 85 65 78  	addi	a1, a1, 0x786
802318ca: 09 46        	li	a2, 0x2
802318cc: 82 96        	jalr	a3
802318ce: 85 44        	li	s1, 0x1
802318d0: 69 e1        	bnez	a0, 0x80231992 <.Lpcrel_hi21+0x18>
802318d2: 03 65 44 03  	lwu	a0, 0x34(s0)
802318d6: 93 75 05 01  	andi	a1, a0, 0x10
802318da: 8d e1        	bnez	a1, 0x802318fc <.Lpcrel_hi17+0x3a>
802318dc: 13 75 05 02  	andi	a0, a0, 0x20
802318e0: 25 e1        	bnez	a0, 0x80231940 <.Lpcrel_hi19+0xa>
802318e2: 03 35 89 00  	ld	a0, 0x8(s2)
802318e6: 85 45        	li	a1, 0x1
802318e8: 22 86        	mv	a2, s0
802318ea: ea 60        	ld	ra, 0x98(sp)
802318ec: 4a 64        	ld	s0, 0x90(sp)
802318ee: aa 64        	ld	s1, 0x88(sp)
802318f0: 0a 69        	ld	s2, 0x80(sp)
802318f2: 0d 61        	addi	sp, sp, 0xa0
802318f4: 17 f3 ff ff  	auipc	t1, 0xfffff
802318f8: 67 00 63 60  	jr	0x606(t1) <ekernel+0xffce3efa>
802318fc: 03 35 89 00  	ld	a0, 0x8(s2)
80231900: 81 47        	li	a5, 0x0
80231902: 10 01        	addi	a2, sp, 0x80
80231904: a9 45        	li	a1, 0xa
80231906: 19 a8        	j	0x8023191c <.Lpcrel_hi17+0x5a>
80231908: 93 86 76 05  	addi	a3, a3, 0x57
8023190c: 13 07 f6 ff  	addi	a4, a2, -0x1
80231910: 11 81        	srli	a0, a0, 0x4
80231912: a3 0f d6 fe  	sb	a3, -0x1(a2)
80231916: 85 07        	addi	a5, a5, 0x1
80231918: 3a 86        	mv	a2, a4
8023191a: 01 c9        	beqz	a0, 0x8023192a <.Lpcrel_hi17+0x68>
8023191c: 93 76 f5 00  	andi	a3, a0, 0xf
80231920: e3 f4 b6 fe  	bgeu	a3, a1, 0x80231908 <.Lpcrel_hi17+0x46>
80231924: 93 86 06 03  	addi	a3, a3, 0x30
80231928: d5 b7        	j	0x8023190c <.Lpcrel_hi17+0x4a>
8023192a: 93 05 00 08  	li	a1, 0x80
8023192e: 33 85 f5 40  	sub	a0, a1, a5
80231932: 63 eb a5 08  	bltu	a1, a0, 0x802319c8 <.Lpcrel_hi18>

0000000080231936 <.Lpcrel_hi19>:
80231936: 17 a5 00 00  	auipc	a0, 0xa
8023193a: 13 06 25 10  	addi	a2, a0, 0x102
8023193e: 91 a0        	j	0x80231982 <.Lpcrel_hi21+0x8>
80231940: 03 35 89 00  	ld	a0, 0x8(s2)
80231944: 81 47        	li	a5, 0x0
80231946: 10 01        	addi	a2, sp, 0x80
80231948: a9 45        	li	a1, 0xa
8023194a: 19 a8        	j	0x80231960 <.Lpcrel_hi19+0x2a>
8023194c: 93 86 76 03  	addi	a3, a3, 0x37
80231950: 13 07 f6 ff  	addi	a4, a2, -0x1
80231954: 11 81        	srli	a0, a0, 0x4
80231956: a3 0f d6 fe  	sb	a3, -0x1(a2)
8023195a: 85 07        	addi	a5, a5, 0x1
8023195c: 3a 86        	mv	a2, a4
8023195e: 01 c9        	beqz	a0, 0x8023196e <.Lpcrel_hi19+0x38>
80231960: 93 76 f5 00  	andi	a3, a0, 0xf
80231964: e3 f4 b6 fe  	bgeu	a3, a1, 0x8023194c <.Lpcrel_hi19+0x16>
80231968: 93 86 06 03  	addi	a3, a3, 0x30
8023196c: d5 b7        	j	0x80231950 <.Lpcrel_hi19+0x1a>
8023196e: 93 05 00 08  	li	a1, 0x80
80231972: 33 85 f5 40  	sub	a0, a1, a5
80231976: 63 e3 a5 06  	bltu	a1, a0, 0x802319dc <.Lpcrel_hi20>

000000008023197a <.Lpcrel_hi21>:
8023197a: 17 a5 00 00  	auipc	a0, 0xa
8023197e: 13 06 e5 0b  	addi	a2, a0, 0xbe
80231982: 85 45        	li	a1, 0x1
80231984: 89 46        	li	a3, 0x2
80231986: 22 85        	mv	a0, s0
80231988: 97 e0 ff ff  	auipc	ra, 0xffffe
8023198c: e7 80 60 c4  	jalr	-0x3ba(ra) <ekernel+0xffce25ce>
80231990: aa 84        	mv	s1, a0
80231992: 26 85        	mv	a0, s1
80231994: ea 60        	ld	ra, 0x98(sp)
80231996: 4a 64        	ld	s0, 0x90(sp)
80231998: aa 64        	ld	s1, 0x88(sp)
8023199a: 0a 69        	ld	s2, 0x80(sp)
8023199c: 0d 61        	addi	sp, sp, 0xa0
8023199e: 82 80        	ret

00000000802319a0 <.Lpcrel_hi15>:
802319a0: 97 a5 00 00  	auipc	a1, 0xa
802319a4: 13 86 05 08  	addi	a2, a1, 0x80
802319a8: 93 05 00 08  	li	a1, 0x80
802319ac: 97 00 00 00  	auipc	ra, 0x0
802319b0: e7 80 00 cb  	jalr	-0x350(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

00000000802319b4 <.Lpcrel_hi13>:
802319b4: 97 a5 00 00  	auipc	a1, 0xa
802319b8: 13 86 c5 06  	addi	a2, a1, 0x6c
802319bc: 93 05 00 08  	li	a1, 0x80
802319c0: 97 00 00 00  	auipc	ra, 0x0
802319c4: e7 80 c0 c9  	jalr	-0x364(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

00000000802319c8 <.Lpcrel_hi18>:
802319c8: 97 a5 00 00  	auipc	a1, 0xa
802319cc: 13 86 85 05  	addi	a2, a1, 0x58
802319d0: 93 05 00 08  	li	a1, 0x80
802319d4: 97 00 00 00  	auipc	ra, 0x0
802319d8: e7 80 80 c8  	jalr	-0x378(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

00000000802319dc <.Lpcrel_hi20>:
802319dc: 97 a5 00 00  	auipc	a1, 0xa
802319e0: 13 86 45 04  	addi	a2, a1, 0x44
802319e4: 93 05 00 08  	li	a1, 0x80
802319e8: 97 00 00 00  	auipc	ra, 0x0
802319ec: e7 80 40 c7  	jalr	-0x38c(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

00000000802319f0 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h795ba9fce8eaec67E>:
802319f0: 75 71        	addi	sp, sp, -0x90
802319f2: 06 e5        	sd	ra, 0x88(sp)
802319f4: 2e 88        	mv	a6, a1
802319f6: 83 e5 45 03  	lwu	a1, 0x34(a1)
802319fa: 08 61        	ld	a0, 0x0(a0)
802319fc: 13 f6 05 01  	andi	a2, a1, 0x10
80231a00: 01 ee        	bnez	a2, 0x80231a18 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h795ba9fce8eaec67E+0x28>
80231a02: 93 f5 05 02  	andi	a1, a1, 0x20
80231a06: a9 e9        	bnez	a1, 0x80231a58 <.Lpcrel_hi62+0xa>
80231a08: 85 45        	li	a1, 0x1
80231a0a: 42 86        	mv	a2, a6
80231a0c: aa 60        	ld	ra, 0x88(sp)
80231a0e: 49 61        	addi	sp, sp, 0x90
80231a10: 17 f3 ff ff  	auipc	t1, 0xfffff
80231a14: 67 00 a3 4e  	jr	0x4ea(t1) <ekernel+0xffce3efa>
80231a18: 81 47        	li	a5, 0x0
80231a1a: 30 01        	addi	a2, sp, 0x88
80231a1c: a9 45        	li	a1, 0xa
80231a1e: 19 a8        	j	0x80231a34 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h795ba9fce8eaec67E+0x44>
80231a20: 93 86 76 05  	addi	a3, a3, 0x57
80231a24: 13 07 f6 ff  	addi	a4, a2, -0x1
80231a28: 11 81        	srli	a0, a0, 0x4
80231a2a: a3 0f d6 fe  	sb	a3, -0x1(a2)
80231a2e: 85 07        	addi	a5, a5, 0x1
80231a30: 3a 86        	mv	a2, a4
80231a32: 01 c9        	beqz	a0, 0x80231a42 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h795ba9fce8eaec67E+0x52>
80231a34: 93 76 f5 00  	andi	a3, a0, 0xf
80231a38: e3 f4 b6 fe  	bgeu	a3, a1, 0x80231a20 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h795ba9fce8eaec67E+0x30>
80231a3c: 93 86 06 03  	addi	a3, a3, 0x30
80231a40: d5 b7        	j	0x80231a24 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h795ba9fce8eaec67E+0x34>
80231a42: 93 05 00 08  	li	a1, 0x80
80231a46: 33 85 f5 40  	sub	a0, a1, a5
80231a4a: 63 e0 a5 06  	bltu	a1, a0, 0x80231aaa <.Lpcrel_hi61>

0000000080231a4e <.Lpcrel_hi62>:
80231a4e: 17 a5 00 00  	auipc	a0, 0xa
80231a52: 13 06 a5 fe  	addi	a2, a0, -0x16
80231a56: 81 a0        	j	0x80231a96 <.Lpcrel_hi64+0x8>
80231a58: 81 47        	li	a5, 0x0
80231a5a: 30 01        	addi	a2, sp, 0x88
80231a5c: a9 45        	li	a1, 0xa
80231a5e: 19 a8        	j	0x80231a74 <.Lpcrel_hi62+0x26>
80231a60: 93 86 76 03  	addi	a3, a3, 0x37
80231a64: 13 07 f6 ff  	addi	a4, a2, -0x1
80231a68: 11 81        	srli	a0, a0, 0x4
80231a6a: a3 0f d6 fe  	sb	a3, -0x1(a2)
80231a6e: 85 07        	addi	a5, a5, 0x1
80231a70: 3a 86        	mv	a2, a4
80231a72: 01 c9        	beqz	a0, 0x80231a82 <.Lpcrel_hi62+0x34>
80231a74: 93 76 f5 00  	andi	a3, a0, 0xf
80231a78: e3 f4 b6 fe  	bgeu	a3, a1, 0x80231a60 <.Lpcrel_hi62+0x12>
80231a7c: 93 86 06 03  	addi	a3, a3, 0x30
80231a80: d5 b7        	j	0x80231a64 <.Lpcrel_hi62+0x16>
80231a82: 93 05 00 08  	li	a1, 0x80
80231a86: 33 85 f5 40  	sub	a0, a1, a5
80231a8a: 63 ea a5 02  	bltu	a1, a0, 0x80231abe <.Lpcrel_hi63>

0000000080231a8e <.Lpcrel_hi64>:
80231a8e: 17 a5 00 00  	auipc	a0, 0xa
80231a92: 13 06 a5 fa  	addi	a2, a0, -0x56
80231a96: 85 45        	li	a1, 0x1
80231a98: 89 46        	li	a3, 0x2
80231a9a: 42 85        	mv	a0, a6
80231a9c: 97 e0 ff ff  	auipc	ra, 0xffffe
80231aa0: e7 80 20 b3  	jalr	-0x4ce(ra) <ekernel+0xffce25ce>
80231aa4: aa 60        	ld	ra, 0x88(sp)
80231aa6: 49 61        	addi	sp, sp, 0x90
80231aa8: 82 80        	ret

0000000080231aaa <.Lpcrel_hi61>:
80231aaa: 97 a5 00 00  	auipc	a1, 0xa
80231aae: 13 86 65 f7  	addi	a2, a1, -0x8a
80231ab2: 93 05 00 08  	li	a1, 0x80
80231ab6: 97 00 00 00  	auipc	ra, 0x0
80231aba: e7 80 60 ba  	jalr	-0x45a(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

0000000080231abe <.Lpcrel_hi63>:
80231abe: 97 a5 00 00  	auipc	a1, 0xa
80231ac2: 13 86 25 f6  	addi	a2, a1, -0x9e
80231ac6: 93 05 00 08  	li	a1, 0x80
80231aca: 97 00 00 00  	auipc	ra, 0x0
80231ace: e7 80 20 b9  	jalr	-0x46e(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

0000000080231ad2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h2ddf752deedf6190E>:
80231ad2: 75 71        	addi	sp, sp, -0x90
80231ad4: 06 e5        	sd	ra, 0x88(sp)
80231ad6: 2e 88        	mv	a6, a1
80231ad8: 83 e5 45 03  	lwu	a1, 0x34(a1)
80231adc: 13 f6 05 01  	andi	a2, a1, 0x10
80231ae0: 11 ee        	bnez	a2, 0x80231afc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h2ddf752deedf6190E+0x2a>
80231ae2: 93 f5 05 02  	andi	a1, a1, 0x20
80231ae6: a9 ed        	bnez	a1, 0x80231b40 <.Lpcrel_hi98+0xa>
80231ae8: 03 65 05 00  	lwu	a0, 0x0(a0)
80231aec: 85 45        	li	a1, 0x1
80231aee: 42 86        	mv	a2, a6
80231af0: aa 60        	ld	ra, 0x88(sp)
80231af2: 49 61        	addi	sp, sp, 0x90
80231af4: 17 f3 ff ff  	auipc	t1, 0xfffff
80231af8: 67 00 63 40  	jr	0x406(t1) <ekernel+0xffce3efa>
80231afc: 08 41        	lw	a0, 0x0(a0)
80231afe: 81 47        	li	a5, 0x0
80231b00: 30 01        	addi	a2, sp, 0x88
80231b02: a9 45        	li	a1, 0xa
80231b04: 21 a8        	j	0x80231b1c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h2ddf752deedf6190E+0x4a>
80231b06: 93 86 76 05  	addi	a3, a3, 0x57
80231b0a: 13 07 f6 ff  	addi	a4, a2, -0x1
80231b0e: 1b 55 45 00  	srliw	a0, a0, 0x4
80231b12: a3 0f d6 fe  	sb	a3, -0x1(a2)
80231b16: 85 07        	addi	a5, a5, 0x1
80231b18: 3a 86        	mv	a2, a4
80231b1a: 01 c9        	beqz	a0, 0x80231b2a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h2ddf752deedf6190E+0x58>
80231b1c: 93 76 f5 00  	andi	a3, a0, 0xf
80231b20: e3 f3 b6 fe  	bgeu	a3, a1, 0x80231b06 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h2ddf752deedf6190E+0x34>
80231b24: 93 86 06 03  	addi	a3, a3, 0x30
80231b28: cd b7        	j	0x80231b0a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h2ddf752deedf6190E+0x38>
80231b2a: 93 05 00 08  	li	a1, 0x80
80231b2e: 33 85 f5 40  	sub	a0, a1, a5
80231b32: 63 e2 a5 06  	bltu	a1, a0, 0x80231b96 <.Lpcrel_hi97>

0000000080231b36 <.Lpcrel_hi98>:
80231b36: 17 a5 00 00  	auipc	a0, 0xa
80231b3a: 13 06 25 f0  	addi	a2, a0, -0xfe
80231b3e: 91 a0        	j	0x80231b82 <.Lpcrel_hi100+0x8>
80231b40: 08 41        	lw	a0, 0x0(a0)
80231b42: 81 47        	li	a5, 0x0
80231b44: 30 01        	addi	a2, sp, 0x88
80231b46: a9 45        	li	a1, 0xa
80231b48: 21 a8        	j	0x80231b60 <.Lpcrel_hi98+0x2a>
80231b4a: 93 86 76 03  	addi	a3, a3, 0x37
80231b4e: 13 07 f6 ff  	addi	a4, a2, -0x1
80231b52: 1b 55 45 00  	srliw	a0, a0, 0x4
80231b56: a3 0f d6 fe  	sb	a3, -0x1(a2)
80231b5a: 85 07        	addi	a5, a5, 0x1
80231b5c: 3a 86        	mv	a2, a4
80231b5e: 01 c9        	beqz	a0, 0x80231b6e <.Lpcrel_hi98+0x38>
80231b60: 93 76 f5 00  	andi	a3, a0, 0xf
80231b64: e3 f3 b6 fe  	bgeu	a3, a1, 0x80231b4a <.Lpcrel_hi98+0x14>
80231b68: 93 86 06 03  	addi	a3, a3, 0x30
80231b6c: cd b7        	j	0x80231b4e <.Lpcrel_hi98+0x18>
80231b6e: 93 05 00 08  	li	a1, 0x80
80231b72: 33 85 f5 40  	sub	a0, a1, a5
80231b76: 63 ea a5 02  	bltu	a1, a0, 0x80231baa <.Lpcrel_hi99>

0000000080231b7a <.Lpcrel_hi100>:
80231b7a: 17 a5 00 00  	auipc	a0, 0xa
80231b7e: 13 06 e5 eb  	addi	a2, a0, -0x142
80231b82: 85 45        	li	a1, 0x1
80231b84: 89 46        	li	a3, 0x2
80231b86: 42 85        	mv	a0, a6
80231b88: 97 e0 ff ff  	auipc	ra, 0xffffe
80231b8c: e7 80 60 a4  	jalr	-0x5ba(ra) <ekernel+0xffce25ce>
80231b90: aa 60        	ld	ra, 0x88(sp)
80231b92: 49 61        	addi	sp, sp, 0x90
80231b94: 82 80        	ret

0000000080231b96 <.Lpcrel_hi97>:
80231b96: 97 a5 00 00  	auipc	a1, 0xa
80231b9a: 13 86 a5 e8  	addi	a2, a1, -0x176
80231b9e: 93 05 00 08  	li	a1, 0x80
80231ba2: 97 00 00 00  	auipc	ra, 0x0
80231ba6: e7 80 a0 ab  	jalr	-0x546(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

0000000080231baa <.Lpcrel_hi99>:
80231baa: 97 a5 00 00  	auipc	a1, 0xa
80231bae: 13 86 65 e7  	addi	a2, a1, -0x18a
80231bb2: 93 05 00 08  	li	a1, 0x80
80231bb6: 97 00 00 00  	auipc	ra, 0x0
80231bba: e7 80 60 aa  	jalr	-0x55a(ra) <_ZN4core5slice5index26slice_start_index_len_fail17hcbd84d0b85fcac56E>

0000000080231bbe <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E>:
80231bbe: c1 46        	li	a3, 0x10
80231bc0: 63 6b d6 06  	bltu	a2, a3, 0x80231c36 <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x78>
80231bc4: bb 06 a0 40  	negw	a3, a0
80231bc8: 13 f8 76 00  	andi	a6, a3, 0x7
80231bcc: b3 03 05 01  	add	t2, a0, a6
80231bd0: 63 0c 08 00  	beqz	a6, 0x80231be8 <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x2a>
80231bd4: aa 87        	mv	a5, a0
80231bd6: ae 86        	mv	a3, a1
80231bd8: 03 c7 06 00  	lbu	a4, 0x0(a3)
80231bdc: 23 80 e7 00  	sb	a4, 0x0(a5)
80231be0: 85 07        	addi	a5, a5, 0x1
80231be2: 85 06        	addi	a3, a3, 0x1
80231be4: e3 ea 77 fe  	bltu	a5, t2, 0x80231bd8 <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x1a>
80231be8: b3 88 05 01  	add	a7, a1, a6
80231bec: 33 08 06 41  	sub	a6, a2, a6
80231bf0: 93 72 88 ff  	andi	t0, a6, -0x8
80231bf4: 93 f5 78 00  	andi	a1, a7, 0x7
80231bf8: b3 86 53 00  	add	a3, t2, t0
80231bfc: a1 c1        	beqz	a1, 0x80231c3c <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x7e>
80231bfe: 63 59 50 04  	blez	t0, 0x80231c50 <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x92>
80231c02: 93 95 38 00  	slli	a1, a7, 0x3
80231c06: 13 f3 85 03  	andi	t1, a1, 0x38
80231c0a: 93 f7 88 ff  	andi	a5, a7, -0x8
80231c0e: 90 63        	ld	a2, 0x0(a5)
80231c10: bb 05 b0 40  	negw	a1, a1
80231c14: 13 fe 85 03  	andi	t3, a1, 0x38
80231c18: a1 07        	addi	a5, a5, 0x8
80231c1a: 98 63        	ld	a4, 0x0(a5)
80231c1c: 33 56 66 00  	srl	a2, a2, t1
80231c20: b3 15 c7 01  	sll	a1, a4, t3
80231c24: d1 8d        	or	a1, a1, a2
80231c26: 23 b0 b3 00  	sd	a1, 0x0(t2)
80231c2a: a1 03        	addi	t2, t2, 0x8
80231c2c: a1 07        	addi	a5, a5, 0x8
80231c2e: 3a 86        	mv	a2, a4
80231c30: e3 e5 d3 fe  	bltu	t2, a3, 0x80231c1a <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x5c>
80231c34: 31 a8        	j	0x80231c50 <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x92>
80231c36: aa 86        	mv	a3, a0
80231c38: 0d e2        	bnez	a2, 0x80231c5a <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x9c>
80231c3a: 0d a8        	j	0x80231c6c <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0xae>
80231c3c: 63 5a 50 00  	blez	t0, 0x80231c50 <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x92>
80231c40: c6 85        	mv	a1, a7
80231c42: 90 61        	ld	a2, 0x0(a1)
80231c44: 23 b0 c3 00  	sd	a2, 0x0(t2)
80231c48: a1 03        	addi	t2, t2, 0x8
80231c4a: a1 05        	addi	a1, a1, 0x8
80231c4c: e3 eb d3 fe  	bltu	t2, a3, 0x80231c42 <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x84>
80231c50: b3 85 58 00  	add	a1, a7, t0
80231c54: 13 76 78 00  	andi	a2, a6, 0x7
80231c58: 11 ca        	beqz	a2, 0x80231c6c <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0xae>
80231c5a: 36 96        	add	a2, a2, a3
80231c5c: 03 c7 05 00  	lbu	a4, 0x0(a1)
80231c60: 23 80 e6 00  	sb	a4, 0x0(a3)
80231c64: 85 06        	addi	a3, a3, 0x1
80231c66: 85 05        	addi	a1, a1, 0x1
80231c68: e3 ea c6 fe  	bltu	a3, a2, 0x80231c5c <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E+0x9e>
80231c6c: 82 80        	ret

0000000080231c6e <memcpy>:
80231c6e: 17 03 00 00  	auipc	t1, 0x0
80231c72: 67 00 03 f5  	jr	-0xb0(t1) <_ZN17compiler_builtins3mem6memcpy17h1f6dc54861d3f848E>

0000000080231c76 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE>:
80231c76: b3 06 b5 40  	sub	a3, a0, a1
80231c7a: 63 f7 c6 08  	bgeu	a3, a2, 0x80231d08 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x92>
80231c7e: b3 06 c5 00  	add	a3, a0, a2
80231c82: 41 47        	li	a4, 0x10
80231c84: 33 88 c5 00  	add	a6, a1, a2
80231c88: 63 6c e6 0e  	bltu	a2, a4, 0x80231d80 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x10a>
80231c8c: 93 f2 76 00  	andi	t0, a3, 0x7
80231c90: b3 08 50 40  	neg	a7, t0
80231c94: 93 f3 86 ff  	andi	t2, a3, -0x8
80231c98: 63 8f 02 00  	beqz	t0, 0x80231cb6 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x40>
80231c9c: b3 87 c5 00  	add	a5, a1, a2
80231ca0: fd 17        	addi	a5, a5, -0x1
80231ca2: 03 c3 07 00  	lbu	t1, 0x0(a5)
80231ca6: 13 87 f6 ff  	addi	a4, a3, -0x1
80231caa: a3 8f 66 fe  	sb	t1, -0x1(a3)
80231cae: fd 17        	addi	a5, a5, -0x1
80231cb0: ba 86        	mv	a3, a4
80231cb2: e3 e8 e3 fe  	bltu	t2, a4, 0x80231ca2 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x2c>
80231cb6: 46 98        	add	a6, a6, a7
80231cb8: b3 08 56 40  	sub	a7, a2, t0
80231cbc: 93 f2 88 ff  	andi	t0, a7, -0x8
80231cc0: 13 76 78 00  	andi	a2, a6, 0x7
80231cc4: b3 86 53 40  	sub	a3, t2, t0
80231cc8: 69 c2        	beqz	a2, 0x80231d8a <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x114>
80231cca: 63 5d 50 0c  	blez	t0, 0x80231da4 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x12e>
80231cce: 13 16 38 00  	slli	a2, a6, 0x3
80231cd2: 13 73 86 03  	andi	t1, a2, 0x38
80231cd6: 13 77 88 ff  	andi	a4, a6, -0x8
80231cda: 0c 63        	ld	a1, 0x0(a4)
80231cdc: 3b 06 c0 40  	negw	a2, a2
80231ce0: 13 7e 86 03  	andi	t3, a2, 0x38
80231ce4: 13 06 87 ff  	addi	a2, a4, -0x8
80231ce8: 18 62        	ld	a4, 0x0(a2)
80231cea: b3 95 c5 01  	sll	a1, a1, t3
80231cee: b3 57 67 00  	srl	a5, a4, t1
80231cf2: dd 8d        	or	a1, a1, a5
80231cf4: 93 87 83 ff  	addi	a5, t2, -0x8
80231cf8: 23 bc b3 fe  	sd	a1, -0x8(t2)
80231cfc: 61 16        	addi	a2, a2, -0x8
80231cfe: be 83        	mv	t2, a5
80231d00: ba 85        	mv	a1, a4
80231d02: e3 e3 f6 fe  	bltu	a3, a5, 0x80231ce8 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x72>
80231d06: 79 a8        	j	0x80231da4 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x12e>
80231d08: c1 46        	li	a3, 0x10
80231d0a: 63 6d d6 06  	bltu	a2, a3, 0x80231d84 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x10e>
80231d0e: bb 06 a0 40  	negw	a3, a0
80231d12: 13 f8 76 00  	andi	a6, a3, 0x7
80231d16: b3 03 05 01  	add	t2, a0, a6
80231d1a: 63 0c 08 00  	beqz	a6, 0x80231d32 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0xbc>
80231d1e: aa 87        	mv	a5, a0
80231d20: ae 86        	mv	a3, a1
80231d22: 03 c7 06 00  	lbu	a4, 0x0(a3)
80231d26: 23 80 e7 00  	sb	a4, 0x0(a5)
80231d2a: 85 07        	addi	a5, a5, 0x1
80231d2c: 85 06        	addi	a3, a3, 0x1
80231d2e: e3 ea 77 fe  	bltu	a5, t2, 0x80231d22 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0xac>
80231d32: b3 88 05 01  	add	a7, a1, a6
80231d36: 33 08 06 41  	sub	a6, a2, a6
80231d3a: 93 72 88 ff  	andi	t0, a6, -0x8
80231d3e: 93 f5 78 00  	andi	a1, a7, 0x7
80231d42: b3 86 53 00  	add	a3, t2, t0
80231d46: d9 c1        	beqz	a1, 0x80231dcc <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x156>
80231d48: 63 5c 50 08  	blez	t0, 0x80231de0 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x16a>
80231d4c: 93 95 38 00  	slli	a1, a7, 0x3
80231d50: 13 f3 85 03  	andi	t1, a1, 0x38
80231d54: 93 f7 88 ff  	andi	a5, a7, -0x8
80231d58: 90 63        	ld	a2, 0x0(a5)
80231d5a: bb 05 b0 40  	negw	a1, a1
80231d5e: 13 fe 85 03  	andi	t3, a1, 0x38
80231d62: a1 07        	addi	a5, a5, 0x8
80231d64: 98 63        	ld	a4, 0x0(a5)
80231d66: 33 56 66 00  	srl	a2, a2, t1
80231d6a: b3 15 c7 01  	sll	a1, a4, t3
80231d6e: d1 8d        	or	a1, a1, a2
80231d70: 23 b0 b3 00  	sd	a1, 0x0(t2)
80231d74: a1 03        	addi	t2, t2, 0x8
80231d76: a1 07        	addi	a5, a5, 0x8
80231d78: 3a 86        	mv	a2, a4
80231d7a: e3 e5 d3 fe  	bltu	t2, a3, 0x80231d64 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0xee>
80231d7e: 8d a0        	j	0x80231de0 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x16a>
80231d80: aa 85        	mv	a1, a0
80231d82: 0d a8        	j	0x80231db4 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x13e>
80231d84: aa 86        	mv	a3, a0
80231d86: 35 e2        	bnez	a2, 0x80231dea <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x174>
80231d88: 95 a8        	j	0x80231dfc <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x186>
80231d8a: 63 5d 50 00  	blez	t0, 0x80231da4 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x12e>
80231d8e: c6 95        	add	a1, a1, a7
80231d90: e1 15        	addi	a1, a1, -0x8
80231d92: 90 61        	ld	a2, 0x0(a1)
80231d94: 13 87 83 ff  	addi	a4, t2, -0x8
80231d98: 23 bc c3 fe  	sd	a2, -0x8(t2)
80231d9c: e1 15        	addi	a1, a1, -0x8
80231d9e: ba 83        	mv	t2, a4
80231da0: e3 e9 e6 fe  	bltu	a3, a4, 0x80231d92 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x11c>
80231da4: 93 f5 78 00  	andi	a1, a7, 0x7
80231da8: b1 c9        	beqz	a1, 0x80231dfc <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x186>
80231daa: 33 06 50 40  	neg	a2, t0
80231dae: 32 98        	add	a6, a6, a2
80231db0: b3 85 b6 40  	sub	a1, a3, a1
80231db4: 7d 18        	addi	a6, a6, -0x1
80231db6: 03 46 08 00  	lbu	a2, 0x0(a6)
80231dba: 13 87 f6 ff  	addi	a4, a3, -0x1
80231dbe: a3 8f c6 fe  	sb	a2, -0x1(a3)
80231dc2: 7d 18        	addi	a6, a6, -0x1
80231dc4: ba 86        	mv	a3, a4
80231dc6: e3 e8 e5 fe  	bltu	a1, a4, 0x80231db6 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x140>
80231dca: 0d a8        	j	0x80231dfc <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x186>
80231dcc: 63 5a 50 00  	blez	t0, 0x80231de0 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x16a>
80231dd0: c6 85        	mv	a1, a7
80231dd2: 90 61        	ld	a2, 0x0(a1)
80231dd4: 23 b0 c3 00  	sd	a2, 0x0(t2)
80231dd8: a1 03        	addi	t2, t2, 0x8
80231dda: a1 05        	addi	a1, a1, 0x8
80231ddc: e3 eb d3 fe  	bltu	t2, a3, 0x80231dd2 <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x15c>
80231de0: b3 85 58 00  	add	a1, a7, t0
80231de4: 13 76 78 00  	andi	a2, a6, 0x7
80231de8: 11 ca        	beqz	a2, 0x80231dfc <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x186>
80231dea: 36 96        	add	a2, a2, a3
80231dec: 03 c7 05 00  	lbu	a4, 0x0(a1)
80231df0: 23 80 e6 00  	sb	a4, 0x0(a3)
80231df4: 85 06        	addi	a3, a3, 0x1
80231df6: 85 05        	addi	a1, a1, 0x1
80231df8: e3 ea c6 fe  	bltu	a3, a2, 0x80231dec <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE+0x176>
80231dfc: 82 80        	ret

0000000080231dfe <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E>:
80231dfe: c1 46        	li	a3, 0x10
80231e00: 63 6a d6 04  	bltu	a2, a3, 0x80231e54 <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E+0x56>
80231e04: bb 06 a0 40  	negw	a3, a0
80231e08: 9d 8a        	andi	a3, a3, 0x7
80231e0a: 33 07 d5 00  	add	a4, a0, a3
80231e0e: 99 c6        	beqz	a3, 0x80231e1c <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E+0x1e>
80231e10: aa 87        	mv	a5, a0
80231e12: 23 80 b7 00  	sb	a1, 0x0(a5)
80231e16: 85 07        	addi	a5, a5, 0x1
80231e18: e3 ed e7 fe  	bltu	a5, a4, 0x80231e12 <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E+0x14>
80231e1c: b3 08 d6 40  	sub	a7, a2, a3
80231e20: 93 f7 88 ff  	andi	a5, a7, -0x8
80231e24: b3 06 f7 00  	add	a3, a4, a5
80231e28: 63 52 f0 02  	blez	a5, 0x80231e4c <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E+0x4e>
80231e2c: 13 98 85 03  	slli	a6, a1, 0x38
80231e30: b7 17 10 10  	lui	a5, 0x10101
80231e34: 92 07        	slli	a5, a5, 0x4
80231e36: 93 87 07 10  	addi	a5, a5, 0x100
80231e3a: 33 36 f8 02  	mulhu	a2, a6, a5
80231e3e: 93 17 06 02  	slli	a5, a2, 0x20
80231e42: d1 8f        	or	a5, a5, a2
80231e44: 1c e3        	sd	a5, 0x0(a4)
80231e46: 21 07        	addi	a4, a4, 0x8
80231e48: e3 6e d7 fe  	bltu	a4, a3, 0x80231e44 <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E+0x46>
80231e4c: 13 f6 78 00  	andi	a2, a7, 0x7
80231e50: 01 e6        	bnez	a2, 0x80231e58 <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E+0x5a>
80231e52: 09 a8        	j	0x80231e64 <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E+0x66>
80231e54: aa 86        	mv	a3, a0
80231e56: 19 c6        	beqz	a2, 0x80231e64 <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E+0x66>
80231e58: 36 96        	add	a2, a2, a3
80231e5a: 23 80 b6 00  	sb	a1, 0x0(a3)
80231e5e: 85 06        	addi	a3, a3, 0x1
80231e60: e3 ed c6 fe  	bltu	a3, a2, 0x80231e5a <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E+0x5c>
80231e64: 82 80        	ret

0000000080231e66 <_ZN17compiler_builtins3mem6memcmp17he9e8e37160aa3c21E>:
80231e66: 19 ca        	beqz	a2, 0x80231e7c <_ZN17compiler_builtins3mem6memcmp17he9e8e37160aa3c21E+0x16>
80231e68: 83 46 05 00  	lbu	a3, 0x0(a0)
80231e6c: 03 c7 05 00  	lbu	a4, 0x0(a1)
80231e70: 63 98 e6 00  	bne	a3, a4, 0x80231e80 <_ZN17compiler_builtins3mem6memcmp17he9e8e37160aa3c21E+0x1a>
80231e74: 85 05        	addi	a1, a1, 0x1
80231e76: 7d 16        	addi	a2, a2, -0x1
80231e78: 05 05        	addi	a0, a0, 0x1
80231e7a: 7d f6        	bnez	a2, 0x80231e68 <_ZN17compiler_builtins3mem6memcmp17he9e8e37160aa3c21E+0x2>
80231e7c: 01 45        	li	a0, 0x0
80231e7e: 82 80        	ret
80231e80: 33 85 e6 40  	sub	a0, a3, a4
80231e84: 82 80        	ret

0000000080231e86 <memmove>:
80231e86: 17 03 00 00  	auipc	t1, 0x0
80231e8a: 67 00 03 df  	jr	-0x210(t1) <_ZN17compiler_builtins3mem7memmove17hf6d14ed0f3d04ebeE>

0000000080231e8e <memset>:
80231e8e: 17 03 00 00  	auipc	t1, 0x0
80231e92: 67 00 03 f7  	jr	-0x90(t1) <_ZN17compiler_builtins3mem6memset17h1e9cd69f09b97ee9E>

0000000080231e96 <memcmp>:
80231e96: 17 03 00 00  	auipc	t1, 0x0
80231e9a: 67 00 03 fd  	jr	-0x30(t1) <_ZN17compiler_builtins3mem6memcmp17he9e8e37160aa3c21E>
		...
80231ffe: 00 00        	unimp

0000000080232000 <uservec>:
80232000: 73 10 05 14  	csrw	sscratch, a0
80232004: 37 05 00 02  	lui	a0, 0x2000
80232008: 7d 35        	addiw	a0, a0, -0x1
8023200a: 36 05        	slli	a0, a0, 0xd
8023200c: 23 34 15 02  	sd	ra, 0x28(a0)
80232010: 23 38 25 02  	sd	sp, 0x30(a0)
80232014: 23 3c 35 02  	sd	gp, 0x38(a0)
80232018: 23 30 45 04  	sd	tp, 0x40(a0)
8023201c: 23 34 55 04  	sd	t0, 0x48(a0)
80232020: 23 38 65 04  	sd	t1, 0x50(a0)
80232024: 23 3c 75 04  	sd	t2, 0x58(a0)
80232028: 20 f1        	sd	s0, 0x60(a0)
8023202a: 24 f5        	sd	s1, 0x68(a0)
8023202c: 2c fd        	sd	a1, 0x78(a0)
8023202e: 50 e1        	sd	a2, 0x80(a0)
80232030: 54 e5        	sd	a3, 0x88(a0)
80232032: 58 e9        	sd	a4, 0x90(a0)
80232034: 5c ed        	sd	a5, 0x98(a0)
80232036: 23 30 05 0b  	sd	a6, 0xa0(a0)
8023203a: 23 34 15 0b  	sd	a7, 0xa8(a0)
8023203e: 23 38 25 0b  	sd	s2, 0xb0(a0)
80232042: 23 3c 35 0b  	sd	s3, 0xb8(a0)
80232046: 23 30 45 0d  	sd	s4, 0xc0(a0)
8023204a: 23 34 55 0d  	sd	s5, 0xc8(a0)
8023204e: 23 38 65 0d  	sd	s6, 0xd0(a0)
80232052: 23 3c 75 0d  	sd	s7, 0xd8(a0)
80232056: 23 30 85 0f  	sd	s8, 0xe0(a0)
8023205a: 23 34 95 0f  	sd	s9, 0xe8(a0)
8023205e: 23 38 a5 0f  	sd	s10, 0xf0(a0)
80232062: 23 3c b5 0f  	sd	s11, 0xf8(a0)
80232066: 23 30 c5 11  	sd	t3, 0x100(a0)
8023206a: 23 34 d5 11  	sd	t4, 0x108(a0)
8023206e: 23 38 e5 11  	sd	t5, 0x110(a0)
80232072: 23 3c f5 11  	sd	t6, 0x118(a0)
80232076: f3 22 00 14  	csrr	t0, sscratch
8023207a: 23 38 55 06  	sd	t0, 0x70(a0)
8023207e: 03 31 85 00  	ld	sp, 0x8(a0)
80232082: 03 32 05 02  	ld	tp, 0x20(a0)
80232086: 83 32 05 01  	ld	t0, 0x10(a0)
8023208a: 03 33 05 00  	ld	t1, 0x0(a0)
8023208e: 73 00 00 12  	sfence.vma
80232092: 73 10 03 18  	csrw	satp, t1
80232096: 73 00 00 12  	sfence.vma
8023209a: 82 82        	jr	t0

000000008023209c <userret>:
8023209c: 73 00 00 12  	sfence.vma
802320a0: 73 10 05 18  	csrw	satp, a0
802320a4: 73 00 00 12  	sfence.vma
802320a8: 37 05 00 02  	lui	a0, 0x2000
802320ac: 7d 35        	addiw	a0, a0, -0x1
802320ae: 36 05        	slli	a0, a0, 0xd
802320b0: 83 30 85 02  	ld	ra, 0x28(a0)
802320b4: 03 31 05 03  	ld	sp, 0x30(a0)
802320b8: 83 31 85 03  	ld	gp, 0x38(a0)
802320bc: 03 32 05 04  	ld	tp, 0x40(a0)
802320c0: 83 32 85 04  	ld	t0, 0x48(a0)
802320c4: 03 33 05 05  	ld	t1, 0x50(a0)
802320c8: 83 33 85 05  	ld	t2, 0x58(a0)
802320cc: 20 71        	ld	s0, 0x60(a0)
802320ce: 24 75        	ld	s1, 0x68(a0)
802320d0: 2c 7d        	ld	a1, 0x78(a0)
802320d2: 50 61        	ld	a2, 0x80(a0)
802320d4: 54 65        	ld	a3, 0x88(a0)
802320d6: 58 69        	ld	a4, 0x90(a0)
802320d8: 5c 6d        	ld	a5, 0x98(a0)
802320da: 03 38 05 0a  	ld	a6, 0xa0(a0)
802320de: 83 38 85 0a  	ld	a7, 0xa8(a0)
802320e2: 03 39 05 0b  	ld	s2, 0xb0(a0)
802320e6: 83 39 85 0b  	ld	s3, 0xb8(a0)
802320ea: 03 3a 05 0c  	ld	s4, 0xc0(a0)
802320ee: 83 3a 85 0c  	ld	s5, 0xc8(a0)
802320f2: 03 3b 05 0d  	ld	s6, 0xd0(a0)
802320f6: 83 3b 85 0d  	ld	s7, 0xd8(a0)
802320fa: 03 3c 05 0e  	ld	s8, 0xe0(a0)
802320fe: 83 3c 85 0e  	ld	s9, 0xe8(a0)
80232102: 03 3d 05 0f  	ld	s10, 0xf0(a0)
80232106: 83 3d 85 0f  	ld	s11, 0xf8(a0)
8023210a: 03 3e 05 10  	ld	t3, 0x100(a0)
8023210e: 83 3e 85 10  	ld	t4, 0x108(a0)
80232112: 03 3f 05 11  	ld	t5, 0x110(a0)
80232116: 83 3f 85 11  	ld	t6, 0x118(a0)
8023211a: 28 79        	ld	a0, 0x70(a0)
8023211c: 73 00 20 10  	sret
		...
